
NYC_PI_CALC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000041c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000076  00802000  000041c0  00004254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001075  00802076  00802076  000042ca  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000042ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004328  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007f0  00000000  00000000  00004368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e155  00000000  00000000  00004b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004cce  00000000  00000000  00012cad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005025  00000000  00000000  0001797b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001b10  00000000  00000000  0001c9a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005642  00000000  00000000  0001e4b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008afa  00000000  00000000  00023af2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007d0  00000000  00000000  0002c5ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 22 01 	jmp	0x244	; 0x244 <__ctors_end>
       4:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
       8:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
       c:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      10:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      14:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      18:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      1c:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      20:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      24:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      28:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      2c:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      30:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      34:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      38:	0c 94 2a 06 	jmp	0xc54	; 0xc54 <__vector_14>
      3c:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      40:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      44:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      48:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      4c:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      50:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      54:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      58:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      5c:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      60:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      64:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      68:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      6c:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      70:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      74:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      78:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      7c:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      80:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      84:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      88:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      8c:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      90:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      94:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      98:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      9c:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      a0:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      a4:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      a8:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      ac:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      b0:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      b4:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      b8:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      bc:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      c0:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      c4:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      c8:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      cc:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      d0:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      d4:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      d8:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      dc:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      e0:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      e4:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      e8:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      ec:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      f0:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      f4:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      f8:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
      fc:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     100:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     104:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     108:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     10c:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     110:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     114:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     118:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     11c:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     120:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     124:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     128:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     12c:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     130:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     134:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     138:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     13c:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     140:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     144:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     148:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     14c:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     150:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     154:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     158:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     15c:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     160:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     164:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     168:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     16c:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     170:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     174:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     178:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     17c:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     180:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     184:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     188:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     18c:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     190:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     194:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     198:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     19c:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     1a0:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     1a4:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     1a8:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     1ac:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     1b0:	0c 94 49 18 	jmp	0x3092	; 0x3092 <__vector_108>
     1b4:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     1b8:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     1bc:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     1c0:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     1c4:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     1c8:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     1cc:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     1d0:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     1d4:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     1d8:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     1dc:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     1e0:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     1e4:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     1e8:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     1ec:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     1f0:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     1f4:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     1f8:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
     1fc:	e3 11       	cpse	r30, r3
     1fe:	e3 11       	cpse	r30, r3
     200:	e3 11       	cpse	r30, r3
     202:	30 12       	cpse	r3, r16
     204:	18 12       	cpse	r1, r24
     206:	2d 12       	cpse	r2, r29
     208:	e3 11       	cpse	r30, r3
     20a:	e3 11       	cpse	r30, r3
     20c:	30 12       	cpse	r3, r16
     20e:	18 12       	cpse	r1, r24

00000210 <__trampolines_start>:
     210:	0c 94 01 13 	jmp	0x2602	; 0x2602 <vCompare>
     214:	0c 94 3a 0b 	jmp	0x1674	; 0x1674 <prvIdleTask>
     218:	0c 94 20 13 	jmp	0x2640	; 0x2640 <vVietaPi>
     21c:	0c 94 18 12 	jmp	0x2430	; 0x2430 <prvProcessReceivedCommands+0xf2>
     220:	0c 94 30 12 	jmp	0x2460	; 0x2460 <prvProcessReceivedCommands+0x122>
     224:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <controllerTask>
     228:	0c 94 4c 12 	jmp	0x2498	; 0x2498 <prvTimerTask>
     22c:	0c 94 5c 13 	jmp	0x26b8	; 0x26b8 <vDisplaytask>
     230:	0c 94 ba 12 	jmp	0x2574	; 0x2574 <vPiLeibniz>
     234:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <prvProcessReceivedCommands+0x88>
     238:	0c 94 2d 12 	jmp	0x245a	; 0x245a <prvProcessReceivedCommands+0x11c>
     23c:	0c 94 ed 19 	jmp	0x33da	; 0x33da <vDisplayUpdateTask>
     240:	0c 94 08 04 	jmp	0x810	; 0x810 <vEventGroupSetBitsCallback>

00000244 <__ctors_end>:
     244:	11 24       	eor	r1, r1
     246:	1f be       	out	0x3f, r1	; 63
     248:	cf ef       	ldi	r28, 0xFF	; 255
     24a:	cd bf       	out	0x3d, r28	; 61
     24c:	df e3       	ldi	r29, 0x3F	; 63
     24e:	de bf       	out	0x3e, r29	; 62
     250:	00 e0       	ldi	r16, 0x00	; 0
     252:	0c bf       	out	0x3c, r16	; 60

00000254 <init_mem>:
// !!! Never call this function, it is part of .init-Code
void __attribute__ ((naked, section(".init3"))) init_mem (void);
void init_mem (void)
{
   //  Use inline assembler so it works even with optimization turned off
   __asm volatile (
     254:	eb ee       	ldi	r30, 0xEB	; 235
     256:	f0 e3       	ldi	r31, 0x30	; 48
     258:	8a ea       	ldi	r24, 0xAA	; 170
     25a:	90 e4       	ldi	r25, 0x40	; 64
     25c:	81 93       	st	Z+, r24
     25e:	e0 30       	cpi	r30, 0x00	; 0
     260:	f9 07       	cpc	r31, r25
     262:	e0 f3       	brcs	.-8      	; 0x25c <init_mem+0x8>

00000264 <__do_copy_data>:
     264:	10 e2       	ldi	r17, 0x20	; 32
     266:	a0 e0       	ldi	r26, 0x00	; 0
     268:	b0 e2       	ldi	r27, 0x20	; 32
     26a:	e0 ec       	ldi	r30, 0xC0	; 192
     26c:	f1 e4       	ldi	r31, 0x41	; 65
     26e:	00 e0       	ldi	r16, 0x00	; 0
     270:	0b bf       	out	0x3b, r16	; 59
     272:	02 c0       	rjmp	.+4      	; 0x278 <__do_copy_data+0x14>
     274:	07 90       	elpm	r0, Z+
     276:	0d 92       	st	X+, r0
     278:	a6 37       	cpi	r26, 0x76	; 118
     27a:	b1 07       	cpc	r27, r17
     27c:	d9 f7       	brne	.-10     	; 0x274 <__do_copy_data+0x10>

0000027e <__do_clear_bss>:
     27e:	20 e3       	ldi	r18, 0x30	; 48
     280:	a6 e7       	ldi	r26, 0x76	; 118
     282:	b0 e2       	ldi	r27, 0x20	; 32
     284:	01 c0       	rjmp	.+2      	; 0x288 <.do_clear_bss_start>

00000286 <.do_clear_bss_loop>:
     286:	1d 92       	st	X+, r1

00000288 <.do_clear_bss_start>:
     288:	ab 3e       	cpi	r26, 0xEB	; 235
     28a:	b2 07       	cpc	r27, r18
     28c:	e1 f7       	brne	.-8      	; 0x286 <.do_clear_bss_loop>
     28e:	0e 94 41 14 	call	0x2882	; 0x2882 <main>
     292:	0c 94 de 20 	jmp	0x41bc	; 0x41bc <_exit>

00000296 <__bad_interrupt>:
     296:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000029a <initButtons>:
 #define BUTTON_PRESS_LONG			500

 

 void initButtons(void) {
	PORTF.DIRCLR = PIN4_bm; //SW1
     29a:	e0 ea       	ldi	r30, 0xA0	; 160
     29c:	f6 e0       	ldi	r31, 0x06	; 6
     29e:	80 e1       	ldi	r24, 0x10	; 16
     2a0:	82 83       	std	Z+2, r24	; 0x02
	PORTF.DIRCLR = PIN5_bm; //SW2
     2a2:	80 e2       	ldi	r24, 0x20	; 32
     2a4:	82 83       	std	Z+2, r24	; 0x02
	PORTF.DIRCLR = PIN6_bm; //SW3
     2a6:	80 e4       	ldi	r24, 0x40	; 64
     2a8:	82 83       	std	Z+2, r24	; 0x02
	PORTF.DIRCLR = PIN7_bm; //SW4
     2aa:	80 e8       	ldi	r24, 0x80	; 128
     2ac:	82 83       	std	Z+2, r24	; 0x02
     2ae:	08 95       	ret

000002b0 <updateButtons>:
 void updateButtons(void) {
	static uint16_t b1Count = 0;
	static uint16_t b2Count = 0;
	static uint16_t b3Count = 0;
	static uint16_t b4Count = 0;
	if(Button1_Value == 0) {
     2b0:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7de6a8>
     2b4:	84 fd       	sbrc	r24, 4
     2b6:	0e c0       	rjmp	.+28     	; 0x2d4 <updateButtons+0x24>
		if(b1Count < 60000) {
     2b8:	80 91 7c 20 	lds	r24, 0x207C	; 0x80207c <b1Count.3829>
     2bc:	90 91 7d 20 	lds	r25, 0x207D	; 0x80207d <b1Count.3829+0x1>
     2c0:	80 36       	cpi	r24, 0x60	; 96
     2c2:	2a ee       	ldi	r18, 0xEA	; 234
     2c4:	92 07       	cpc	r25, r18
     2c6:	e8 f4       	brcc	.+58     	; 0x302 <updateButtons+0x52>
			b1Count++;
     2c8:	01 96       	adiw	r24, 0x01	; 1
     2ca:	80 93 7c 20 	sts	0x207C, r24	; 0x80207c <b1Count.3829>
     2ce:	90 93 7d 20 	sts	0x207D, r25	; 0x80207d <b1Count.3829+0x1>
     2d2:	17 c0       	rjmp	.+46     	; 0x302 <updateButtons+0x52>
		}
	} else {
		if(b1Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     2d4:	80 91 7c 20 	lds	r24, 0x207C	; 0x80207c <b1Count.3829>
     2d8:	90 91 7d 20 	lds	r25, 0x207D	; 0x80207d <b1Count.3829+0x1>
     2dc:	8b 30       	cpi	r24, 0x0B	; 11
     2de:	91 05       	cpc	r25, r1
     2e0:	48 f0       	brcs	.+18     	; 0x2f4 <updateButtons+0x44>
			if(b1Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     2e2:	c3 97       	sbiw	r24, 0x33	; 51
     2e4:	18 f0       	brcs	.+6      	; 0x2ec <updateButtons+0x3c>
				//Button was pressed Long
				b1Status = LONG_PRESSED;
     2e6:	10 92 e2 30 	sts	0x30E2, r1	; 0x8030e2 <b1Status>
     2ea:	07 c0       	rjmp	.+14     	; 0x2fa <updateButtons+0x4a>
			} else {
				//Button was pressed Short	
				b1Status = SHORT_PRESSED;
     2ec:	81 e0       	ldi	r24, 0x01	; 1
     2ee:	80 93 e2 30 	sts	0x30E2, r24	; 0x8030e2 <b1Status>
     2f2:	03 c0       	rjmp	.+6      	; 0x2fa <updateButtons+0x4a>
			}
		} else {
			b1Status = NOT_PRESSED;
     2f4:	82 e0       	ldi	r24, 0x02	; 2
     2f6:	80 93 e2 30 	sts	0x30E2, r24	; 0x8030e2 <b1Status>
		}
		b1Count = 0;
     2fa:	10 92 7c 20 	sts	0x207C, r1	; 0x80207c <b1Count.3829>
     2fe:	10 92 7d 20 	sts	0x207D, r1	; 0x80207d <b1Count.3829+0x1>
	}
	if(Button2_Value == 0) {
     302:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7de6a8>
     306:	85 fd       	sbrc	r24, 5
     308:	0e c0       	rjmp	.+28     	; 0x326 <updateButtons+0x76>
		if(b2Count < 60000) {
     30a:	80 91 7a 20 	lds	r24, 0x207A	; 0x80207a <b2Count.3830>
     30e:	90 91 7b 20 	lds	r25, 0x207B	; 0x80207b <b2Count.3830+0x1>
     312:	80 36       	cpi	r24, 0x60	; 96
     314:	2a ee       	ldi	r18, 0xEA	; 234
     316:	92 07       	cpc	r25, r18
     318:	e8 f4       	brcc	.+58     	; 0x354 <updateButtons+0xa4>
			b2Count++;
     31a:	01 96       	adiw	r24, 0x01	; 1
     31c:	80 93 7a 20 	sts	0x207A, r24	; 0x80207a <b2Count.3830>
     320:	90 93 7b 20 	sts	0x207B, r25	; 0x80207b <b2Count.3830+0x1>
     324:	17 c0       	rjmp	.+46     	; 0x354 <updateButtons+0xa4>
		}
	} else {
		if(b2Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     326:	80 91 7a 20 	lds	r24, 0x207A	; 0x80207a <b2Count.3830>
     32a:	90 91 7b 20 	lds	r25, 0x207B	; 0x80207b <b2Count.3830+0x1>
     32e:	8b 30       	cpi	r24, 0x0B	; 11
     330:	91 05       	cpc	r25, r1
     332:	48 f0       	brcs	.+18     	; 0x346 <updateButtons+0x96>
			if(b2Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     334:	c3 97       	sbiw	r24, 0x33	; 51
     336:	18 f0       	brcs	.+6      	; 0x33e <updateButtons+0x8e>
				//Button was pressed Long
				b2Status = LONG_PRESSED;
     338:	10 92 e3 30 	sts	0x30E3, r1	; 0x8030e3 <b2Status>
     33c:	07 c0       	rjmp	.+14     	; 0x34c <updateButtons+0x9c>
				} else {
				//Button was pressed Short
				b2Status = SHORT_PRESSED;
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	80 93 e3 30 	sts	0x30E3, r24	; 0x8030e3 <b2Status>
     344:	03 c0       	rjmp	.+6      	; 0x34c <updateButtons+0x9c>
			}
		} else {
			b2Status = NOT_PRESSED;			
     346:	82 e0       	ldi	r24, 0x02	; 2
     348:	80 93 e3 30 	sts	0x30E3, r24	; 0x8030e3 <b2Status>
		}
		b2Count = 0;
     34c:	10 92 7a 20 	sts	0x207A, r1	; 0x80207a <b2Count.3830>
     350:	10 92 7b 20 	sts	0x207B, r1	; 0x80207b <b2Count.3830+0x1>
	}
	if(Button3_Value == 0) {
     354:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7de6a8>
     358:	86 fd       	sbrc	r24, 6
     35a:	0e c0       	rjmp	.+28     	; 0x378 <updateButtons+0xc8>
		if(b3Count < 60000) {
     35c:	80 91 78 20 	lds	r24, 0x2078	; 0x802078 <b3Count.3831>
     360:	90 91 79 20 	lds	r25, 0x2079	; 0x802079 <b3Count.3831+0x1>
     364:	80 36       	cpi	r24, 0x60	; 96
     366:	2a ee       	ldi	r18, 0xEA	; 234
     368:	92 07       	cpc	r25, r18
     36a:	e8 f4       	brcc	.+58     	; 0x3a6 <updateButtons+0xf6>
			b3Count++;
     36c:	01 96       	adiw	r24, 0x01	; 1
     36e:	80 93 78 20 	sts	0x2078, r24	; 0x802078 <b3Count.3831>
     372:	90 93 79 20 	sts	0x2079, r25	; 0x802079 <b3Count.3831+0x1>
     376:	17 c0       	rjmp	.+46     	; 0x3a6 <updateButtons+0xf6>
		}
	} else {
		if(b3Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     378:	80 91 78 20 	lds	r24, 0x2078	; 0x802078 <b3Count.3831>
     37c:	90 91 79 20 	lds	r25, 0x2079	; 0x802079 <b3Count.3831+0x1>
     380:	8b 30       	cpi	r24, 0x0B	; 11
     382:	91 05       	cpc	r25, r1
     384:	48 f0       	brcs	.+18     	; 0x398 <updateButtons+0xe8>
			if(b3Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     386:	c3 97       	sbiw	r24, 0x33	; 51
     388:	18 f0       	brcs	.+6      	; 0x390 <updateButtons+0xe0>
				//Button was pressed Long
				b3Status = LONG_PRESSED;
     38a:	10 92 e4 30 	sts	0x30E4, r1	; 0x8030e4 <b3Status>
     38e:	07 c0       	rjmp	.+14     	; 0x39e <updateButtons+0xee>
				} else {
				//Button was pressed Short
				b3Status = SHORT_PRESSED;
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	80 93 e4 30 	sts	0x30E4, r24	; 0x8030e4 <b3Status>
     396:	03 c0       	rjmp	.+6      	; 0x39e <updateButtons+0xee>
			}
		} else {
			b3Status = NOT_PRESSED;
     398:	82 e0       	ldi	r24, 0x02	; 2
     39a:	80 93 e4 30 	sts	0x30E4, r24	; 0x8030e4 <b3Status>
		}
		b3Count = 0;
     39e:	10 92 78 20 	sts	0x2078, r1	; 0x802078 <b3Count.3831>
     3a2:	10 92 79 20 	sts	0x2079, r1	; 0x802079 <b3Count.3831+0x1>
	}
	if(Button4_Value == 0) {
     3a6:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7de6a8>
     3aa:	88 23       	and	r24, r24
     3ac:	74 f0       	brlt	.+28     	; 0x3ca <updateButtons+0x11a>
		if(b4Count < 60000) {
     3ae:	80 91 76 20 	lds	r24, 0x2076	; 0x802076 <__data_end>
     3b2:	90 91 77 20 	lds	r25, 0x2077	; 0x802077 <__data_end+0x1>
     3b6:	80 36       	cpi	r24, 0x60	; 96
     3b8:	2a ee       	ldi	r18, 0xEA	; 234
     3ba:	92 07       	cpc	r25, r18
     3bc:	e8 f4       	brcc	.+58     	; 0x3f8 <updateButtons+0x148>
			b4Count++;
     3be:	01 96       	adiw	r24, 0x01	; 1
     3c0:	80 93 76 20 	sts	0x2076, r24	; 0x802076 <__data_end>
     3c4:	90 93 77 20 	sts	0x2077, r25	; 0x802077 <__data_end+0x1>
     3c8:	08 95       	ret
		}
	} else {
		if(b4Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     3ca:	80 91 76 20 	lds	r24, 0x2076	; 0x802076 <__data_end>
     3ce:	90 91 77 20 	lds	r25, 0x2077	; 0x802077 <__data_end+0x1>
     3d2:	8b 30       	cpi	r24, 0x0B	; 11
     3d4:	91 05       	cpc	r25, r1
     3d6:	48 f0       	brcs	.+18     	; 0x3ea <updateButtons+0x13a>
			if(b4Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     3d8:	c3 97       	sbiw	r24, 0x33	; 51
     3da:	18 f0       	brcs	.+6      	; 0x3e2 <updateButtons+0x132>
				//Button was pressed Long
				b4Status = LONG_PRESSED;
     3dc:	10 92 e5 30 	sts	0x30E5, r1	; 0x8030e5 <b4Status>
     3e0:	07 c0       	rjmp	.+14     	; 0x3f0 <updateButtons+0x140>
				} else {
				//Button was pressed Short
				b4Status = SHORT_PRESSED;
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	80 93 e5 30 	sts	0x30E5, r24	; 0x8030e5 <b4Status>
     3e8:	03 c0       	rjmp	.+6      	; 0x3f0 <updateButtons+0x140>
			}
		} else {
			b4Status = NOT_PRESSED;
     3ea:	82 e0       	ldi	r24, 0x02	; 2
     3ec:	80 93 e5 30 	sts	0x30E5, r24	; 0x8030e5 <b4Status>
		}
		b4Count = 0;
     3f0:	10 92 76 20 	sts	0x2076, r1	; 0x802076 <__data_end>
     3f4:	10 92 77 20 	sts	0x2077, r1	; 0x802077 <__data_end+0x1>
     3f8:	08 95       	ret

000003fa <getButtonPress>:
	}
 }

 button_press_t getButtonPress(button_t button) {
	switch(button) {
     3fa:	81 30       	cpi	r24, 0x01	; 1
     3fc:	49 f0       	breq	.+18     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     3fe:	28 f0       	brcs	.+10     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     400:	82 30       	cpi	r24, 0x02	; 2
     402:	49 f0       	breq	.+18     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     404:	83 30       	cpi	r24, 0x03	; 3
     406:	51 f0       	breq	.+20     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     408:	0c c0       	rjmp	.+24     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		case BUTTON1:
			return b1Status;
     40a:	80 91 e2 30 	lds	r24, 0x30E2	; 0x8030e2 <b1Status>
     40e:	08 95       	ret
		break;
		case BUTTON2:
			return b2Status;
     410:	80 91 e3 30 	lds	r24, 0x30E3	; 0x8030e3 <b2Status>
     414:	08 95       	ret
		break;
		case BUTTON3:
			return b3Status;
     416:	80 91 e4 30 	lds	r24, 0x30E4	; 0x8030e4 <b3Status>
     41a:	08 95       	ret
		break;
		case BUTTON4:
			return b4Status;
     41c:	80 91 e5 30 	lds	r24, 0x30E5	; 0x8030e5 <b4Status>
     420:	08 95       	ret
		break;
	}
	return NOT_PRESSED;
     422:	82 e0       	ldi	r24, 0x02	; 2
     424:	08 95       	ret

00000426 <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
     426:	0f 93       	push	r16
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
     42c:	1f 92       	push	r1
     42e:	cd b7       	in	r28, 0x3d	; 61
     430:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
     432:	2f b7       	in	r18, 0x3f	; 63
     434:	29 83       	std	Y+1, r18	; 0x01
     436:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
     438:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
     43a:	fc 01       	movw	r30, r24
     43c:	08 ed       	ldi	r16, 0xD8	; 216
     43e:	04 bf       	out	0x34, r16	; 52
     440:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
     442:	89 81       	ldd	r24, Y+1	; 0x01
     444:	8f bf       	out	0x3f, r24	; 63
#endif
}
     446:	0f 90       	pop	r0
     448:	df 91       	pop	r29
     44a:	cf 91       	pop	r28
     44c:	0f 91       	pop	r16
     44e:	08 95       	ret

00000450 <CLKSYS_XOSC_Config>:
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
	OSC.XOSCCTRL = (uint8_t) freqRange |
     450:	66 23       	and	r22, r22
     452:	11 f0       	breq	.+4      	; 0x458 <CLKSYS_XOSC_Config+0x8>
     454:	90 e2       	ldi	r25, 0x20	; 32
     456:	01 c0       	rjmp	.+2      	; 0x45a <CLKSYS_XOSC_Config+0xa>
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	89 2b       	or	r24, r25
     45c:	48 2b       	or	r20, r24
     45e:	40 93 52 00 	sts	0x0052, r20	; 0x800052 <__TEXT_REGION_LENGTH__+0x7de052>
     462:	08 95       	ret

00000464 <CLKSYS_PLL_Config>:
 *  \param  factor      PLL multiplication factor, must be
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
	factor &= OSC_PLLFAC_gm;
     464:	6f 71       	andi	r22, 0x1F	; 31
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
     466:	86 2b       	or	r24, r22
     468:	80 93 55 00 	sts	0x0055, r24	; 0x800055 <__TEXT_REGION_LENGTH__+0x7de055>
     46c:	08 95       	ret

0000046e <CLKSYS_Disable>:
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
     46e:	e0 e5       	ldi	r30, 0x50	; 80
     470:	f0 e0       	ldi	r31, 0x00	; 0
     472:	90 81       	ld	r25, Z
     474:	28 2f       	mov	r18, r24
     476:	20 95       	com	r18
     478:	92 23       	and	r25, r18
     47a:	90 83       	st	Z, r25
	uint8_t clkEnabled = OSC.CTRL & oscSel;
     47c:	90 81       	ld	r25, Z
	return clkEnabled;
}
     47e:	89 23       	and	r24, r25
     480:	08 95       	ret

00000482 <CLKSYS_Prescalers_Config>:
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
     482:	68 2b       	or	r22, r24
	CCPWrite( &CLK.PSCTRL, PSconfig );
     484:	81 e4       	ldi	r24, 0x41	; 65
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	0e 94 13 02 	call	0x426	; 0x426 <CCPWrite>
     48c:	08 95       	ret

0000048e <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     48e:	0f 93       	push	r16
     490:	1f 93       	push	r17
     492:	cf 93       	push	r28
     494:	c8 2f       	mov	r28, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     496:	00 e4       	ldi	r16, 0x40	; 64
     498:	10 e0       	ldi	r17, 0x00	; 0
     49a:	f8 01       	movw	r30, r16
     49c:	60 81       	ld	r22, Z
     49e:	68 7f       	andi	r22, 0xF8	; 248
     4a0:	68 2b       	or	r22, r24
	CCPWrite( &CLK.CTRL, clkCtrl );
     4a2:	80 e4       	ldi	r24, 0x40	; 64
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	0e 94 13 02 	call	0x426	; 0x426 <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
     4aa:	f8 01       	movw	r30, r16
     4ac:	80 81       	ld	r24, Z
	return clkCtrl;
}
     4ae:	8c 23       	and	r24, r28
     4b0:	cf 91       	pop	r28
     4b2:	1f 91       	pop	r17
     4b4:	0f 91       	pop	r16
     4b6:	08 95       	ret

000004b8 <TC0_ConfigClockSource>:
{
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
     4b8:	fc 01       	movw	r30, r24
     4ba:	90 81       	ld	r25, Z
     4bc:	90 7f       	andi	r25, 0xF0	; 240
     4be:	69 2b       	or	r22, r25
     4c0:	60 83       	st	Z, r22
     4c2:	08 95       	ret

000004c4 <TC0_ConfigWGM>:
     4c4:	fc 01       	movw	r30, r24
     4c6:	91 81       	ldd	r25, Z+1	; 0x01
     4c8:	98 7f       	andi	r25, 0xF8	; 248
     4ca:	69 2b       	or	r22, r25
     4cc:	61 83       	std	Z+1, r22	; 0x01
     4ce:	08 95       	ret

000004d0 <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
     4d0:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
     4d2:	96 81       	ldd	r25, Z+6	; 0x06
     4d4:	9c 7f       	andi	r25, 0xFC	; 252
     4d6:	69 2b       	or	r22, r25
     4d8:	66 83       	std	Z+6, r22	; 0x06
     4da:	08 95       	ret

000004dc <software_reset>:
 //----------------------------------------------
 // catch heap overflow
 //
 void vApplicationMallocFailedHook( void )
 {
	 error(ERR_LOW_HEAP_SPACE);
     4dc:	00 00       	nop
     4de:	88 ed       	ldi	r24, 0xD8	; 216
     4e0:	84 bf       	out	0x34, r24	; 52
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <__TEXT_REGION_LENGTH__+0x7de079>
     4e8:	08 95       	ret

000004ea <error>:
     4ea:	0e 94 6e 02 	call	0x4dc	; 0x4dc <software_reset>
     4ee:	08 95       	ret

000004f0 <vApplicationStackOverflowHook>:
 {
	 /* Just to stop compiler warnings. */
	 (void) pxTask;
	 (void) pcTaskName;

	 error(ERR_STACK_OVERFLOW);
     4f0:	8b e2       	ldi	r24, 0x2B	; 43
     4f2:	0e 94 75 02 	call	0x4ea	; 0x4ea <error>
     4f6:	08 95       	ret

000004f8 <prvTestWaitCondition>:
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
}
     4f8:	0f 93       	push	r16
     4fa:	01 11       	cpse	r16, r1
     4fc:	0c c0       	rjmp	.+24     	; 0x516 <prvTestWaitCondition+0x1e>
     4fe:	dc 01       	movw	r26, r24
     500:	cb 01       	movw	r24, r22
     502:	82 23       	and	r24, r18
     504:	93 23       	and	r25, r19
     506:	a4 23       	and	r26, r20
     508:	b5 23       	and	r27, r21
     50a:	89 2b       	or	r24, r25
     50c:	8a 2b       	or	r24, r26
     50e:	8b 2b       	or	r24, r27
     510:	79 f4       	brne	.+30     	; 0x530 <prvTestWaitCondition+0x38>
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	10 c0       	rjmp	.+32     	; 0x536 <prvTestWaitCondition+0x3e>
     516:	dc 01       	movw	r26, r24
     518:	cb 01       	movw	r24, r22
     51a:	82 23       	and	r24, r18
     51c:	93 23       	and	r25, r19
     51e:	a4 23       	and	r26, r20
     520:	b5 23       	and	r27, r21
     522:	28 17       	cp	r18, r24
     524:	39 07       	cpc	r19, r25
     526:	4a 07       	cpc	r20, r26
     528:	5b 07       	cpc	r21, r27
     52a:	21 f0       	breq	.+8      	; 0x534 <prvTestWaitCondition+0x3c>
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	03 c0       	rjmp	.+6      	; 0x536 <prvTestWaitCondition+0x3e>
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	01 c0       	rjmp	.+2      	; 0x536 <prvTestWaitCondition+0x3e>
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	0f 91       	pop	r16
     538:	08 95       	ret

0000053a <xEventGroupCreate>:
     53a:	cf 93       	push	r28
     53c:	df 93       	push	r29
     53e:	80 e1       	ldi	r24, 0x10	; 16
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	0e 94 18 04 	call	0x830	; 0x830 <pvPortMalloc>
     546:	ec 01       	movw	r28, r24
     548:	00 97       	sbiw	r24, 0x00	; 0
     54a:	41 f0       	breq	.+16     	; 0x55c <xEventGroupCreate+0x22>
     54c:	fc 01       	movw	r30, r24
     54e:	11 92       	st	Z+, r1
     550:	11 92       	st	Z+, r1
     552:	11 92       	st	Z+, r1
     554:	11 92       	st	Z+, r1
     556:	cf 01       	movw	r24, r30
     558:	0e 94 3f 04 	call	0x87e	; 0x87e <vListInitialise>
     55c:	ce 01       	movw	r24, r28
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	08 95       	ret

00000564 <xEventGroupWaitBits>:
     564:	2f 92       	push	r2
     566:	3f 92       	push	r3
     568:	4f 92       	push	r4
     56a:	5f 92       	push	r5
     56c:	6f 92       	push	r6
     56e:	7f 92       	push	r7
     570:	8f 92       	push	r8
     572:	9f 92       	push	r9
     574:	af 92       	push	r10
     576:	bf 92       	push	r11
     578:	cf 92       	push	r12
     57a:	df 92       	push	r13
     57c:	ef 92       	push	r14
     57e:	ff 92       	push	r15
     580:	0f 93       	push	r16
     582:	1f 93       	push	r17
     584:	cf 93       	push	r28
     586:	df 93       	push	r29
     588:	ec 01       	movw	r28, r24
     58a:	4a 01       	movw	r8, r20
     58c:	5b 01       	movw	r10, r22
     58e:	62 2e       	mov	r6, r18
     590:	70 2e       	mov	r7, r16
     592:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <vTaskSuspendAll>
     596:	28 80       	ld	r2, Y
     598:	39 80       	ldd	r3, Y+1	; 0x01
     59a:	4a 80       	ldd	r4, Y+2	; 0x02
     59c:	5b 80       	ldd	r5, Y+3	; 0x03
     59e:	a5 01       	movw	r20, r10
     5a0:	94 01       	movw	r18, r8
     5a2:	c2 01       	movw	r24, r4
     5a4:	b1 01       	movw	r22, r2
     5a6:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <prvTestWaitCondition>
     5aa:	88 23       	and	r24, r24
     5ac:	a1 f0       	breq	.+40     	; 0x5d6 <xEventGroupWaitBits+0x72>
     5ae:	66 20       	and	r6, r6
     5b0:	89 f1       	breq	.+98     	; 0x614 <xEventGroupWaitBits+0xb0>
     5b2:	d5 01       	movw	r26, r10
     5b4:	c4 01       	movw	r24, r8
     5b6:	80 95       	com	r24
     5b8:	90 95       	com	r25
     5ba:	a0 95       	com	r26
     5bc:	b0 95       	com	r27
     5be:	82 21       	and	r24, r2
     5c0:	93 21       	and	r25, r3
     5c2:	a4 21       	and	r26, r4
     5c4:	b5 21       	and	r27, r5
     5c6:	88 83       	st	Y, r24
     5c8:	99 83       	std	Y+1, r25	; 0x01
     5ca:	aa 83       	std	Y+2, r26	; 0x02
     5cc:	bb 83       	std	Y+3, r27	; 0x03
     5ce:	c1 2c       	mov	r12, r1
     5d0:	d1 2c       	mov	r13, r1
     5d2:	76 01       	movw	r14, r12
     5d4:	22 c0       	rjmp	.+68     	; 0x61a <xEventGroupWaitBits+0xb6>
     5d6:	c1 14       	cp	r12, r1
     5d8:	d1 04       	cpc	r13, r1
     5da:	e1 04       	cpc	r14, r1
     5dc:	f1 04       	cpc	r15, r1
     5de:	e9 f0       	breq	.+58     	; 0x61a <xEventGroupWaitBits+0xb6>
     5e0:	61 10       	cpse	r6, r1
     5e2:	04 c0       	rjmp	.+8      	; 0x5ec <xEventGroupWaitBits+0x88>
     5e4:	40 e0       	ldi	r20, 0x00	; 0
     5e6:	50 e0       	ldi	r21, 0x00	; 0
     5e8:	ba 01       	movw	r22, r20
     5ea:	04 c0       	rjmp	.+8      	; 0x5f4 <xEventGroupWaitBits+0x90>
     5ec:	40 e0       	ldi	r20, 0x00	; 0
     5ee:	50 e0       	ldi	r21, 0x00	; 0
     5f0:	60 e0       	ldi	r22, 0x00	; 0
     5f2:	71 e0       	ldi	r23, 0x01	; 1
     5f4:	71 10       	cpse	r7, r1
     5f6:	74 60       	ori	r23, 0x04	; 4
     5f8:	48 29       	or	r20, r8
     5fa:	59 29       	or	r21, r9
     5fc:	6a 29       	or	r22, r10
     5fe:	7b 29       	or	r23, r11
     600:	97 01       	movw	r18, r14
     602:	86 01       	movw	r16, r12
     604:	ce 01       	movw	r24, r28
     606:	04 96       	adiw	r24, 0x04	; 4
     608:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <vTaskPlaceOnUnorderedEventList>
     60c:	21 2c       	mov	r2, r1
     60e:	31 2c       	mov	r3, r1
     610:	21 01       	movw	r4, r2
     612:	03 c0       	rjmp	.+6      	; 0x61a <xEventGroupWaitBits+0xb6>
     614:	c1 2c       	mov	r12, r1
     616:	d1 2c       	mov	r13, r1
     618:	76 01       	movw	r14, r12
     61a:	0e 94 ba 0c 	call	0x1974	; 0x1974 <xTaskResumeAll>
     61e:	cd 28       	or	r12, r13
     620:	ce 28       	or	r12, r14
     622:	cf 28       	or	r12, r15
     624:	89 f1       	breq	.+98     	; 0x688 <xEventGroupWaitBits+0x124>
     626:	81 11       	cpse	r24, r1
     628:	02 c0       	rjmp	.+4      	; 0x62e <xEventGroupWaitBits+0xca>
     62a:	0e 94 aa 05 	call	0xb54	; 0xb54 <vPortYield>
     62e:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <uxTaskResetEventItemValue>
     632:	6b 01       	movw	r12, r22
     634:	7c 01       	movw	r14, r24
     636:	91 fd       	sbrc	r25, 1
     638:	24 c0       	rjmp	.+72     	; 0x682 <xEventGroupWaitBits+0x11e>
     63a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     63e:	ff 93       	push	r31
     640:	f8 7f       	andi	r31, 0xF8	; 248
     642:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     646:	c8 80       	ld	r12, Y
     648:	d9 80       	ldd	r13, Y+1	; 0x01
     64a:	ea 80       	ldd	r14, Y+2	; 0x02
     64c:	fb 80       	ldd	r15, Y+3	; 0x03
     64e:	07 2d       	mov	r16, r7
     650:	a5 01       	movw	r20, r10
     652:	94 01       	movw	r18, r8
     654:	c7 01       	movw	r24, r14
     656:	b6 01       	movw	r22, r12
     658:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <prvTestWaitCondition>
     65c:	88 23       	and	r24, r24
     65e:	71 f0       	breq	.+28     	; 0x67c <xEventGroupWaitBits+0x118>
     660:	66 20       	and	r6, r6
     662:	61 f0       	breq	.+24     	; 0x67c <xEventGroupWaitBits+0x118>
     664:	80 94       	com	r8
     666:	90 94       	com	r9
     668:	a0 94       	com	r10
     66a:	b0 94       	com	r11
     66c:	8c 20       	and	r8, r12
     66e:	9d 20       	and	r9, r13
     670:	ae 20       	and	r10, r14
     672:	bf 20       	and	r11, r15
     674:	88 82       	st	Y, r8
     676:	99 82       	std	Y+1, r9	; 0x01
     678:	aa 82       	std	Y+2, r10	; 0x02
     67a:	bb 82       	std	Y+3, r11	; 0x03
     67c:	ff 91       	pop	r31
     67e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     682:	16 01       	movw	r2, r12
     684:	27 01       	movw	r4, r14
     686:	55 24       	eor	r5, r5
     688:	c2 01       	movw	r24, r4
     68a:	b1 01       	movw	r22, r2
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	1f 91       	pop	r17
     692:	0f 91       	pop	r16
     694:	ff 90       	pop	r15
     696:	ef 90       	pop	r14
     698:	df 90       	pop	r13
     69a:	cf 90       	pop	r12
     69c:	bf 90       	pop	r11
     69e:	af 90       	pop	r10
     6a0:	9f 90       	pop	r9
     6a2:	8f 90       	pop	r8
     6a4:	7f 90       	pop	r7
     6a6:	6f 90       	pop	r6
     6a8:	5f 90       	pop	r5
     6aa:	4f 90       	pop	r4
     6ac:	3f 90       	pop	r3
     6ae:	2f 90       	pop	r2
     6b0:	08 95       	ret

000006b2 <xEventGroupClearBits>:
     6b2:	0f 93       	push	r16
     6b4:	1f 93       	push	r17
     6b6:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     6ba:	ff 93       	push	r31
     6bc:	f8 7f       	andi	r31, 0xF8	; 248
     6be:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     6c2:	fc 01       	movw	r30, r24
     6c4:	00 81       	ld	r16, Z
     6c6:	11 81       	ldd	r17, Z+1	; 0x01
     6c8:	22 81       	ldd	r18, Z+2	; 0x02
     6ca:	33 81       	ldd	r19, Z+3	; 0x03
     6cc:	40 95       	com	r20
     6ce:	50 95       	com	r21
     6d0:	60 95       	com	r22
     6d2:	70 95       	com	r23
     6d4:	40 23       	and	r20, r16
     6d6:	51 23       	and	r21, r17
     6d8:	62 23       	and	r22, r18
     6da:	73 23       	and	r23, r19
     6dc:	40 83       	st	Z, r20
     6de:	51 83       	std	Z+1, r21	; 0x01
     6e0:	62 83       	std	Z+2, r22	; 0x02
     6e2:	73 83       	std	Z+3, r23	; 0x03
     6e4:	ff 91       	pop	r31
     6e6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     6ea:	c9 01       	movw	r24, r18
     6ec:	b8 01       	movw	r22, r16
     6ee:	1f 91       	pop	r17
     6f0:	0f 91       	pop	r16
     6f2:	08 95       	ret

000006f4 <xEventGroupSetBits>:
     6f4:	4f 92       	push	r4
     6f6:	5f 92       	push	r5
     6f8:	6f 92       	push	r6
     6fa:	7f 92       	push	r7
     6fc:	af 92       	push	r10
     6fe:	bf 92       	push	r11
     700:	cf 92       	push	r12
     702:	df 92       	push	r13
     704:	ef 92       	push	r14
     706:	ff 92       	push	r15
     708:	0f 93       	push	r16
     70a:	1f 93       	push	r17
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	ec 01       	movw	r28, r24
     712:	6a 01       	movw	r12, r20
     714:	7b 01       	movw	r14, r22
     716:	8c 01       	movw	r16, r24
     718:	09 5f       	subi	r16, 0xF9	; 249
     71a:	1f 4f       	sbci	r17, 0xFF	; 255
     71c:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <vTaskSuspendAll>
     720:	eb 85       	ldd	r30, Y+11	; 0x0b
     722:	fc 85       	ldd	r31, Y+12	; 0x0c
     724:	88 81       	ld	r24, Y
     726:	99 81       	ldd	r25, Y+1	; 0x01
     728:	aa 81       	ldd	r26, Y+2	; 0x02
     72a:	bb 81       	ldd	r27, Y+3	; 0x03
     72c:	c8 2a       	or	r12, r24
     72e:	d9 2a       	or	r13, r25
     730:	ea 2a       	or	r14, r26
     732:	fb 2a       	or	r15, r27
     734:	c8 82       	st	Y, r12
     736:	d9 82       	std	Y+1, r13	; 0x01
     738:	ea 82       	std	Y+2, r14	; 0x02
     73a:	fb 82       	std	Y+3, r15	; 0x03
     73c:	c1 2c       	mov	r12, r1
     73e:	d1 2c       	mov	r13, r1
     740:	76 01       	movw	r14, r12
     742:	3d c0       	rjmp	.+122    	; 0x7be <xEventGroupSetBits+0xca>
     744:	a4 80       	ldd	r10, Z+4	; 0x04
     746:	b5 80       	ldd	r11, Z+5	; 0x05
     748:	80 81       	ld	r24, Z
     74a:	91 81       	ldd	r25, Z+1	; 0x01
     74c:	a2 81       	ldd	r26, Z+2	; 0x02
     74e:	b3 81       	ldd	r27, Z+3	; 0x03
     750:	ac 01       	movw	r20, r24
     752:	bd 01       	movw	r22, r26
     754:	77 27       	eor	r23, r23
     756:	b2 fd       	sbrc	r27, 2
     758:	0e c0       	rjmp	.+28     	; 0x776 <xEventGroupSetBits+0x82>
     75a:	48 80       	ld	r4, Y
     75c:	59 80       	ldd	r5, Y+1	; 0x01
     75e:	6a 80       	ldd	r6, Y+2	; 0x02
     760:	7b 80       	ldd	r7, Y+3	; 0x03
     762:	44 22       	and	r4, r20
     764:	55 22       	and	r5, r21
     766:	66 22       	and	r6, r22
     768:	77 22       	and	r7, r23
     76a:	45 28       	or	r4, r5
     76c:	46 28       	or	r4, r6
     76e:	47 28       	or	r4, r7
     770:	89 f4       	brne	.+34     	; 0x794 <xEventGroupSetBits+0xa0>
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	12 c0       	rjmp	.+36     	; 0x79a <xEventGroupSetBits+0xa6>
     776:	48 80       	ld	r4, Y
     778:	59 80       	ldd	r5, Y+1	; 0x01
     77a:	6a 80       	ldd	r6, Y+2	; 0x02
     77c:	7b 80       	ldd	r7, Y+3	; 0x03
     77e:	44 22       	and	r4, r20
     780:	55 22       	and	r5, r21
     782:	66 22       	and	r6, r22
     784:	77 22       	and	r7, r23
     786:	44 15       	cp	r20, r4
     788:	55 05       	cpc	r21, r5
     78a:	66 05       	cpc	r22, r6
     78c:	77 05       	cpc	r23, r7
     78e:	21 f0       	breq	.+8      	; 0x798 <xEventGroupSetBits+0xa4>
     790:	20 e0       	ldi	r18, 0x00	; 0
     792:	03 c0       	rjmp	.+6      	; 0x79a <xEventGroupSetBits+0xa6>
     794:	21 e0       	ldi	r18, 0x01	; 1
     796:	01 c0       	rjmp	.+2      	; 0x79a <xEventGroupSetBits+0xa6>
     798:	21 e0       	ldi	r18, 0x01	; 1
     79a:	22 23       	and	r18, r18
     79c:	71 f0       	breq	.+28     	; 0x7ba <xEventGroupSetBits+0xc6>
     79e:	b0 ff       	sbrs	r27, 0
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <xEventGroupSetBits+0xb6>
     7a2:	c4 2a       	or	r12, r20
     7a4:	d5 2a       	or	r13, r21
     7a6:	e6 2a       	or	r14, r22
     7a8:	f7 2a       	or	r15, r23
     7aa:	48 81       	ld	r20, Y
     7ac:	59 81       	ldd	r21, Y+1	; 0x01
     7ae:	6a 81       	ldd	r22, Y+2	; 0x02
     7b0:	7b 81       	ldd	r23, Y+3	; 0x03
     7b2:	72 60       	ori	r23, 0x02	; 2
     7b4:	cf 01       	movw	r24, r30
     7b6:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <vTaskRemoveFromUnorderedEventList>
     7ba:	ea 2d       	mov	r30, r10
     7bc:	fb 2d       	mov	r31, r11
     7be:	e0 17       	cp	r30, r16
     7c0:	f1 07       	cpc	r31, r17
     7c2:	09 f0       	breq	.+2      	; 0x7c6 <xEventGroupSetBits+0xd2>
     7c4:	bf cf       	rjmp	.-130    	; 0x744 <xEventGroupSetBits+0x50>
     7c6:	c0 94       	com	r12
     7c8:	d0 94       	com	r13
     7ca:	e0 94       	com	r14
     7cc:	f0 94       	com	r15
     7ce:	88 81       	ld	r24, Y
     7d0:	99 81       	ldd	r25, Y+1	; 0x01
     7d2:	aa 81       	ldd	r26, Y+2	; 0x02
     7d4:	bb 81       	ldd	r27, Y+3	; 0x03
     7d6:	c8 22       	and	r12, r24
     7d8:	d9 22       	and	r13, r25
     7da:	ea 22       	and	r14, r26
     7dc:	fb 22       	and	r15, r27
     7de:	c8 82       	st	Y, r12
     7e0:	d9 82       	std	Y+1, r13	; 0x01
     7e2:	ea 82       	std	Y+2, r14	; 0x02
     7e4:	fb 82       	std	Y+3, r15	; 0x03
     7e6:	0e 94 ba 0c 	call	0x1974	; 0x1974 <xTaskResumeAll>
     7ea:	68 81       	ld	r22, Y
     7ec:	79 81       	ldd	r23, Y+1	; 0x01
     7ee:	8a 81       	ldd	r24, Y+2	; 0x02
     7f0:	9b 81       	ldd	r25, Y+3	; 0x03
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	1f 91       	pop	r17
     7f8:	0f 91       	pop	r16
     7fa:	ff 90       	pop	r15
     7fc:	ef 90       	pop	r14
     7fe:	df 90       	pop	r13
     800:	cf 90       	pop	r12
     802:	bf 90       	pop	r11
     804:	af 90       	pop	r10
     806:	7f 90       	pop	r7
     808:	6f 90       	pop	r6
     80a:	5f 90       	pop	r5
     80c:	4f 90       	pop	r4
     80e:	08 95       	ret

00000810 <vEventGroupSetBitsCallback>:
     810:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <xEventGroupSetBits>
     814:	08 95       	ret

00000816 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
     816:	0f 93       	push	r16
     818:	1f 93       	push	r17
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
     81a:	89 01       	movw	r16, r18
     81c:	9a 01       	movw	r18, r20
     81e:	ab 01       	movw	r20, r22
     820:	bc 01       	movw	r22, r24
     822:	88 e0       	ldi	r24, 0x08	; 8
     824:	94 e0       	ldi	r25, 0x04	; 4
     826:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <xTimerPendFunctionCallFromISR>

		return xReturn;
	}
     82a:	1f 91       	pop	r17
     82c:	0f 91       	pop	r16
     82e:	08 95       	ret

00000830 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     830:	cf 93       	push	r28
     832:	df 93       	push	r29
     834:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     836:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     83a:	20 91 7e 20 	lds	r18, 0x207E	; 0x80207e <xNextFreeByte>
     83e:	30 91 7f 20 	lds	r19, 0x207F	; 0x80207f <xNextFreeByte+0x1>
     842:	c9 01       	movw	r24, r18
     844:	8c 0f       	add	r24, r28
     846:	9d 1f       	adc	r25, r29
     848:	80 3a       	cpi	r24, 0xA0	; 160
     84a:	4f e0       	ldi	r20, 0x0F	; 15
     84c:	94 07       	cpc	r25, r20
     84e:	58 f4       	brcc	.+22     	; 0x866 <pvPortMalloc+0x36>
     850:	28 17       	cp	r18, r24
     852:	39 07       	cpc	r19, r25
     854:	58 f4       	brcc	.+22     	; 0x86c <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     856:	e9 01       	movw	r28, r18
     858:	c0 58       	subi	r28, 0x80	; 128
     85a:	df 4d       	sbci	r29, 0xDF	; 223
			xNextFreeByte += xWantedSize;			
     85c:	80 93 7e 20 	sts	0x207E, r24	; 0x80207e <xNextFreeByte>
     860:	90 93 7f 20 	sts	0x207F, r25	; 0x80207f <xNextFreeByte+0x1>
     864:	05 c0       	rjmp	.+10     	; 0x870 <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
     866:	c0 e0       	ldi	r28, 0x00	; 0
     868:	d0 e0       	ldi	r29, 0x00	; 0
     86a:	02 c0       	rjmp	.+4      	; 0x870 <pvPortMalloc+0x40>
     86c:	c0 e0       	ldi	r28, 0x00	; 0
     86e:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     870:	0e 94 ba 0c 	call	0x1974	; 0x1974 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     874:	ce 01       	movw	r24, r28
     876:	df 91       	pop	r29
     878:	cf 91       	pop	r28
     87a:	08 95       	ret

0000087c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     87c:	08 95       	ret

0000087e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     87e:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     880:	03 96       	adiw	r24, 0x03	; 3
     882:	81 83       	std	Z+1, r24	; 0x01
     884:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     886:	4f ef       	ldi	r20, 0xFF	; 255
     888:	5f ef       	ldi	r21, 0xFF	; 255
     88a:	ba 01       	movw	r22, r20
     88c:	43 83       	std	Z+3, r20	; 0x03
     88e:	54 83       	std	Z+4, r21	; 0x04
     890:	65 83       	std	Z+5, r22	; 0x05
     892:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     894:	87 83       	std	Z+7, r24	; 0x07
     896:	90 87       	std	Z+8, r25	; 0x08
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     898:	81 87       	std	Z+9, r24	; 0x09
     89a:	92 87       	std	Z+10, r25	; 0x0a

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     89c:	10 82       	st	Z, r1
     89e:	08 95       	ret

000008a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     8a0:	fc 01       	movw	r30, r24
     8a2:	12 86       	std	Z+10, r1	; 0x0a
     8a4:	13 86       	std	Z+11, r1	; 0x0b
     8a6:	08 95       	ret

000008a8 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	9c 01       	movw	r18, r24
     8ae:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     8b0:	dc 01       	movw	r26, r24
     8b2:	11 96       	adiw	r26, 0x01	; 1
     8b4:	cd 91       	ld	r28, X+
     8b6:	dc 91       	ld	r29, X
     8b8:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     8ba:	c4 83       	std	Z+4, r28	; 0x04
     8bc:	d5 83       	std	Z+5, r29	; 0x05
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     8be:	8e 81       	ldd	r24, Y+6	; 0x06
     8c0:	9f 81       	ldd	r25, Y+7	; 0x07
     8c2:	86 83       	std	Z+6, r24	; 0x06
     8c4:	97 83       	std	Z+7, r25	; 0x07

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     8c6:	8e 81       	ldd	r24, Y+6	; 0x06
     8c8:	9f 81       	ldd	r25, Y+7	; 0x07
     8ca:	dc 01       	movw	r26, r24
     8cc:	14 96       	adiw	r26, 0x04	; 4
     8ce:	6d 93       	st	X+, r22
     8d0:	7c 93       	st	X, r23
     8d2:	15 97       	sbiw	r26, 0x05	; 5
	pxIndex->pxPrevious = pxNewListItem;
     8d4:	6e 83       	std	Y+6, r22	; 0x06
     8d6:	7f 83       	std	Y+7, r23	; 0x07

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     8d8:	22 87       	std	Z+10, r18	; 0x0a
     8da:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
     8dc:	f9 01       	movw	r30, r18
     8de:	80 81       	ld	r24, Z
     8e0:	8f 5f       	subi	r24, 0xFF	; 255
     8e2:	80 83       	st	Z, r24
}
     8e4:	df 91       	pop	r29
     8e6:	cf 91       	pop	r28
     8e8:	08 95       	ret

000008ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     8ea:	0f 93       	push	r16
     8ec:	1f 93       	push	r17
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
     8f2:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     8f4:	08 81       	ld	r16, Y
     8f6:	19 81       	ldd	r17, Y+1	; 0x01
     8f8:	2a 81       	ldd	r18, Y+2	; 0x02
     8fa:	3b 81       	ldd	r19, Y+3	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     8fc:	0f 3f       	cpi	r16, 0xFF	; 255
     8fe:	4f ef       	ldi	r20, 0xFF	; 255
     900:	14 07       	cpc	r17, r20
     902:	24 07       	cpc	r18, r20
     904:	34 07       	cpc	r19, r20
     906:	21 f4       	brne	.+8      	; 0x910 <vListInsert+0x26>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     908:	fc 01       	movw	r30, r24
     90a:	a1 85       	ldd	r26, Z+9	; 0x09
     90c:	b2 85       	ldd	r27, Z+10	; 0x0a
     90e:	11 c0       	rjmp	.+34     	; 0x932 <vListInsert+0x48>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     910:	dc 01       	movw	r26, r24
     912:	13 96       	adiw	r26, 0x03	; 3
     914:	01 c0       	rjmp	.+2      	; 0x918 <vListInsert+0x2e>
     916:	df 01       	movw	r26, r30
     918:	14 96       	adiw	r26, 0x04	; 4
     91a:	ed 91       	ld	r30, X+
     91c:	fc 91       	ld	r31, X
     91e:	15 97       	sbiw	r26, 0x05	; 5
     920:	40 81       	ld	r20, Z
     922:	51 81       	ldd	r21, Z+1	; 0x01
     924:	62 81       	ldd	r22, Z+2	; 0x02
     926:	73 81       	ldd	r23, Z+3	; 0x03
     928:	04 17       	cp	r16, r20
     92a:	15 07       	cpc	r17, r21
     92c:	26 07       	cpc	r18, r22
     92e:	37 07       	cpc	r19, r23
     930:	90 f7       	brcc	.-28     	; 0x916 <vListInsert+0x2c>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     932:	14 96       	adiw	r26, 0x04	; 4
     934:	ed 91       	ld	r30, X+
     936:	fc 91       	ld	r31, X
     938:	15 97       	sbiw	r26, 0x05	; 5
     93a:	ec 83       	std	Y+4, r30	; 0x04
     93c:	fd 83       	std	Y+5, r31	; 0x05
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     93e:	c6 83       	std	Z+6, r28	; 0x06
     940:	d7 83       	std	Z+7, r29	; 0x07
	pxNewListItem->pxPrevious = pxIterator;
     942:	ae 83       	std	Y+6, r26	; 0x06
     944:	bf 83       	std	Y+7, r27	; 0x07
	pxIterator->pxNext = pxNewListItem;
     946:	14 96       	adiw	r26, 0x04	; 4
     948:	cd 93       	st	X+, r28
     94a:	dc 93       	st	X, r29
     94c:	15 97       	sbiw	r26, 0x05	; 5

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     94e:	8a 87       	std	Y+10, r24	; 0x0a
     950:	9b 87       	std	Y+11, r25	; 0x0b

	( pxList->uxNumberOfItems )++;
     952:	fc 01       	movw	r30, r24
     954:	20 81       	ld	r18, Z
     956:	2f 5f       	subi	r18, 0xFF	; 255
     958:	20 83       	st	Z, r18
}
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	1f 91       	pop	r17
     960:	0f 91       	pop	r16
     962:	08 95       	ret

00000964 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     96a:	a2 85       	ldd	r26, Z+10	; 0x0a
     96c:	b3 85       	ldd	r27, Z+11	; 0x0b

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     96e:	c4 81       	ldd	r28, Z+4	; 0x04
     970:	d5 81       	ldd	r29, Z+5	; 0x05
     972:	86 81       	ldd	r24, Z+6	; 0x06
     974:	97 81       	ldd	r25, Z+7	; 0x07
     976:	8e 83       	std	Y+6, r24	; 0x06
     978:	9f 83       	std	Y+7, r25	; 0x07
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     97a:	c6 81       	ldd	r28, Z+6	; 0x06
     97c:	d7 81       	ldd	r29, Z+7	; 0x07
     97e:	84 81       	ldd	r24, Z+4	; 0x04
     980:	95 81       	ldd	r25, Z+5	; 0x05
     982:	8c 83       	std	Y+4, r24	; 0x04
     984:	9d 83       	std	Y+5, r25	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     986:	11 96       	adiw	r26, 0x01	; 1
     988:	8d 91       	ld	r24, X+
     98a:	9c 91       	ld	r25, X
     98c:	12 97       	sbiw	r26, 0x02	; 2
     98e:	e8 17       	cp	r30, r24
     990:	f9 07       	cpc	r31, r25
     992:	31 f4       	brne	.+12     	; 0x9a0 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     994:	86 81       	ldd	r24, Z+6	; 0x06
     996:	97 81       	ldd	r25, Z+7	; 0x07
     998:	11 96       	adiw	r26, 0x01	; 1
     99a:	8d 93       	st	X+, r24
     99c:	9c 93       	st	X, r25
     99e:	12 97       	sbiw	r26, 0x02	; 2
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     9a0:	12 86       	std	Z+10, r1	; 0x0a
     9a2:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
     9a4:	8c 91       	ld	r24, X
     9a6:	81 50       	subi	r24, 0x01	; 1
     9a8:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
     9aa:	8c 91       	ld	r24, X
}
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	08 95       	ret

000009b2 <prvSetupTimerInterrupt>:
}

/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     9b2:	83 ef       	ldi	r24, 0xF3	; 243
     9b4:	91 e0       	ldi	r25, 0x01	; 1
     9b6:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x7de826>
     9ba:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x7de827>
     9be:	65 e0       	ldi	r22, 0x05	; 5
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	98 e0       	ldi	r25, 0x08	; 8
     9c4:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <TC0_ConfigClockSource>
     9c8:	61 e0       	ldi	r22, 0x01	; 1
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	98 e0       	ldi	r25, 0x08	; 8
     9ce:	0e 94 68 02 	call	0x4d0	; 0x4d0 <TC0_SetOverflowIntLevel>
     9d2:	08 95       	ret

000009d4 <_portSetInterruptMaskFromIsr>:
     9d4:	e0 ea       	ldi	r30, 0xA0	; 160
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	82 81       	ldd	r24, Z+2	; 0x02
     9da:	92 81       	ldd	r25, Z+2	; 0x02
     9dc:	98 7f       	andi	r25, 0xF8	; 248
     9de:	92 83       	std	Z+2, r25	; 0x02
     9e0:	08 95       	ret

000009e2 <portTaskIncrementTick>:
     9e2:	cf 93       	push	r28
     9e4:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <_portSetInterruptMaskFromIsr>
     9e8:	c8 2f       	mov	r28, r24
     9ea:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <xTaskIncrementTick>
     9ee:	c0 93 a2 00 	sts	0x00A2, r28	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     9f2:	cf 91       	pop	r28
     9f4:	08 95       	ret

000009f6 <pxPortInitialiseStack>:
     9f6:	cf 92       	push	r12
     9f8:	df 92       	push	r13
     9fa:	ef 92       	push	r14
     9fc:	ff 92       	push	r15
     9fe:	31 e1       	ldi	r19, 0x11	; 17
     a00:	fc 01       	movw	r30, r24
     a02:	30 83       	st	Z, r19
     a04:	31 97       	sbiw	r30, 0x01	; 1
     a06:	22 e2       	ldi	r18, 0x22	; 34
     a08:	20 83       	st	Z, r18
     a0a:	31 97       	sbiw	r30, 0x01	; 1
     a0c:	a3 e3       	ldi	r26, 0x33	; 51
     a0e:	a0 83       	st	Z, r26
     a10:	6b 01       	movw	r12, r22
     a12:	e1 2c       	mov	r14, r1
     a14:	f1 2c       	mov	r15, r1
     a16:	31 97       	sbiw	r30, 0x01	; 1
     a18:	60 83       	st	Z, r22
     a1a:	31 97       	sbiw	r30, 0x01	; 1
     a1c:	d0 82       	st	Z, r13
     a1e:	31 97       	sbiw	r30, 0x01	; 1
     a20:	e0 82       	st	Z, r14
     a22:	31 97       	sbiw	r30, 0x01	; 1
     a24:	61 e3       	ldi	r22, 0x31	; 49
     a26:	60 83       	st	Z, r22
     a28:	31 97       	sbiw	r30, 0x01	; 1
     a2a:	60 e8       	ldi	r22, 0x80	; 128
     a2c:	60 83       	st	Z, r22
     a2e:	31 97       	sbiw	r30, 0x01	; 1
     a30:	67 e8       	ldi	r22, 0x87	; 135
     a32:	60 83       	st	Z, r22
     a34:	31 97       	sbiw	r30, 0x01	; 1
     a36:	10 82       	st	Z, r1
     a38:	31 97       	sbiw	r30, 0x01	; 1
     a3a:	10 82       	st	Z, r1
     a3c:	31 97       	sbiw	r30, 0x01	; 1
     a3e:	62 e0       	ldi	r22, 0x02	; 2
     a40:	60 83       	st	Z, r22
     a42:	31 97       	sbiw	r30, 0x01	; 1
     a44:	63 e0       	ldi	r22, 0x03	; 3
     a46:	60 83       	st	Z, r22
     a48:	31 97       	sbiw	r30, 0x01	; 1
     a4a:	64 e0       	ldi	r22, 0x04	; 4
     a4c:	60 83       	st	Z, r22
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	65 e0       	ldi	r22, 0x05	; 5
     a52:	60 83       	st	Z, r22
     a54:	31 97       	sbiw	r30, 0x01	; 1
     a56:	66 e0       	ldi	r22, 0x06	; 6
     a58:	60 83       	st	Z, r22
     a5a:	31 97       	sbiw	r30, 0x01	; 1
     a5c:	67 e0       	ldi	r22, 0x07	; 7
     a5e:	60 83       	st	Z, r22
     a60:	31 97       	sbiw	r30, 0x01	; 1
     a62:	68 e0       	ldi	r22, 0x08	; 8
     a64:	60 83       	st	Z, r22
     a66:	31 97       	sbiw	r30, 0x01	; 1
     a68:	69 e0       	ldi	r22, 0x09	; 9
     a6a:	60 83       	st	Z, r22
     a6c:	31 97       	sbiw	r30, 0x01	; 1
     a6e:	60 e1       	ldi	r22, 0x10	; 16
     a70:	60 83       	st	Z, r22
     a72:	31 97       	sbiw	r30, 0x01	; 1
     a74:	30 83       	st	Z, r19
     a76:	31 97       	sbiw	r30, 0x01	; 1
     a78:	32 e1       	ldi	r19, 0x12	; 18
     a7a:	30 83       	st	Z, r19
     a7c:	31 97       	sbiw	r30, 0x01	; 1
     a7e:	33 e1       	ldi	r19, 0x13	; 19
     a80:	30 83       	st	Z, r19
     a82:	31 97       	sbiw	r30, 0x01	; 1
     a84:	34 e1       	ldi	r19, 0x14	; 20
     a86:	30 83       	st	Z, r19
     a88:	31 97       	sbiw	r30, 0x01	; 1
     a8a:	35 e1       	ldi	r19, 0x15	; 21
     a8c:	30 83       	st	Z, r19
     a8e:	31 97       	sbiw	r30, 0x01	; 1
     a90:	36 e1       	ldi	r19, 0x16	; 22
     a92:	30 83       	st	Z, r19
     a94:	31 97       	sbiw	r30, 0x01	; 1
     a96:	37 e1       	ldi	r19, 0x17	; 23
     a98:	30 83       	st	Z, r19
     a9a:	31 97       	sbiw	r30, 0x01	; 1
     a9c:	38 e1       	ldi	r19, 0x18	; 24
     a9e:	30 83       	st	Z, r19
     aa0:	31 97       	sbiw	r30, 0x01	; 1
     aa2:	39 e1       	ldi	r19, 0x19	; 25
     aa4:	30 83       	st	Z, r19
     aa6:	31 97       	sbiw	r30, 0x01	; 1
     aa8:	30 e2       	ldi	r19, 0x20	; 32
     aaa:	30 83       	st	Z, r19
     aac:	31 97       	sbiw	r30, 0x01	; 1
     aae:	31 e2       	ldi	r19, 0x21	; 33
     ab0:	30 83       	st	Z, r19
     ab2:	31 97       	sbiw	r30, 0x01	; 1
     ab4:	20 83       	st	Z, r18
     ab6:	31 97       	sbiw	r30, 0x01	; 1
     ab8:	23 e2       	ldi	r18, 0x23	; 35
     aba:	20 83       	st	Z, r18
     abc:	6a 01       	movw	r12, r20
     abe:	31 97       	sbiw	r30, 0x01	; 1
     ac0:	40 83       	st	Z, r20
     ac2:	31 97       	sbiw	r30, 0x01	; 1
     ac4:	d0 82       	st	Z, r13
     ac6:	31 97       	sbiw	r30, 0x01	; 1
     ac8:	26 e2       	ldi	r18, 0x26	; 38
     aca:	20 83       	st	Z, r18
     acc:	31 97       	sbiw	r30, 0x01	; 1
     ace:	27 e2       	ldi	r18, 0x27	; 39
     ad0:	20 83       	st	Z, r18
     ad2:	31 97       	sbiw	r30, 0x01	; 1
     ad4:	28 e2       	ldi	r18, 0x28	; 40
     ad6:	20 83       	st	Z, r18
     ad8:	31 97       	sbiw	r30, 0x01	; 1
     ada:	29 e2       	ldi	r18, 0x29	; 41
     adc:	20 83       	st	Z, r18
     ade:	31 97       	sbiw	r30, 0x01	; 1
     ae0:	20 e3       	ldi	r18, 0x30	; 48
     ae2:	20 83       	st	Z, r18
     ae4:	88 97       	sbiw	r24, 0x28	; 40
     ae6:	ff 90       	pop	r15
     ae8:	ef 90       	pop	r14
     aea:	df 90       	pop	r13
     aec:	cf 90       	pop	r12
     aee:	08 95       	ret

00000af0 <xPortStartScheduler>:
     af0:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <prvSetupTimerInterrupt>
     af4:	a0 91 8e 30 	lds	r26, 0x308E	; 0x80308e <pxCurrentTCB>
     af8:	b0 91 8f 30 	lds	r27, 0x308F	; 0x80308f <pxCurrentTCB+0x1>
     afc:	0d 90       	ld	r0, X+
     afe:	0d be       	out	0x3d, r0	; 61
     b00:	0d 90       	ld	r0, X+
     b02:	0e be       	out	0x3e, r0	; 62
     b04:	ef 91       	pop	r30
     b06:	df 91       	pop	r29
     b08:	cf 91       	pop	r28
     b0a:	bf 91       	pop	r27
     b0c:	af 91       	pop	r26
     b0e:	9f 91       	pop	r25
     b10:	8f 91       	pop	r24
     b12:	7f 91       	pop	r23
     b14:	6f 91       	pop	r22
     b16:	5f 91       	pop	r21
     b18:	4f 91       	pop	r20
     b1a:	3f 91       	pop	r19
     b1c:	2f 91       	pop	r18
     b1e:	1f 91       	pop	r17
     b20:	0f 91       	pop	r16
     b22:	ff 90       	pop	r15
     b24:	ef 90       	pop	r14
     b26:	df 90       	pop	r13
     b28:	cf 90       	pop	r12
     b2a:	bf 90       	pop	r11
     b2c:	af 90       	pop	r10
     b2e:	9f 90       	pop	r9
     b30:	8f 90       	pop	r8
     b32:	7f 90       	pop	r7
     b34:	6f 90       	pop	r6
     b36:	5f 90       	pop	r5
     b38:	4f 90       	pop	r4
     b3a:	3f 90       	pop	r3
     b3c:	2f 90       	pop	r2
     b3e:	1f 90       	pop	r1
     b40:	0f 90       	pop	r0
     b42:	ff 91       	pop	r31
     b44:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     b48:	ff 91       	pop	r31
     b4a:	ff bf       	out	0x3f, r31	; 63
     b4c:	ff 91       	pop	r31
     b4e:	08 95       	ret
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	08 95       	ret

00000b54 <vPortYield>:
// 
//
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     b54:	ff 93       	push	r31
     b56:	ff b7       	in	r31, 0x3f	; 63
     b58:	ff 93       	push	r31
     b5a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     b5e:	ff 93       	push	r31
     b60:	f8 7f       	andi	r31, 0xF8	; 248
     b62:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     b66:	0f 92       	push	r0
     b68:	1f 92       	push	r1
     b6a:	11 24       	eor	r1, r1
     b6c:	2f 92       	push	r2
     b6e:	3f 92       	push	r3
     b70:	4f 92       	push	r4
     b72:	5f 92       	push	r5
     b74:	6f 92       	push	r6
     b76:	7f 92       	push	r7
     b78:	8f 92       	push	r8
     b7a:	9f 92       	push	r9
     b7c:	af 92       	push	r10
     b7e:	bf 92       	push	r11
     b80:	cf 92       	push	r12
     b82:	df 92       	push	r13
     b84:	ef 92       	push	r14
     b86:	ff 92       	push	r15
     b88:	0f 93       	push	r16
     b8a:	1f 93       	push	r17
     b8c:	2f 93       	push	r18
     b8e:	3f 93       	push	r19
     b90:	4f 93       	push	r20
     b92:	5f 93       	push	r21
     b94:	6f 93       	push	r22
     b96:	7f 93       	push	r23
     b98:	8f 93       	push	r24
     b9a:	9f 93       	push	r25
     b9c:	af 93       	push	r26
     b9e:	bf 93       	push	r27
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
     ba4:	ef 93       	push	r30
     ba6:	a0 91 8e 30 	lds	r26, 0x308E	; 0x80308e <pxCurrentTCB>
     baa:	b0 91 8f 30 	lds	r27, 0x308F	; 0x80308f <pxCurrentTCB+0x1>
     bae:	0d b6       	in	r0, 0x3d	; 61
     bb0:	0d 92       	st	X+, r0
     bb2:	0e b6       	in	r0, 0x3e	; 62
     bb4:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     bb6:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     bba:	a0 91 8e 30 	lds	r26, 0x308E	; 0x80308e <pxCurrentTCB>
     bbe:	b0 91 8f 30 	lds	r27, 0x308F	; 0x80308f <pxCurrentTCB+0x1>
     bc2:	0d 90       	ld	r0, X+
     bc4:	0d be       	out	0x3d, r0	; 61
     bc6:	0d 90       	ld	r0, X+
     bc8:	0e be       	out	0x3e, r0	; 62
     bca:	ef 91       	pop	r30
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	bf 91       	pop	r27
     bd2:	af 91       	pop	r26
     bd4:	9f 91       	pop	r25
     bd6:	8f 91       	pop	r24
     bd8:	7f 91       	pop	r23
     bda:	6f 91       	pop	r22
     bdc:	5f 91       	pop	r21
     bde:	4f 91       	pop	r20
     be0:	3f 91       	pop	r19
     be2:	2f 91       	pop	r18
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	ff 90       	pop	r15
     bea:	ef 90       	pop	r14
     bec:	df 90       	pop	r13
     bee:	cf 90       	pop	r12
     bf0:	bf 90       	pop	r11
     bf2:	af 90       	pop	r10
     bf4:	9f 90       	pop	r9
     bf6:	8f 90       	pop	r8
     bf8:	7f 90       	pop	r7
     bfa:	6f 90       	pop	r6
     bfc:	5f 90       	pop	r5
     bfe:	4f 90       	pop	r4
     c00:	3f 90       	pop	r3
     c02:	2f 90       	pop	r2
     c04:	1f 90       	pop	r1
     c06:	0f 90       	pop	r0
     c08:	ff 91       	pop	r31
     c0a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     c0e:	ff 91       	pop	r31
     c10:	ff bf       	out	0x3f, r31	; 63
     c12:	ff 91       	pop	r31
	asm volatile ( "ret" );
     c14:	08 95       	ret

00000c16 <portTaskSwitchContext>:
	//-----------------------------------------------------------
	//
	// The task switch is deferred until there is no more nesting.
	//
	void portTaskSwitchContext(signed portBASE_TYPE xSwitchRequired)
	{
     c16:	cf 93       	push	r28
		intTaskSwitchPending |= xSwitchRequired;					
     c18:	90 91 e6 30 	lds	r25, 0x30E6	; 0x8030e6 <intTaskSwitchPending>
     c1c:	89 2b       	or	r24, r25
     c1e:	80 93 e6 30 	sts	0x30E6, r24	; 0x8030e6 <intTaskSwitchPending>
																
		if(NOT_NESTING() && intTaskSwitchPending)					
     c22:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7de0a0>
     c26:	91 30       	cpi	r25, 0x01	; 1
     c28:	41 f0       	breq	.+16     	; 0xc3a <portTaskSwitchContext+0x24>
     c2a:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7de0a0>
     c2e:	92 30       	cpi	r25, 0x02	; 2
     c30:	21 f0       	breq	.+8      	; 0xc3a <portTaskSwitchContext+0x24>
     c32:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7de0a0>
     c36:	94 30       	cpi	r25, 0x04	; 4
     c38:	59 f4       	brne	.+22     	; 0xc50 <portTaskSwitchContext+0x3a>
     c3a:	88 23       	and	r24, r24
     c3c:	49 f0       	breq	.+18     	; 0xc50 <portTaskSwitchContext+0x3a>
		{															
			register unsigned portBASE_TYPE uxSavedPmicCtrlReg; 				
			extern void vTaskSwitchContext(void);   				
																
			// Critical section used, because vTaskSwitchContext handles FreeRTOS internal data structures.
 			uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR(); 
     c3e:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <_portSetInterruptMaskFromIsr>
     c42:	c8 2f       	mov	r28, r24
			intTaskSwitchPending = 0;								
     c44:	10 92 e6 30 	sts	0x30E6, r1	; 0x8030e6 <intTaskSwitchPending>
			vTaskSwitchContext();                   				
     c48:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <vTaskSwitchContext>
			portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedPmicCtrlReg);
     c4c:	c0 93 a2 00 	sts	0x00A2, r28	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
		}                                          					
	}
     c50:	cf 91       	pop	r28
     c52:	08 95       	ret

00000c54 <__vector_14>:
	// the context is saved at the start of vPortYieldFromTick().  The tick
	// count is incremented after the context is saved.
	//
	ISR(TCC0_OVF_vect, ISR_NAKED)
	{
		portSTART_ISR();
     c54:	ff 93       	push	r31
     c56:	ff b7       	in	r31, 0x3f	; 63
     c58:	ff 93       	push	r31
     c5a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     c5e:	ff 93       	push	r31
     c60:	f8 7f       	andi	r31, 0xF8	; 248
     c62:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     c66:	0f 92       	push	r0
     c68:	1f 92       	push	r1
     c6a:	11 24       	eor	r1, r1
     c6c:	2f 92       	push	r2
     c6e:	3f 92       	push	r3
     c70:	4f 92       	push	r4
     c72:	5f 92       	push	r5
     c74:	6f 92       	push	r6
     c76:	7f 92       	push	r7
     c78:	8f 92       	push	r8
     c7a:	9f 92       	push	r9
     c7c:	af 92       	push	r10
     c7e:	bf 92       	push	r11
     c80:	cf 92       	push	r12
     c82:	df 92       	push	r13
     c84:	ef 92       	push	r14
     c86:	ff 92       	push	r15
     c88:	0f 93       	push	r16
     c8a:	1f 93       	push	r17
     c8c:	2f 93       	push	r18
     c8e:	3f 93       	push	r19
     c90:	4f 93       	push	r20
     c92:	5f 93       	push	r21
     c94:	6f 93       	push	r22
     c96:	7f 93       	push	r23
     c98:	8f 93       	push	r24
     c9a:	9f 93       	push	r25
     c9c:	af 93       	push	r26
     c9e:	bf 93       	push	r27
     ca0:	cf 93       	push	r28
     ca2:	df 93       	push	r29
     ca4:	ef 93       	push	r30
     ca6:	a0 91 8e 30 	lds	r26, 0x308E	; 0x80308e <pxCurrentTCB>
     caa:	b0 91 8f 30 	lds	r27, 0x308F	; 0x80308f <pxCurrentTCB+0x1>
     cae:	0d b6       	in	r0, 0x3d	; 61
     cb0:	0d 92       	st	X+, r0
     cb2:	0e b6       	in	r0, 0x3e	; 62
     cb4:	0d 92       	st	X+, r0
		portTaskIncrementTick();
     cb6:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <portTaskIncrementTick>
		//always try a task switch, but only if on kernel interrupt level
		portEND_SWITCHING_ISR(pdTRUE); 
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	0e 94 0b 06 	call	0xc16	; 0xc16 <portTaskSwitchContext>
     cc0:	a0 91 8e 30 	lds	r26, 0x308E	; 0x80308e <pxCurrentTCB>
     cc4:	b0 91 8f 30 	lds	r27, 0x308F	; 0x80308f <pxCurrentTCB+0x1>
     cc8:	0d 90       	ld	r0, X+
     cca:	0d be       	out	0x3d, r0	; 61
     ccc:	0d 90       	ld	r0, X+
     cce:	0e be       	out	0x3e, r0	; 62
     cd0:	ef 91       	pop	r30
     cd2:	df 91       	pop	r29
     cd4:	cf 91       	pop	r28
     cd6:	bf 91       	pop	r27
     cd8:	af 91       	pop	r26
     cda:	9f 91       	pop	r25
     cdc:	8f 91       	pop	r24
     cde:	7f 91       	pop	r23
     ce0:	6f 91       	pop	r22
     ce2:	5f 91       	pop	r21
     ce4:	4f 91       	pop	r20
     ce6:	3f 91       	pop	r19
     ce8:	2f 91       	pop	r18
     cea:	1f 91       	pop	r17
     cec:	0f 91       	pop	r16
     cee:	ff 90       	pop	r15
     cf0:	ef 90       	pop	r14
     cf2:	df 90       	pop	r13
     cf4:	cf 90       	pop	r12
     cf6:	bf 90       	pop	r11
     cf8:	af 90       	pop	r10
     cfa:	9f 90       	pop	r9
     cfc:	8f 90       	pop	r8
     cfe:	7f 90       	pop	r7
     d00:	6f 90       	pop	r6
     d02:	5f 90       	pop	r5
     d04:	4f 90       	pop	r4
     d06:	3f 90       	pop	r3
     d08:	2f 90       	pop	r2
     d0a:	1f 90       	pop	r1
     d0c:	0f 90       	pop	r0
     d0e:	ff 91       	pop	r31
     d10:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     d14:	ff 91       	pop	r31
     d16:	ff bf       	out	0x3f, r31	; 63
     d18:	ff 91       	pop	r31
     d1a:	18 95       	reti

00000d1c <prvIsQueueEmpty>:
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
     d1c:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     d20:	ff 93       	push	r31
     d22:	f8 7f       	andi	r31, 0xF8	; 248
     d24:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     d28:	fc 01       	movw	r30, r24
     d2a:	86 8d       	ldd	r24, Z+30	; 0x1e
     d2c:	81 11       	cpse	r24, r1
     d2e:	02 c0       	rjmp	.+4      	; 0xd34 <prvIsQueueEmpty+0x18>
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	01 c0       	rjmp	.+2      	; 0xd36 <prvIsQueueEmpty+0x1a>
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	ff 91       	pop	r31
     d38:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     d3c:	08 95       	ret

00000d3e <prvIsQueueFull>:
     d3e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     d42:	ff 93       	push	r31
     d44:	f8 7f       	andi	r31, 0xF8	; 248
     d46:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     d4a:	fc 01       	movw	r30, r24
     d4c:	26 8d       	ldd	r18, Z+30	; 0x1e
     d4e:	87 8d       	ldd	r24, Z+31	; 0x1f
     d50:	28 13       	cpse	r18, r24
     d52:	02 c0       	rjmp	.+4      	; 0xd58 <prvIsQueueFull+0x1a>
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	01 c0       	rjmp	.+2      	; 0xd5a <prvIsQueueFull+0x1c>
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	ff 91       	pop	r31
     d5c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     d60:	08 95       	ret

00000d62 <prvCopyDataToQueue>:
     d62:	0f 93       	push	r16
     d64:	1f 93       	push	r17
     d66:	cf 93       	push	r28
     d68:	df 93       	push	r29
     d6a:	ec 01       	movw	r28, r24
     d6c:	04 2f       	mov	r16, r20
     d6e:	1e 8d       	ldd	r17, Y+30	; 0x1e
     d70:	48 a1       	ldd	r20, Y+32	; 0x20
     d72:	44 23       	and	r20, r20
     d74:	b9 f1       	breq	.+110    	; 0xde4 <prvCopyDataToQueue+0x82>
     d76:	01 11       	cpse	r16, r1
     d78:	16 c0       	rjmp	.+44     	; 0xda6 <prvCopyDataToQueue+0x44>
     d7a:	50 e0       	ldi	r21, 0x00	; 0
     d7c:	8c 81       	ldd	r24, Y+4	; 0x04
     d7e:	9d 81       	ldd	r25, Y+5	; 0x05
     d80:	0e 94 bc 1d 	call	0x3b78	; 0x3b78 <memcpy>
     d84:	28 a1       	ldd	r18, Y+32	; 0x20
     d86:	8c 81       	ldd	r24, Y+4	; 0x04
     d88:	9d 81       	ldd	r25, Y+5	; 0x05
     d8a:	82 0f       	add	r24, r18
     d8c:	91 1d       	adc	r25, r1
     d8e:	8c 83       	std	Y+4, r24	; 0x04
     d90:	9d 83       	std	Y+5, r25	; 0x05
     d92:	2a 81       	ldd	r18, Y+2	; 0x02
     d94:	3b 81       	ldd	r19, Y+3	; 0x03
     d96:	82 17       	cp	r24, r18
     d98:	93 07       	cpc	r25, r19
     d9a:	20 f1       	brcs	.+72     	; 0xde4 <prvCopyDataToQueue+0x82>
     d9c:	88 81       	ld	r24, Y
     d9e:	99 81       	ldd	r25, Y+1	; 0x01
     da0:	8c 83       	std	Y+4, r24	; 0x04
     da2:	9d 83       	std	Y+5, r25	; 0x05
     da4:	1f c0       	rjmp	.+62     	; 0xde4 <prvCopyDataToQueue+0x82>
     da6:	50 e0       	ldi	r21, 0x00	; 0
     da8:	8e 81       	ldd	r24, Y+6	; 0x06
     daa:	9f 81       	ldd	r25, Y+7	; 0x07
     dac:	0e 94 bc 1d 	call	0x3b78	; 0x3b78 <memcpy>
     db0:	88 a1       	ldd	r24, Y+32	; 0x20
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	91 95       	neg	r25
     db6:	81 95       	neg	r24
     db8:	91 09       	sbc	r25, r1
     dba:	2e 81       	ldd	r18, Y+6	; 0x06
     dbc:	3f 81       	ldd	r19, Y+7	; 0x07
     dbe:	28 0f       	add	r18, r24
     dc0:	39 1f       	adc	r19, r25
     dc2:	2e 83       	std	Y+6, r18	; 0x06
     dc4:	3f 83       	std	Y+7, r19	; 0x07
     dc6:	48 81       	ld	r20, Y
     dc8:	59 81       	ldd	r21, Y+1	; 0x01
     dca:	24 17       	cp	r18, r20
     dcc:	35 07       	cpc	r19, r21
     dce:	30 f4       	brcc	.+12     	; 0xddc <prvCopyDataToQueue+0x7a>
     dd0:	2a 81       	ldd	r18, Y+2	; 0x02
     dd2:	3b 81       	ldd	r19, Y+3	; 0x03
     dd4:	82 0f       	add	r24, r18
     dd6:	93 1f       	adc	r25, r19
     dd8:	8e 83       	std	Y+6, r24	; 0x06
     dda:	9f 83       	std	Y+7, r25	; 0x07
     ddc:	02 30       	cpi	r16, 0x02	; 2
     dde:	11 f4       	brne	.+4      	; 0xde4 <prvCopyDataToQueue+0x82>
     de0:	11 11       	cpse	r17, r1
     de2:	11 50       	subi	r17, 0x01	; 1
     de4:	1f 5f       	subi	r17, 0xFF	; 255
     de6:	1e 8f       	std	Y+30, r17	; 0x1e
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	df 91       	pop	r29
     dec:	cf 91       	pop	r28
     dee:	1f 91       	pop	r17
     df0:	0f 91       	pop	r16
     df2:	08 95       	ret

00000df4 <prvCopyDataFromQueue>:
     df4:	fc 01       	movw	r30, r24
     df6:	40 a1       	ldd	r20, Z+32	; 0x20
     df8:	44 23       	and	r20, r20
     dfa:	a9 f0       	breq	.+42     	; 0xe26 <prvCopyDataFromQueue+0x32>
     dfc:	50 e0       	ldi	r21, 0x00	; 0
     dfe:	26 81       	ldd	r18, Z+6	; 0x06
     e00:	37 81       	ldd	r19, Z+7	; 0x07
     e02:	24 0f       	add	r18, r20
     e04:	35 1f       	adc	r19, r21
     e06:	26 83       	std	Z+6, r18	; 0x06
     e08:	37 83       	std	Z+7, r19	; 0x07
     e0a:	82 81       	ldd	r24, Z+2	; 0x02
     e0c:	93 81       	ldd	r25, Z+3	; 0x03
     e0e:	28 17       	cp	r18, r24
     e10:	39 07       	cpc	r19, r25
     e12:	20 f0       	brcs	.+8      	; 0xe1c <prvCopyDataFromQueue+0x28>
     e14:	80 81       	ld	r24, Z
     e16:	91 81       	ldd	r25, Z+1	; 0x01
     e18:	86 83       	std	Z+6, r24	; 0x06
     e1a:	97 83       	std	Z+7, r25	; 0x07
     e1c:	cb 01       	movw	r24, r22
     e1e:	66 81       	ldd	r22, Z+6	; 0x06
     e20:	77 81       	ldd	r23, Z+7	; 0x07
     e22:	0e 94 bc 1d 	call	0x3b78	; 0x3b78 <memcpy>
     e26:	08 95       	ret

00000e28 <prvUnlockQueue>:
     e28:	1f 93       	push	r17
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	ec 01       	movw	r28, r24
     e30:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     e34:	ff 93       	push	r31
     e36:	f8 7f       	andi	r31, 0xF8	; 248
     e38:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     e3c:	1a a1       	ldd	r17, Y+34	; 0x22
     e3e:	0b c0       	rjmp	.+22     	; 0xe56 <prvUnlockQueue+0x2e>
     e40:	8b 89       	ldd	r24, Y+19	; 0x13
     e42:	88 23       	and	r24, r24
     e44:	51 f0       	breq	.+20     	; 0xe5a <prvUnlockQueue+0x32>
     e46:	ce 01       	movw	r24, r28
     e48:	43 96       	adiw	r24, 0x13	; 19
     e4a:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <xTaskRemoveFromEventList>
     e4e:	81 11       	cpse	r24, r1
     e50:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <vTaskMissedYield>
     e54:	11 50       	subi	r17, 0x01	; 1
     e56:	11 16       	cp	r1, r17
     e58:	9c f3       	brlt	.-26     	; 0xe40 <prvUnlockQueue+0x18>
     e5a:	8f ef       	ldi	r24, 0xFF	; 255
     e5c:	8a a3       	std	Y+34, r24	; 0x22
     e5e:	ff 91       	pop	r31
     e60:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     e64:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     e68:	ff 93       	push	r31
     e6a:	f8 7f       	andi	r31, 0xF8	; 248
     e6c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     e70:	19 a1       	ldd	r17, Y+33	; 0x21
     e72:	0b c0       	rjmp	.+22     	; 0xe8a <prvUnlockQueue+0x62>
     e74:	88 85       	ldd	r24, Y+8	; 0x08
     e76:	88 23       	and	r24, r24
     e78:	51 f0       	breq	.+20     	; 0xe8e <prvUnlockQueue+0x66>
     e7a:	ce 01       	movw	r24, r28
     e7c:	08 96       	adiw	r24, 0x08	; 8
     e7e:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <xTaskRemoveFromEventList>
     e82:	81 11       	cpse	r24, r1
     e84:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <vTaskMissedYield>
     e88:	11 50       	subi	r17, 0x01	; 1
     e8a:	11 16       	cp	r1, r17
     e8c:	9c f3       	brlt	.-26     	; 0xe74 <prvUnlockQueue+0x4c>
     e8e:	8f ef       	ldi	r24, 0xFF	; 255
     e90:	89 a3       	std	Y+33, r24	; 0x21
     e92:	ff 91       	pop	r31
     e94:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	1f 91       	pop	r17
     e9e:	08 95       	ret

00000ea0 <xQueueGenericReset>:
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	ec 01       	movw	r28, r24
     ea6:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     eaa:	ff 93       	push	r31
     eac:	f8 7f       	andi	r31, 0xF8	; 248
     eae:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     eb2:	e8 81       	ld	r30, Y
     eb4:	f9 81       	ldd	r31, Y+1	; 0x01
     eb6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	28 a1       	ldd	r18, Y+32	; 0x20
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	82 9f       	mul	r24, r18
     ec0:	a0 01       	movw	r20, r0
     ec2:	83 9f       	mul	r24, r19
     ec4:	50 0d       	add	r21, r0
     ec6:	92 9f       	mul	r25, r18
     ec8:	50 0d       	add	r21, r0
     eca:	11 24       	eor	r1, r1
     ecc:	4e 0f       	add	r20, r30
     ece:	5f 1f       	adc	r21, r31
     ed0:	4a 83       	std	Y+2, r20	; 0x02
     ed2:	5b 83       	std	Y+3, r21	; 0x03
     ed4:	1e 8e       	std	Y+30, r1	; 0x1e
     ed6:	ec 83       	std	Y+4, r30	; 0x04
     ed8:	fd 83       	std	Y+5, r31	; 0x05
     eda:	01 97       	sbiw	r24, 0x01	; 1
     edc:	28 9f       	mul	r18, r24
     ede:	a0 01       	movw	r20, r0
     ee0:	29 9f       	mul	r18, r25
     ee2:	50 0d       	add	r21, r0
     ee4:	38 9f       	mul	r19, r24
     ee6:	50 0d       	add	r21, r0
     ee8:	11 24       	eor	r1, r1
     eea:	cf 01       	movw	r24, r30
     eec:	84 0f       	add	r24, r20
     eee:	95 1f       	adc	r25, r21
     ef0:	8e 83       	std	Y+6, r24	; 0x06
     ef2:	9f 83       	std	Y+7, r25	; 0x07
     ef4:	8f ef       	ldi	r24, 0xFF	; 255
     ef6:	89 a3       	std	Y+33, r24	; 0x21
     ef8:	8a a3       	std	Y+34, r24	; 0x22
     efa:	61 11       	cpse	r22, r1
     efc:	0c c0       	rjmp	.+24     	; 0xf16 <xQueueGenericReset+0x76>
     efe:	88 85       	ldd	r24, Y+8	; 0x08
     f00:	88 23       	and	r24, r24
     f02:	89 f0       	breq	.+34     	; 0xf26 <xQueueGenericReset+0x86>
     f04:	ce 01       	movw	r24, r28
     f06:	08 96       	adiw	r24, 0x08	; 8
     f08:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <xTaskRemoveFromEventList>
     f0c:	88 23       	and	r24, r24
     f0e:	59 f0       	breq	.+22     	; 0xf26 <xQueueGenericReset+0x86>
     f10:	0e 94 aa 05 	call	0xb54	; 0xb54 <vPortYield>
     f14:	08 c0       	rjmp	.+16     	; 0xf26 <xQueueGenericReset+0x86>
     f16:	ce 01       	movw	r24, r28
     f18:	08 96       	adiw	r24, 0x08	; 8
     f1a:	0e 94 3f 04 	call	0x87e	; 0x87e <vListInitialise>
     f1e:	ce 01       	movw	r24, r28
     f20:	43 96       	adiw	r24, 0x13	; 19
     f22:	0e 94 3f 04 	call	0x87e	; 0x87e <vListInitialise>
     f26:	ff 91       	pop	r31
     f28:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	df 91       	pop	r29
     f30:	cf 91       	pop	r28
     f32:	08 95       	ret

00000f34 <prvInitialiseNewQueue>:
     f34:	ff 92       	push	r15
     f36:	0f 93       	push	r16
     f38:	1f 93       	push	r17
     f3a:	cf 93       	push	r28
     f3c:	df 93       	push	r29
     f3e:	f2 2e       	mov	r15, r18
     f40:	e8 01       	movw	r28, r16
     f42:	61 11       	cpse	r22, r1
     f44:	03 c0       	rjmp	.+6      	; 0xf4c <prvInitialiseNewQueue+0x18>
     f46:	08 83       	st	Y, r16
     f48:	19 83       	std	Y+1, r17	; 0x01
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <prvInitialiseNewQueue+0x1c>
     f4c:	48 83       	st	Y, r20
     f4e:	59 83       	std	Y+1, r21	; 0x01
     f50:	8f 8f       	std	Y+31, r24	; 0x1f
     f52:	68 a3       	std	Y+32, r22	; 0x20
     f54:	61 e0       	ldi	r22, 0x01	; 1
     f56:	ce 01       	movw	r24, r28
     f58:	0e 94 50 07 	call	0xea0	; 0xea0 <xQueueGenericReset>
     f5c:	fc a2       	std	Y+36, r15	; 0x24
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	1f 91       	pop	r17
     f64:	0f 91       	pop	r16
     f66:	ff 90       	pop	r15
     f68:	08 95       	ret

00000f6a <xQueueGenericCreate>:
     f6a:	df 92       	push	r13
     f6c:	ef 92       	push	r14
     f6e:	ff 92       	push	r15
     f70:	0f 93       	push	r16
     f72:	1f 93       	push	r17
     f74:	cf 93       	push	r28
     f76:	df 93       	push	r29
     f78:	e8 2e       	mov	r14, r24
     f7a:	f6 2e       	mov	r15, r22
     f7c:	d4 2e       	mov	r13, r20
     f7e:	66 23       	and	r22, r22
     f80:	21 f0       	breq	.+8      	; 0xf8a <xQueueGenericCreate+0x20>
     f82:	86 9f       	mul	r24, r22
     f84:	c0 01       	movw	r24, r0
     f86:	11 24       	eor	r1, r1
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <xQueueGenericCreate+0x24>
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	85 96       	adiw	r24, 0x25	; 37
     f90:	0e 94 18 04 	call	0x830	; 0x830 <pvPortMalloc>
     f94:	ec 01       	movw	r28, r24
     f96:	00 97       	sbiw	r24, 0x00	; 0
     f98:	49 f0       	breq	.+18     	; 0xfac <xQueueGenericCreate+0x42>
     f9a:	8c 01       	movw	r16, r24
     f9c:	2d 2d       	mov	r18, r13
     f9e:	ac 01       	movw	r20, r24
     fa0:	4b 5d       	subi	r20, 0xDB	; 219
     fa2:	5f 4f       	sbci	r21, 0xFF	; 255
     fa4:	6f 2d       	mov	r22, r15
     fa6:	8e 2d       	mov	r24, r14
     fa8:	0e 94 9a 07 	call	0xf34	; 0xf34 <prvInitialiseNewQueue>
     fac:	ce 01       	movw	r24, r28
     fae:	df 91       	pop	r29
     fb0:	cf 91       	pop	r28
     fb2:	1f 91       	pop	r17
     fb4:	0f 91       	pop	r16
     fb6:	ff 90       	pop	r15
     fb8:	ef 90       	pop	r14
     fba:	df 90       	pop	r13
     fbc:	08 95       	ret

00000fbe <xQueueGenericSend>:
     fbe:	cf 92       	push	r12
     fc0:	df 92       	push	r13
     fc2:	ef 92       	push	r14
     fc4:	ff 92       	push	r15
     fc6:	0f 93       	push	r16
     fc8:	1f 93       	push	r17
     fca:	cf 93       	push	r28
     fcc:	df 93       	push	r29
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
     fd2:	29 97       	sbiw	r28, 0x09	; 9
     fd4:	cd bf       	out	0x3d, r28	; 61
     fd6:	de bf       	out	0x3e, r29	; 62
     fd8:	7c 01       	movw	r14, r24
     fda:	6b 01       	movw	r12, r22
     fdc:	2e 83       	std	Y+6, r18	; 0x06
     fde:	3f 83       	std	Y+7, r19	; 0x07
     fe0:	48 87       	std	Y+8, r20	; 0x08
     fe2:	59 87       	std	Y+9, r21	; 0x09
     fe4:	10 e0       	ldi	r17, 0x00	; 0
     fe6:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     fea:	ff 93       	push	r31
     fec:	f8 7f       	andi	r31, 0xF8	; 248
     fee:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     ff2:	f7 01       	movw	r30, r14
     ff4:	96 8d       	ldd	r25, Z+30	; 0x1e
     ff6:	87 8d       	ldd	r24, Z+31	; 0x1f
     ff8:	98 17       	cp	r25, r24
     ffa:	10 f0       	brcs	.+4      	; 0x1000 <xQueueGenericSend+0x42>
     ffc:	02 30       	cpi	r16, 0x02	; 2
     ffe:	d1 f4       	brne	.+52     	; 0x1034 <xQueueGenericSend+0x76>
    1000:	40 2f       	mov	r20, r16
    1002:	b6 01       	movw	r22, r12
    1004:	c7 01       	movw	r24, r14
    1006:	0e 94 b1 06 	call	0xd62	; 0xd62 <prvCopyDataToQueue>
    100a:	f7 01       	movw	r30, r14
    100c:	93 89       	ldd	r25, Z+19	; 0x13
    100e:	99 23       	and	r25, r25
    1010:	49 f0       	breq	.+18     	; 0x1024 <xQueueGenericSend+0x66>
    1012:	c7 01       	movw	r24, r14
    1014:	43 96       	adiw	r24, 0x13	; 19
    1016:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <xTaskRemoveFromEventList>
    101a:	88 23       	and	r24, r24
    101c:	31 f0       	breq	.+12     	; 0x102a <xQueueGenericSend+0x6c>
    101e:	0e 94 aa 05 	call	0xb54	; 0xb54 <vPortYield>
    1022:	03 c0       	rjmp	.+6      	; 0x102a <xQueueGenericSend+0x6c>
    1024:	81 11       	cpse	r24, r1
    1026:	0e 94 aa 05 	call	0xb54	; 0xb54 <vPortYield>
    102a:	ff 91       	pop	r31
    102c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	58 c0       	rjmp	.+176    	; 0x10e4 <xQueueGenericSend+0x126>
    1034:	8e 81       	ldd	r24, Y+6	; 0x06
    1036:	9f 81       	ldd	r25, Y+7	; 0x07
    1038:	a8 85       	ldd	r26, Y+8	; 0x08
    103a:	b9 85       	ldd	r27, Y+9	; 0x09
    103c:	89 2b       	or	r24, r25
    103e:	8a 2b       	or	r24, r26
    1040:	8b 2b       	or	r24, r27
    1042:	29 f4       	brne	.+10     	; 0x104e <xQueueGenericSend+0x90>
    1044:	ff 91       	pop	r31
    1046:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	4b c0       	rjmp	.+150    	; 0x10e4 <xQueueGenericSend+0x126>
    104e:	11 11       	cpse	r17, r1
    1050:	05 c0       	rjmp	.+10     	; 0x105c <xQueueGenericSend+0x9e>
    1052:	ce 01       	movw	r24, r28
    1054:	01 96       	adiw	r24, 0x01	; 1
    1056:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <vTaskInternalSetTimeOutState>
    105a:	11 e0       	ldi	r17, 0x01	; 1
    105c:	ff 91       	pop	r31
    105e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1062:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <vTaskSuspendAll>
    1066:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    106a:	ff 93       	push	r31
    106c:	f8 7f       	andi	r31, 0xF8	; 248
    106e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1072:	f7 01       	movw	r30, r14
    1074:	81 a1       	ldd	r24, Z+33	; 0x21
    1076:	8f 3f       	cpi	r24, 0xFF	; 255
    1078:	09 f4       	brne	.+2      	; 0x107c <xQueueGenericSend+0xbe>
    107a:	11 a2       	std	Z+33, r1	; 0x21
    107c:	f7 01       	movw	r30, r14
    107e:	82 a1       	ldd	r24, Z+34	; 0x22
    1080:	8f 3f       	cpi	r24, 0xFF	; 255
    1082:	09 f4       	brne	.+2      	; 0x1086 <xQueueGenericSend+0xc8>
    1084:	12 a2       	std	Z+34, r1	; 0x22
    1086:	ff 91       	pop	r31
    1088:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    108c:	be 01       	movw	r22, r28
    108e:	6a 5f       	subi	r22, 0xFA	; 250
    1090:	7f 4f       	sbci	r23, 0xFF	; 255
    1092:	ce 01       	movw	r24, r28
    1094:	01 96       	adiw	r24, 0x01	; 1
    1096:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <xTaskCheckForTimeOut>
    109a:	81 11       	cpse	r24, r1
    109c:	1d c0       	rjmp	.+58     	; 0x10d8 <xQueueGenericSend+0x11a>
    109e:	c7 01       	movw	r24, r14
    10a0:	0e 94 9f 06 	call	0xd3e	; 0xd3e <prvIsQueueFull>
    10a4:	88 23       	and	r24, r24
    10a6:	91 f0       	breq	.+36     	; 0x10cc <xQueueGenericSend+0x10e>
    10a8:	4e 81       	ldd	r20, Y+6	; 0x06
    10aa:	5f 81       	ldd	r21, Y+7	; 0x07
    10ac:	68 85       	ldd	r22, Y+8	; 0x08
    10ae:	79 85       	ldd	r23, Y+9	; 0x09
    10b0:	c7 01       	movw	r24, r14
    10b2:	08 96       	adiw	r24, 0x08	; 8
    10b4:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <vTaskPlaceOnEventList>
    10b8:	c7 01       	movw	r24, r14
    10ba:	0e 94 14 07 	call	0xe28	; 0xe28 <prvUnlockQueue>
    10be:	0e 94 ba 0c 	call	0x1974	; 0x1974 <xTaskResumeAll>
    10c2:	81 11       	cpse	r24, r1
    10c4:	90 cf       	rjmp	.-224    	; 0xfe6 <xQueueGenericSend+0x28>
    10c6:	0e 94 aa 05 	call	0xb54	; 0xb54 <vPortYield>
    10ca:	8d cf       	rjmp	.-230    	; 0xfe6 <xQueueGenericSend+0x28>
    10cc:	c7 01       	movw	r24, r14
    10ce:	0e 94 14 07 	call	0xe28	; 0xe28 <prvUnlockQueue>
    10d2:	0e 94 ba 0c 	call	0x1974	; 0x1974 <xTaskResumeAll>
    10d6:	87 cf       	rjmp	.-242    	; 0xfe6 <xQueueGenericSend+0x28>
    10d8:	c7 01       	movw	r24, r14
    10da:	0e 94 14 07 	call	0xe28	; 0xe28 <prvUnlockQueue>
    10de:	0e 94 ba 0c 	call	0x1974	; 0x1974 <xTaskResumeAll>
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	29 96       	adiw	r28, 0x09	; 9
    10e6:	cd bf       	out	0x3d, r28	; 61
    10e8:	de bf       	out	0x3e, r29	; 62
    10ea:	df 91       	pop	r29
    10ec:	cf 91       	pop	r28
    10ee:	1f 91       	pop	r17
    10f0:	0f 91       	pop	r16
    10f2:	ff 90       	pop	r15
    10f4:	ef 90       	pop	r14
    10f6:	df 90       	pop	r13
    10f8:	cf 90       	pop	r12
    10fa:	08 95       	ret

000010fc <xQueueGenericSendFromISR>:
    10fc:	af 92       	push	r10
    10fe:	bf 92       	push	r11
    1100:	cf 92       	push	r12
    1102:	df 92       	push	r13
    1104:	ff 92       	push	r15
    1106:	0f 93       	push	r16
    1108:	1f 93       	push	r17
    110a:	cf 93       	push	r28
    110c:	df 93       	push	r29
    110e:	ec 01       	movw	r28, r24
    1110:	6b 01       	movw	r12, r22
    1112:	5a 01       	movw	r10, r20
    1114:	02 2f       	mov	r16, r18
    1116:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <_portSetInterruptMaskFromIsr>
    111a:	f8 2e       	mov	r15, r24
    111c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    111e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1120:	98 17       	cp	r25, r24
    1122:	10 f0       	brcs	.+4      	; 0x1128 <xQueueGenericSendFromISR+0x2c>
    1124:	02 30       	cpi	r16, 0x02	; 2
    1126:	e1 f4       	brne	.+56     	; 0x1160 <xQueueGenericSendFromISR+0x64>
    1128:	1a a1       	ldd	r17, Y+34	; 0x22
    112a:	40 2f       	mov	r20, r16
    112c:	b6 01       	movw	r22, r12
    112e:	ce 01       	movw	r24, r28
    1130:	0e 94 b1 06 	call	0xd62	; 0xd62 <prvCopyDataToQueue>
    1134:	1f 3f       	cpi	r17, 0xFF	; 255
    1136:	81 f4       	brne	.+32     	; 0x1158 <xQueueGenericSendFromISR+0x5c>
    1138:	8b 89       	ldd	r24, Y+19	; 0x13
    113a:	88 23       	and	r24, r24
    113c:	99 f0       	breq	.+38     	; 0x1164 <xQueueGenericSendFromISR+0x68>
    113e:	ce 01       	movw	r24, r28
    1140:	43 96       	adiw	r24, 0x13	; 19
    1142:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <xTaskRemoveFromEventList>
    1146:	88 23       	and	r24, r24
    1148:	79 f0       	breq	.+30     	; 0x1168 <xQueueGenericSendFromISR+0x6c>
    114a:	a1 14       	cp	r10, r1
    114c:	b1 04       	cpc	r11, r1
    114e:	71 f0       	breq	.+28     	; 0x116c <xQueueGenericSendFromISR+0x70>
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	f5 01       	movw	r30, r10
    1154:	80 83       	st	Z, r24
    1156:	0b c0       	rjmp	.+22     	; 0x116e <xQueueGenericSendFromISR+0x72>
    1158:	1f 5f       	subi	r17, 0xFF	; 255
    115a:	1a a3       	std	Y+34, r17	; 0x22
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	07 c0       	rjmp	.+14     	; 0x116e <xQueueGenericSendFromISR+0x72>
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	05 c0       	rjmp	.+10     	; 0x116e <xQueueGenericSendFromISR+0x72>
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	03 c0       	rjmp	.+6      	; 0x116e <xQueueGenericSendFromISR+0x72>
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	01 c0       	rjmp	.+2      	; 0x116e <xQueueGenericSendFromISR+0x72>
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	f0 92 a2 00 	sts	0x00A2, r15	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1172:	df 91       	pop	r29
    1174:	cf 91       	pop	r28
    1176:	1f 91       	pop	r17
    1178:	0f 91       	pop	r16
    117a:	ff 90       	pop	r15
    117c:	df 90       	pop	r13
    117e:	cf 90       	pop	r12
    1180:	bf 90       	pop	r11
    1182:	af 90       	pop	r10
    1184:	08 95       	ret

00001186 <xQueueReceive>:
    1186:	cf 92       	push	r12
    1188:	df 92       	push	r13
    118a:	ef 92       	push	r14
    118c:	ff 92       	push	r15
    118e:	0f 93       	push	r16
    1190:	1f 93       	push	r17
    1192:	cf 93       	push	r28
    1194:	df 93       	push	r29
    1196:	cd b7       	in	r28, 0x3d	; 61
    1198:	de b7       	in	r29, 0x3e	; 62
    119a:	29 97       	sbiw	r28, 0x09	; 9
    119c:	cd bf       	out	0x3d, r28	; 61
    119e:	de bf       	out	0x3e, r29	; 62
    11a0:	8c 01       	movw	r16, r24
    11a2:	6b 01       	movw	r12, r22
    11a4:	2e 83       	std	Y+6, r18	; 0x06
    11a6:	3f 83       	std	Y+7, r19	; 0x07
    11a8:	48 87       	std	Y+8, r20	; 0x08
    11aa:	59 87       	std	Y+9, r21	; 0x09
    11ac:	e1 2c       	mov	r14, r1
    11ae:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    11b2:	ff 93       	push	r31
    11b4:	f8 7f       	andi	r31, 0xF8	; 248
    11b6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    11ba:	f8 01       	movw	r30, r16
    11bc:	f6 8c       	ldd	r15, Z+30	; 0x1e
    11be:	ff 20       	and	r15, r15
    11c0:	b1 f0       	breq	.+44     	; 0x11ee <xQueueReceive+0x68>
    11c2:	b6 01       	movw	r22, r12
    11c4:	c8 01       	movw	r24, r16
    11c6:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <prvCopyDataFromQueue>
    11ca:	fa 94       	dec	r15
    11cc:	f8 01       	movw	r30, r16
    11ce:	f6 8e       	std	Z+30, r15	; 0x1e
    11d0:	80 85       	ldd	r24, Z+8	; 0x08
    11d2:	88 23       	and	r24, r24
    11d4:	39 f0       	breq	.+14     	; 0x11e4 <xQueueReceive+0x5e>
    11d6:	c8 01       	movw	r24, r16
    11d8:	08 96       	adiw	r24, 0x08	; 8
    11da:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <xTaskRemoveFromEventList>
    11de:	81 11       	cpse	r24, r1
    11e0:	0e 94 aa 05 	call	0xb54	; 0xb54 <vPortYield>
    11e4:	ff 91       	pop	r31
    11e6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	5f c0       	rjmp	.+190    	; 0x12ac <xQueueReceive+0x126>
    11ee:	8e 81       	ldd	r24, Y+6	; 0x06
    11f0:	9f 81       	ldd	r25, Y+7	; 0x07
    11f2:	a8 85       	ldd	r26, Y+8	; 0x08
    11f4:	b9 85       	ldd	r27, Y+9	; 0x09
    11f6:	89 2b       	or	r24, r25
    11f8:	8a 2b       	or	r24, r26
    11fa:	8b 2b       	or	r24, r27
    11fc:	29 f4       	brne	.+10     	; 0x1208 <xQueueReceive+0x82>
    11fe:	ff 91       	pop	r31
    1200:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	52 c0       	rjmp	.+164    	; 0x12ac <xQueueReceive+0x126>
    1208:	e1 10       	cpse	r14, r1
    120a:	06 c0       	rjmp	.+12     	; 0x1218 <xQueueReceive+0x92>
    120c:	ce 01       	movw	r24, r28
    120e:	01 96       	adiw	r24, 0x01	; 1
    1210:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <vTaskInternalSetTimeOutState>
    1214:	ee 24       	eor	r14, r14
    1216:	e3 94       	inc	r14
    1218:	ff 91       	pop	r31
    121a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    121e:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <vTaskSuspendAll>
    1222:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1226:	ff 93       	push	r31
    1228:	f8 7f       	andi	r31, 0xF8	; 248
    122a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    122e:	f8 01       	movw	r30, r16
    1230:	81 a1       	ldd	r24, Z+33	; 0x21
    1232:	8f 3f       	cpi	r24, 0xFF	; 255
    1234:	09 f4       	brne	.+2      	; 0x1238 <xQueueReceive+0xb2>
    1236:	11 a2       	std	Z+33, r1	; 0x21
    1238:	f8 01       	movw	r30, r16
    123a:	82 a1       	ldd	r24, Z+34	; 0x22
    123c:	8f 3f       	cpi	r24, 0xFF	; 255
    123e:	09 f4       	brne	.+2      	; 0x1242 <xQueueReceive+0xbc>
    1240:	12 a2       	std	Z+34, r1	; 0x22
    1242:	ff 91       	pop	r31
    1244:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1248:	be 01       	movw	r22, r28
    124a:	6a 5f       	subi	r22, 0xFA	; 250
    124c:	7f 4f       	sbci	r23, 0xFF	; 255
    124e:	ce 01       	movw	r24, r28
    1250:	01 96       	adiw	r24, 0x01	; 1
    1252:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <xTaskCheckForTimeOut>
    1256:	81 11       	cpse	r24, r1
    1258:	1d c0       	rjmp	.+58     	; 0x1294 <xQueueReceive+0x10e>
    125a:	c8 01       	movw	r24, r16
    125c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <prvIsQueueEmpty>
    1260:	88 23       	and	r24, r24
    1262:	91 f0       	breq	.+36     	; 0x1288 <xQueueReceive+0x102>
    1264:	4e 81       	ldd	r20, Y+6	; 0x06
    1266:	5f 81       	ldd	r21, Y+7	; 0x07
    1268:	68 85       	ldd	r22, Y+8	; 0x08
    126a:	79 85       	ldd	r23, Y+9	; 0x09
    126c:	c8 01       	movw	r24, r16
    126e:	43 96       	adiw	r24, 0x13	; 19
    1270:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <vTaskPlaceOnEventList>
    1274:	c8 01       	movw	r24, r16
    1276:	0e 94 14 07 	call	0xe28	; 0xe28 <prvUnlockQueue>
    127a:	0e 94 ba 0c 	call	0x1974	; 0x1974 <xTaskResumeAll>
    127e:	81 11       	cpse	r24, r1
    1280:	96 cf       	rjmp	.-212    	; 0x11ae <xQueueReceive+0x28>
    1282:	0e 94 aa 05 	call	0xb54	; 0xb54 <vPortYield>
    1286:	93 cf       	rjmp	.-218    	; 0x11ae <xQueueReceive+0x28>
    1288:	c8 01       	movw	r24, r16
    128a:	0e 94 14 07 	call	0xe28	; 0xe28 <prvUnlockQueue>
    128e:	0e 94 ba 0c 	call	0x1974	; 0x1974 <xTaskResumeAll>
    1292:	8d cf       	rjmp	.-230    	; 0x11ae <xQueueReceive+0x28>
    1294:	c8 01       	movw	r24, r16
    1296:	0e 94 14 07 	call	0xe28	; 0xe28 <prvUnlockQueue>
    129a:	0e 94 ba 0c 	call	0x1974	; 0x1974 <xTaskResumeAll>
    129e:	c8 01       	movw	r24, r16
    12a0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <prvIsQueueEmpty>
    12a4:	88 23       	and	r24, r24
    12a6:	09 f4       	brne	.+2      	; 0x12aa <xQueueReceive+0x124>
    12a8:	82 cf       	rjmp	.-252    	; 0x11ae <xQueueReceive+0x28>
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	29 96       	adiw	r28, 0x09	; 9
    12ae:	cd bf       	out	0x3d, r28	; 61
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	1f 91       	pop	r17
    12b8:	0f 91       	pop	r16
    12ba:	ff 90       	pop	r15
    12bc:	ef 90       	pop	r14
    12be:	df 90       	pop	r13
    12c0:	cf 90       	pop	r12
    12c2:	08 95       	ret

000012c4 <uxQueueMessagesWaiting>:
    12c4:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    12c8:	ff 93       	push	r31
    12ca:	f8 7f       	andi	r31, 0xF8	; 248
    12cc:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    12d0:	fc 01       	movw	r30, r24
    12d2:	86 8d       	ldd	r24, Z+30	; 0x1e
    12d4:	ff 91       	pop	r31
    12d6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    12da:	08 95       	ret

000012dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    12dc:	cf 93       	push	r28
    12de:	df 93       	push	r29
    12e0:	ec 01       	movw	r28, r24
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    12e2:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    12e6:	ff 93       	push	r31
    12e8:	f8 7f       	andi	r31, 0xF8	; 248
    12ea:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    12ee:	89 a1       	ldd	r24, Y+33	; 0x21
    12f0:	8f 3f       	cpi	r24, 0xFF	; 255
    12f2:	09 f4       	brne	.+2      	; 0x12f6 <vQueueWaitForMessageRestricted+0x1a>
    12f4:	19 a2       	std	Y+33, r1	; 0x21
    12f6:	8a a1       	ldd	r24, Y+34	; 0x22
    12f8:	8f 3f       	cpi	r24, 0xFF	; 255
    12fa:	09 f4       	brne	.+2      	; 0x12fe <vQueueWaitForMessageRestricted+0x22>
    12fc:	1a a2       	std	Y+34, r1	; 0x22
    12fe:	ff 91       	pop	r31
    1300:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1304:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1306:	81 11       	cpse	r24, r1
    1308:	04 c0       	rjmp	.+8      	; 0x1312 <vQueueWaitForMessageRestricted+0x36>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    130a:	ce 01       	movw	r24, r28
    130c:	43 96       	adiw	r24, 0x13	; 19
    130e:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    1312:	ce 01       	movw	r24, r28
    1314:	0e 94 14 07 	call	0xe28	; 0xe28 <prvUnlockQueue>
	}
    1318:	df 91       	pop	r29
    131a:	cf 91       	pop	r28
    131c:	08 95       	ret

0000131e <prvResetNextTaskUnblockTime>:
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;

		return xReturn;
	}
    131e:	e0 91 4a 30 	lds	r30, 0x304A	; 0x80304a <pxDelayedTaskList>
    1322:	f0 91 4b 30 	lds	r31, 0x304B	; 0x80304b <pxDelayedTaskList+0x1>
    1326:	80 81       	ld	r24, Z
    1328:	81 11       	cpse	r24, r1
    132a:	0c c0       	rjmp	.+24     	; 0x1344 <prvResetNextTaskUnblockTime+0x26>
    132c:	8f ef       	ldi	r24, 0xFF	; 255
    132e:	9f ef       	ldi	r25, 0xFF	; 255
    1330:	dc 01       	movw	r26, r24
    1332:	80 93 23 30 	sts	0x3023, r24	; 0x803023 <xNextTaskUnblockTime>
    1336:	90 93 24 30 	sts	0x3024, r25	; 0x803024 <xNextTaskUnblockTime+0x1>
    133a:	a0 93 25 30 	sts	0x3025, r26	; 0x803025 <xNextTaskUnblockTime+0x2>
    133e:	b0 93 26 30 	sts	0x3026, r27	; 0x803026 <xNextTaskUnblockTime+0x3>
    1342:	08 95       	ret
    1344:	e0 91 4a 30 	lds	r30, 0x304A	; 0x80304a <pxDelayedTaskList>
    1348:	f0 91 4b 30 	lds	r31, 0x304B	; 0x80304b <pxDelayedTaskList+0x1>
    134c:	07 80       	ldd	r0, Z+7	; 0x07
    134e:	f0 85       	ldd	r31, Z+8	; 0x08
    1350:	e0 2d       	mov	r30, r0
    1352:	00 84       	ldd	r0, Z+8	; 0x08
    1354:	f1 85       	ldd	r31, Z+9	; 0x09
    1356:	e0 2d       	mov	r30, r0
    1358:	82 81       	ldd	r24, Z+2	; 0x02
    135a:	93 81       	ldd	r25, Z+3	; 0x03
    135c:	a4 81       	ldd	r26, Z+4	; 0x04
    135e:	b5 81       	ldd	r27, Z+5	; 0x05
    1360:	80 93 23 30 	sts	0x3023, r24	; 0x803023 <xNextTaskUnblockTime>
    1364:	90 93 24 30 	sts	0x3024, r25	; 0x803024 <xNextTaskUnblockTime+0x1>
    1368:	a0 93 25 30 	sts	0x3025, r26	; 0x803025 <xNextTaskUnblockTime+0x2>
    136c:	b0 93 26 30 	sts	0x3026, r27	; 0x803026 <xNextTaskUnblockTime+0x3>
    1370:	08 95       	ret

00001372 <prvInitialiseNewTask>:
    1372:	2f 92       	push	r2
    1374:	3f 92       	push	r3
    1376:	4f 92       	push	r4
    1378:	5f 92       	push	r5
    137a:	6f 92       	push	r6
    137c:	7f 92       	push	r7
    137e:	8f 92       	push	r8
    1380:	9f 92       	push	r9
    1382:	af 92       	push	r10
    1384:	bf 92       	push	r11
    1386:	cf 92       	push	r12
    1388:	df 92       	push	r13
    138a:	ef 92       	push	r14
    138c:	0f 93       	push	r16
    138e:	1f 93       	push	r17
    1390:	cf 93       	push	r28
    1392:	df 93       	push	r29
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    1398:	1c 01       	movw	r2, r24
    139a:	4b 01       	movw	r8, r22
    139c:	29 01       	movw	r4, r18
    139e:	3a 01       	movw	r6, r20
    13a0:	a9 01       	movw	r20, r18
    13a2:	65 ea       	ldi	r22, 0xA5	; 165
    13a4:	70 e0       	ldi	r23, 0x00	; 0
    13a6:	f5 01       	movw	r30, r10
    13a8:	83 8d       	ldd	r24, Z+27	; 0x1b
    13aa:	94 8d       	ldd	r25, Z+28	; 0x1c
    13ac:	0e 94 c5 1d 	call	0x3b8a	; 0x3b8a <memset>
    13b0:	f5 01       	movw	r30, r10
    13b2:	83 8d       	ldd	r24, Z+27	; 0x1b
    13b4:	94 8d       	ldd	r25, Z+28	; 0x1c
    13b6:	f1 e0       	ldi	r31, 0x01	; 1
    13b8:	4f 1a       	sub	r4, r31
    13ba:	51 08       	sbc	r5, r1
    13bc:	48 0e       	add	r4, r24
    13be:	59 1e       	adc	r5, r25
    13c0:	20 e0       	ldi	r18, 0x00	; 0
    13c2:	0f c0       	rjmp	.+30     	; 0x13e2 <prvInitialiseNewTask+0x70>
    13c4:	82 2f       	mov	r24, r18
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	f4 01       	movw	r30, r8
    13ca:	e8 0f       	add	r30, r24
    13cc:	f9 1f       	adc	r31, r25
    13ce:	30 81       	ld	r19, Z
    13d0:	d5 01       	movw	r26, r10
    13d2:	a8 0f       	add	r26, r24
    13d4:	b9 1f       	adc	r27, r25
    13d6:	5d 96       	adiw	r26, 0x1d	; 29
    13d8:	3c 93       	st	X, r19
    13da:	80 81       	ld	r24, Z
    13dc:	88 23       	and	r24, r24
    13de:	19 f0       	breq	.+6      	; 0x13e6 <prvInitialiseNewTask+0x74>
    13e0:	2f 5f       	subi	r18, 0xFF	; 255
    13e2:	28 30       	cpi	r18, 0x08	; 8
    13e4:	78 f3       	brcs	.-34     	; 0x13c4 <prvInitialiseNewTask+0x52>
    13e6:	f5 01       	movw	r30, r10
    13e8:	14 a2       	std	Z+36, r1	; 0x24
    13ea:	f3 e0       	ldi	r31, 0x03	; 3
    13ec:	fe 15       	cp	r31, r14
    13ee:	20 f4       	brcc	.+8      	; 0x13f8 <prvInitialiseNewTask+0x86>
    13f0:	0f 2e       	mov	r0, r31
    13f2:	f3 e0       	ldi	r31, 0x03	; 3
    13f4:	ef 2e       	mov	r14, r31
    13f6:	f0 2d       	mov	r31, r0
    13f8:	f5 01       	movw	r30, r10
    13fa:	e2 8e       	std	Z+26, r14	; 0x1a
    13fc:	c5 01       	movw	r24, r10
    13fe:	02 96       	adiw	r24, 0x02	; 2
    1400:	0e 94 50 04 	call	0x8a0	; 0x8a0 <vListInitialiseItem>
    1404:	c5 01       	movw	r24, r10
    1406:	0e 96       	adiw	r24, 0x0e	; 14
    1408:	0e 94 50 04 	call	0x8a0	; 0x8a0 <vListInitialiseItem>
    140c:	f5 01       	movw	r30, r10
    140e:	a2 86       	std	Z+10, r10	; 0x0a
    1410:	b3 86       	std	Z+11, r11	; 0x0b
    1412:	84 e0       	ldi	r24, 0x04	; 4
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	a0 e0       	ldi	r26, 0x00	; 0
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	8e 19       	sub	r24, r14
    141c:	91 09       	sbc	r25, r1
    141e:	a1 09       	sbc	r26, r1
    1420:	b1 09       	sbc	r27, r1
    1422:	86 87       	std	Z+14, r24	; 0x0e
    1424:	97 87       	std	Z+15, r25	; 0x0f
    1426:	a0 8b       	std	Z+16, r26	; 0x10
    1428:	b1 8b       	std	Z+17, r27	; 0x11
    142a:	a6 8a       	std	Z+22, r10	; 0x16
    142c:	b7 8a       	std	Z+23, r11	; 0x17
    142e:	17 a2       	std	Z+39, r1	; 0x27
    1430:	10 a6       	std	Z+40, r1	; 0x28
    1432:	11 a6       	std	Z+41, r1	; 0x29
    1434:	12 a6       	std	Z+42, r1	; 0x2a
    1436:	13 a6       	std	Z+43, r1	; 0x2b
    1438:	a8 01       	movw	r20, r16
    143a:	b1 01       	movw	r22, r2
    143c:	c2 01       	movw	r24, r4
    143e:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <pxPortInitialiseStack>
    1442:	f5 01       	movw	r30, r10
    1444:	80 83       	st	Z, r24
    1446:	91 83       	std	Z+1, r25	; 0x01
    1448:	c1 14       	cp	r12, r1
    144a:	d1 04       	cpc	r13, r1
    144c:	19 f0       	breq	.+6      	; 0x1454 <prvInitialiseNewTask+0xe2>
    144e:	f6 01       	movw	r30, r12
    1450:	a0 82       	st	Z, r10
    1452:	b1 82       	std	Z+1, r11	; 0x01
    1454:	df 91       	pop	r29
    1456:	cf 91       	pop	r28
    1458:	1f 91       	pop	r17
    145a:	0f 91       	pop	r16
    145c:	ef 90       	pop	r14
    145e:	df 90       	pop	r13
    1460:	cf 90       	pop	r12
    1462:	bf 90       	pop	r11
    1464:	af 90       	pop	r10
    1466:	9f 90       	pop	r9
    1468:	8f 90       	pop	r8
    146a:	7f 90       	pop	r7
    146c:	6f 90       	pop	r6
    146e:	5f 90       	pop	r5
    1470:	4f 90       	pop	r4
    1472:	3f 90       	pop	r3
    1474:	2f 90       	pop	r2
    1476:	08 95       	ret

00001478 <prvInitialiseTaskLists>:
    1478:	cf 93       	push	r28
    147a:	c0 e0       	ldi	r28, 0x00	; 0
    147c:	09 c0       	rjmp	.+18     	; 0x1490 <prvInitialiseTaskLists+0x18>
    147e:	2b e0       	ldi	r18, 0x0B	; 11
    1480:	c2 9f       	mul	r28, r18
    1482:	c0 01       	movw	r24, r0
    1484:	11 24       	eor	r1, r1
    1486:	8e 59       	subi	r24, 0x9E	; 158
    1488:	9f 4c       	sbci	r25, 0xCF	; 207
    148a:	0e 94 3f 04 	call	0x87e	; 0x87e <vListInitialise>
    148e:	cf 5f       	subi	r28, 0xFF	; 255
    1490:	c4 30       	cpi	r28, 0x04	; 4
    1492:	a8 f3       	brcs	.-22     	; 0x147e <prvInitialiseTaskLists+0x6>
    1494:	87 e5       	ldi	r24, 0x57	; 87
    1496:	90 e3       	ldi	r25, 0x30	; 48
    1498:	0e 94 3f 04 	call	0x87e	; 0x87e <vListInitialise>
    149c:	8c e4       	ldi	r24, 0x4C	; 76
    149e:	90 e3       	ldi	r25, 0x30	; 48
    14a0:	0e 94 3f 04 	call	0x87e	; 0x87e <vListInitialise>
    14a4:	8d e3       	ldi	r24, 0x3D	; 61
    14a6:	90 e3       	ldi	r25, 0x30	; 48
    14a8:	0e 94 3f 04 	call	0x87e	; 0x87e <vListInitialise>
    14ac:	82 e3       	ldi	r24, 0x32	; 50
    14ae:	90 e3       	ldi	r25, 0x30	; 48
    14b0:	0e 94 3f 04 	call	0x87e	; 0x87e <vListInitialise>
    14b4:	87 e5       	ldi	r24, 0x57	; 87
    14b6:	90 e3       	ldi	r25, 0x30	; 48
    14b8:	80 93 4a 30 	sts	0x304A, r24	; 0x80304a <pxDelayedTaskList>
    14bc:	90 93 4b 30 	sts	0x304B, r25	; 0x80304b <pxDelayedTaskList+0x1>
    14c0:	8c e4       	ldi	r24, 0x4C	; 76
    14c2:	90 e3       	ldi	r25, 0x30	; 48
    14c4:	80 93 48 30 	sts	0x3048, r24	; 0x803048 <pxOverflowDelayedTaskList>
    14c8:	90 93 49 30 	sts	0x3049, r25	; 0x803049 <pxOverflowDelayedTaskList+0x1>
    14cc:	cf 91       	pop	r28
    14ce:	08 95       	ret

000014d0 <prvAddNewTaskToReadyList>:
    14d0:	cf 93       	push	r28
    14d2:	df 93       	push	r29
    14d4:	ec 01       	movw	r28, r24
    14d6:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    14da:	ff 93       	push	r31
    14dc:	f8 7f       	andi	r31, 0xF8	; 248
    14de:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    14e2:	80 91 31 30 	lds	r24, 0x3031	; 0x803031 <uxCurrentNumberOfTasks>
    14e6:	8f 5f       	subi	r24, 0xFF	; 255
    14e8:	80 93 31 30 	sts	0x3031, r24	; 0x803031 <uxCurrentNumberOfTasks>
    14ec:	80 91 8e 30 	lds	r24, 0x308E	; 0x80308e <pxCurrentTCB>
    14f0:	90 91 8f 30 	lds	r25, 0x308F	; 0x80308f <pxCurrentTCB+0x1>
    14f4:	89 2b       	or	r24, r25
    14f6:	59 f4       	brne	.+22     	; 0x150e <prvAddNewTaskToReadyList+0x3e>
    14f8:	c0 93 8e 30 	sts	0x308E, r28	; 0x80308e <pxCurrentTCB>
    14fc:	d0 93 8f 30 	sts	0x308F, r29	; 0x80308f <pxCurrentTCB+0x1>
    1500:	80 91 31 30 	lds	r24, 0x3031	; 0x803031 <uxCurrentNumberOfTasks>
    1504:	81 30       	cpi	r24, 0x01	; 1
    1506:	99 f4       	brne	.+38     	; 0x152e <prvAddNewTaskToReadyList+0x5e>
    1508:	0e 94 3c 0a 	call	0x1478	; 0x1478 <prvInitialiseTaskLists>
    150c:	10 c0       	rjmp	.+32     	; 0x152e <prvAddNewTaskToReadyList+0x5e>
    150e:	80 91 2b 30 	lds	r24, 0x302B	; 0x80302b <xSchedulerRunning>
    1512:	81 11       	cpse	r24, r1
    1514:	0c c0       	rjmp	.+24     	; 0x152e <prvAddNewTaskToReadyList+0x5e>
    1516:	e0 91 8e 30 	lds	r30, 0x308E	; 0x80308e <pxCurrentTCB>
    151a:	f0 91 8f 30 	lds	r31, 0x308F	; 0x80308f <pxCurrentTCB+0x1>
    151e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1520:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1522:	89 17       	cp	r24, r25
    1524:	20 f0       	brcs	.+8      	; 0x152e <prvAddNewTaskToReadyList+0x5e>
    1526:	c0 93 8e 30 	sts	0x308E, r28	; 0x80308e <pxCurrentTCB>
    152a:	d0 93 8f 30 	sts	0x308F, r29	; 0x80308f <pxCurrentTCB+0x1>
    152e:	80 91 27 30 	lds	r24, 0x3027	; 0x803027 <uxTaskNumber>
    1532:	8f 5f       	subi	r24, 0xFF	; 255
    1534:	80 93 27 30 	sts	0x3027, r24	; 0x803027 <uxTaskNumber>
    1538:	8d a3       	std	Y+37, r24	; 0x25
    153a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    153c:	90 91 2c 30 	lds	r25, 0x302C	; 0x80302c <uxTopReadyPriority>
    1540:	98 17       	cp	r25, r24
    1542:	10 f4       	brcc	.+4      	; 0x1548 <prvAddNewTaskToReadyList+0x78>
    1544:	80 93 2c 30 	sts	0x302C, r24	; 0x80302c <uxTopReadyPriority>
    1548:	2b e0       	ldi	r18, 0x0B	; 11
    154a:	82 9f       	mul	r24, r18
    154c:	c0 01       	movw	r24, r0
    154e:	11 24       	eor	r1, r1
    1550:	be 01       	movw	r22, r28
    1552:	6e 5f       	subi	r22, 0xFE	; 254
    1554:	7f 4f       	sbci	r23, 0xFF	; 255
    1556:	8e 59       	subi	r24, 0x9E	; 158
    1558:	9f 4c       	sbci	r25, 0xCF	; 207
    155a:	0e 94 54 04 	call	0x8a8	; 0x8a8 <vListInsertEnd>
    155e:	ff 91       	pop	r31
    1560:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1564:	80 91 2b 30 	lds	r24, 0x302B	; 0x80302b <xSchedulerRunning>
    1568:	88 23       	and	r24, r24
    156a:	51 f0       	breq	.+20     	; 0x1580 <prvAddNewTaskToReadyList+0xb0>
    156c:	e0 91 8e 30 	lds	r30, 0x308E	; 0x80308e <pxCurrentTCB>
    1570:	f0 91 8f 30 	lds	r31, 0x308F	; 0x80308f <pxCurrentTCB+0x1>
    1574:	92 8d       	ldd	r25, Z+26	; 0x1a
    1576:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1578:	98 17       	cp	r25, r24
    157a:	10 f4       	brcc	.+4      	; 0x1580 <prvAddNewTaskToReadyList+0xb0>
    157c:	0e 94 aa 05 	call	0xb54	; 0xb54 <vPortYield>
    1580:	df 91       	pop	r29
    1582:	cf 91       	pop	r28
    1584:	08 95       	ret

00001586 <prvAddCurrentTaskToDelayedList>:
    1586:	8f 92       	push	r8
    1588:	9f 92       	push	r9
    158a:	af 92       	push	r10
    158c:	bf 92       	push	r11
    158e:	cf 92       	push	r12
    1590:	df 92       	push	r13
    1592:	ef 92       	push	r14
    1594:	ff 92       	push	r15
    1596:	cf 93       	push	r28
    1598:	6b 01       	movw	r12, r22
    159a:	7c 01       	movw	r14, r24
    159c:	c4 2f       	mov	r28, r20
    159e:	80 90 2d 30 	lds	r8, 0x302D	; 0x80302d <xTickCount>
    15a2:	90 90 2e 30 	lds	r9, 0x302E	; 0x80302e <xTickCount+0x1>
    15a6:	a0 90 2f 30 	lds	r10, 0x302F	; 0x80302f <xTickCount+0x2>
    15aa:	b0 90 30 30 	lds	r11, 0x3030	; 0x803030 <xTickCount+0x3>
    15ae:	80 91 8e 30 	lds	r24, 0x308E	; 0x80308e <pxCurrentTCB>
    15b2:	90 91 8f 30 	lds	r25, 0x308F	; 0x80308f <pxCurrentTCB+0x1>
    15b6:	02 96       	adiw	r24, 0x02	; 2
    15b8:	0e 94 b2 04 	call	0x964	; 0x964 <uxListRemove>
    15bc:	8f ef       	ldi	r24, 0xFF	; 255
    15be:	c8 16       	cp	r12, r24
    15c0:	d8 06       	cpc	r13, r24
    15c2:	e8 06       	cpc	r14, r24
    15c4:	f8 06       	cpc	r15, r24
    15c6:	69 f4       	brne	.+26     	; 0x15e2 <prvAddCurrentTaskToDelayedList+0x5c>
    15c8:	cc 23       	and	r28, r28
    15ca:	59 f0       	breq	.+22     	; 0x15e2 <prvAddCurrentTaskToDelayedList+0x5c>
    15cc:	60 91 8e 30 	lds	r22, 0x308E	; 0x80308e <pxCurrentTCB>
    15d0:	70 91 8f 30 	lds	r23, 0x308F	; 0x80308f <pxCurrentTCB+0x1>
    15d4:	6e 5f       	subi	r22, 0xFE	; 254
    15d6:	7f 4f       	sbci	r23, 0xFF	; 255
    15d8:	82 e3       	ldi	r24, 0x32	; 50
    15da:	90 e3       	ldi	r25, 0x30	; 48
    15dc:	0e 94 54 04 	call	0x8a8	; 0x8a8 <vListInsertEnd>
    15e0:	3f c0       	rjmp	.+126    	; 0x1660 <prvAddCurrentTaskToDelayedList+0xda>
    15e2:	c8 0c       	add	r12, r8
    15e4:	d9 1c       	adc	r13, r9
    15e6:	ea 1c       	adc	r14, r10
    15e8:	fb 1c       	adc	r15, r11
    15ea:	e0 91 8e 30 	lds	r30, 0x308E	; 0x80308e <pxCurrentTCB>
    15ee:	f0 91 8f 30 	lds	r31, 0x308F	; 0x80308f <pxCurrentTCB+0x1>
    15f2:	c2 82       	std	Z+2, r12	; 0x02
    15f4:	d3 82       	std	Z+3, r13	; 0x03
    15f6:	e4 82       	std	Z+4, r14	; 0x04
    15f8:	f5 82       	std	Z+5, r15	; 0x05
    15fa:	c8 14       	cp	r12, r8
    15fc:	d9 04       	cpc	r13, r9
    15fe:	ea 04       	cpc	r14, r10
    1600:	fb 04       	cpc	r15, r11
    1602:	68 f4       	brcc	.+26     	; 0x161e <prvAddCurrentTaskToDelayedList+0x98>
    1604:	60 91 8e 30 	lds	r22, 0x308E	; 0x80308e <pxCurrentTCB>
    1608:	70 91 8f 30 	lds	r23, 0x308F	; 0x80308f <pxCurrentTCB+0x1>
    160c:	80 91 48 30 	lds	r24, 0x3048	; 0x803048 <pxOverflowDelayedTaskList>
    1610:	90 91 49 30 	lds	r25, 0x3049	; 0x803049 <pxOverflowDelayedTaskList+0x1>
    1614:	6e 5f       	subi	r22, 0xFE	; 254
    1616:	7f 4f       	sbci	r23, 0xFF	; 255
    1618:	0e 94 75 04 	call	0x8ea	; 0x8ea <vListInsert>
    161c:	21 c0       	rjmp	.+66     	; 0x1660 <prvAddCurrentTaskToDelayedList+0xda>
    161e:	60 91 8e 30 	lds	r22, 0x308E	; 0x80308e <pxCurrentTCB>
    1622:	70 91 8f 30 	lds	r23, 0x308F	; 0x80308f <pxCurrentTCB+0x1>
    1626:	80 91 4a 30 	lds	r24, 0x304A	; 0x80304a <pxDelayedTaskList>
    162a:	90 91 4b 30 	lds	r25, 0x304B	; 0x80304b <pxDelayedTaskList+0x1>
    162e:	6e 5f       	subi	r22, 0xFE	; 254
    1630:	7f 4f       	sbci	r23, 0xFF	; 255
    1632:	0e 94 75 04 	call	0x8ea	; 0x8ea <vListInsert>
    1636:	80 91 23 30 	lds	r24, 0x3023	; 0x803023 <xNextTaskUnblockTime>
    163a:	90 91 24 30 	lds	r25, 0x3024	; 0x803024 <xNextTaskUnblockTime+0x1>
    163e:	a0 91 25 30 	lds	r26, 0x3025	; 0x803025 <xNextTaskUnblockTime+0x2>
    1642:	b0 91 26 30 	lds	r27, 0x3026	; 0x803026 <xNextTaskUnblockTime+0x3>
    1646:	c8 16       	cp	r12, r24
    1648:	d9 06       	cpc	r13, r25
    164a:	ea 06       	cpc	r14, r26
    164c:	fb 06       	cpc	r15, r27
    164e:	40 f4       	brcc	.+16     	; 0x1660 <prvAddCurrentTaskToDelayedList+0xda>
    1650:	c0 92 23 30 	sts	0x3023, r12	; 0x803023 <xNextTaskUnblockTime>
    1654:	d0 92 24 30 	sts	0x3024, r13	; 0x803024 <xNextTaskUnblockTime+0x1>
    1658:	e0 92 25 30 	sts	0x3025, r14	; 0x803025 <xNextTaskUnblockTime+0x2>
    165c:	f0 92 26 30 	sts	0x3026, r15	; 0x803026 <xNextTaskUnblockTime+0x3>
    1660:	cf 91       	pop	r28
    1662:	ff 90       	pop	r15
    1664:	ef 90       	pop	r14
    1666:	df 90       	pop	r13
    1668:	cf 90       	pop	r12
    166a:	bf 90       	pop	r11
    166c:	af 90       	pop	r10
    166e:	9f 90       	pop	r9
    1670:	8f 90       	pop	r8
    1672:	08 95       	ret

00001674 <prvIdleTask>:
    1674:	80 91 62 30 	lds	r24, 0x3062	; 0x803062 <pxReadyTasksLists>
    1678:	82 30       	cpi	r24, 0x02	; 2
    167a:	10 f0       	brcs	.+4      	; 0x1680 <prvIdleTask+0xc>
    167c:	0e 94 aa 05 	call	0xb54	; 0xb54 <vPortYield>
    1680:	0e 94 40 14 	call	0x2880	; 0x2880 <vApplicationIdleHook>
    1684:	f7 cf       	rjmp	.-18     	; 0x1674 <prvIdleTask>

00001686 <xTaskCreate>:
    1686:	2f 92       	push	r2
    1688:	3f 92       	push	r3
    168a:	4f 92       	push	r4
    168c:	5f 92       	push	r5
    168e:	6f 92       	push	r6
    1690:	7f 92       	push	r7
    1692:	8f 92       	push	r8
    1694:	9f 92       	push	r9
    1696:	af 92       	push	r10
    1698:	bf 92       	push	r11
    169a:	cf 92       	push	r12
    169c:	df 92       	push	r13
    169e:	ef 92       	push	r14
    16a0:	ff 92       	push	r15
    16a2:	0f 93       	push	r16
    16a4:	1f 93       	push	r17
    16a6:	cf 93       	push	r28
    16a8:	df 93       	push	r29
    16aa:	3c 01       	movw	r6, r24
    16ac:	1b 01       	movw	r2, r22
    16ae:	5a 01       	movw	r10, r20
    16b0:	29 01       	movw	r4, r18
    16b2:	ca 01       	movw	r24, r20
    16b4:	0e 94 18 04 	call	0x830	; 0x830 <pvPortMalloc>
    16b8:	6c 01       	movw	r12, r24
    16ba:	89 2b       	or	r24, r25
    16bc:	71 f0       	breq	.+28     	; 0x16da <xTaskCreate+0x54>
    16be:	8c e2       	ldi	r24, 0x2C	; 44
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	0e 94 18 04 	call	0x830	; 0x830 <pvPortMalloc>
    16c6:	ec 01       	movw	r28, r24
    16c8:	89 2b       	or	r24, r25
    16ca:	19 f0       	breq	.+6      	; 0x16d2 <xTaskCreate+0x4c>
    16cc:	cb 8e       	std	Y+27, r12	; 0x1b
    16ce:	dc 8e       	std	Y+28, r13	; 0x1c
    16d0:	06 c0       	rjmp	.+12     	; 0x16de <xTaskCreate+0x58>
    16d2:	c6 01       	movw	r24, r12
    16d4:	0e 94 3e 04 	call	0x87c	; 0x87c <vPortFree>
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <xTaskCreate+0x58>
    16da:	c0 e0       	ldi	r28, 0x00	; 0
    16dc:	d0 e0       	ldi	r29, 0x00	; 0
    16de:	20 97       	sbiw	r28, 0x00	; 0
    16e0:	91 f0       	breq	.+36     	; 0x1706 <xTaskCreate+0x80>
    16e2:	95 01       	movw	r18, r10
    16e4:	40 e0       	ldi	r20, 0x00	; 0
    16e6:	50 e0       	ldi	r21, 0x00	; 0
    16e8:	81 2c       	mov	r8, r1
    16ea:	91 2c       	mov	r9, r1
    16ec:	5e 01       	movw	r10, r28
    16ee:	67 01       	movw	r12, r14
    16f0:	e0 2e       	mov	r14, r16
    16f2:	82 01       	movw	r16, r4
    16f4:	b1 01       	movw	r22, r2
    16f6:	c3 01       	movw	r24, r6
    16f8:	0e 94 b9 09 	call	0x1372	; 0x1372 <prvInitialiseNewTask>
    16fc:	ce 01       	movw	r24, r28
    16fe:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <prvAddNewTaskToReadyList>
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	01 c0       	rjmp	.+2      	; 0x1708 <xTaskCreate+0x82>
    1706:	8f ef       	ldi	r24, 0xFF	; 255
    1708:	df 91       	pop	r29
    170a:	cf 91       	pop	r28
    170c:	1f 91       	pop	r17
    170e:	0f 91       	pop	r16
    1710:	ff 90       	pop	r15
    1712:	ef 90       	pop	r14
    1714:	df 90       	pop	r13
    1716:	cf 90       	pop	r12
    1718:	bf 90       	pop	r11
    171a:	af 90       	pop	r10
    171c:	9f 90       	pop	r9
    171e:	8f 90       	pop	r8
    1720:	7f 90       	pop	r7
    1722:	6f 90       	pop	r6
    1724:	5f 90       	pop	r5
    1726:	4f 90       	pop	r4
    1728:	3f 90       	pop	r3
    172a:	2f 90       	pop	r2
    172c:	08 95       	ret

0000172e <vTaskStartScheduler>:
    172e:	ef 92       	push	r14
    1730:	ff 92       	push	r15
    1732:	0f 93       	push	r16
    1734:	0f 2e       	mov	r0, r31
    1736:	f1 e2       	ldi	r31, 0x21	; 33
    1738:	ef 2e       	mov	r14, r31
    173a:	f0 e3       	ldi	r31, 0x30	; 48
    173c:	ff 2e       	mov	r15, r31
    173e:	f0 2d       	mov	r31, r0
    1740:	00 e0       	ldi	r16, 0x00	; 0
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	48 ec       	ldi	r20, 0xC8	; 200
    1748:	50 e0       	ldi	r21, 0x00	; 0
    174a:	64 e0       	ldi	r22, 0x04	; 4
    174c:	70 e2       	ldi	r23, 0x20	; 32
    174e:	8a e3       	ldi	r24, 0x3A	; 58
    1750:	9b e0       	ldi	r25, 0x0B	; 11
    1752:	0e 94 43 0b 	call	0x1686	; 0x1686 <xTaskCreate>
    1756:	81 30       	cpi	r24, 0x01	; 1
    1758:	11 f4       	brne	.+4      	; 0x175e <vTaskStartScheduler+0x30>
    175a:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <xTimerCreateTimerTask>
    175e:	81 30       	cpi	r24, 0x01	; 1
    1760:	e9 f4       	brne	.+58     	; 0x179c <vTaskStartScheduler+0x6e>
    1762:	e0 ea       	ldi	r30, 0xA0	; 160
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	82 81       	ldd	r24, Z+2	; 0x02
    1768:	88 7f       	andi	r24, 0xF8	; 248
    176a:	82 83       	std	Z+2, r24	; 0x02
    176c:	8f ef       	ldi	r24, 0xFF	; 255
    176e:	9f ef       	ldi	r25, 0xFF	; 255
    1770:	dc 01       	movw	r26, r24
    1772:	80 93 23 30 	sts	0x3023, r24	; 0x803023 <xNextTaskUnblockTime>
    1776:	90 93 24 30 	sts	0x3024, r25	; 0x803024 <xNextTaskUnblockTime+0x1>
    177a:	a0 93 25 30 	sts	0x3025, r26	; 0x803025 <xNextTaskUnblockTime+0x2>
    177e:	b0 93 26 30 	sts	0x3026, r27	; 0x803026 <xNextTaskUnblockTime+0x3>
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	80 93 2b 30 	sts	0x302B, r24	; 0x80302b <xSchedulerRunning>
    1788:	10 92 2d 30 	sts	0x302D, r1	; 0x80302d <xTickCount>
    178c:	10 92 2e 30 	sts	0x302E, r1	; 0x80302e <xTickCount+0x1>
    1790:	10 92 2f 30 	sts	0x302F, r1	; 0x80302f <xTickCount+0x2>
    1794:	10 92 30 30 	sts	0x3030, r1	; 0x803030 <xTickCount+0x3>
    1798:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xPortStartScheduler>
    179c:	0f 91       	pop	r16
    179e:	ff 90       	pop	r15
    17a0:	ef 90       	pop	r14
    17a2:	08 95       	ret

000017a4 <vTaskSuspendAll>:
    17a4:	80 91 20 30 	lds	r24, 0x3020	; 0x803020 <uxSchedulerSuspended>
    17a8:	8f 5f       	subi	r24, 0xFF	; 255
    17aa:	80 93 20 30 	sts	0x3020, r24	; 0x803020 <uxSchedulerSuspended>
    17ae:	08 95       	ret

000017b0 <xTaskGetTickCount>:
    17b0:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    17b4:	ff 93       	push	r31
    17b6:	f8 7f       	andi	r31, 0xF8	; 248
    17b8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    17bc:	60 91 2d 30 	lds	r22, 0x302D	; 0x80302d <xTickCount>
    17c0:	70 91 2e 30 	lds	r23, 0x302E	; 0x80302e <xTickCount+0x1>
    17c4:	80 91 2f 30 	lds	r24, 0x302F	; 0x80302f <xTickCount+0x2>
    17c8:	90 91 30 30 	lds	r25, 0x3030	; 0x803030 <xTickCount+0x3>
    17cc:	ff 91       	pop	r31
    17ce:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    17d2:	08 95       	ret

000017d4 <xTaskIncrementTick>:
    17d4:	bf 92       	push	r11
    17d6:	cf 92       	push	r12
    17d8:	df 92       	push	r13
    17da:	ef 92       	push	r14
    17dc:	ff 92       	push	r15
    17de:	0f 93       	push	r16
    17e0:	1f 93       	push	r17
    17e2:	cf 93       	push	r28
    17e4:	df 93       	push	r29
    17e6:	80 91 20 30 	lds	r24, 0x3020	; 0x803020 <uxSchedulerSuspended>
    17ea:	81 11       	cpse	r24, r1
    17ec:	a9 c0       	rjmp	.+338    	; 0x1940 <xTaskIncrementTick+0x16c>
    17ee:	c0 90 2d 30 	lds	r12, 0x302D	; 0x80302d <xTickCount>
    17f2:	d0 90 2e 30 	lds	r13, 0x302E	; 0x80302e <xTickCount+0x1>
    17f6:	e0 90 2f 30 	lds	r14, 0x302F	; 0x80302f <xTickCount+0x2>
    17fa:	f0 90 30 30 	lds	r15, 0x3030	; 0x803030 <xTickCount+0x3>
    17fe:	2f ef       	ldi	r18, 0xFF	; 255
    1800:	c2 1a       	sub	r12, r18
    1802:	d2 0a       	sbc	r13, r18
    1804:	e2 0a       	sbc	r14, r18
    1806:	f2 0a       	sbc	r15, r18
    1808:	c0 92 2d 30 	sts	0x302D, r12	; 0x80302d <xTickCount>
    180c:	d0 92 2e 30 	sts	0x302E, r13	; 0x80302e <xTickCount+0x1>
    1810:	e0 92 2f 30 	sts	0x302F, r14	; 0x80302f <xTickCount+0x2>
    1814:	f0 92 30 30 	sts	0x3030, r15	; 0x803030 <xTickCount+0x3>
    1818:	c1 14       	cp	r12, r1
    181a:	d1 04       	cpc	r13, r1
    181c:	e1 04       	cpc	r14, r1
    181e:	f1 04       	cpc	r15, r1
    1820:	b9 f4       	brne	.+46     	; 0x1850 <xTaskIncrementTick+0x7c>
    1822:	80 91 4a 30 	lds	r24, 0x304A	; 0x80304a <pxDelayedTaskList>
    1826:	90 91 4b 30 	lds	r25, 0x304B	; 0x80304b <pxDelayedTaskList+0x1>
    182a:	20 91 48 30 	lds	r18, 0x3048	; 0x803048 <pxOverflowDelayedTaskList>
    182e:	30 91 49 30 	lds	r19, 0x3049	; 0x803049 <pxOverflowDelayedTaskList+0x1>
    1832:	20 93 4a 30 	sts	0x304A, r18	; 0x80304a <pxDelayedTaskList>
    1836:	30 93 4b 30 	sts	0x304B, r19	; 0x80304b <pxDelayedTaskList+0x1>
    183a:	80 93 48 30 	sts	0x3048, r24	; 0x803048 <pxOverflowDelayedTaskList>
    183e:	90 93 49 30 	sts	0x3049, r25	; 0x803049 <pxOverflowDelayedTaskList+0x1>
    1842:	80 91 28 30 	lds	r24, 0x3028	; 0x803028 <xNumOfOverflows>
    1846:	8f 5f       	subi	r24, 0xFF	; 255
    1848:	80 93 28 30 	sts	0x3028, r24	; 0x803028 <xNumOfOverflows>
    184c:	0e 94 8f 09 	call	0x131e	; 0x131e <prvResetNextTaskUnblockTime>
    1850:	80 91 23 30 	lds	r24, 0x3023	; 0x803023 <xNextTaskUnblockTime>
    1854:	90 91 24 30 	lds	r25, 0x3024	; 0x803024 <xNextTaskUnblockTime+0x1>
    1858:	a0 91 25 30 	lds	r26, 0x3025	; 0x803025 <xNextTaskUnblockTime+0x2>
    185c:	b0 91 26 30 	lds	r27, 0x3026	; 0x803026 <xNextTaskUnblockTime+0x3>
    1860:	c8 16       	cp	r12, r24
    1862:	d9 06       	cpc	r13, r25
    1864:	ea 06       	cpc	r14, r26
    1866:	fb 06       	cpc	r15, r27
    1868:	28 f4       	brcc	.+10     	; 0x1874 <xTaskIncrementTick+0xa0>
    186a:	b1 2c       	mov	r11, r1
    186c:	5a c0       	rjmp	.+180    	; 0x1922 <xTaskIncrementTick+0x14e>
    186e:	bb 24       	eor	r11, r11
    1870:	b3 94       	inc	r11
    1872:	01 c0       	rjmp	.+2      	; 0x1876 <xTaskIncrementTick+0xa2>
    1874:	b1 2c       	mov	r11, r1
    1876:	e0 91 4a 30 	lds	r30, 0x304A	; 0x80304a <pxDelayedTaskList>
    187a:	f0 91 4b 30 	lds	r31, 0x304B	; 0x80304b <pxDelayedTaskList+0x1>
    187e:	80 81       	ld	r24, Z
    1880:	81 11       	cpse	r24, r1
    1882:	0c c0       	rjmp	.+24     	; 0x189c <xTaskIncrementTick+0xc8>
    1884:	8f ef       	ldi	r24, 0xFF	; 255
    1886:	9f ef       	ldi	r25, 0xFF	; 255
    1888:	dc 01       	movw	r26, r24
    188a:	80 93 23 30 	sts	0x3023, r24	; 0x803023 <xNextTaskUnblockTime>
    188e:	90 93 24 30 	sts	0x3024, r25	; 0x803024 <xNextTaskUnblockTime+0x1>
    1892:	a0 93 25 30 	sts	0x3025, r26	; 0x803025 <xNextTaskUnblockTime+0x2>
    1896:	b0 93 26 30 	sts	0x3026, r27	; 0x803026 <xNextTaskUnblockTime+0x3>
    189a:	43 c0       	rjmp	.+134    	; 0x1922 <xTaskIncrementTick+0x14e>
    189c:	e0 91 4a 30 	lds	r30, 0x304A	; 0x80304a <pxDelayedTaskList>
    18a0:	f0 91 4b 30 	lds	r31, 0x304B	; 0x80304b <pxDelayedTaskList+0x1>
    18a4:	07 80       	ldd	r0, Z+7	; 0x07
    18a6:	f0 85       	ldd	r31, Z+8	; 0x08
    18a8:	e0 2d       	mov	r30, r0
    18aa:	c0 85       	ldd	r28, Z+8	; 0x08
    18ac:	d1 85       	ldd	r29, Z+9	; 0x09
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	9b 81       	ldd	r25, Y+3	; 0x03
    18b2:	ac 81       	ldd	r26, Y+4	; 0x04
    18b4:	bd 81       	ldd	r27, Y+5	; 0x05
    18b6:	c8 16       	cp	r12, r24
    18b8:	d9 06       	cpc	r13, r25
    18ba:	ea 06       	cpc	r14, r26
    18bc:	fb 06       	cpc	r15, r27
    18be:	48 f4       	brcc	.+18     	; 0x18d2 <xTaskIncrementTick+0xfe>
    18c0:	80 93 23 30 	sts	0x3023, r24	; 0x803023 <xNextTaskUnblockTime>
    18c4:	90 93 24 30 	sts	0x3024, r25	; 0x803024 <xNextTaskUnblockTime+0x1>
    18c8:	a0 93 25 30 	sts	0x3025, r26	; 0x803025 <xNextTaskUnblockTime+0x2>
    18cc:	b0 93 26 30 	sts	0x3026, r27	; 0x803026 <xNextTaskUnblockTime+0x3>
    18d0:	28 c0       	rjmp	.+80     	; 0x1922 <xTaskIncrementTick+0x14e>
    18d2:	8e 01       	movw	r16, r28
    18d4:	0e 5f       	subi	r16, 0xFE	; 254
    18d6:	1f 4f       	sbci	r17, 0xFF	; 255
    18d8:	c8 01       	movw	r24, r16
    18da:	0e 94 b2 04 	call	0x964	; 0x964 <uxListRemove>
    18de:	88 8d       	ldd	r24, Y+24	; 0x18
    18e0:	99 8d       	ldd	r25, Y+25	; 0x19
    18e2:	89 2b       	or	r24, r25
    18e4:	21 f0       	breq	.+8      	; 0x18ee <xTaskIncrementTick+0x11a>
    18e6:	ce 01       	movw	r24, r28
    18e8:	0e 96       	adiw	r24, 0x0e	; 14
    18ea:	0e 94 b2 04 	call	0x964	; 0x964 <uxListRemove>
    18ee:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18f0:	90 91 2c 30 	lds	r25, 0x302C	; 0x80302c <uxTopReadyPriority>
    18f4:	98 17       	cp	r25, r24
    18f6:	10 f4       	brcc	.+4      	; 0x18fc <xTaskIncrementTick+0x128>
    18f8:	80 93 2c 30 	sts	0x302C, r24	; 0x80302c <uxTopReadyPriority>
    18fc:	2b e0       	ldi	r18, 0x0B	; 11
    18fe:	82 9f       	mul	r24, r18
    1900:	c0 01       	movw	r24, r0
    1902:	11 24       	eor	r1, r1
    1904:	b8 01       	movw	r22, r16
    1906:	8e 59       	subi	r24, 0x9E	; 158
    1908:	9f 4c       	sbci	r25, 0xCF	; 207
    190a:	0e 94 54 04 	call	0x8a8	; 0x8a8 <vListInsertEnd>
    190e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1910:	e0 91 8e 30 	lds	r30, 0x308E	; 0x80308e <pxCurrentTCB>
    1914:	f0 91 8f 30 	lds	r31, 0x308F	; 0x80308f <pxCurrentTCB+0x1>
    1918:	82 8d       	ldd	r24, Z+26	; 0x1a
    191a:	98 17       	cp	r25, r24
    191c:	08 f0       	brcs	.+2      	; 0x1920 <xTaskIncrementTick+0x14c>
    191e:	a7 cf       	rjmp	.-178    	; 0x186e <xTaskIncrementTick+0x9a>
    1920:	aa cf       	rjmp	.-172    	; 0x1876 <xTaskIncrementTick+0xa2>
    1922:	e0 91 8e 30 	lds	r30, 0x308E	; 0x80308e <pxCurrentTCB>
    1926:	f0 91 8f 30 	lds	r31, 0x308F	; 0x80308f <pxCurrentTCB+0x1>
    192a:	e2 8d       	ldd	r30, Z+26	; 0x1a
    192c:	8b e0       	ldi	r24, 0x0B	; 11
    192e:	e8 9f       	mul	r30, r24
    1930:	f0 01       	movw	r30, r0
    1932:	11 24       	eor	r1, r1
    1934:	ee 59       	subi	r30, 0x9E	; 158
    1936:	ff 4c       	sbci	r31, 0xCF	; 207
    1938:	80 81       	ld	r24, Z
    193a:	82 30       	cpi	r24, 0x02	; 2
    193c:	40 f4       	brcc	.+16     	; 0x194e <xTaskIncrementTick+0x17a>
    193e:	09 c0       	rjmp	.+18     	; 0x1952 <xTaskIncrementTick+0x17e>
    1940:	80 91 2a 30 	lds	r24, 0x302A	; 0x80302a <uxPendedTicks>
    1944:	8f 5f       	subi	r24, 0xFF	; 255
    1946:	80 93 2a 30 	sts	0x302A, r24	; 0x80302a <uxPendedTicks>
    194a:	b1 2c       	mov	r11, r1
    194c:	02 c0       	rjmp	.+4      	; 0x1952 <xTaskIncrementTick+0x17e>
    194e:	bb 24       	eor	r11, r11
    1950:	b3 94       	inc	r11
    1952:	80 91 29 30 	lds	r24, 0x3029	; 0x803029 <xYieldPending>
    1956:	88 23       	and	r24, r24
    1958:	11 f0       	breq	.+4      	; 0x195e <xTaskIncrementTick+0x18a>
    195a:	bb 24       	eor	r11, r11
    195c:	b3 94       	inc	r11
    195e:	8b 2d       	mov	r24, r11
    1960:	df 91       	pop	r29
    1962:	cf 91       	pop	r28
    1964:	1f 91       	pop	r17
    1966:	0f 91       	pop	r16
    1968:	ff 90       	pop	r15
    196a:	ef 90       	pop	r14
    196c:	df 90       	pop	r13
    196e:	cf 90       	pop	r12
    1970:	bf 90       	pop	r11
    1972:	08 95       	ret

00001974 <xTaskResumeAll>:
    1974:	0f 93       	push	r16
    1976:	1f 93       	push	r17
    1978:	cf 93       	push	r28
    197a:	df 93       	push	r29
    197c:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1980:	ff 93       	push	r31
    1982:	f8 7f       	andi	r31, 0xF8	; 248
    1984:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1988:	80 91 20 30 	lds	r24, 0x3020	; 0x803020 <uxSchedulerSuspended>
    198c:	81 50       	subi	r24, 0x01	; 1
    198e:	80 93 20 30 	sts	0x3020, r24	; 0x803020 <uxSchedulerSuspended>
    1992:	80 91 20 30 	lds	r24, 0x3020	; 0x803020 <uxSchedulerSuspended>
    1996:	81 11       	cpse	r24, r1
    1998:	52 c0       	rjmp	.+164    	; 0x1a3e <xTaskResumeAll+0xca>
    199a:	80 91 31 30 	lds	r24, 0x3031	; 0x803031 <uxCurrentNumberOfTasks>
    199e:	81 11       	cpse	r24, r1
    19a0:	2d c0       	rjmp	.+90     	; 0x19fc <xTaskResumeAll+0x88>
    19a2:	50 c0       	rjmp	.+160    	; 0x1a44 <xTaskResumeAll+0xd0>
    19a4:	e0 91 44 30 	lds	r30, 0x3044	; 0x803044 <xPendingReadyList+0x7>
    19a8:	f0 91 45 30 	lds	r31, 0x3045	; 0x803045 <xPendingReadyList+0x8>
    19ac:	c0 85       	ldd	r28, Z+8	; 0x08
    19ae:	d1 85       	ldd	r29, Z+9	; 0x09
    19b0:	ce 01       	movw	r24, r28
    19b2:	0e 96       	adiw	r24, 0x0e	; 14
    19b4:	0e 94 b2 04 	call	0x964	; 0x964 <uxListRemove>
    19b8:	8e 01       	movw	r16, r28
    19ba:	0e 5f       	subi	r16, 0xFE	; 254
    19bc:	1f 4f       	sbci	r17, 0xFF	; 255
    19be:	c8 01       	movw	r24, r16
    19c0:	0e 94 b2 04 	call	0x964	; 0x964 <uxListRemove>
    19c4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    19c6:	90 91 2c 30 	lds	r25, 0x302C	; 0x80302c <uxTopReadyPriority>
    19ca:	98 17       	cp	r25, r24
    19cc:	10 f4       	brcc	.+4      	; 0x19d2 <xTaskResumeAll+0x5e>
    19ce:	80 93 2c 30 	sts	0x302C, r24	; 0x80302c <uxTopReadyPriority>
    19d2:	2b e0       	ldi	r18, 0x0B	; 11
    19d4:	82 9f       	mul	r24, r18
    19d6:	c0 01       	movw	r24, r0
    19d8:	11 24       	eor	r1, r1
    19da:	b8 01       	movw	r22, r16
    19dc:	8e 59       	subi	r24, 0x9E	; 158
    19de:	9f 4c       	sbci	r25, 0xCF	; 207
    19e0:	0e 94 54 04 	call	0x8a8	; 0x8a8 <vListInsertEnd>
    19e4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    19e6:	e0 91 8e 30 	lds	r30, 0x308E	; 0x80308e <pxCurrentTCB>
    19ea:	f0 91 8f 30 	lds	r31, 0x308F	; 0x80308f <pxCurrentTCB+0x1>
    19ee:	82 8d       	ldd	r24, Z+26	; 0x1a
    19f0:	98 17       	cp	r25, r24
    19f2:	30 f0       	brcs	.+12     	; 0x1a00 <xTaskResumeAll+0x8c>
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	80 93 29 30 	sts	0x3029, r24	; 0x803029 <xYieldPending>
    19fa:	02 c0       	rjmp	.+4      	; 0x1a00 <xTaskResumeAll+0x8c>
    19fc:	c0 e0       	ldi	r28, 0x00	; 0
    19fe:	d0 e0       	ldi	r29, 0x00	; 0
    1a00:	80 91 3d 30 	lds	r24, 0x303D	; 0x80303d <xPendingReadyList>
    1a04:	81 11       	cpse	r24, r1
    1a06:	ce cf       	rjmp	.-100    	; 0x19a4 <xTaskResumeAll+0x30>
    1a08:	cd 2b       	or	r28, r29
    1a0a:	11 f0       	breq	.+4      	; 0x1a10 <xTaskResumeAll+0x9c>
    1a0c:	0e 94 8f 09 	call	0x131e	; 0x131e <prvResetNextTaskUnblockTime>
    1a10:	c0 91 2a 30 	lds	r28, 0x302A	; 0x80302a <uxPendedTicks>
    1a14:	cc 23       	and	r28, r28
    1a16:	59 f0       	breq	.+22     	; 0x1a2e <xTaskResumeAll+0xba>
    1a18:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <xTaskIncrementTick>
    1a1c:	88 23       	and	r24, r24
    1a1e:	19 f0       	breq	.+6      	; 0x1a26 <xTaskResumeAll+0xb2>
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	80 93 29 30 	sts	0x3029, r24	; 0x803029 <xYieldPending>
    1a26:	c1 50       	subi	r28, 0x01	; 1
    1a28:	b9 f7       	brne	.-18     	; 0x1a18 <xTaskResumeAll+0xa4>
    1a2a:	10 92 2a 30 	sts	0x302A, r1	; 0x80302a <uxPendedTicks>
    1a2e:	80 91 29 30 	lds	r24, 0x3029	; 0x803029 <xYieldPending>
    1a32:	88 23       	and	r24, r24
    1a34:	31 f0       	breq	.+12     	; 0x1a42 <xTaskResumeAll+0xce>
    1a36:	0e 94 aa 05 	call	0xb54	; 0xb54 <vPortYield>
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	03 c0       	rjmp	.+6      	; 0x1a44 <xTaskResumeAll+0xd0>
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	01 c0       	rjmp	.+2      	; 0x1a44 <xTaskResumeAll+0xd0>
    1a42:	80 e0       	ldi	r24, 0x00	; 0
    1a44:	ff 91       	pop	r31
    1a46:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1a4a:	df 91       	pop	r29
    1a4c:	cf 91       	pop	r28
    1a4e:	1f 91       	pop	r17
    1a50:	0f 91       	pop	r16
    1a52:	08 95       	ret

00001a54 <vTaskDelay>:
    1a54:	cf 92       	push	r12
    1a56:	df 92       	push	r13
    1a58:	ef 92       	push	r14
    1a5a:	ff 92       	push	r15
    1a5c:	6b 01       	movw	r12, r22
    1a5e:	7c 01       	movw	r14, r24
    1a60:	67 2b       	or	r22, r23
    1a62:	68 2b       	or	r22, r24
    1a64:	69 2b       	or	r22, r25
    1a66:	51 f0       	breq	.+20     	; 0x1a7c <vTaskDelay+0x28>
    1a68:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <vTaskSuspendAll>
    1a6c:	40 e0       	ldi	r20, 0x00	; 0
    1a6e:	c7 01       	movw	r24, r14
    1a70:	b6 01       	movw	r22, r12
    1a72:	0e 94 c3 0a 	call	0x1586	; 0x1586 <prvAddCurrentTaskToDelayedList>
    1a76:	0e 94 ba 0c 	call	0x1974	; 0x1974 <xTaskResumeAll>
    1a7a:	01 c0       	rjmp	.+2      	; 0x1a7e <vTaskDelay+0x2a>
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
    1a7e:	81 11       	cpse	r24, r1
    1a80:	02 c0       	rjmp	.+4      	; 0x1a86 <vTaskDelay+0x32>
    1a82:	0e 94 aa 05 	call	0xb54	; 0xb54 <vPortYield>
    1a86:	ff 90       	pop	r15
    1a88:	ef 90       	pop	r14
    1a8a:	df 90       	pop	r13
    1a8c:	cf 90       	pop	r12
    1a8e:	08 95       	ret

00001a90 <vTaskSwitchContext>:
    1a90:	80 91 20 30 	lds	r24, 0x3020	; 0x803020 <uxSchedulerSuspended>
    1a94:	88 23       	and	r24, r24
    1a96:	21 f0       	breq	.+8      	; 0x1aa0 <vTaskSwitchContext+0x10>
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	80 93 29 30 	sts	0x3029, r24	; 0x803029 <xYieldPending>
    1a9e:	08 95       	ret
    1aa0:	10 92 29 30 	sts	0x3029, r1	; 0x803029 <xYieldPending>
    1aa4:	e0 91 8e 30 	lds	r30, 0x308E	; 0x80308e <pxCurrentTCB>
    1aa8:	f0 91 8f 30 	lds	r31, 0x308F	; 0x80308f <pxCurrentTCB+0x1>
    1aac:	03 8c       	ldd	r0, Z+27	; 0x1b
    1aae:	f4 8d       	ldd	r31, Z+28	; 0x1c
    1ab0:	e0 2d       	mov	r30, r0
    1ab2:	80 81       	ld	r24, Z
    1ab4:	91 81       	ldd	r25, Z+1	; 0x01
    1ab6:	a2 81       	ldd	r26, Z+2	; 0x02
    1ab8:	b3 81       	ldd	r27, Z+3	; 0x03
    1aba:	85 3a       	cpi	r24, 0xA5	; 165
    1abc:	95 4a       	sbci	r25, 0xA5	; 165
    1abe:	a5 4a       	sbci	r26, 0xA5	; 165
    1ac0:	b5 4a       	sbci	r27, 0xA5	; 165
    1ac2:	d9 f4       	brne	.+54     	; 0x1afa <vTaskSwitchContext+0x6a>
    1ac4:	84 81       	ldd	r24, Z+4	; 0x04
    1ac6:	95 81       	ldd	r25, Z+5	; 0x05
    1ac8:	a6 81       	ldd	r26, Z+6	; 0x06
    1aca:	b7 81       	ldd	r27, Z+7	; 0x07
    1acc:	85 3a       	cpi	r24, 0xA5	; 165
    1ace:	95 4a       	sbci	r25, 0xA5	; 165
    1ad0:	a5 4a       	sbci	r26, 0xA5	; 165
    1ad2:	b5 4a       	sbci	r27, 0xA5	; 165
    1ad4:	91 f4       	brne	.+36     	; 0x1afa <vTaskSwitchContext+0x6a>
    1ad6:	80 85       	ldd	r24, Z+8	; 0x08
    1ad8:	91 85       	ldd	r25, Z+9	; 0x09
    1ada:	a2 85       	ldd	r26, Z+10	; 0x0a
    1adc:	b3 85       	ldd	r27, Z+11	; 0x0b
    1ade:	85 3a       	cpi	r24, 0xA5	; 165
    1ae0:	95 4a       	sbci	r25, 0xA5	; 165
    1ae2:	a5 4a       	sbci	r26, 0xA5	; 165
    1ae4:	b5 4a       	sbci	r27, 0xA5	; 165
    1ae6:	49 f4       	brne	.+18     	; 0x1afa <vTaskSwitchContext+0x6a>
    1ae8:	84 85       	ldd	r24, Z+12	; 0x0c
    1aea:	95 85       	ldd	r25, Z+13	; 0x0d
    1aec:	a6 85       	ldd	r26, Z+14	; 0x0e
    1aee:	b7 85       	ldd	r27, Z+15	; 0x0f
    1af0:	85 3a       	cpi	r24, 0xA5	; 165
    1af2:	95 4a       	sbci	r25, 0xA5	; 165
    1af4:	a5 4a       	sbci	r26, 0xA5	; 165
    1af6:	b5 4a       	sbci	r27, 0xA5	; 165
    1af8:	61 f0       	breq	.+24     	; 0x1b12 <vTaskSwitchContext+0x82>
    1afa:	60 91 8e 30 	lds	r22, 0x308E	; 0x80308e <pxCurrentTCB>
    1afe:	70 91 8f 30 	lds	r23, 0x308F	; 0x80308f <pxCurrentTCB+0x1>
    1b02:	63 5e       	subi	r22, 0xE3	; 227
    1b04:	7f 4f       	sbci	r23, 0xFF	; 255
    1b06:	80 91 8e 30 	lds	r24, 0x308E	; 0x80308e <pxCurrentTCB>
    1b0a:	90 91 8f 30 	lds	r25, 0x308F	; 0x80308f <pxCurrentTCB+0x1>
    1b0e:	0e 94 78 02 	call	0x4f0	; 0x4f0 <vApplicationStackOverflowHook>
    1b12:	80 91 2c 30 	lds	r24, 0x302C	; 0x80302c <uxTopReadyPriority>
    1b16:	01 c0       	rjmp	.+2      	; 0x1b1a <vTaskSwitchContext+0x8a>
    1b18:	81 50       	subi	r24, 0x01	; 1
    1b1a:	28 2f       	mov	r18, r24
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	9b e0       	ldi	r25, 0x0B	; 11
    1b20:	92 9f       	mul	r25, r18
    1b22:	f0 01       	movw	r30, r0
    1b24:	93 9f       	mul	r25, r19
    1b26:	f0 0d       	add	r31, r0
    1b28:	11 24       	eor	r1, r1
    1b2a:	ee 59       	subi	r30, 0x9E	; 158
    1b2c:	ff 4c       	sbci	r31, 0xCF	; 207
    1b2e:	90 81       	ld	r25, Z
    1b30:	99 23       	and	r25, r25
    1b32:	91 f3       	breq	.-28     	; 0x1b18 <vTaskSwitchContext+0x88>
    1b34:	9b e0       	ldi	r25, 0x0B	; 11
    1b36:	92 9f       	mul	r25, r18
    1b38:	a0 01       	movw	r20, r0
    1b3a:	93 9f       	mul	r25, r19
    1b3c:	50 0d       	add	r21, r0
    1b3e:	11 24       	eor	r1, r1
    1b40:	df 01       	movw	r26, r30
    1b42:	01 80       	ldd	r0, Z+1	; 0x01
    1b44:	f2 81       	ldd	r31, Z+2	; 0x02
    1b46:	e0 2d       	mov	r30, r0
    1b48:	04 80       	ldd	r0, Z+4	; 0x04
    1b4a:	f5 81       	ldd	r31, Z+5	; 0x05
    1b4c:	e0 2d       	mov	r30, r0
    1b4e:	11 96       	adiw	r26, 0x01	; 1
    1b50:	ed 93       	st	X+, r30
    1b52:	fc 93       	st	X, r31
    1b54:	12 97       	sbiw	r26, 0x02	; 2
    1b56:	4b 59       	subi	r20, 0x9B	; 155
    1b58:	5f 4c       	sbci	r21, 0xCF	; 207
    1b5a:	e4 17       	cp	r30, r20
    1b5c:	f5 07       	cpc	r31, r21
    1b5e:	29 f4       	brne	.+10     	; 0x1b6a <vTaskSwitchContext+0xda>
    1b60:	44 81       	ldd	r20, Z+4	; 0x04
    1b62:	55 81       	ldd	r21, Z+5	; 0x05
    1b64:	fd 01       	movw	r30, r26
    1b66:	41 83       	std	Z+1, r20	; 0x01
    1b68:	52 83       	std	Z+2, r21	; 0x02
    1b6a:	9b e0       	ldi	r25, 0x0B	; 11
    1b6c:	92 9f       	mul	r25, r18
    1b6e:	f0 01       	movw	r30, r0
    1b70:	93 9f       	mul	r25, r19
    1b72:	f0 0d       	add	r31, r0
    1b74:	11 24       	eor	r1, r1
    1b76:	ee 59       	subi	r30, 0x9E	; 158
    1b78:	ff 4c       	sbci	r31, 0xCF	; 207
    1b7a:	01 80       	ldd	r0, Z+1	; 0x01
    1b7c:	f2 81       	ldd	r31, Z+2	; 0x02
    1b7e:	e0 2d       	mov	r30, r0
    1b80:	20 85       	ldd	r18, Z+8	; 0x08
    1b82:	31 85       	ldd	r19, Z+9	; 0x09
    1b84:	20 93 8e 30 	sts	0x308E, r18	; 0x80308e <pxCurrentTCB>
    1b88:	30 93 8f 30 	sts	0x308F, r19	; 0x80308f <pxCurrentTCB+0x1>
    1b8c:	80 93 2c 30 	sts	0x302C, r24	; 0x80302c <uxTopReadyPriority>
    1b90:	08 95       	ret

00001b92 <vTaskPlaceOnEventList>:
    1b92:	cf 92       	push	r12
    1b94:	df 92       	push	r13
    1b96:	ef 92       	push	r14
    1b98:	ff 92       	push	r15
    1b9a:	6a 01       	movw	r12, r20
    1b9c:	7b 01       	movw	r14, r22
    1b9e:	60 91 8e 30 	lds	r22, 0x308E	; 0x80308e <pxCurrentTCB>
    1ba2:	70 91 8f 30 	lds	r23, 0x308F	; 0x80308f <pxCurrentTCB+0x1>
    1ba6:	62 5f       	subi	r22, 0xF2	; 242
    1ba8:	7f 4f       	sbci	r23, 0xFF	; 255
    1baa:	0e 94 75 04 	call	0x8ea	; 0x8ea <vListInsert>
    1bae:	41 e0       	ldi	r20, 0x01	; 1
    1bb0:	c7 01       	movw	r24, r14
    1bb2:	b6 01       	movw	r22, r12
    1bb4:	0e 94 c3 0a 	call	0x1586	; 0x1586 <prvAddCurrentTaskToDelayedList>
    1bb8:	ff 90       	pop	r15
    1bba:	ef 90       	pop	r14
    1bbc:	df 90       	pop	r13
    1bbe:	cf 90       	pop	r12
    1bc0:	08 95       	ret

00001bc2 <vTaskPlaceOnUnorderedEventList>:
    1bc2:	cf 92       	push	r12
    1bc4:	df 92       	push	r13
    1bc6:	ef 92       	push	r14
    1bc8:	ff 92       	push	r15
    1bca:	0f 93       	push	r16
    1bcc:	1f 93       	push	r17
    1bce:	68 01       	movw	r12, r16
    1bd0:	79 01       	movw	r14, r18
    1bd2:	e0 91 8e 30 	lds	r30, 0x308E	; 0x80308e <pxCurrentTCB>
    1bd6:	f0 91 8f 30 	lds	r31, 0x308F	; 0x80308f <pxCurrentTCB+0x1>
    1bda:	70 68       	ori	r23, 0x80	; 128
    1bdc:	46 87       	std	Z+14, r20	; 0x0e
    1bde:	57 87       	std	Z+15, r21	; 0x0f
    1be0:	60 8b       	std	Z+16, r22	; 0x10
    1be2:	71 8b       	std	Z+17, r23	; 0x11
    1be4:	60 91 8e 30 	lds	r22, 0x308E	; 0x80308e <pxCurrentTCB>
    1be8:	70 91 8f 30 	lds	r23, 0x308F	; 0x80308f <pxCurrentTCB+0x1>
    1bec:	62 5f       	subi	r22, 0xF2	; 242
    1bee:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf0:	0e 94 54 04 	call	0x8a8	; 0x8a8 <vListInsertEnd>
    1bf4:	41 e0       	ldi	r20, 0x01	; 1
    1bf6:	c7 01       	movw	r24, r14
    1bf8:	b6 01       	movw	r22, r12
    1bfa:	0e 94 c3 0a 	call	0x1586	; 0x1586 <prvAddCurrentTaskToDelayedList>
    1bfe:	1f 91       	pop	r17
    1c00:	0f 91       	pop	r16
    1c02:	ff 90       	pop	r15
    1c04:	ef 90       	pop	r14
    1c06:	df 90       	pop	r13
    1c08:	cf 90       	pop	r12
    1c0a:	08 95       	ret

00001c0c <vTaskPlaceOnEventListRestricted>:
    1c0c:	cf 92       	push	r12
    1c0e:	df 92       	push	r13
    1c10:	ef 92       	push	r14
    1c12:	ff 92       	push	r15
    1c14:	cf 93       	push	r28
    1c16:	6a 01       	movw	r12, r20
    1c18:	7b 01       	movw	r14, r22
    1c1a:	c2 2f       	mov	r28, r18
    1c1c:	60 91 8e 30 	lds	r22, 0x308E	; 0x80308e <pxCurrentTCB>
    1c20:	70 91 8f 30 	lds	r23, 0x308F	; 0x80308f <pxCurrentTCB+0x1>
    1c24:	62 5f       	subi	r22, 0xF2	; 242
    1c26:	7f 4f       	sbci	r23, 0xFF	; 255
    1c28:	0e 94 54 04 	call	0x8a8	; 0x8a8 <vListInsertEnd>
    1c2c:	cc 23       	and	r28, r28
    1c2e:	21 f0       	breq	.+8      	; 0x1c38 <vTaskPlaceOnEventListRestricted+0x2c>
    1c30:	cc 24       	eor	r12, r12
    1c32:	ca 94       	dec	r12
    1c34:	dc 2c       	mov	r13, r12
    1c36:	76 01       	movw	r14, r12
    1c38:	4c 2f       	mov	r20, r28
    1c3a:	c7 01       	movw	r24, r14
    1c3c:	b6 01       	movw	r22, r12
    1c3e:	0e 94 c3 0a 	call	0x1586	; 0x1586 <prvAddCurrentTaskToDelayedList>
    1c42:	cf 91       	pop	r28
    1c44:	ff 90       	pop	r15
    1c46:	ef 90       	pop	r14
    1c48:	df 90       	pop	r13
    1c4a:	cf 90       	pop	r12
    1c4c:	08 95       	ret

00001c4e <xTaskRemoveFromEventList>:
    1c4e:	0f 93       	push	r16
    1c50:	1f 93       	push	r17
    1c52:	cf 93       	push	r28
    1c54:	df 93       	push	r29
    1c56:	dc 01       	movw	r26, r24
    1c58:	17 96       	adiw	r26, 0x07	; 7
    1c5a:	ed 91       	ld	r30, X+
    1c5c:	fc 91       	ld	r31, X
    1c5e:	18 97       	sbiw	r26, 0x08	; 8
    1c60:	c0 85       	ldd	r28, Z+8	; 0x08
    1c62:	d1 85       	ldd	r29, Z+9	; 0x09
    1c64:	8e 01       	movw	r16, r28
    1c66:	02 5f       	subi	r16, 0xF2	; 242
    1c68:	1f 4f       	sbci	r17, 0xFF	; 255
    1c6a:	c8 01       	movw	r24, r16
    1c6c:	0e 94 b2 04 	call	0x964	; 0x964 <uxListRemove>
    1c70:	80 91 20 30 	lds	r24, 0x3020	; 0x803020 <uxSchedulerSuspended>
    1c74:	81 11       	cpse	r24, r1
    1c76:	16 c0       	rjmp	.+44     	; 0x1ca4 <xTaskRemoveFromEventList+0x56>
    1c78:	0c 50       	subi	r16, 0x0C	; 12
    1c7a:	11 09       	sbc	r17, r1
    1c7c:	c8 01       	movw	r24, r16
    1c7e:	0e 94 b2 04 	call	0x964	; 0x964 <uxListRemove>
    1c82:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c84:	90 91 2c 30 	lds	r25, 0x302C	; 0x80302c <uxTopReadyPriority>
    1c88:	98 17       	cp	r25, r24
    1c8a:	10 f4       	brcc	.+4      	; 0x1c90 <xTaskRemoveFromEventList+0x42>
    1c8c:	80 93 2c 30 	sts	0x302C, r24	; 0x80302c <uxTopReadyPriority>
    1c90:	bb e0       	ldi	r27, 0x0B	; 11
    1c92:	8b 9f       	mul	r24, r27
    1c94:	c0 01       	movw	r24, r0
    1c96:	11 24       	eor	r1, r1
    1c98:	b8 01       	movw	r22, r16
    1c9a:	8e 59       	subi	r24, 0x9E	; 158
    1c9c:	9f 4c       	sbci	r25, 0xCF	; 207
    1c9e:	0e 94 54 04 	call	0x8a8	; 0x8a8 <vListInsertEnd>
    1ca2:	05 c0       	rjmp	.+10     	; 0x1cae <xTaskRemoveFromEventList+0x60>
    1ca4:	b8 01       	movw	r22, r16
    1ca6:	8d e3       	ldi	r24, 0x3D	; 61
    1ca8:	90 e3       	ldi	r25, 0x30	; 48
    1caa:	0e 94 54 04 	call	0x8a8	; 0x8a8 <vListInsertEnd>
    1cae:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1cb0:	e0 91 8e 30 	lds	r30, 0x308E	; 0x80308e <pxCurrentTCB>
    1cb4:	f0 91 8f 30 	lds	r31, 0x308F	; 0x80308f <pxCurrentTCB+0x1>
    1cb8:	82 8d       	ldd	r24, Z+26	; 0x1a
    1cba:	89 17       	cp	r24, r25
    1cbc:	20 f4       	brcc	.+8      	; 0x1cc6 <xTaskRemoveFromEventList+0x78>
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	80 93 29 30 	sts	0x3029, r24	; 0x803029 <xYieldPending>
    1cc4:	01 c0       	rjmp	.+2      	; 0x1cc8 <xTaskRemoveFromEventList+0x7a>
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
    1cc8:	df 91       	pop	r29
    1cca:	cf 91       	pop	r28
    1ccc:	1f 91       	pop	r17
    1cce:	0f 91       	pop	r16
    1cd0:	08 95       	ret

00001cd2 <vTaskRemoveFromUnorderedEventList>:
    1cd2:	0f 93       	push	r16
    1cd4:	1f 93       	push	r17
    1cd6:	cf 93       	push	r28
    1cd8:	df 93       	push	r29
    1cda:	70 68       	ori	r23, 0x80	; 128
    1cdc:	fc 01       	movw	r30, r24
    1cde:	40 83       	st	Z, r20
    1ce0:	51 83       	std	Z+1, r21	; 0x01
    1ce2:	62 83       	std	Z+2, r22	; 0x02
    1ce4:	73 83       	std	Z+3, r23	; 0x03
    1ce6:	c0 85       	ldd	r28, Z+8	; 0x08
    1ce8:	d1 85       	ldd	r29, Z+9	; 0x09
    1cea:	0e 94 b2 04 	call	0x964	; 0x964 <uxListRemove>
    1cee:	8e 01       	movw	r16, r28
    1cf0:	0e 5f       	subi	r16, 0xFE	; 254
    1cf2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf4:	c8 01       	movw	r24, r16
    1cf6:	0e 94 b2 04 	call	0x964	; 0x964 <uxListRemove>
    1cfa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1cfc:	90 91 2c 30 	lds	r25, 0x302C	; 0x80302c <uxTopReadyPriority>
    1d00:	98 17       	cp	r25, r24
    1d02:	10 f4       	brcc	.+4      	; 0x1d08 <vTaskRemoveFromUnorderedEventList+0x36>
    1d04:	80 93 2c 30 	sts	0x302C, r24	; 0x80302c <uxTopReadyPriority>
    1d08:	fb e0       	ldi	r31, 0x0B	; 11
    1d0a:	8f 9f       	mul	r24, r31
    1d0c:	c0 01       	movw	r24, r0
    1d0e:	11 24       	eor	r1, r1
    1d10:	b8 01       	movw	r22, r16
    1d12:	8e 59       	subi	r24, 0x9E	; 158
    1d14:	9f 4c       	sbci	r25, 0xCF	; 207
    1d16:	0e 94 54 04 	call	0x8a8	; 0x8a8 <vListInsertEnd>
    1d1a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1d1c:	e0 91 8e 30 	lds	r30, 0x308E	; 0x80308e <pxCurrentTCB>
    1d20:	f0 91 8f 30 	lds	r31, 0x308F	; 0x80308f <pxCurrentTCB+0x1>
    1d24:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d26:	89 17       	cp	r24, r25
    1d28:	18 f4       	brcc	.+6      	; 0x1d30 <vTaskRemoveFromUnorderedEventList+0x5e>
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	80 93 29 30 	sts	0x3029, r24	; 0x803029 <xYieldPending>
    1d30:	df 91       	pop	r29
    1d32:	cf 91       	pop	r28
    1d34:	1f 91       	pop	r17
    1d36:	0f 91       	pop	r16
    1d38:	08 95       	ret

00001d3a <vTaskInternalSetTimeOutState>:
    1d3a:	20 91 28 30 	lds	r18, 0x3028	; 0x803028 <xNumOfOverflows>
    1d3e:	fc 01       	movw	r30, r24
    1d40:	20 83       	st	Z, r18
    1d42:	40 91 2d 30 	lds	r20, 0x302D	; 0x80302d <xTickCount>
    1d46:	50 91 2e 30 	lds	r21, 0x302E	; 0x80302e <xTickCount+0x1>
    1d4a:	60 91 2f 30 	lds	r22, 0x302F	; 0x80302f <xTickCount+0x2>
    1d4e:	70 91 30 30 	lds	r23, 0x3030	; 0x803030 <xTickCount+0x3>
    1d52:	41 83       	std	Z+1, r20	; 0x01
    1d54:	52 83       	std	Z+2, r21	; 0x02
    1d56:	63 83       	std	Z+3, r22	; 0x03
    1d58:	74 83       	std	Z+4, r23	; 0x04
    1d5a:	08 95       	ret

00001d5c <xTaskCheckForTimeOut>:
    1d5c:	8f 92       	push	r8
    1d5e:	9f 92       	push	r9
    1d60:	af 92       	push	r10
    1d62:	bf 92       	push	r11
    1d64:	cf 92       	push	r12
    1d66:	df 92       	push	r13
    1d68:	ef 92       	push	r14
    1d6a:	ff 92       	push	r15
    1d6c:	0f 93       	push	r16
    1d6e:	1f 93       	push	r17
    1d70:	cf 93       	push	r28
    1d72:	df 93       	push	r29
    1d74:	db 01       	movw	r26, r22
    1d76:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1d7a:	ff 93       	push	r31
    1d7c:	f8 7f       	andi	r31, 0xF8	; 248
    1d7e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1d82:	c0 90 2d 30 	lds	r12, 0x302D	; 0x80302d <xTickCount>
    1d86:	d0 90 2e 30 	lds	r13, 0x302E	; 0x80302e <xTickCount+0x1>
    1d8a:	e0 90 2f 30 	lds	r14, 0x302F	; 0x80302f <xTickCount+0x2>
    1d8e:	f0 90 30 30 	lds	r15, 0x3030	; 0x803030 <xTickCount+0x3>
    1d92:	ec 01       	movw	r28, r24
    1d94:	09 81       	ldd	r16, Y+1	; 0x01
    1d96:	1a 81       	ldd	r17, Y+2	; 0x02
    1d98:	2b 81       	ldd	r18, Y+3	; 0x03
    1d9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d9c:	46 01       	movw	r8, r12
    1d9e:	57 01       	movw	r10, r14
    1da0:	80 1a       	sub	r8, r16
    1da2:	91 0a       	sbc	r9, r17
    1da4:	a2 0a       	sbc	r10, r18
    1da6:	b3 0a       	sbc	r11, r19
    1da8:	4d 91       	ld	r20, X+
    1daa:	5d 91       	ld	r21, X+
    1dac:	6d 91       	ld	r22, X+
    1dae:	7c 91       	ld	r23, X
    1db0:	13 97       	sbiw	r26, 0x03	; 3
    1db2:	4f 3f       	cpi	r20, 0xFF	; 255
    1db4:	df ef       	ldi	r29, 0xFF	; 255
    1db6:	5d 07       	cpc	r21, r29
    1db8:	6d 07       	cpc	r22, r29
    1dba:	7d 07       	cpc	r23, r29
    1dbc:	21 f1       	breq	.+72     	; 0x1e06 <xTaskCheckForTimeOut+0xaa>
    1dbe:	ec 01       	movw	r28, r24
    1dc0:	f8 81       	ld	r31, Y
    1dc2:	e0 91 28 30 	lds	r30, 0x3028	; 0x803028 <xNumOfOverflows>
    1dc6:	fe 17       	cp	r31, r30
    1dc8:	29 f0       	breq	.+10     	; 0x1dd4 <xTaskCheckForTimeOut+0x78>
    1dca:	c0 16       	cp	r12, r16
    1dcc:	d1 06       	cpc	r13, r17
    1dce:	e2 06       	cpc	r14, r18
    1dd0:	f3 06       	cpc	r15, r19
    1dd2:	d8 f4       	brcc	.+54     	; 0x1e0a <xTaskCheckForTimeOut+0xae>
    1dd4:	84 16       	cp	r8, r20
    1dd6:	95 06       	cpc	r9, r21
    1dd8:	a6 06       	cpc	r10, r22
    1dda:	b7 06       	cpc	r11, r23
    1ddc:	68 f4       	brcc	.+26     	; 0x1df8 <xTaskCheckForTimeOut+0x9c>
    1dde:	48 19       	sub	r20, r8
    1de0:	59 09       	sbc	r21, r9
    1de2:	6a 09       	sbc	r22, r10
    1de4:	7b 09       	sbc	r23, r11
    1de6:	4d 93       	st	X+, r20
    1de8:	5d 93       	st	X+, r21
    1dea:	6d 93       	st	X+, r22
    1dec:	7c 93       	st	X, r23
    1dee:	13 97       	sbiw	r26, 0x03	; 3
    1df0:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <vTaskInternalSetTimeOutState>
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	0a c0       	rjmp	.+20     	; 0x1e0c <xTaskCheckForTimeOut+0xb0>
    1df8:	1d 92       	st	X+, r1
    1dfa:	1d 92       	st	X+, r1
    1dfc:	1d 92       	st	X+, r1
    1dfe:	1c 92       	st	X, r1
    1e00:	13 97       	sbiw	r26, 0x03	; 3
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	03 c0       	rjmp	.+6      	; 0x1e0c <xTaskCheckForTimeOut+0xb0>
    1e06:	80 e0       	ldi	r24, 0x00	; 0
    1e08:	01 c0       	rjmp	.+2      	; 0x1e0c <xTaskCheckForTimeOut+0xb0>
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	ff 91       	pop	r31
    1e0e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1e12:	df 91       	pop	r29
    1e14:	cf 91       	pop	r28
    1e16:	1f 91       	pop	r17
    1e18:	0f 91       	pop	r16
    1e1a:	ff 90       	pop	r15
    1e1c:	ef 90       	pop	r14
    1e1e:	df 90       	pop	r13
    1e20:	cf 90       	pop	r12
    1e22:	bf 90       	pop	r11
    1e24:	af 90       	pop	r10
    1e26:	9f 90       	pop	r9
    1e28:	8f 90       	pop	r8
    1e2a:	08 95       	ret

00001e2c <vTaskMissedYield>:
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	80 93 29 30 	sts	0x3029, r24	; 0x803029 <xYieldPending>
    1e32:	08 95       	ret

00001e34 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    1e34:	80 91 2b 30 	lds	r24, 0x302B	; 0x80302b <xSchedulerRunning>
    1e38:	88 23       	and	r24, r24
    1e3a:	31 f0       	breq	.+12     	; 0x1e48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1e3c:	80 91 20 30 	lds	r24, 0x3020	; 0x803020 <uxSchedulerSuspended>
    1e40:	81 11       	cpse	r24, r1
    1e42:	04 c0       	rjmp	.+8      	; 0x1e4c <xTaskGetSchedulerState+0x18>
			{
				xReturn = taskSCHEDULER_RUNNING;
    1e44:	82 e0       	ldi	r24, 0x02	; 2
    1e46:	08 95       	ret
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	08 95       	ret
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
			}
		}

		return xReturn;
	}
    1e4e:	08 95       	ret

00001e50 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    1e50:	cf 92       	push	r12
    1e52:	df 92       	push	r13
    1e54:	ef 92       	push	r14
    1e56:	ff 92       	push	r15
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    1e58:	e0 91 8e 30 	lds	r30, 0x308E	; 0x80308e <pxCurrentTCB>
    1e5c:	f0 91 8f 30 	lds	r31, 0x308F	; 0x80308f <pxCurrentTCB+0x1>
    1e60:	66 85       	ldd	r22, Z+14	; 0x0e
    1e62:	77 85       	ldd	r23, Z+15	; 0x0f
    1e64:	80 89       	ldd	r24, Z+16	; 0x10
    1e66:	91 89       	ldd	r25, Z+17	; 0x11

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1e68:	e0 91 8e 30 	lds	r30, 0x308E	; 0x80308e <pxCurrentTCB>
    1e6c:	f0 91 8f 30 	lds	r31, 0x308F	; 0x80308f <pxCurrentTCB+0x1>
    1e70:	a0 91 8e 30 	lds	r26, 0x308E	; 0x80308e <pxCurrentTCB>
    1e74:	b0 91 8f 30 	lds	r27, 0x308F	; 0x80308f <pxCurrentTCB+0x1>
    1e78:	5a 96       	adiw	r26, 0x1a	; 26
    1e7a:	2c 91       	ld	r18, X
    1e7c:	c1 2c       	mov	r12, r1
    1e7e:	d1 2c       	mov	r13, r1
    1e80:	76 01       	movw	r14, r12
    1e82:	68 94       	set
    1e84:	c2 f8       	bld	r12, 2
    1e86:	c2 1a       	sub	r12, r18
    1e88:	d1 08       	sbc	r13, r1
    1e8a:	e1 08       	sbc	r14, r1
    1e8c:	f1 08       	sbc	r15, r1
    1e8e:	c6 86       	std	Z+14, r12	; 0x0e
    1e90:	d7 86       	std	Z+15, r13	; 0x0f
    1e92:	e0 8a       	std	Z+16, r14	; 0x10
    1e94:	f1 8a       	std	Z+17, r15	; 0x11

	return uxReturn;
}
    1e96:	ff 90       	pop	r15
    1e98:	ef 90       	pop	r14
    1e9a:	df 90       	pop	r13
    1e9c:	cf 90       	pop	r12
    1e9e:	08 95       	ret

00001ea0 <prvGetNextExpireTime>:

	taskENTER_CRITICAL();
	{
		pxTimer->pvTimerID = pvNewID;
	}
	taskEXIT_CRITICAL();
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	e0 91 9a 30 	lds	r30, 0x309A	; 0x80309a <pxCurrentTimerList>
    1ea6:	f0 91 9b 30 	lds	r31, 0x309B	; 0x80309b <pxCurrentTimerList+0x1>
    1eaa:	80 81       	ld	r24, Z
    1eac:	91 e0       	ldi	r25, 0x01	; 1
    1eae:	81 11       	cpse	r24, r1
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	9c 93       	st	X, r25
    1eb4:	91 11       	cpse	r25, r1
    1eb6:	08 c0       	rjmp	.+16     	; 0x1ec8 <prvGetNextExpireTime+0x28>
    1eb8:	07 80       	ldd	r0, Z+7	; 0x07
    1eba:	f0 85       	ldd	r31, Z+8	; 0x08
    1ebc:	e0 2d       	mov	r30, r0
    1ebe:	60 81       	ld	r22, Z
    1ec0:	71 81       	ldd	r23, Z+1	; 0x01
    1ec2:	82 81       	ldd	r24, Z+2	; 0x02
    1ec4:	93 81       	ldd	r25, Z+3	; 0x03
    1ec6:	08 95       	ret
    1ec8:	60 e0       	ldi	r22, 0x00	; 0
    1eca:	70 e0       	ldi	r23, 0x00	; 0
    1ecc:	cb 01       	movw	r24, r22
    1ece:	08 95       	ret

00001ed0 <prvInsertTimerInActiveList>:
    1ed0:	cf 92       	push	r12
    1ed2:	df 92       	push	r13
    1ed4:	ef 92       	push	r14
    1ed6:	ff 92       	push	r15
    1ed8:	0f 93       	push	r16
    1eda:	1f 93       	push	r17
    1edc:	fc 01       	movw	r30, r24
    1ede:	42 83       	std	Z+2, r20	; 0x02
    1ee0:	53 83       	std	Z+3, r21	; 0x03
    1ee2:	64 83       	std	Z+4, r22	; 0x04
    1ee4:	75 83       	std	Z+5, r23	; 0x05
    1ee6:	82 87       	std	Z+10, r24	; 0x0a
    1ee8:	93 87       	std	Z+11, r25	; 0x0b
    1eea:	04 17       	cp	r16, r20
    1eec:	15 07       	cpc	r17, r21
    1eee:	26 07       	cpc	r18, r22
    1ef0:	37 07       	cpc	r19, r23
    1ef2:	c0 f0       	brcs	.+48     	; 0x1f24 <prvInsertTimerInActiveList+0x54>
    1ef4:	0c 19       	sub	r16, r12
    1ef6:	1d 09       	sbc	r17, r13
    1ef8:	2e 09       	sbc	r18, r14
    1efa:	3f 09       	sbc	r19, r15
    1efc:	86 85       	ldd	r24, Z+14	; 0x0e
    1efe:	97 85       	ldd	r25, Z+15	; 0x0f
    1f00:	a0 89       	ldd	r26, Z+16	; 0x10
    1f02:	b1 89       	ldd	r27, Z+17	; 0x11
    1f04:	08 17       	cp	r16, r24
    1f06:	19 07       	cpc	r17, r25
    1f08:	2a 07       	cpc	r18, r26
    1f0a:	3b 07       	cpc	r19, r27
    1f0c:	00 f5       	brcc	.+64     	; 0x1f4e <prvInsertTimerInActiveList+0x7e>
    1f0e:	bf 01       	movw	r22, r30
    1f10:	6e 5f       	subi	r22, 0xFE	; 254
    1f12:	7f 4f       	sbci	r23, 0xFF	; 255
    1f14:	80 91 98 30 	lds	r24, 0x3098	; 0x803098 <pxOverflowTimerList>
    1f18:	90 91 99 30 	lds	r25, 0x3099	; 0x803099 <pxOverflowTimerList+0x1>
    1f1c:	0e 94 75 04 	call	0x8ea	; 0x8ea <vListInsert>
    1f20:	80 e0       	ldi	r24, 0x00	; 0
    1f22:	18 c0       	rjmp	.+48     	; 0x1f54 <prvInsertTimerInActiveList+0x84>
    1f24:	0c 15       	cp	r16, r12
    1f26:	1d 05       	cpc	r17, r13
    1f28:	2e 05       	cpc	r18, r14
    1f2a:	3f 05       	cpc	r19, r15
    1f2c:	28 f4       	brcc	.+10     	; 0x1f38 <prvInsertTimerInActiveList+0x68>
    1f2e:	4c 15       	cp	r20, r12
    1f30:	5d 05       	cpc	r21, r13
    1f32:	6e 05       	cpc	r22, r14
    1f34:	7f 05       	cpc	r23, r15
    1f36:	68 f4       	brcc	.+26     	; 0x1f52 <prvInsertTimerInActiveList+0x82>
    1f38:	bf 01       	movw	r22, r30
    1f3a:	6e 5f       	subi	r22, 0xFE	; 254
    1f3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f3e:	80 91 9a 30 	lds	r24, 0x309A	; 0x80309a <pxCurrentTimerList>
    1f42:	90 91 9b 30 	lds	r25, 0x309B	; 0x80309b <pxCurrentTimerList+0x1>
    1f46:	0e 94 75 04 	call	0x8ea	; 0x8ea <vListInsert>
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	03 c0       	rjmp	.+6      	; 0x1f54 <prvInsertTimerInActiveList+0x84>
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	01 c0       	rjmp	.+2      	; 0x1f54 <prvInsertTimerInActiveList+0x84>
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	1f 91       	pop	r17
    1f56:	0f 91       	pop	r16
    1f58:	ff 90       	pop	r15
    1f5a:	ef 90       	pop	r14
    1f5c:	df 90       	pop	r13
    1f5e:	cf 90       	pop	r12
    1f60:	08 95       	ret

00001f62 <prvCheckForValidListAndQueue>:
    1f62:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1f66:	ff 93       	push	r31
    1f68:	f8 7f       	andi	r31, 0xF8	; 248
    1f6a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1f6e:	80 91 96 30 	lds	r24, 0x3096	; 0x803096 <xTimerQueue>
    1f72:	90 91 97 30 	lds	r25, 0x3097	; 0x803097 <xTimerQueue+0x1>
    1f76:	89 2b       	or	r24, r25
    1f78:	e9 f4       	brne	.+58     	; 0x1fb4 <prvCheckForValidListAndQueue+0x52>
    1f7a:	87 ea       	ldi	r24, 0xA7	; 167
    1f7c:	90 e3       	ldi	r25, 0x30	; 48
    1f7e:	0e 94 3f 04 	call	0x87e	; 0x87e <vListInitialise>
    1f82:	8c e9       	ldi	r24, 0x9C	; 156
    1f84:	90 e3       	ldi	r25, 0x30	; 48
    1f86:	0e 94 3f 04 	call	0x87e	; 0x87e <vListInitialise>
    1f8a:	87 ea       	ldi	r24, 0xA7	; 167
    1f8c:	90 e3       	ldi	r25, 0x30	; 48
    1f8e:	80 93 9a 30 	sts	0x309A, r24	; 0x80309a <pxCurrentTimerList>
    1f92:	90 93 9b 30 	sts	0x309B, r25	; 0x80309b <pxCurrentTimerList+0x1>
    1f96:	8c e9       	ldi	r24, 0x9C	; 156
    1f98:	90 e3       	ldi	r25, 0x30	; 48
    1f9a:	80 93 98 30 	sts	0x3098, r24	; 0x803098 <pxOverflowTimerList>
    1f9e:	90 93 99 30 	sts	0x3099, r25	; 0x803099 <pxOverflowTimerList+0x1>
    1fa2:	40 e0       	ldi	r20, 0x00	; 0
    1fa4:	69 e0       	ldi	r22, 0x09	; 9
    1fa6:	85 e0       	ldi	r24, 0x05	; 5
    1fa8:	0e 94 b5 07 	call	0xf6a	; 0xf6a <xQueueGenericCreate>
    1fac:	80 93 96 30 	sts	0x3096, r24	; 0x803096 <xTimerQueue>
    1fb0:	90 93 97 30 	sts	0x3097, r25	; 0x803097 <xTimerQueue+0x1>
    1fb4:	ff 91       	pop	r31
    1fb6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1fba:	08 95       	ret

00001fbc <xTimerCreateTimerTask>:
    1fbc:	ef 92       	push	r14
    1fbe:	ff 92       	push	r15
    1fc0:	0f 93       	push	r16
    1fc2:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <prvCheckForValidListAndQueue>
    1fc6:	80 91 96 30 	lds	r24, 0x3096	; 0x803096 <xTimerQueue>
    1fca:	90 91 97 30 	lds	r25, 0x3097	; 0x803097 <xTimerQueue+0x1>
    1fce:	89 2b       	or	r24, r25
    1fd0:	91 f0       	breq	.+36     	; 0x1ff6 <xTimerCreateTimerTask+0x3a>
    1fd2:	0f 2e       	mov	r0, r31
    1fd4:	f4 e9       	ldi	r31, 0x94	; 148
    1fd6:	ef 2e       	mov	r14, r31
    1fd8:	f0 e3       	ldi	r31, 0x30	; 48
    1fda:	ff 2e       	mov	r15, r31
    1fdc:	f0 2d       	mov	r31, r0
    1fde:	03 e0       	ldi	r16, 0x03	; 3
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	48 ec       	ldi	r20, 0xC8	; 200
    1fe6:	50 e0       	ldi	r21, 0x00	; 0
    1fe8:	69 e0       	ldi	r22, 0x09	; 9
    1fea:	70 e2       	ldi	r23, 0x20	; 32
    1fec:	8c e4       	ldi	r24, 0x4C	; 76
    1fee:	92 e1       	ldi	r25, 0x12	; 18
    1ff0:	0e 94 43 0b 	call	0x1686	; 0x1686 <xTaskCreate>
    1ff4:	01 c0       	rjmp	.+2      	; 0x1ff8 <xTimerCreateTimerTask+0x3c>
    1ff6:	80 e0       	ldi	r24, 0x00	; 0
    1ff8:	0f 91       	pop	r16
    1ffa:	ff 90       	pop	r15
    1ffc:	ef 90       	pop	r14
    1ffe:	08 95       	ret

00002000 <xTimerGenericCommand>:
    2000:	8f 92       	push	r8
    2002:	9f 92       	push	r9
    2004:	af 92       	push	r10
    2006:	bf 92       	push	r11
    2008:	cf 92       	push	r12
    200a:	df 92       	push	r13
    200c:	ef 92       	push	r14
    200e:	ff 92       	push	r15
    2010:	0f 93       	push	r16
    2012:	1f 93       	push	r17
    2014:	cf 93       	push	r28
    2016:	df 93       	push	r29
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
    201c:	29 97       	sbiw	r28, 0x09	; 9
    201e:	cd bf       	out	0x3d, r28	; 61
    2020:	de bf       	out	0x3e, r29	; 62
    2022:	e0 91 96 30 	lds	r30, 0x3096	; 0x803096 <xTimerQueue>
    2026:	f0 91 97 30 	lds	r31, 0x3097	; 0x803097 <xTimerQueue+0x1>
    202a:	30 97       	sbiw	r30, 0x00	; 0
    202c:	89 f1       	breq	.+98     	; 0x2090 <xTimerGenericCommand+0x90>
    202e:	69 83       	std	Y+1, r22	; 0x01
    2030:	2a 83       	std	Y+2, r18	; 0x02
    2032:	3b 83       	std	Y+3, r19	; 0x03
    2034:	4c 83       	std	Y+4, r20	; 0x04
    2036:	5d 83       	std	Y+5, r21	; 0x05
    2038:	8e 83       	std	Y+6, r24	; 0x06
    203a:	9f 83       	std	Y+7, r25	; 0x07
    203c:	66 30       	cpi	r22, 0x06	; 6
    203e:	fc f4       	brge	.+62     	; 0x207e <xTimerGenericCommand+0x7e>
    2040:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <xTaskGetSchedulerState>
    2044:	82 30       	cpi	r24, 0x02	; 2
    2046:	69 f4       	brne	.+26     	; 0x2062 <xTimerGenericCommand+0x62>
    2048:	00 e0       	ldi	r16, 0x00	; 0
    204a:	a7 01       	movw	r20, r14
    204c:	96 01       	movw	r18, r12
    204e:	be 01       	movw	r22, r28
    2050:	6f 5f       	subi	r22, 0xFF	; 255
    2052:	7f 4f       	sbci	r23, 0xFF	; 255
    2054:	80 91 96 30 	lds	r24, 0x3096	; 0x803096 <xTimerQueue>
    2058:	90 91 97 30 	lds	r25, 0x3097	; 0x803097 <xTimerQueue+0x1>
    205c:	0e 94 df 07 	call	0xfbe	; 0xfbe <xQueueGenericSend>
    2060:	18 c0       	rjmp	.+48     	; 0x2092 <xTimerGenericCommand+0x92>
    2062:	00 e0       	ldi	r16, 0x00	; 0
    2064:	20 e0       	ldi	r18, 0x00	; 0
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	a9 01       	movw	r20, r18
    206a:	be 01       	movw	r22, r28
    206c:	6f 5f       	subi	r22, 0xFF	; 255
    206e:	7f 4f       	sbci	r23, 0xFF	; 255
    2070:	80 91 96 30 	lds	r24, 0x3096	; 0x803096 <xTimerQueue>
    2074:	90 91 97 30 	lds	r25, 0x3097	; 0x803097 <xTimerQueue+0x1>
    2078:	0e 94 df 07 	call	0xfbe	; 0xfbe <xQueueGenericSend>
    207c:	0a c0       	rjmp	.+20     	; 0x2092 <xTimerGenericCommand+0x92>
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	a8 01       	movw	r20, r16
    2082:	be 01       	movw	r22, r28
    2084:	6f 5f       	subi	r22, 0xFF	; 255
    2086:	7f 4f       	sbci	r23, 0xFF	; 255
    2088:	cf 01       	movw	r24, r30
    208a:	0e 94 7e 08 	call	0x10fc	; 0x10fc <xQueueGenericSendFromISR>
    208e:	01 c0       	rjmp	.+2      	; 0x2092 <xTimerGenericCommand+0x92>
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	29 96       	adiw	r28, 0x09	; 9
    2094:	cd bf       	out	0x3d, r28	; 61
    2096:	de bf       	out	0x3e, r29	; 62
    2098:	df 91       	pop	r29
    209a:	cf 91       	pop	r28
    209c:	1f 91       	pop	r17
    209e:	0f 91       	pop	r16
    20a0:	ff 90       	pop	r15
    20a2:	ef 90       	pop	r14
    20a4:	df 90       	pop	r13
    20a6:	cf 90       	pop	r12
    20a8:	bf 90       	pop	r11
    20aa:	af 90       	pop	r10
    20ac:	9f 90       	pop	r9
    20ae:	8f 90       	pop	r8
    20b0:	08 95       	ret

000020b2 <prvSwitchTimerLists>:
    20b2:	8f 92       	push	r8
    20b4:	9f 92       	push	r9
    20b6:	af 92       	push	r10
    20b8:	bf 92       	push	r11
    20ba:	cf 92       	push	r12
    20bc:	df 92       	push	r13
    20be:	ef 92       	push	r14
    20c0:	ff 92       	push	r15
    20c2:	0f 93       	push	r16
    20c4:	1f 93       	push	r17
    20c6:	cf 93       	push	r28
    20c8:	df 93       	push	r29
    20ca:	3c c0       	rjmp	.+120    	; 0x2144 <prvSwitchTimerLists+0x92>
    20cc:	07 80       	ldd	r0, Z+7	; 0x07
    20ce:	f0 85       	ldd	r31, Z+8	; 0x08
    20d0:	e0 2d       	mov	r30, r0
    20d2:	80 80       	ld	r8, Z
    20d4:	91 80       	ldd	r9, Z+1	; 0x01
    20d6:	a2 80       	ldd	r10, Z+2	; 0x02
    20d8:	b3 80       	ldd	r11, Z+3	; 0x03
    20da:	c0 85       	ldd	r28, Z+8	; 0x08
    20dc:	d1 85       	ldd	r29, Z+9	; 0x09
    20de:	8e 01       	movw	r16, r28
    20e0:	0e 5f       	subi	r16, 0xFE	; 254
    20e2:	1f 4f       	sbci	r17, 0xFF	; 255
    20e4:	c8 01       	movw	r24, r16
    20e6:	0e 94 b2 04 	call	0x964	; 0x964 <uxListRemove>
    20ea:	ed 89       	ldd	r30, Y+21	; 0x15
    20ec:	fe 89       	ldd	r31, Y+22	; 0x16
    20ee:	ce 01       	movw	r24, r28
    20f0:	19 95       	eicall
    20f2:	8a 89       	ldd	r24, Y+18	; 0x12
    20f4:	81 30       	cpi	r24, 0x01	; 1
    20f6:	31 f5       	brne	.+76     	; 0x2144 <prvSwitchTimerLists+0x92>
    20f8:	8e 85       	ldd	r24, Y+14	; 0x0e
    20fa:	9f 85       	ldd	r25, Y+15	; 0x0f
    20fc:	a8 89       	ldd	r26, Y+16	; 0x10
    20fe:	b9 89       	ldd	r27, Y+17	; 0x11
    2100:	88 0d       	add	r24, r8
    2102:	99 1d       	adc	r25, r9
    2104:	aa 1d       	adc	r26, r10
    2106:	bb 1d       	adc	r27, r11
    2108:	88 16       	cp	r8, r24
    210a:	99 06       	cpc	r9, r25
    210c:	aa 06       	cpc	r10, r26
    210e:	bb 06       	cpc	r11, r27
    2110:	70 f4       	brcc	.+28     	; 0x212e <prvSwitchTimerLists+0x7c>
    2112:	8a 83       	std	Y+2, r24	; 0x02
    2114:	9b 83       	std	Y+3, r25	; 0x03
    2116:	ac 83       	std	Y+4, r26	; 0x04
    2118:	bd 83       	std	Y+5, r27	; 0x05
    211a:	ca 87       	std	Y+10, r28	; 0x0a
    211c:	db 87       	std	Y+11, r29	; 0x0b
    211e:	b8 01       	movw	r22, r16
    2120:	80 91 9a 30 	lds	r24, 0x309A	; 0x80309a <pxCurrentTimerList>
    2124:	90 91 9b 30 	lds	r25, 0x309B	; 0x80309b <pxCurrentTimerList+0x1>
    2128:	0e 94 75 04 	call	0x8ea	; 0x8ea <vListInsert>
    212c:	0b c0       	rjmp	.+22     	; 0x2144 <prvSwitchTimerLists+0x92>
    212e:	c1 2c       	mov	r12, r1
    2130:	d1 2c       	mov	r13, r1
    2132:	76 01       	movw	r14, r12
    2134:	00 e0       	ldi	r16, 0x00	; 0
    2136:	10 e0       	ldi	r17, 0x00	; 0
    2138:	a5 01       	movw	r20, r10
    213a:	94 01       	movw	r18, r8
    213c:	60 e0       	ldi	r22, 0x00	; 0
    213e:	ce 01       	movw	r24, r28
    2140:	0e 94 00 10 	call	0x2000	; 0x2000 <xTimerGenericCommand>
    2144:	e0 91 9a 30 	lds	r30, 0x309A	; 0x80309a <pxCurrentTimerList>
    2148:	f0 91 9b 30 	lds	r31, 0x309B	; 0x80309b <pxCurrentTimerList+0x1>
    214c:	80 81       	ld	r24, Z
    214e:	81 11       	cpse	r24, r1
    2150:	bd cf       	rjmp	.-134    	; 0x20cc <prvSwitchTimerLists+0x1a>
    2152:	80 91 98 30 	lds	r24, 0x3098	; 0x803098 <pxOverflowTimerList>
    2156:	90 91 99 30 	lds	r25, 0x3099	; 0x803099 <pxOverflowTimerList+0x1>
    215a:	80 93 9a 30 	sts	0x309A, r24	; 0x80309a <pxCurrentTimerList>
    215e:	90 93 9b 30 	sts	0x309B, r25	; 0x80309b <pxCurrentTimerList+0x1>
    2162:	e0 93 98 30 	sts	0x3098, r30	; 0x803098 <pxOverflowTimerList>
    2166:	f0 93 99 30 	sts	0x3099, r31	; 0x803099 <pxOverflowTimerList+0x1>
    216a:	df 91       	pop	r29
    216c:	cf 91       	pop	r28
    216e:	1f 91       	pop	r17
    2170:	0f 91       	pop	r16
    2172:	ff 90       	pop	r15
    2174:	ef 90       	pop	r14
    2176:	df 90       	pop	r13
    2178:	cf 90       	pop	r12
    217a:	bf 90       	pop	r11
    217c:	af 90       	pop	r10
    217e:	9f 90       	pop	r9
    2180:	8f 90       	pop	r8
    2182:	08 95       	ret

00002184 <prvSampleTimeNow>:
    2184:	cf 92       	push	r12
    2186:	df 92       	push	r13
    2188:	ef 92       	push	r14
    218a:	ff 92       	push	r15
    218c:	cf 93       	push	r28
    218e:	df 93       	push	r29
    2190:	ec 01       	movw	r28, r24
    2192:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <xTaskGetTickCount>
    2196:	6b 01       	movw	r12, r22
    2198:	7c 01       	movw	r14, r24
    219a:	80 91 90 30 	lds	r24, 0x3090	; 0x803090 <xLastTime.4745>
    219e:	90 91 91 30 	lds	r25, 0x3091	; 0x803091 <xLastTime.4745+0x1>
    21a2:	a0 91 92 30 	lds	r26, 0x3092	; 0x803092 <xLastTime.4745+0x2>
    21a6:	b0 91 93 30 	lds	r27, 0x3093	; 0x803093 <xLastTime.4745+0x3>
    21aa:	c8 16       	cp	r12, r24
    21ac:	d9 06       	cpc	r13, r25
    21ae:	ea 06       	cpc	r14, r26
    21b0:	fb 06       	cpc	r15, r27
    21b2:	28 f4       	brcc	.+10     	; 0x21be <prvSampleTimeNow+0x3a>
    21b4:	0e 94 59 10 	call	0x20b2	; 0x20b2 <prvSwitchTimerLists>
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	88 83       	st	Y, r24
    21bc:	01 c0       	rjmp	.+2      	; 0x21c0 <prvSampleTimeNow+0x3c>
    21be:	18 82       	st	Y, r1
    21c0:	c0 92 90 30 	sts	0x3090, r12	; 0x803090 <xLastTime.4745>
    21c4:	d0 92 91 30 	sts	0x3091, r13	; 0x803091 <xLastTime.4745+0x1>
    21c8:	e0 92 92 30 	sts	0x3092, r14	; 0x803092 <xLastTime.4745+0x2>
    21cc:	f0 92 93 30 	sts	0x3093, r15	; 0x803093 <xLastTime.4745+0x3>
    21d0:	c7 01       	movw	r24, r14
    21d2:	b6 01       	movw	r22, r12
    21d4:	df 91       	pop	r29
    21d6:	cf 91       	pop	r28
    21d8:	ff 90       	pop	r15
    21da:	ef 90       	pop	r14
    21dc:	df 90       	pop	r13
    21de:	cf 90       	pop	r12
    21e0:	08 95       	ret

000021e2 <prvProcessExpiredTimer>:
    21e2:	4f 92       	push	r4
    21e4:	5f 92       	push	r5
    21e6:	6f 92       	push	r6
    21e8:	7f 92       	push	r7
    21ea:	8f 92       	push	r8
    21ec:	9f 92       	push	r9
    21ee:	af 92       	push	r10
    21f0:	bf 92       	push	r11
    21f2:	cf 92       	push	r12
    21f4:	df 92       	push	r13
    21f6:	ef 92       	push	r14
    21f8:	ff 92       	push	r15
    21fa:	0f 93       	push	r16
    21fc:	1f 93       	push	r17
    21fe:	cf 93       	push	r28
    2200:	df 93       	push	r29
    2202:	4b 01       	movw	r8, r22
    2204:	5c 01       	movw	r10, r24
    2206:	29 01       	movw	r4, r18
    2208:	3a 01       	movw	r6, r20
    220a:	e0 91 9a 30 	lds	r30, 0x309A	; 0x80309a <pxCurrentTimerList>
    220e:	f0 91 9b 30 	lds	r31, 0x309B	; 0x80309b <pxCurrentTimerList+0x1>
    2212:	07 80       	ldd	r0, Z+7	; 0x07
    2214:	f0 85       	ldd	r31, Z+8	; 0x08
    2216:	e0 2d       	mov	r30, r0
    2218:	c0 85       	ldd	r28, Z+8	; 0x08
    221a:	d1 85       	ldd	r29, Z+9	; 0x09
    221c:	ce 01       	movw	r24, r28
    221e:	02 96       	adiw	r24, 0x02	; 2
    2220:	0e 94 b2 04 	call	0x964	; 0x964 <uxListRemove>
    2224:	8a 89       	ldd	r24, Y+18	; 0x12
    2226:	81 30       	cpi	r24, 0x01	; 1
    2228:	e1 f4       	brne	.+56     	; 0x2262 <prvProcessExpiredTimer+0x80>
    222a:	4e 85       	ldd	r20, Y+14	; 0x0e
    222c:	5f 85       	ldd	r21, Y+15	; 0x0f
    222e:	68 89       	ldd	r22, Y+16	; 0x10
    2230:	79 89       	ldd	r23, Y+17	; 0x11
    2232:	48 0d       	add	r20, r8
    2234:	59 1d       	adc	r21, r9
    2236:	6a 1d       	adc	r22, r10
    2238:	7b 1d       	adc	r23, r11
    223a:	75 01       	movw	r14, r10
    223c:	64 01       	movw	r12, r8
    223e:	93 01       	movw	r18, r6
    2240:	82 01       	movw	r16, r4
    2242:	ce 01       	movw	r24, r28
    2244:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <prvInsertTimerInActiveList>
    2248:	88 23       	and	r24, r24
    224a:	59 f0       	breq	.+22     	; 0x2262 <prvProcessExpiredTimer+0x80>
    224c:	c1 2c       	mov	r12, r1
    224e:	d1 2c       	mov	r13, r1
    2250:	76 01       	movw	r14, r12
    2252:	00 e0       	ldi	r16, 0x00	; 0
    2254:	10 e0       	ldi	r17, 0x00	; 0
    2256:	a5 01       	movw	r20, r10
    2258:	94 01       	movw	r18, r8
    225a:	60 e0       	ldi	r22, 0x00	; 0
    225c:	ce 01       	movw	r24, r28
    225e:	0e 94 00 10 	call	0x2000	; 0x2000 <xTimerGenericCommand>
    2262:	ed 89       	ldd	r30, Y+21	; 0x15
    2264:	fe 89       	ldd	r31, Y+22	; 0x16
    2266:	ce 01       	movw	r24, r28
    2268:	19 95       	eicall
    226a:	df 91       	pop	r29
    226c:	cf 91       	pop	r28
    226e:	1f 91       	pop	r17
    2270:	0f 91       	pop	r16
    2272:	ff 90       	pop	r15
    2274:	ef 90       	pop	r14
    2276:	df 90       	pop	r13
    2278:	cf 90       	pop	r12
    227a:	bf 90       	pop	r11
    227c:	af 90       	pop	r10
    227e:	9f 90       	pop	r9
    2280:	8f 90       	pop	r8
    2282:	7f 90       	pop	r7
    2284:	6f 90       	pop	r6
    2286:	5f 90       	pop	r5
    2288:	4f 90       	pop	r4
    228a:	08 95       	ret

0000228c <prvProcessTimerOrBlockTask>:
    228c:	8f 92       	push	r8
    228e:	9f 92       	push	r9
    2290:	af 92       	push	r10
    2292:	bf 92       	push	r11
    2294:	cf 92       	push	r12
    2296:	df 92       	push	r13
    2298:	ef 92       	push	r14
    229a:	ff 92       	push	r15
    229c:	1f 93       	push	r17
    229e:	cf 93       	push	r28
    22a0:	df 93       	push	r29
    22a2:	1f 92       	push	r1
    22a4:	cd b7       	in	r28, 0x3d	; 61
    22a6:	de b7       	in	r29, 0x3e	; 62
    22a8:	6b 01       	movw	r12, r22
    22aa:	7c 01       	movw	r14, r24
    22ac:	14 2f       	mov	r17, r20
    22ae:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <vTaskSuspendAll>
    22b2:	ce 01       	movw	r24, r28
    22b4:	01 96       	adiw	r24, 0x01	; 1
    22b6:	0e 94 c2 10 	call	0x2184	; 0x2184 <prvSampleTimeNow>
    22ba:	4b 01       	movw	r8, r22
    22bc:	5c 01       	movw	r10, r24
    22be:	89 81       	ldd	r24, Y+1	; 0x01
    22c0:	81 11       	cpse	r24, r1
    22c2:	2e c0       	rjmp	.+92     	; 0x2320 <prvProcessTimerOrBlockTask+0x94>
    22c4:	11 11       	cpse	r17, r1
    22c6:	0e c0       	rjmp	.+28     	; 0x22e4 <prvProcessTimerOrBlockTask+0x58>
    22c8:	8c 14       	cp	r8, r12
    22ca:	9d 04       	cpc	r9, r13
    22cc:	ae 04       	cpc	r10, r14
    22ce:	bf 04       	cpc	r11, r15
    22d0:	48 f0       	brcs	.+18     	; 0x22e4 <prvProcessTimerOrBlockTask+0x58>
    22d2:	0e 94 ba 0c 	call	0x1974	; 0x1974 <xTaskResumeAll>
    22d6:	a5 01       	movw	r20, r10
    22d8:	94 01       	movw	r18, r8
    22da:	c7 01       	movw	r24, r14
    22dc:	b6 01       	movw	r22, r12
    22de:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <prvProcessExpiredTimer>
    22e2:	20 c0       	rjmp	.+64     	; 0x2324 <prvProcessTimerOrBlockTask+0x98>
    22e4:	11 23       	and	r17, r17
    22e6:	41 f0       	breq	.+16     	; 0x22f8 <prvProcessTimerOrBlockTask+0x6c>
    22e8:	e0 91 98 30 	lds	r30, 0x3098	; 0x803098 <pxOverflowTimerList>
    22ec:	f0 91 99 30 	lds	r31, 0x3099	; 0x803099 <pxOverflowTimerList+0x1>
    22f0:	80 81       	ld	r24, Z
    22f2:	11 e0       	ldi	r17, 0x01	; 1
    22f4:	81 11       	cpse	r24, r1
    22f6:	10 e0       	ldi	r17, 0x00	; 0
    22f8:	b7 01       	movw	r22, r14
    22fa:	a6 01       	movw	r20, r12
    22fc:	48 19       	sub	r20, r8
    22fe:	59 09       	sbc	r21, r9
    2300:	6a 09       	sbc	r22, r10
    2302:	7b 09       	sbc	r23, r11
    2304:	21 2f       	mov	r18, r17
    2306:	80 91 96 30 	lds	r24, 0x3096	; 0x803096 <xTimerQueue>
    230a:	90 91 97 30 	lds	r25, 0x3097	; 0x803097 <xTimerQueue+0x1>
    230e:	0e 94 6e 09 	call	0x12dc	; 0x12dc <vQueueWaitForMessageRestricted>
    2312:	0e 94 ba 0c 	call	0x1974	; 0x1974 <xTaskResumeAll>
    2316:	81 11       	cpse	r24, r1
    2318:	05 c0       	rjmp	.+10     	; 0x2324 <prvProcessTimerOrBlockTask+0x98>
    231a:	0e 94 aa 05 	call	0xb54	; 0xb54 <vPortYield>
    231e:	02 c0       	rjmp	.+4      	; 0x2324 <prvProcessTimerOrBlockTask+0x98>
    2320:	0e 94 ba 0c 	call	0x1974	; 0x1974 <xTaskResumeAll>
    2324:	0f 90       	pop	r0
    2326:	df 91       	pop	r29
    2328:	cf 91       	pop	r28
    232a:	1f 91       	pop	r17
    232c:	ff 90       	pop	r15
    232e:	ef 90       	pop	r14
    2330:	df 90       	pop	r13
    2332:	cf 90       	pop	r12
    2334:	bf 90       	pop	r11
    2336:	af 90       	pop	r10
    2338:	9f 90       	pop	r9
    233a:	8f 90       	pop	r8
    233c:	08 95       	ret

0000233e <prvProcessReceivedCommands>:
    233e:	af 92       	push	r10
    2340:	bf 92       	push	r11
    2342:	cf 92       	push	r12
    2344:	df 92       	push	r13
    2346:	ef 92       	push	r14
    2348:	ff 92       	push	r15
    234a:	0f 93       	push	r16
    234c:	1f 93       	push	r17
    234e:	cf 93       	push	r28
    2350:	df 93       	push	r29
    2352:	cd b7       	in	r28, 0x3d	; 61
    2354:	de b7       	in	r29, 0x3e	; 62
    2356:	2a 97       	sbiw	r28, 0x0a	; 10
    2358:	cd bf       	out	0x3d, r28	; 61
    235a:	de bf       	out	0x3e, r29	; 62
    235c:	81 c0       	rjmp	.+258    	; 0x2460 <prvProcessReceivedCommands+0x122>
    235e:	89 81       	ldd	r24, Y+1	; 0x01
    2360:	88 23       	and	r24, r24
    2362:	4c f4       	brge	.+18     	; 0x2376 <prvProcessReceivedCommands+0x38>
    2364:	ea 81       	ldd	r30, Y+2	; 0x02
    2366:	fb 81       	ldd	r31, Y+3	; 0x03
    2368:	4e 81       	ldd	r20, Y+6	; 0x06
    236a:	5f 81       	ldd	r21, Y+7	; 0x07
    236c:	68 85       	ldd	r22, Y+8	; 0x08
    236e:	79 85       	ldd	r23, Y+9	; 0x09
    2370:	8c 81       	ldd	r24, Y+4	; 0x04
    2372:	9d 81       	ldd	r25, Y+5	; 0x05
    2374:	19 95       	eicall
    2376:	89 81       	ldd	r24, Y+1	; 0x01
    2378:	88 23       	and	r24, r24
    237a:	0c f4       	brge	.+2      	; 0x237e <prvProcessReceivedCommands+0x40>
    237c:	71 c0       	rjmp	.+226    	; 0x2460 <prvProcessReceivedCommands+0x122>
    237e:	ae 80       	ldd	r10, Y+6	; 0x06
    2380:	bf 80       	ldd	r11, Y+7	; 0x07
    2382:	d5 01       	movw	r26, r10
    2384:	1c 96       	adiw	r26, 0x0c	; 12
    2386:	8d 91       	ld	r24, X+
    2388:	9c 91       	ld	r25, X
    238a:	1d 97       	sbiw	r26, 0x0d	; 13
    238c:	89 2b       	or	r24, r25
    238e:	21 f0       	breq	.+8      	; 0x2398 <prvProcessReceivedCommands+0x5a>
    2390:	c5 01       	movw	r24, r10
    2392:	02 96       	adiw	r24, 0x02	; 2
    2394:	0e 94 b2 04 	call	0x964	; 0x964 <uxListRemove>
    2398:	ce 01       	movw	r24, r28
    239a:	0a 96       	adiw	r24, 0x0a	; 10
    239c:	0e 94 c2 10 	call	0x2184	; 0x2184 <prvSampleTimeNow>
    23a0:	8b 01       	movw	r16, r22
    23a2:	9c 01       	movw	r18, r24
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	08 2e       	mov	r0, r24
    23a8:	00 0c       	add	r0, r0
    23aa:	99 0b       	sbc	r25, r25
    23ac:	aa 0b       	sbc	r26, r26
    23ae:	bb 0b       	sbc	r27, r27
    23b0:	8a 30       	cpi	r24, 0x0A	; 10
    23b2:	91 05       	cpc	r25, r1
    23b4:	08 f0       	brcs	.+2      	; 0x23b8 <prvProcessReceivedCommands+0x7a>
    23b6:	54 c0       	rjmp	.+168    	; 0x2460 <prvProcessReceivedCommands+0x122>
    23b8:	fc 01       	movw	r30, r24
    23ba:	88 27       	eor	r24, r24
    23bc:	e2 50       	subi	r30, 0x02	; 2
    23be:	ff 4f       	sbci	r31, 0xFF	; 255
    23c0:	8f 4f       	sbci	r24, 0xFF	; 255
    23c2:	0c 94 a0 1d 	jmp	0x3b40	; 0x3b40 <__tablejump2__>
    23c6:	ca 80       	ldd	r12, Y+2	; 0x02
    23c8:	db 80       	ldd	r13, Y+3	; 0x03
    23ca:	ec 80       	ldd	r14, Y+4	; 0x04
    23cc:	fd 80       	ldd	r15, Y+5	; 0x05
    23ce:	f5 01       	movw	r30, r10
    23d0:	46 85       	ldd	r20, Z+14	; 0x0e
    23d2:	57 85       	ldd	r21, Z+15	; 0x0f
    23d4:	60 89       	ldd	r22, Z+16	; 0x10
    23d6:	71 89       	ldd	r23, Z+17	; 0x11
    23d8:	4c 0d       	add	r20, r12
    23da:	5d 1d       	adc	r21, r13
    23dc:	6e 1d       	adc	r22, r14
    23de:	7f 1d       	adc	r23, r15
    23e0:	c5 01       	movw	r24, r10
    23e2:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <prvInsertTimerInActiveList>
    23e6:	88 23       	and	r24, r24
    23e8:	d9 f1       	breq	.+118    	; 0x2460 <prvProcessReceivedCommands+0x122>
    23ea:	d5 01       	movw	r26, r10
    23ec:	55 96       	adiw	r26, 0x15	; 21
    23ee:	ed 91       	ld	r30, X+
    23f0:	fc 91       	ld	r31, X
    23f2:	56 97       	sbiw	r26, 0x16	; 22
    23f4:	c5 01       	movw	r24, r10
    23f6:	19 95       	eicall
    23f8:	f5 01       	movw	r30, r10
    23fa:	82 89       	ldd	r24, Z+18	; 0x12
    23fc:	81 30       	cpi	r24, 0x01	; 1
    23fe:	81 f5       	brne	.+96     	; 0x2460 <prvProcessReceivedCommands+0x122>
    2400:	4a 81       	ldd	r20, Y+2	; 0x02
    2402:	5b 81       	ldd	r21, Y+3	; 0x03
    2404:	6c 81       	ldd	r22, Y+4	; 0x04
    2406:	7d 81       	ldd	r23, Y+5	; 0x05
    2408:	86 85       	ldd	r24, Z+14	; 0x0e
    240a:	97 85       	ldd	r25, Z+15	; 0x0f
    240c:	a0 89       	ldd	r26, Z+16	; 0x10
    240e:	b1 89       	ldd	r27, Z+17	; 0x11
    2410:	9a 01       	movw	r18, r20
    2412:	ab 01       	movw	r20, r22
    2414:	28 0f       	add	r18, r24
    2416:	39 1f       	adc	r19, r25
    2418:	4a 1f       	adc	r20, r26
    241a:	5b 1f       	adc	r21, r27
    241c:	c1 2c       	mov	r12, r1
    241e:	d1 2c       	mov	r13, r1
    2420:	76 01       	movw	r14, r12
    2422:	00 e0       	ldi	r16, 0x00	; 0
    2424:	10 e0       	ldi	r17, 0x00	; 0
    2426:	60 e0       	ldi	r22, 0x00	; 0
    2428:	c5 01       	movw	r24, r10
    242a:	0e 94 00 10 	call	0x2000	; 0x2000 <xTimerGenericCommand>
    242e:	18 c0       	rjmp	.+48     	; 0x2460 <prvProcessReceivedCommands+0x122>
    2430:	4a 81       	ldd	r20, Y+2	; 0x02
    2432:	5b 81       	ldd	r21, Y+3	; 0x03
    2434:	6c 81       	ldd	r22, Y+4	; 0x04
    2436:	7d 81       	ldd	r23, Y+5	; 0x05
    2438:	d5 01       	movw	r26, r10
    243a:	1e 96       	adiw	r26, 0x0e	; 14
    243c:	4d 93       	st	X+, r20
    243e:	5d 93       	st	X+, r21
    2440:	6d 93       	st	X+, r22
    2442:	7c 93       	st	X, r23
    2444:	51 97       	sbiw	r26, 0x11	; 17
    2446:	40 0f       	add	r20, r16
    2448:	51 1f       	adc	r21, r17
    244a:	62 1f       	adc	r22, r18
    244c:	73 1f       	adc	r23, r19
    244e:	68 01       	movw	r12, r16
    2450:	79 01       	movw	r14, r18
    2452:	c5 01       	movw	r24, r10
    2454:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <prvInsertTimerInActiveList>
    2458:	03 c0       	rjmp	.+6      	; 0x2460 <prvProcessReceivedCommands+0x122>
    245a:	c5 01       	movw	r24, r10
    245c:	0e 94 3e 04 	call	0x87c	; 0x87c <vPortFree>
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	a9 01       	movw	r20, r18
    2466:	be 01       	movw	r22, r28
    2468:	6f 5f       	subi	r22, 0xFF	; 255
    246a:	7f 4f       	sbci	r23, 0xFF	; 255
    246c:	80 91 96 30 	lds	r24, 0x3096	; 0x803096 <xTimerQueue>
    2470:	90 91 97 30 	lds	r25, 0x3097	; 0x803097 <xTimerQueue+0x1>
    2474:	0e 94 c3 08 	call	0x1186	; 0x1186 <xQueueReceive>
    2478:	81 11       	cpse	r24, r1
    247a:	71 cf       	rjmp	.-286    	; 0x235e <prvProcessReceivedCommands+0x20>
    247c:	2a 96       	adiw	r28, 0x0a	; 10
    247e:	cd bf       	out	0x3d, r28	; 61
    2480:	de bf       	out	0x3e, r29	; 62
    2482:	df 91       	pop	r29
    2484:	cf 91       	pop	r28
    2486:	1f 91       	pop	r17
    2488:	0f 91       	pop	r16
    248a:	ff 90       	pop	r15
    248c:	ef 90       	pop	r14
    248e:	df 90       	pop	r13
    2490:	cf 90       	pop	r12
    2492:	bf 90       	pop	r11
    2494:	af 90       	pop	r10
    2496:	08 95       	ret

00002498 <prvTimerTask>:
    2498:	cf 93       	push	r28
    249a:	df 93       	push	r29
    249c:	1f 92       	push	r1
    249e:	cd b7       	in	r28, 0x3d	; 61
    24a0:	de b7       	in	r29, 0x3e	; 62
    24a2:	ce 01       	movw	r24, r28
    24a4:	01 96       	adiw	r24, 0x01	; 1
    24a6:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <prvGetNextExpireTime>
    24aa:	49 81       	ldd	r20, Y+1	; 0x01
    24ac:	0e 94 46 11 	call	0x228c	; 0x228c <prvProcessTimerOrBlockTask>
    24b0:	0e 94 9f 11 	call	0x233e	; 0x233e <prvProcessReceivedCommands>
    24b4:	f6 cf       	rjmp	.-20     	; 0x24a2 <prvTimerTask+0xa>

000024b6 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
    24b6:	0f 93       	push	r16
    24b8:	1f 93       	push	r17
    24ba:	cf 93       	push	r28
    24bc:	df 93       	push	r29
    24be:	cd b7       	in	r28, 0x3d	; 61
    24c0:	de b7       	in	r29, 0x3e	; 62
    24c2:	29 97       	sbiw	r28, 0x09	; 9
    24c4:	cd bf       	out	0x3d, r28	; 61
    24c6:	de bf       	out	0x3e, r29	; 62
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
    24c8:	ee ef       	ldi	r30, 0xFE	; 254
    24ca:	e9 83       	std	Y+1, r30	; 0x01
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
    24cc:	8a 83       	std	Y+2, r24	; 0x02
    24ce:	9b 83       	std	Y+3, r25	; 0x03
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
    24d0:	6c 83       	std	Y+4, r22	; 0x04
    24d2:	7d 83       	std	Y+5, r23	; 0x05
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
    24d4:	2e 83       	std	Y+6, r18	; 0x06
    24d6:	3f 83       	std	Y+7, r19	; 0x07
    24d8:	48 87       	std	Y+8, r20	; 0x08
    24da:	59 87       	std	Y+9, r21	; 0x09

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	a8 01       	movw	r20, r16
    24e0:	be 01       	movw	r22, r28
    24e2:	6f 5f       	subi	r22, 0xFF	; 255
    24e4:	7f 4f       	sbci	r23, 0xFF	; 255
    24e6:	80 91 96 30 	lds	r24, 0x3096	; 0x803096 <xTimerQueue>
    24ea:	90 91 97 30 	lds	r25, 0x3097	; 0x803097 <xTimerQueue+0x1>
    24ee:	0e 94 7e 08 	call	0x10fc	; 0x10fc <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
    24f2:	29 96       	adiw	r28, 0x09	; 9
    24f4:	cd bf       	out	0x3d, r28	; 61
    24f6:	de bf       	out	0x3e, r29	; 62
    24f8:	df 91       	pop	r29
    24fa:	cf 91       	pop	r28
    24fc:	1f 91       	pop	r17
    24fe:	0f 91       	pop	r16
    2500:	08 95       	ret

00002502 <vInitClock>:
#include "clksys_driver.h"


void vInitClock(void)
{
	CLKSYS_Enable( OSC_RC2MEN_bm );
    2502:	e0 e5       	ldi	r30, 0x50	; 80
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	80 81       	ld	r24, Z
    2508:	81 60       	ori	r24, 0x01	; 1
    250a:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_RC2MRDY_bm ) == 0 );
    250c:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
    2510:	80 ff       	sbrs	r24, 0
    2512:	fc cf       	rjmp	.-8      	; 0x250c <vInitClock+0xa>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC2M_gc );
    2514:	80 e0       	ldi	r24, 0x00	; 0
    2516:	0e 94 47 02 	call	0x48e	; 0x48e <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC32KEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
    251a:	8e e1       	ldi	r24, 0x1E	; 30
    251c:	0e 94 37 02 	call	0x46e	; 0x46e <CLKSYS_Disable>
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    2520:	60 e0       	ldi	r22, 0x00	; 0
    2522:	80 e0       	ldi	r24, 0x00	; 0
    2524:	0e 94 41 02 	call	0x482	; 0x482 <CLKSYS_Prescalers_Config>
	CLKSYS_XOSC_Config( OSC_FRQRANGE_2TO9_gc,false,OSC_XOSCSEL_XTAL_256CLK_gc );
    2528:	43 e0       	ldi	r20, 0x03	; 3
    252a:	60 e0       	ldi	r22, 0x00	; 0
    252c:	80 e4       	ldi	r24, 0x40	; 64
    252e:	0e 94 28 02 	call	0x450	; 0x450 <CLKSYS_XOSC_Config>
	CLKSYS_Enable( OSC_XOSCEN_bm );
    2532:	e0 e5       	ldi	r30, 0x50	; 80
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	80 81       	ld	r24, Z
    2538:	88 60       	ori	r24, 0x08	; 8
    253a:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
    253c:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
    2540:	83 ff       	sbrs	r24, 3
    2542:	fc cf       	rjmp	.-8      	; 0x253c <vInitClock+0x3a>
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 4 );
    2544:	64 e0       	ldi	r22, 0x04	; 4
    2546:	80 ec       	ldi	r24, 0xC0	; 192
    2548:	0e 94 32 02 	call	0x464	; 0x464 <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
    254c:	e0 e5       	ldi	r30, 0x50	; 80
    254e:	f0 e0       	ldi	r31, 0x00	; 0
    2550:	80 81       	ld	r24, Z
    2552:	80 61       	ori	r24, 0x10	; 16
    2554:	80 83       	st	Z, r24
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    2556:	60 e0       	ldi	r22, 0x00	; 0
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	0e 94 41 02 	call	0x482	; 0x482 <CLKSYS_Prescalers_Config>
	do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
    255e:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
    2562:	84 ff       	sbrs	r24, 4
    2564:	fc cf       	rjmp	.-8      	; 0x255e <vInitClock+0x5c>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
    2566:	84 e0       	ldi	r24, 0x04	; 4
    2568:	0e 94 47 02 	call	0x48e	; 0x48e <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC2MEN_bm | OSC_RC32KEN_bm);
    256c:	87 e0       	ldi	r24, 0x07	; 7
    256e:	0e 94 37 02 	call	0x46e	; 0x46e <CLKSYS_Disable>
    2572:	08 95       	ret

00002574 <vPiLeibniz>:
*/

void vPiLeibniz(void* pvParameters)
{
	uint32_t CurIterations = 0;
	float NextSign = 1.0;
    2574:	0f 2e       	mov	r0, r31
    2576:	81 2c       	mov	r8, r1
    2578:	91 2c       	mov	r9, r1
    257a:	f0 e8       	ldi	r31, 0x80	; 128
    257c:	af 2e       	mov	r10, r31
    257e:	ff e3       	ldi	r31, 0x3F	; 63
    2580:	bf 2e       	mov	r11, r31
    2582:	f0 2d       	mov	r31, r0
}
*/

void vPiLeibniz(void* pvParameters)
{
	uint32_t CurIterations = 0;
    2584:	c1 2c       	mov	r12, r1
    2586:	d1 2c       	mov	r13, r1
    2588:	76 01       	movw	r14, r12
	float NextSign = 1.0;
		while (1)
		{
			LeibnizPi = LeibnizPi + (NextSign / (2 * CurIterations + 1)) * 4;
    258a:	d7 01       	movw	r26, r14
    258c:	c6 01       	movw	r24, r12
    258e:	88 0f       	add	r24, r24
    2590:	99 1f       	adc	r25, r25
    2592:	aa 1f       	adc	r26, r26
    2594:	bb 1f       	adc	r27, r27
    2596:	bc 01       	movw	r22, r24
    2598:	cd 01       	movw	r24, r26
    259a:	6f 5f       	subi	r22, 0xFF	; 255
    259c:	7f 4f       	sbci	r23, 0xFF	; 255
    259e:	8f 4f       	sbci	r24, 0xFF	; 255
    25a0:	9f 4f       	sbci	r25, 0xFF	; 255
    25a2:	0e 94 0d 1c 	call	0x381a	; 0x381a <__floatunsisf>
    25a6:	9b 01       	movw	r18, r22
    25a8:	ac 01       	movw	r20, r24
    25aa:	c5 01       	movw	r24, r10
    25ac:	b4 01       	movw	r22, r8
    25ae:	0e 94 65 1b 	call	0x36ca	; 0x36ca <__divsf3>
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	40 e8       	ldi	r20, 0x80	; 128
    25b8:	50 e4       	ldi	r21, 0x40	; 64
    25ba:	0e 94 c4 1c 	call	0x3988	; 0x3988 <__mulsf3>
    25be:	20 91 b6 30 	lds	r18, 0x30B6	; 0x8030b6 <LeibnizPi>
    25c2:	30 91 b7 30 	lds	r19, 0x30B7	; 0x8030b7 <LeibnizPi+0x1>
    25c6:	40 91 b8 30 	lds	r20, 0x30B8	; 0x8030b8 <LeibnizPi+0x2>
    25ca:	50 91 b9 30 	lds	r21, 0x30B9	; 0x8030b9 <LeibnizPi+0x3>
    25ce:	0e 94 f4 1a 	call	0x35e8	; 0x35e8 <__addsf3>
    25d2:	60 93 b6 30 	sts	0x30B6, r22	; 0x8030b6 <LeibnizPi>
    25d6:	70 93 b7 30 	sts	0x30B7, r23	; 0x8030b7 <LeibnizPi+0x1>
    25da:	80 93 b8 30 	sts	0x30B8, r24	; 0x8030b8 <LeibnizPi+0x2>
    25de:	90 93 b9 30 	sts	0x30B9, r25	; 0x8030b9 <LeibnizPi+0x3>
			NextSign = - NextSign;
    25e2:	b7 fa       	bst	r11, 7
    25e4:	b0 94       	com	r11
    25e6:	b7 f8       	bld	r11, 7
    25e8:	b0 94       	com	r11
			CurIterations++;
    25ea:	8f ef       	ldi	r24, 0xFF	; 255
    25ec:	c8 1a       	sub	r12, r24
    25ee:	d8 0a       	sbc	r13, r24
    25f0:	e8 0a       	sbc	r14, r24
    25f2:	f8 0a       	sbc	r15, r24
			vTaskDelay(10/portTICK_RATE_MS);
    25f4:	6a e0       	ldi	r22, 0x0A	; 10
    25f6:	70 e0       	ldi	r23, 0x00	; 0
    25f8:	80 e0       	ldi	r24, 0x00	; 0
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <vTaskDelay>
    2600:	c4 cf       	rjmp	.-120    	; 0x258a <vPiLeibniz+0x16>

00002602 <vCompare>:
	int32_t RoundVietaPi = 0;
	int32_t RoundLeibPi = 0;
	int32_t RoundRefPi = 0;
	while(1)
	{
		RoundVietaPi = (int32_t) VietaPi * 10e7;
    2602:	80 91 b2 30 	lds	r24, 0x30B2	; 0x8030b2 <VietaPi>
    2606:	90 91 b3 30 	lds	r25, 0x30B3	; 0x8030b3 <VietaPi+0x1>
    260a:	a0 91 b4 30 	lds	r26, 0x30B4	; 0x8030b4 <VietaPi+0x2>
    260e:	b0 91 b5 30 	lds	r27, 0x30B5	; 0x8030b5 <VietaPi+0x3>
		RoundLeibPi = (int32_t) LeibnizPi * 10e7;
    2612:	80 91 b6 30 	lds	r24, 0x30B6	; 0x8030b6 <LeibnizPi>
    2616:	90 91 b7 30 	lds	r25, 0x30B7	; 0x8030b7 <LeibnizPi+0x1>
    261a:	a0 91 b8 30 	lds	r26, 0x30B8	; 0x8030b8 <LeibnizPi+0x2>
    261e:	b0 91 b9 30 	lds	r27, 0x30B9	; 0x8030b9 <LeibnizPi+0x3>
		RoundRefPi = (int32_t) RefPi * 10e7;
    2622:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    2626:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    262a:	a0 91 02 20 	lds	r26, 0x2002	; 0x802002 <__DATA_REGION_ORIGIN__+0x2>
    262e:	b0 91 03 20 	lds	r27, 0x2003	; 0x802003 <__DATA_REGION_ORIGIN__+0x3>
		if (( RoundRefPi == RoundLeibPi) || ( RoundRefPi == RoundVietaPi))
		{
			//Reset = 1;
		}
		vTaskDelay(10/portTICK_RATE_MS);
    2632:	6a e0       	ldi	r22, 0x0A	; 10
    2634:	70 e0       	ldi	r23, 0x00	; 0
    2636:	80 e0       	ldi	r24, 0x00	; 0
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <vTaskDelay>
    263e:	e1 cf       	rjmp	.-62     	; 0x2602 <vCompare>

00002640 <vVietaPi>:

void vVietaPi(void* pvParameters)
{

	double CurrentApprox = 1;
	double CurrentSqrt = 0;
    2640:	81 2c       	mov	r8, r1
    2642:	91 2c       	mov	r9, r1
    2644:	54 01       	movw	r10, r8
}

void vVietaPi(void* pvParameters)
{

	double CurrentApprox = 1;
    2646:	0f 2e       	mov	r0, r31
    2648:	c1 2c       	mov	r12, r1
    264a:	d1 2c       	mov	r13, r1
    264c:	f0 e8       	ldi	r31, 0x80	; 128
    264e:	ef 2e       	mov	r14, r31
    2650:	ff e3       	ldi	r31, 0x3F	; 63
    2652:	ff 2e       	mov	r15, r31
    2654:	f0 2d       	mov	r31, r0
	double CurrentSqrt = 0;
	
	while(1)
	{
		CurrentSqrt = sqrt(2 + CurrentSqrt); 
    2656:	20 e0       	ldi	r18, 0x00	; 0
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	40 e0       	ldi	r20, 0x00	; 0
    265c:	50 e4       	ldi	r21, 0x40	; 64
    265e:	c5 01       	movw	r24, r10
    2660:	b4 01       	movw	r22, r8
    2662:	0e 94 f4 1a 	call	0x35e8	; 0x35e8 <__addsf3>
    2666:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <sqrt>
    266a:	4b 01       	movw	r8, r22
    266c:	5c 01       	movw	r10, r24
		
		CurrentApprox = CurrentApprox * (CurrentSqrt / 2.0);
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	40 e0       	ldi	r20, 0x00	; 0
    2674:	5f e3       	ldi	r21, 0x3F	; 63
    2676:	0e 94 c4 1c 	call	0x3988	; 0x3988 <__mulsf3>
    267a:	9b 01       	movw	r18, r22
    267c:	ac 01       	movw	r20, r24
    267e:	c7 01       	movw	r24, r14
    2680:	b6 01       	movw	r22, r12
    2682:	0e 94 c4 1c 	call	0x3988	; 0x3988 <__mulsf3>
    2686:	6b 01       	movw	r12, r22
    2688:	7c 01       	movw	r14, r24
		
		VietaPi = 2 / CurrentApprox;
    268a:	9b 01       	movw	r18, r22
    268c:	ac 01       	movw	r20, r24
    268e:	60 e0       	ldi	r22, 0x00	; 0
    2690:	70 e0       	ldi	r23, 0x00	; 0
    2692:	80 e0       	ldi	r24, 0x00	; 0
    2694:	90 e4       	ldi	r25, 0x40	; 64
    2696:	0e 94 65 1b 	call	0x36ca	; 0x36ca <__divsf3>
    269a:	60 93 b2 30 	sts	0x30B2, r22	; 0x8030b2 <VietaPi>
    269e:	70 93 b3 30 	sts	0x30B3, r23	; 0x8030b3 <VietaPi+0x1>
    26a2:	80 93 b4 30 	sts	0x30B4, r24	; 0x8030b4 <VietaPi+0x2>
    26a6:	90 93 b5 30 	sts	0x30B5, r25	; 0x8030b5 <VietaPi+0x3>
		vTaskDelay(10/portTICK_RATE_MS);
    26aa:	6a e0       	ldi	r22, 0x0A	; 10
    26ac:	70 e0       	ldi	r23, 0x00	; 0
    26ae:	80 e0       	ldi	r24, 0x00	; 0
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <vTaskDelay>
    26b6:	cf cf       	rjmp	.-98     	; 0x2656 <vVietaPi+0x16>

000026b8 <vDisplaytask>:
}



void vDisplaytask(void* pvParameters)
{
    26b8:	cf 93       	push	r28
    26ba:	df 93       	push	r29
    26bc:	cd b7       	in	r28, 0x3d	; 61
    26be:	de b7       	in	r29, 0x3e	; 62
    26c0:	ec 97       	sbiw	r28, 0x3c	; 60
    26c2:	cd bf       	out	0x3d, r28	; 61
    26c4:	de bf       	out	0x3e, r29	; 62
	char RefPiString[20];
	char TimeString[20];
	
	while(1)
	{
	VietaDez = (int)(VietaPi * 10e6) % (int)10e6;
    26c6:	60 91 b2 30 	lds	r22, 0x30B2	; 0x8030b2 <VietaPi>
    26ca:	70 91 b3 30 	lds	r23, 0x30B3	; 0x8030b3 <VietaPi+0x1>
    26ce:	80 91 b4 30 	lds	r24, 0x30B4	; 0x8030b4 <VietaPi+0x2>
    26d2:	90 91 b5 30 	lds	r25, 0x30B5	; 0x8030b5 <VietaPi+0x3>
    26d6:	20 e8       	ldi	r18, 0x80	; 128
    26d8:	36 e9       	ldi	r19, 0x96	; 150
    26da:	48 e1       	ldi	r20, 0x18	; 24
    26dc:	5b e4       	ldi	r21, 0x4B	; 75
    26de:	0e 94 c4 1c 	call	0x3988	; 0x3988 <__mulsf3>
    26e2:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <__fixsfsi>
    26e6:	cb 01       	movw	r24, r22
    26e8:	6f ef       	ldi	r22, 0xFF	; 255
    26ea:	7f e7       	ldi	r23, 0x7F	; 127
    26ec:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__divmodhi4>
    26f0:	28 2f       	mov	r18, r24
    26f2:	39 2f       	mov	r19, r25
		
	sprintf(&VietaPiString[0], "VPI: %i,%8i", (uint32_t)VietaPi, VietaDez);
    26f4:	60 91 b2 30 	lds	r22, 0x30B2	; 0x8030b2 <VietaPi>
    26f8:	70 91 b3 30 	lds	r23, 0x30B3	; 0x8030b3 <VietaPi+0x1>
    26fc:	80 91 b4 30 	lds	r24, 0x30B4	; 0x8030b4 <VietaPi+0x2>
    2700:	90 91 b5 30 	lds	r25, 0x30B5	; 0x8030b5 <VietaPi+0x3>
    2704:	3f 93       	push	r19
    2706:	2f 93       	push	r18
    2708:	0e 94 de 1b 	call	0x37bc	; 0x37bc <__fixunssfsi>
    270c:	9f 93       	push	r25
    270e:	8f 93       	push	r24
    2710:	7f 93       	push	r23
    2712:	6f 93       	push	r22
    2714:	81 e1       	ldi	r24, 0x11	; 17
    2716:	90 e2       	ldi	r25, 0x20	; 32
    2718:	9f 93       	push	r25
    271a:	8f 93       	push	r24
    271c:	8e 01       	movw	r16, r28
    271e:	0f 5f       	subi	r16, 0xFF	; 255
    2720:	1f 4f       	sbci	r17, 0xFF	; 255
    2722:	1f 93       	push	r17
    2724:	0f 93       	push	r16
    2726:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <sprintf>
	sprintf(&LeibnizPiString[0], "LPI: %f", LeibnizPi);
    272a:	80 91 b6 30 	lds	r24, 0x30B6	; 0x8030b6 <LeibnizPi>
    272e:	90 91 b7 30 	lds	r25, 0x30B7	; 0x8030b7 <LeibnizPi+0x1>
    2732:	a0 91 b8 30 	lds	r26, 0x30B8	; 0x8030b8 <LeibnizPi+0x2>
    2736:	b0 91 b9 30 	lds	r27, 0x30B9	; 0x8030b9 <LeibnizPi+0x3>
    273a:	bf 93       	push	r27
    273c:	af 93       	push	r26
    273e:	9f 93       	push	r25
    2740:	8f 93       	push	r24
    2742:	8d e1       	ldi	r24, 0x1D	; 29
    2744:	90 e2       	ldi	r25, 0x20	; 32
    2746:	9f 93       	push	r25
    2748:	8f 93       	push	r24
    274a:	6e 01       	movw	r12, r28
    274c:	85 e1       	ldi	r24, 0x15	; 21
    274e:	c8 0e       	add	r12, r24
    2750:	d1 1c       	adc	r13, r1
    2752:	df 92       	push	r13
    2754:	cf 92       	push	r12
    2756:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <sprintf>
	sprintf(&RefPiString[0], "RPI: %.8f", RefPi);
    275a:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    275e:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    2762:	a0 91 02 20 	lds	r26, 0x2002	; 0x802002 <__DATA_REGION_ORIGIN__+0x2>
    2766:	b0 91 03 20 	lds	r27, 0x2003	; 0x802003 <__DATA_REGION_ORIGIN__+0x3>
    276a:	bf 93       	push	r27
    276c:	af 93       	push	r26
    276e:	9f 93       	push	r25
    2770:	8f 93       	push	r24
    2772:	85 e2       	ldi	r24, 0x25	; 37
    2774:	90 e2       	ldi	r25, 0x20	; 32
    2776:	9f 93       	push	r25
    2778:	8f 93       	push	r24
    277a:	7e 01       	movw	r14, r28
    277c:	99 e2       	ldi	r25, 0x29	; 41
    277e:	e9 0e       	add	r14, r25
    2780:	f1 1c       	adc	r15, r1
    2782:	ff 92       	push	r15
    2784:	ef 92       	push	r14
    2786:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <sprintf>
	//sprintf(&TimeString[0], "%.2i:%.2i", GlobalMin, GlobalSec);
	vDisplayWriteStringAtPos(0,0, "%s", VietaPiString);	
    278a:	1f 93       	push	r17
    278c:	0f 93       	push	r16
    278e:	0f e2       	ldi	r16, 0x2F	; 47
    2790:	10 e2       	ldi	r17, 0x20	; 32
    2792:	1f 93       	push	r17
    2794:	0f 93       	push	r16
    2796:	1f 92       	push	r1
    2798:	1f 92       	push	r1
    279a:	1f 92       	push	r1
    279c:	1f 92       	push	r1
    279e:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <vDisplayWriteStringAtPos>
	vDisplayWriteStringAtPos(1,0, "%s", LeibnizPiString);	
    27a2:	cd bf       	out	0x3d, r28	; 61
    27a4:	de bf       	out	0x3e, r29	; 62
    27a6:	df 92       	push	r13
    27a8:	cf 92       	push	r12
    27aa:	1f 93       	push	r17
    27ac:	0f 93       	push	r16
    27ae:	1f 92       	push	r1
    27b0:	1f 92       	push	r1
    27b2:	1f 92       	push	r1
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    27b6:	8f 93       	push	r24
    27b8:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <vDisplayWriteStringAtPos>
	vDisplayWriteStringAtPos(3,0, "%s", RefPiString);	
    27bc:	ff 92       	push	r15
    27be:	ef 92       	push	r14
    27c0:	1f 93       	push	r17
    27c2:	0f 93       	push	r16
    27c4:	1f 92       	push	r1
    27c6:	1f 92       	push	r1
    27c8:	1f 92       	push	r1
    27ca:	83 e0       	ldi	r24, 0x03	; 3
    27cc:	8f 93       	push	r24
    27ce:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <vDisplayWriteStringAtPos>
	//vDisplayWriteStringAtPos(2,0, "%s", TimeString);
	vTaskDelay(10/portTICK_RATE_MS);
    27d2:	6a e0       	ldi	r22, 0x0A	; 10
    27d4:	70 e0       	ldi	r23, 0x00	; 0
    27d6:	80 e0       	ldi	r24, 0x00	; 0
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <vTaskDelay>
    27de:	cd bf       	out	0x3d, r28	; 61
    27e0:	de bf       	out	0x3e, r29	; 62
    27e2:	71 cf       	rjmp	.-286    	; 0x26c6 <vDisplaytask+0xe>

000027e4 <controllerTask>:
	}

}


void controllerTask(void* pvParameters) {
    27e4:	cf 93       	push	r28
    27e6:	df 93       	push	r29
    27e8:	cd b7       	in	r28, 0x3d	; 61
    27ea:	de b7       	in	r29, 0x3e	; 62
    27ec:	2c 97       	sbiw	r28, 0x0c	; 12
    27ee:	cd bf       	out	0x3d, r28	; 61
    27f0:	de bf       	out	0x3e, r29	; 62
	initButtons();
    27f2:	0e 94 4d 01 	call	0x29a	; 0x29a <initButtons>
	for(;;) {
		updateButtons();
    27f6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <updateButtons>
		if(getButtonPress(BUTTON1) == SHORT_PRESSED) {
    27fa:	80 e0       	ldi	r24, 0x00	; 0
    27fc:	0e 94 fd 01 	call	0x3fa	; 0x3fa <getButtonPress>
    2800:	81 30       	cpi	r24, 0x01	; 1
    2802:	11 f5       	brne	.+68     	; 0x2848 <controllerTask+0x64>
			char pistring[12];
			sprintf(&pistring[0], "PI: %.8f", M_PI);
    2804:	80 e4       	ldi	r24, 0x40	; 64
    2806:	8f 93       	push	r24
    2808:	89 e4       	ldi	r24, 0x49	; 73
    280a:	8f 93       	push	r24
    280c:	8f e0       	ldi	r24, 0x0F	; 15
    280e:	8f 93       	push	r24
    2810:	8b ed       	ldi	r24, 0xDB	; 219
    2812:	8f 93       	push	r24
    2814:	86 e2       	ldi	r24, 0x26	; 38
    2816:	90 e2       	ldi	r25, 0x20	; 32
    2818:	9f 93       	push	r25
    281a:	8f 93       	push	r24
    281c:	8e 01       	movw	r16, r28
    281e:	0f 5f       	subi	r16, 0xFF	; 255
    2820:	1f 4f       	sbci	r17, 0xFF	; 255
    2822:	1f 93       	push	r17
    2824:	0f 93       	push	r16
    2826:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <sprintf>
			vDisplayWriteStringAtPos(1,0, "%s", pistring);
    282a:	1f 93       	push	r17
    282c:	0f 93       	push	r16
    282e:	8f e2       	ldi	r24, 0x2F	; 47
    2830:	90 e2       	ldi	r25, 0x20	; 32
    2832:	9f 93       	push	r25
    2834:	8f 93       	push	r24
    2836:	1f 92       	push	r1
    2838:	1f 92       	push	r1
    283a:	1f 92       	push	r1
    283c:	81 e0       	ldi	r24, 0x01	; 1
    283e:	8f 93       	push	r24
    2840:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <vDisplayWriteStringAtPos>
    2844:	cd bf       	out	0x3d, r28	; 61
    2846:	de bf       	out	0x3e, r29	; 62
		}
		if(getButtonPress(BUTTON2) == SHORT_PRESSED) {
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <getButtonPress>
			
		}
		if(getButtonPress(BUTTON3) == SHORT_PRESSED) {
    284e:	82 e0       	ldi	r24, 0x02	; 2
    2850:	0e 94 fd 01 	call	0x3fa	; 0x3fa <getButtonPress>
			
		}
		if(getButtonPress(BUTTON4) == SHORT_PRESSED) {
    2854:	83 e0       	ldi	r24, 0x03	; 3
    2856:	0e 94 fd 01 	call	0x3fa	; 0x3fa <getButtonPress>
			
		}
		if(getButtonPress(BUTTON1) == LONG_PRESSED) {
    285a:	80 e0       	ldi	r24, 0x00	; 0
    285c:	0e 94 fd 01 	call	0x3fa	; 0x3fa <getButtonPress>
			
		}
		if(getButtonPress(BUTTON2) == LONG_PRESSED) {
    2860:	81 e0       	ldi	r24, 0x01	; 1
    2862:	0e 94 fd 01 	call	0x3fa	; 0x3fa <getButtonPress>
			
		}
		if(getButtonPress(BUTTON3) == LONG_PRESSED) {
    2866:	82 e0       	ldi	r24, 0x02	; 2
    2868:	0e 94 fd 01 	call	0x3fa	; 0x3fa <getButtonPress>
			
		}
		if(getButtonPress(BUTTON4) == LONG_PRESSED) {
    286c:	83 e0       	ldi	r24, 0x03	; 3
    286e:	0e 94 fd 01 	call	0x3fa	; 0x3fa <getButtonPress>
			
		}
		vTaskDelay(10/portTICK_RATE_MS);
    2872:	6a e0       	ldi	r22, 0x0A	; 10
    2874:	70 e0       	ldi	r23, 0x00	; 0
    2876:	80 e0       	ldi	r24, 0x00	; 0
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <vTaskDelay>
	}
    287e:	bb cf       	rjmp	.-138    	; 0x27f6 <controllerTask+0x12>

00002880 <vApplicationIdleHook>:




void vApplicationIdleHook( void )
{	
    2880:	08 95       	ret

00002882 <main>:
	
}

int main(void)
{
    2882:	ef 92       	push	r14
    2884:	ff 92       	push	r15
    2886:	0f 93       	push	r16
	vInitClock();
    2888:	0e 94 81 12 	call	0x2502	; 0x2502 <vInitClock>
	vInitDisplay();
    288c:	0e 94 55 19 	call	0x32aa	; 0x32aa <vInitDisplay>
	
	xTaskCreate(controllerTask, (const char *) "control_tsk", configMINIMAL_STACK_SIZE+150, NULL, 3, NULL);
    2890:	e1 2c       	mov	r14, r1
    2892:	f1 2c       	mov	r15, r1
    2894:	03 e0       	ldi	r16, 0x03	; 3
    2896:	20 e0       	ldi	r18, 0x00	; 0
    2898:	30 e0       	ldi	r19, 0x00	; 0
    289a:	4e e5       	ldi	r20, 0x5E	; 94
    289c:	51 e0       	ldi	r21, 0x01	; 1
    289e:	62 e3       	ldi	r22, 0x32	; 50
    28a0:	70 e2       	ldi	r23, 0x20	; 32
    28a2:	82 ef       	ldi	r24, 0xF2	; 242
    28a4:	93 e1       	ldi	r25, 0x13	; 19
    28a6:	0e 94 43 0b 	call	0x1686	; 0x1686 <xTaskCreate>
	//xTaskCreate(vButtonTask, (const char *) "btTask", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
	xTaskCreate( vPiLeibniz, (const char *) "Leibniz_tsk", configMINIMAL_STACK_SIZE+10, NULL, 2, NULL);
    28aa:	02 e0       	ldi	r16, 0x02	; 2
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	42 ed       	ldi	r20, 0xD2	; 210
    28b2:	50 e0       	ldi	r21, 0x00	; 0
    28b4:	6e e3       	ldi	r22, 0x3E	; 62
    28b6:	70 e2       	ldi	r23, 0x20	; 32
    28b8:	8a eb       	ldi	r24, 0xBA	; 186
    28ba:	92 e1       	ldi	r25, 0x12	; 18
    28bc:	0e 94 43 0b 	call	0x1686	; 0x1686 <xTaskCreate>
	xTaskCreate( vVietaPi, (const char *) "vVietaPi_tsk", configMINIMAL_STACK_SIZE+10, NULL, 2, NULL);
    28c0:	20 e0       	ldi	r18, 0x00	; 0
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	42 ed       	ldi	r20, 0xD2	; 210
    28c6:	50 e0       	ldi	r21, 0x00	; 0
    28c8:	6a e4       	ldi	r22, 0x4A	; 74
    28ca:	70 e2       	ldi	r23, 0x20	; 32
    28cc:	80 e2       	ldi	r24, 0x20	; 32
    28ce:	93 e1       	ldi	r25, 0x13	; 19
    28d0:	0e 94 43 0b 	call	0x1686	; 0x1686 <xTaskCreate>
	xTaskCreate( vCompare, (const char *) "vComp_tsk", configMINIMAL_STACK_SIZE+10, NULL, 3, NULL);
    28d4:	03 e0       	ldi	r16, 0x03	; 3
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	42 ed       	ldi	r20, 0xD2	; 210
    28dc:	50 e0       	ldi	r21, 0x00	; 0
    28de:	67 e5       	ldi	r22, 0x57	; 87
    28e0:	70 e2       	ldi	r23, 0x20	; 32
    28e2:	81 e0       	ldi	r24, 0x01	; 1
    28e4:	93 e1       	ldi	r25, 0x13	; 19
    28e6:	0e 94 43 0b 	call	0x1686	; 0x1686 <xTaskCreate>
	xTaskCreate( vDisplaytask, (const char *) "vDisp_tsk", configMINIMAL_STACK_SIZE+10, NULL, 2, NULL);
    28ea:	02 e0       	ldi	r16, 0x02	; 2
    28ec:	20 e0       	ldi	r18, 0x00	; 0
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	42 ed       	ldi	r20, 0xD2	; 210
    28f2:	50 e0       	ldi	r21, 0x00	; 0
    28f4:	61 e6       	ldi	r22, 0x61	; 97
    28f6:	70 e2       	ldi	r23, 0x20	; 32
    28f8:	8c e5       	ldi	r24, 0x5C	; 92
    28fa:	93 e1       	ldi	r25, 0x13	; 19
    28fc:	0e 94 43 0b 	call	0x1686	; 0x1686 <xTaskCreate>
	//xTaskCreate( vTimeMeasurement, (const char *) "vTimeMeasurement_tsk", configMINIMAL_STACK_SIZE+10, NULL, 2, NULL);
	
	vTaskStartScheduler();
    2900:	0e 94 97 0b 	call	0x172e	; 0x172e <vTaskStartScheduler>
	
	return 0;
}
    2904:	80 e0       	ldi	r24, 0x00	; 0
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	0f 91       	pop	r16
    290a:	ff 90       	pop	r15
    290c:	ef 90       	pop	r14
    290e:	08 95       	ret

00002910 <normalize>:
	 }
 }
 

void vDisplayClear() {
	xEventGroupSetBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    2910:	cf 92       	push	r12
    2912:	df 92       	push	r13
    2914:	ef 92       	push	r14
    2916:	ff 92       	push	r15
    2918:	0f 93       	push	r16
    291a:	1f 93       	push	r17
    291c:	cf 93       	push	r28
    291e:	df 93       	push	r29
    2920:	8c 01       	movw	r16, r24
    2922:	fc 01       	movw	r30, r24
    2924:	c0 80       	ld	r12, Z
    2926:	d1 80       	ldd	r13, Z+1	; 0x01
    2928:	e2 80       	ldd	r14, Z+2	; 0x02
    292a:	f3 80       	ldd	r15, Z+3	; 0x03
    292c:	c0 e0       	ldi	r28, 0x00	; 0
    292e:	d0 e0       	ldi	r29, 0x00	; 0
    2930:	0b c0       	rjmp	.+22     	; 0x2948 <normalize+0x38>
    2932:	20 e0       	ldi	r18, 0x00	; 0
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	40 e2       	ldi	r20, 0x20	; 32
    2938:	51 e4       	ldi	r21, 0x41	; 65
    293a:	c7 01       	movw	r24, r14
    293c:	b6 01       	movw	r22, r12
    293e:	0e 94 65 1b 	call	0x36ca	; 0x36ca <__divsf3>
    2942:	6b 01       	movw	r12, r22
    2944:	7c 01       	movw	r14, r24
    2946:	21 96       	adiw	r28, 0x01	; 1
    2948:	20 e0       	ldi	r18, 0x00	; 0
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	40 e8       	ldi	r20, 0x80	; 128
    294e:	5f e3       	ldi	r21, 0x3F	; 63
    2950:	c7 01       	movw	r24, r14
    2952:	b6 01       	movw	r22, r12
    2954:	0e 94 bf 1c 	call	0x397e	; 0x397e <__gesf2>
    2958:	88 23       	and	r24, r24
    295a:	5c f7       	brge	.-42     	; 0x2932 <normalize+0x22>
    295c:	0b c0       	rjmp	.+22     	; 0x2974 <normalize+0x64>
    295e:	20 e0       	ldi	r18, 0x00	; 0
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	40 e2       	ldi	r20, 0x20	; 32
    2964:	51 e4       	ldi	r21, 0x41	; 65
    2966:	c7 01       	movw	r24, r14
    2968:	b6 01       	movw	r22, r12
    296a:	0e 94 c4 1c 	call	0x3988	; 0x3988 <__mulsf3>
    296e:	6b 01       	movw	r12, r22
    2970:	7c 01       	movw	r14, r24
    2972:	21 97       	sbiw	r28, 0x01	; 1
    2974:	2d ec       	ldi	r18, 0xCD	; 205
    2976:	3c ec       	ldi	r19, 0xCC	; 204
    2978:	4c ec       	ldi	r20, 0xCC	; 204
    297a:	5d e3       	ldi	r21, 0x3D	; 61
    297c:	c7 01       	movw	r24, r14
    297e:	b6 01       	movw	r22, r12
    2980:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <__cmpsf2>
    2984:	88 23       	and	r24, r24
    2986:	5c f3       	brlt	.-42     	; 0x295e <normalize+0x4e>
    2988:	f8 01       	movw	r30, r16
    298a:	c0 82       	st	Z, r12
    298c:	d1 82       	std	Z+1, r13	; 0x01
    298e:	e2 82       	std	Z+2, r14	; 0x02
    2990:	f3 82       	std	Z+3, r15	; 0x03
    2992:	ce 01       	movw	r24, r28
    2994:	df 91       	pop	r29
    2996:	cf 91       	pop	r28
    2998:	1f 91       	pop	r17
    299a:	0f 91       	pop	r16
    299c:	ff 90       	pop	r15
    299e:	ef 90       	pop	r14
    29a0:	df 90       	pop	r13
    29a2:	cf 90       	pop	r12
    29a4:	08 95       	ret

000029a6 <ftoa_fixed>:
    29a6:	4f 92       	push	r4
    29a8:	5f 92       	push	r5
    29aa:	6f 92       	push	r6
    29ac:	7f 92       	push	r7
    29ae:	8f 92       	push	r8
    29b0:	9f 92       	push	r9
    29b2:	af 92       	push	r10
    29b4:	bf 92       	push	r11
    29b6:	cf 92       	push	r12
    29b8:	df 92       	push	r13
    29ba:	ef 92       	push	r14
    29bc:	ff 92       	push	r15
    29be:	0f 93       	push	r16
    29c0:	1f 93       	push	r17
    29c2:	cf 93       	push	r28
    29c4:	df 93       	push	r29
    29c6:	00 d0       	rcall	.+0      	; 0x29c8 <ftoa_fixed+0x22>
    29c8:	1f 92       	push	r1
    29ca:	cd b7       	in	r28, 0x3d	; 61
    29cc:	de b7       	in	r29, 0x3e	; 62
    29ce:	5c 01       	movw	r10, r24
    29d0:	e4 2e       	mov	r14, r20
    29d2:	f5 2e       	mov	r15, r21
    29d4:	06 2f       	mov	r16, r22
    29d6:	17 2f       	mov	r17, r23
    29d8:	49 83       	std	Y+1, r20	; 0x01
    29da:	5a 83       	std	Y+2, r21	; 0x02
    29dc:	6b 83       	std	Y+3, r22	; 0x03
    29de:	7c 83       	std	Y+4, r23	; 0x04
    29e0:	20 e0       	ldi	r18, 0x00	; 0
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	a9 01       	movw	r20, r18
    29e6:	6e 2d       	mov	r22, r14
    29e8:	7f 2d       	mov	r23, r15
    29ea:	80 2f       	mov	r24, r16
    29ec:	91 2f       	mov	r25, r17
    29ee:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <__cmpsf2>
    29f2:	81 11       	cpse	r24, r1
    29f4:	05 c0       	rjmp	.+10     	; 0x2a00 <ftoa_fixed+0x5a>
    29f6:	80 e3       	ldi	r24, 0x30	; 48
    29f8:	f5 01       	movw	r30, r10
    29fa:	80 83       	st	Z, r24
    29fc:	11 82       	std	Z+1, r1	; 0x01
    29fe:	b9 c0       	rjmp	.+370    	; 0x2b72 <ftoa_fixed+0x1cc>
    2a00:	20 e0       	ldi	r18, 0x00	; 0
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	a9 01       	movw	r20, r18
    2a06:	6e 2d       	mov	r22, r14
    2a08:	7f 2d       	mov	r23, r15
    2a0a:	80 2f       	mov	r24, r16
    2a0c:	91 2f       	mov	r25, r17
    2a0e:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <__cmpsf2>
    2a12:	88 23       	and	r24, r24
    2a14:	7c f4       	brge	.+30     	; 0x2a34 <ftoa_fixed+0x8e>
    2a16:	8d e2       	ldi	r24, 0x2D	; 45
    2a18:	f5 01       	movw	r30, r10
    2a1a:	80 83       	st	Z, r24
    2a1c:	89 81       	ldd	r24, Y+1	; 0x01
    2a1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a20:	ab 81       	ldd	r26, Y+3	; 0x03
    2a22:	bc 81       	ldd	r27, Y+4	; 0x04
    2a24:	b0 58       	subi	r27, 0x80	; 128
    2a26:	89 83       	std	Y+1, r24	; 0x01
    2a28:	9a 83       	std	Y+2, r25	; 0x02
    2a2a:	ab 83       	std	Y+3, r26	; 0x03
    2a2c:	bc 83       	std	Y+4, r27	; 0x04
    2a2e:	c5 01       	movw	r24, r10
    2a30:	01 96       	adiw	r24, 0x01	; 1
    2a32:	5c 01       	movw	r10, r24
    2a34:	ce 01       	movw	r24, r28
    2a36:	01 96       	adiw	r24, 0x01	; 1
    2a38:	0e 94 88 14 	call	0x2910	; 0x2910 <normalize>
    2a3c:	7c 01       	movw	r14, r24
    2a3e:	00 e0       	ldi	r16, 0x00	; 0
    2a40:	10 e0       	ldi	r17, 0x00	; 0
    2a42:	38 c0       	rjmp	.+112    	; 0x2ab4 <ftoa_fixed+0x10e>
    2a44:	20 e0       	ldi	r18, 0x00	; 0
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	40 e2       	ldi	r20, 0x20	; 32
    2a4a:	51 e4       	ldi	r21, 0x41	; 65
    2a4c:	69 81       	ldd	r22, Y+1	; 0x01
    2a4e:	7a 81       	ldd	r23, Y+2	; 0x02
    2a50:	8b 81       	ldd	r24, Y+3	; 0x03
    2a52:	9c 81       	ldd	r25, Y+4	; 0x04
    2a54:	0e 94 c4 1c 	call	0x3988	; 0x3988 <__mulsf3>
    2a58:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <__fixsfsi>
    2a5c:	2b 01       	movw	r4, r22
    2a5e:	3c 01       	movw	r6, r24
    2a60:	65 01       	movw	r12, r10
    2a62:	9f ef       	ldi	r25, 0xFF	; 255
    2a64:	c9 1a       	sub	r12, r25
    2a66:	d9 0a       	sbc	r13, r25
    2a68:	80 e3       	ldi	r24, 0x30	; 48
    2a6a:	84 0d       	add	r24, r4
    2a6c:	f5 01       	movw	r30, r10
    2a6e:	80 83       	st	Z, r24
    2a70:	20 e0       	ldi	r18, 0x00	; 0
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	40 e2       	ldi	r20, 0x20	; 32
    2a76:	51 e4       	ldi	r21, 0x41	; 65
    2a78:	69 81       	ldd	r22, Y+1	; 0x01
    2a7a:	7a 81       	ldd	r23, Y+2	; 0x02
    2a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a80:	0e 94 c4 1c 	call	0x3988	; 0x3988 <__mulsf3>
    2a84:	4b 01       	movw	r8, r22
    2a86:	5c 01       	movw	r10, r24
    2a88:	b2 01       	movw	r22, r4
    2a8a:	55 0c       	add	r5, r5
    2a8c:	88 0b       	sbc	r24, r24
    2a8e:	99 0b       	sbc	r25, r25
    2a90:	0e 94 0f 1c 	call	0x381e	; 0x381e <__floatsisf>
    2a94:	9b 01       	movw	r18, r22
    2a96:	ac 01       	movw	r20, r24
    2a98:	c5 01       	movw	r24, r10
    2a9a:	b4 01       	movw	r22, r8
    2a9c:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <__subsf3>
    2aa0:	69 83       	std	Y+1, r22	; 0x01
    2aa2:	7a 83       	std	Y+2, r23	; 0x02
    2aa4:	8b 83       	std	Y+3, r24	; 0x03
    2aa6:	9c 83       	std	Y+4, r25	; 0x04
    2aa8:	0f 5f       	subi	r16, 0xFF	; 255
    2aaa:	1f 4f       	sbci	r17, 0xFF	; 255
    2aac:	f1 e0       	ldi	r31, 0x01	; 1
    2aae:	ef 1a       	sub	r14, r31
    2ab0:	f1 08       	sbc	r15, r1
    2ab2:	56 01       	movw	r10, r12
    2ab4:	1e 14       	cp	r1, r14
    2ab6:	1f 04       	cpc	r1, r15
    2ab8:	2c f2       	brlt	.-118    	; 0x2a44 <ftoa_fixed+0x9e>
    2aba:	01 15       	cp	r16, r1
    2abc:	11 05       	cpc	r17, r1
    2abe:	31 f4       	brne	.+12     	; 0x2acc <ftoa_fixed+0x126>
    2ac0:	80 e3       	ldi	r24, 0x30	; 48
    2ac2:	f5 01       	movw	r30, r10
    2ac4:	80 83       	st	Z, r24
    2ac6:	c5 01       	movw	r24, r10
    2ac8:	01 96       	adiw	r24, 0x01	; 1
    2aca:	5c 01       	movw	r10, r24
    2acc:	65 01       	movw	r12, r10
    2ace:	9f ef       	ldi	r25, 0xFF	; 255
    2ad0:	c9 1a       	sub	r12, r25
    2ad2:	d9 0a       	sbc	r13, r25
    2ad4:	8e e2       	ldi	r24, 0x2E	; 46
    2ad6:	f5 01       	movw	r30, r10
    2ad8:	80 83       	st	Z, r24
    2ada:	0b c0       	rjmp	.+22     	; 0x2af2 <ftoa_fixed+0x14c>
    2adc:	80 e3       	ldi	r24, 0x30	; 48
    2ade:	f6 01       	movw	r30, r12
    2ae0:	80 83       	st	Z, r24
    2ae2:	f1 e0       	ldi	r31, 0x01	; 1
    2ae4:	ef 1a       	sub	r14, r31
    2ae6:	f1 08       	sbc	r15, r1
    2ae8:	0f 5f       	subi	r16, 0xFF	; 255
    2aea:	1f 4f       	sbci	r17, 0xFF	; 255
    2aec:	c6 01       	movw	r24, r12
    2aee:	01 96       	adiw	r24, 0x01	; 1
    2af0:	6c 01       	movw	r12, r24
    2af2:	ff 20       	and	r15, r15
    2af4:	cc f5       	brge	.+114    	; 0x2b68 <ftoa_fixed+0x1c2>
    2af6:	04 30       	cpi	r16, 0x04	; 4
    2af8:	11 05       	cpc	r17, r1
    2afa:	84 f3       	brlt	.-32     	; 0x2adc <ftoa_fixed+0x136>
    2afc:	35 c0       	rjmp	.+106    	; 0x2b68 <ftoa_fixed+0x1c2>
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	40 e2       	ldi	r20, 0x20	; 32
    2b04:	51 e4       	ldi	r21, 0x41	; 65
    2b06:	69 81       	ldd	r22, Y+1	; 0x01
    2b08:	7a 81       	ldd	r23, Y+2	; 0x02
    2b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b0e:	0e 94 c4 1c 	call	0x3988	; 0x3988 <__mulsf3>
    2b12:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <__fixsfsi>
    2b16:	4b 01       	movw	r8, r22
    2b18:	5c 01       	movw	r10, r24
    2b1a:	76 01       	movw	r14, r12
    2b1c:	9f ef       	ldi	r25, 0xFF	; 255
    2b1e:	e9 1a       	sub	r14, r25
    2b20:	f9 0a       	sbc	r15, r25
    2b22:	80 e3       	ldi	r24, 0x30	; 48
    2b24:	88 0d       	add	r24, r8
    2b26:	f6 01       	movw	r30, r12
    2b28:	80 83       	st	Z, r24
    2b2a:	20 e0       	ldi	r18, 0x00	; 0
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
    2b2e:	40 e2       	ldi	r20, 0x20	; 32
    2b30:	51 e4       	ldi	r21, 0x41	; 65
    2b32:	69 81       	ldd	r22, Y+1	; 0x01
    2b34:	7a 81       	ldd	r23, Y+2	; 0x02
    2b36:	8b 81       	ldd	r24, Y+3	; 0x03
    2b38:	9c 81       	ldd	r25, Y+4	; 0x04
    2b3a:	0e 94 c4 1c 	call	0x3988	; 0x3988 <__mulsf3>
    2b3e:	2b 01       	movw	r4, r22
    2b40:	3c 01       	movw	r6, r24
    2b42:	b4 01       	movw	r22, r8
    2b44:	99 0c       	add	r9, r9
    2b46:	88 0b       	sbc	r24, r24
    2b48:	99 0b       	sbc	r25, r25
    2b4a:	0e 94 0f 1c 	call	0x381e	; 0x381e <__floatsisf>
    2b4e:	9b 01       	movw	r18, r22
    2b50:	ac 01       	movw	r20, r24
    2b52:	c3 01       	movw	r24, r6
    2b54:	b2 01       	movw	r22, r4
    2b56:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <__subsf3>
    2b5a:	69 83       	std	Y+1, r22	; 0x01
    2b5c:	7a 83       	std	Y+2, r23	; 0x02
    2b5e:	8b 83       	std	Y+3, r24	; 0x03
    2b60:	9c 83       	std	Y+4, r25	; 0x04
    2b62:	0f 5f       	subi	r16, 0xFF	; 255
    2b64:	1f 4f       	sbci	r17, 0xFF	; 255
    2b66:	67 01       	movw	r12, r14
    2b68:	04 30       	cpi	r16, 0x04	; 4
    2b6a:	11 05       	cpc	r17, r1
    2b6c:	44 f2       	brlt	.-112    	; 0x2afe <ftoa_fixed+0x158>
    2b6e:	f6 01       	movw	r30, r12
    2b70:	10 82       	st	Z, r1
    2b72:	24 96       	adiw	r28, 0x04	; 4
    2b74:	cd bf       	out	0x3d, r28	; 61
    2b76:	de bf       	out	0x3e, r29	; 62
    2b78:	df 91       	pop	r29
    2b7a:	cf 91       	pop	r28
    2b7c:	1f 91       	pop	r17
    2b7e:	0f 91       	pop	r16
    2b80:	ff 90       	pop	r15
    2b82:	ef 90       	pop	r14
    2b84:	df 90       	pop	r13
    2b86:	cf 90       	pop	r12
    2b88:	bf 90       	pop	r11
    2b8a:	af 90       	pop	r10
    2b8c:	9f 90       	pop	r9
    2b8e:	8f 90       	pop	r8
    2b90:	7f 90       	pop	r7
    2b92:	6f 90       	pop	r6
    2b94:	5f 90       	pop	r5
    2b96:	4f 90       	pop	r4
    2b98:	08 95       	ret

00002b9a <ftoa_sci>:
    2b9a:	2f 92       	push	r2
    2b9c:	3f 92       	push	r3
    2b9e:	4f 92       	push	r4
    2ba0:	5f 92       	push	r5
    2ba2:	6f 92       	push	r6
    2ba4:	7f 92       	push	r7
    2ba6:	8f 92       	push	r8
    2ba8:	9f 92       	push	r9
    2baa:	af 92       	push	r10
    2bac:	bf 92       	push	r11
    2bae:	cf 92       	push	r12
    2bb0:	df 92       	push	r13
    2bb2:	ef 92       	push	r14
    2bb4:	ff 92       	push	r15
    2bb6:	0f 93       	push	r16
    2bb8:	1f 93       	push	r17
    2bba:	cf 93       	push	r28
    2bbc:	df 93       	push	r29
    2bbe:	cd b7       	in	r28, 0x3d	; 61
    2bc0:	de b7       	in	r29, 0x3e	; 62
    2bc2:	28 97       	sbiw	r28, 0x08	; 8
    2bc4:	cd bf       	out	0x3d, r28	; 61
    2bc6:	de bf       	out	0x3e, r29	; 62
    2bc8:	7c 01       	movw	r14, r24
    2bca:	c4 2e       	mov	r12, r20
    2bcc:	d5 2e       	mov	r13, r21
    2bce:	06 2f       	mov	r16, r22
    2bd0:	17 2f       	mov	r17, r23
    2bd2:	49 83       	std	Y+1, r20	; 0x01
    2bd4:	5a 83       	std	Y+2, r21	; 0x02
    2bd6:	6b 83       	std	Y+3, r22	; 0x03
    2bd8:	7c 83       	std	Y+4, r23	; 0x04
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	a9 01       	movw	r20, r18
    2be0:	6c 2d       	mov	r22, r12
    2be2:	7d 2d       	mov	r23, r13
    2be4:	80 2f       	mov	r24, r16
    2be6:	91 2f       	mov	r25, r17
    2be8:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <__cmpsf2>
    2bec:	81 11       	cpse	r24, r1
    2bee:	05 c0       	rjmp	.+10     	; 0x2bfa <ftoa_sci+0x60>
    2bf0:	80 e3       	ldi	r24, 0x30	; 48
    2bf2:	f7 01       	movw	r30, r14
    2bf4:	80 83       	st	Z, r24
    2bf6:	11 82       	std	Z+1, r1	; 0x01
    2bf8:	a2 c0       	rjmp	.+324    	; 0x2d3e <ftoa_sci+0x1a4>
    2bfa:	20 e0       	ldi	r18, 0x00	; 0
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	a9 01       	movw	r20, r18
    2c00:	6c 2d       	mov	r22, r12
    2c02:	7d 2d       	mov	r23, r13
    2c04:	80 2f       	mov	r24, r16
    2c06:	91 2f       	mov	r25, r17
    2c08:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <__cmpsf2>
    2c0c:	88 23       	and	r24, r24
    2c0e:	7c f4       	brge	.+30     	; 0x2c2e <ftoa_sci+0x94>
    2c10:	8d e2       	ldi	r24, 0x2D	; 45
    2c12:	f7 01       	movw	r30, r14
    2c14:	80 83       	st	Z, r24
    2c16:	89 81       	ldd	r24, Y+1	; 0x01
    2c18:	9a 81       	ldd	r25, Y+2	; 0x02
    2c1a:	ab 81       	ldd	r26, Y+3	; 0x03
    2c1c:	bc 81       	ldd	r27, Y+4	; 0x04
    2c1e:	b0 58       	subi	r27, 0x80	; 128
    2c20:	89 83       	std	Y+1, r24	; 0x01
    2c22:	9a 83       	std	Y+2, r25	; 0x02
    2c24:	ab 83       	std	Y+3, r26	; 0x03
    2c26:	bc 83       	std	Y+4, r27	; 0x04
    2c28:	c7 01       	movw	r24, r14
    2c2a:	01 96       	adiw	r24, 0x01	; 1
    2c2c:	7c 01       	movw	r14, r24
    2c2e:	ce 01       	movw	r24, r28
    2c30:	01 96       	adiw	r24, 0x01	; 1
    2c32:	0e 94 88 14 	call	0x2910	; 0x2910 <normalize>
    2c36:	5c 01       	movw	r10, r24
    2c38:	20 e0       	ldi	r18, 0x00	; 0
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	40 e2       	ldi	r20, 0x20	; 32
    2c3e:	51 e4       	ldi	r21, 0x41	; 65
    2c40:	69 81       	ldd	r22, Y+1	; 0x01
    2c42:	7a 81       	ldd	r23, Y+2	; 0x02
    2c44:	8b 81       	ldd	r24, Y+3	; 0x03
    2c46:	9c 81       	ldd	r25, Y+4	; 0x04
    2c48:	0e 94 c4 1c 	call	0x3988	; 0x3988 <__mulsf3>
    2c4c:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <__fixsfsi>
    2c50:	2b 01       	movw	r4, r22
    2c52:	3c 01       	movw	r6, r24
    2c54:	80 e3       	ldi	r24, 0x30	; 48
    2c56:	84 0d       	add	r24, r4
    2c58:	f7 01       	movw	r30, r14
    2c5a:	80 83       	st	Z, r24
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	40 e2       	ldi	r20, 0x20	; 32
    2c62:	51 e4       	ldi	r21, 0x41	; 65
    2c64:	69 81       	ldd	r22, Y+1	; 0x01
    2c66:	7a 81       	ldd	r23, Y+2	; 0x02
    2c68:	8b 81       	ldd	r24, Y+3	; 0x03
    2c6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c6c:	0e 94 c4 1c 	call	0x3988	; 0x3988 <__mulsf3>
    2c70:	6d 83       	std	Y+5, r22	; 0x05
    2c72:	7e 83       	std	Y+6, r23	; 0x06
    2c74:	8f 83       	std	Y+7, r24	; 0x07
    2c76:	98 87       	std	Y+8, r25	; 0x08
    2c78:	b2 01       	movw	r22, r4
    2c7a:	55 0c       	add	r5, r5
    2c7c:	88 0b       	sbc	r24, r24
    2c7e:	99 0b       	sbc	r25, r25
    2c80:	0e 94 0f 1c 	call	0x381e	; 0x381e <__floatsisf>
    2c84:	9b 01       	movw	r18, r22
    2c86:	ac 01       	movw	r20, r24
    2c88:	6d 81       	ldd	r22, Y+5	; 0x05
    2c8a:	7e 81       	ldd	r23, Y+6	; 0x06
    2c8c:	8f 81       	ldd	r24, Y+7	; 0x07
    2c8e:	98 85       	ldd	r25, Y+8	; 0x08
    2c90:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <__subsf3>
    2c94:	69 83       	std	Y+1, r22	; 0x01
    2c96:	7a 83       	std	Y+2, r23	; 0x02
    2c98:	8b 83       	std	Y+3, r24	; 0x03
    2c9a:	9c 83       	std	Y+4, r25	; 0x04
    2c9c:	15 01       	movw	r2, r10
    2c9e:	f1 e0       	ldi	r31, 0x01	; 1
    2ca0:	2f 1a       	sub	r2, r31
    2ca2:	31 08       	sbc	r3, r1
    2ca4:	87 01       	movw	r16, r14
    2ca6:	0e 5f       	subi	r16, 0xFE	; 254
    2ca8:	1f 4f       	sbci	r17, 0xFF	; 255
    2caa:	8e e2       	ldi	r24, 0x2E	; 46
    2cac:	f7 01       	movw	r30, r14
    2cae:	81 83       	std	Z+1, r24	; 0x01
    2cb0:	e1 2c       	mov	r14, r1
    2cb2:	f1 2c       	mov	r15, r1
    2cb4:	36 c0       	rjmp	.+108    	; 0x2d22 <ftoa_sci+0x188>
    2cb6:	20 e0       	ldi	r18, 0x00	; 0
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	40 e2       	ldi	r20, 0x20	; 32
    2cbc:	51 e4       	ldi	r21, 0x41	; 65
    2cbe:	69 81       	ldd	r22, Y+1	; 0x01
    2cc0:	7a 81       	ldd	r23, Y+2	; 0x02
    2cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc4:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc6:	0e 94 c4 1c 	call	0x3988	; 0x3988 <__mulsf3>
    2cca:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <__fixsfsi>
    2cce:	2b 01       	movw	r4, r22
    2cd0:	3c 01       	movw	r6, r24
    2cd2:	68 01       	movw	r12, r16
    2cd4:	ff ef       	ldi	r31, 0xFF	; 255
    2cd6:	cf 1a       	sub	r12, r31
    2cd8:	df 0a       	sbc	r13, r31
    2cda:	80 e3       	ldi	r24, 0x30	; 48
    2cdc:	84 0d       	add	r24, r4
    2cde:	f8 01       	movw	r30, r16
    2ce0:	80 83       	st	Z, r24
    2ce2:	20 e0       	ldi	r18, 0x00	; 0
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
    2ce6:	40 e2       	ldi	r20, 0x20	; 32
    2ce8:	51 e4       	ldi	r21, 0x41	; 65
    2cea:	69 81       	ldd	r22, Y+1	; 0x01
    2cec:	7a 81       	ldd	r23, Y+2	; 0x02
    2cee:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf2:	0e 94 c4 1c 	call	0x3988	; 0x3988 <__mulsf3>
    2cf6:	4b 01       	movw	r8, r22
    2cf8:	5c 01       	movw	r10, r24
    2cfa:	b2 01       	movw	r22, r4
    2cfc:	55 0c       	add	r5, r5
    2cfe:	88 0b       	sbc	r24, r24
    2d00:	99 0b       	sbc	r25, r25
    2d02:	0e 94 0f 1c 	call	0x381e	; 0x381e <__floatsisf>
    2d06:	9b 01       	movw	r18, r22
    2d08:	ac 01       	movw	r20, r24
    2d0a:	c5 01       	movw	r24, r10
    2d0c:	b4 01       	movw	r22, r8
    2d0e:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <__subsf3>
    2d12:	69 83       	std	Y+1, r22	; 0x01
    2d14:	7a 83       	std	Y+2, r23	; 0x02
    2d16:	8b 83       	std	Y+3, r24	; 0x03
    2d18:	9c 83       	std	Y+4, r25	; 0x04
    2d1a:	ff ef       	ldi	r31, 0xFF	; 255
    2d1c:	ef 1a       	sub	r14, r31
    2d1e:	ff 0a       	sbc	r15, r31
    2d20:	86 01       	movw	r16, r12
    2d22:	84 e0       	ldi	r24, 0x04	; 4
    2d24:	e8 16       	cp	r14, r24
    2d26:	f1 04       	cpc	r15, r1
    2d28:	34 f2       	brlt	.-116    	; 0x2cb6 <ftoa_sci+0x11c>
    2d2a:	b8 01       	movw	r22, r16
    2d2c:	6f 5f       	subi	r22, 0xFF	; 255
    2d2e:	7f 4f       	sbci	r23, 0xFF	; 255
    2d30:	85 e6       	ldi	r24, 0x65	; 101
    2d32:	f8 01       	movw	r30, r16
    2d34:	80 83       	st	Z, r24
    2d36:	4a e0       	ldi	r20, 0x0A	; 10
    2d38:	c1 01       	movw	r24, r2
    2d3a:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <__itoa_ncheck>
    2d3e:	28 96       	adiw	r28, 0x08	; 8
    2d40:	cd bf       	out	0x3d, r28	; 61
    2d42:	de bf       	out	0x3e, r29	; 62
    2d44:	df 91       	pop	r29
    2d46:	cf 91       	pop	r28
    2d48:	1f 91       	pop	r17
    2d4a:	0f 91       	pop	r16
    2d4c:	ff 90       	pop	r15
    2d4e:	ef 90       	pop	r14
    2d50:	df 90       	pop	r13
    2d52:	cf 90       	pop	r12
    2d54:	bf 90       	pop	r11
    2d56:	af 90       	pop	r10
    2d58:	9f 90       	pop	r9
    2d5a:	8f 90       	pop	r8
    2d5c:	7f 90       	pop	r7
    2d5e:	6f 90       	pop	r6
    2d60:	5f 90       	pop	r5
    2d62:	4f 90       	pop	r4
    2d64:	3f 90       	pop	r3
    2d66:	2f 90       	pop	r2
    2d68:	08 95       	ret

00002d6a <display_vprintf>:
    2d6a:	6f 92       	push	r6
    2d6c:	7f 92       	push	r7
    2d6e:	8f 92       	push	r8
    2d70:	9f 92       	push	r9
    2d72:	bf 92       	push	r11
    2d74:	cf 92       	push	r12
    2d76:	df 92       	push	r13
    2d78:	ef 92       	push	r14
    2d7a:	ff 92       	push	r15
    2d7c:	0f 93       	push	r16
    2d7e:	1f 93       	push	r17
    2d80:	cf 93       	push	r28
    2d82:	df 93       	push	r29
    2d84:	cd b7       	in	r28, 0x3d	; 61
    2d86:	de b7       	in	r29, 0x3e	; 62
    2d88:	66 97       	sbiw	r28, 0x16	; 22
    2d8a:	cd bf       	out	0x3d, r28	; 61
    2d8c:	de bf       	out	0x3e, r29	; 62
    2d8e:	b8 2e       	mov	r11, r24
    2d90:	8b 01       	movw	r16, r22
    2d92:	da 01       	movw	r26, r20
    2d94:	39 01       	movw	r6, r18
    2d96:	80 e0       	ldi	r24, 0x00	; 0
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	05 c0       	rjmp	.+10     	; 0x2da6 <display_vprintf+0x3c>
    2d9c:	fc 01       	movw	r30, r24
    2d9e:	e2 53       	subi	r30, 0x32	; 50
    2da0:	ff 4c       	sbci	r31, 0xCF	; 207
    2da2:	10 82       	st	Z, r1
    2da4:	01 96       	adiw	r24, 0x01	; 1
    2da6:	84 31       	cpi	r24, 0x14	; 20
    2da8:	91 05       	cpc	r25, r1
    2daa:	c4 f3       	brlt	.-16     	; 0x2d9c <display_vprintf+0x32>
    2dac:	80 e0       	ldi	r24, 0x00	; 0
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	05 c0       	rjmp	.+10     	; 0x2dbc <display_vprintf+0x52>
    2db2:	fc 01       	movw	r30, r24
    2db4:	e6 54       	subi	r30, 0x46	; 70
    2db6:	ff 4c       	sbci	r31, 0xCF	; 207
    2db8:	10 82       	st	Z, r1
    2dba:	01 96       	adiw	r24, 0x01	; 1
    2dbc:	84 31       	cpi	r24, 0x14	; 20
    2dbe:	91 05       	cpc	r25, r1
    2dc0:	c4 f3       	brlt	.-16     	; 0x2db2 <display_vprintf+0x48>
    2dc2:	e1 2c       	mov	r14, r1
    2dc4:	f1 2c       	mov	r15, r1
    2dc6:	14 c1       	rjmp	.+552    	; 0x2ff0 <display_vprintf+0x286>
    2dc8:	85 32       	cpi	r24, 0x25	; 37
    2dca:	09 f0       	breq	.+2      	; 0x2dce <display_vprintf+0x64>
    2dcc:	01 c1       	rjmp	.+514    	; 0x2fd0 <display_vprintf+0x266>
    2dce:	6d 01       	movw	r12, r26
    2dd0:	82 e0       	ldi	r24, 0x02	; 2
    2dd2:	c8 0e       	add	r12, r24
    2dd4:	d1 1c       	adc	r13, r1
    2dd6:	11 96       	adiw	r26, 0x01	; 1
    2dd8:	8c 91       	ld	r24, X
    2dda:	85 36       	cpi	r24, 0x65	; 101
    2ddc:	09 f4       	brne	.+2      	; 0x2de0 <display_vprintf+0x76>
    2dde:	cd c0       	rjmp	.+410    	; 0x2f7a <display_vprintf+0x210>
    2de0:	38 f4       	brcc	.+14     	; 0x2df0 <display_vprintf+0x86>
    2de2:	83 36       	cpi	r24, 0x63	; 99
    2de4:	c1 f0       	breq	.+48     	; 0x2e16 <display_vprintf+0xac>
    2de6:	08 f0       	brcs	.+2      	; 0x2dea <display_vprintf+0x80>
    2de8:	49 c0       	rjmp	.+146    	; 0x2e7c <display_vprintf+0x112>
    2dea:	85 32       	cpi	r24, 0x25	; 37
    2dec:	51 f0       	breq	.+20     	; 0x2e02 <display_vprintf+0x98>
    2dee:	ff c0       	rjmp	.+510    	; 0x2fee <display_vprintf+0x284>
    2df0:	83 37       	cpi	r24, 0x73	; 115
    2df2:	f9 f0       	breq	.+62     	; 0x2e32 <display_vprintf+0xc8>
    2df4:	88 37       	cpi	r24, 0x78	; 120
    2df6:	09 f4       	brne	.+2      	; 0x2dfa <display_vprintf+0x90>
    2df8:	6b c0       	rjmp	.+214    	; 0x2ed0 <display_vprintf+0x166>
    2dfa:	86 36       	cpi	r24, 0x66	; 102
    2dfc:	09 f0       	breq	.+2      	; 0x2e00 <display_vprintf+0x96>
    2dfe:	f7 c0       	rjmp	.+494    	; 0x2fee <display_vprintf+0x284>
    2e00:	91 c0       	rjmp	.+290    	; 0x2f24 <display_vprintf+0x1ba>
    2e02:	d7 01       	movw	r26, r14
    2e04:	a6 54       	subi	r26, 0x46	; 70
    2e06:	bf 4c       	sbci	r27, 0xCF	; 207
    2e08:	85 e2       	ldi	r24, 0x25	; 37
    2e0a:	8c 93       	st	X, r24
    2e0c:	9f ef       	ldi	r25, 0xFF	; 255
    2e0e:	e9 1a       	sub	r14, r25
    2e10:	f9 0a       	sbc	r15, r25
    2e12:	d6 01       	movw	r26, r12
    2e14:	ed c0       	rjmp	.+474    	; 0x2ff0 <display_vprintf+0x286>
    2e16:	f3 01       	movw	r30, r6
    2e18:	80 81       	ld	r24, Z
    2e1a:	d7 01       	movw	r26, r14
    2e1c:	a6 54       	subi	r26, 0x46	; 70
    2e1e:	bf 4c       	sbci	r27, 0xCF	; 207
    2e20:	8c 93       	st	X, r24
    2e22:	ff ef       	ldi	r31, 0xFF	; 255
    2e24:	ef 1a       	sub	r14, r31
    2e26:	ff 0a       	sbc	r15, r31
    2e28:	c3 01       	movw	r24, r6
    2e2a:	02 96       	adiw	r24, 0x02	; 2
    2e2c:	3c 01       	movw	r6, r24
    2e2e:	d6 01       	movw	r26, r12
    2e30:	df c0       	rjmp	.+446    	; 0x2ff0 <display_vprintf+0x286>
    2e32:	93 01       	movw	r18, r6
    2e34:	2e 5f       	subi	r18, 0xFE	; 254
    2e36:	3f 4f       	sbci	r19, 0xFF	; 255
    2e38:	f3 01       	movw	r30, r6
    2e3a:	a0 81       	ld	r26, Z
    2e3c:	b1 81       	ldd	r27, Z+1	; 0x01
    2e3e:	80 e0       	ldi	r24, 0x00	; 0
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	0d c0       	rjmp	.+26     	; 0x2e5e <display_vprintf+0xf4>
    2e44:	b7 01       	movw	r22, r14
    2e46:	68 0f       	add	r22, r24
    2e48:	79 1f       	adc	r23, r25
    2e4a:	ad 01       	movw	r20, r26
    2e4c:	48 0f       	add	r20, r24
    2e4e:	59 1f       	adc	r21, r25
    2e50:	fa 01       	movw	r30, r20
    2e52:	40 81       	ld	r20, Z
    2e54:	fb 01       	movw	r30, r22
    2e56:	e6 54       	subi	r30, 0x46	; 70
    2e58:	ff 4c       	sbci	r31, 0xCF	; 207
    2e5a:	40 83       	st	Z, r20
    2e5c:	01 96       	adiw	r24, 0x01	; 1
    2e5e:	fd 01       	movw	r30, r26
    2e60:	01 90       	ld	r0, Z+
    2e62:	00 20       	and	r0, r0
    2e64:	e9 f7       	brne	.-6      	; 0x2e60 <display_vprintf+0xf6>
    2e66:	31 97       	sbiw	r30, 0x01	; 1
    2e68:	ea 1b       	sub	r30, r26
    2e6a:	fb 0b       	sbc	r31, r27
    2e6c:	8e 17       	cp	r24, r30
    2e6e:	9f 07       	cpc	r25, r31
    2e70:	48 f3       	brcs	.-46     	; 0x2e44 <display_vprintf+0xda>
    2e72:	ee 0e       	add	r14, r30
    2e74:	ff 1e       	adc	r15, r31
    2e76:	39 01       	movw	r6, r18
    2e78:	d6 01       	movw	r26, r12
    2e7a:	ba c0       	rjmp	.+372    	; 0x2ff0 <display_vprintf+0x286>
    2e7c:	43 01       	movw	r8, r6
    2e7e:	f2 e0       	ldi	r31, 0x02	; 2
    2e80:	8f 0e       	add	r8, r31
    2e82:	91 1c       	adc	r9, r1
    2e84:	4a e0       	ldi	r20, 0x0A	; 10
    2e86:	6e ec       	ldi	r22, 0xCE	; 206
    2e88:	70 e3       	ldi	r23, 0x30	; 48
    2e8a:	f3 01       	movw	r30, r6
    2e8c:	80 81       	ld	r24, Z
    2e8e:	91 81       	ldd	r25, Z+1	; 0x01
    2e90:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <__itoa_ncheck>
    2e94:	80 e0       	ldi	r24, 0x00	; 0
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	0b c0       	rjmp	.+22     	; 0x2eb0 <display_vprintf+0x146>
    2e9a:	f7 01       	movw	r30, r14
    2e9c:	e8 0f       	add	r30, r24
    2e9e:	f9 1f       	adc	r31, r25
    2ea0:	dc 01       	movw	r26, r24
    2ea2:	a2 53       	subi	r26, 0x32	; 50
    2ea4:	bf 4c       	sbci	r27, 0xCF	; 207
    2ea6:	2c 91       	ld	r18, X
    2ea8:	e6 54       	subi	r30, 0x46	; 70
    2eaa:	ff 4c       	sbci	r31, 0xCF	; 207
    2eac:	20 83       	st	Z, r18
    2eae:	01 96       	adiw	r24, 0x01	; 1
    2eb0:	ee ec       	ldi	r30, 0xCE	; 206
    2eb2:	f0 e3       	ldi	r31, 0x30	; 48
    2eb4:	01 90       	ld	r0, Z+
    2eb6:	00 20       	and	r0, r0
    2eb8:	e9 f7       	brne	.-6      	; 0x2eb4 <display_vprintf+0x14a>
    2eba:	31 97       	sbiw	r30, 0x01	; 1
    2ebc:	ee 5c       	subi	r30, 0xCE	; 206
    2ebe:	f0 43       	sbci	r31, 0x30	; 48
    2ec0:	8e 17       	cp	r24, r30
    2ec2:	9f 07       	cpc	r25, r31
    2ec4:	50 f3       	brcs	.-44     	; 0x2e9a <display_vprintf+0x130>
    2ec6:	ee 0e       	add	r14, r30
    2ec8:	ff 1e       	adc	r15, r31
    2eca:	34 01       	movw	r6, r8
    2ecc:	d6 01       	movw	r26, r12
    2ece:	90 c0       	rjmp	.+288    	; 0x2ff0 <display_vprintf+0x286>
    2ed0:	43 01       	movw	r8, r6
    2ed2:	f2 e0       	ldi	r31, 0x02	; 2
    2ed4:	8f 0e       	add	r8, r31
    2ed6:	91 1c       	adc	r9, r1
    2ed8:	40 e1       	ldi	r20, 0x10	; 16
    2eda:	6e ec       	ldi	r22, 0xCE	; 206
    2edc:	70 e3       	ldi	r23, 0x30	; 48
    2ede:	f3 01       	movw	r30, r6
    2ee0:	80 81       	ld	r24, Z
    2ee2:	91 81       	ldd	r25, Z+1	; 0x01
    2ee4:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <__itoa_ncheck>
    2ee8:	80 e0       	ldi	r24, 0x00	; 0
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	0b c0       	rjmp	.+22     	; 0x2f04 <display_vprintf+0x19a>
    2eee:	f7 01       	movw	r30, r14
    2ef0:	e8 0f       	add	r30, r24
    2ef2:	f9 1f       	adc	r31, r25
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	a2 53       	subi	r26, 0x32	; 50
    2ef8:	bf 4c       	sbci	r27, 0xCF	; 207
    2efa:	2c 91       	ld	r18, X
    2efc:	e6 54       	subi	r30, 0x46	; 70
    2efe:	ff 4c       	sbci	r31, 0xCF	; 207
    2f00:	20 83       	st	Z, r18
    2f02:	01 96       	adiw	r24, 0x01	; 1
    2f04:	ee ec       	ldi	r30, 0xCE	; 206
    2f06:	f0 e3       	ldi	r31, 0x30	; 48
    2f08:	01 90       	ld	r0, Z+
    2f0a:	00 20       	and	r0, r0
    2f0c:	e9 f7       	brne	.-6      	; 0x2f08 <display_vprintf+0x19e>
    2f0e:	31 97       	sbiw	r30, 0x01	; 1
    2f10:	ee 5c       	subi	r30, 0xCE	; 206
    2f12:	f0 43       	sbci	r31, 0x30	; 48
    2f14:	8e 17       	cp	r24, r30
    2f16:	9f 07       	cpc	r25, r31
    2f18:	50 f3       	brcs	.-44     	; 0x2eee <display_vprintf+0x184>
    2f1a:	ee 0e       	add	r14, r30
    2f1c:	ff 1e       	adc	r15, r31
    2f1e:	34 01       	movw	r6, r8
    2f20:	d6 01       	movw	r26, r12
    2f22:	66 c0       	rjmp	.+204    	; 0x2ff0 <display_vprintf+0x286>
    2f24:	43 01       	movw	r8, r6
    2f26:	f4 e0       	ldi	r31, 0x04	; 4
    2f28:	8f 0e       	add	r8, r31
    2f2a:	91 1c       	adc	r9, r1
    2f2c:	f3 01       	movw	r30, r6
    2f2e:	40 81       	ld	r20, Z
    2f30:	51 81       	ldd	r21, Z+1	; 0x01
    2f32:	62 81       	ldd	r22, Z+2	; 0x02
    2f34:	73 81       	ldd	r23, Z+3	; 0x03
    2f36:	8e ec       	ldi	r24, 0xCE	; 206
    2f38:	90 e3       	ldi	r25, 0x30	; 48
    2f3a:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <ftoa_fixed>
    2f3e:	80 e0       	ldi	r24, 0x00	; 0
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	0b c0       	rjmp	.+22     	; 0x2f5a <display_vprintf+0x1f0>
    2f44:	f7 01       	movw	r30, r14
    2f46:	e8 0f       	add	r30, r24
    2f48:	f9 1f       	adc	r31, r25
    2f4a:	dc 01       	movw	r26, r24
    2f4c:	a2 53       	subi	r26, 0x32	; 50
    2f4e:	bf 4c       	sbci	r27, 0xCF	; 207
    2f50:	2c 91       	ld	r18, X
    2f52:	e6 54       	subi	r30, 0x46	; 70
    2f54:	ff 4c       	sbci	r31, 0xCF	; 207
    2f56:	20 83       	st	Z, r18
    2f58:	01 96       	adiw	r24, 0x01	; 1
    2f5a:	ee ec       	ldi	r30, 0xCE	; 206
    2f5c:	f0 e3       	ldi	r31, 0x30	; 48
    2f5e:	01 90       	ld	r0, Z+
    2f60:	00 20       	and	r0, r0
    2f62:	e9 f7       	brne	.-6      	; 0x2f5e <display_vprintf+0x1f4>
    2f64:	31 97       	sbiw	r30, 0x01	; 1
    2f66:	ee 5c       	subi	r30, 0xCE	; 206
    2f68:	f0 43       	sbci	r31, 0x30	; 48
    2f6a:	8e 17       	cp	r24, r30
    2f6c:	9f 07       	cpc	r25, r31
    2f6e:	50 f3       	brcs	.-44     	; 0x2f44 <display_vprintf+0x1da>
    2f70:	ee 0e       	add	r14, r30
    2f72:	ff 1e       	adc	r15, r31
    2f74:	34 01       	movw	r6, r8
    2f76:	d6 01       	movw	r26, r12
    2f78:	3b c0       	rjmp	.+118    	; 0x2ff0 <display_vprintf+0x286>
    2f7a:	43 01       	movw	r8, r6
    2f7c:	f4 e0       	ldi	r31, 0x04	; 4
    2f7e:	8f 0e       	add	r8, r31
    2f80:	91 1c       	adc	r9, r1
    2f82:	f3 01       	movw	r30, r6
    2f84:	40 81       	ld	r20, Z
    2f86:	51 81       	ldd	r21, Z+1	; 0x01
    2f88:	62 81       	ldd	r22, Z+2	; 0x02
    2f8a:	73 81       	ldd	r23, Z+3	; 0x03
    2f8c:	8e ec       	ldi	r24, 0xCE	; 206
    2f8e:	90 e3       	ldi	r25, 0x30	; 48
    2f90:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <ftoa_sci>
    2f94:	80 e0       	ldi	r24, 0x00	; 0
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	0b c0       	rjmp	.+22     	; 0x2fb0 <display_vprintf+0x246>
    2f9a:	f7 01       	movw	r30, r14
    2f9c:	e8 0f       	add	r30, r24
    2f9e:	f9 1f       	adc	r31, r25
    2fa0:	dc 01       	movw	r26, r24
    2fa2:	a2 53       	subi	r26, 0x32	; 50
    2fa4:	bf 4c       	sbci	r27, 0xCF	; 207
    2fa6:	2c 91       	ld	r18, X
    2fa8:	e6 54       	subi	r30, 0x46	; 70
    2faa:	ff 4c       	sbci	r31, 0xCF	; 207
    2fac:	20 83       	st	Z, r18
    2fae:	01 96       	adiw	r24, 0x01	; 1
    2fb0:	ee ec       	ldi	r30, 0xCE	; 206
    2fb2:	f0 e3       	ldi	r31, 0x30	; 48
    2fb4:	01 90       	ld	r0, Z+
    2fb6:	00 20       	and	r0, r0
    2fb8:	e9 f7       	brne	.-6      	; 0x2fb4 <display_vprintf+0x24a>
    2fba:	31 97       	sbiw	r30, 0x01	; 1
    2fbc:	ee 5c       	subi	r30, 0xCE	; 206
    2fbe:	f0 43       	sbci	r31, 0x30	; 48
    2fc0:	8e 17       	cp	r24, r30
    2fc2:	9f 07       	cpc	r25, r31
    2fc4:	50 f3       	brcs	.-44     	; 0x2f9a <display_vprintf+0x230>
    2fc6:	ee 0e       	add	r14, r30
    2fc8:	ff 1e       	adc	r15, r31
    2fca:	34 01       	movw	r6, r8
    2fcc:	d6 01       	movw	r26, r12
    2fce:	10 c0       	rjmp	.+32     	; 0x2ff0 <display_vprintf+0x286>
    2fd0:	d7 01       	movw	r26, r14
    2fd2:	a6 54       	subi	r26, 0x46	; 70
    2fd4:	bf 4c       	sbci	r27, 0xCF	; 207
    2fd6:	8c 93       	st	X, r24
    2fd8:	8a 30       	cpi	r24, 0x0A	; 10
    2fda:	21 f4       	brne	.+8      	; 0x2fe4 <display_vprintf+0x27a>
    2fdc:	d7 01       	movw	r26, r14
    2fde:	a6 54       	subi	r26, 0x46	; 70
    2fe0:	bf 4c       	sbci	r27, 0xCF	; 207
    2fe2:	1c 92       	st	X, r1
    2fe4:	ff ef       	ldi	r31, 0xFF	; 255
    2fe6:	ef 1a       	sub	r14, r31
    2fe8:	ff 0a       	sbc	r15, r31
    2fea:	d9 01       	movw	r26, r18
    2fec:	01 c0       	rjmp	.+2      	; 0x2ff0 <display_vprintf+0x286>
    2fee:	d6 01       	movw	r26, r12
    2ff0:	9d 01       	movw	r18, r26
    2ff2:	2f 5f       	subi	r18, 0xFF	; 255
    2ff4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ff6:	8c 91       	ld	r24, X
    2ff8:	81 11       	cpse	r24, r1
    2ffa:	e6 ce       	rjmp	.-564    	; 0x2dc8 <display_vprintf+0x5e>
    2ffc:	c7 01       	movw	r24, r14
    2ffe:	80 0f       	add	r24, r16
    3000:	91 1f       	adc	r25, r17
    3002:	44 97       	sbiw	r24, 0x14	; 20
    3004:	2c f0       	brlt	.+10     	; 0x3010 <display_vprintf+0x2a6>
    3006:	84 e1       	ldi	r24, 0x14	; 20
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	7c 01       	movw	r14, r24
    300c:	e0 1a       	sub	r14, r16
    300e:	f1 0a       	sbc	r15, r17
    3010:	80 e0       	ldi	r24, 0x00	; 0
    3012:	90 e0       	ldi	r25, 0x00	; 0
    3014:	08 c0       	rjmp	.+16     	; 0x3026 <display_vprintf+0x2bc>
    3016:	e3 e0       	ldi	r30, 0x03	; 3
    3018:	f0 e0       	ldi	r31, 0x00	; 0
    301a:	ec 0f       	add	r30, r28
    301c:	fd 1f       	adc	r31, r29
    301e:	e8 0f       	add	r30, r24
    3020:	f9 1f       	adc	r31, r25
    3022:	10 82       	st	Z, r1
    3024:	01 96       	adiw	r24, 0x01	; 1
    3026:	84 31       	cpi	r24, 0x14	; 20
    3028:	91 05       	cpc	r25, r1
    302a:	ac f3       	brlt	.-22     	; 0x3016 <display_vprintf+0x2ac>
    302c:	b9 82       	std	Y+1, r11	; 0x01
    302e:	0a 83       	std	Y+2, r16	; 0x02
    3030:	80 e0       	ldi	r24, 0x00	; 0
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	0c c0       	rjmp	.+24     	; 0x304e <display_vprintf+0x2e4>
    3036:	fc 01       	movw	r30, r24
    3038:	e6 54       	subi	r30, 0x46	; 70
    303a:	ff 4c       	sbci	r31, 0xCF	; 207
    303c:	20 81       	ld	r18, Z
    303e:	e3 e0       	ldi	r30, 0x03	; 3
    3040:	f0 e0       	ldi	r31, 0x00	; 0
    3042:	ec 0f       	add	r30, r28
    3044:	fd 1f       	adc	r31, r29
    3046:	e8 0f       	add	r30, r24
    3048:	f9 1f       	adc	r31, r25
    304a:	20 83       	st	Z, r18
    304c:	01 96       	adiw	r24, 0x01	; 1
    304e:	8e 15       	cp	r24, r14
    3050:	9f 05       	cpc	r25, r15
    3052:	8c f3       	brlt	.-30     	; 0x3036 <display_vprintf+0x2cc>
    3054:	00 e0       	ldi	r16, 0x00	; 0
    3056:	2f ef       	ldi	r18, 0xFF	; 255
    3058:	3f ef       	ldi	r19, 0xFF	; 255
    305a:	a9 01       	movw	r20, r18
    305c:	be 01       	movw	r22, r28
    305e:	6f 5f       	subi	r22, 0xFF	; 255
    3060:	7f 4f       	sbci	r23, 0xFF	; 255
    3062:	80 91 e7 30 	lds	r24, 0x30E7	; 0x8030e7 <displayLineQueue>
    3066:	90 91 e8 30 	lds	r25, 0x30E8	; 0x8030e8 <displayLineQueue+0x1>
    306a:	0e 94 df 07 	call	0xfbe	; 0xfbe <xQueueGenericSend>
    306e:	c7 01       	movw	r24, r14
    3070:	66 96       	adiw	r28, 0x16	; 22
    3072:	cd bf       	out	0x3d, r28	; 61
    3074:	de bf       	out	0x3e, r29	; 62
    3076:	df 91       	pop	r29
    3078:	cf 91       	pop	r28
    307a:	1f 91       	pop	r17
    307c:	0f 91       	pop	r16
    307e:	ff 90       	pop	r15
    3080:	ef 90       	pop	r14
    3082:	df 90       	pop	r13
    3084:	cf 90       	pop	r12
    3086:	bf 90       	pop	r11
    3088:	9f 90       	pop	r9
    308a:	8f 90       	pop	r8
    308c:	7f 90       	pop	r7
    308e:	6f 90       	pop	r6
    3090:	08 95       	ret

00003092 <__vector_108>:
    3092:	1f 92       	push	r1
    3094:	0f 92       	push	r0
    3096:	0f b6       	in	r0, 0x3f	; 63
    3098:	0f 92       	push	r0
    309a:	11 24       	eor	r1, r1
    309c:	0b b6       	in	r0, 0x3b	; 59
    309e:	0f 92       	push	r0
    30a0:	2f 93       	push	r18
    30a2:	3f 93       	push	r19
    30a4:	4f 93       	push	r20
    30a6:	5f 93       	push	r21
    30a8:	6f 93       	push	r22
    30aa:	7f 93       	push	r23
    30ac:	8f 93       	push	r24
    30ae:	9f 93       	push	r25
    30b0:	af 93       	push	r26
    30b2:	bf 93       	push	r27
    30b4:	ef 93       	push	r30
    30b6:	ff 93       	push	r31
    30b8:	cf 93       	push	r28
    30ba:	df 93       	push	r29
    30bc:	1f 92       	push	r1
    30be:	cd b7       	in	r28, 0x3d	; 61
    30c0:	de b7       	in	r29, 0x3e	; 62
    30c2:	19 82       	std	Y+1, r1	; 0x01
    30c4:	9e 01       	movw	r18, r28
    30c6:	2f 5f       	subi	r18, 0xFF	; 255
    30c8:	3f 4f       	sbci	r19, 0xFF	; 255
    30ca:	41 e0       	ldi	r20, 0x01	; 1
    30cc:	50 e0       	ldi	r21, 0x00	; 0
    30ce:	60 e0       	ldi	r22, 0x00	; 0
    30d0:	70 e0       	ldi	r23, 0x00	; 0
    30d2:	80 91 e9 30 	lds	r24, 0x30E9	; 0x8030e9 <egDisplayTiming>
    30d6:	90 91 ea 30 	lds	r25, 0x30EA	; 0x8030ea <egDisplayTiming+0x1>
    30da:	0e 94 0b 04 	call	0x816	; 0x816 <xEventGroupSetBitsFromISR>
    30de:	60 e0       	ldi	r22, 0x00	; 0
    30e0:	80 e0       	ldi	r24, 0x00	; 0
    30e2:	9b e0       	ldi	r25, 0x0B	; 11
    30e4:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <TC0_ConfigClockSource>
    30e8:	10 92 06 0b 	sts	0x0B06, r1	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7deb06>
    30ec:	0f 90       	pop	r0
    30ee:	df 91       	pop	r29
    30f0:	cf 91       	pop	r28
    30f2:	ff 91       	pop	r31
    30f4:	ef 91       	pop	r30
    30f6:	bf 91       	pop	r27
    30f8:	af 91       	pop	r26
    30fa:	9f 91       	pop	r25
    30fc:	8f 91       	pop	r24
    30fe:	7f 91       	pop	r23
    3100:	6f 91       	pop	r22
    3102:	5f 91       	pop	r21
    3104:	4f 91       	pop	r20
    3106:	3f 91       	pop	r19
    3108:	2f 91       	pop	r18
    310a:	0f 90       	pop	r0
    310c:	0b be       	out	0x3b, r0	; 59
    310e:	0f 90       	pop	r0
    3110:	0f be       	out	0x3f, r0	; 63
    3112:	0f 90       	pop	r0
    3114:	1f 90       	pop	r1
    3116:	18 95       	reti

00003118 <delayUS>:
    3118:	cf 92       	push	r12
    311a:	df 92       	push	r13
    311c:	ef 92       	push	r14
    311e:	ff 92       	push	r15
    3120:	0f 93       	push	r16
    3122:	6b 01       	movw	r12, r22
    3124:	7c 01       	movw	r14, r24
    3126:	82 e0       	ldi	r24, 0x02	; 2
    3128:	c8 16       	cp	r12, r24
    312a:	d1 04       	cpc	r13, r1
    312c:	e1 04       	cpc	r14, r1
    312e:	f1 04       	cpc	r15, r1
    3130:	28 f4       	brcc	.+10     	; 0x313c <delayUS+0x24>
    3132:	c1 2c       	mov	r12, r1
    3134:	d1 2c       	mov	r13, r1
    3136:	76 01       	movw	r14, r12
    3138:	68 94       	set
    313a:	c1 f8       	bld	r12, 1
    313c:	e0 e0       	ldi	r30, 0x00	; 0
    313e:	fb e0       	ldi	r31, 0x0B	; 11
    3140:	81 e0       	ldi	r24, 0x01	; 1
    3142:	86 83       	std	Z+6, r24	; 0x06
    3144:	10 a2       	std	Z+32, r1	; 0x20
    3146:	11 a2       	std	Z+33, r1	; 0x21
    3148:	60 e0       	ldi	r22, 0x00	; 0
    314a:	80 e0       	ldi	r24, 0x00	; 0
    314c:	9b e0       	ldi	r25, 0x0B	; 11
    314e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <TC0_ConfigWGM>
    3152:	8e ef       	ldi	r24, 0xFE	; 254
    3154:	c8 16       	cp	r12, r24
    3156:	8f ef       	ldi	r24, 0xFF	; 255
    3158:	d8 06       	cpc	r13, r24
    315a:	e1 04       	cpc	r14, r1
    315c:	f1 04       	cpc	r15, r1
    315e:	70 f4       	brcc	.+28     	; 0x317c <delayUS+0x64>
    3160:	f6 94       	lsr	r15
    3162:	e7 94       	ror	r14
    3164:	d7 94       	ror	r13
    3166:	c7 94       	ror	r12
    3168:	c0 92 26 0b 	sts	0x0B26, r12	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7deb26>
    316c:	d0 92 27 0b 	sts	0x0B27, r13	; 0x800b27 <__TEXT_REGION_LENGTH__+0x7deb27>
    3170:	65 e0       	ldi	r22, 0x05	; 5
    3172:	80 e0       	ldi	r24, 0x00	; 0
    3174:	9b e0       	ldi	r25, 0x0B	; 11
    3176:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <TC0_ConfigClockSource>
    317a:	19 c0       	rjmp	.+50     	; 0x31ae <delayUS+0x96>
    317c:	80 e4       	ldi	r24, 0x40	; 64
    317e:	c8 16       	cp	r12, r24
    3180:	82 e4       	ldi	r24, 0x42	; 66
    3182:	d8 06       	cpc	r13, r24
    3184:	8f e0       	ldi	r24, 0x0F	; 15
    3186:	e8 06       	cpc	r14, r24
    3188:	f1 04       	cpc	r15, r1
    318a:	88 f4       	brcc	.+34     	; 0x31ae <delayUS+0x96>
    318c:	68 94       	set
    318e:	14 f8       	bld	r1, 4
    3190:	f6 94       	lsr	r15
    3192:	e7 94       	ror	r14
    3194:	d7 94       	ror	r13
    3196:	c7 94       	ror	r12
    3198:	16 94       	lsr	r1
    319a:	d1 f7       	brne	.-12     	; 0x3190 <delayUS+0x78>
    319c:	c0 92 26 0b 	sts	0x0B26, r12	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7deb26>
    31a0:	d0 92 27 0b 	sts	0x0B27, r13	; 0x800b27 <__TEXT_REGION_LENGTH__+0x7deb27>
    31a4:	67 e0       	ldi	r22, 0x07	; 7
    31a6:	80 e0       	ldi	r24, 0x00	; 0
    31a8:	9b e0       	ldi	r25, 0x0B	; 11
    31aa:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <TC0_ConfigClockSource>
    31ae:	0f 2e       	mov	r0, r31
    31b0:	f4 ef       	ldi	r31, 0xF4	; 244
    31b2:	cf 2e       	mov	r12, r31
    31b4:	dd 24       	eor	r13, r13
    31b6:	d3 94       	inc	r13
    31b8:	e1 2c       	mov	r14, r1
    31ba:	f1 2c       	mov	r15, r1
    31bc:	f0 2d       	mov	r31, r0
    31be:	00 e0       	ldi	r16, 0x00	; 0
    31c0:	21 e0       	ldi	r18, 0x01	; 1
    31c2:	41 e0       	ldi	r20, 0x01	; 1
    31c4:	50 e0       	ldi	r21, 0x00	; 0
    31c6:	60 e0       	ldi	r22, 0x00	; 0
    31c8:	70 e0       	ldi	r23, 0x00	; 0
    31ca:	80 91 e9 30 	lds	r24, 0x30E9	; 0x8030e9 <egDisplayTiming>
    31ce:	90 91 ea 30 	lds	r25, 0x30EA	; 0x8030ea <egDisplayTiming+0x1>
    31d2:	0e 94 b2 02 	call	0x564	; 0x564 <xEventGroupWaitBits>
    31d6:	0f 91       	pop	r16
    31d8:	ff 90       	pop	r15
    31da:	ef 90       	pop	r14
    31dc:	df 90       	pop	r13
    31de:	cf 90       	pop	r12
    31e0:	08 95       	ret

000031e2 <setPort>:
    31e2:	82 95       	swap	r24
    31e4:	80 7f       	andi	r24, 0xF0	; 240
    31e6:	e0 e0       	ldi	r30, 0x00	; 0
    31e8:	f6 e0       	ldi	r31, 0x06	; 6
    31ea:	94 81       	ldd	r25, Z+4	; 0x04
    31ec:	28 2f       	mov	r18, r24
    31ee:	2f 60       	ori	r18, 0x0F	; 15
    31f0:	92 23       	and	r25, r18
    31f2:	94 83       	std	Z+4, r25	; 0x04
    31f4:	94 81       	ldd	r25, Z+4	; 0x04
    31f6:	89 2b       	or	r24, r25
    31f8:	84 83       	std	Z+4, r24	; 0x04
    31fa:	08 95       	ret

000031fc <setRS>:
    31fc:	88 23       	and	r24, r24
    31fe:	21 f0       	breq	.+8      	; 0x3208 <setRS+0xc>
    3200:	81 e0       	ldi	r24, 0x01	; 1
    3202:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x7de665>
    3206:	08 95       	ret
    3208:	81 e0       	ldi	r24, 0x01	; 1
    320a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7de666>
    320e:	08 95       	ret

00003210 <setRW>:
    3210:	88 23       	and	r24, r24
    3212:	21 f0       	breq	.+8      	; 0x321c <setRW+0xc>
    3214:	82 e0       	ldi	r24, 0x02	; 2
    3216:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x7de665>
    321a:	08 95       	ret
    321c:	82 e0       	ldi	r24, 0x02	; 2
    321e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7de666>
    3222:	08 95       	ret

00003224 <setE>:
    3224:	88 23       	and	r24, r24
    3226:	21 f0       	breq	.+8      	; 0x3230 <setE+0xc>
    3228:	84 e0       	ldi	r24, 0x04	; 4
    322a:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x7de665>
    322e:	08 95       	ret
    3230:	84 e0       	ldi	r24, 0x04	; 4
    3232:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7de666>
    3236:	08 95       	ret

00003238 <Nybble>:
    3238:	81 e0       	ldi	r24, 0x01	; 1
    323a:	0e 94 12 19 	call	0x3224	; 0x3224 <setE>
    323e:	61 e0       	ldi	r22, 0x01	; 1
    3240:	70 e0       	ldi	r23, 0x00	; 0
    3242:	80 e0       	ldi	r24, 0x00	; 0
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	0e 94 8c 18 	call	0x3118	; 0x3118 <delayUS>
    324a:	80 e0       	ldi	r24, 0x00	; 0
    324c:	0e 94 12 19 	call	0x3224	; 0x3224 <setE>
    3250:	08 95       	ret

00003252 <command>:
    3252:	cf 93       	push	r28
    3254:	c8 2f       	mov	r28, r24
    3256:	82 95       	swap	r24
    3258:	8f 70       	andi	r24, 0x0F	; 15
    325a:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <setPort>
    325e:	80 e0       	ldi	r24, 0x00	; 0
    3260:	0e 94 fe 18 	call	0x31fc	; 0x31fc <setRS>
    3264:	80 e0       	ldi	r24, 0x00	; 0
    3266:	0e 94 08 19 	call	0x3210	; 0x3210 <setRW>
    326a:	0e 94 1c 19 	call	0x3238	; 0x3238 <Nybble>
    326e:	8c 2f       	mov	r24, r28
    3270:	8f 70       	andi	r24, 0x0F	; 15
    3272:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <setPort>
    3276:	0e 94 1c 19 	call	0x3238	; 0x3238 <Nybble>
    327a:	cf 91       	pop	r28
    327c:	08 95       	ret

0000327e <write>:
    327e:	cf 93       	push	r28
    3280:	c8 2f       	mov	r28, r24
    3282:	82 95       	swap	r24
    3284:	8f 70       	andi	r24, 0x0F	; 15
    3286:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <setPort>
    328a:	81 e0       	ldi	r24, 0x01	; 1
    328c:	0e 94 fe 18 	call	0x31fc	; 0x31fc <setRS>
    3290:	80 e0       	ldi	r24, 0x00	; 0
    3292:	0e 94 08 19 	call	0x3210	; 0x3210 <setRW>
    3296:	0e 94 1c 19 	call	0x3238	; 0x3238 <Nybble>
    329a:	8c 2f       	mov	r24, r28
    329c:	8f 70       	andi	r24, 0x0F	; 15
    329e:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <setPort>
    32a2:	0e 94 1c 19 	call	0x3238	; 0x3238 <Nybble>
    32a6:	cf 91       	pop	r28
    32a8:	08 95       	ret

000032aa <vInitDisplay>:
    32aa:	ef 92       	push	r14
    32ac:	ff 92       	push	r15
    32ae:	0f 93       	push	r16
    32b0:	e0 e0       	ldi	r30, 0x00	; 0
    32b2:	f6 e0       	ldi	r31, 0x06	; 6
    32b4:	80 e1       	ldi	r24, 0x10	; 16
    32b6:	81 83       	std	Z+1, r24	; 0x01
    32b8:	80 e2       	ldi	r24, 0x20	; 32
    32ba:	81 83       	std	Z+1, r24	; 0x01
    32bc:	80 e4       	ldi	r24, 0x40	; 64
    32be:	81 83       	std	Z+1, r24	; 0x01
    32c0:	80 e8       	ldi	r24, 0x80	; 128
    32c2:	81 83       	std	Z+1, r24	; 0x01
    32c4:	a0 e6       	ldi	r26, 0x60	; 96
    32c6:	b6 e0       	ldi	r27, 0x06	; 6
    32c8:	81 e0       	ldi	r24, 0x01	; 1
    32ca:	11 96       	adiw	r26, 0x01	; 1
    32cc:	8c 93       	st	X, r24
    32ce:	11 97       	sbiw	r26, 0x01	; 1
    32d0:	82 e0       	ldi	r24, 0x02	; 2
    32d2:	11 96       	adiw	r26, 0x01	; 1
    32d4:	8c 93       	st	X, r24
    32d6:	11 97       	sbiw	r26, 0x01	; 1
    32d8:	84 e0       	ldi	r24, 0x04	; 4
    32da:	11 96       	adiw	r26, 0x01	; 1
    32dc:	8c 93       	st	X, r24
    32de:	11 97       	sbiw	r26, 0x01	; 1
    32e0:	84 81       	ldd	r24, Z+4	; 0x04
    32e2:	8f 70       	andi	r24, 0x0F	; 15
    32e4:	84 83       	std	Z+4, r24	; 0x04
    32e6:	14 96       	adiw	r26, 0x04	; 4
    32e8:	8c 91       	ld	r24, X
    32ea:	14 97       	sbiw	r26, 0x04	; 4
    32ec:	88 7f       	andi	r24, 0xF8	; 248
    32ee:	14 96       	adiw	r26, 0x04	; 4
    32f0:	8c 93       	st	X, r24
    32f2:	40 e0       	ldi	r20, 0x00	; 0
    32f4:	66 e1       	ldi	r22, 0x16	; 22
    32f6:	88 e0       	ldi	r24, 0x08	; 8
    32f8:	0e 94 b5 07 	call	0xf6a	; 0xf6a <xQueueGenericCreate>
    32fc:	80 93 e7 30 	sts	0x30E7, r24	; 0x8030e7 <displayLineQueue>
    3300:	90 93 e8 30 	sts	0x30E8, r25	; 0x8030e8 <displayLineQueue+0x1>
    3304:	0e 94 9d 02 	call	0x53a	; 0x53a <xEventGroupCreate>
    3308:	80 93 e9 30 	sts	0x30E9, r24	; 0x8030e9 <egDisplayTiming>
    330c:	90 93 ea 30 	sts	0x30EA, r25	; 0x8030ea <egDisplayTiming+0x1>
    3310:	e1 2c       	mov	r14, r1
    3312:	f1 2c       	mov	r15, r1
    3314:	01 e0       	ldi	r16, 0x01	; 1
    3316:	20 e0       	ldi	r18, 0x00	; 0
    3318:	30 e0       	ldi	r19, 0x00	; 0
    331a:	4e e5       	ldi	r20, 0x5E	; 94
    331c:	51 e0       	ldi	r21, 0x01	; 1
    331e:	6b e6       	ldi	r22, 0x6B	; 107
    3320:	70 e2       	ldi	r23, 0x20	; 32
    3322:	8d ee       	ldi	r24, 0xED	; 237
    3324:	99 e1       	ldi	r25, 0x19	; 25
    3326:	0e 94 43 0b 	call	0x1686	; 0x1686 <xTaskCreate>
    332a:	0f 91       	pop	r16
    332c:	ff 90       	pop	r15
    332e:	ef 90       	pop	r14
    3330:	08 95       	ret

00003332 <_displaySetPos>:
    3332:	81 30       	cpi	r24, 0x01	; 1
    3334:	91 05       	cpc	r25, r1
    3336:	79 f0       	breq	.+30     	; 0x3356 <_displaySetPos+0x24>
    3338:	1c f4       	brge	.+6      	; 0x3340 <_displaySetPos+0xe>
    333a:	89 2b       	or	r24, r25
    333c:	39 f0       	breq	.+14     	; 0x334c <_displaySetPos+0x1a>
    333e:	19 c0       	rjmp	.+50     	; 0x3372 <_displaySetPos+0x40>
    3340:	82 30       	cpi	r24, 0x02	; 2
    3342:	91 05       	cpc	r25, r1
    3344:	69 f0       	breq	.+26     	; 0x3360 <_displaySetPos+0x2e>
    3346:	03 97       	sbiw	r24, 0x03	; 3
    3348:	81 f0       	breq	.+32     	; 0x336a <_displaySetPos+0x38>
    334a:	13 c0       	rjmp	.+38     	; 0x3372 <_displaySetPos+0x40>
    334c:	80 e8       	ldi	r24, 0x80	; 128
    334e:	86 0f       	add	r24, r22
    3350:	0e 94 29 19 	call	0x3252	; 0x3252 <command>
    3354:	0e c0       	rjmp	.+28     	; 0x3372 <_displaySetPos+0x40>
    3356:	80 ec       	ldi	r24, 0xC0	; 192
    3358:	86 0f       	add	r24, r22
    335a:	0e 94 29 19 	call	0x3252	; 0x3252 <command>
    335e:	09 c0       	rjmp	.+18     	; 0x3372 <_displaySetPos+0x40>
    3360:	84 e9       	ldi	r24, 0x94	; 148
    3362:	86 0f       	add	r24, r22
    3364:	0e 94 29 19 	call	0x3252	; 0x3252 <command>
    3368:	04 c0       	rjmp	.+8      	; 0x3372 <_displaySetPos+0x40>
    336a:	84 ed       	ldi	r24, 0xD4	; 212
    336c:	86 0f       	add	r24, r22
    336e:	0e 94 29 19 	call	0x3252	; 0x3252 <command>
    3372:	67 e2       	ldi	r22, 0x27	; 39
    3374:	70 e0       	ldi	r23, 0x00	; 0
    3376:	80 e0       	ldi	r24, 0x00	; 0
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	0e 94 8c 18 	call	0x3118	; 0x3118 <delayUS>
    337e:	08 95       	ret

00003380 <_displayWriteChar>:
    3380:	0e 94 3f 19 	call	0x327e	; 0x327e <write>
    3384:	6b e2       	ldi	r22, 0x2B	; 43
    3386:	70 e0       	ldi	r23, 0x00	; 0
    3388:	80 e0       	ldi	r24, 0x00	; 0
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	0e 94 8c 18 	call	0x3118	; 0x3118 <delayUS>
    3390:	08 95       	ret

00003392 <_displayWriteString>:
    3392:	0f 93       	push	r16
    3394:	1f 93       	push	r17
    3396:	cf 93       	push	r28
    3398:	df 93       	push	r29
    339a:	8c 01       	movw	r16, r24
    339c:	c0 e0       	ldi	r28, 0x00	; 0
    339e:	d0 e0       	ldi	r29, 0x00	; 0
    33a0:	09 c0       	rjmp	.+18     	; 0x33b4 <_displayWriteString+0x22>
    33a2:	f8 01       	movw	r30, r16
    33a4:	ec 0f       	add	r30, r28
    33a6:	fd 1f       	adc	r31, r29
    33a8:	80 81       	ld	r24, Z
    33aa:	88 23       	and	r24, r24
    33ac:	31 f0       	breq	.+12     	; 0x33ba <_displayWriteString+0x28>
    33ae:	0e 94 c0 19 	call	0x3380	; 0x3380 <_displayWriteChar>
    33b2:	21 96       	adiw	r28, 0x01	; 1
    33b4:	c4 31       	cpi	r28, 0x14	; 20
    33b6:	d1 05       	cpc	r29, r1
    33b8:	a4 f3       	brlt	.-24     	; 0x33a2 <_displayWriteString+0x10>
    33ba:	df 91       	pop	r29
    33bc:	cf 91       	pop	r28
    33be:	1f 91       	pop	r17
    33c0:	0f 91       	pop	r16
    33c2:	08 95       	ret

000033c4 <_displayWriteStringAtPos>:
    33c4:	cf 93       	push	r28
    33c6:	df 93       	push	r29
    33c8:	ea 01       	movw	r28, r20
    33ca:	0e 94 99 19 	call	0x3332	; 0x3332 <_displaySetPos>
    33ce:	ce 01       	movw	r24, r28
    33d0:	0e 94 c9 19 	call	0x3392	; 0x3392 <_displayWriteString>
    33d4:	df 91       	pop	r29
    33d6:	cf 91       	pop	r28
    33d8:	08 95       	ret

000033da <vDisplayUpdateTask>:
    33da:	cf 93       	push	r28
    33dc:	df 93       	push	r29
    33de:	cd b7       	in	r28, 0x3d	; 61
    33e0:	de b7       	in	r29, 0x3e	; 62
    33e2:	c6 56       	subi	r28, 0x66	; 102
    33e4:	d1 09       	sbc	r29, r1
    33e6:	cd bf       	out	0x3d, r28	; 61
    33e8:	de bf       	out	0x3e, r29	; 62
    33ea:	80 e0       	ldi	r24, 0x00	; 0
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	19 c0       	rjmp	.+50     	; 0x3422 <vDisplayUpdateTask+0x48>
    33f0:	44 e1       	ldi	r20, 0x14	; 20
    33f2:	48 9f       	mul	r20, r24
    33f4:	f0 01       	movw	r30, r0
    33f6:	49 9f       	mul	r20, r25
    33f8:	f0 0d       	add	r31, r0
    33fa:	11 24       	eor	r1, r1
    33fc:	41 e0       	ldi	r20, 0x01	; 1
    33fe:	50 e0       	ldi	r21, 0x00	; 0
    3400:	4c 0f       	add	r20, r28
    3402:	5d 1f       	adc	r21, r29
    3404:	e4 0f       	add	r30, r20
    3406:	f5 1f       	adc	r31, r21
    3408:	e2 0f       	add	r30, r18
    340a:	f3 1f       	adc	r31, r19
    340c:	40 e2       	ldi	r20, 0x20	; 32
    340e:	40 83       	st	Z, r20
    3410:	2f 5f       	subi	r18, 0xFF	; 255
    3412:	3f 4f       	sbci	r19, 0xFF	; 255
    3414:	02 c0       	rjmp	.+4      	; 0x341a <vDisplayUpdateTask+0x40>
    3416:	20 e0       	ldi	r18, 0x00	; 0
    3418:	30 e0       	ldi	r19, 0x00	; 0
    341a:	24 31       	cpi	r18, 0x14	; 20
    341c:	31 05       	cpc	r19, r1
    341e:	44 f3       	brlt	.-48     	; 0x33f0 <vDisplayUpdateTask+0x16>
    3420:	01 96       	adiw	r24, 0x01	; 1
    3422:	84 30       	cpi	r24, 0x04	; 4
    3424:	91 05       	cpc	r25, r1
    3426:	bc f3       	brlt	.-18     	; 0x3416 <vDisplayUpdateTask+0x3c>
    3428:	60 e4       	ldi	r22, 0x40	; 64
    342a:	7c e9       	ldi	r23, 0x9C	; 156
    342c:	80 e0       	ldi	r24, 0x00	; 0
    342e:	90 e0       	ldi	r25, 0x00	; 0
    3430:	0e 94 8c 18 	call	0x3118	; 0x3118 <delayUS>
    3434:	83 e0       	ldi	r24, 0x03	; 3
    3436:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <setPort>
    343a:	68 e8       	ldi	r22, 0x88	; 136
    343c:	73 e1       	ldi	r23, 0x13	; 19
    343e:	80 e0       	ldi	r24, 0x00	; 0
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	0e 94 8c 18 	call	0x3118	; 0x3118 <delayUS>
    3446:	0e 94 1c 19 	call	0x3238	; 0x3238 <Nybble>
    344a:	60 ea       	ldi	r22, 0xA0	; 160
    344c:	70 e0       	ldi	r23, 0x00	; 0
    344e:	80 e0       	ldi	r24, 0x00	; 0
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	0e 94 8c 18 	call	0x3118	; 0x3118 <delayUS>
    3456:	0e 94 1c 19 	call	0x3238	; 0x3238 <Nybble>
    345a:	60 ea       	ldi	r22, 0xA0	; 160
    345c:	70 e0       	ldi	r23, 0x00	; 0
    345e:	80 e0       	ldi	r24, 0x00	; 0
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	0e 94 8c 18 	call	0x3118	; 0x3118 <delayUS>
    3466:	0e 94 1c 19 	call	0x3238	; 0x3238 <Nybble>
    346a:	60 ea       	ldi	r22, 0xA0	; 160
    346c:	70 e0       	ldi	r23, 0x00	; 0
    346e:	80 e0       	ldi	r24, 0x00	; 0
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	0e 94 8c 18 	call	0x3118	; 0x3118 <delayUS>
    3476:	82 e0       	ldi	r24, 0x02	; 2
    3478:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <setPort>
    347c:	0e 94 1c 19 	call	0x3238	; 0x3238 <Nybble>
    3480:	88 e2       	ldi	r24, 0x28	; 40
    3482:	0e 94 29 19 	call	0x3252	; 0x3252 <command>
    3486:	80 e1       	ldi	r24, 0x10	; 16
    3488:	0e 94 29 19 	call	0x3252	; 0x3252 <command>
    348c:	8c e0       	ldi	r24, 0x0C	; 12
    348e:	0e 94 29 19 	call	0x3252	; 0x3252 <command>
    3492:	86 e0       	ldi	r24, 0x06	; 6
    3494:	0e 94 29 19 	call	0x3252	; 0x3252 <command>
    3498:	68 ec       	ldi	r22, 0xC8	; 200
    349a:	70 e0       	ldi	r23, 0x00	; 0
    349c:	80 e0       	ldi	r24, 0x00	; 0
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <vTaskDelay>
    34a4:	40 e0       	ldi	r20, 0x00	; 0
    34a6:	50 e0       	ldi	r21, 0x00	; 0
    34a8:	ba 01       	movw	r22, r20
    34aa:	80 91 e9 30 	lds	r24, 0x30E9	; 0x8030e9 <egDisplayTiming>
    34ae:	90 91 ea 30 	lds	r25, 0x30EA	; 0x8030ea <egDisplayTiming+0x1>
    34b2:	0e 94 59 03 	call	0x6b2	; 0x6b2 <xEventGroupClearBits>
    34b6:	67 2b       	or	r22, r23
    34b8:	68 2b       	or	r22, r24
    34ba:	69 2b       	or	r22, r25
    34bc:	09 f4       	brne	.+2      	; 0x34c0 <vDisplayUpdateTask+0xe6>
    34be:	5f c0       	rjmp	.+190    	; 0x357e <vDisplayUpdateTask+0x1a4>
    34c0:	42 e0       	ldi	r20, 0x02	; 2
    34c2:	50 e0       	ldi	r21, 0x00	; 0
    34c4:	60 e0       	ldi	r22, 0x00	; 0
    34c6:	70 e0       	ldi	r23, 0x00	; 0
    34c8:	80 91 e9 30 	lds	r24, 0x30E9	; 0x8030e9 <egDisplayTiming>
    34cc:	90 91 ea 30 	lds	r25, 0x30EA	; 0x8030ea <egDisplayTiming+0x1>
    34d0:	0e 94 59 03 	call	0x6b2	; 0x6b2 <xEventGroupClearBits>
    34d4:	40 e0       	ldi	r20, 0x00	; 0
    34d6:	50 e0       	ldi	r21, 0x00	; 0
    34d8:	19 c0       	rjmp	.+50     	; 0x350c <vDisplayUpdateTask+0x132>
    34da:	24 e1       	ldi	r18, 0x14	; 20
    34dc:	24 9f       	mul	r18, r20
    34de:	f0 01       	movw	r30, r0
    34e0:	25 9f       	mul	r18, r21
    34e2:	f0 0d       	add	r31, r0
    34e4:	11 24       	eor	r1, r1
    34e6:	21 e0       	ldi	r18, 0x01	; 1
    34e8:	30 e0       	ldi	r19, 0x00	; 0
    34ea:	2c 0f       	add	r18, r28
    34ec:	3d 1f       	adc	r19, r29
    34ee:	e2 0f       	add	r30, r18
    34f0:	f3 1f       	adc	r31, r19
    34f2:	e8 0f       	add	r30, r24
    34f4:	f9 1f       	adc	r31, r25
    34f6:	20 e2       	ldi	r18, 0x20	; 32
    34f8:	20 83       	st	Z, r18
    34fa:	01 96       	adiw	r24, 0x01	; 1
    34fc:	02 c0       	rjmp	.+4      	; 0x3502 <vDisplayUpdateTask+0x128>
    34fe:	80 e0       	ldi	r24, 0x00	; 0
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	84 31       	cpi	r24, 0x14	; 20
    3504:	91 05       	cpc	r25, r1
    3506:	4c f3       	brlt	.-46     	; 0x34da <vDisplayUpdateTask+0x100>
    3508:	4f 5f       	subi	r20, 0xFF	; 255
    350a:	5f 4f       	sbci	r21, 0xFF	; 255
    350c:	44 30       	cpi	r20, 0x04	; 4
    350e:	51 05       	cpc	r21, r1
    3510:	b4 f3       	brlt	.-20     	; 0x34fe <vDisplayUpdateTask+0x124>
    3512:	35 c0       	rjmp	.+106    	; 0x357e <vDisplayUpdateTask+0x1a4>
    3514:	2f ef       	ldi	r18, 0xFF	; 255
    3516:	3f ef       	ldi	r19, 0xFF	; 255
    3518:	a9 01       	movw	r20, r18
    351a:	be 01       	movw	r22, r28
    351c:	6f 5a       	subi	r22, 0xAF	; 175
    351e:	7f 4f       	sbci	r23, 0xFF	; 255
    3520:	80 91 e7 30 	lds	r24, 0x30E7	; 0x8030e7 <displayLineQueue>
    3524:	90 91 e8 30 	lds	r25, 0x30E8	; 0x8030e8 <displayLineQueue+0x1>
    3528:	0e 94 c3 08 	call	0x1186	; 0x1186 <xQueueReceive>
    352c:	88 23       	and	r24, r24
    352e:	39 f1       	breq	.+78     	; 0x357e <vDisplayUpdateTask+0x1a4>
    3530:	12 c0       	rjmp	.+36     	; 0x3556 <vDisplayUpdateTask+0x17c>
    3532:	62 96       	adiw	r28, 0x12	; 18
    3534:	4f ad       	ldd	r20, Y+63	; 0x3f
    3536:	62 97       	sbiw	r28, 0x12	; 18
    3538:	e1 e0       	ldi	r30, 0x01	; 1
    353a:	f0 e0       	ldi	r31, 0x00	; 0
    353c:	ec 0f       	add	r30, r28
    353e:	fd 1f       	adc	r31, r29
    3540:	74 e1       	ldi	r23, 0x14	; 20
    3542:	47 9f       	mul	r20, r23
    3544:	e0 0d       	add	r30, r0
    3546:	f1 1d       	adc	r31, r1
    3548:	11 24       	eor	r1, r1
    354a:	e8 0f       	add	r30, r24
    354c:	f9 1f       	adc	r31, r25
    354e:	60 83       	st	Z, r22
    3550:	2f 5f       	subi	r18, 0xFF	; 255
    3552:	3f 4f       	sbci	r19, 0xFF	; 255
    3554:	02 c0       	rjmp	.+4      	; 0x355a <vDisplayUpdateTask+0x180>
    3556:	20 e0       	ldi	r18, 0x00	; 0
    3558:	30 e0       	ldi	r19, 0x00	; 0
    355a:	63 96       	adiw	r28, 0x13	; 19
    355c:	8f ad       	ldd	r24, Y+63	; 0x3f
    355e:	63 97       	sbiw	r28, 0x13	; 19
    3560:	f9 01       	movw	r30, r18
    3562:	e8 0f       	add	r30, r24
    3564:	f1 1d       	adc	r31, r1
    3566:	cf 01       	movw	r24, r30
    3568:	74 97       	sbiw	r30, 0x14	; 20
    356a:	4c f4       	brge	.+18     	; 0x357e <vDisplayUpdateTask+0x1a4>
    356c:	e1 e5       	ldi	r30, 0x51	; 81
    356e:	f0 e0       	ldi	r31, 0x00	; 0
    3570:	ec 0f       	add	r30, r28
    3572:	fd 1f       	adc	r31, r29
    3574:	e2 0f       	add	r30, r18
    3576:	f3 1f       	adc	r31, r19
    3578:	62 81       	ldd	r22, Z+2	; 0x02
    357a:	61 11       	cpse	r22, r1
    357c:	da cf       	rjmp	.-76     	; 0x3532 <vDisplayUpdateTask+0x158>
    357e:	80 91 e7 30 	lds	r24, 0x30E7	; 0x8030e7 <displayLineQueue>
    3582:	90 91 e8 30 	lds	r25, 0x30E8	; 0x8030e8 <displayLineQueue+0x1>
    3586:	0e 94 62 09 	call	0x12c4	; 0x12c4 <uxQueueMessagesWaiting>
    358a:	81 11       	cpse	r24, r1
    358c:	c3 cf       	rjmp	.-122    	; 0x3514 <vDisplayUpdateTask+0x13a>
    358e:	00 e0       	ldi	r16, 0x00	; 0
    3590:	10 e0       	ldi	r17, 0x00	; 0
    3592:	13 c0       	rjmp	.+38     	; 0x35ba <vDisplayUpdateTask+0x1e0>
    3594:	84 e1       	ldi	r24, 0x14	; 20
    3596:	80 9f       	mul	r24, r16
    3598:	a0 01       	movw	r20, r0
    359a:	81 9f       	mul	r24, r17
    359c:	50 0d       	add	r21, r0
    359e:	11 24       	eor	r1, r1
    35a0:	21 e0       	ldi	r18, 0x01	; 1
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	2c 0f       	add	r18, r28
    35a6:	3d 1f       	adc	r19, r29
    35a8:	42 0f       	add	r20, r18
    35aa:	53 1f       	adc	r21, r19
    35ac:	60 e0       	ldi	r22, 0x00	; 0
    35ae:	70 e0       	ldi	r23, 0x00	; 0
    35b0:	c8 01       	movw	r24, r16
    35b2:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <_displayWriteStringAtPos>
    35b6:	0f 5f       	subi	r16, 0xFF	; 255
    35b8:	1f 4f       	sbci	r17, 0xFF	; 255
    35ba:	04 30       	cpi	r16, 0x04	; 4
    35bc:	11 05       	cpc	r17, r1
    35be:	54 f3       	brlt	.-44     	; 0x3594 <vDisplayUpdateTask+0x1ba>
    35c0:	6b cf       	rjmp	.-298    	; 0x3498 <vDisplayUpdateTask+0xbe>

000035c2 <vDisplayWriteStringAtPos>:
}

void vDisplayWriteStringAtPos(int line, int pos, char const *fmt, ...) {
    35c2:	cf 93       	push	r28
    35c4:	df 93       	push	r29
    35c6:	cd b7       	in	r28, 0x3d	; 61
    35c8:	de b7       	in	r29, 0x3e	; 62
	va_list arg;	
	va_start(arg, fmt);
	display_vprintf(line, pos, fmt, arg);
    35ca:	9e 01       	movw	r18, r28
    35cc:	24 5f       	subi	r18, 0xF4	; 244
    35ce:	3f 4f       	sbci	r19, 0xFF	; 255
    35d0:	4a 85       	ldd	r20, Y+10	; 0x0a
    35d2:	5b 85       	ldd	r21, Y+11	; 0x0b
    35d4:	68 85       	ldd	r22, Y+8	; 0x08
    35d6:	79 85       	ldd	r23, Y+9	; 0x09
    35d8:	8e 81       	ldd	r24, Y+6	; 0x06
    35da:	9f 81       	ldd	r25, Y+7	; 0x07
    35dc:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <display_vprintf>
	va_end(arg);	
}
    35e0:	df 91       	pop	r29
    35e2:	cf 91       	pop	r28
    35e4:	08 95       	ret

000035e6 <__subsf3>:
    35e6:	50 58       	subi	r21, 0x80	; 128

000035e8 <__addsf3>:
    35e8:	bb 27       	eor	r27, r27
    35ea:	aa 27       	eor	r26, r26
    35ec:	0e 94 0b 1b 	call	0x3616	; 0x3616 <__addsf3x>
    35f0:	0c 94 85 1c 	jmp	0x390a	; 0x390a <__fp_round>
    35f4:	0e 94 77 1c 	call	0x38ee	; 0x38ee <__fp_pscA>
    35f8:	38 f0       	brcs	.+14     	; 0x3608 <__addsf3+0x20>
    35fa:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <__fp_pscB>
    35fe:	20 f0       	brcs	.+8      	; 0x3608 <__addsf3+0x20>
    3600:	39 f4       	brne	.+14     	; 0x3610 <__addsf3+0x28>
    3602:	9f 3f       	cpi	r25, 0xFF	; 255
    3604:	19 f4       	brne	.+6      	; 0x360c <__addsf3+0x24>
    3606:	26 f4       	brtc	.+8      	; 0x3610 <__addsf3+0x28>
    3608:	0c 94 74 1c 	jmp	0x38e8	; 0x38e8 <__fp_nan>
    360c:	0e f4       	brtc	.+2      	; 0x3610 <__addsf3+0x28>
    360e:	e0 95       	com	r30
    3610:	e7 fb       	bst	r30, 7
    3612:	0c 94 6e 1c 	jmp	0x38dc	; 0x38dc <__fp_inf>

00003616 <__addsf3x>:
    3616:	e9 2f       	mov	r30, r25
    3618:	0e 94 96 1c 	call	0x392c	; 0x392c <__fp_split3>
    361c:	58 f3       	brcs	.-42     	; 0x35f4 <__addsf3+0xc>
    361e:	ba 17       	cp	r27, r26
    3620:	62 07       	cpc	r22, r18
    3622:	73 07       	cpc	r23, r19
    3624:	84 07       	cpc	r24, r20
    3626:	95 07       	cpc	r25, r21
    3628:	20 f0       	brcs	.+8      	; 0x3632 <__addsf3x+0x1c>
    362a:	79 f4       	brne	.+30     	; 0x364a <__addsf3x+0x34>
    362c:	a6 f5       	brtc	.+104    	; 0x3696 <__addsf3x+0x80>
    362e:	0c 94 b8 1c 	jmp	0x3970	; 0x3970 <__fp_zero>
    3632:	0e f4       	brtc	.+2      	; 0x3636 <__addsf3x+0x20>
    3634:	e0 95       	com	r30
    3636:	0b 2e       	mov	r0, r27
    3638:	ba 2f       	mov	r27, r26
    363a:	a0 2d       	mov	r26, r0
    363c:	0b 01       	movw	r0, r22
    363e:	b9 01       	movw	r22, r18
    3640:	90 01       	movw	r18, r0
    3642:	0c 01       	movw	r0, r24
    3644:	ca 01       	movw	r24, r20
    3646:	a0 01       	movw	r20, r0
    3648:	11 24       	eor	r1, r1
    364a:	ff 27       	eor	r31, r31
    364c:	59 1b       	sub	r21, r25
    364e:	99 f0       	breq	.+38     	; 0x3676 <__addsf3x+0x60>
    3650:	59 3f       	cpi	r21, 0xF9	; 249
    3652:	50 f4       	brcc	.+20     	; 0x3668 <__addsf3x+0x52>
    3654:	50 3e       	cpi	r21, 0xE0	; 224
    3656:	68 f1       	brcs	.+90     	; 0x36b2 <__addsf3x+0x9c>
    3658:	1a 16       	cp	r1, r26
    365a:	f0 40       	sbci	r31, 0x00	; 0
    365c:	a2 2f       	mov	r26, r18
    365e:	23 2f       	mov	r18, r19
    3660:	34 2f       	mov	r19, r20
    3662:	44 27       	eor	r20, r20
    3664:	58 5f       	subi	r21, 0xF8	; 248
    3666:	f3 cf       	rjmp	.-26     	; 0x364e <__addsf3x+0x38>
    3668:	46 95       	lsr	r20
    366a:	37 95       	ror	r19
    366c:	27 95       	ror	r18
    366e:	a7 95       	ror	r26
    3670:	f0 40       	sbci	r31, 0x00	; 0
    3672:	53 95       	inc	r21
    3674:	c9 f7       	brne	.-14     	; 0x3668 <__addsf3x+0x52>
    3676:	7e f4       	brtc	.+30     	; 0x3696 <__addsf3x+0x80>
    3678:	1f 16       	cp	r1, r31
    367a:	ba 0b       	sbc	r27, r26
    367c:	62 0b       	sbc	r22, r18
    367e:	73 0b       	sbc	r23, r19
    3680:	84 0b       	sbc	r24, r20
    3682:	ba f0       	brmi	.+46     	; 0x36b2 <__addsf3x+0x9c>
    3684:	91 50       	subi	r25, 0x01	; 1
    3686:	a1 f0       	breq	.+40     	; 0x36b0 <__addsf3x+0x9a>
    3688:	ff 0f       	add	r31, r31
    368a:	bb 1f       	adc	r27, r27
    368c:	66 1f       	adc	r22, r22
    368e:	77 1f       	adc	r23, r23
    3690:	88 1f       	adc	r24, r24
    3692:	c2 f7       	brpl	.-16     	; 0x3684 <__addsf3x+0x6e>
    3694:	0e c0       	rjmp	.+28     	; 0x36b2 <__addsf3x+0x9c>
    3696:	ba 0f       	add	r27, r26
    3698:	62 1f       	adc	r22, r18
    369a:	73 1f       	adc	r23, r19
    369c:	84 1f       	adc	r24, r20
    369e:	48 f4       	brcc	.+18     	; 0x36b2 <__addsf3x+0x9c>
    36a0:	87 95       	ror	r24
    36a2:	77 95       	ror	r23
    36a4:	67 95       	ror	r22
    36a6:	b7 95       	ror	r27
    36a8:	f7 95       	ror	r31
    36aa:	9e 3f       	cpi	r25, 0xFE	; 254
    36ac:	08 f0       	brcs	.+2      	; 0x36b0 <__addsf3x+0x9a>
    36ae:	b0 cf       	rjmp	.-160    	; 0x3610 <__addsf3+0x28>
    36b0:	93 95       	inc	r25
    36b2:	88 0f       	add	r24, r24
    36b4:	08 f0       	brcs	.+2      	; 0x36b8 <__addsf3x+0xa2>
    36b6:	99 27       	eor	r25, r25
    36b8:	ee 0f       	add	r30, r30
    36ba:	97 95       	ror	r25
    36bc:	87 95       	ror	r24
    36be:	08 95       	ret

000036c0 <__cmpsf2>:
    36c0:	0e 94 4a 1c 	call	0x3894	; 0x3894 <__fp_cmp>
    36c4:	08 f4       	brcc	.+2      	; 0x36c8 <__cmpsf2+0x8>
    36c6:	81 e0       	ldi	r24, 0x01	; 1
    36c8:	08 95       	ret

000036ca <__divsf3>:
    36ca:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__divsf3x>
    36ce:	0c 94 85 1c 	jmp	0x390a	; 0x390a <__fp_round>
    36d2:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <__fp_pscB>
    36d6:	58 f0       	brcs	.+22     	; 0x36ee <__divsf3+0x24>
    36d8:	0e 94 77 1c 	call	0x38ee	; 0x38ee <__fp_pscA>
    36dc:	40 f0       	brcs	.+16     	; 0x36ee <__divsf3+0x24>
    36de:	29 f4       	brne	.+10     	; 0x36ea <__divsf3+0x20>
    36e0:	5f 3f       	cpi	r21, 0xFF	; 255
    36e2:	29 f0       	breq	.+10     	; 0x36ee <__divsf3+0x24>
    36e4:	0c 94 6e 1c 	jmp	0x38dc	; 0x38dc <__fp_inf>
    36e8:	51 11       	cpse	r21, r1
    36ea:	0c 94 b9 1c 	jmp	0x3972	; 0x3972 <__fp_szero>
    36ee:	0c 94 74 1c 	jmp	0x38e8	; 0x38e8 <__fp_nan>

000036f2 <__divsf3x>:
    36f2:	0e 94 96 1c 	call	0x392c	; 0x392c <__fp_split3>
    36f6:	68 f3       	brcs	.-38     	; 0x36d2 <__divsf3+0x8>

000036f8 <__divsf3_pse>:
    36f8:	99 23       	and	r25, r25
    36fa:	b1 f3       	breq	.-20     	; 0x36e8 <__divsf3+0x1e>
    36fc:	55 23       	and	r21, r21
    36fe:	91 f3       	breq	.-28     	; 0x36e4 <__divsf3+0x1a>
    3700:	95 1b       	sub	r25, r21
    3702:	55 0b       	sbc	r21, r21
    3704:	bb 27       	eor	r27, r27
    3706:	aa 27       	eor	r26, r26
    3708:	62 17       	cp	r22, r18
    370a:	73 07       	cpc	r23, r19
    370c:	84 07       	cpc	r24, r20
    370e:	38 f0       	brcs	.+14     	; 0x371e <__divsf3_pse+0x26>
    3710:	9f 5f       	subi	r25, 0xFF	; 255
    3712:	5f 4f       	sbci	r21, 0xFF	; 255
    3714:	22 0f       	add	r18, r18
    3716:	33 1f       	adc	r19, r19
    3718:	44 1f       	adc	r20, r20
    371a:	aa 1f       	adc	r26, r26
    371c:	a9 f3       	breq	.-22     	; 0x3708 <__divsf3_pse+0x10>
    371e:	35 d0       	rcall	.+106    	; 0x378a <__divsf3_pse+0x92>
    3720:	0e 2e       	mov	r0, r30
    3722:	3a f0       	brmi	.+14     	; 0x3732 <__divsf3_pse+0x3a>
    3724:	e0 e8       	ldi	r30, 0x80	; 128
    3726:	32 d0       	rcall	.+100    	; 0x378c <__divsf3_pse+0x94>
    3728:	91 50       	subi	r25, 0x01	; 1
    372a:	50 40       	sbci	r21, 0x00	; 0
    372c:	e6 95       	lsr	r30
    372e:	00 1c       	adc	r0, r0
    3730:	ca f7       	brpl	.-14     	; 0x3724 <__divsf3_pse+0x2c>
    3732:	2b d0       	rcall	.+86     	; 0x378a <__divsf3_pse+0x92>
    3734:	fe 2f       	mov	r31, r30
    3736:	29 d0       	rcall	.+82     	; 0x378a <__divsf3_pse+0x92>
    3738:	66 0f       	add	r22, r22
    373a:	77 1f       	adc	r23, r23
    373c:	88 1f       	adc	r24, r24
    373e:	bb 1f       	adc	r27, r27
    3740:	26 17       	cp	r18, r22
    3742:	37 07       	cpc	r19, r23
    3744:	48 07       	cpc	r20, r24
    3746:	ab 07       	cpc	r26, r27
    3748:	b0 e8       	ldi	r27, 0x80	; 128
    374a:	09 f0       	breq	.+2      	; 0x374e <__divsf3_pse+0x56>
    374c:	bb 0b       	sbc	r27, r27
    374e:	80 2d       	mov	r24, r0
    3750:	bf 01       	movw	r22, r30
    3752:	ff 27       	eor	r31, r31
    3754:	93 58       	subi	r25, 0x83	; 131
    3756:	5f 4f       	sbci	r21, 0xFF	; 255
    3758:	3a f0       	brmi	.+14     	; 0x3768 <__divsf3_pse+0x70>
    375a:	9e 3f       	cpi	r25, 0xFE	; 254
    375c:	51 05       	cpc	r21, r1
    375e:	78 f0       	brcs	.+30     	; 0x377e <__divsf3_pse+0x86>
    3760:	0c 94 6e 1c 	jmp	0x38dc	; 0x38dc <__fp_inf>
    3764:	0c 94 b9 1c 	jmp	0x3972	; 0x3972 <__fp_szero>
    3768:	5f 3f       	cpi	r21, 0xFF	; 255
    376a:	e4 f3       	brlt	.-8      	; 0x3764 <__divsf3_pse+0x6c>
    376c:	98 3e       	cpi	r25, 0xE8	; 232
    376e:	d4 f3       	brlt	.-12     	; 0x3764 <__divsf3_pse+0x6c>
    3770:	86 95       	lsr	r24
    3772:	77 95       	ror	r23
    3774:	67 95       	ror	r22
    3776:	b7 95       	ror	r27
    3778:	f7 95       	ror	r31
    377a:	9f 5f       	subi	r25, 0xFF	; 255
    377c:	c9 f7       	brne	.-14     	; 0x3770 <__divsf3_pse+0x78>
    377e:	88 0f       	add	r24, r24
    3780:	91 1d       	adc	r25, r1
    3782:	96 95       	lsr	r25
    3784:	87 95       	ror	r24
    3786:	97 f9       	bld	r25, 7
    3788:	08 95       	ret
    378a:	e1 e0       	ldi	r30, 0x01	; 1
    378c:	66 0f       	add	r22, r22
    378e:	77 1f       	adc	r23, r23
    3790:	88 1f       	adc	r24, r24
    3792:	bb 1f       	adc	r27, r27
    3794:	62 17       	cp	r22, r18
    3796:	73 07       	cpc	r23, r19
    3798:	84 07       	cpc	r24, r20
    379a:	ba 07       	cpc	r27, r26
    379c:	20 f0       	brcs	.+8      	; 0x37a6 <__divsf3_pse+0xae>
    379e:	62 1b       	sub	r22, r18
    37a0:	73 0b       	sbc	r23, r19
    37a2:	84 0b       	sbc	r24, r20
    37a4:	ba 0b       	sbc	r27, r26
    37a6:	ee 1f       	adc	r30, r30
    37a8:	88 f7       	brcc	.-30     	; 0x378c <__divsf3_pse+0x94>
    37aa:	e0 95       	com	r30
    37ac:	08 95       	ret

000037ae <__fixsfsi>:
    37ae:	0e 94 de 1b 	call	0x37bc	; 0x37bc <__fixunssfsi>
    37b2:	68 94       	set
    37b4:	b1 11       	cpse	r27, r1
    37b6:	0c 94 b9 1c 	jmp	0x3972	; 0x3972 <__fp_szero>
    37ba:	08 95       	ret

000037bc <__fixunssfsi>:
    37bc:	0e 94 9e 1c 	call	0x393c	; 0x393c <__fp_splitA>
    37c0:	88 f0       	brcs	.+34     	; 0x37e4 <__fixunssfsi+0x28>
    37c2:	9f 57       	subi	r25, 0x7F	; 127
    37c4:	98 f0       	brcs	.+38     	; 0x37ec <__fixunssfsi+0x30>
    37c6:	b9 2f       	mov	r27, r25
    37c8:	99 27       	eor	r25, r25
    37ca:	b7 51       	subi	r27, 0x17	; 23
    37cc:	b0 f0       	brcs	.+44     	; 0x37fa <__fixunssfsi+0x3e>
    37ce:	e1 f0       	breq	.+56     	; 0x3808 <__fixunssfsi+0x4c>
    37d0:	66 0f       	add	r22, r22
    37d2:	77 1f       	adc	r23, r23
    37d4:	88 1f       	adc	r24, r24
    37d6:	99 1f       	adc	r25, r25
    37d8:	1a f0       	brmi	.+6      	; 0x37e0 <__fixunssfsi+0x24>
    37da:	ba 95       	dec	r27
    37dc:	c9 f7       	brne	.-14     	; 0x37d0 <__fixunssfsi+0x14>
    37de:	14 c0       	rjmp	.+40     	; 0x3808 <__fixunssfsi+0x4c>
    37e0:	b1 30       	cpi	r27, 0x01	; 1
    37e2:	91 f0       	breq	.+36     	; 0x3808 <__fixunssfsi+0x4c>
    37e4:	0e 94 b8 1c 	call	0x3970	; 0x3970 <__fp_zero>
    37e8:	b1 e0       	ldi	r27, 0x01	; 1
    37ea:	08 95       	ret
    37ec:	0c 94 b8 1c 	jmp	0x3970	; 0x3970 <__fp_zero>
    37f0:	67 2f       	mov	r22, r23
    37f2:	78 2f       	mov	r23, r24
    37f4:	88 27       	eor	r24, r24
    37f6:	b8 5f       	subi	r27, 0xF8	; 248
    37f8:	39 f0       	breq	.+14     	; 0x3808 <__fixunssfsi+0x4c>
    37fa:	b9 3f       	cpi	r27, 0xF9	; 249
    37fc:	cc f3       	brlt	.-14     	; 0x37f0 <__fixunssfsi+0x34>
    37fe:	86 95       	lsr	r24
    3800:	77 95       	ror	r23
    3802:	67 95       	ror	r22
    3804:	b3 95       	inc	r27
    3806:	d9 f7       	brne	.-10     	; 0x37fe <__fixunssfsi+0x42>
    3808:	3e f4       	brtc	.+14     	; 0x3818 <__fixunssfsi+0x5c>
    380a:	90 95       	com	r25
    380c:	80 95       	com	r24
    380e:	70 95       	com	r23
    3810:	61 95       	neg	r22
    3812:	7f 4f       	sbci	r23, 0xFF	; 255
    3814:	8f 4f       	sbci	r24, 0xFF	; 255
    3816:	9f 4f       	sbci	r25, 0xFF	; 255
    3818:	08 95       	ret

0000381a <__floatunsisf>:
    381a:	e8 94       	clt
    381c:	09 c0       	rjmp	.+18     	; 0x3830 <__floatsisf+0x12>

0000381e <__floatsisf>:
    381e:	97 fb       	bst	r25, 7
    3820:	3e f4       	brtc	.+14     	; 0x3830 <__floatsisf+0x12>
    3822:	90 95       	com	r25
    3824:	80 95       	com	r24
    3826:	70 95       	com	r23
    3828:	61 95       	neg	r22
    382a:	7f 4f       	sbci	r23, 0xFF	; 255
    382c:	8f 4f       	sbci	r24, 0xFF	; 255
    382e:	9f 4f       	sbci	r25, 0xFF	; 255
    3830:	99 23       	and	r25, r25
    3832:	a9 f0       	breq	.+42     	; 0x385e <__floatsisf+0x40>
    3834:	f9 2f       	mov	r31, r25
    3836:	96 e9       	ldi	r25, 0x96	; 150
    3838:	bb 27       	eor	r27, r27
    383a:	93 95       	inc	r25
    383c:	f6 95       	lsr	r31
    383e:	87 95       	ror	r24
    3840:	77 95       	ror	r23
    3842:	67 95       	ror	r22
    3844:	b7 95       	ror	r27
    3846:	f1 11       	cpse	r31, r1
    3848:	f8 cf       	rjmp	.-16     	; 0x383a <__floatsisf+0x1c>
    384a:	fa f4       	brpl	.+62     	; 0x388a <__floatsisf+0x6c>
    384c:	bb 0f       	add	r27, r27
    384e:	11 f4       	brne	.+4      	; 0x3854 <__floatsisf+0x36>
    3850:	60 ff       	sbrs	r22, 0
    3852:	1b c0       	rjmp	.+54     	; 0x388a <__floatsisf+0x6c>
    3854:	6f 5f       	subi	r22, 0xFF	; 255
    3856:	7f 4f       	sbci	r23, 0xFF	; 255
    3858:	8f 4f       	sbci	r24, 0xFF	; 255
    385a:	9f 4f       	sbci	r25, 0xFF	; 255
    385c:	16 c0       	rjmp	.+44     	; 0x388a <__floatsisf+0x6c>
    385e:	88 23       	and	r24, r24
    3860:	11 f0       	breq	.+4      	; 0x3866 <__floatsisf+0x48>
    3862:	96 e9       	ldi	r25, 0x96	; 150
    3864:	11 c0       	rjmp	.+34     	; 0x3888 <__floatsisf+0x6a>
    3866:	77 23       	and	r23, r23
    3868:	21 f0       	breq	.+8      	; 0x3872 <__floatsisf+0x54>
    386a:	9e e8       	ldi	r25, 0x8E	; 142
    386c:	87 2f       	mov	r24, r23
    386e:	76 2f       	mov	r23, r22
    3870:	05 c0       	rjmp	.+10     	; 0x387c <__floatsisf+0x5e>
    3872:	66 23       	and	r22, r22
    3874:	71 f0       	breq	.+28     	; 0x3892 <__floatsisf+0x74>
    3876:	96 e8       	ldi	r25, 0x86	; 134
    3878:	86 2f       	mov	r24, r22
    387a:	70 e0       	ldi	r23, 0x00	; 0
    387c:	60 e0       	ldi	r22, 0x00	; 0
    387e:	2a f0       	brmi	.+10     	; 0x388a <__floatsisf+0x6c>
    3880:	9a 95       	dec	r25
    3882:	66 0f       	add	r22, r22
    3884:	77 1f       	adc	r23, r23
    3886:	88 1f       	adc	r24, r24
    3888:	da f7       	brpl	.-10     	; 0x3880 <__floatsisf+0x62>
    388a:	88 0f       	add	r24, r24
    388c:	96 95       	lsr	r25
    388e:	87 95       	ror	r24
    3890:	97 f9       	bld	r25, 7
    3892:	08 95       	ret

00003894 <__fp_cmp>:
    3894:	99 0f       	add	r25, r25
    3896:	00 08       	sbc	r0, r0
    3898:	55 0f       	add	r21, r21
    389a:	aa 0b       	sbc	r26, r26
    389c:	e0 e8       	ldi	r30, 0x80	; 128
    389e:	fe ef       	ldi	r31, 0xFE	; 254
    38a0:	16 16       	cp	r1, r22
    38a2:	17 06       	cpc	r1, r23
    38a4:	e8 07       	cpc	r30, r24
    38a6:	f9 07       	cpc	r31, r25
    38a8:	c0 f0       	brcs	.+48     	; 0x38da <__fp_cmp+0x46>
    38aa:	12 16       	cp	r1, r18
    38ac:	13 06       	cpc	r1, r19
    38ae:	e4 07       	cpc	r30, r20
    38b0:	f5 07       	cpc	r31, r21
    38b2:	98 f0       	brcs	.+38     	; 0x38da <__fp_cmp+0x46>
    38b4:	62 1b       	sub	r22, r18
    38b6:	73 0b       	sbc	r23, r19
    38b8:	84 0b       	sbc	r24, r20
    38ba:	95 0b       	sbc	r25, r21
    38bc:	39 f4       	brne	.+14     	; 0x38cc <__fp_cmp+0x38>
    38be:	0a 26       	eor	r0, r26
    38c0:	61 f0       	breq	.+24     	; 0x38da <__fp_cmp+0x46>
    38c2:	23 2b       	or	r18, r19
    38c4:	24 2b       	or	r18, r20
    38c6:	25 2b       	or	r18, r21
    38c8:	21 f4       	brne	.+8      	; 0x38d2 <__fp_cmp+0x3e>
    38ca:	08 95       	ret
    38cc:	0a 26       	eor	r0, r26
    38ce:	09 f4       	brne	.+2      	; 0x38d2 <__fp_cmp+0x3e>
    38d0:	a1 40       	sbci	r26, 0x01	; 1
    38d2:	a6 95       	lsr	r26
    38d4:	8f ef       	ldi	r24, 0xFF	; 255
    38d6:	81 1d       	adc	r24, r1
    38d8:	81 1d       	adc	r24, r1
    38da:	08 95       	ret

000038dc <__fp_inf>:
    38dc:	97 f9       	bld	r25, 7
    38de:	9f 67       	ori	r25, 0x7F	; 127
    38e0:	80 e8       	ldi	r24, 0x80	; 128
    38e2:	70 e0       	ldi	r23, 0x00	; 0
    38e4:	60 e0       	ldi	r22, 0x00	; 0
    38e6:	08 95       	ret

000038e8 <__fp_nan>:
    38e8:	9f ef       	ldi	r25, 0xFF	; 255
    38ea:	80 ec       	ldi	r24, 0xC0	; 192
    38ec:	08 95       	ret

000038ee <__fp_pscA>:
    38ee:	00 24       	eor	r0, r0
    38f0:	0a 94       	dec	r0
    38f2:	16 16       	cp	r1, r22
    38f4:	17 06       	cpc	r1, r23
    38f6:	18 06       	cpc	r1, r24
    38f8:	09 06       	cpc	r0, r25
    38fa:	08 95       	ret

000038fc <__fp_pscB>:
    38fc:	00 24       	eor	r0, r0
    38fe:	0a 94       	dec	r0
    3900:	12 16       	cp	r1, r18
    3902:	13 06       	cpc	r1, r19
    3904:	14 06       	cpc	r1, r20
    3906:	05 06       	cpc	r0, r21
    3908:	08 95       	ret

0000390a <__fp_round>:
    390a:	09 2e       	mov	r0, r25
    390c:	03 94       	inc	r0
    390e:	00 0c       	add	r0, r0
    3910:	11 f4       	brne	.+4      	; 0x3916 <__fp_round+0xc>
    3912:	88 23       	and	r24, r24
    3914:	52 f0       	brmi	.+20     	; 0x392a <__fp_round+0x20>
    3916:	bb 0f       	add	r27, r27
    3918:	40 f4       	brcc	.+16     	; 0x392a <__fp_round+0x20>
    391a:	bf 2b       	or	r27, r31
    391c:	11 f4       	brne	.+4      	; 0x3922 <__fp_round+0x18>
    391e:	60 ff       	sbrs	r22, 0
    3920:	04 c0       	rjmp	.+8      	; 0x392a <__fp_round+0x20>
    3922:	6f 5f       	subi	r22, 0xFF	; 255
    3924:	7f 4f       	sbci	r23, 0xFF	; 255
    3926:	8f 4f       	sbci	r24, 0xFF	; 255
    3928:	9f 4f       	sbci	r25, 0xFF	; 255
    392a:	08 95       	ret

0000392c <__fp_split3>:
    392c:	57 fd       	sbrc	r21, 7
    392e:	90 58       	subi	r25, 0x80	; 128
    3930:	44 0f       	add	r20, r20
    3932:	55 1f       	adc	r21, r21
    3934:	59 f0       	breq	.+22     	; 0x394c <__fp_splitA+0x10>
    3936:	5f 3f       	cpi	r21, 0xFF	; 255
    3938:	71 f0       	breq	.+28     	; 0x3956 <__fp_splitA+0x1a>
    393a:	47 95       	ror	r20

0000393c <__fp_splitA>:
    393c:	88 0f       	add	r24, r24
    393e:	97 fb       	bst	r25, 7
    3940:	99 1f       	adc	r25, r25
    3942:	61 f0       	breq	.+24     	; 0x395c <__fp_splitA+0x20>
    3944:	9f 3f       	cpi	r25, 0xFF	; 255
    3946:	79 f0       	breq	.+30     	; 0x3966 <__fp_splitA+0x2a>
    3948:	87 95       	ror	r24
    394a:	08 95       	ret
    394c:	12 16       	cp	r1, r18
    394e:	13 06       	cpc	r1, r19
    3950:	14 06       	cpc	r1, r20
    3952:	55 1f       	adc	r21, r21
    3954:	f2 cf       	rjmp	.-28     	; 0x393a <__fp_split3+0xe>
    3956:	46 95       	lsr	r20
    3958:	f1 df       	rcall	.-30     	; 0x393c <__fp_splitA>
    395a:	08 c0       	rjmp	.+16     	; 0x396c <__fp_splitA+0x30>
    395c:	16 16       	cp	r1, r22
    395e:	17 06       	cpc	r1, r23
    3960:	18 06       	cpc	r1, r24
    3962:	99 1f       	adc	r25, r25
    3964:	f1 cf       	rjmp	.-30     	; 0x3948 <__fp_splitA+0xc>
    3966:	86 95       	lsr	r24
    3968:	71 05       	cpc	r23, r1
    396a:	61 05       	cpc	r22, r1
    396c:	08 94       	sec
    396e:	08 95       	ret

00003970 <__fp_zero>:
    3970:	e8 94       	clt

00003972 <__fp_szero>:
    3972:	bb 27       	eor	r27, r27
    3974:	66 27       	eor	r22, r22
    3976:	77 27       	eor	r23, r23
    3978:	cb 01       	movw	r24, r22
    397a:	97 f9       	bld	r25, 7
    397c:	08 95       	ret

0000397e <__gesf2>:
    397e:	0e 94 4a 1c 	call	0x3894	; 0x3894 <__fp_cmp>
    3982:	08 f4       	brcc	.+2      	; 0x3986 <__gesf2+0x8>
    3984:	8f ef       	ldi	r24, 0xFF	; 255
    3986:	08 95       	ret

00003988 <__mulsf3>:
    3988:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <__mulsf3x>
    398c:	0c 94 85 1c 	jmp	0x390a	; 0x390a <__fp_round>
    3990:	0e 94 77 1c 	call	0x38ee	; 0x38ee <__fp_pscA>
    3994:	38 f0       	brcs	.+14     	; 0x39a4 <__mulsf3+0x1c>
    3996:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <__fp_pscB>
    399a:	20 f0       	brcs	.+8      	; 0x39a4 <__mulsf3+0x1c>
    399c:	95 23       	and	r25, r21
    399e:	11 f0       	breq	.+4      	; 0x39a4 <__mulsf3+0x1c>
    39a0:	0c 94 6e 1c 	jmp	0x38dc	; 0x38dc <__fp_inf>
    39a4:	0c 94 74 1c 	jmp	0x38e8	; 0x38e8 <__fp_nan>
    39a8:	11 24       	eor	r1, r1
    39aa:	0c 94 b9 1c 	jmp	0x3972	; 0x3972 <__fp_szero>

000039ae <__mulsf3x>:
    39ae:	0e 94 96 1c 	call	0x392c	; 0x392c <__fp_split3>
    39b2:	70 f3       	brcs	.-36     	; 0x3990 <__mulsf3+0x8>

000039b4 <__mulsf3_pse>:
    39b4:	95 9f       	mul	r25, r21
    39b6:	c1 f3       	breq	.-16     	; 0x39a8 <__mulsf3+0x20>
    39b8:	95 0f       	add	r25, r21
    39ba:	50 e0       	ldi	r21, 0x00	; 0
    39bc:	55 1f       	adc	r21, r21
    39be:	62 9f       	mul	r22, r18
    39c0:	f0 01       	movw	r30, r0
    39c2:	72 9f       	mul	r23, r18
    39c4:	bb 27       	eor	r27, r27
    39c6:	f0 0d       	add	r31, r0
    39c8:	b1 1d       	adc	r27, r1
    39ca:	63 9f       	mul	r22, r19
    39cc:	aa 27       	eor	r26, r26
    39ce:	f0 0d       	add	r31, r0
    39d0:	b1 1d       	adc	r27, r1
    39d2:	aa 1f       	adc	r26, r26
    39d4:	64 9f       	mul	r22, r20
    39d6:	66 27       	eor	r22, r22
    39d8:	b0 0d       	add	r27, r0
    39da:	a1 1d       	adc	r26, r1
    39dc:	66 1f       	adc	r22, r22
    39de:	82 9f       	mul	r24, r18
    39e0:	22 27       	eor	r18, r18
    39e2:	b0 0d       	add	r27, r0
    39e4:	a1 1d       	adc	r26, r1
    39e6:	62 1f       	adc	r22, r18
    39e8:	73 9f       	mul	r23, r19
    39ea:	b0 0d       	add	r27, r0
    39ec:	a1 1d       	adc	r26, r1
    39ee:	62 1f       	adc	r22, r18
    39f0:	83 9f       	mul	r24, r19
    39f2:	a0 0d       	add	r26, r0
    39f4:	61 1d       	adc	r22, r1
    39f6:	22 1f       	adc	r18, r18
    39f8:	74 9f       	mul	r23, r20
    39fa:	33 27       	eor	r19, r19
    39fc:	a0 0d       	add	r26, r0
    39fe:	61 1d       	adc	r22, r1
    3a00:	23 1f       	adc	r18, r19
    3a02:	84 9f       	mul	r24, r20
    3a04:	60 0d       	add	r22, r0
    3a06:	21 1d       	adc	r18, r1
    3a08:	82 2f       	mov	r24, r18
    3a0a:	76 2f       	mov	r23, r22
    3a0c:	6a 2f       	mov	r22, r26
    3a0e:	11 24       	eor	r1, r1
    3a10:	9f 57       	subi	r25, 0x7F	; 127
    3a12:	50 40       	sbci	r21, 0x00	; 0
    3a14:	9a f0       	brmi	.+38     	; 0x3a3c <__mulsf3_pse+0x88>
    3a16:	f1 f0       	breq	.+60     	; 0x3a54 <__mulsf3_pse+0xa0>
    3a18:	88 23       	and	r24, r24
    3a1a:	4a f0       	brmi	.+18     	; 0x3a2e <__mulsf3_pse+0x7a>
    3a1c:	ee 0f       	add	r30, r30
    3a1e:	ff 1f       	adc	r31, r31
    3a20:	bb 1f       	adc	r27, r27
    3a22:	66 1f       	adc	r22, r22
    3a24:	77 1f       	adc	r23, r23
    3a26:	88 1f       	adc	r24, r24
    3a28:	91 50       	subi	r25, 0x01	; 1
    3a2a:	50 40       	sbci	r21, 0x00	; 0
    3a2c:	a9 f7       	brne	.-22     	; 0x3a18 <__mulsf3_pse+0x64>
    3a2e:	9e 3f       	cpi	r25, 0xFE	; 254
    3a30:	51 05       	cpc	r21, r1
    3a32:	80 f0       	brcs	.+32     	; 0x3a54 <__mulsf3_pse+0xa0>
    3a34:	0c 94 6e 1c 	jmp	0x38dc	; 0x38dc <__fp_inf>
    3a38:	0c 94 b9 1c 	jmp	0x3972	; 0x3972 <__fp_szero>
    3a3c:	5f 3f       	cpi	r21, 0xFF	; 255
    3a3e:	e4 f3       	brlt	.-8      	; 0x3a38 <__mulsf3_pse+0x84>
    3a40:	98 3e       	cpi	r25, 0xE8	; 232
    3a42:	d4 f3       	brlt	.-12     	; 0x3a38 <__mulsf3_pse+0x84>
    3a44:	86 95       	lsr	r24
    3a46:	77 95       	ror	r23
    3a48:	67 95       	ror	r22
    3a4a:	b7 95       	ror	r27
    3a4c:	f7 95       	ror	r31
    3a4e:	e7 95       	ror	r30
    3a50:	9f 5f       	subi	r25, 0xFF	; 255
    3a52:	c1 f7       	brne	.-16     	; 0x3a44 <__mulsf3_pse+0x90>
    3a54:	fe 2b       	or	r31, r30
    3a56:	88 0f       	add	r24, r24
    3a58:	91 1d       	adc	r25, r1
    3a5a:	96 95       	lsr	r25
    3a5c:	87 95       	ror	r24
    3a5e:	97 f9       	bld	r25, 7
    3a60:	08 95       	ret
    3a62:	19 f4       	brne	.+6      	; 0x3a6a <__mulsf3_pse+0xb6>
    3a64:	16 f4       	brtc	.+4      	; 0x3a6a <__mulsf3_pse+0xb6>
    3a66:	0c 94 74 1c 	jmp	0x38e8	; 0x38e8 <__fp_nan>
    3a6a:	0c 94 77 1d 	jmp	0x3aee	; 0x3aee <__fp_mpack>

00003a6e <sqrt>:
    3a6e:	0e 94 9e 1c 	call	0x393c	; 0x393c <__fp_splitA>
    3a72:	b8 f3       	brcs	.-18     	; 0x3a62 <__mulsf3_pse+0xae>
    3a74:	99 23       	and	r25, r25
    3a76:	c9 f3       	breq	.-14     	; 0x3a6a <__mulsf3_pse+0xb6>
    3a78:	b6 f3       	brts	.-20     	; 0x3a66 <__mulsf3_pse+0xb2>
    3a7a:	9f 57       	subi	r25, 0x7F	; 127
    3a7c:	55 0b       	sbc	r21, r21
    3a7e:	87 ff       	sbrs	r24, 7
    3a80:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <__fp_norm2>
    3a84:	00 24       	eor	r0, r0
    3a86:	a0 e6       	ldi	r26, 0x60	; 96
    3a88:	40 ea       	ldi	r20, 0xA0	; 160
    3a8a:	90 01       	movw	r18, r0
    3a8c:	80 58       	subi	r24, 0x80	; 128
    3a8e:	56 95       	lsr	r21
    3a90:	97 95       	ror	r25
    3a92:	28 f4       	brcc	.+10     	; 0x3a9e <sqrt+0x30>
    3a94:	80 5c       	subi	r24, 0xC0	; 192
    3a96:	66 0f       	add	r22, r22
    3a98:	77 1f       	adc	r23, r23
    3a9a:	88 1f       	adc	r24, r24
    3a9c:	20 f0       	brcs	.+8      	; 0x3aa6 <sqrt+0x38>
    3a9e:	26 17       	cp	r18, r22
    3aa0:	37 07       	cpc	r19, r23
    3aa2:	48 07       	cpc	r20, r24
    3aa4:	30 f4       	brcc	.+12     	; 0x3ab2 <sqrt+0x44>
    3aa6:	62 1b       	sub	r22, r18
    3aa8:	73 0b       	sbc	r23, r19
    3aaa:	84 0b       	sbc	r24, r20
    3aac:	20 29       	or	r18, r0
    3aae:	31 29       	or	r19, r1
    3ab0:	4a 2b       	or	r20, r26
    3ab2:	a6 95       	lsr	r26
    3ab4:	17 94       	ror	r1
    3ab6:	07 94       	ror	r0
    3ab8:	20 25       	eor	r18, r0
    3aba:	31 25       	eor	r19, r1
    3abc:	4a 27       	eor	r20, r26
    3abe:	58 f7       	brcc	.-42     	; 0x3a96 <sqrt+0x28>
    3ac0:	66 0f       	add	r22, r22
    3ac2:	77 1f       	adc	r23, r23
    3ac4:	88 1f       	adc	r24, r24
    3ac6:	20 f0       	brcs	.+8      	; 0x3ad0 <sqrt+0x62>
    3ac8:	26 17       	cp	r18, r22
    3aca:	37 07       	cpc	r19, r23
    3acc:	48 07       	cpc	r20, r24
    3ace:	30 f4       	brcc	.+12     	; 0x3adc <sqrt+0x6e>
    3ad0:	62 0b       	sbc	r22, r18
    3ad2:	73 0b       	sbc	r23, r19
    3ad4:	84 0b       	sbc	r24, r20
    3ad6:	20 0d       	add	r18, r0
    3ad8:	31 1d       	adc	r19, r1
    3ada:	41 1d       	adc	r20, r1
    3adc:	a0 95       	com	r26
    3ade:	81 f7       	brne	.-32     	; 0x3ac0 <sqrt+0x52>
    3ae0:	b9 01       	movw	r22, r18
    3ae2:	84 2f       	mov	r24, r20
    3ae4:	91 58       	subi	r25, 0x81	; 129
    3ae6:	88 0f       	add	r24, r24
    3ae8:	96 95       	lsr	r25
    3aea:	87 95       	ror	r24
    3aec:	08 95       	ret

00003aee <__fp_mpack>:
    3aee:	9f 3f       	cpi	r25, 0xFF	; 255
    3af0:	31 f0       	breq	.+12     	; 0x3afe <__fp_mpack_finite+0xc>

00003af2 <__fp_mpack_finite>:
    3af2:	91 50       	subi	r25, 0x01	; 1
    3af4:	20 f4       	brcc	.+8      	; 0x3afe <__fp_mpack_finite+0xc>
    3af6:	87 95       	ror	r24
    3af8:	77 95       	ror	r23
    3afa:	67 95       	ror	r22
    3afc:	b7 95       	ror	r27
    3afe:	88 0f       	add	r24, r24
    3b00:	91 1d       	adc	r25, r1
    3b02:	96 95       	lsr	r25
    3b04:	87 95       	ror	r24
    3b06:	97 f9       	bld	r25, 7
    3b08:	08 95       	ret

00003b0a <__fp_norm2>:
    3b0a:	91 50       	subi	r25, 0x01	; 1
    3b0c:	50 40       	sbci	r21, 0x00	; 0
    3b0e:	66 0f       	add	r22, r22
    3b10:	77 1f       	adc	r23, r23
    3b12:	88 1f       	adc	r24, r24
    3b14:	d2 f7       	brpl	.-12     	; 0x3b0a <__fp_norm2>
    3b16:	08 95       	ret

00003b18 <__divmodhi4>:
    3b18:	97 fb       	bst	r25, 7
    3b1a:	07 2e       	mov	r0, r23
    3b1c:	16 f4       	brtc	.+4      	; 0x3b22 <__divmodhi4+0xa>
    3b1e:	00 94       	com	r0
    3b20:	07 d0       	rcall	.+14     	; 0x3b30 <__divmodhi4_neg1>
    3b22:	77 fd       	sbrc	r23, 7
    3b24:	09 d0       	rcall	.+18     	; 0x3b38 <__divmodhi4_neg2>
    3b26:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <__udivmodhi4>
    3b2a:	07 fc       	sbrc	r0, 7
    3b2c:	05 d0       	rcall	.+10     	; 0x3b38 <__divmodhi4_neg2>
    3b2e:	3e f4       	brtc	.+14     	; 0x3b3e <__divmodhi4_exit>

00003b30 <__divmodhi4_neg1>:
    3b30:	90 95       	com	r25
    3b32:	81 95       	neg	r24
    3b34:	9f 4f       	sbci	r25, 0xFF	; 255
    3b36:	08 95       	ret

00003b38 <__divmodhi4_neg2>:
    3b38:	70 95       	com	r23
    3b3a:	61 95       	neg	r22
    3b3c:	7f 4f       	sbci	r23, 0xFF	; 255

00003b3e <__divmodhi4_exit>:
    3b3e:	08 95       	ret

00003b40 <__tablejump2__>:
    3b40:	ee 0f       	add	r30, r30
    3b42:	ff 1f       	adc	r31, r31
    3b44:	88 1f       	adc	r24, r24
    3b46:	8b bf       	out	0x3b, r24	; 59
    3b48:	07 90       	elpm	r0, Z+
    3b4a:	f6 91       	elpm	r31, Z
    3b4c:	e0 2d       	mov	r30, r0
    3b4e:	19 94       	eijmp

00003b50 <__udivmodhi4>:
    3b50:	aa 1b       	sub	r26, r26
    3b52:	bb 1b       	sub	r27, r27
    3b54:	51 e1       	ldi	r21, 0x11	; 17
    3b56:	07 c0       	rjmp	.+14     	; 0x3b66 <__udivmodhi4_ep>

00003b58 <__udivmodhi4_loop>:
    3b58:	aa 1f       	adc	r26, r26
    3b5a:	bb 1f       	adc	r27, r27
    3b5c:	a6 17       	cp	r26, r22
    3b5e:	b7 07       	cpc	r27, r23
    3b60:	10 f0       	brcs	.+4      	; 0x3b66 <__udivmodhi4_ep>
    3b62:	a6 1b       	sub	r26, r22
    3b64:	b7 0b       	sbc	r27, r23

00003b66 <__udivmodhi4_ep>:
    3b66:	88 1f       	adc	r24, r24
    3b68:	99 1f       	adc	r25, r25
    3b6a:	5a 95       	dec	r21
    3b6c:	a9 f7       	brne	.-22     	; 0x3b58 <__udivmodhi4_loop>
    3b6e:	80 95       	com	r24
    3b70:	90 95       	com	r25
    3b72:	bc 01       	movw	r22, r24
    3b74:	cd 01       	movw	r24, r26
    3b76:	08 95       	ret

00003b78 <memcpy>:
    3b78:	fb 01       	movw	r30, r22
    3b7a:	dc 01       	movw	r26, r24
    3b7c:	02 c0       	rjmp	.+4      	; 0x3b82 <memcpy+0xa>
    3b7e:	01 90       	ld	r0, Z+
    3b80:	0d 92       	st	X+, r0
    3b82:	41 50       	subi	r20, 0x01	; 1
    3b84:	50 40       	sbci	r21, 0x00	; 0
    3b86:	d8 f7       	brcc	.-10     	; 0x3b7e <memcpy+0x6>
    3b88:	08 95       	ret

00003b8a <memset>:
    3b8a:	dc 01       	movw	r26, r24
    3b8c:	01 c0       	rjmp	.+2      	; 0x3b90 <memset+0x6>
    3b8e:	6d 93       	st	X+, r22
    3b90:	41 50       	subi	r20, 0x01	; 1
    3b92:	50 40       	sbci	r21, 0x00	; 0
    3b94:	e0 f7       	brcc	.-8      	; 0x3b8e <memset+0x4>
    3b96:	08 95       	ret

00003b98 <__itoa_ncheck>:
    3b98:	bb 27       	eor	r27, r27
    3b9a:	4a 30       	cpi	r20, 0x0A	; 10
    3b9c:	31 f4       	brne	.+12     	; 0x3baa <__itoa_ncheck+0x12>
    3b9e:	99 23       	and	r25, r25
    3ba0:	22 f4       	brpl	.+8      	; 0x3baa <__itoa_ncheck+0x12>
    3ba2:	bd e2       	ldi	r27, 0x2D	; 45
    3ba4:	90 95       	com	r25
    3ba6:	81 95       	neg	r24
    3ba8:	9f 4f       	sbci	r25, 0xFF	; 255
    3baa:	0c 94 d8 1d 	jmp	0x3bb0	; 0x3bb0 <__utoa_common>

00003bae <__utoa_ncheck>:
    3bae:	bb 27       	eor	r27, r27

00003bb0 <__utoa_common>:
    3bb0:	fb 01       	movw	r30, r22
    3bb2:	55 27       	eor	r21, r21
    3bb4:	aa 27       	eor	r26, r26
    3bb6:	88 0f       	add	r24, r24
    3bb8:	99 1f       	adc	r25, r25
    3bba:	aa 1f       	adc	r26, r26
    3bbc:	a4 17       	cp	r26, r20
    3bbe:	10 f0       	brcs	.+4      	; 0x3bc4 <__utoa_common+0x14>
    3bc0:	a4 1b       	sub	r26, r20
    3bc2:	83 95       	inc	r24
    3bc4:	50 51       	subi	r21, 0x10	; 16
    3bc6:	b9 f7       	brne	.-18     	; 0x3bb6 <__utoa_common+0x6>
    3bc8:	a0 5d       	subi	r26, 0xD0	; 208
    3bca:	aa 33       	cpi	r26, 0x3A	; 58
    3bcc:	08 f0       	brcs	.+2      	; 0x3bd0 <__utoa_common+0x20>
    3bce:	a9 5d       	subi	r26, 0xD9	; 217
    3bd0:	a1 93       	st	Z+, r26
    3bd2:	00 97       	sbiw	r24, 0x00	; 0
    3bd4:	79 f7       	brne	.-34     	; 0x3bb4 <__utoa_common+0x4>
    3bd6:	b1 11       	cpse	r27, r1
    3bd8:	b1 93       	st	Z+, r27
    3bda:	11 92       	st	Z+, r1
    3bdc:	cb 01       	movw	r24, r22
    3bde:	0c 94 34 20 	jmp	0x4068	; 0x4068 <strrev>

00003be2 <sprintf>:
    3be2:	0f 93       	push	r16
    3be4:	1f 93       	push	r17
    3be6:	cf 93       	push	r28
    3be8:	df 93       	push	r29
    3bea:	cd b7       	in	r28, 0x3d	; 61
    3bec:	de b7       	in	r29, 0x3e	; 62
    3bee:	2e 97       	sbiw	r28, 0x0e	; 14
    3bf0:	cd bf       	out	0x3d, r28	; 61
    3bf2:	de bf       	out	0x3e, r29	; 62
    3bf4:	0e 89       	ldd	r16, Y+22	; 0x16
    3bf6:	1f 89       	ldd	r17, Y+23	; 0x17
    3bf8:	86 e0       	ldi	r24, 0x06	; 6
    3bfa:	8c 83       	std	Y+4, r24	; 0x04
    3bfc:	09 83       	std	Y+1, r16	; 0x01
    3bfe:	1a 83       	std	Y+2, r17	; 0x02
    3c00:	8f ef       	ldi	r24, 0xFF	; 255
    3c02:	9f e7       	ldi	r25, 0x7F	; 127
    3c04:	8d 83       	std	Y+5, r24	; 0x05
    3c06:	9e 83       	std	Y+6, r25	; 0x06
    3c08:	ae 01       	movw	r20, r28
    3c0a:	46 5e       	subi	r20, 0xE6	; 230
    3c0c:	5f 4f       	sbci	r21, 0xFF	; 255
    3c0e:	68 8d       	ldd	r22, Y+24	; 0x18
    3c10:	79 8d       	ldd	r23, Y+25	; 0x19
    3c12:	ce 01       	movw	r24, r28
    3c14:	01 96       	adiw	r24, 0x01	; 1
    3c16:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <vfprintf>
    3c1a:	ef 81       	ldd	r30, Y+7	; 0x07
    3c1c:	f8 85       	ldd	r31, Y+8	; 0x08
    3c1e:	e0 0f       	add	r30, r16
    3c20:	f1 1f       	adc	r31, r17
    3c22:	10 82       	st	Z, r1
    3c24:	2e 96       	adiw	r28, 0x0e	; 14
    3c26:	cd bf       	out	0x3d, r28	; 61
    3c28:	de bf       	out	0x3e, r29	; 62
    3c2a:	df 91       	pop	r29
    3c2c:	cf 91       	pop	r28
    3c2e:	1f 91       	pop	r17
    3c30:	0f 91       	pop	r16
    3c32:	08 95       	ret

00003c34 <vfprintf>:
    3c34:	2f 92       	push	r2
    3c36:	3f 92       	push	r3
    3c38:	4f 92       	push	r4
    3c3a:	5f 92       	push	r5
    3c3c:	6f 92       	push	r6
    3c3e:	7f 92       	push	r7
    3c40:	8f 92       	push	r8
    3c42:	9f 92       	push	r9
    3c44:	af 92       	push	r10
    3c46:	bf 92       	push	r11
    3c48:	cf 92       	push	r12
    3c4a:	df 92       	push	r13
    3c4c:	ef 92       	push	r14
    3c4e:	ff 92       	push	r15
    3c50:	0f 93       	push	r16
    3c52:	1f 93       	push	r17
    3c54:	cf 93       	push	r28
    3c56:	df 93       	push	r29
    3c58:	cd b7       	in	r28, 0x3d	; 61
    3c5a:	de b7       	in	r29, 0x3e	; 62
    3c5c:	2b 97       	sbiw	r28, 0x0b	; 11
    3c5e:	cd bf       	out	0x3d, r28	; 61
    3c60:	de bf       	out	0x3e, r29	; 62
    3c62:	6c 01       	movw	r12, r24
    3c64:	7b 01       	movw	r14, r22
    3c66:	8a 01       	movw	r16, r20
    3c68:	fc 01       	movw	r30, r24
    3c6a:	16 82       	std	Z+6, r1	; 0x06
    3c6c:	17 82       	std	Z+7, r1	; 0x07
    3c6e:	83 81       	ldd	r24, Z+3	; 0x03
    3c70:	81 ff       	sbrs	r24, 1
    3c72:	cc c1       	rjmp	.+920    	; 0x400c <__stack+0xd>
    3c74:	ce 01       	movw	r24, r28
    3c76:	01 96       	adiw	r24, 0x01	; 1
    3c78:	3c 01       	movw	r6, r24
    3c7a:	f6 01       	movw	r30, r12
    3c7c:	93 81       	ldd	r25, Z+3	; 0x03
    3c7e:	f7 01       	movw	r30, r14
    3c80:	93 fd       	sbrc	r25, 3
    3c82:	85 91       	lpm	r24, Z+
    3c84:	93 ff       	sbrs	r25, 3
    3c86:	81 91       	ld	r24, Z+
    3c88:	7f 01       	movw	r14, r30
    3c8a:	88 23       	and	r24, r24
    3c8c:	09 f4       	brne	.+2      	; 0x3c90 <vfprintf+0x5c>
    3c8e:	ba c1       	rjmp	.+884    	; 0x4004 <__stack+0x5>
    3c90:	85 32       	cpi	r24, 0x25	; 37
    3c92:	39 f4       	brne	.+14     	; 0x3ca2 <vfprintf+0x6e>
    3c94:	93 fd       	sbrc	r25, 3
    3c96:	85 91       	lpm	r24, Z+
    3c98:	93 ff       	sbrs	r25, 3
    3c9a:	81 91       	ld	r24, Z+
    3c9c:	7f 01       	movw	r14, r30
    3c9e:	85 32       	cpi	r24, 0x25	; 37
    3ca0:	29 f4       	brne	.+10     	; 0x3cac <vfprintf+0x78>
    3ca2:	b6 01       	movw	r22, r12
    3ca4:	90 e0       	ldi	r25, 0x00	; 0
    3ca6:	0e 94 44 20 	call	0x4088	; 0x4088 <fputc>
    3caa:	e7 cf       	rjmp	.-50     	; 0x3c7a <vfprintf+0x46>
    3cac:	91 2c       	mov	r9, r1
    3cae:	21 2c       	mov	r2, r1
    3cb0:	31 2c       	mov	r3, r1
    3cb2:	ff e1       	ldi	r31, 0x1F	; 31
    3cb4:	f3 15       	cp	r31, r3
    3cb6:	d8 f0       	brcs	.+54     	; 0x3cee <vfprintf+0xba>
    3cb8:	8b 32       	cpi	r24, 0x2B	; 43
    3cba:	79 f0       	breq	.+30     	; 0x3cda <vfprintf+0xa6>
    3cbc:	38 f4       	brcc	.+14     	; 0x3ccc <vfprintf+0x98>
    3cbe:	80 32       	cpi	r24, 0x20	; 32
    3cc0:	79 f0       	breq	.+30     	; 0x3ce0 <vfprintf+0xac>
    3cc2:	83 32       	cpi	r24, 0x23	; 35
    3cc4:	a1 f4       	brne	.+40     	; 0x3cee <vfprintf+0xba>
    3cc6:	23 2d       	mov	r18, r3
    3cc8:	20 61       	ori	r18, 0x10	; 16
    3cca:	1d c0       	rjmp	.+58     	; 0x3d06 <vfprintf+0xd2>
    3ccc:	8d 32       	cpi	r24, 0x2D	; 45
    3cce:	61 f0       	breq	.+24     	; 0x3ce8 <vfprintf+0xb4>
    3cd0:	80 33       	cpi	r24, 0x30	; 48
    3cd2:	69 f4       	brne	.+26     	; 0x3cee <vfprintf+0xba>
    3cd4:	23 2d       	mov	r18, r3
    3cd6:	21 60       	ori	r18, 0x01	; 1
    3cd8:	16 c0       	rjmp	.+44     	; 0x3d06 <vfprintf+0xd2>
    3cda:	83 2d       	mov	r24, r3
    3cdc:	82 60       	ori	r24, 0x02	; 2
    3cde:	38 2e       	mov	r3, r24
    3ce0:	e3 2d       	mov	r30, r3
    3ce2:	e4 60       	ori	r30, 0x04	; 4
    3ce4:	3e 2e       	mov	r3, r30
    3ce6:	2a c0       	rjmp	.+84     	; 0x3d3c <vfprintf+0x108>
    3ce8:	f3 2d       	mov	r31, r3
    3cea:	f8 60       	ori	r31, 0x08	; 8
    3cec:	1d c0       	rjmp	.+58     	; 0x3d28 <vfprintf+0xf4>
    3cee:	37 fc       	sbrc	r3, 7
    3cf0:	2d c0       	rjmp	.+90     	; 0x3d4c <vfprintf+0x118>
    3cf2:	20 ed       	ldi	r18, 0xD0	; 208
    3cf4:	28 0f       	add	r18, r24
    3cf6:	2a 30       	cpi	r18, 0x0A	; 10
    3cf8:	40 f0       	brcs	.+16     	; 0x3d0a <vfprintf+0xd6>
    3cfa:	8e 32       	cpi	r24, 0x2E	; 46
    3cfc:	b9 f4       	brne	.+46     	; 0x3d2c <vfprintf+0xf8>
    3cfe:	36 fc       	sbrc	r3, 6
    3d00:	81 c1       	rjmp	.+770    	; 0x4004 <__stack+0x5>
    3d02:	23 2d       	mov	r18, r3
    3d04:	20 64       	ori	r18, 0x40	; 64
    3d06:	32 2e       	mov	r3, r18
    3d08:	19 c0       	rjmp	.+50     	; 0x3d3c <vfprintf+0x108>
    3d0a:	36 fe       	sbrs	r3, 6
    3d0c:	06 c0       	rjmp	.+12     	; 0x3d1a <vfprintf+0xe6>
    3d0e:	8a e0       	ldi	r24, 0x0A	; 10
    3d10:	98 9e       	mul	r9, r24
    3d12:	20 0d       	add	r18, r0
    3d14:	11 24       	eor	r1, r1
    3d16:	92 2e       	mov	r9, r18
    3d18:	11 c0       	rjmp	.+34     	; 0x3d3c <vfprintf+0x108>
    3d1a:	ea e0       	ldi	r30, 0x0A	; 10
    3d1c:	2e 9e       	mul	r2, r30
    3d1e:	20 0d       	add	r18, r0
    3d20:	11 24       	eor	r1, r1
    3d22:	22 2e       	mov	r2, r18
    3d24:	f3 2d       	mov	r31, r3
    3d26:	f0 62       	ori	r31, 0x20	; 32
    3d28:	3f 2e       	mov	r3, r31
    3d2a:	08 c0       	rjmp	.+16     	; 0x3d3c <vfprintf+0x108>
    3d2c:	8c 36       	cpi	r24, 0x6C	; 108
    3d2e:	21 f4       	brne	.+8      	; 0x3d38 <vfprintf+0x104>
    3d30:	83 2d       	mov	r24, r3
    3d32:	80 68       	ori	r24, 0x80	; 128
    3d34:	38 2e       	mov	r3, r24
    3d36:	02 c0       	rjmp	.+4      	; 0x3d3c <vfprintf+0x108>
    3d38:	88 36       	cpi	r24, 0x68	; 104
    3d3a:	41 f4       	brne	.+16     	; 0x3d4c <vfprintf+0x118>
    3d3c:	f7 01       	movw	r30, r14
    3d3e:	93 fd       	sbrc	r25, 3
    3d40:	85 91       	lpm	r24, Z+
    3d42:	93 ff       	sbrs	r25, 3
    3d44:	81 91       	ld	r24, Z+
    3d46:	7f 01       	movw	r14, r30
    3d48:	81 11       	cpse	r24, r1
    3d4a:	b3 cf       	rjmp	.-154    	; 0x3cb2 <vfprintf+0x7e>
    3d4c:	98 2f       	mov	r25, r24
    3d4e:	9f 7d       	andi	r25, 0xDF	; 223
    3d50:	95 54       	subi	r25, 0x45	; 69
    3d52:	93 30       	cpi	r25, 0x03	; 3
    3d54:	28 f4       	brcc	.+10     	; 0x3d60 <vfprintf+0x12c>
    3d56:	0c 5f       	subi	r16, 0xFC	; 252
    3d58:	1f 4f       	sbci	r17, 0xFF	; 255
    3d5a:	9f e3       	ldi	r25, 0x3F	; 63
    3d5c:	99 83       	std	Y+1, r25	; 0x01
    3d5e:	0d c0       	rjmp	.+26     	; 0x3d7a <vfprintf+0x146>
    3d60:	83 36       	cpi	r24, 0x63	; 99
    3d62:	31 f0       	breq	.+12     	; 0x3d70 <vfprintf+0x13c>
    3d64:	83 37       	cpi	r24, 0x73	; 115
    3d66:	71 f0       	breq	.+28     	; 0x3d84 <vfprintf+0x150>
    3d68:	83 35       	cpi	r24, 0x53	; 83
    3d6a:	09 f0       	breq	.+2      	; 0x3d6e <vfprintf+0x13a>
    3d6c:	59 c0       	rjmp	.+178    	; 0x3e20 <vfprintf+0x1ec>
    3d6e:	21 c0       	rjmp	.+66     	; 0x3db2 <vfprintf+0x17e>
    3d70:	f8 01       	movw	r30, r16
    3d72:	80 81       	ld	r24, Z
    3d74:	89 83       	std	Y+1, r24	; 0x01
    3d76:	0e 5f       	subi	r16, 0xFE	; 254
    3d78:	1f 4f       	sbci	r17, 0xFF	; 255
    3d7a:	88 24       	eor	r8, r8
    3d7c:	83 94       	inc	r8
    3d7e:	91 2c       	mov	r9, r1
    3d80:	53 01       	movw	r10, r6
    3d82:	13 c0       	rjmp	.+38     	; 0x3daa <vfprintf+0x176>
    3d84:	28 01       	movw	r4, r16
    3d86:	f2 e0       	ldi	r31, 0x02	; 2
    3d88:	4f 0e       	add	r4, r31
    3d8a:	51 1c       	adc	r5, r1
    3d8c:	f8 01       	movw	r30, r16
    3d8e:	a0 80       	ld	r10, Z
    3d90:	b1 80       	ldd	r11, Z+1	; 0x01
    3d92:	36 fe       	sbrs	r3, 6
    3d94:	03 c0       	rjmp	.+6      	; 0x3d9c <vfprintf+0x168>
    3d96:	69 2d       	mov	r22, r9
    3d98:	70 e0       	ldi	r23, 0x00	; 0
    3d9a:	02 c0       	rjmp	.+4      	; 0x3da0 <vfprintf+0x16c>
    3d9c:	6f ef       	ldi	r22, 0xFF	; 255
    3d9e:	7f ef       	ldi	r23, 0xFF	; 255
    3da0:	c5 01       	movw	r24, r10
    3da2:	0e 94 29 20 	call	0x4052	; 0x4052 <strnlen>
    3da6:	4c 01       	movw	r8, r24
    3da8:	82 01       	movw	r16, r4
    3daa:	f3 2d       	mov	r31, r3
    3dac:	ff 77       	andi	r31, 0x7F	; 127
    3dae:	3f 2e       	mov	r3, r31
    3db0:	16 c0       	rjmp	.+44     	; 0x3dde <vfprintf+0x1aa>
    3db2:	28 01       	movw	r4, r16
    3db4:	22 e0       	ldi	r18, 0x02	; 2
    3db6:	42 0e       	add	r4, r18
    3db8:	51 1c       	adc	r5, r1
    3dba:	f8 01       	movw	r30, r16
    3dbc:	a0 80       	ld	r10, Z
    3dbe:	b1 80       	ldd	r11, Z+1	; 0x01
    3dc0:	36 fe       	sbrs	r3, 6
    3dc2:	03 c0       	rjmp	.+6      	; 0x3dca <vfprintf+0x196>
    3dc4:	69 2d       	mov	r22, r9
    3dc6:	70 e0       	ldi	r23, 0x00	; 0
    3dc8:	02 c0       	rjmp	.+4      	; 0x3dce <vfprintf+0x19a>
    3dca:	6f ef       	ldi	r22, 0xFF	; 255
    3dcc:	7f ef       	ldi	r23, 0xFF	; 255
    3dce:	c5 01       	movw	r24, r10
    3dd0:	0e 94 1e 20 	call	0x403c	; 0x403c <strnlen_P>
    3dd4:	4c 01       	movw	r8, r24
    3dd6:	f3 2d       	mov	r31, r3
    3dd8:	f0 68       	ori	r31, 0x80	; 128
    3dda:	3f 2e       	mov	r3, r31
    3ddc:	82 01       	movw	r16, r4
    3dde:	33 fc       	sbrc	r3, 3
    3de0:	1b c0       	rjmp	.+54     	; 0x3e18 <vfprintf+0x1e4>
    3de2:	82 2d       	mov	r24, r2
    3de4:	90 e0       	ldi	r25, 0x00	; 0
    3de6:	88 16       	cp	r8, r24
    3de8:	99 06       	cpc	r9, r25
    3dea:	b0 f4       	brcc	.+44     	; 0x3e18 <vfprintf+0x1e4>
    3dec:	b6 01       	movw	r22, r12
    3dee:	80 e2       	ldi	r24, 0x20	; 32
    3df0:	90 e0       	ldi	r25, 0x00	; 0
    3df2:	0e 94 44 20 	call	0x4088	; 0x4088 <fputc>
    3df6:	2a 94       	dec	r2
    3df8:	f4 cf       	rjmp	.-24     	; 0x3de2 <vfprintf+0x1ae>
    3dfa:	f5 01       	movw	r30, r10
    3dfc:	37 fc       	sbrc	r3, 7
    3dfe:	85 91       	lpm	r24, Z+
    3e00:	37 fe       	sbrs	r3, 7
    3e02:	81 91       	ld	r24, Z+
    3e04:	5f 01       	movw	r10, r30
    3e06:	b6 01       	movw	r22, r12
    3e08:	90 e0       	ldi	r25, 0x00	; 0
    3e0a:	0e 94 44 20 	call	0x4088	; 0x4088 <fputc>
    3e0e:	21 10       	cpse	r2, r1
    3e10:	2a 94       	dec	r2
    3e12:	21 e0       	ldi	r18, 0x01	; 1
    3e14:	82 1a       	sub	r8, r18
    3e16:	91 08       	sbc	r9, r1
    3e18:	81 14       	cp	r8, r1
    3e1a:	91 04       	cpc	r9, r1
    3e1c:	71 f7       	brne	.-36     	; 0x3dfa <vfprintf+0x1c6>
    3e1e:	e8 c0       	rjmp	.+464    	; 0x3ff0 <vfprintf+0x3bc>
    3e20:	84 36       	cpi	r24, 0x64	; 100
    3e22:	11 f0       	breq	.+4      	; 0x3e28 <vfprintf+0x1f4>
    3e24:	89 36       	cpi	r24, 0x69	; 105
    3e26:	41 f5       	brne	.+80     	; 0x3e78 <vfprintf+0x244>
    3e28:	f8 01       	movw	r30, r16
    3e2a:	37 fe       	sbrs	r3, 7
    3e2c:	07 c0       	rjmp	.+14     	; 0x3e3c <vfprintf+0x208>
    3e2e:	60 81       	ld	r22, Z
    3e30:	71 81       	ldd	r23, Z+1	; 0x01
    3e32:	82 81       	ldd	r24, Z+2	; 0x02
    3e34:	93 81       	ldd	r25, Z+3	; 0x03
    3e36:	0c 5f       	subi	r16, 0xFC	; 252
    3e38:	1f 4f       	sbci	r17, 0xFF	; 255
    3e3a:	08 c0       	rjmp	.+16     	; 0x3e4c <vfprintf+0x218>
    3e3c:	60 81       	ld	r22, Z
    3e3e:	71 81       	ldd	r23, Z+1	; 0x01
    3e40:	07 2e       	mov	r0, r23
    3e42:	00 0c       	add	r0, r0
    3e44:	88 0b       	sbc	r24, r24
    3e46:	99 0b       	sbc	r25, r25
    3e48:	0e 5f       	subi	r16, 0xFE	; 254
    3e4a:	1f 4f       	sbci	r17, 0xFF	; 255
    3e4c:	f3 2d       	mov	r31, r3
    3e4e:	ff 76       	andi	r31, 0x6F	; 111
    3e50:	3f 2e       	mov	r3, r31
    3e52:	97 ff       	sbrs	r25, 7
    3e54:	09 c0       	rjmp	.+18     	; 0x3e68 <vfprintf+0x234>
    3e56:	90 95       	com	r25
    3e58:	80 95       	com	r24
    3e5a:	70 95       	com	r23
    3e5c:	61 95       	neg	r22
    3e5e:	7f 4f       	sbci	r23, 0xFF	; 255
    3e60:	8f 4f       	sbci	r24, 0xFF	; 255
    3e62:	9f 4f       	sbci	r25, 0xFF	; 255
    3e64:	f0 68       	ori	r31, 0x80	; 128
    3e66:	3f 2e       	mov	r3, r31
    3e68:	2a e0       	ldi	r18, 0x0A	; 10
    3e6a:	30 e0       	ldi	r19, 0x00	; 0
    3e6c:	a3 01       	movw	r20, r6
    3e6e:	0e 94 80 20 	call	0x4100	; 0x4100 <__ultoa_invert>
    3e72:	88 2e       	mov	r8, r24
    3e74:	86 18       	sub	r8, r6
    3e76:	45 c0       	rjmp	.+138    	; 0x3f02 <vfprintf+0x2ce>
    3e78:	85 37       	cpi	r24, 0x75	; 117
    3e7a:	31 f4       	brne	.+12     	; 0x3e88 <vfprintf+0x254>
    3e7c:	23 2d       	mov	r18, r3
    3e7e:	2f 7e       	andi	r18, 0xEF	; 239
    3e80:	b2 2e       	mov	r11, r18
    3e82:	2a e0       	ldi	r18, 0x0A	; 10
    3e84:	30 e0       	ldi	r19, 0x00	; 0
    3e86:	25 c0       	rjmp	.+74     	; 0x3ed2 <vfprintf+0x29e>
    3e88:	93 2d       	mov	r25, r3
    3e8a:	99 7f       	andi	r25, 0xF9	; 249
    3e8c:	b9 2e       	mov	r11, r25
    3e8e:	8f 36       	cpi	r24, 0x6F	; 111
    3e90:	c1 f0       	breq	.+48     	; 0x3ec2 <vfprintf+0x28e>
    3e92:	18 f4       	brcc	.+6      	; 0x3e9a <vfprintf+0x266>
    3e94:	88 35       	cpi	r24, 0x58	; 88
    3e96:	79 f0       	breq	.+30     	; 0x3eb6 <vfprintf+0x282>
    3e98:	b5 c0       	rjmp	.+362    	; 0x4004 <__stack+0x5>
    3e9a:	80 37       	cpi	r24, 0x70	; 112
    3e9c:	19 f0       	breq	.+6      	; 0x3ea4 <vfprintf+0x270>
    3e9e:	88 37       	cpi	r24, 0x78	; 120
    3ea0:	21 f0       	breq	.+8      	; 0x3eaa <vfprintf+0x276>
    3ea2:	b0 c0       	rjmp	.+352    	; 0x4004 <__stack+0x5>
    3ea4:	e9 2f       	mov	r30, r25
    3ea6:	e0 61       	ori	r30, 0x10	; 16
    3ea8:	be 2e       	mov	r11, r30
    3eaa:	b4 fe       	sbrs	r11, 4
    3eac:	0d c0       	rjmp	.+26     	; 0x3ec8 <vfprintf+0x294>
    3eae:	fb 2d       	mov	r31, r11
    3eb0:	f4 60       	ori	r31, 0x04	; 4
    3eb2:	bf 2e       	mov	r11, r31
    3eb4:	09 c0       	rjmp	.+18     	; 0x3ec8 <vfprintf+0x294>
    3eb6:	34 fe       	sbrs	r3, 4
    3eb8:	0a c0       	rjmp	.+20     	; 0x3ece <vfprintf+0x29a>
    3eba:	29 2f       	mov	r18, r25
    3ebc:	26 60       	ori	r18, 0x06	; 6
    3ebe:	b2 2e       	mov	r11, r18
    3ec0:	06 c0       	rjmp	.+12     	; 0x3ece <vfprintf+0x29a>
    3ec2:	28 e0       	ldi	r18, 0x08	; 8
    3ec4:	30 e0       	ldi	r19, 0x00	; 0
    3ec6:	05 c0       	rjmp	.+10     	; 0x3ed2 <vfprintf+0x29e>
    3ec8:	20 e1       	ldi	r18, 0x10	; 16
    3eca:	30 e0       	ldi	r19, 0x00	; 0
    3ecc:	02 c0       	rjmp	.+4      	; 0x3ed2 <vfprintf+0x29e>
    3ece:	20 e1       	ldi	r18, 0x10	; 16
    3ed0:	32 e0       	ldi	r19, 0x02	; 2
    3ed2:	f8 01       	movw	r30, r16
    3ed4:	b7 fe       	sbrs	r11, 7
    3ed6:	07 c0       	rjmp	.+14     	; 0x3ee6 <vfprintf+0x2b2>
    3ed8:	60 81       	ld	r22, Z
    3eda:	71 81       	ldd	r23, Z+1	; 0x01
    3edc:	82 81       	ldd	r24, Z+2	; 0x02
    3ede:	93 81       	ldd	r25, Z+3	; 0x03
    3ee0:	0c 5f       	subi	r16, 0xFC	; 252
    3ee2:	1f 4f       	sbci	r17, 0xFF	; 255
    3ee4:	06 c0       	rjmp	.+12     	; 0x3ef2 <vfprintf+0x2be>
    3ee6:	60 81       	ld	r22, Z
    3ee8:	71 81       	ldd	r23, Z+1	; 0x01
    3eea:	80 e0       	ldi	r24, 0x00	; 0
    3eec:	90 e0       	ldi	r25, 0x00	; 0
    3eee:	0e 5f       	subi	r16, 0xFE	; 254
    3ef0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ef2:	a3 01       	movw	r20, r6
    3ef4:	0e 94 80 20 	call	0x4100	; 0x4100 <__ultoa_invert>
    3ef8:	88 2e       	mov	r8, r24
    3efa:	86 18       	sub	r8, r6
    3efc:	fb 2d       	mov	r31, r11
    3efe:	ff 77       	andi	r31, 0x7F	; 127
    3f00:	3f 2e       	mov	r3, r31
    3f02:	36 fe       	sbrs	r3, 6
    3f04:	0d c0       	rjmp	.+26     	; 0x3f20 <vfprintf+0x2ec>
    3f06:	23 2d       	mov	r18, r3
    3f08:	2e 7f       	andi	r18, 0xFE	; 254
    3f0a:	a2 2e       	mov	r10, r18
    3f0c:	89 14       	cp	r8, r9
    3f0e:	58 f4       	brcc	.+22     	; 0x3f26 <vfprintf+0x2f2>
    3f10:	34 fe       	sbrs	r3, 4
    3f12:	0b c0       	rjmp	.+22     	; 0x3f2a <vfprintf+0x2f6>
    3f14:	32 fc       	sbrc	r3, 2
    3f16:	09 c0       	rjmp	.+18     	; 0x3f2a <vfprintf+0x2f6>
    3f18:	83 2d       	mov	r24, r3
    3f1a:	8e 7e       	andi	r24, 0xEE	; 238
    3f1c:	a8 2e       	mov	r10, r24
    3f1e:	05 c0       	rjmp	.+10     	; 0x3f2a <vfprintf+0x2f6>
    3f20:	b8 2c       	mov	r11, r8
    3f22:	a3 2c       	mov	r10, r3
    3f24:	03 c0       	rjmp	.+6      	; 0x3f2c <vfprintf+0x2f8>
    3f26:	b8 2c       	mov	r11, r8
    3f28:	01 c0       	rjmp	.+2      	; 0x3f2c <vfprintf+0x2f8>
    3f2a:	b9 2c       	mov	r11, r9
    3f2c:	a4 fe       	sbrs	r10, 4
    3f2e:	0f c0       	rjmp	.+30     	; 0x3f4e <vfprintf+0x31a>
    3f30:	fe 01       	movw	r30, r28
    3f32:	e8 0d       	add	r30, r8
    3f34:	f1 1d       	adc	r31, r1
    3f36:	80 81       	ld	r24, Z
    3f38:	80 33       	cpi	r24, 0x30	; 48
    3f3a:	21 f4       	brne	.+8      	; 0x3f44 <vfprintf+0x310>
    3f3c:	9a 2d       	mov	r25, r10
    3f3e:	99 7e       	andi	r25, 0xE9	; 233
    3f40:	a9 2e       	mov	r10, r25
    3f42:	09 c0       	rjmp	.+18     	; 0x3f56 <vfprintf+0x322>
    3f44:	a2 fe       	sbrs	r10, 2
    3f46:	06 c0       	rjmp	.+12     	; 0x3f54 <vfprintf+0x320>
    3f48:	b3 94       	inc	r11
    3f4a:	b3 94       	inc	r11
    3f4c:	04 c0       	rjmp	.+8      	; 0x3f56 <vfprintf+0x322>
    3f4e:	8a 2d       	mov	r24, r10
    3f50:	86 78       	andi	r24, 0x86	; 134
    3f52:	09 f0       	breq	.+2      	; 0x3f56 <vfprintf+0x322>
    3f54:	b3 94       	inc	r11
    3f56:	a3 fc       	sbrc	r10, 3
    3f58:	11 c0       	rjmp	.+34     	; 0x3f7c <vfprintf+0x348>
    3f5a:	a0 fe       	sbrs	r10, 0
    3f5c:	06 c0       	rjmp	.+12     	; 0x3f6a <vfprintf+0x336>
    3f5e:	b2 14       	cp	r11, r2
    3f60:	88 f4       	brcc	.+34     	; 0x3f84 <vfprintf+0x350>
    3f62:	28 0c       	add	r2, r8
    3f64:	92 2c       	mov	r9, r2
    3f66:	9b 18       	sub	r9, r11
    3f68:	0e c0       	rjmp	.+28     	; 0x3f86 <vfprintf+0x352>
    3f6a:	b2 14       	cp	r11, r2
    3f6c:	60 f4       	brcc	.+24     	; 0x3f86 <vfprintf+0x352>
    3f6e:	b6 01       	movw	r22, r12
    3f70:	80 e2       	ldi	r24, 0x20	; 32
    3f72:	90 e0       	ldi	r25, 0x00	; 0
    3f74:	0e 94 44 20 	call	0x4088	; 0x4088 <fputc>
    3f78:	b3 94       	inc	r11
    3f7a:	f7 cf       	rjmp	.-18     	; 0x3f6a <vfprintf+0x336>
    3f7c:	b2 14       	cp	r11, r2
    3f7e:	18 f4       	brcc	.+6      	; 0x3f86 <vfprintf+0x352>
    3f80:	2b 18       	sub	r2, r11
    3f82:	02 c0       	rjmp	.+4      	; 0x3f88 <vfprintf+0x354>
    3f84:	98 2c       	mov	r9, r8
    3f86:	21 2c       	mov	r2, r1
    3f88:	a4 fe       	sbrs	r10, 4
    3f8a:	10 c0       	rjmp	.+32     	; 0x3fac <vfprintf+0x378>
    3f8c:	b6 01       	movw	r22, r12
    3f8e:	80 e3       	ldi	r24, 0x30	; 48
    3f90:	90 e0       	ldi	r25, 0x00	; 0
    3f92:	0e 94 44 20 	call	0x4088	; 0x4088 <fputc>
    3f96:	a2 fe       	sbrs	r10, 2
    3f98:	17 c0       	rjmp	.+46     	; 0x3fc8 <vfprintf+0x394>
    3f9a:	a1 fc       	sbrc	r10, 1
    3f9c:	03 c0       	rjmp	.+6      	; 0x3fa4 <vfprintf+0x370>
    3f9e:	88 e7       	ldi	r24, 0x78	; 120
    3fa0:	90 e0       	ldi	r25, 0x00	; 0
    3fa2:	02 c0       	rjmp	.+4      	; 0x3fa8 <vfprintf+0x374>
    3fa4:	88 e5       	ldi	r24, 0x58	; 88
    3fa6:	90 e0       	ldi	r25, 0x00	; 0
    3fa8:	b6 01       	movw	r22, r12
    3faa:	0c c0       	rjmp	.+24     	; 0x3fc4 <vfprintf+0x390>
    3fac:	8a 2d       	mov	r24, r10
    3fae:	86 78       	andi	r24, 0x86	; 134
    3fb0:	59 f0       	breq	.+22     	; 0x3fc8 <vfprintf+0x394>
    3fb2:	a1 fe       	sbrs	r10, 1
    3fb4:	02 c0       	rjmp	.+4      	; 0x3fba <vfprintf+0x386>
    3fb6:	8b e2       	ldi	r24, 0x2B	; 43
    3fb8:	01 c0       	rjmp	.+2      	; 0x3fbc <vfprintf+0x388>
    3fba:	80 e2       	ldi	r24, 0x20	; 32
    3fbc:	a7 fc       	sbrc	r10, 7
    3fbe:	8d e2       	ldi	r24, 0x2D	; 45
    3fc0:	b6 01       	movw	r22, r12
    3fc2:	90 e0       	ldi	r25, 0x00	; 0
    3fc4:	0e 94 44 20 	call	0x4088	; 0x4088 <fputc>
    3fc8:	89 14       	cp	r8, r9
    3fca:	38 f4       	brcc	.+14     	; 0x3fda <vfprintf+0x3a6>
    3fcc:	b6 01       	movw	r22, r12
    3fce:	80 e3       	ldi	r24, 0x30	; 48
    3fd0:	90 e0       	ldi	r25, 0x00	; 0
    3fd2:	0e 94 44 20 	call	0x4088	; 0x4088 <fputc>
    3fd6:	9a 94       	dec	r9
    3fd8:	f7 cf       	rjmp	.-18     	; 0x3fc8 <vfprintf+0x394>
    3fda:	8a 94       	dec	r8
    3fdc:	f3 01       	movw	r30, r6
    3fde:	e8 0d       	add	r30, r8
    3fe0:	f1 1d       	adc	r31, r1
    3fe2:	80 81       	ld	r24, Z
    3fe4:	b6 01       	movw	r22, r12
    3fe6:	90 e0       	ldi	r25, 0x00	; 0
    3fe8:	0e 94 44 20 	call	0x4088	; 0x4088 <fputc>
    3fec:	81 10       	cpse	r8, r1
    3fee:	f5 cf       	rjmp	.-22     	; 0x3fda <vfprintf+0x3a6>
    3ff0:	22 20       	and	r2, r2
    3ff2:	09 f4       	brne	.+2      	; 0x3ff6 <vfprintf+0x3c2>
    3ff4:	42 ce       	rjmp	.-892    	; 0x3c7a <vfprintf+0x46>
    3ff6:	b6 01       	movw	r22, r12
    3ff8:	80 e2       	ldi	r24, 0x20	; 32
    3ffa:	90 e0       	ldi	r25, 0x00	; 0
    3ffc:	0e 94 44 20 	call	0x4088	; 0x4088 <fputc>
    4000:	2a 94       	dec	r2
    4002:	f6 cf       	rjmp	.-20     	; 0x3ff0 <vfprintf+0x3bc>
    4004:	f6 01       	movw	r30, r12
    4006:	86 81       	ldd	r24, Z+6	; 0x06
    4008:	97 81       	ldd	r25, Z+7	; 0x07
    400a:	02 c0       	rjmp	.+4      	; 0x4010 <__stack+0x11>
    400c:	8f ef       	ldi	r24, 0xFF	; 255
    400e:	9f ef       	ldi	r25, 0xFF	; 255
    4010:	2b 96       	adiw	r28, 0x0b	; 11
    4012:	cd bf       	out	0x3d, r28	; 61
    4014:	de bf       	out	0x3e, r29	; 62
    4016:	df 91       	pop	r29
    4018:	cf 91       	pop	r28
    401a:	1f 91       	pop	r17
    401c:	0f 91       	pop	r16
    401e:	ff 90       	pop	r15
    4020:	ef 90       	pop	r14
    4022:	df 90       	pop	r13
    4024:	cf 90       	pop	r12
    4026:	bf 90       	pop	r11
    4028:	af 90       	pop	r10
    402a:	9f 90       	pop	r9
    402c:	8f 90       	pop	r8
    402e:	7f 90       	pop	r7
    4030:	6f 90       	pop	r6
    4032:	5f 90       	pop	r5
    4034:	4f 90       	pop	r4
    4036:	3f 90       	pop	r3
    4038:	2f 90       	pop	r2
    403a:	08 95       	ret

0000403c <strnlen_P>:
    403c:	fc 01       	movw	r30, r24
    403e:	05 90       	lpm	r0, Z+
    4040:	61 50       	subi	r22, 0x01	; 1
    4042:	70 40       	sbci	r23, 0x00	; 0
    4044:	01 10       	cpse	r0, r1
    4046:	d8 f7       	brcc	.-10     	; 0x403e <strnlen_P+0x2>
    4048:	80 95       	com	r24
    404a:	90 95       	com	r25
    404c:	8e 0f       	add	r24, r30
    404e:	9f 1f       	adc	r25, r31
    4050:	08 95       	ret

00004052 <strnlen>:
    4052:	fc 01       	movw	r30, r24
    4054:	61 50       	subi	r22, 0x01	; 1
    4056:	70 40       	sbci	r23, 0x00	; 0
    4058:	01 90       	ld	r0, Z+
    405a:	01 10       	cpse	r0, r1
    405c:	d8 f7       	brcc	.-10     	; 0x4054 <strnlen+0x2>
    405e:	80 95       	com	r24
    4060:	90 95       	com	r25
    4062:	8e 0f       	add	r24, r30
    4064:	9f 1f       	adc	r25, r31
    4066:	08 95       	ret

00004068 <strrev>:
    4068:	dc 01       	movw	r26, r24
    406a:	fc 01       	movw	r30, r24
    406c:	67 2f       	mov	r22, r23
    406e:	71 91       	ld	r23, Z+
    4070:	77 23       	and	r23, r23
    4072:	e1 f7       	brne	.-8      	; 0x406c <strrev+0x4>
    4074:	32 97       	sbiw	r30, 0x02	; 2
    4076:	04 c0       	rjmp	.+8      	; 0x4080 <strrev+0x18>
    4078:	7c 91       	ld	r23, X
    407a:	6d 93       	st	X+, r22
    407c:	70 83       	st	Z, r23
    407e:	62 91       	ld	r22, -Z
    4080:	ae 17       	cp	r26, r30
    4082:	bf 07       	cpc	r27, r31
    4084:	c8 f3       	brcs	.-14     	; 0x4078 <strrev+0x10>
    4086:	08 95       	ret

00004088 <fputc>:
    4088:	0f 93       	push	r16
    408a:	1f 93       	push	r17
    408c:	cf 93       	push	r28
    408e:	df 93       	push	r29
    4090:	fb 01       	movw	r30, r22
    4092:	23 81       	ldd	r18, Z+3	; 0x03
    4094:	21 fd       	sbrc	r18, 1
    4096:	03 c0       	rjmp	.+6      	; 0x409e <fputc+0x16>
    4098:	8f ef       	ldi	r24, 0xFF	; 255
    409a:	9f ef       	ldi	r25, 0xFF	; 255
    409c:	2c c0       	rjmp	.+88     	; 0x40f6 <fputc+0x6e>
    409e:	22 ff       	sbrs	r18, 2
    40a0:	16 c0       	rjmp	.+44     	; 0x40ce <fputc+0x46>
    40a2:	46 81       	ldd	r20, Z+6	; 0x06
    40a4:	57 81       	ldd	r21, Z+7	; 0x07
    40a6:	24 81       	ldd	r18, Z+4	; 0x04
    40a8:	35 81       	ldd	r19, Z+5	; 0x05
    40aa:	42 17       	cp	r20, r18
    40ac:	53 07       	cpc	r21, r19
    40ae:	44 f4       	brge	.+16     	; 0x40c0 <fputc+0x38>
    40b0:	a0 81       	ld	r26, Z
    40b2:	b1 81       	ldd	r27, Z+1	; 0x01
    40b4:	9d 01       	movw	r18, r26
    40b6:	2f 5f       	subi	r18, 0xFF	; 255
    40b8:	3f 4f       	sbci	r19, 0xFF	; 255
    40ba:	20 83       	st	Z, r18
    40bc:	31 83       	std	Z+1, r19	; 0x01
    40be:	8c 93       	st	X, r24
    40c0:	26 81       	ldd	r18, Z+6	; 0x06
    40c2:	37 81       	ldd	r19, Z+7	; 0x07
    40c4:	2f 5f       	subi	r18, 0xFF	; 255
    40c6:	3f 4f       	sbci	r19, 0xFF	; 255
    40c8:	26 83       	std	Z+6, r18	; 0x06
    40ca:	37 83       	std	Z+7, r19	; 0x07
    40cc:	14 c0       	rjmp	.+40     	; 0x40f6 <fputc+0x6e>
    40ce:	8b 01       	movw	r16, r22
    40d0:	ec 01       	movw	r28, r24
    40d2:	fb 01       	movw	r30, r22
    40d4:	00 84       	ldd	r0, Z+8	; 0x08
    40d6:	f1 85       	ldd	r31, Z+9	; 0x09
    40d8:	e0 2d       	mov	r30, r0
    40da:	19 95       	eicall
    40dc:	89 2b       	or	r24, r25
    40de:	e1 f6       	brne	.-72     	; 0x4098 <fputc+0x10>
    40e0:	d8 01       	movw	r26, r16
    40e2:	16 96       	adiw	r26, 0x06	; 6
    40e4:	8d 91       	ld	r24, X+
    40e6:	9c 91       	ld	r25, X
    40e8:	17 97       	sbiw	r26, 0x07	; 7
    40ea:	01 96       	adiw	r24, 0x01	; 1
    40ec:	16 96       	adiw	r26, 0x06	; 6
    40ee:	8d 93       	st	X+, r24
    40f0:	9c 93       	st	X, r25
    40f2:	17 97       	sbiw	r26, 0x07	; 7
    40f4:	ce 01       	movw	r24, r28
    40f6:	df 91       	pop	r29
    40f8:	cf 91       	pop	r28
    40fa:	1f 91       	pop	r17
    40fc:	0f 91       	pop	r16
    40fe:	08 95       	ret

00004100 <__ultoa_invert>:
    4100:	fa 01       	movw	r30, r20
    4102:	aa 27       	eor	r26, r26
    4104:	28 30       	cpi	r18, 0x08	; 8
    4106:	51 f1       	breq	.+84     	; 0x415c <__ultoa_invert+0x5c>
    4108:	20 31       	cpi	r18, 0x10	; 16
    410a:	81 f1       	breq	.+96     	; 0x416c <__ultoa_invert+0x6c>
    410c:	e8 94       	clt
    410e:	6f 93       	push	r22
    4110:	6e 7f       	andi	r22, 0xFE	; 254
    4112:	6e 5f       	subi	r22, 0xFE	; 254
    4114:	7f 4f       	sbci	r23, 0xFF	; 255
    4116:	8f 4f       	sbci	r24, 0xFF	; 255
    4118:	9f 4f       	sbci	r25, 0xFF	; 255
    411a:	af 4f       	sbci	r26, 0xFF	; 255
    411c:	b1 e0       	ldi	r27, 0x01	; 1
    411e:	3e d0       	rcall	.+124    	; 0x419c <__ultoa_invert+0x9c>
    4120:	b4 e0       	ldi	r27, 0x04	; 4
    4122:	3c d0       	rcall	.+120    	; 0x419c <__ultoa_invert+0x9c>
    4124:	67 0f       	add	r22, r23
    4126:	78 1f       	adc	r23, r24
    4128:	89 1f       	adc	r24, r25
    412a:	9a 1f       	adc	r25, r26
    412c:	a1 1d       	adc	r26, r1
    412e:	68 0f       	add	r22, r24
    4130:	79 1f       	adc	r23, r25
    4132:	8a 1f       	adc	r24, r26
    4134:	91 1d       	adc	r25, r1
    4136:	a1 1d       	adc	r26, r1
    4138:	6a 0f       	add	r22, r26
    413a:	71 1d       	adc	r23, r1
    413c:	81 1d       	adc	r24, r1
    413e:	91 1d       	adc	r25, r1
    4140:	a1 1d       	adc	r26, r1
    4142:	20 d0       	rcall	.+64     	; 0x4184 <__ultoa_invert+0x84>
    4144:	09 f4       	brne	.+2      	; 0x4148 <__ultoa_invert+0x48>
    4146:	68 94       	set
    4148:	3f 91       	pop	r19
    414a:	2a e0       	ldi	r18, 0x0A	; 10
    414c:	26 9f       	mul	r18, r22
    414e:	11 24       	eor	r1, r1
    4150:	30 19       	sub	r19, r0
    4152:	30 5d       	subi	r19, 0xD0	; 208
    4154:	31 93       	st	Z+, r19
    4156:	de f6       	brtc	.-74     	; 0x410e <__ultoa_invert+0xe>
    4158:	cf 01       	movw	r24, r30
    415a:	08 95       	ret
    415c:	46 2f       	mov	r20, r22
    415e:	47 70       	andi	r20, 0x07	; 7
    4160:	40 5d       	subi	r20, 0xD0	; 208
    4162:	41 93       	st	Z+, r20
    4164:	b3 e0       	ldi	r27, 0x03	; 3
    4166:	0f d0       	rcall	.+30     	; 0x4186 <__ultoa_invert+0x86>
    4168:	c9 f7       	brne	.-14     	; 0x415c <__ultoa_invert+0x5c>
    416a:	f6 cf       	rjmp	.-20     	; 0x4158 <__ultoa_invert+0x58>
    416c:	46 2f       	mov	r20, r22
    416e:	4f 70       	andi	r20, 0x0F	; 15
    4170:	40 5d       	subi	r20, 0xD0	; 208
    4172:	4a 33       	cpi	r20, 0x3A	; 58
    4174:	18 f0       	brcs	.+6      	; 0x417c <__ultoa_invert+0x7c>
    4176:	49 5d       	subi	r20, 0xD9	; 217
    4178:	31 fd       	sbrc	r19, 1
    417a:	40 52       	subi	r20, 0x20	; 32
    417c:	41 93       	st	Z+, r20
    417e:	02 d0       	rcall	.+4      	; 0x4184 <__ultoa_invert+0x84>
    4180:	a9 f7       	brne	.-22     	; 0x416c <__ultoa_invert+0x6c>
    4182:	ea cf       	rjmp	.-44     	; 0x4158 <__ultoa_invert+0x58>
    4184:	b4 e0       	ldi	r27, 0x04	; 4
    4186:	a6 95       	lsr	r26
    4188:	97 95       	ror	r25
    418a:	87 95       	ror	r24
    418c:	77 95       	ror	r23
    418e:	67 95       	ror	r22
    4190:	ba 95       	dec	r27
    4192:	c9 f7       	brne	.-14     	; 0x4186 <__ultoa_invert+0x86>
    4194:	00 97       	sbiw	r24, 0x00	; 0
    4196:	61 05       	cpc	r22, r1
    4198:	71 05       	cpc	r23, r1
    419a:	08 95       	ret
    419c:	9b 01       	movw	r18, r22
    419e:	ac 01       	movw	r20, r24
    41a0:	0a 2e       	mov	r0, r26
    41a2:	06 94       	lsr	r0
    41a4:	57 95       	ror	r21
    41a6:	47 95       	ror	r20
    41a8:	37 95       	ror	r19
    41aa:	27 95       	ror	r18
    41ac:	ba 95       	dec	r27
    41ae:	c9 f7       	brne	.-14     	; 0x41a2 <__ultoa_invert+0xa2>
    41b0:	62 0f       	add	r22, r18
    41b2:	73 1f       	adc	r23, r19
    41b4:	84 1f       	adc	r24, r20
    41b6:	95 1f       	adc	r25, r21
    41b8:	a0 1d       	adc	r26, r0
    41ba:	08 95       	ret

000041bc <_exit>:
    41bc:	f8 94       	cli

000041be <__stop_program>:
    41be:	ff cf       	rjmp	.-2      	; 0x41be <__stop_program>
