
NYC_PI_CALC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006e96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c6  00802000  00006e96  00006f2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000107e  008020c6  008020c6  00006ff0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006ff0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000704c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000800  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b2bd  00000000  00000000  0000788c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000464c  00000000  00000000  00012b49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000057d2  00000000  00000000  00017195  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001eec  00000000  00000000  0001c968  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005635  00000000  00000000  0001e854  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004191  00000000  00000000  00023e89  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000728  00000000  00000000  0002801a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__ctors_end>
       4:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
       8:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
       c:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      10:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      14:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      18:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      1c:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      20:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      24:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      28:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      2c:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      30:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      34:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      38:	0c 94 30 0c 	jmp	0x1860	; 0x1860 <__vector_14>
      3c:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      40:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      44:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      48:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      4c:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      50:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      54:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      58:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      5c:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      60:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      64:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      68:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      6c:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      70:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      74:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      78:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      7c:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      80:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      84:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      88:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      8c:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      90:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      94:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      98:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      9c:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      a0:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      a4:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      a8:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      ac:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      b0:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      b4:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      b8:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      bc:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      c0:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      c4:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      c8:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      cc:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      d0:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      d4:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      d8:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      dc:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      e0:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      e4:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      e8:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      ec:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      f0:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      f4:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      f8:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
      fc:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     100:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     104:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     108:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     10c:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     110:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     114:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     118:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     11c:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     120:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     124:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     128:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     12c:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     130:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     134:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     138:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     13c:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     140:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     144:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     148:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     14c:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     150:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     154:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     158:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     15c:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     160:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     164:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     168:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     16c:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     170:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     174:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     178:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     17c:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     180:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     184:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     188:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     18c:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     190:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     194:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     198:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     19c:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     1a0:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     1a4:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     1a8:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     1ac:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     1b0:	0c 94 b3 25 	jmp	0x4b66	; 0x4b66 <__vector_108>
     1b4:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     1b8:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     1bc:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     1c0:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     1c4:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     1c8:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     1cc:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     1d0:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     1d4:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     1d8:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     1dc:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     1e0:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     1e4:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     1e8:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     1ec:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     1f0:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     1f4:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     1f8:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__bad_interrupt>
     1fc:	9e 1e       	adc	r9, r30
     1fe:	9e 1e       	adc	r9, r30
     200:	9e 1e       	adc	r9, r30
     202:	25 1f       	adc	r18, r21
     204:	f1 1e       	adc	r15, r17
     206:	1f 1f       	adc	r17, r31
     208:	9e 1e       	adc	r9, r30
     20a:	9e 1e       	adc	r9, r30
     20c:	25 1f       	adc	r18, r21
     20e:	f1 1e       	adc	r15, r17

00000210 <__trampolines_start>:
     210:	0c 94 30 23 	jmp	0x4660	; 0x4660 <vCompare>
     214:	0c 94 3b 21 	jmp	0x4276	; 0x4276 <vTimeMeasurement>
     218:	0c 94 1f 1f 	jmp	0x3e3e	; 0x3e3e <prvProcessReceivedCommands+0x1d0>
     21c:	0c 94 d7 23 	jmp	0x47ae	; 0x47ae <vDisplaytask>
     220:	0c 94 e8 21 	jmp	0x43d0	; 0x43d0 <vPiLeibniz>
     224:	0c 94 d9 19 	jmp	0x33b2	; 0x33b2 <prvIdleTask>
     228:	0c 94 9a 22 	jmp	0x4534	; 0x4534 <vVietaPi>
     22c:	0c 94 11 25 	jmp	0x4a22	; 0x4a22 <controllerTask>
     230:	0c 94 25 1f 	jmp	0x3e4a	; 0x3e4a <prvProcessReceivedCommands+0x1dc>
     234:	0c 94 80 1c 	jmp	0x3900	; 0x3900 <prvTimerTask>
     238:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <vEventGroupSetBitsCallback>
     23c:	0c 94 46 28 	jmp	0x508c	; 0x508c <vDisplayUpdateTask>
     240:	0c 94 f1 1e 	jmp	0x3de2	; 0x3de2 <prvProcessReceivedCommands+0x174>
     244:	0c 94 9e 1e 	jmp	0x3d3c	; 0x3d3c <prvProcessReceivedCommands+0xce>

00000248 <__trampolines_end>:
     248:	6e 61       	ori	r22, 0x1E	; 30
     24a:	6e 00       	.word	0x006e	; ????

0000024c <__c.2332>:
     24c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     25c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     26c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     27c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     28c:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     29c:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2ac:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2bc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2cc:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2dc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2ec:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2fc:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     30c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     31c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     32c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     33c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000034a <__ctors_end>:
     34a:	11 24       	eor	r1, r1
     34c:	1f be       	out	0x3f, r1	; 63
     34e:	cf ef       	ldi	r28, 0xFF	; 255
     350:	cd bf       	out	0x3d, r28	; 61
     352:	df e3       	ldi	r29, 0x3F	; 63
     354:	de bf       	out	0x3e, r29	; 62
     356:	00 e0       	ldi	r16, 0x00	; 0
     358:	0c bf       	out	0x3c, r16	; 60

0000035a <init_mem>:
// !!! Never call this function, it is part of .init-Code
void __attribute__ ((naked, section(".init3"))) init_mem (void);
void init_mem (void)
{
   //  Use inline assembler so it works even with optimization turned off
   __asm volatile (
     35a:	e4 e4       	ldi	r30, 0x44	; 68
     35c:	f1 e3       	ldi	r31, 0x31	; 49
     35e:	8a ea       	ldi	r24, 0xAA	; 170
     360:	90 e4       	ldi	r25, 0x40	; 64
     362:	81 93       	st	Z+, r24
     364:	e0 30       	cpi	r30, 0x00	; 0
     366:	f9 07       	cpc	r31, r25
     368:	e0 f3       	brcs	.-8      	; 0x362 <init_mem+0x8>
	...

0000036c <__do_copy_data>:
     36c:	10 e2       	ldi	r17, 0x20	; 32
     36e:	a0 e0       	ldi	r26, 0x00	; 0
     370:	b0 e2       	ldi	r27, 0x20	; 32
     372:	e6 e9       	ldi	r30, 0x96	; 150
     374:	fe e6       	ldi	r31, 0x6E	; 110
     376:	00 e0       	ldi	r16, 0x00	; 0
     378:	0b bf       	out	0x3b, r16	; 59
     37a:	02 c0       	rjmp	.+4      	; 0x380 <__do_copy_data+0x14>
     37c:	07 90       	elpm	r0, Z+
     37e:	0d 92       	st	X+, r0
     380:	a6 3c       	cpi	r26, 0xC6	; 198
     382:	b1 07       	cpc	r27, r17
     384:	d9 f7       	brne	.-10     	; 0x37c <__do_copy_data+0x10>

00000386 <__do_clear_bss>:
     386:	21 e3       	ldi	r18, 0x31	; 49
     388:	a6 ec       	ldi	r26, 0xC6	; 198
     38a:	b0 e2       	ldi	r27, 0x20	; 32
     38c:	01 c0       	rjmp	.+2      	; 0x390 <.do_clear_bss_start>

0000038e <.do_clear_bss_loop>:
     38e:	1d 92       	st	X+, r1

00000390 <.do_clear_bss_start>:
     390:	a4 34       	cpi	r26, 0x44	; 68
     392:	b2 07       	cpc	r27, r18
     394:	e1 f7       	brne	.-8      	; 0x38e <.do_clear_bss_loop>
     396:	0e 94 d0 20 	call	0x41a0	; 0x41a0 <main>
     39a:	0c 94 49 37 	jmp	0x6e92	; 0x6e92 <_exit>

0000039e <__bad_interrupt>:
     39e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a2 <initButtons>:
 #define BUTTON_PRESS_SHORT			100
 #define BUTTON_PRESS_LONG			500

 

 void initButtons(void) {
     3a2:	cf 93       	push	r28
     3a4:	df 93       	push	r29
     3a6:	cd b7       	in	r28, 0x3d	; 61
     3a8:	de b7       	in	r29, 0x3e	; 62
	PORTF.DIRCLR = PIN4_bm; //SW1
     3aa:	80 ea       	ldi	r24, 0xA0	; 160
     3ac:	96 e0       	ldi	r25, 0x06	; 6
     3ae:	20 e1       	ldi	r18, 0x10	; 16
     3b0:	fc 01       	movw	r30, r24
     3b2:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN5_bm; //SW2
     3b4:	80 ea       	ldi	r24, 0xA0	; 160
     3b6:	96 e0       	ldi	r25, 0x06	; 6
     3b8:	20 e2       	ldi	r18, 0x20	; 32
     3ba:	fc 01       	movw	r30, r24
     3bc:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN6_bm; //SW3
     3be:	80 ea       	ldi	r24, 0xA0	; 160
     3c0:	96 e0       	ldi	r25, 0x06	; 6
     3c2:	20 e4       	ldi	r18, 0x40	; 64
     3c4:	fc 01       	movw	r30, r24
     3c6:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN7_bm; //SW4
     3c8:	80 ea       	ldi	r24, 0xA0	; 160
     3ca:	96 e0       	ldi	r25, 0x06	; 6
     3cc:	20 e8       	ldi	r18, 0x80	; 128
     3ce:	fc 01       	movw	r30, r24
     3d0:	22 83       	std	Z+2, r18	; 0x02
 }
     3d2:	00 00       	nop
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	08 95       	ret

000003da <updateButtons>:
 button_press_t b1Status;
 button_press_t b2Status;
 button_press_t b3Status;
 button_press_t b4Status;

 void updateButtons(void) {
     3da:	cf 93       	push	r28
     3dc:	df 93       	push	r29
     3de:	cd b7       	in	r28, 0x3d	; 61
     3e0:	de b7       	in	r29, 0x3e	; 62
	static uint16_t b1Count = 0;
	static uint16_t b2Count = 0;
	static uint16_t b3Count = 0;
	static uint16_t b4Count = 0;
	if(Button1_Value == 0) {
     3e2:	80 ea       	ldi	r24, 0xA0	; 160
     3e4:	96 e0       	ldi	r25, 0x06	; 6
     3e6:	fc 01       	movw	r30, r24
     3e8:	80 85       	ldd	r24, Z+8	; 0x08
     3ea:	88 2f       	mov	r24, r24
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	80 71       	andi	r24, 0x10	; 16
     3f0:	99 27       	eor	r25, r25
     3f2:	95 95       	asr	r25
     3f4:	87 95       	ror	r24
     3f6:	95 95       	asr	r25
     3f8:	87 95       	ror	r24
     3fa:	95 95       	asr	r25
     3fc:	87 95       	ror	r24
     3fe:	95 95       	asr	r25
     400:	87 95       	ror	r24
     402:	89 2b       	or	r24, r25
     404:	89 f4       	brne	.+34     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
		if(b1Count < 60000) {
     406:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <__data_end>
     40a:	90 91 c7 20 	lds	r25, 0x20C7	; 0x8020c7 <__data_end+0x1>
     40e:	80 36       	cpi	r24, 0x60	; 96
     410:	9a 4e       	sbci	r25, 0xEA	; 234
     412:	20 f5       	brcc	.+72     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
			b1Count++;
     414:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <__data_end>
     418:	90 91 c7 20 	lds	r25, 0x20C7	; 0x8020c7 <__data_end+0x1>
     41c:	01 96       	adiw	r24, 0x01	; 1
     41e:	80 93 c6 20 	sts	0x20C6, r24	; 0x8020c6 <__data_end>
     422:	90 93 c7 20 	sts	0x20C7, r25	; 0x8020c7 <__data_end+0x1>
     426:	1a c0       	rjmp	.+52     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
		}
	} else {
		if(b1Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     428:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <__data_end>
     42c:	90 91 c7 20 	lds	r25, 0x20C7	; 0x8020c7 <__data_end+0x1>
     430:	0b 97       	sbiw	r24, 0x0b	; 11
     432:	68 f0       	brcs	.+26     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
			if(b1Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     434:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <__data_end>
     438:	90 91 c7 20 	lds	r25, 0x20C7	; 0x8020c7 <__data_end+0x1>
     43c:	c3 97       	sbiw	r24, 0x33	; 51
     43e:	18 f0       	brcs	.+6      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
				//Button was pressed Long
				b1Status = LONG_PRESSED;
     440:	10 92 39 31 	sts	0x3139, r1	; 0x803139 <b1Status>
     444:	07 c0       	rjmp	.+14     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
			} else {
				//Button was pressed Short	
				b1Status = SHORT_PRESSED;
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	80 93 39 31 	sts	0x3139, r24	; 0x803139 <b1Status>
     44c:	03 c0       	rjmp	.+6      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
			}
		} else {
			b1Status = NOT_PRESSED;
     44e:	82 e0       	ldi	r24, 0x02	; 2
     450:	80 93 39 31 	sts	0x3139, r24	; 0x803139 <b1Status>
		}
		b1Count = 0;
     454:	10 92 c6 20 	sts	0x20C6, r1	; 0x8020c6 <__data_end>
     458:	10 92 c7 20 	sts	0x20C7, r1	; 0x8020c7 <__data_end+0x1>
	}
	if(Button2_Value == 0) {
     45c:	80 ea       	ldi	r24, 0xA0	; 160
     45e:	96 e0       	ldi	r25, 0x06	; 6
     460:	fc 01       	movw	r30, r24
     462:	80 85       	ldd	r24, Z+8	; 0x08
     464:	88 2f       	mov	r24, r24
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	80 72       	andi	r24, 0x20	; 32
     46a:	99 27       	eor	r25, r25
     46c:	95 95       	asr	r25
     46e:	87 95       	ror	r24
     470:	95 95       	asr	r25
     472:	87 95       	ror	r24
     474:	95 95       	asr	r25
     476:	87 95       	ror	r24
     478:	95 95       	asr	r25
     47a:	87 95       	ror	r24
     47c:	95 95       	asr	r25
     47e:	87 95       	ror	r24
     480:	89 2b       	or	r24, r25
     482:	89 f4       	brne	.+34     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
		if(b2Count < 60000) {
     484:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <b2Count.3830>
     488:	90 91 c9 20 	lds	r25, 0x20C9	; 0x8020c9 <b2Count.3830+0x1>
     48c:	80 36       	cpi	r24, 0x60	; 96
     48e:	9a 4e       	sbci	r25, 0xEA	; 234
     490:	20 f5       	brcc	.+72     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
			b2Count++;
     492:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <b2Count.3830>
     496:	90 91 c9 20 	lds	r25, 0x20C9	; 0x8020c9 <b2Count.3830+0x1>
     49a:	01 96       	adiw	r24, 0x01	; 1
     49c:	80 93 c8 20 	sts	0x20C8, r24	; 0x8020c8 <b2Count.3830>
     4a0:	90 93 c9 20 	sts	0x20C9, r25	; 0x8020c9 <b2Count.3830+0x1>
     4a4:	1a c0       	rjmp	.+52     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
		}
	} else {
		if(b2Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     4a6:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <b2Count.3830>
     4aa:	90 91 c9 20 	lds	r25, 0x20C9	; 0x8020c9 <b2Count.3830+0x1>
     4ae:	0b 97       	sbiw	r24, 0x0b	; 11
     4b0:	68 f0       	brcs	.+26     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
			if(b2Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     4b2:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <b2Count.3830>
     4b6:	90 91 c9 20 	lds	r25, 0x20C9	; 0x8020c9 <b2Count.3830+0x1>
     4ba:	c3 97       	sbiw	r24, 0x33	; 51
     4bc:	18 f0       	brcs	.+6      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
				//Button was pressed Long
				b2Status = LONG_PRESSED;
     4be:	10 92 3a 31 	sts	0x313A, r1	; 0x80313a <b2Status>
     4c2:	07 c0       	rjmp	.+14     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
				} else {
				//Button was pressed Short
				b2Status = SHORT_PRESSED;
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	80 93 3a 31 	sts	0x313A, r24	; 0x80313a <b2Status>
     4ca:	03 c0       	rjmp	.+6      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
			}
		} else {
			b2Status = NOT_PRESSED;			
     4cc:	82 e0       	ldi	r24, 0x02	; 2
     4ce:	80 93 3a 31 	sts	0x313A, r24	; 0x80313a <b2Status>
		}
		b2Count = 0;
     4d2:	10 92 c8 20 	sts	0x20C8, r1	; 0x8020c8 <b2Count.3830>
     4d6:	10 92 c9 20 	sts	0x20C9, r1	; 0x8020c9 <b2Count.3830+0x1>
	}
	if(Button3_Value == 0) {
     4da:	80 ea       	ldi	r24, 0xA0	; 160
     4dc:	96 e0       	ldi	r25, 0x06	; 6
     4de:	fc 01       	movw	r30, r24
     4e0:	80 85       	ldd	r24, Z+8	; 0x08
     4e2:	88 2f       	mov	r24, r24
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	80 74       	andi	r24, 0x40	; 64
     4e8:	99 27       	eor	r25, r25
     4ea:	08 2e       	mov	r0, r24
     4ec:	89 2f       	mov	r24, r25
     4ee:	00 0c       	add	r0, r0
     4f0:	88 1f       	adc	r24, r24
     4f2:	99 0b       	sbc	r25, r25
     4f4:	00 0c       	add	r0, r0
     4f6:	88 1f       	adc	r24, r24
     4f8:	99 1f       	adc	r25, r25
     4fa:	89 2b       	or	r24, r25
     4fc:	89 f4       	brne	.+34     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
		if(b3Count < 60000) {
     4fe:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <b3Count.3831>
     502:	90 91 cb 20 	lds	r25, 0x20CB	; 0x8020cb <b3Count.3831+0x1>
     506:	80 36       	cpi	r24, 0x60	; 96
     508:	9a 4e       	sbci	r25, 0xEA	; 234
     50a:	20 f5       	brcc	.+72     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
			b3Count++;
     50c:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <b3Count.3831>
     510:	90 91 cb 20 	lds	r25, 0x20CB	; 0x8020cb <b3Count.3831+0x1>
     514:	01 96       	adiw	r24, 0x01	; 1
     516:	80 93 ca 20 	sts	0x20CA, r24	; 0x8020ca <b3Count.3831>
     51a:	90 93 cb 20 	sts	0x20CB, r25	; 0x8020cb <b3Count.3831+0x1>
     51e:	1a c0       	rjmp	.+52     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
		}
	} else {
		if(b3Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     520:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <b3Count.3831>
     524:	90 91 cb 20 	lds	r25, 0x20CB	; 0x8020cb <b3Count.3831+0x1>
     528:	0b 97       	sbiw	r24, 0x0b	; 11
     52a:	68 f0       	brcs	.+26     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
			if(b3Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     52c:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <b3Count.3831>
     530:	90 91 cb 20 	lds	r25, 0x20CB	; 0x8020cb <b3Count.3831+0x1>
     534:	c3 97       	sbiw	r24, 0x33	; 51
     536:	18 f0       	brcs	.+6      	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
				//Button was pressed Long
				b3Status = LONG_PRESSED;
     538:	10 92 3b 31 	sts	0x313B, r1	; 0x80313b <b3Status>
     53c:	07 c0       	rjmp	.+14     	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
				} else {
				//Button was pressed Short
				b3Status = SHORT_PRESSED;
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	80 93 3b 31 	sts	0x313B, r24	; 0x80313b <b3Status>
     544:	03 c0       	rjmp	.+6      	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
			}
		} else {
			b3Status = NOT_PRESSED;
     546:	82 e0       	ldi	r24, 0x02	; 2
     548:	80 93 3b 31 	sts	0x313B, r24	; 0x80313b <b3Status>
		}
		b3Count = 0;
     54c:	10 92 ca 20 	sts	0x20CA, r1	; 0x8020ca <b3Count.3831>
     550:	10 92 cb 20 	sts	0x20CB, r1	; 0x8020cb <b3Count.3831+0x1>
	}
	if(Button4_Value == 0) {
     554:	80 ea       	ldi	r24, 0xA0	; 160
     556:	96 e0       	ldi	r25, 0x06	; 6
     558:	fc 01       	movw	r30, r24
     55a:	80 85       	ldd	r24, Z+8	; 0x08
     55c:	88 23       	and	r24, r24
     55e:	8c f0       	brlt	.+34     	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
		if(b4Count < 60000) {
     560:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <b4Count.3832>
     564:	90 91 cd 20 	lds	r25, 0x20CD	; 0x8020cd <b4Count.3832+0x1>
     568:	80 36       	cpi	r24, 0x60	; 96
     56a:	9a 4e       	sbci	r25, 0xEA	; 234
     56c:	20 f5       	brcc	.+72     	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
			b4Count++;
     56e:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <b4Count.3832>
     572:	90 91 cd 20 	lds	r25, 0x20CD	; 0x8020cd <b4Count.3832+0x1>
     576:	01 96       	adiw	r24, 0x01	; 1
     578:	80 93 cc 20 	sts	0x20CC, r24	; 0x8020cc <b4Count.3832>
     57c:	90 93 cd 20 	sts	0x20CD, r25	; 0x8020cd <b4Count.3832+0x1>
		} else {
			b4Status = NOT_PRESSED;
		}
		b4Count = 0;
	}
 }
     580:	1a c0       	rjmp	.+52     	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
	if(Button4_Value == 0) {
		if(b4Count < 60000) {
			b4Count++;
		}
	} else {
		if(b4Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     582:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <b4Count.3832>
     586:	90 91 cd 20 	lds	r25, 0x20CD	; 0x8020cd <b4Count.3832+0x1>
     58a:	0b 97       	sbiw	r24, 0x0b	; 11
     58c:	68 f0       	brcs	.+26     	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
			if(b4Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     58e:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <b4Count.3832>
     592:	90 91 cd 20 	lds	r25, 0x20CD	; 0x8020cd <b4Count.3832+0x1>
     596:	c3 97       	sbiw	r24, 0x33	; 51
     598:	18 f0       	brcs	.+6      	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
				//Button was pressed Long
				b4Status = LONG_PRESSED;
     59a:	10 92 3c 31 	sts	0x313C, r1	; 0x80313c <b4Status>
     59e:	07 c0       	rjmp	.+14     	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
				} else {
				//Button was pressed Short
				b4Status = SHORT_PRESSED;
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	80 93 3c 31 	sts	0x313C, r24	; 0x80313c <b4Status>
     5a6:	03 c0       	rjmp	.+6      	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
			}
		} else {
			b4Status = NOT_PRESSED;
     5a8:	82 e0       	ldi	r24, 0x02	; 2
     5aa:	80 93 3c 31 	sts	0x313C, r24	; 0x80313c <b4Status>
		}
		b4Count = 0;
     5ae:	10 92 cc 20 	sts	0x20CC, r1	; 0x8020cc <b4Count.3832>
     5b2:	10 92 cd 20 	sts	0x20CD, r1	; 0x8020cd <b4Count.3832+0x1>
	}
 }
     5b6:	00 00       	nop
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	08 95       	ret

000005be <getButtonPress>:

 button_press_t getButtonPress(button_t button) {
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	1f 92       	push	r1
     5c4:	cd b7       	in	r28, 0x3d	; 61
     5c6:	de b7       	in	r29, 0x3e	; 62
     5c8:	89 83       	std	Y+1, r24	; 0x01
	switch(button) {
     5ca:	89 81       	ldd	r24, Y+1	; 0x01
     5cc:	88 2f       	mov	r24, r24
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	81 30       	cpi	r24, 0x01	; 1
     5d2:	91 05       	cpc	r25, r1
     5d4:	79 f0       	breq	.+30     	; 0x5f4 <getButtonPress+0x36>
     5d6:	82 30       	cpi	r24, 0x02	; 2
     5d8:	91 05       	cpc	r25, r1
     5da:	1c f4       	brge	.+6      	; 0x5e2 <getButtonPress+0x24>
     5dc:	89 2b       	or	r24, r25
     5de:	39 f0       	breq	.+14     	; 0x5ee <getButtonPress+0x30>
     5e0:	12 c0       	rjmp	.+36     	; 0x606 <getButtonPress+0x48>
     5e2:	82 30       	cpi	r24, 0x02	; 2
     5e4:	91 05       	cpc	r25, r1
     5e6:	49 f0       	breq	.+18     	; 0x5fa <getButtonPress+0x3c>
     5e8:	03 97       	sbiw	r24, 0x03	; 3
     5ea:	51 f0       	breq	.+20     	; 0x600 <getButtonPress+0x42>
     5ec:	0c c0       	rjmp	.+24     	; 0x606 <getButtonPress+0x48>
		case BUTTON1:
			return b1Status;
     5ee:	80 91 39 31 	lds	r24, 0x3139	; 0x803139 <b1Status>
     5f2:	0a c0       	rjmp	.+20     	; 0x608 <getButtonPress+0x4a>
		break;
		case BUTTON2:
			return b2Status;
     5f4:	80 91 3a 31 	lds	r24, 0x313A	; 0x80313a <b2Status>
     5f8:	07 c0       	rjmp	.+14     	; 0x608 <getButtonPress+0x4a>
		break;
		case BUTTON3:
			return b3Status;
     5fa:	80 91 3b 31 	lds	r24, 0x313B	; 0x80313b <b3Status>
     5fe:	04 c0       	rjmp	.+8      	; 0x608 <getButtonPress+0x4a>
		break;
		case BUTTON4:
			return b4Status;
     600:	80 91 3c 31 	lds	r24, 0x313C	; 0x80313c <b4Status>
     604:	01 c0       	rjmp	.+2      	; 0x608 <getButtonPress+0x4a>
		break;
	}
	return NOT_PRESSED;
     606:	82 e0       	ldi	r24, 0x02	; 2
     608:	0f 90       	pop	r0
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	08 95       	ret

00000610 <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
     610:	0f 93       	push	r16
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
     616:	00 d0       	rcall	.+0      	; 0x618 <CCPWrite+0x8>
     618:	00 d0       	rcall	.+0      	; 0x61a <CCPWrite+0xa>
     61a:	cd b7       	in	r28, 0x3d	; 61
     61c:	de b7       	in	r29, 0x3e	; 62
     61e:	8c 83       	std	Y+4, r24	; 0x04
     620:	9d 83       	std	Y+5, r25	; 0x05
     622:	6e 83       	std	Y+6, r22	; 0x06

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
     624:	8f e3       	ldi	r24, 0x3F	; 63
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	fc 01       	movw	r30, r24
     62a:	80 81       	ld	r24, Z
     62c:	8b 83       	std	Y+3, r24	; 0x03
     62e:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
     630:	8c 81       	ldd	r24, Y+4	; 0x04
     632:	9d 81       	ldd	r25, Y+5	; 0x05
     634:	89 83       	std	Y+1, r24	; 0x01
     636:	9a 83       	std	Y+2, r25	; 0x02
#ifdef RAMPZ
	RAMPZ = 0;
     638:	8b e3       	ldi	r24, 0x3B	; 59
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	fc 01       	movw	r30, r24
     63e:	10 82       	st	Z, r1
#endif
	asm volatile(
     640:	89 81       	ldd	r24, Y+1	; 0x01
     642:	9a 81       	ldd	r25, Y+2	; 0x02
     644:	2e 81       	ldd	r18, Y+6	; 0x06
     646:	fc 01       	movw	r30, r24
     648:	08 ed       	ldi	r16, 0xD8	; 216
     64a:	04 bf       	out	0x34, r16	; 52
     64c:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
     64e:	8f e3       	ldi	r24, 0x3F	; 63
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	2b 81       	ldd	r18, Y+3	; 0x03
     654:	fc 01       	movw	r30, r24
     656:	20 83       	st	Z, r18
#endif
}
     658:	00 00       	nop
     65a:	26 96       	adiw	r28, 0x06	; 6
     65c:	cd bf       	out	0x3d, r28	; 61
     65e:	de bf       	out	0x3e, r29	; 62
     660:	df 91       	pop	r29
     662:	cf 91       	pop	r28
     664:	0f 91       	pop	r16
     666:	08 95       	ret

00000668 <CLKSYS_XOSC_Config>:
 *                             external clock) and startup times.
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	00 d0       	rcall	.+0      	; 0x66e <CLKSYS_XOSC_Config+0x6>
     66e:	cd b7       	in	r28, 0x3d	; 61
     670:	de b7       	in	r29, 0x3e	; 62
     672:	89 83       	std	Y+1, r24	; 0x01
     674:	6a 83       	std	Y+2, r22	; 0x02
     676:	4b 83       	std	Y+3, r20	; 0x03
	OSC.XOSCCTRL = (uint8_t) freqRange |
     678:	80 e5       	ldi	r24, 0x50	; 80
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	2a 81       	ldd	r18, Y+2	; 0x02
     67e:	22 23       	and	r18, r18
     680:	11 f0       	breq	.+4      	; 0x686 <CLKSYS_XOSC_Config+0x1e>
     682:	20 e2       	ldi	r18, 0x20	; 32
     684:	01 c0       	rjmp	.+2      	; 0x688 <CLKSYS_XOSC_Config+0x20>
     686:	20 e0       	ldi	r18, 0x00	; 0
     688:	39 81       	ldd	r19, Y+1	; 0x01
     68a:	32 2b       	or	r19, r18
     68c:	2b 81       	ldd	r18, Y+3	; 0x03
     68e:	23 2b       	or	r18, r19
     690:	fc 01       	movw	r30, r24
     692:	22 83       	std	Z+2, r18	; 0x02
	               ( lowPower32kHz ? OSC_X32KLPM_bm : 0 ) |
	               xoscModeSelection;
}
     694:	00 00       	nop
     696:	23 96       	adiw	r28, 0x03	; 3
     698:	cd bf       	out	0x3d, r28	; 61
     69a:	de bf       	out	0x3e, r29	; 62
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
     6a0:	08 95       	ret

000006a2 <CLKSYS_PLL_Config>:
 *                      must be above 0.4MHz.
 *  \param  factor      PLL multiplication factor, must be
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	1f 92       	push	r1
     6a8:	1f 92       	push	r1
     6aa:	cd b7       	in	r28, 0x3d	; 61
     6ac:	de b7       	in	r29, 0x3e	; 62
     6ae:	89 83       	std	Y+1, r24	; 0x01
     6b0:	6a 83       	std	Y+2, r22	; 0x02
	factor &= OSC_PLLFAC_gm;
     6b2:	8a 81       	ldd	r24, Y+2	; 0x02
     6b4:	8f 71       	andi	r24, 0x1F	; 31
     6b6:	8a 83       	std	Y+2, r24	; 0x02
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
     6b8:	80 e5       	ldi	r24, 0x50	; 80
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	39 81       	ldd	r19, Y+1	; 0x01
     6be:	2a 81       	ldd	r18, Y+2	; 0x02
     6c0:	23 2b       	or	r18, r19
     6c2:	fc 01       	movw	r30, r24
     6c4:	25 83       	std	Z+5, r18	; 0x05
}
     6c6:	00 00       	nop
     6c8:	0f 90       	pop	r0
     6ca:	0f 90       	pop	r0
     6cc:	df 91       	pop	r29
     6ce:	cf 91       	pop	r28
     6d0:	08 95       	ret

000006d2 <CLKSYS_Disable>:
 *                 OSC_XOSCEN_bm, OSC_PLLEN_bm.
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	1f 92       	push	r1
     6d8:	1f 92       	push	r1
     6da:	cd b7       	in	r28, 0x3d	; 61
     6dc:	de b7       	in	r29, 0x3e	; 62
     6de:	8a 83       	std	Y+2, r24	; 0x02
	OSC.CTRL &= ~oscSel;
     6e0:	80 e5       	ldi	r24, 0x50	; 80
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	20 e5       	ldi	r18, 0x50	; 80
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	f9 01       	movw	r30, r18
     6ea:	20 81       	ld	r18, Z
     6ec:	32 2f       	mov	r19, r18
     6ee:	2a 81       	ldd	r18, Y+2	; 0x02
     6f0:	20 95       	com	r18
     6f2:	23 23       	and	r18, r19
     6f4:	fc 01       	movw	r30, r24
     6f6:	20 83       	st	Z, r18
	uint8_t clkEnabled = OSC.CTRL & oscSel;
     6f8:	80 e5       	ldi	r24, 0x50	; 80
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	fc 01       	movw	r30, r24
     6fe:	90 81       	ld	r25, Z
     700:	8a 81       	ldd	r24, Y+2	; 0x02
     702:	89 23       	and	r24, r25
     704:	89 83       	std	Y+1, r24	; 0x01
	return clkEnabled;
     706:	89 81       	ldd	r24, Y+1	; 0x01
}
     708:	0f 90       	pop	r0
     70a:	0f 90       	pop	r0
     70c:	df 91       	pop	r29
     70e:	cf 91       	pop	r28
     710:	08 95       	ret

00000712 <CLKSYS_Prescalers_Config>:
 *  \param  PSBCfactor  Prescaler B and C division factor, in the combination
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
     712:	cf 93       	push	r28
     714:	df 93       	push	r29
     716:	00 d0       	rcall	.+0      	; 0x718 <CLKSYS_Prescalers_Config+0x6>
     718:	cd b7       	in	r28, 0x3d	; 61
     71a:	de b7       	in	r29, 0x3e	; 62
     71c:	8a 83       	std	Y+2, r24	; 0x02
     71e:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
     720:	9a 81       	ldd	r25, Y+2	; 0x02
     722:	8b 81       	ldd	r24, Y+3	; 0x03
     724:	89 2b       	or	r24, r25
     726:	89 83       	std	Y+1, r24	; 0x01
	CCPWrite( &CLK.PSCTRL, PSconfig );
     728:	69 81       	ldd	r22, Y+1	; 0x01
     72a:	81 e4       	ldi	r24, 0x41	; 65
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	0e 94 08 03 	call	0x610	; 0x610 <CCPWrite>
}
     732:	00 00       	nop
     734:	23 96       	adiw	r28, 0x03	; 3
     736:	cd bf       	out	0x3d, r28	; 61
     738:	de bf       	out	0x3e, r29	; 62
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28
     73e:	08 95       	ret

00000740 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
     744:	1f 92       	push	r1
     746:	1f 92       	push	r1
     748:	cd b7       	in	r28, 0x3d	; 61
     74a:	de b7       	in	r29, 0x3e	; 62
     74c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     74e:	80 e4       	ldi	r24, 0x40	; 64
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	fc 01       	movw	r30, r24
     754:	80 81       	ld	r24, Z
     756:	98 2f       	mov	r25, r24
     758:	98 7f       	andi	r25, 0xF8	; 248
     75a:	8a 81       	ldd	r24, Y+2	; 0x02
     75c:	89 2b       	or	r24, r25
     75e:	89 83       	std	Y+1, r24	; 0x01
	CCPWrite( &CLK.CTRL, clkCtrl );
     760:	69 81       	ldd	r22, Y+1	; 0x01
     762:	80 e4       	ldi	r24, 0x40	; 64
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	0e 94 08 03 	call	0x610	; 0x610 <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
     76a:	80 e4       	ldi	r24, 0x40	; 64
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	fc 01       	movw	r30, r24
     770:	90 81       	ld	r25, Z
     772:	8a 81       	ldd	r24, Y+2	; 0x02
     774:	89 23       	and	r24, r25
     776:	89 83       	std	Y+1, r24	; 0x01
	return clkCtrl;
     778:	89 81       	ldd	r24, Y+1	; 0x01
}
     77a:	0f 90       	pop	r0
     77c:	0f 90       	pop	r0
     77e:	df 91       	pop	r29
     780:	cf 91       	pop	r28
     782:	08 95       	ret

00000784 <TC0_ConfigClockSource>:
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
}
     784:	cf 93       	push	r28
     786:	df 93       	push	r29
     788:	00 d0       	rcall	.+0      	; 0x78a <TC0_ConfigClockSource+0x6>
     78a:	cd b7       	in	r28, 0x3d	; 61
     78c:	de b7       	in	r29, 0x3e	; 62
     78e:	89 83       	std	Y+1, r24	; 0x01
     790:	9a 83       	std	Y+2, r25	; 0x02
     792:	6b 83       	std	Y+3, r22	; 0x03
     794:	89 81       	ldd	r24, Y+1	; 0x01
     796:	9a 81       	ldd	r25, Y+2	; 0x02
     798:	fc 01       	movw	r30, r24
     79a:	80 81       	ld	r24, Z
     79c:	98 2f       	mov	r25, r24
     79e:	90 7f       	andi	r25, 0xF0	; 240
     7a0:	8b 81       	ldd	r24, Y+3	; 0x03
     7a2:	89 2b       	or	r24, r25
     7a4:	28 2f       	mov	r18, r24
     7a6:	89 81       	ldd	r24, Y+1	; 0x01
     7a8:	9a 81       	ldd	r25, Y+2	; 0x02
     7aa:	fc 01       	movw	r30, r24
     7ac:	20 83       	st	Z, r18
     7ae:	00 00       	nop
     7b0:	23 96       	adiw	r28, 0x03	; 3
     7b2:	cd bf       	out	0x3d, r28	; 61
     7b4:	de bf       	out	0x3e, r29	; 62
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	08 95       	ret

000007bc <TC0_ConfigWGM>:
     7bc:	cf 93       	push	r28
     7be:	df 93       	push	r29
     7c0:	00 d0       	rcall	.+0      	; 0x7c2 <TC0_ConfigWGM+0x6>
     7c2:	cd b7       	in	r28, 0x3d	; 61
     7c4:	de b7       	in	r29, 0x3e	; 62
     7c6:	89 83       	std	Y+1, r24	; 0x01
     7c8:	9a 83       	std	Y+2, r25	; 0x02
     7ca:	6b 83       	std	Y+3, r22	; 0x03
     7cc:	89 81       	ldd	r24, Y+1	; 0x01
     7ce:	9a 81       	ldd	r25, Y+2	; 0x02
     7d0:	fc 01       	movw	r30, r24
     7d2:	81 81       	ldd	r24, Z+1	; 0x01
     7d4:	98 2f       	mov	r25, r24
     7d6:	98 7f       	andi	r25, 0xF8	; 248
     7d8:	8b 81       	ldd	r24, Y+3	; 0x03
     7da:	89 2b       	or	r24, r25
     7dc:	28 2f       	mov	r18, r24
     7de:	89 81       	ldd	r24, Y+1	; 0x01
     7e0:	9a 81       	ldd	r25, Y+2	; 0x02
     7e2:	fc 01       	movw	r30, r24
     7e4:	21 83       	std	Z+1, r18	; 0x01
     7e6:	00 00       	nop
     7e8:	23 96       	adiw	r28, 0x03	; 3
     7ea:	cd bf       	out	0x3d, r28	; 61
     7ec:	de bf       	out	0x3e, r29	; 62
     7ee:	df 91       	pop	r29
     7f0:	cf 91       	pop	r28
     7f2:	08 95       	ret

000007f4 <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
     7f4:	cf 93       	push	r28
     7f6:	df 93       	push	r29
     7f8:	00 d0       	rcall	.+0      	; 0x7fa <TC0_SetOverflowIntLevel+0x6>
     7fa:	cd b7       	in	r28, 0x3d	; 61
     7fc:	de b7       	in	r29, 0x3e	; 62
     7fe:	89 83       	std	Y+1, r24	; 0x01
     800:	9a 83       	std	Y+2, r25	; 0x02
     802:	6b 83       	std	Y+3, r22	; 0x03
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
     804:	89 81       	ldd	r24, Y+1	; 0x01
     806:	9a 81       	ldd	r25, Y+2	; 0x02
     808:	fc 01       	movw	r30, r24
     80a:	86 81       	ldd	r24, Z+6	; 0x06
     80c:	98 2f       	mov	r25, r24
     80e:	9c 7f       	andi	r25, 0xFC	; 252
     810:	8b 81       	ldd	r24, Y+3	; 0x03
     812:	89 2b       	or	r24, r25
     814:	28 2f       	mov	r18, r24
     816:	89 81       	ldd	r24, Y+1	; 0x01
     818:	9a 81       	ldd	r25, Y+2	; 0x02
     81a:	fc 01       	movw	r30, r24
     81c:	26 83       	std	Z+6, r18	; 0x06
}
     81e:	00 00       	nop
     820:	23 96       	adiw	r28, 0x03	; 3
     822:	cd bf       	out	0x3d, r28	; 61
     824:	de bf       	out	0x3e, r29	; 62
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	08 95       	ret

0000082c <vApplicationStackOverflowHook>:
 {
	 (void)errCode;

	 uint8_t a=42; (void)a;

 }
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	00 d0       	rcall	.+0      	; 0x832 <vApplicationStackOverflowHook+0x6>
     832:	1f 92       	push	r1
     834:	cd b7       	in	r28, 0x3d	; 61
     836:	de b7       	in	r29, 0x3e	; 62
     838:	89 83       	std	Y+1, r24	; 0x01
     83a:	9a 83       	std	Y+2, r25	; 0x02
     83c:	6b 83       	std	Y+3, r22	; 0x03
     83e:	7c 83       	std	Y+4, r23	; 0x04
     840:	8b e2       	ldi	r24, 0x2B	; 43
     842:	0e 94 2a 04 	call	0x854	; 0x854 <error>
     846:	00 00       	nop
     848:	24 96       	adiw	r28, 0x04	; 4
     84a:	cd bf       	out	0x3d, r28	; 61
     84c:	de bf       	out	0x3e, r29	; 62
     84e:	df 91       	pop	r29
     850:	cf 91       	pop	r28
     852:	08 95       	ret

00000854 <error>:

 //----------------------------------------------
 //
 void error(uint8_t errCode)
 {
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	1f 92       	push	r1
     85a:	1f 92       	push	r1
     85c:	cd b7       	in	r28, 0x3d	; 61
     85e:	de b7       	in	r29, 0x3e	; 62
     860:	8a 83       	std	Y+2, r24	; 0x02
	 uint8_t a;

	 if(errCode==ERR_STACK_OVERFLOW)
     862:	8a 81       	ldd	r24, Y+2	; 0x02
     864:	8b 32       	cpi	r24, 0x2B	; 43
     866:	19 f4       	brne	.+6      	; 0x86e <error+0x1a>
	 a = 1;
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	89 83       	std	Y+1, r24	; 0x01
     86c:	0e c0       	rjmp	.+28     	; 0x88a <error+0x36>
	 else if(errCode==ERR_QUEUE_SEND_FAILED)
     86e:	8a 81       	ldd	r24, Y+2	; 0x02
     870:	8c 32       	cpi	r24, 0x2C	; 44
     872:	19 f4       	brne	.+6      	; 0x87a <error+0x26>
	 a = 2;
     874:	82 e0       	ldi	r24, 0x02	; 2
     876:	89 83       	std	Y+1, r24	; 0x01
     878:	08 c0       	rjmp	.+16     	; 0x88a <error+0x36>
	 else if(errCode==ERR_BYTES_SHOULD_BE_AVAILABLE)
     87a:	8a 81       	ldd	r24, Y+2	; 0x02
     87c:	8f 32       	cpi	r24, 0x2F	; 47
     87e:	19 f4       	brne	.+6      	; 0x886 <error+0x32>
	 a = 3;
     880:	83 e0       	ldi	r24, 0x03	; 3
     882:	89 83       	std	Y+1, r24	; 0x01
     884:	02 c0       	rjmp	.+4      	; 0x88a <error+0x36>
	 else
	 a = 4;
     886:	84 e0       	ldi	r24, 0x04	; 4
     888:	89 83       	std	Y+1, r24	; 0x01
	 // TODO from here:
	 //
	 // - log the occurance of any error in flash mem (inc counter)
	 // - print a message

	 software_reset();
     88a:	0e 94 4d 04 	call	0x89a	; 0x89a <software_reset>
 }
     88e:	00 00       	nop
     890:	0f 90       	pop	r0
     892:	0f 90       	pop	r0
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	08 95       	ret

0000089a <software_reset>:

 //----------------------------------------------
 //
 void software_reset(void)
 {	 
     89a:	cf 93       	push	r28
     89c:	df 93       	push	r29
     89e:	cd b7       	in	r28, 0x3d	; 61
     8a0:	de b7       	in	r29, 0x3e	; 62
	 asm("nop");
     8a2:	00 00       	nop
	 CPU_CCP  = CCP_IOREG_gc;
     8a4:	84 e3       	ldi	r24, 0x34	; 52
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	28 ed       	ldi	r18, 0xD8	; 216
     8aa:	fc 01       	movw	r30, r24
     8ac:	20 83       	st	Z, r18
	 RST.CTRL = RST_SWRST_bm ;	 
     8ae:	88 e7       	ldi	r24, 0x78	; 120
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	21 e0       	ldi	r18, 0x01	; 1
     8b4:	fc 01       	movw	r30, r24
     8b6:	21 83       	std	Z+1, r18	; 0x01
     8b8:	00 00       	nop
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	08 95       	ret

000008c0 <xEventGroupCreate>:
/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	1f 92       	push	r1
     8c6:	1f 92       	push	r1
     8c8:	cd b7       	in	r28, 0x3d	; 61
     8ca:	de b7       	in	r29, 0x3e	; 62
     8cc:	80 e1       	ldi	r24, 0x10	; 16
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	0e 94 9d 07 	call	0xf3a	; 0xf3a <pvPortMalloc>
     8d4:	89 83       	std	Y+1, r24	; 0x01
     8d6:	9a 83       	std	Y+2, r25	; 0x02
     8d8:	89 81       	ldd	r24, Y+1	; 0x01
     8da:	9a 81       	ldd	r25, Y+2	; 0x02
     8dc:	89 2b       	or	r24, r25
     8de:	61 f0       	breq	.+24     	; 0x8f8 <xEventGroupCreate+0x38>
     8e0:	89 81       	ldd	r24, Y+1	; 0x01
     8e2:	9a 81       	ldd	r25, Y+2	; 0x02
     8e4:	fc 01       	movw	r30, r24
     8e6:	10 82       	st	Z, r1
     8e8:	11 82       	std	Z+1, r1	; 0x01
     8ea:	12 82       	std	Z+2, r1	; 0x02
     8ec:	13 82       	std	Z+3, r1	; 0x03
     8ee:	89 81       	ldd	r24, Y+1	; 0x01
     8f0:	9a 81       	ldd	r25, Y+2	; 0x02
     8f2:	04 96       	adiw	r24, 0x04	; 4
     8f4:	0e 94 ef 07 	call	0xfde	; 0xfde <vListInitialise>
     8f8:	89 81       	ldd	r24, Y+1	; 0x01
     8fa:	9a 81       	ldd	r25, Y+2	; 0x02
     8fc:	0f 90       	pop	r0
     8fe:	0f 90       	pop	r0
     900:	df 91       	pop	r29
     902:	cf 91       	pop	r28
     904:	08 95       	ret

00000906 <xEventGroupWaitBits>:
     906:	cf 92       	push	r12
     908:	df 92       	push	r13
     90a:	ef 92       	push	r14
     90c:	ff 92       	push	r15
     90e:	0f 93       	push	r16
     910:	1f 93       	push	r17
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	cd b7       	in	r28, 0x3d	; 61
     918:	de b7       	in	r29, 0x3e	; 62
     91a:	6d 97       	sbiw	r28, 0x1d	; 29
     91c:	cd bf       	out	0x3d, r28	; 61
     91e:	de bf       	out	0x3e, r29	; 62
     920:	8a 8b       	std	Y+18, r24	; 0x12
     922:	9b 8b       	std	Y+19, r25	; 0x13
     924:	4c 8b       	std	Y+20, r20	; 0x14
     926:	5d 8b       	std	Y+21, r21	; 0x15
     928:	6e 8b       	std	Y+22, r22	; 0x16
     92a:	7f 8b       	std	Y+23, r23	; 0x17
     92c:	28 8f       	std	Y+24, r18	; 0x18
     92e:	09 8f       	std	Y+25, r16	; 0x19
     930:	ca 8e       	std	Y+26, r12	; 0x1a
     932:	db 8e       	std	Y+27, r13	; 0x1b
     934:	ec 8e       	std	Y+28, r14	; 0x1c
     936:	fd 8e       	std	Y+29, r15	; 0x1d
     938:	8a 89       	ldd	r24, Y+18	; 0x12
     93a:	9b 89       	ldd	r25, Y+19	; 0x13
     93c:	89 87       	std	Y+9, r24	; 0x09
     93e:	9a 87       	std	Y+10, r25	; 0x0a
     940:	1d 82       	std	Y+5, r1	; 0x05
     942:	1e 82       	std	Y+6, r1	; 0x06
     944:	1f 82       	std	Y+7, r1	; 0x07
     946:	18 86       	std	Y+8, r1	; 0x08
     948:	1b 86       	std	Y+11, r1	; 0x0b
     94a:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <vTaskSuspendAll>
     94e:	89 85       	ldd	r24, Y+9	; 0x09
     950:	9a 85       	ldd	r25, Y+10	; 0x0a
     952:	fc 01       	movw	r30, r24
     954:	80 81       	ld	r24, Z
     956:	91 81       	ldd	r25, Z+1	; 0x01
     958:	a2 81       	ldd	r26, Z+2	; 0x02
     95a:	b3 81       	ldd	r27, Z+3	; 0x03
     95c:	8c 87       	std	Y+12, r24	; 0x0c
     95e:	9d 87       	std	Y+13, r25	; 0x0d
     960:	ae 87       	std	Y+14, r26	; 0x0e
     962:	bf 87       	std	Y+15, r27	; 0x0f
     964:	2c 89       	ldd	r18, Y+20	; 0x14
     966:	3d 89       	ldd	r19, Y+21	; 0x15
     968:	4e 89       	ldd	r20, Y+22	; 0x16
     96a:	5f 89       	ldd	r21, Y+23	; 0x17
     96c:	8c 85       	ldd	r24, Y+12	; 0x0c
     96e:	9d 85       	ldd	r25, Y+13	; 0x0d
     970:	ae 85       	ldd	r26, Y+14	; 0x0e
     972:	bf 85       	ldd	r27, Y+15	; 0x0f
     974:	09 8d       	ldd	r16, Y+25	; 0x19
     976:	bc 01       	movw	r22, r24
     978:	cd 01       	movw	r24, r26
     97a:	0e 94 2c 07 	call	0xe58	; 0xe58 <prvTestWaitCondition>
     97e:	88 8b       	std	Y+16, r24	; 0x10
     980:	88 89       	ldd	r24, Y+16	; 0x10
     982:	88 23       	and	r24, r24
     984:	59 f1       	breq	.+86     	; 0x9dc <xEventGroupWaitBits+0xd6>
     986:	8c 85       	ldd	r24, Y+12	; 0x0c
     988:	9d 85       	ldd	r25, Y+13	; 0x0d
     98a:	ae 85       	ldd	r26, Y+14	; 0x0e
     98c:	bf 85       	ldd	r27, Y+15	; 0x0f
     98e:	89 83       	std	Y+1, r24	; 0x01
     990:	9a 83       	std	Y+2, r25	; 0x02
     992:	ab 83       	std	Y+3, r26	; 0x03
     994:	bc 83       	std	Y+4, r27	; 0x04
     996:	1a 8e       	std	Y+26, r1	; 0x1a
     998:	1b 8e       	std	Y+27, r1	; 0x1b
     99a:	1c 8e       	std	Y+28, r1	; 0x1c
     99c:	1d 8e       	std	Y+29, r1	; 0x1d
     99e:	88 8d       	ldd	r24, Y+24	; 0x18
     9a0:	88 23       	and	r24, r24
     9a2:	09 f4       	brne	.+2      	; 0x9a6 <xEventGroupWaitBits+0xa0>
     9a4:	65 c0       	rjmp	.+202    	; 0xa70 <xEventGroupWaitBits+0x16a>
     9a6:	89 85       	ldd	r24, Y+9	; 0x09
     9a8:	9a 85       	ldd	r25, Y+10	; 0x0a
     9aa:	fc 01       	movw	r30, r24
     9ac:	20 81       	ld	r18, Z
     9ae:	31 81       	ldd	r19, Z+1	; 0x01
     9b0:	42 81       	ldd	r20, Z+2	; 0x02
     9b2:	53 81       	ldd	r21, Z+3	; 0x03
     9b4:	8c 89       	ldd	r24, Y+20	; 0x14
     9b6:	9d 89       	ldd	r25, Y+21	; 0x15
     9b8:	ae 89       	ldd	r26, Y+22	; 0x16
     9ba:	bf 89       	ldd	r27, Y+23	; 0x17
     9bc:	80 95       	com	r24
     9be:	90 95       	com	r25
     9c0:	a0 95       	com	r26
     9c2:	b0 95       	com	r27
     9c4:	82 23       	and	r24, r18
     9c6:	93 23       	and	r25, r19
     9c8:	a4 23       	and	r26, r20
     9ca:	b5 23       	and	r27, r21
     9cc:	29 85       	ldd	r18, Y+9	; 0x09
     9ce:	3a 85       	ldd	r19, Y+10	; 0x0a
     9d0:	f9 01       	movw	r30, r18
     9d2:	80 83       	st	Z, r24
     9d4:	91 83       	std	Z+1, r25	; 0x01
     9d6:	a2 83       	std	Z+2, r26	; 0x02
     9d8:	b3 83       	std	Z+3, r27	; 0x03
     9da:	4a c0       	rjmp	.+148    	; 0xa70 <xEventGroupWaitBits+0x16a>
     9dc:	8a 8d       	ldd	r24, Y+26	; 0x1a
     9de:	9b 8d       	ldd	r25, Y+27	; 0x1b
     9e0:	ac 8d       	ldd	r26, Y+28	; 0x1c
     9e2:	bd 8d       	ldd	r27, Y+29	; 0x1d
     9e4:	89 2b       	or	r24, r25
     9e6:	8a 2b       	or	r24, r26
     9e8:	8b 2b       	or	r24, r27
     9ea:	59 f4       	brne	.+22     	; 0xa02 <xEventGroupWaitBits+0xfc>
     9ec:	8c 85       	ldd	r24, Y+12	; 0x0c
     9ee:	9d 85       	ldd	r25, Y+13	; 0x0d
     9f0:	ae 85       	ldd	r26, Y+14	; 0x0e
     9f2:	bf 85       	ldd	r27, Y+15	; 0x0f
     9f4:	89 83       	std	Y+1, r24	; 0x01
     9f6:	9a 83       	std	Y+2, r25	; 0x02
     9f8:	ab 83       	std	Y+3, r26	; 0x03
     9fa:	bc 83       	std	Y+4, r27	; 0x04
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	8b 87       	std	Y+11, r24	; 0x0b
     a00:	37 c0       	rjmp	.+110    	; 0xa70 <xEventGroupWaitBits+0x16a>
     a02:	88 8d       	ldd	r24, Y+24	; 0x18
     a04:	88 23       	and	r24, r24
     a06:	49 f0       	breq	.+18     	; 0xa1a <xEventGroupWaitBits+0x114>
     a08:	8d 81       	ldd	r24, Y+5	; 0x05
     a0a:	9e 81       	ldd	r25, Y+6	; 0x06
     a0c:	af 81       	ldd	r26, Y+7	; 0x07
     a0e:	b8 85       	ldd	r27, Y+8	; 0x08
     a10:	b1 60       	ori	r27, 0x01	; 1
     a12:	8d 83       	std	Y+5, r24	; 0x05
     a14:	9e 83       	std	Y+6, r25	; 0x06
     a16:	af 83       	std	Y+7, r26	; 0x07
     a18:	b8 87       	std	Y+8, r27	; 0x08
     a1a:	89 8d       	ldd	r24, Y+25	; 0x19
     a1c:	88 23       	and	r24, r24
     a1e:	49 f0       	breq	.+18     	; 0xa32 <xEventGroupWaitBits+0x12c>
     a20:	8d 81       	ldd	r24, Y+5	; 0x05
     a22:	9e 81       	ldd	r25, Y+6	; 0x06
     a24:	af 81       	ldd	r26, Y+7	; 0x07
     a26:	b8 85       	ldd	r27, Y+8	; 0x08
     a28:	b4 60       	ori	r27, 0x04	; 4
     a2a:	8d 83       	std	Y+5, r24	; 0x05
     a2c:	9e 83       	std	Y+6, r25	; 0x06
     a2e:	af 83       	std	Y+7, r26	; 0x07
     a30:	b8 87       	std	Y+8, r27	; 0x08
     a32:	2c 89       	ldd	r18, Y+20	; 0x14
     a34:	3d 89       	ldd	r19, Y+21	; 0x15
     a36:	4e 89       	ldd	r20, Y+22	; 0x16
     a38:	5f 89       	ldd	r21, Y+23	; 0x17
     a3a:	8d 81       	ldd	r24, Y+5	; 0x05
     a3c:	9e 81       	ldd	r25, Y+6	; 0x06
     a3e:	af 81       	ldd	r26, Y+7	; 0x07
     a40:	b8 85       	ldd	r27, Y+8	; 0x08
     a42:	82 2b       	or	r24, r18
     a44:	93 2b       	or	r25, r19
     a46:	a4 2b       	or	r26, r20
     a48:	b5 2b       	or	r27, r21
     a4a:	29 85       	ldd	r18, Y+9	; 0x09
     a4c:	3a 85       	ldd	r19, Y+10	; 0x0a
     a4e:	f9 01       	movw	r30, r18
     a50:	34 96       	adiw	r30, 0x04	; 4
     a52:	2a 8d       	ldd	r18, Y+26	; 0x1a
     a54:	3b 8d       	ldd	r19, Y+27	; 0x1b
     a56:	4c 8d       	ldd	r20, Y+28	; 0x1c
     a58:	5d 8d       	ldd	r21, Y+29	; 0x1d
     a5a:	89 01       	movw	r16, r18
     a5c:	9a 01       	movw	r18, r20
     a5e:	ac 01       	movw	r20, r24
     a60:	bd 01       	movw	r22, r26
     a62:	cf 01       	movw	r24, r30
     a64:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <vTaskPlaceOnUnorderedEventList>
     a68:	19 82       	std	Y+1, r1	; 0x01
     a6a:	1a 82       	std	Y+2, r1	; 0x02
     a6c:	1b 82       	std	Y+3, r1	; 0x03
     a6e:	1c 82       	std	Y+4, r1	; 0x04
     a70:	0e 94 ff 14 	call	0x29fe	; 0x29fe <xTaskResumeAll>
     a74:	89 8b       	std	Y+17, r24	; 0x11
     a76:	8a 8d       	ldd	r24, Y+26	; 0x1a
     a78:	9b 8d       	ldd	r25, Y+27	; 0x1b
     a7a:	ac 8d       	ldd	r26, Y+28	; 0x1c
     a7c:	bd 8d       	ldd	r27, Y+29	; 0x1d
     a7e:	89 2b       	or	r24, r25
     a80:	8a 2b       	or	r24, r26
     a82:	8b 2b       	or	r24, r27
     a84:	09 f4       	brne	.+2      	; 0xa88 <xEventGroupWaitBits+0x182>
     a86:	65 c0       	rjmp	.+202    	; 0xb52 <xEventGroupWaitBits+0x24c>
     a88:	89 89       	ldd	r24, Y+17	; 0x11
     a8a:	88 23       	and	r24, r24
     a8c:	11 f4       	brne	.+4      	; 0xa92 <xEventGroupWaitBits+0x18c>
     a8e:	0e 94 86 0b 	call	0x170c	; 0x170c <vPortYield>
     a92:	0e 94 83 1a 	call	0x3506	; 0x3506 <uxTaskResetEventItemValue>
     a96:	dc 01       	movw	r26, r24
     a98:	cb 01       	movw	r24, r22
     a9a:	89 83       	std	Y+1, r24	; 0x01
     a9c:	9a 83       	std	Y+2, r25	; 0x02
     a9e:	ab 83       	std	Y+3, r26	; 0x03
     aa0:	bc 83       	std	Y+4, r27	; 0x04
     aa2:	89 81       	ldd	r24, Y+1	; 0x01
     aa4:	9a 81       	ldd	r25, Y+2	; 0x02
     aa6:	ab 81       	ldd	r26, Y+3	; 0x03
     aa8:	bc 81       	ldd	r27, Y+4	; 0x04
     aaa:	88 27       	eor	r24, r24
     aac:	99 27       	eor	r25, r25
     aae:	aa 27       	eor	r26, r26
     ab0:	b2 70       	andi	r27, 0x02	; 2
     ab2:	89 2b       	or	r24, r25
     ab4:	8a 2b       	or	r24, r26
     ab6:	8b 2b       	or	r24, r27
     ab8:	09 f0       	breq	.+2      	; 0xabc <xEventGroupWaitBits+0x1b6>
     aba:	42 c0       	rjmp	.+132    	; 0xb40 <xEventGroupWaitBits+0x23a>
     abc:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     ac0:	ff 93       	push	r31
     ac2:	f8 7f       	andi	r31, 0xF8	; 248
     ac4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     ac8:	89 85       	ldd	r24, Y+9	; 0x09
     aca:	9a 85       	ldd	r25, Y+10	; 0x0a
     acc:	fc 01       	movw	r30, r24
     ace:	80 81       	ld	r24, Z
     ad0:	91 81       	ldd	r25, Z+1	; 0x01
     ad2:	a2 81       	ldd	r26, Z+2	; 0x02
     ad4:	b3 81       	ldd	r27, Z+3	; 0x03
     ad6:	89 83       	std	Y+1, r24	; 0x01
     ad8:	9a 83       	std	Y+2, r25	; 0x02
     ada:	ab 83       	std	Y+3, r26	; 0x03
     adc:	bc 83       	std	Y+4, r27	; 0x04
     ade:	2c 89       	ldd	r18, Y+20	; 0x14
     ae0:	3d 89       	ldd	r19, Y+21	; 0x15
     ae2:	4e 89       	ldd	r20, Y+22	; 0x16
     ae4:	5f 89       	ldd	r21, Y+23	; 0x17
     ae6:	89 81       	ldd	r24, Y+1	; 0x01
     ae8:	9a 81       	ldd	r25, Y+2	; 0x02
     aea:	ab 81       	ldd	r26, Y+3	; 0x03
     aec:	bc 81       	ldd	r27, Y+4	; 0x04
     aee:	09 8d       	ldd	r16, Y+25	; 0x19
     af0:	bc 01       	movw	r22, r24
     af2:	cd 01       	movw	r24, r26
     af4:	0e 94 2c 07 	call	0xe58	; 0xe58 <prvTestWaitCondition>
     af8:	88 23       	and	r24, r24
     afa:	e9 f0       	breq	.+58     	; 0xb36 <xEventGroupWaitBits+0x230>
     afc:	88 8d       	ldd	r24, Y+24	; 0x18
     afe:	88 23       	and	r24, r24
     b00:	d1 f0       	breq	.+52     	; 0xb36 <xEventGroupWaitBits+0x230>
     b02:	89 85       	ldd	r24, Y+9	; 0x09
     b04:	9a 85       	ldd	r25, Y+10	; 0x0a
     b06:	fc 01       	movw	r30, r24
     b08:	20 81       	ld	r18, Z
     b0a:	31 81       	ldd	r19, Z+1	; 0x01
     b0c:	42 81       	ldd	r20, Z+2	; 0x02
     b0e:	53 81       	ldd	r21, Z+3	; 0x03
     b10:	8c 89       	ldd	r24, Y+20	; 0x14
     b12:	9d 89       	ldd	r25, Y+21	; 0x15
     b14:	ae 89       	ldd	r26, Y+22	; 0x16
     b16:	bf 89       	ldd	r27, Y+23	; 0x17
     b18:	80 95       	com	r24
     b1a:	90 95       	com	r25
     b1c:	a0 95       	com	r26
     b1e:	b0 95       	com	r27
     b20:	82 23       	and	r24, r18
     b22:	93 23       	and	r25, r19
     b24:	a4 23       	and	r26, r20
     b26:	b5 23       	and	r27, r21
     b28:	29 85       	ldd	r18, Y+9	; 0x09
     b2a:	3a 85       	ldd	r19, Y+10	; 0x0a
     b2c:	f9 01       	movw	r30, r18
     b2e:	80 83       	st	Z, r24
     b30:	91 83       	std	Z+1, r25	; 0x01
     b32:	a2 83       	std	Z+2, r26	; 0x02
     b34:	b3 83       	std	Z+3, r27	; 0x03
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	8b 87       	std	Y+11, r24	; 0x0b
     b3a:	ff 91       	pop	r31
     b3c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     b40:	89 81       	ldd	r24, Y+1	; 0x01
     b42:	9a 81       	ldd	r25, Y+2	; 0x02
     b44:	ab 81       	ldd	r26, Y+3	; 0x03
     b46:	bc 81       	ldd	r27, Y+4	; 0x04
     b48:	bb 27       	eor	r27, r27
     b4a:	89 83       	std	Y+1, r24	; 0x01
     b4c:	9a 83       	std	Y+2, r25	; 0x02
     b4e:	ab 83       	std	Y+3, r26	; 0x03
     b50:	bc 83       	std	Y+4, r27	; 0x04
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	9a 81       	ldd	r25, Y+2	; 0x02
     b56:	ab 81       	ldd	r26, Y+3	; 0x03
     b58:	bc 81       	ldd	r27, Y+4	; 0x04
     b5a:	bc 01       	movw	r22, r24
     b5c:	cd 01       	movw	r24, r26
     b5e:	6d 96       	adiw	r28, 0x1d	; 29
     b60:	cd bf       	out	0x3d, r28	; 61
     b62:	de bf       	out	0x3e, r29	; 62
     b64:	df 91       	pop	r29
     b66:	cf 91       	pop	r28
     b68:	1f 91       	pop	r17
     b6a:	0f 91       	pop	r16
     b6c:	ff 90       	pop	r15
     b6e:	ef 90       	pop	r14
     b70:	df 90       	pop	r13
     b72:	cf 90       	pop	r12
     b74:	08 95       	ret

00000b76 <xEventGroupClearBits>:
     b76:	cf 93       	push	r28
     b78:	df 93       	push	r29
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
     b7e:	2c 97       	sbiw	r28, 0x0c	; 12
     b80:	cd bf       	out	0x3d, r28	; 61
     b82:	de bf       	out	0x3e, r29	; 62
     b84:	8f 83       	std	Y+7, r24	; 0x07
     b86:	98 87       	std	Y+8, r25	; 0x08
     b88:	49 87       	std	Y+9, r20	; 0x09
     b8a:	5a 87       	std	Y+10, r21	; 0x0a
     b8c:	6b 87       	std	Y+11, r22	; 0x0b
     b8e:	7c 87       	std	Y+12, r23	; 0x0c
     b90:	8f 81       	ldd	r24, Y+7	; 0x07
     b92:	98 85       	ldd	r25, Y+8	; 0x08
     b94:	89 83       	std	Y+1, r24	; 0x01
     b96:	9a 83       	std	Y+2, r25	; 0x02
     b98:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     b9c:	ff 93       	push	r31
     b9e:	f8 7f       	andi	r31, 0xF8	; 248
     ba0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     ba4:	89 81       	ldd	r24, Y+1	; 0x01
     ba6:	9a 81       	ldd	r25, Y+2	; 0x02
     ba8:	fc 01       	movw	r30, r24
     baa:	80 81       	ld	r24, Z
     bac:	91 81       	ldd	r25, Z+1	; 0x01
     bae:	a2 81       	ldd	r26, Z+2	; 0x02
     bb0:	b3 81       	ldd	r27, Z+3	; 0x03
     bb2:	8b 83       	std	Y+3, r24	; 0x03
     bb4:	9c 83       	std	Y+4, r25	; 0x04
     bb6:	ad 83       	std	Y+5, r26	; 0x05
     bb8:	be 83       	std	Y+6, r27	; 0x06
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	9a 81       	ldd	r25, Y+2	; 0x02
     bbe:	fc 01       	movw	r30, r24
     bc0:	20 81       	ld	r18, Z
     bc2:	31 81       	ldd	r19, Z+1	; 0x01
     bc4:	42 81       	ldd	r20, Z+2	; 0x02
     bc6:	53 81       	ldd	r21, Z+3	; 0x03
     bc8:	89 85       	ldd	r24, Y+9	; 0x09
     bca:	9a 85       	ldd	r25, Y+10	; 0x0a
     bcc:	ab 85       	ldd	r26, Y+11	; 0x0b
     bce:	bc 85       	ldd	r27, Y+12	; 0x0c
     bd0:	80 95       	com	r24
     bd2:	90 95       	com	r25
     bd4:	a0 95       	com	r26
     bd6:	b0 95       	com	r27
     bd8:	82 23       	and	r24, r18
     bda:	93 23       	and	r25, r19
     bdc:	a4 23       	and	r26, r20
     bde:	b5 23       	and	r27, r21
     be0:	29 81       	ldd	r18, Y+1	; 0x01
     be2:	3a 81       	ldd	r19, Y+2	; 0x02
     be4:	f9 01       	movw	r30, r18
     be6:	80 83       	st	Z, r24
     be8:	91 83       	std	Z+1, r25	; 0x01
     bea:	a2 83       	std	Z+2, r26	; 0x02
     bec:	b3 83       	std	Z+3, r27	; 0x03
     bee:	ff 91       	pop	r31
     bf0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     bf4:	8b 81       	ldd	r24, Y+3	; 0x03
     bf6:	9c 81       	ldd	r25, Y+4	; 0x04
     bf8:	ad 81       	ldd	r26, Y+5	; 0x05
     bfa:	be 81       	ldd	r27, Y+6	; 0x06
     bfc:	bc 01       	movw	r22, r24
     bfe:	cd 01       	movw	r24, r26
     c00:	2c 96       	adiw	r28, 0x0c	; 12
     c02:	cd bf       	out	0x3d, r28	; 61
     c04:	de bf       	out	0x3e, r29	; 62
     c06:	df 91       	pop	r29
     c08:	cf 91       	pop	r28
     c0a:	08 95       	ret

00000c0c <xEventGroupSetBits>:
     c0c:	cf 93       	push	r28
     c0e:	df 93       	push	r29
     c10:	cd b7       	in	r28, 0x3d	; 61
     c12:	de b7       	in	r29, 0x3e	; 62
     c14:	6d 97       	sbiw	r28, 0x1d	; 29
     c16:	cd bf       	out	0x3d, r28	; 61
     c18:	de bf       	out	0x3e, r29	; 62
     c1a:	88 8f       	std	Y+24, r24	; 0x18
     c1c:	99 8f       	std	Y+25, r25	; 0x19
     c1e:	4a 8f       	std	Y+26, r20	; 0x1a
     c20:	5b 8f       	std	Y+27, r21	; 0x1b
     c22:	6c 8f       	std	Y+28, r22	; 0x1c
     c24:	7d 8f       	std	Y+29, r23	; 0x1d
     c26:	1b 82       	std	Y+3, r1	; 0x03
     c28:	1c 82       	std	Y+4, r1	; 0x04
     c2a:	1d 82       	std	Y+5, r1	; 0x05
     c2c:	1e 82       	std	Y+6, r1	; 0x06
     c2e:	88 8d       	ldd	r24, Y+24	; 0x18
     c30:	99 8d       	ldd	r25, Y+25	; 0x19
     c32:	88 87       	std	Y+8, r24	; 0x08
     c34:	99 87       	std	Y+9, r25	; 0x09
     c36:	1f 82       	std	Y+7, r1	; 0x07
     c38:	88 85       	ldd	r24, Y+8	; 0x08
     c3a:	99 85       	ldd	r25, Y+9	; 0x09
     c3c:	04 96       	adiw	r24, 0x04	; 4
     c3e:	8a 87       	std	Y+10, r24	; 0x0a
     c40:	9b 87       	std	Y+11, r25	; 0x0b
     c42:	8a 85       	ldd	r24, Y+10	; 0x0a
     c44:	9b 85       	ldd	r25, Y+11	; 0x0b
     c46:	03 96       	adiw	r24, 0x03	; 3
     c48:	8c 87       	std	Y+12, r24	; 0x0c
     c4a:	9d 87       	std	Y+13, r25	; 0x0d
     c4c:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <vTaskSuspendAll>
     c50:	8a 85       	ldd	r24, Y+10	; 0x0a
     c52:	9b 85       	ldd	r25, Y+11	; 0x0b
     c54:	fc 01       	movw	r30, r24
     c56:	87 81       	ldd	r24, Z+7	; 0x07
     c58:	90 85       	ldd	r25, Z+8	; 0x08
     c5a:	89 83       	std	Y+1, r24	; 0x01
     c5c:	9a 83       	std	Y+2, r25	; 0x02
     c5e:	88 85       	ldd	r24, Y+8	; 0x08
     c60:	99 85       	ldd	r25, Y+9	; 0x09
     c62:	fc 01       	movw	r30, r24
     c64:	20 81       	ld	r18, Z
     c66:	31 81       	ldd	r19, Z+1	; 0x01
     c68:	42 81       	ldd	r20, Z+2	; 0x02
     c6a:	53 81       	ldd	r21, Z+3	; 0x03
     c6c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c6e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     c70:	ac 8d       	ldd	r26, Y+28	; 0x1c
     c72:	bd 8d       	ldd	r27, Y+29	; 0x1d
     c74:	82 2b       	or	r24, r18
     c76:	93 2b       	or	r25, r19
     c78:	a4 2b       	or	r26, r20
     c7a:	b5 2b       	or	r27, r21
     c7c:	28 85       	ldd	r18, Y+8	; 0x08
     c7e:	39 85       	ldd	r19, Y+9	; 0x09
     c80:	f9 01       	movw	r30, r18
     c82:	80 83       	st	Z, r24
     c84:	91 83       	std	Z+1, r25	; 0x01
     c86:	a2 83       	std	Z+2, r26	; 0x02
     c88:	b3 83       	std	Z+3, r27	; 0x03
     c8a:	95 c0       	rjmp	.+298    	; 0xdb6 <xEventGroupSetBits+0x1aa>
     c8c:	89 81       	ldd	r24, Y+1	; 0x01
     c8e:	9a 81       	ldd	r25, Y+2	; 0x02
     c90:	fc 01       	movw	r30, r24
     c92:	84 81       	ldd	r24, Z+4	; 0x04
     c94:	95 81       	ldd	r25, Z+5	; 0x05
     c96:	8e 87       	std	Y+14, r24	; 0x0e
     c98:	9f 87       	std	Y+15, r25	; 0x0f
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	9a 81       	ldd	r25, Y+2	; 0x02
     c9e:	fc 01       	movw	r30, r24
     ca0:	80 81       	ld	r24, Z
     ca2:	91 81       	ldd	r25, Z+1	; 0x01
     ca4:	a2 81       	ldd	r26, Z+2	; 0x02
     ca6:	b3 81       	ldd	r27, Z+3	; 0x03
     ca8:	88 8b       	std	Y+16, r24	; 0x10
     caa:	99 8b       	std	Y+17, r25	; 0x11
     cac:	aa 8b       	std	Y+18, r26	; 0x12
     cae:	bb 8b       	std	Y+19, r27	; 0x13
     cb0:	1f 82       	std	Y+7, r1	; 0x07
     cb2:	88 89       	ldd	r24, Y+16	; 0x10
     cb4:	99 89       	ldd	r25, Y+17	; 0x11
     cb6:	aa 89       	ldd	r26, Y+18	; 0x12
     cb8:	bb 89       	ldd	r27, Y+19	; 0x13
     cba:	88 27       	eor	r24, r24
     cbc:	99 27       	eor	r25, r25
     cbe:	aa 27       	eor	r26, r26
     cc0:	8c 8b       	std	Y+20, r24	; 0x14
     cc2:	9d 8b       	std	Y+21, r25	; 0x15
     cc4:	ae 8b       	std	Y+22, r26	; 0x16
     cc6:	bf 8b       	std	Y+23, r27	; 0x17
     cc8:	88 89       	ldd	r24, Y+16	; 0x10
     cca:	99 89       	ldd	r25, Y+17	; 0x11
     ccc:	aa 89       	ldd	r26, Y+18	; 0x12
     cce:	bb 89       	ldd	r27, Y+19	; 0x13
     cd0:	bb 27       	eor	r27, r27
     cd2:	88 8b       	std	Y+16, r24	; 0x10
     cd4:	99 8b       	std	Y+17, r25	; 0x11
     cd6:	aa 8b       	std	Y+18, r26	; 0x12
     cd8:	bb 8b       	std	Y+19, r27	; 0x13
     cda:	8c 89       	ldd	r24, Y+20	; 0x14
     cdc:	9d 89       	ldd	r25, Y+21	; 0x15
     cde:	ae 89       	ldd	r26, Y+22	; 0x16
     ce0:	bf 89       	ldd	r27, Y+23	; 0x17
     ce2:	88 27       	eor	r24, r24
     ce4:	99 27       	eor	r25, r25
     ce6:	aa 27       	eor	r26, r26
     ce8:	b4 70       	andi	r27, 0x04	; 4
     cea:	89 2b       	or	r24, r25
     cec:	8a 2b       	or	r24, r26
     cee:	8b 2b       	or	r24, r27
     cf0:	b1 f4       	brne	.+44     	; 0xd1e <xEventGroupSetBits+0x112>
     cf2:	88 85       	ldd	r24, Y+8	; 0x08
     cf4:	99 85       	ldd	r25, Y+9	; 0x09
     cf6:	fc 01       	movw	r30, r24
     cf8:	20 81       	ld	r18, Z
     cfa:	31 81       	ldd	r19, Z+1	; 0x01
     cfc:	42 81       	ldd	r20, Z+2	; 0x02
     cfe:	53 81       	ldd	r21, Z+3	; 0x03
     d00:	88 89       	ldd	r24, Y+16	; 0x10
     d02:	99 89       	ldd	r25, Y+17	; 0x11
     d04:	aa 89       	ldd	r26, Y+18	; 0x12
     d06:	bb 89       	ldd	r27, Y+19	; 0x13
     d08:	82 23       	and	r24, r18
     d0a:	93 23       	and	r25, r19
     d0c:	a4 23       	and	r26, r20
     d0e:	b5 23       	and	r27, r21
     d10:	89 2b       	or	r24, r25
     d12:	8a 2b       	or	r24, r26
     d14:	8b 2b       	or	r24, r27
     d16:	e9 f0       	breq	.+58     	; 0xd52 <xEventGroupSetBits+0x146>
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	8f 83       	std	Y+7, r24	; 0x07
     d1c:	1a c0       	rjmp	.+52     	; 0xd52 <xEventGroupSetBits+0x146>
     d1e:	88 85       	ldd	r24, Y+8	; 0x08
     d20:	99 85       	ldd	r25, Y+9	; 0x09
     d22:	fc 01       	movw	r30, r24
     d24:	20 81       	ld	r18, Z
     d26:	31 81       	ldd	r19, Z+1	; 0x01
     d28:	42 81       	ldd	r20, Z+2	; 0x02
     d2a:	53 81       	ldd	r21, Z+3	; 0x03
     d2c:	88 89       	ldd	r24, Y+16	; 0x10
     d2e:	99 89       	ldd	r25, Y+17	; 0x11
     d30:	aa 89       	ldd	r26, Y+18	; 0x12
     d32:	bb 89       	ldd	r27, Y+19	; 0x13
     d34:	28 23       	and	r18, r24
     d36:	39 23       	and	r19, r25
     d38:	4a 23       	and	r20, r26
     d3a:	5b 23       	and	r21, r27
     d3c:	88 89       	ldd	r24, Y+16	; 0x10
     d3e:	99 89       	ldd	r25, Y+17	; 0x11
     d40:	aa 89       	ldd	r26, Y+18	; 0x12
     d42:	bb 89       	ldd	r27, Y+19	; 0x13
     d44:	28 17       	cp	r18, r24
     d46:	39 07       	cpc	r19, r25
     d48:	4a 07       	cpc	r20, r26
     d4a:	5b 07       	cpc	r21, r27
     d4c:	11 f4       	brne	.+4      	; 0xd52 <xEventGroupSetBits+0x146>
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	8f 83       	std	Y+7, r24	; 0x07
     d52:	8f 81       	ldd	r24, Y+7	; 0x07
     d54:	88 23       	and	r24, r24
     d56:	59 f1       	breq	.+86     	; 0xdae <xEventGroupSetBits+0x1a2>
     d58:	8c 89       	ldd	r24, Y+20	; 0x14
     d5a:	9d 89       	ldd	r25, Y+21	; 0x15
     d5c:	ae 89       	ldd	r26, Y+22	; 0x16
     d5e:	bf 89       	ldd	r27, Y+23	; 0x17
     d60:	88 27       	eor	r24, r24
     d62:	99 27       	eor	r25, r25
     d64:	aa 27       	eor	r26, r26
     d66:	b1 70       	andi	r27, 0x01	; 1
     d68:	89 2b       	or	r24, r25
     d6a:	8a 2b       	or	r24, r26
     d6c:	8b 2b       	or	r24, r27
     d6e:	81 f0       	breq	.+32     	; 0xd90 <xEventGroupSetBits+0x184>
     d70:	2b 81       	ldd	r18, Y+3	; 0x03
     d72:	3c 81       	ldd	r19, Y+4	; 0x04
     d74:	4d 81       	ldd	r20, Y+5	; 0x05
     d76:	5e 81       	ldd	r21, Y+6	; 0x06
     d78:	88 89       	ldd	r24, Y+16	; 0x10
     d7a:	99 89       	ldd	r25, Y+17	; 0x11
     d7c:	aa 89       	ldd	r26, Y+18	; 0x12
     d7e:	bb 89       	ldd	r27, Y+19	; 0x13
     d80:	82 2b       	or	r24, r18
     d82:	93 2b       	or	r25, r19
     d84:	a4 2b       	or	r26, r20
     d86:	b5 2b       	or	r27, r21
     d88:	8b 83       	std	Y+3, r24	; 0x03
     d8a:	9c 83       	std	Y+4, r25	; 0x04
     d8c:	ad 83       	std	Y+5, r26	; 0x05
     d8e:	be 83       	std	Y+6, r27	; 0x06
     d90:	88 85       	ldd	r24, Y+8	; 0x08
     d92:	99 85       	ldd	r25, Y+9	; 0x09
     d94:	fc 01       	movw	r30, r24
     d96:	80 81       	ld	r24, Z
     d98:	91 81       	ldd	r25, Z+1	; 0x01
     d9a:	a2 81       	ldd	r26, Z+2	; 0x02
     d9c:	b3 81       	ldd	r27, Z+3	; 0x03
     d9e:	b2 60       	ori	r27, 0x02	; 2
     da0:	29 81       	ldd	r18, Y+1	; 0x01
     da2:	3a 81       	ldd	r19, Y+2	; 0x02
     da4:	ac 01       	movw	r20, r24
     da6:	bd 01       	movw	r22, r26
     da8:	c9 01       	movw	r24, r18
     daa:	0e 94 a0 18 	call	0x3140	; 0x3140 <vTaskRemoveFromUnorderedEventList>
     dae:	8e 85       	ldd	r24, Y+14	; 0x0e
     db0:	9f 85       	ldd	r25, Y+15	; 0x0f
     db2:	89 83       	std	Y+1, r24	; 0x01
     db4:	9a 83       	std	Y+2, r25	; 0x02
     db6:	29 81       	ldd	r18, Y+1	; 0x01
     db8:	3a 81       	ldd	r19, Y+2	; 0x02
     dba:	8c 85       	ldd	r24, Y+12	; 0x0c
     dbc:	9d 85       	ldd	r25, Y+13	; 0x0d
     dbe:	28 17       	cp	r18, r24
     dc0:	39 07       	cpc	r19, r25
     dc2:	09 f0       	breq	.+2      	; 0xdc6 <xEventGroupSetBits+0x1ba>
     dc4:	63 cf       	rjmp	.-314    	; 0xc8c <xEventGroupSetBits+0x80>
     dc6:	88 85       	ldd	r24, Y+8	; 0x08
     dc8:	99 85       	ldd	r25, Y+9	; 0x09
     dca:	fc 01       	movw	r30, r24
     dcc:	20 81       	ld	r18, Z
     dce:	31 81       	ldd	r19, Z+1	; 0x01
     dd0:	42 81       	ldd	r20, Z+2	; 0x02
     dd2:	53 81       	ldd	r21, Z+3	; 0x03
     dd4:	8b 81       	ldd	r24, Y+3	; 0x03
     dd6:	9c 81       	ldd	r25, Y+4	; 0x04
     dd8:	ad 81       	ldd	r26, Y+5	; 0x05
     dda:	be 81       	ldd	r27, Y+6	; 0x06
     ddc:	80 95       	com	r24
     dde:	90 95       	com	r25
     de0:	a0 95       	com	r26
     de2:	b0 95       	com	r27
     de4:	82 23       	and	r24, r18
     de6:	93 23       	and	r25, r19
     de8:	a4 23       	and	r26, r20
     dea:	b5 23       	and	r27, r21
     dec:	28 85       	ldd	r18, Y+8	; 0x08
     dee:	39 85       	ldd	r19, Y+9	; 0x09
     df0:	f9 01       	movw	r30, r18
     df2:	80 83       	st	Z, r24
     df4:	91 83       	std	Z+1, r25	; 0x01
     df6:	a2 83       	std	Z+2, r26	; 0x02
     df8:	b3 83       	std	Z+3, r27	; 0x03
     dfa:	0e 94 ff 14 	call	0x29fe	; 0x29fe <xTaskResumeAll>
     dfe:	88 85       	ldd	r24, Y+8	; 0x08
     e00:	99 85       	ldd	r25, Y+9	; 0x09
     e02:	fc 01       	movw	r30, r24
     e04:	80 81       	ld	r24, Z
     e06:	91 81       	ldd	r25, Z+1	; 0x01
     e08:	a2 81       	ldd	r26, Z+2	; 0x02
     e0a:	b3 81       	ldd	r27, Z+3	; 0x03
     e0c:	bc 01       	movw	r22, r24
     e0e:	cd 01       	movw	r24, r26
     e10:	6d 96       	adiw	r28, 0x1d	; 29
     e12:	cd bf       	out	0x3d, r28	; 61
     e14:	de bf       	out	0x3e, r29	; 62
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	08 95       	ret

00000e1c <vEventGroupSetBitsCallback>:
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	00 d0       	rcall	.+0      	; 0xe22 <vEventGroupSetBitsCallback+0x6>
     e22:	00 d0       	rcall	.+0      	; 0xe24 <vEventGroupSetBitsCallback+0x8>
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
     e28:	89 83       	std	Y+1, r24	; 0x01
     e2a:	9a 83       	std	Y+2, r25	; 0x02
     e2c:	4b 83       	std	Y+3, r20	; 0x03
     e2e:	5c 83       	std	Y+4, r21	; 0x04
     e30:	6d 83       	std	Y+5, r22	; 0x05
     e32:	7e 83       	std	Y+6, r23	; 0x06
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	9c 81       	ldd	r25, Y+4	; 0x04
     e38:	ad 81       	ldd	r26, Y+5	; 0x05
     e3a:	be 81       	ldd	r27, Y+6	; 0x06
     e3c:	29 81       	ldd	r18, Y+1	; 0x01
     e3e:	3a 81       	ldd	r19, Y+2	; 0x02
     e40:	ac 01       	movw	r20, r24
     e42:	bd 01       	movw	r22, r26
     e44:	c9 01       	movw	r24, r18
     e46:	0e 94 06 06 	call	0xc0c	; 0xc0c <xEventGroupSetBits>
     e4a:	00 00       	nop
     e4c:	26 96       	adiw	r28, 0x06	; 6
     e4e:	cd bf       	out	0x3d, r28	; 61
     e50:	de bf       	out	0x3e, r29	; 62
     e52:	df 91       	pop	r29
     e54:	cf 91       	pop	r28
     e56:	08 95       	ret

00000e58 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
     e58:	0f 93       	push	r16
     e5a:	cf 93       	push	r28
     e5c:	df 93       	push	r29
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
     e62:	2a 97       	sbiw	r28, 0x0a	; 10
     e64:	cd bf       	out	0x3d, r28	; 61
     e66:	de bf       	out	0x3e, r29	; 62
     e68:	6a 83       	std	Y+2, r22	; 0x02
     e6a:	7b 83       	std	Y+3, r23	; 0x03
     e6c:	8c 83       	std	Y+4, r24	; 0x04
     e6e:	9d 83       	std	Y+5, r25	; 0x05
     e70:	2e 83       	std	Y+6, r18	; 0x06
     e72:	3f 83       	std	Y+7, r19	; 0x07
     e74:	48 87       	std	Y+8, r20	; 0x08
     e76:	59 87       	std	Y+9, r21	; 0x09
     e78:	0a 87       	std	Y+10, r16	; 0x0a
BaseType_t xWaitConditionMet = pdFALSE;
     e7a:	19 82       	std	Y+1, r1	; 0x01

	if( xWaitForAllBits == pdFALSE )
     e7c:	8a 85       	ldd	r24, Y+10	; 0x0a
     e7e:	88 23       	and	r24, r24
     e80:	99 f4       	brne	.+38     	; 0xea8 <prvTestWaitCondition+0x50>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
     e82:	2a 81       	ldd	r18, Y+2	; 0x02
     e84:	3b 81       	ldd	r19, Y+3	; 0x03
     e86:	4c 81       	ldd	r20, Y+4	; 0x04
     e88:	5d 81       	ldd	r21, Y+5	; 0x05
     e8a:	8e 81       	ldd	r24, Y+6	; 0x06
     e8c:	9f 81       	ldd	r25, Y+7	; 0x07
     e8e:	a8 85       	ldd	r26, Y+8	; 0x08
     e90:	b9 85       	ldd	r27, Y+9	; 0x09
     e92:	82 23       	and	r24, r18
     e94:	93 23       	and	r25, r19
     e96:	a4 23       	and	r26, r20
     e98:	b5 23       	and	r27, r21
     e9a:	89 2b       	or	r24, r25
     e9c:	8a 2b       	or	r24, r26
     e9e:	8b 2b       	or	r24, r27
     ea0:	d1 f0       	breq	.+52     	; 0xed6 <prvTestWaitCondition+0x7e>
		{
			xWaitConditionMet = pdTRUE;
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	89 83       	std	Y+1, r24	; 0x01
     ea6:	17 c0       	rjmp	.+46     	; 0xed6 <prvTestWaitCondition+0x7e>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
     ea8:	2a 81       	ldd	r18, Y+2	; 0x02
     eaa:	3b 81       	ldd	r19, Y+3	; 0x03
     eac:	4c 81       	ldd	r20, Y+4	; 0x04
     eae:	5d 81       	ldd	r21, Y+5	; 0x05
     eb0:	8e 81       	ldd	r24, Y+6	; 0x06
     eb2:	9f 81       	ldd	r25, Y+7	; 0x07
     eb4:	a8 85       	ldd	r26, Y+8	; 0x08
     eb6:	b9 85       	ldd	r27, Y+9	; 0x09
     eb8:	28 23       	and	r18, r24
     eba:	39 23       	and	r19, r25
     ebc:	4a 23       	and	r20, r26
     ebe:	5b 23       	and	r21, r27
     ec0:	8e 81       	ldd	r24, Y+6	; 0x06
     ec2:	9f 81       	ldd	r25, Y+7	; 0x07
     ec4:	a8 85       	ldd	r26, Y+8	; 0x08
     ec6:	b9 85       	ldd	r27, Y+9	; 0x09
     ec8:	28 17       	cp	r18, r24
     eca:	39 07       	cpc	r19, r25
     ecc:	4a 07       	cpc	r20, r26
     ece:	5b 07       	cpc	r21, r27
     ed0:	11 f4       	brne	.+4      	; 0xed6 <prvTestWaitCondition+0x7e>
		{
			xWaitConditionMet = pdTRUE;
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
}
     ed8:	2a 96       	adiw	r28, 0x0a	; 10
     eda:	cd bf       	out	0x3d, r28	; 61
     edc:	de bf       	out	0x3e, r29	; 62
     ede:	df 91       	pop	r29
     ee0:	cf 91       	pop	r28
     ee2:	0f 91       	pop	r16
     ee4:	08 95       	ret

00000ee6 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
     ee6:	0f 93       	push	r16
     ee8:	1f 93       	push	r17
     eea:	cf 93       	push	r28
     eec:	df 93       	push	r29
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
     ef2:	29 97       	sbiw	r28, 0x09	; 9
     ef4:	cd bf       	out	0x3d, r28	; 61
     ef6:	de bf       	out	0x3e, r29	; 62
     ef8:	8a 83       	std	Y+2, r24	; 0x02
     efa:	9b 83       	std	Y+3, r25	; 0x03
     efc:	4c 83       	std	Y+4, r20	; 0x04
     efe:	5d 83       	std	Y+5, r21	; 0x05
     f00:	6e 83       	std	Y+6, r22	; 0x06
     f02:	7f 83       	std	Y+7, r23	; 0x07
     f04:	28 87       	std	Y+8, r18	; 0x08
     f06:	39 87       	std	Y+9, r19	; 0x09
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
     f08:	28 85       	ldd	r18, Y+8	; 0x08
     f0a:	39 85       	ldd	r19, Y+9	; 0x09
     f0c:	8c 81       	ldd	r24, Y+4	; 0x04
     f0e:	9d 81       	ldd	r25, Y+5	; 0x05
     f10:	ae 81       	ldd	r26, Y+6	; 0x06
     f12:	bf 81       	ldd	r27, Y+7	; 0x07
     f14:	6a 81       	ldd	r22, Y+2	; 0x02
     f16:	7b 81       	ldd	r23, Y+3	; 0x03
     f18:	89 01       	movw	r16, r18
     f1a:	9c 01       	movw	r18, r24
     f1c:	ad 01       	movw	r20, r26
     f1e:	8e e0       	ldi	r24, 0x0E	; 14
     f20:	97 e0       	ldi	r25, 0x07	; 7
     f22:	0e 94 2f 20 	call	0x405e	; 0x405e <xTimerPendFunctionCallFromISR>
     f26:	89 83       	std	Y+1, r24	; 0x01

		return xReturn;
     f28:	89 81       	ldd	r24, Y+1	; 0x01
	}
     f2a:	29 96       	adiw	r28, 0x09	; 9
     f2c:	cd bf       	out	0x3d, r28	; 61
     f2e:	de bf       	out	0x3e, r29	; 62
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	1f 91       	pop	r17
     f36:	0f 91       	pop	r16
     f38:	08 95       	ret

00000f3a <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     f3a:	cf 93       	push	r28
     f3c:	df 93       	push	r29
     f3e:	00 d0       	rcall	.+0      	; 0xf40 <pvPortMalloc+0x6>
     f40:	1f 92       	push	r1
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
     f46:	8b 83       	std	Y+3, r24	; 0x03
     f48:	9c 83       	std	Y+4, r25	; 0x04
void *pvReturn = NULL; 
     f4a:	19 82       	std	Y+1, r1	; 0x01
     f4c:	1a 82       	std	Y+2, r1	; 0x02
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     f4e:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     f52:	20 91 6e 30 	lds	r18, 0x306E	; 0x80306e <xNextFreeByte>
     f56:	30 91 6f 30 	lds	r19, 0x306F	; 0x80306f <xNextFreeByte+0x1>
     f5a:	8b 81       	ldd	r24, Y+3	; 0x03
     f5c:	9c 81       	ldd	r25, Y+4	; 0x04
     f5e:	82 0f       	add	r24, r18
     f60:	93 1f       	adc	r25, r19
     f62:	80 3a       	cpi	r24, 0xA0	; 160
     f64:	9f 40       	sbci	r25, 0x0F	; 15
     f66:	18 f5       	brcc	.+70     	; 0xfae <pvPortMalloc+0x74>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
     f68:	20 91 6e 30 	lds	r18, 0x306E	; 0x80306e <xNextFreeByte>
     f6c:	30 91 6f 30 	lds	r19, 0x306F	; 0x80306f <xNextFreeByte+0x1>
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	9c 81       	ldd	r25, Y+4	; 0x04
     f74:	28 0f       	add	r18, r24
     f76:	39 1f       	adc	r19, r25
     f78:	80 91 6e 30 	lds	r24, 0x306E	; 0x80306e <xNextFreeByte>
     f7c:	90 91 6f 30 	lds	r25, 0x306F	; 0x80306f <xNextFreeByte+0x1>
	#endif

	vTaskSuspendAll();
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     f80:	82 17       	cp	r24, r18
     f82:	93 07       	cpc	r25, r19
     f84:	a0 f4       	brcc	.+40     	; 0xfae <pvPortMalloc+0x74>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     f86:	80 91 6e 30 	lds	r24, 0x306E	; 0x80306e <xNextFreeByte>
     f8a:	90 91 6f 30 	lds	r25, 0x306F	; 0x80306f <xNextFreeByte+0x1>
     f8e:	82 53       	subi	r24, 0x32	; 50
     f90:	9f 4d       	sbci	r25, 0xDF	; 223
     f92:	89 83       	std	Y+1, r24	; 0x01
     f94:	9a 83       	std	Y+2, r25	; 0x02
			xNextFreeByte += xWantedSize;			
     f96:	20 91 6e 30 	lds	r18, 0x306E	; 0x80306e <xNextFreeByte>
     f9a:	30 91 6f 30 	lds	r19, 0x306F	; 0x80306f <xNextFreeByte+0x1>
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	9c 81       	ldd	r25, Y+4	; 0x04
     fa2:	82 0f       	add	r24, r18
     fa4:	93 1f       	adc	r25, r19
     fa6:	80 93 6e 30 	sts	0x306E, r24	; 0x80306e <xNextFreeByte>
     faa:	90 93 6f 30 	sts	0x306F, r25	; 0x80306f <xNextFreeByte+0x1>
		}	
	}
	xTaskResumeAll();
     fae:	0e 94 ff 14 	call	0x29fe	; 0x29fe <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	9a 81       	ldd	r25, Y+2	; 0x02
}
     fb6:	24 96       	adiw	r28, 0x04	; 4
     fb8:	cd bf       	out	0x3d, r28	; 61
     fba:	de bf       	out	0x3e, r29	; 62
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	08 95       	ret

00000fc2 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	1f 92       	push	r1
     fc8:	1f 92       	push	r1
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
     fce:	89 83       	std	Y+1, r24	; 0x01
     fd0:	9a 83       	std	Y+2, r25	; 0x02
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
	
	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
     fd2:	00 00       	nop
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	df 91       	pop	r29
     fda:	cf 91       	pop	r28
     fdc:	08 95       	ret

00000fde <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     fde:	cf 93       	push	r28
     fe0:	df 93       	push	r29
     fe2:	1f 92       	push	r1
     fe4:	1f 92       	push	r1
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	89 83       	std	Y+1, r24	; 0x01
     fec:	9a 83       	std	Y+2, r25	; 0x02
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	9a 81       	ldd	r25, Y+2	; 0x02
     ff2:	9c 01       	movw	r18, r24
     ff4:	2d 5f       	subi	r18, 0xFD	; 253
     ff6:	3f 4f       	sbci	r19, 0xFF	; 255
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	9a 81       	ldd	r25, Y+2	; 0x02
     ffc:	fc 01       	movw	r30, r24
     ffe:	21 83       	std	Z+1, r18	; 0x01
    1000:	32 83       	std	Z+2, r19	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1002:	29 81       	ldd	r18, Y+1	; 0x01
    1004:	3a 81       	ldd	r19, Y+2	; 0x02
    1006:	8f ef       	ldi	r24, 0xFF	; 255
    1008:	9f ef       	ldi	r25, 0xFF	; 255
    100a:	dc 01       	movw	r26, r24
    100c:	f9 01       	movw	r30, r18
    100e:	83 83       	std	Z+3, r24	; 0x03
    1010:	94 83       	std	Z+4, r25	; 0x04
    1012:	a5 83       	std	Z+5, r26	; 0x05
    1014:	b6 83       	std	Z+6, r27	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	9a 81       	ldd	r25, Y+2	; 0x02
    101a:	9c 01       	movw	r18, r24
    101c:	2d 5f       	subi	r18, 0xFD	; 253
    101e:	3f 4f       	sbci	r19, 0xFF	; 255
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	9a 81       	ldd	r25, Y+2	; 0x02
    1024:	fc 01       	movw	r30, r24
    1026:	27 83       	std	Z+7, r18	; 0x07
    1028:	30 87       	std	Z+8, r19	; 0x08
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	9a 81       	ldd	r25, Y+2	; 0x02
    102e:	9c 01       	movw	r18, r24
    1030:	2d 5f       	subi	r18, 0xFD	; 253
    1032:	3f 4f       	sbci	r19, 0xFF	; 255
    1034:	89 81       	ldd	r24, Y+1	; 0x01
    1036:	9a 81       	ldd	r25, Y+2	; 0x02
    1038:	fc 01       	movw	r30, r24
    103a:	21 87       	std	Z+9, r18	; 0x09
    103c:	32 87       	std	Z+10, r19	; 0x0a

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	9a 81       	ldd	r25, Y+2	; 0x02
    1042:	fc 01       	movw	r30, r24
    1044:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    1046:	00 00       	nop
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	df 91       	pop	r29
    104e:	cf 91       	pop	r28
    1050:	08 95       	ret

00001052 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    1056:	1f 92       	push	r1
    1058:	1f 92       	push	r1
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
    105e:	89 83       	std	Y+1, r24	; 0x01
    1060:	9a 83       	std	Y+2, r25	; 0x02
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	9a 81       	ldd	r25, Y+2	; 0x02
    1066:	fc 01       	movw	r30, r24
    1068:	12 86       	std	Z+10, r1	; 0x0a
    106a:	13 86       	std	Z+11, r1	; 0x0b

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    106c:	00 00       	nop
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	df 91       	pop	r29
    1074:	cf 91       	pop	r28
    1076:	08 95       	ret

00001078 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1078:	cf 93       	push	r28
    107a:	df 93       	push	r29
    107c:	00 d0       	rcall	.+0      	; 0x107e <vListInsertEnd+0x6>
    107e:	00 d0       	rcall	.+0      	; 0x1080 <vListInsertEnd+0x8>
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
    1084:	8b 83       	std	Y+3, r24	; 0x03
    1086:	9c 83       	std	Y+4, r25	; 0x04
    1088:	6d 83       	std	Y+5, r22	; 0x05
    108a:	7e 83       	std	Y+6, r23	; 0x06
ListItem_t * const pxIndex = pxList->pxIndex;
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	9c 81       	ldd	r25, Y+4	; 0x04
    1090:	fc 01       	movw	r30, r24
    1092:	81 81       	ldd	r24, Z+1	; 0x01
    1094:	92 81       	ldd	r25, Z+2	; 0x02
    1096:	89 83       	std	Y+1, r24	; 0x01
    1098:	9a 83       	std	Y+2, r25	; 0x02
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    109a:	8d 81       	ldd	r24, Y+5	; 0x05
    109c:	9e 81       	ldd	r25, Y+6	; 0x06
    109e:	29 81       	ldd	r18, Y+1	; 0x01
    10a0:	3a 81       	ldd	r19, Y+2	; 0x02
    10a2:	fc 01       	movw	r30, r24
    10a4:	24 83       	std	Z+4, r18	; 0x04
    10a6:	35 83       	std	Z+5, r19	; 0x05
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	9a 81       	ldd	r25, Y+2	; 0x02
    10ac:	fc 01       	movw	r30, r24
    10ae:	26 81       	ldd	r18, Z+6	; 0x06
    10b0:	37 81       	ldd	r19, Z+7	; 0x07
    10b2:	8d 81       	ldd	r24, Y+5	; 0x05
    10b4:	9e 81       	ldd	r25, Y+6	; 0x06
    10b6:	fc 01       	movw	r30, r24
    10b8:	26 83       	std	Z+6, r18	; 0x06
    10ba:	37 83       	std	Z+7, r19	; 0x07

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	9a 81       	ldd	r25, Y+2	; 0x02
    10c0:	fc 01       	movw	r30, r24
    10c2:	86 81       	ldd	r24, Z+6	; 0x06
    10c4:	97 81       	ldd	r25, Z+7	; 0x07
    10c6:	2d 81       	ldd	r18, Y+5	; 0x05
    10c8:	3e 81       	ldd	r19, Y+6	; 0x06
    10ca:	fc 01       	movw	r30, r24
    10cc:	24 83       	std	Z+4, r18	; 0x04
    10ce:	35 83       	std	Z+5, r19	; 0x05
	pxIndex->pxPrevious = pxNewListItem;
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	9a 81       	ldd	r25, Y+2	; 0x02
    10d4:	2d 81       	ldd	r18, Y+5	; 0x05
    10d6:	3e 81       	ldd	r19, Y+6	; 0x06
    10d8:	fc 01       	movw	r30, r24
    10da:	26 83       	std	Z+6, r18	; 0x06
    10dc:	37 83       	std	Z+7, r19	; 0x07

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    10de:	8d 81       	ldd	r24, Y+5	; 0x05
    10e0:	9e 81       	ldd	r25, Y+6	; 0x06
    10e2:	2b 81       	ldd	r18, Y+3	; 0x03
    10e4:	3c 81       	ldd	r19, Y+4	; 0x04
    10e6:	fc 01       	movw	r30, r24
    10e8:	22 87       	std	Z+10, r18	; 0x0a
    10ea:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	9c 81       	ldd	r25, Y+4	; 0x04
    10f0:	fc 01       	movw	r30, r24
    10f2:	80 81       	ld	r24, Z
    10f4:	21 e0       	ldi	r18, 0x01	; 1
    10f6:	28 0f       	add	r18, r24
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	fc 01       	movw	r30, r24
    10fe:	20 83       	st	Z, r18
}
    1100:	00 00       	nop
    1102:	26 96       	adiw	r28, 0x06	; 6
    1104:	cd bf       	out	0x3d, r28	; 61
    1106:	de bf       	out	0x3e, r29	; 62
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	08 95       	ret

0000110e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    110e:	cf 93       	push	r28
    1110:	df 93       	push	r29
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	2a 97       	sbiw	r28, 0x0a	; 10
    1118:	cd bf       	out	0x3d, r28	; 61
    111a:	de bf       	out	0x3e, r29	; 62
    111c:	8f 83       	std	Y+7, r24	; 0x07
    111e:	98 87       	std	Y+8, r25	; 0x08
    1120:	69 87       	std	Y+9, r22	; 0x09
    1122:	7a 87       	std	Y+10, r23	; 0x0a
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1124:	89 85       	ldd	r24, Y+9	; 0x09
    1126:	9a 85       	ldd	r25, Y+10	; 0x0a
    1128:	fc 01       	movw	r30, r24
    112a:	80 81       	ld	r24, Z
    112c:	91 81       	ldd	r25, Z+1	; 0x01
    112e:	a2 81       	ldd	r26, Z+2	; 0x02
    1130:	b3 81       	ldd	r27, Z+3	; 0x03
    1132:	8b 83       	std	Y+3, r24	; 0x03
    1134:	9c 83       	std	Y+4, r25	; 0x04
    1136:	ad 83       	std	Y+5, r26	; 0x05
    1138:	be 83       	std	Y+6, r27	; 0x06
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	9c 81       	ldd	r25, Y+4	; 0x04
    113e:	ad 81       	ldd	r26, Y+5	; 0x05
    1140:	be 81       	ldd	r27, Y+6	; 0x06
    1142:	8f 3f       	cpi	r24, 0xFF	; 255
    1144:	9f 4f       	sbci	r25, 0xFF	; 255
    1146:	af 4f       	sbci	r26, 0xFF	; 255
    1148:	bf 4f       	sbci	r27, 0xFF	; 255
    114a:	41 f4       	brne	.+16     	; 0x115c <vListInsert+0x4e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    114c:	8f 81       	ldd	r24, Y+7	; 0x07
    114e:	98 85       	ldd	r25, Y+8	; 0x08
    1150:	fc 01       	movw	r30, r24
    1152:	81 85       	ldd	r24, Z+9	; 0x09
    1154:	92 85       	ldd	r25, Z+10	; 0x0a
    1156:	89 83       	std	Y+1, r24	; 0x01
    1158:	9a 83       	std	Y+2, r25	; 0x02
    115a:	20 c0       	rjmp	.+64     	; 0x119c <vListInsert+0x8e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    115c:	8f 81       	ldd	r24, Y+7	; 0x07
    115e:	98 85       	ldd	r25, Y+8	; 0x08
    1160:	03 96       	adiw	r24, 0x03	; 3
    1162:	89 83       	std	Y+1, r24	; 0x01
    1164:	9a 83       	std	Y+2, r25	; 0x02
    1166:	07 c0       	rjmp	.+14     	; 0x1176 <vListInsert+0x68>
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	9a 81       	ldd	r25, Y+2	; 0x02
    116c:	fc 01       	movw	r30, r24
    116e:	84 81       	ldd	r24, Z+4	; 0x04
    1170:	95 81       	ldd	r25, Z+5	; 0x05
    1172:	89 83       	std	Y+1, r24	; 0x01
    1174:	9a 83       	std	Y+2, r25	; 0x02
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	9a 81       	ldd	r25, Y+2	; 0x02
    117a:	fc 01       	movw	r30, r24
    117c:	84 81       	ldd	r24, Z+4	; 0x04
    117e:	95 81       	ldd	r25, Z+5	; 0x05
    1180:	fc 01       	movw	r30, r24
    1182:	20 81       	ld	r18, Z
    1184:	31 81       	ldd	r19, Z+1	; 0x01
    1186:	42 81       	ldd	r20, Z+2	; 0x02
    1188:	53 81       	ldd	r21, Z+3	; 0x03
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	9c 81       	ldd	r25, Y+4	; 0x04
    118e:	ad 81       	ldd	r26, Y+5	; 0x05
    1190:	be 81       	ldd	r27, Y+6	; 0x06
    1192:	82 17       	cp	r24, r18
    1194:	93 07       	cpc	r25, r19
    1196:	a4 07       	cpc	r26, r20
    1198:	b5 07       	cpc	r27, r21
    119a:	30 f7       	brcc	.-52     	; 0x1168 <vListInsert+0x5a>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    119c:	89 81       	ldd	r24, Y+1	; 0x01
    119e:	9a 81       	ldd	r25, Y+2	; 0x02
    11a0:	fc 01       	movw	r30, r24
    11a2:	24 81       	ldd	r18, Z+4	; 0x04
    11a4:	35 81       	ldd	r19, Z+5	; 0x05
    11a6:	89 85       	ldd	r24, Y+9	; 0x09
    11a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11aa:	fc 01       	movw	r30, r24
    11ac:	24 83       	std	Z+4, r18	; 0x04
    11ae:	35 83       	std	Z+5, r19	; 0x05
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    11b0:	89 85       	ldd	r24, Y+9	; 0x09
    11b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11b4:	fc 01       	movw	r30, r24
    11b6:	84 81       	ldd	r24, Z+4	; 0x04
    11b8:	95 81       	ldd	r25, Z+5	; 0x05
    11ba:	29 85       	ldd	r18, Y+9	; 0x09
    11bc:	3a 85       	ldd	r19, Y+10	; 0x0a
    11be:	fc 01       	movw	r30, r24
    11c0:	26 83       	std	Z+6, r18	; 0x06
    11c2:	37 83       	std	Z+7, r19	; 0x07
	pxNewListItem->pxPrevious = pxIterator;
    11c4:	89 85       	ldd	r24, Y+9	; 0x09
    11c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    11c8:	29 81       	ldd	r18, Y+1	; 0x01
    11ca:	3a 81       	ldd	r19, Y+2	; 0x02
    11cc:	fc 01       	movw	r30, r24
    11ce:	26 83       	std	Z+6, r18	; 0x06
    11d0:	37 83       	std	Z+7, r19	; 0x07
	pxIterator->pxNext = pxNewListItem;
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	9a 81       	ldd	r25, Y+2	; 0x02
    11d6:	29 85       	ldd	r18, Y+9	; 0x09
    11d8:	3a 85       	ldd	r19, Y+10	; 0x0a
    11da:	fc 01       	movw	r30, r24
    11dc:	24 83       	std	Z+4, r18	; 0x04
    11de:	35 83       	std	Z+5, r19	; 0x05

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    11e0:	89 85       	ldd	r24, Y+9	; 0x09
    11e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11e4:	2f 81       	ldd	r18, Y+7	; 0x07
    11e6:	38 85       	ldd	r19, Y+8	; 0x08
    11e8:	fc 01       	movw	r30, r24
    11ea:	22 87       	std	Z+10, r18	; 0x0a
    11ec:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
    11ee:	8f 81       	ldd	r24, Y+7	; 0x07
    11f0:	98 85       	ldd	r25, Y+8	; 0x08
    11f2:	fc 01       	movw	r30, r24
    11f4:	80 81       	ld	r24, Z
    11f6:	21 e0       	ldi	r18, 0x01	; 1
    11f8:	28 0f       	add	r18, r24
    11fa:	8f 81       	ldd	r24, Y+7	; 0x07
    11fc:	98 85       	ldd	r25, Y+8	; 0x08
    11fe:	fc 01       	movw	r30, r24
    1200:	20 83       	st	Z, r18
}
    1202:	00 00       	nop
    1204:	2a 96       	adiw	r28, 0x0a	; 10
    1206:	cd bf       	out	0x3d, r28	; 61
    1208:	de bf       	out	0x3e, r29	; 62
    120a:	df 91       	pop	r29
    120c:	cf 91       	pop	r28
    120e:	08 95       	ret

00001210 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
    1214:	00 d0       	rcall	.+0      	; 0x1216 <uxListRemove+0x6>
    1216:	1f 92       	push	r1
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
    121c:	8b 83       	std	Y+3, r24	; 0x03
    121e:	9c 83       	std	Y+4, r25	; 0x04
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	9c 81       	ldd	r25, Y+4	; 0x04
    1224:	fc 01       	movw	r30, r24
    1226:	82 85       	ldd	r24, Z+10	; 0x0a
    1228:	93 85       	ldd	r25, Z+11	; 0x0b
    122a:	89 83       	std	Y+1, r24	; 0x01
    122c:	9a 83       	std	Y+2, r25	; 0x02

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	9c 81       	ldd	r25, Y+4	; 0x04
    1232:	fc 01       	movw	r30, r24
    1234:	84 81       	ldd	r24, Z+4	; 0x04
    1236:	95 81       	ldd	r25, Z+5	; 0x05
    1238:	2b 81       	ldd	r18, Y+3	; 0x03
    123a:	3c 81       	ldd	r19, Y+4	; 0x04
    123c:	f9 01       	movw	r30, r18
    123e:	26 81       	ldd	r18, Z+6	; 0x06
    1240:	37 81       	ldd	r19, Z+7	; 0x07
    1242:	fc 01       	movw	r30, r24
    1244:	26 83       	std	Z+6, r18	; 0x06
    1246:	37 83       	std	Z+7, r19	; 0x07
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	9c 81       	ldd	r25, Y+4	; 0x04
    124c:	fc 01       	movw	r30, r24
    124e:	86 81       	ldd	r24, Z+6	; 0x06
    1250:	97 81       	ldd	r25, Z+7	; 0x07
    1252:	2b 81       	ldd	r18, Y+3	; 0x03
    1254:	3c 81       	ldd	r19, Y+4	; 0x04
    1256:	f9 01       	movw	r30, r18
    1258:	24 81       	ldd	r18, Z+4	; 0x04
    125a:	35 81       	ldd	r19, Z+5	; 0x05
    125c:	fc 01       	movw	r30, r24
    125e:	24 83       	std	Z+4, r18	; 0x04
    1260:	35 83       	std	Z+5, r19	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	9a 81       	ldd	r25, Y+2	; 0x02
    1266:	fc 01       	movw	r30, r24
    1268:	21 81       	ldd	r18, Z+1	; 0x01
    126a:	32 81       	ldd	r19, Z+2	; 0x02
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	9c 81       	ldd	r25, Y+4	; 0x04
    1270:	28 17       	cp	r18, r24
    1272:	39 07       	cpc	r19, r25
    1274:	51 f4       	brne	.+20     	; 0x128a <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	9c 81       	ldd	r25, Y+4	; 0x04
    127a:	fc 01       	movw	r30, r24
    127c:	26 81       	ldd	r18, Z+6	; 0x06
    127e:	37 81       	ldd	r19, Z+7	; 0x07
    1280:	89 81       	ldd	r24, Y+1	; 0x01
    1282:	9a 81       	ldd	r25, Y+2	; 0x02
    1284:	fc 01       	movw	r30, r24
    1286:	21 83       	std	Z+1, r18	; 0x01
    1288:	32 83       	std	Z+2, r19	; 0x02
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	9c 81       	ldd	r25, Y+4	; 0x04
    128e:	fc 01       	movw	r30, r24
    1290:	12 86       	std	Z+10, r1	; 0x0a
    1292:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	9a 81       	ldd	r25, Y+2	; 0x02
    1298:	fc 01       	movw	r30, r24
    129a:	80 81       	ld	r24, Z
    129c:	2f ef       	ldi	r18, 0xFF	; 255
    129e:	28 0f       	add	r18, r24
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	9a 81       	ldd	r25, Y+2	; 0x02
    12a4:	fc 01       	movw	r30, r24
    12a6:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	9a 81       	ldd	r25, Y+2	; 0x02
    12ac:	fc 01       	movw	r30, r24
    12ae:	80 81       	ld	r24, Z
}
    12b0:	24 96       	adiw	r28, 0x04	; 4
    12b2:	cd bf       	out	0x3d, r28	; 61
    12b4:	de bf       	out	0x3e, r29	; 62
    12b6:	df 91       	pop	r29
    12b8:	cf 91       	pop	r28
    12ba:	08 95       	ret

000012bc <_portSetInterruptMaskFromIsr>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    12bc:	1f 93       	push	r17
    12be:	cf 93       	push	r28
    12c0:	df 93       	push	r29
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	80 ea       	ldi	r24, 0xA0	; 160
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	fc 01       	movw	r30, r24
    12cc:	12 81       	ldd	r17, Z+2	; 0x02
    12ce:	80 ea       	ldi	r24, 0xA0	; 160
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	20 ea       	ldi	r18, 0xA0	; 160
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	f9 01       	movw	r30, r18
    12d8:	22 81       	ldd	r18, Z+2	; 0x02
    12da:	28 7f       	andi	r18, 0xF8	; 248
    12dc:	fc 01       	movw	r30, r24
    12de:	22 83       	std	Z+2, r18	; 0x02
    12e0:	81 2f       	mov	r24, r17
    12e2:	df 91       	pop	r29
    12e4:	cf 91       	pop	r28
    12e6:	1f 91       	pop	r17
    12e8:	08 95       	ret

000012ea <pxPortInitialiseStack>:
    12ea:	cf 93       	push	r28
    12ec:	df 93       	push	r29
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
    12f2:	2a 97       	sbiw	r28, 0x0a	; 10
    12f4:	cd bf       	out	0x3d, r28	; 61
    12f6:	de bf       	out	0x3e, r29	; 62
    12f8:	8d 83       	std	Y+5, r24	; 0x05
    12fa:	9e 83       	std	Y+6, r25	; 0x06
    12fc:	6f 83       	std	Y+7, r22	; 0x07
    12fe:	78 87       	std	Y+8, r23	; 0x08
    1300:	49 87       	std	Y+9, r20	; 0x09
    1302:	5a 87       	std	Y+10, r21	; 0x0a
    1304:	8d 81       	ldd	r24, Y+5	; 0x05
    1306:	9e 81       	ldd	r25, Y+6	; 0x06
    1308:	21 e1       	ldi	r18, 0x11	; 17
    130a:	fc 01       	movw	r30, r24
    130c:	20 83       	st	Z, r18
    130e:	8d 81       	ldd	r24, Y+5	; 0x05
    1310:	9e 81       	ldd	r25, Y+6	; 0x06
    1312:	01 97       	sbiw	r24, 0x01	; 1
    1314:	8d 83       	std	Y+5, r24	; 0x05
    1316:	9e 83       	std	Y+6, r25	; 0x06
    1318:	8d 81       	ldd	r24, Y+5	; 0x05
    131a:	9e 81       	ldd	r25, Y+6	; 0x06
    131c:	22 e2       	ldi	r18, 0x22	; 34
    131e:	fc 01       	movw	r30, r24
    1320:	20 83       	st	Z, r18
    1322:	8d 81       	ldd	r24, Y+5	; 0x05
    1324:	9e 81       	ldd	r25, Y+6	; 0x06
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	8d 83       	std	Y+5, r24	; 0x05
    132a:	9e 83       	std	Y+6, r25	; 0x06
    132c:	8d 81       	ldd	r24, Y+5	; 0x05
    132e:	9e 81       	ldd	r25, Y+6	; 0x06
    1330:	23 e3       	ldi	r18, 0x33	; 51
    1332:	fc 01       	movw	r30, r24
    1334:	20 83       	st	Z, r18
    1336:	8d 81       	ldd	r24, Y+5	; 0x05
    1338:	9e 81       	ldd	r25, Y+6	; 0x06
    133a:	01 97       	sbiw	r24, 0x01	; 1
    133c:	8d 83       	std	Y+5, r24	; 0x05
    133e:	9e 83       	std	Y+6, r25	; 0x06
    1340:	8f 81       	ldd	r24, Y+7	; 0x07
    1342:	98 85       	ldd	r25, Y+8	; 0x08
    1344:	cc 01       	movw	r24, r24
    1346:	a0 e0       	ldi	r26, 0x00	; 0
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	89 83       	std	Y+1, r24	; 0x01
    134c:	9a 83       	std	Y+2, r25	; 0x02
    134e:	ab 83       	std	Y+3, r26	; 0x03
    1350:	bc 83       	std	Y+4, r27	; 0x04
    1352:	29 81       	ldd	r18, Y+1	; 0x01
    1354:	8d 81       	ldd	r24, Y+5	; 0x05
    1356:	9e 81       	ldd	r25, Y+6	; 0x06
    1358:	fc 01       	movw	r30, r24
    135a:	20 83       	st	Z, r18
    135c:	8d 81       	ldd	r24, Y+5	; 0x05
    135e:	9e 81       	ldd	r25, Y+6	; 0x06
    1360:	01 97       	sbiw	r24, 0x01	; 1
    1362:	8d 83       	std	Y+5, r24	; 0x05
    1364:	9e 83       	std	Y+6, r25	; 0x06
    1366:	89 81       	ldd	r24, Y+1	; 0x01
    1368:	9a 81       	ldd	r25, Y+2	; 0x02
    136a:	ab 81       	ldd	r26, Y+3	; 0x03
    136c:	bc 81       	ldd	r27, Y+4	; 0x04
    136e:	89 2f       	mov	r24, r25
    1370:	9a 2f       	mov	r25, r26
    1372:	ab 2f       	mov	r26, r27
    1374:	bb 27       	eor	r27, r27
    1376:	89 83       	std	Y+1, r24	; 0x01
    1378:	9a 83       	std	Y+2, r25	; 0x02
    137a:	ab 83       	std	Y+3, r26	; 0x03
    137c:	bc 83       	std	Y+4, r27	; 0x04
    137e:	29 81       	ldd	r18, Y+1	; 0x01
    1380:	8d 81       	ldd	r24, Y+5	; 0x05
    1382:	9e 81       	ldd	r25, Y+6	; 0x06
    1384:	fc 01       	movw	r30, r24
    1386:	20 83       	st	Z, r18
    1388:	8d 81       	ldd	r24, Y+5	; 0x05
    138a:	9e 81       	ldd	r25, Y+6	; 0x06
    138c:	01 97       	sbiw	r24, 0x01	; 1
    138e:	8d 83       	std	Y+5, r24	; 0x05
    1390:	9e 83       	std	Y+6, r25	; 0x06
    1392:	89 81       	ldd	r24, Y+1	; 0x01
    1394:	9a 81       	ldd	r25, Y+2	; 0x02
    1396:	ab 81       	ldd	r26, Y+3	; 0x03
    1398:	bc 81       	ldd	r27, Y+4	; 0x04
    139a:	89 2f       	mov	r24, r25
    139c:	9a 2f       	mov	r25, r26
    139e:	ab 2f       	mov	r26, r27
    13a0:	bb 27       	eor	r27, r27
    13a2:	89 83       	std	Y+1, r24	; 0x01
    13a4:	9a 83       	std	Y+2, r25	; 0x02
    13a6:	ab 83       	std	Y+3, r26	; 0x03
    13a8:	bc 83       	std	Y+4, r27	; 0x04
    13aa:	29 81       	ldd	r18, Y+1	; 0x01
    13ac:	8d 81       	ldd	r24, Y+5	; 0x05
    13ae:	9e 81       	ldd	r25, Y+6	; 0x06
    13b0:	fc 01       	movw	r30, r24
    13b2:	20 83       	st	Z, r18
    13b4:	8d 81       	ldd	r24, Y+5	; 0x05
    13b6:	9e 81       	ldd	r25, Y+6	; 0x06
    13b8:	01 97       	sbiw	r24, 0x01	; 1
    13ba:	8d 83       	std	Y+5, r24	; 0x05
    13bc:	9e 83       	std	Y+6, r25	; 0x06
    13be:	8d 81       	ldd	r24, Y+5	; 0x05
    13c0:	9e 81       	ldd	r25, Y+6	; 0x06
    13c2:	21 e3       	ldi	r18, 0x31	; 49
    13c4:	fc 01       	movw	r30, r24
    13c6:	20 83       	st	Z, r18
    13c8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ca:	9e 81       	ldd	r25, Y+6	; 0x06
    13cc:	01 97       	sbiw	r24, 0x01	; 1
    13ce:	8d 83       	std	Y+5, r24	; 0x05
    13d0:	9e 83       	std	Y+6, r25	; 0x06
    13d2:	8d 81       	ldd	r24, Y+5	; 0x05
    13d4:	9e 81       	ldd	r25, Y+6	; 0x06
    13d6:	20 e8       	ldi	r18, 0x80	; 128
    13d8:	fc 01       	movw	r30, r24
    13da:	20 83       	st	Z, r18
    13dc:	8d 81       	ldd	r24, Y+5	; 0x05
    13de:	9e 81       	ldd	r25, Y+6	; 0x06
    13e0:	01 97       	sbiw	r24, 0x01	; 1
    13e2:	8d 83       	std	Y+5, r24	; 0x05
    13e4:	9e 83       	std	Y+6, r25	; 0x06
    13e6:	8d 81       	ldd	r24, Y+5	; 0x05
    13e8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ea:	27 e8       	ldi	r18, 0x87	; 135
    13ec:	fc 01       	movw	r30, r24
    13ee:	20 83       	st	Z, r18
    13f0:	8d 81       	ldd	r24, Y+5	; 0x05
    13f2:	9e 81       	ldd	r25, Y+6	; 0x06
    13f4:	01 97       	sbiw	r24, 0x01	; 1
    13f6:	8d 83       	std	Y+5, r24	; 0x05
    13f8:	9e 83       	std	Y+6, r25	; 0x06
    13fa:	8d 81       	ldd	r24, Y+5	; 0x05
    13fc:	9e 81       	ldd	r25, Y+6	; 0x06
    13fe:	fc 01       	movw	r30, r24
    1400:	10 82       	st	Z, r1
    1402:	8d 81       	ldd	r24, Y+5	; 0x05
    1404:	9e 81       	ldd	r25, Y+6	; 0x06
    1406:	01 97       	sbiw	r24, 0x01	; 1
    1408:	8d 83       	std	Y+5, r24	; 0x05
    140a:	9e 83       	std	Y+6, r25	; 0x06
    140c:	8d 81       	ldd	r24, Y+5	; 0x05
    140e:	9e 81       	ldd	r25, Y+6	; 0x06
    1410:	fc 01       	movw	r30, r24
    1412:	10 82       	st	Z, r1
    1414:	8d 81       	ldd	r24, Y+5	; 0x05
    1416:	9e 81       	ldd	r25, Y+6	; 0x06
    1418:	01 97       	sbiw	r24, 0x01	; 1
    141a:	8d 83       	std	Y+5, r24	; 0x05
    141c:	9e 83       	std	Y+6, r25	; 0x06
    141e:	8d 81       	ldd	r24, Y+5	; 0x05
    1420:	9e 81       	ldd	r25, Y+6	; 0x06
    1422:	22 e0       	ldi	r18, 0x02	; 2
    1424:	fc 01       	movw	r30, r24
    1426:	20 83       	st	Z, r18
    1428:	8d 81       	ldd	r24, Y+5	; 0x05
    142a:	9e 81       	ldd	r25, Y+6	; 0x06
    142c:	01 97       	sbiw	r24, 0x01	; 1
    142e:	8d 83       	std	Y+5, r24	; 0x05
    1430:	9e 83       	std	Y+6, r25	; 0x06
    1432:	8d 81       	ldd	r24, Y+5	; 0x05
    1434:	9e 81       	ldd	r25, Y+6	; 0x06
    1436:	23 e0       	ldi	r18, 0x03	; 3
    1438:	fc 01       	movw	r30, r24
    143a:	20 83       	st	Z, r18
    143c:	8d 81       	ldd	r24, Y+5	; 0x05
    143e:	9e 81       	ldd	r25, Y+6	; 0x06
    1440:	01 97       	sbiw	r24, 0x01	; 1
    1442:	8d 83       	std	Y+5, r24	; 0x05
    1444:	9e 83       	std	Y+6, r25	; 0x06
    1446:	8d 81       	ldd	r24, Y+5	; 0x05
    1448:	9e 81       	ldd	r25, Y+6	; 0x06
    144a:	24 e0       	ldi	r18, 0x04	; 4
    144c:	fc 01       	movw	r30, r24
    144e:	20 83       	st	Z, r18
    1450:	8d 81       	ldd	r24, Y+5	; 0x05
    1452:	9e 81       	ldd	r25, Y+6	; 0x06
    1454:	01 97       	sbiw	r24, 0x01	; 1
    1456:	8d 83       	std	Y+5, r24	; 0x05
    1458:	9e 83       	std	Y+6, r25	; 0x06
    145a:	8d 81       	ldd	r24, Y+5	; 0x05
    145c:	9e 81       	ldd	r25, Y+6	; 0x06
    145e:	25 e0       	ldi	r18, 0x05	; 5
    1460:	fc 01       	movw	r30, r24
    1462:	20 83       	st	Z, r18
    1464:	8d 81       	ldd	r24, Y+5	; 0x05
    1466:	9e 81       	ldd	r25, Y+6	; 0x06
    1468:	01 97       	sbiw	r24, 0x01	; 1
    146a:	8d 83       	std	Y+5, r24	; 0x05
    146c:	9e 83       	std	Y+6, r25	; 0x06
    146e:	8d 81       	ldd	r24, Y+5	; 0x05
    1470:	9e 81       	ldd	r25, Y+6	; 0x06
    1472:	26 e0       	ldi	r18, 0x06	; 6
    1474:	fc 01       	movw	r30, r24
    1476:	20 83       	st	Z, r18
    1478:	8d 81       	ldd	r24, Y+5	; 0x05
    147a:	9e 81       	ldd	r25, Y+6	; 0x06
    147c:	01 97       	sbiw	r24, 0x01	; 1
    147e:	8d 83       	std	Y+5, r24	; 0x05
    1480:	9e 83       	std	Y+6, r25	; 0x06
    1482:	8d 81       	ldd	r24, Y+5	; 0x05
    1484:	9e 81       	ldd	r25, Y+6	; 0x06
    1486:	27 e0       	ldi	r18, 0x07	; 7
    1488:	fc 01       	movw	r30, r24
    148a:	20 83       	st	Z, r18
    148c:	8d 81       	ldd	r24, Y+5	; 0x05
    148e:	9e 81       	ldd	r25, Y+6	; 0x06
    1490:	01 97       	sbiw	r24, 0x01	; 1
    1492:	8d 83       	std	Y+5, r24	; 0x05
    1494:	9e 83       	std	Y+6, r25	; 0x06
    1496:	8d 81       	ldd	r24, Y+5	; 0x05
    1498:	9e 81       	ldd	r25, Y+6	; 0x06
    149a:	28 e0       	ldi	r18, 0x08	; 8
    149c:	fc 01       	movw	r30, r24
    149e:	20 83       	st	Z, r18
    14a0:	8d 81       	ldd	r24, Y+5	; 0x05
    14a2:	9e 81       	ldd	r25, Y+6	; 0x06
    14a4:	01 97       	sbiw	r24, 0x01	; 1
    14a6:	8d 83       	std	Y+5, r24	; 0x05
    14a8:	9e 83       	std	Y+6, r25	; 0x06
    14aa:	8d 81       	ldd	r24, Y+5	; 0x05
    14ac:	9e 81       	ldd	r25, Y+6	; 0x06
    14ae:	29 e0       	ldi	r18, 0x09	; 9
    14b0:	fc 01       	movw	r30, r24
    14b2:	20 83       	st	Z, r18
    14b4:	8d 81       	ldd	r24, Y+5	; 0x05
    14b6:	9e 81       	ldd	r25, Y+6	; 0x06
    14b8:	01 97       	sbiw	r24, 0x01	; 1
    14ba:	8d 83       	std	Y+5, r24	; 0x05
    14bc:	9e 83       	std	Y+6, r25	; 0x06
    14be:	8d 81       	ldd	r24, Y+5	; 0x05
    14c0:	9e 81       	ldd	r25, Y+6	; 0x06
    14c2:	20 e1       	ldi	r18, 0x10	; 16
    14c4:	fc 01       	movw	r30, r24
    14c6:	20 83       	st	Z, r18
    14c8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ca:	9e 81       	ldd	r25, Y+6	; 0x06
    14cc:	01 97       	sbiw	r24, 0x01	; 1
    14ce:	8d 83       	std	Y+5, r24	; 0x05
    14d0:	9e 83       	std	Y+6, r25	; 0x06
    14d2:	8d 81       	ldd	r24, Y+5	; 0x05
    14d4:	9e 81       	ldd	r25, Y+6	; 0x06
    14d6:	21 e1       	ldi	r18, 0x11	; 17
    14d8:	fc 01       	movw	r30, r24
    14da:	20 83       	st	Z, r18
    14dc:	8d 81       	ldd	r24, Y+5	; 0x05
    14de:	9e 81       	ldd	r25, Y+6	; 0x06
    14e0:	01 97       	sbiw	r24, 0x01	; 1
    14e2:	8d 83       	std	Y+5, r24	; 0x05
    14e4:	9e 83       	std	Y+6, r25	; 0x06
    14e6:	8d 81       	ldd	r24, Y+5	; 0x05
    14e8:	9e 81       	ldd	r25, Y+6	; 0x06
    14ea:	22 e1       	ldi	r18, 0x12	; 18
    14ec:	fc 01       	movw	r30, r24
    14ee:	20 83       	st	Z, r18
    14f0:	8d 81       	ldd	r24, Y+5	; 0x05
    14f2:	9e 81       	ldd	r25, Y+6	; 0x06
    14f4:	01 97       	sbiw	r24, 0x01	; 1
    14f6:	8d 83       	std	Y+5, r24	; 0x05
    14f8:	9e 83       	std	Y+6, r25	; 0x06
    14fa:	8d 81       	ldd	r24, Y+5	; 0x05
    14fc:	9e 81       	ldd	r25, Y+6	; 0x06
    14fe:	23 e1       	ldi	r18, 0x13	; 19
    1500:	fc 01       	movw	r30, r24
    1502:	20 83       	st	Z, r18
    1504:	8d 81       	ldd	r24, Y+5	; 0x05
    1506:	9e 81       	ldd	r25, Y+6	; 0x06
    1508:	01 97       	sbiw	r24, 0x01	; 1
    150a:	8d 83       	std	Y+5, r24	; 0x05
    150c:	9e 83       	std	Y+6, r25	; 0x06
    150e:	8d 81       	ldd	r24, Y+5	; 0x05
    1510:	9e 81       	ldd	r25, Y+6	; 0x06
    1512:	24 e1       	ldi	r18, 0x14	; 20
    1514:	fc 01       	movw	r30, r24
    1516:	20 83       	st	Z, r18
    1518:	8d 81       	ldd	r24, Y+5	; 0x05
    151a:	9e 81       	ldd	r25, Y+6	; 0x06
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	8d 83       	std	Y+5, r24	; 0x05
    1520:	9e 83       	std	Y+6, r25	; 0x06
    1522:	8d 81       	ldd	r24, Y+5	; 0x05
    1524:	9e 81       	ldd	r25, Y+6	; 0x06
    1526:	25 e1       	ldi	r18, 0x15	; 21
    1528:	fc 01       	movw	r30, r24
    152a:	20 83       	st	Z, r18
    152c:	8d 81       	ldd	r24, Y+5	; 0x05
    152e:	9e 81       	ldd	r25, Y+6	; 0x06
    1530:	01 97       	sbiw	r24, 0x01	; 1
    1532:	8d 83       	std	Y+5, r24	; 0x05
    1534:	9e 83       	std	Y+6, r25	; 0x06
    1536:	8d 81       	ldd	r24, Y+5	; 0x05
    1538:	9e 81       	ldd	r25, Y+6	; 0x06
    153a:	26 e1       	ldi	r18, 0x16	; 22
    153c:	fc 01       	movw	r30, r24
    153e:	20 83       	st	Z, r18
    1540:	8d 81       	ldd	r24, Y+5	; 0x05
    1542:	9e 81       	ldd	r25, Y+6	; 0x06
    1544:	01 97       	sbiw	r24, 0x01	; 1
    1546:	8d 83       	std	Y+5, r24	; 0x05
    1548:	9e 83       	std	Y+6, r25	; 0x06
    154a:	8d 81       	ldd	r24, Y+5	; 0x05
    154c:	9e 81       	ldd	r25, Y+6	; 0x06
    154e:	27 e1       	ldi	r18, 0x17	; 23
    1550:	fc 01       	movw	r30, r24
    1552:	20 83       	st	Z, r18
    1554:	8d 81       	ldd	r24, Y+5	; 0x05
    1556:	9e 81       	ldd	r25, Y+6	; 0x06
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	8d 83       	std	Y+5, r24	; 0x05
    155c:	9e 83       	std	Y+6, r25	; 0x06
    155e:	8d 81       	ldd	r24, Y+5	; 0x05
    1560:	9e 81       	ldd	r25, Y+6	; 0x06
    1562:	28 e1       	ldi	r18, 0x18	; 24
    1564:	fc 01       	movw	r30, r24
    1566:	20 83       	st	Z, r18
    1568:	8d 81       	ldd	r24, Y+5	; 0x05
    156a:	9e 81       	ldd	r25, Y+6	; 0x06
    156c:	01 97       	sbiw	r24, 0x01	; 1
    156e:	8d 83       	std	Y+5, r24	; 0x05
    1570:	9e 83       	std	Y+6, r25	; 0x06
    1572:	8d 81       	ldd	r24, Y+5	; 0x05
    1574:	9e 81       	ldd	r25, Y+6	; 0x06
    1576:	29 e1       	ldi	r18, 0x19	; 25
    1578:	fc 01       	movw	r30, r24
    157a:	20 83       	st	Z, r18
    157c:	8d 81       	ldd	r24, Y+5	; 0x05
    157e:	9e 81       	ldd	r25, Y+6	; 0x06
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	8d 83       	std	Y+5, r24	; 0x05
    1584:	9e 83       	std	Y+6, r25	; 0x06
    1586:	8d 81       	ldd	r24, Y+5	; 0x05
    1588:	9e 81       	ldd	r25, Y+6	; 0x06
    158a:	20 e2       	ldi	r18, 0x20	; 32
    158c:	fc 01       	movw	r30, r24
    158e:	20 83       	st	Z, r18
    1590:	8d 81       	ldd	r24, Y+5	; 0x05
    1592:	9e 81       	ldd	r25, Y+6	; 0x06
    1594:	01 97       	sbiw	r24, 0x01	; 1
    1596:	8d 83       	std	Y+5, r24	; 0x05
    1598:	9e 83       	std	Y+6, r25	; 0x06
    159a:	8d 81       	ldd	r24, Y+5	; 0x05
    159c:	9e 81       	ldd	r25, Y+6	; 0x06
    159e:	21 e2       	ldi	r18, 0x21	; 33
    15a0:	fc 01       	movw	r30, r24
    15a2:	20 83       	st	Z, r18
    15a4:	8d 81       	ldd	r24, Y+5	; 0x05
    15a6:	9e 81       	ldd	r25, Y+6	; 0x06
    15a8:	01 97       	sbiw	r24, 0x01	; 1
    15aa:	8d 83       	std	Y+5, r24	; 0x05
    15ac:	9e 83       	std	Y+6, r25	; 0x06
    15ae:	8d 81       	ldd	r24, Y+5	; 0x05
    15b0:	9e 81       	ldd	r25, Y+6	; 0x06
    15b2:	22 e2       	ldi	r18, 0x22	; 34
    15b4:	fc 01       	movw	r30, r24
    15b6:	20 83       	st	Z, r18
    15b8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ba:	9e 81       	ldd	r25, Y+6	; 0x06
    15bc:	01 97       	sbiw	r24, 0x01	; 1
    15be:	8d 83       	std	Y+5, r24	; 0x05
    15c0:	9e 83       	std	Y+6, r25	; 0x06
    15c2:	8d 81       	ldd	r24, Y+5	; 0x05
    15c4:	9e 81       	ldd	r25, Y+6	; 0x06
    15c6:	23 e2       	ldi	r18, 0x23	; 35
    15c8:	fc 01       	movw	r30, r24
    15ca:	20 83       	st	Z, r18
    15cc:	8d 81       	ldd	r24, Y+5	; 0x05
    15ce:	9e 81       	ldd	r25, Y+6	; 0x06
    15d0:	01 97       	sbiw	r24, 0x01	; 1
    15d2:	8d 83       	std	Y+5, r24	; 0x05
    15d4:	9e 83       	std	Y+6, r25	; 0x06
    15d6:	89 85       	ldd	r24, Y+9	; 0x09
    15d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15da:	cc 01       	movw	r24, r24
    15dc:	a0 e0       	ldi	r26, 0x00	; 0
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	89 83       	std	Y+1, r24	; 0x01
    15e2:	9a 83       	std	Y+2, r25	; 0x02
    15e4:	ab 83       	std	Y+3, r26	; 0x03
    15e6:	bc 83       	std	Y+4, r27	; 0x04
    15e8:	29 81       	ldd	r18, Y+1	; 0x01
    15ea:	8d 81       	ldd	r24, Y+5	; 0x05
    15ec:	9e 81       	ldd	r25, Y+6	; 0x06
    15ee:	fc 01       	movw	r30, r24
    15f0:	20 83       	st	Z, r18
    15f2:	8d 81       	ldd	r24, Y+5	; 0x05
    15f4:	9e 81       	ldd	r25, Y+6	; 0x06
    15f6:	01 97       	sbiw	r24, 0x01	; 1
    15f8:	8d 83       	std	Y+5, r24	; 0x05
    15fa:	9e 83       	std	Y+6, r25	; 0x06
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1600:	ab 81       	ldd	r26, Y+3	; 0x03
    1602:	bc 81       	ldd	r27, Y+4	; 0x04
    1604:	89 2f       	mov	r24, r25
    1606:	9a 2f       	mov	r25, r26
    1608:	ab 2f       	mov	r26, r27
    160a:	bb 27       	eor	r27, r27
    160c:	89 83       	std	Y+1, r24	; 0x01
    160e:	9a 83       	std	Y+2, r25	; 0x02
    1610:	ab 83       	std	Y+3, r26	; 0x03
    1612:	bc 83       	std	Y+4, r27	; 0x04
    1614:	29 81       	ldd	r18, Y+1	; 0x01
    1616:	8d 81       	ldd	r24, Y+5	; 0x05
    1618:	9e 81       	ldd	r25, Y+6	; 0x06
    161a:	fc 01       	movw	r30, r24
    161c:	20 83       	st	Z, r18
    161e:	8d 81       	ldd	r24, Y+5	; 0x05
    1620:	9e 81       	ldd	r25, Y+6	; 0x06
    1622:	01 97       	sbiw	r24, 0x01	; 1
    1624:	8d 83       	std	Y+5, r24	; 0x05
    1626:	9e 83       	std	Y+6, r25	; 0x06
    1628:	8d 81       	ldd	r24, Y+5	; 0x05
    162a:	9e 81       	ldd	r25, Y+6	; 0x06
    162c:	26 e2       	ldi	r18, 0x26	; 38
    162e:	fc 01       	movw	r30, r24
    1630:	20 83       	st	Z, r18
    1632:	8d 81       	ldd	r24, Y+5	; 0x05
    1634:	9e 81       	ldd	r25, Y+6	; 0x06
    1636:	01 97       	sbiw	r24, 0x01	; 1
    1638:	8d 83       	std	Y+5, r24	; 0x05
    163a:	9e 83       	std	Y+6, r25	; 0x06
    163c:	8d 81       	ldd	r24, Y+5	; 0x05
    163e:	9e 81       	ldd	r25, Y+6	; 0x06
    1640:	27 e2       	ldi	r18, 0x27	; 39
    1642:	fc 01       	movw	r30, r24
    1644:	20 83       	st	Z, r18
    1646:	8d 81       	ldd	r24, Y+5	; 0x05
    1648:	9e 81       	ldd	r25, Y+6	; 0x06
    164a:	01 97       	sbiw	r24, 0x01	; 1
    164c:	8d 83       	std	Y+5, r24	; 0x05
    164e:	9e 83       	std	Y+6, r25	; 0x06
    1650:	8d 81       	ldd	r24, Y+5	; 0x05
    1652:	9e 81       	ldd	r25, Y+6	; 0x06
    1654:	28 e2       	ldi	r18, 0x28	; 40
    1656:	fc 01       	movw	r30, r24
    1658:	20 83       	st	Z, r18
    165a:	8d 81       	ldd	r24, Y+5	; 0x05
    165c:	9e 81       	ldd	r25, Y+6	; 0x06
    165e:	01 97       	sbiw	r24, 0x01	; 1
    1660:	8d 83       	std	Y+5, r24	; 0x05
    1662:	9e 83       	std	Y+6, r25	; 0x06
    1664:	8d 81       	ldd	r24, Y+5	; 0x05
    1666:	9e 81       	ldd	r25, Y+6	; 0x06
    1668:	29 e2       	ldi	r18, 0x29	; 41
    166a:	fc 01       	movw	r30, r24
    166c:	20 83       	st	Z, r18
    166e:	8d 81       	ldd	r24, Y+5	; 0x05
    1670:	9e 81       	ldd	r25, Y+6	; 0x06
    1672:	01 97       	sbiw	r24, 0x01	; 1
    1674:	8d 83       	std	Y+5, r24	; 0x05
    1676:	9e 83       	std	Y+6, r25	; 0x06
    1678:	8d 81       	ldd	r24, Y+5	; 0x05
    167a:	9e 81       	ldd	r25, Y+6	; 0x06
    167c:	20 e3       	ldi	r18, 0x30	; 48
    167e:	fc 01       	movw	r30, r24
    1680:	20 83       	st	Z, r18
    1682:	8d 81       	ldd	r24, Y+5	; 0x05
    1684:	9e 81       	ldd	r25, Y+6	; 0x06
    1686:	01 97       	sbiw	r24, 0x01	; 1
    1688:	8d 83       	std	Y+5, r24	; 0x05
    168a:	9e 83       	std	Y+6, r25	; 0x06
    168c:	8d 81       	ldd	r24, Y+5	; 0x05
    168e:	9e 81       	ldd	r25, Y+6	; 0x06
    1690:	2a 96       	adiw	r28, 0x0a	; 10
    1692:	cd bf       	out	0x3d, r28	; 61
    1694:	de bf       	out	0x3e, r29	; 62
    1696:	df 91       	pop	r29
    1698:	cf 91       	pop	r28
    169a:	08 95       	ret

0000169c <xPortStartScheduler>:
    169c:	cf 93       	push	r28
    169e:	df 93       	push	r29
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
    16a4:	0e 94 95 0c 	call	0x192a	; 0x192a <prvSetupTimerInterrupt>
    16a8:	a0 91 70 30 	lds	r26, 0x3070	; 0x803070 <pxCurrentTCB>
    16ac:	b0 91 71 30 	lds	r27, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    16b0:	0d 90       	ld	r0, X+
    16b2:	0d be       	out	0x3d, r0	; 61
    16b4:	0d 90       	ld	r0, X+
    16b6:	0e be       	out	0x3e, r0	; 62
    16b8:	ef 91       	pop	r30
    16ba:	df 91       	pop	r29
    16bc:	cf 91       	pop	r28
    16be:	bf 91       	pop	r27
    16c0:	af 91       	pop	r26
    16c2:	9f 91       	pop	r25
    16c4:	8f 91       	pop	r24
    16c6:	7f 91       	pop	r23
    16c8:	6f 91       	pop	r22
    16ca:	5f 91       	pop	r21
    16cc:	4f 91       	pop	r20
    16ce:	3f 91       	pop	r19
    16d0:	2f 91       	pop	r18
    16d2:	1f 91       	pop	r17
    16d4:	0f 91       	pop	r16
    16d6:	ff 90       	pop	r15
    16d8:	ef 90       	pop	r14
    16da:	df 90       	pop	r13
    16dc:	cf 90       	pop	r12
    16de:	bf 90       	pop	r11
    16e0:	af 90       	pop	r10
    16e2:	9f 90       	pop	r9
    16e4:	8f 90       	pop	r8
    16e6:	7f 90       	pop	r7
    16e8:	6f 90       	pop	r6
    16ea:	5f 90       	pop	r5
    16ec:	4f 90       	pop	r4
    16ee:	3f 90       	pop	r3
    16f0:	2f 90       	pop	r2
    16f2:	1f 90       	pop	r1
    16f4:	0f 90       	pop	r0
    16f6:	ff 91       	pop	r31
    16f8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    16fc:	ff 91       	pop	r31
    16fe:	ff bf       	out	0x3f, r31	; 63
    1700:	ff 91       	pop	r31
    1702:	08 95       	ret
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	df 91       	pop	r29
    1708:	cf 91       	pop	r28
    170a:	08 95       	ret

0000170c <vPortYield>:
// 
//
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    170c:	ff 93       	push	r31
    170e:	ff b7       	in	r31, 0x3f	; 63
    1710:	ff 93       	push	r31
    1712:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1716:	ff 93       	push	r31
    1718:	f8 7f       	andi	r31, 0xF8	; 248
    171a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    171e:	0f 92       	push	r0
    1720:	1f 92       	push	r1
    1722:	11 24       	eor	r1, r1
    1724:	2f 92       	push	r2
    1726:	3f 92       	push	r3
    1728:	4f 92       	push	r4
    172a:	5f 92       	push	r5
    172c:	6f 92       	push	r6
    172e:	7f 92       	push	r7
    1730:	8f 92       	push	r8
    1732:	9f 92       	push	r9
    1734:	af 92       	push	r10
    1736:	bf 92       	push	r11
    1738:	cf 92       	push	r12
    173a:	df 92       	push	r13
    173c:	ef 92       	push	r14
    173e:	ff 92       	push	r15
    1740:	0f 93       	push	r16
    1742:	1f 93       	push	r17
    1744:	2f 93       	push	r18
    1746:	3f 93       	push	r19
    1748:	4f 93       	push	r20
    174a:	5f 93       	push	r21
    174c:	6f 93       	push	r22
    174e:	7f 93       	push	r23
    1750:	8f 93       	push	r24
    1752:	9f 93       	push	r25
    1754:	af 93       	push	r26
    1756:	bf 93       	push	r27
    1758:	cf 93       	push	r28
    175a:	df 93       	push	r29
    175c:	ef 93       	push	r30
    175e:	a0 91 70 30 	lds	r26, 0x3070	; 0x803070 <pxCurrentTCB>
    1762:	b0 91 71 30 	lds	r27, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    1766:	0d b6       	in	r0, 0x3d	; 61
    1768:	0d 92       	st	X+, r0
    176a:	0e b6       	in	r0, 0x3e	; 62
    176c:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    176e:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1772:	a0 91 70 30 	lds	r26, 0x3070	; 0x803070 <pxCurrentTCB>
    1776:	b0 91 71 30 	lds	r27, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    177a:	0d 90       	ld	r0, X+
    177c:	0d be       	out	0x3d, r0	; 61
    177e:	0d 90       	ld	r0, X+
    1780:	0e be       	out	0x3e, r0	; 62
    1782:	ef 91       	pop	r30
    1784:	df 91       	pop	r29
    1786:	cf 91       	pop	r28
    1788:	bf 91       	pop	r27
    178a:	af 91       	pop	r26
    178c:	9f 91       	pop	r25
    178e:	8f 91       	pop	r24
    1790:	7f 91       	pop	r23
    1792:	6f 91       	pop	r22
    1794:	5f 91       	pop	r21
    1796:	4f 91       	pop	r20
    1798:	3f 91       	pop	r19
    179a:	2f 91       	pop	r18
    179c:	1f 91       	pop	r17
    179e:	0f 91       	pop	r16
    17a0:	ff 90       	pop	r15
    17a2:	ef 90       	pop	r14
    17a4:	df 90       	pop	r13
    17a6:	cf 90       	pop	r12
    17a8:	bf 90       	pop	r11
    17aa:	af 90       	pop	r10
    17ac:	9f 90       	pop	r9
    17ae:	8f 90       	pop	r8
    17b0:	7f 90       	pop	r7
    17b2:	6f 90       	pop	r6
    17b4:	5f 90       	pop	r5
    17b6:	4f 90       	pop	r4
    17b8:	3f 90       	pop	r3
    17ba:	2f 90       	pop	r2
    17bc:	1f 90       	pop	r1
    17be:	0f 90       	pop	r0
    17c0:	ff 91       	pop	r31
    17c2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    17c6:	ff 91       	pop	r31
    17c8:	ff bf       	out	0x3f, r31	; 63
    17ca:	ff 91       	pop	r31
	asm volatile ( "ret" );
    17cc:	08 95       	ret
	...

000017d0 <portTaskSwitchContext>:
	//-----------------------------------------------------------
	//
	// The task switch is deferred until there is no more nesting.
	//
	void portTaskSwitchContext(signed portBASE_TYPE xSwitchRequired)
	{
    17d0:	1f 93       	push	r17
    17d2:	cf 93       	push	r28
    17d4:	df 93       	push	r29
    17d6:	1f 92       	push	r1
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
    17dc:	89 83       	std	Y+1, r24	; 0x01
		intTaskSwitchPending |= xSwitchRequired;					
    17de:	80 91 3d 31 	lds	r24, 0x313D	; 0x80313d <intTaskSwitchPending>
    17e2:	98 2f       	mov	r25, r24
    17e4:	89 81       	ldd	r24, Y+1	; 0x01
    17e6:	89 2b       	or	r24, r25
    17e8:	80 93 3d 31 	sts	0x313D, r24	; 0x80313d <intTaskSwitchPending>
																
		if(NOT_NESTING() && intTaskSwitchPending)					
    17ec:	80 ea       	ldi	r24, 0xA0	; 160
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	fc 01       	movw	r30, r24
    17f2:	80 81       	ld	r24, Z
    17f4:	81 30       	cpi	r24, 0x01	; 1
    17f6:	61 f0       	breq	.+24     	; 0x1810 <portTaskSwitchContext+0x40>
    17f8:	80 ea       	ldi	r24, 0xA0	; 160
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	fc 01       	movw	r30, r24
    17fe:	80 81       	ld	r24, Z
    1800:	82 30       	cpi	r24, 0x02	; 2
    1802:	31 f0       	breq	.+12     	; 0x1810 <portTaskSwitchContext+0x40>
    1804:	80 ea       	ldi	r24, 0xA0	; 160
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	fc 01       	movw	r30, r24
    180a:	80 81       	ld	r24, Z
    180c:	84 30       	cpi	r24, 0x04	; 4
    180e:	79 f4       	brne	.+30     	; 0x182e <portTaskSwitchContext+0x5e>
    1810:	80 91 3d 31 	lds	r24, 0x313D	; 0x80313d <intTaskSwitchPending>
    1814:	88 23       	and	r24, r24
    1816:	59 f0       	breq	.+22     	; 0x182e <portTaskSwitchContext+0x5e>
		{															
			register unsigned portBASE_TYPE uxSavedPmicCtrlReg; 				
			extern void vTaskSwitchContext(void);   				
																
			// Critical section used, because vTaskSwitchContext handles FreeRTOS internal data structures.
 			uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR(); 
    1818:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_portSetInterruptMaskFromIsr>
    181c:	18 2f       	mov	r17, r24
			intTaskSwitchPending = 0;								
    181e:	10 92 3d 31 	sts	0x313D, r1	; 0x80313d <intTaskSwitchPending>
			vTaskSwitchContext();                   				
    1822:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <vTaskSwitchContext>
			portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedPmicCtrlReg);
    1826:	80 ea       	ldi	r24, 0xA0	; 160
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	fc 01       	movw	r30, r24
    182c:	12 83       	std	Z+2, r17	; 0x02
		}                                          					
	}
    182e:	00 00       	nop
    1830:	0f 90       	pop	r0
    1832:	df 91       	pop	r29
    1834:	cf 91       	pop	r28
    1836:	1f 91       	pop	r17
    1838:	08 95       	ret

0000183a <portTaskIncrementTick>:
	// This routine is only an indirect call to vTaskIncrementTick because
	// a local variable is necessary. Local variables cannot be used directly
	// in a naked isr because of the lack of the frame pointer.
	//
	static void portTaskIncrementTick( void )
	{
    183a:	1f 93       	push	r17
    183c:	cf 93       	push	r28
    183e:	df 93       	push	r29
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
		register unsigned portBASE_TYPE uxSavedPmicCtrlReg;

 		uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR();
    1844:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_portSetInterruptMaskFromIsr>
    1848:	18 2f       	mov	r17, r24
		xTaskIncrementTick();
    184a:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <xTaskIncrementTick>
 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedPmicCtrlReg );
    184e:	80 ea       	ldi	r24, 0xA0	; 160
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	fc 01       	movw	r30, r24
    1854:	12 83       	std	Z+2, r17	; 0x02
	}
    1856:	00 00       	nop
    1858:	df 91       	pop	r29
    185a:	cf 91       	pop	r28
    185c:	1f 91       	pop	r17
    185e:	08 95       	ret

00001860 <__vector_14>:
	// the context is saved at the start of vPortYieldFromTick().  The tick
	// count is incremented after the context is saved.
	//
	ISR(TCC0_OVF_vect, ISR_NAKED)
	{
		portSTART_ISR();
    1860:	ff 93       	push	r31
    1862:	ff b7       	in	r31, 0x3f	; 63
    1864:	ff 93       	push	r31
    1866:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    186a:	ff 93       	push	r31
    186c:	f8 7f       	andi	r31, 0xF8	; 248
    186e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1872:	0f 92       	push	r0
    1874:	1f 92       	push	r1
    1876:	11 24       	eor	r1, r1
    1878:	2f 92       	push	r2
    187a:	3f 92       	push	r3
    187c:	4f 92       	push	r4
    187e:	5f 92       	push	r5
    1880:	6f 92       	push	r6
    1882:	7f 92       	push	r7
    1884:	8f 92       	push	r8
    1886:	9f 92       	push	r9
    1888:	af 92       	push	r10
    188a:	bf 92       	push	r11
    188c:	cf 92       	push	r12
    188e:	df 92       	push	r13
    1890:	ef 92       	push	r14
    1892:	ff 92       	push	r15
    1894:	0f 93       	push	r16
    1896:	1f 93       	push	r17
    1898:	2f 93       	push	r18
    189a:	3f 93       	push	r19
    189c:	4f 93       	push	r20
    189e:	5f 93       	push	r21
    18a0:	6f 93       	push	r22
    18a2:	7f 93       	push	r23
    18a4:	8f 93       	push	r24
    18a6:	9f 93       	push	r25
    18a8:	af 93       	push	r26
    18aa:	bf 93       	push	r27
    18ac:	cf 93       	push	r28
    18ae:	df 93       	push	r29
    18b0:	ef 93       	push	r30
    18b2:	a0 91 70 30 	lds	r26, 0x3070	; 0x803070 <pxCurrentTCB>
    18b6:	b0 91 71 30 	lds	r27, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    18ba:	0d b6       	in	r0, 0x3d	; 61
    18bc:	0d 92       	st	X+, r0
    18be:	0e b6       	in	r0, 0x3e	; 62
    18c0:	0d 92       	st	X+, r0
		portTaskIncrementTick();
    18c2:	0e 94 1d 0c 	call	0x183a	; 0x183a <portTaskIncrementTick>
		//always try a task switch, but only if on kernel interrupt level
		portEND_SWITCHING_ISR(pdTRUE); 
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <portTaskSwitchContext>
    18cc:	a0 91 70 30 	lds	r26, 0x3070	; 0x803070 <pxCurrentTCB>
    18d0:	b0 91 71 30 	lds	r27, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    18d4:	0d 90       	ld	r0, X+
    18d6:	0d be       	out	0x3d, r0	; 61
    18d8:	0d 90       	ld	r0, X+
    18da:	0e be       	out	0x3e, r0	; 62
    18dc:	ef 91       	pop	r30
    18de:	df 91       	pop	r29
    18e0:	cf 91       	pop	r28
    18e2:	bf 91       	pop	r27
    18e4:	af 91       	pop	r26
    18e6:	9f 91       	pop	r25
    18e8:	8f 91       	pop	r24
    18ea:	7f 91       	pop	r23
    18ec:	6f 91       	pop	r22
    18ee:	5f 91       	pop	r21
    18f0:	4f 91       	pop	r20
    18f2:	3f 91       	pop	r19
    18f4:	2f 91       	pop	r18
    18f6:	1f 91       	pop	r17
    18f8:	0f 91       	pop	r16
    18fa:	ff 90       	pop	r15
    18fc:	ef 90       	pop	r14
    18fe:	df 90       	pop	r13
    1900:	cf 90       	pop	r12
    1902:	bf 90       	pop	r11
    1904:	af 90       	pop	r10
    1906:	9f 90       	pop	r9
    1908:	8f 90       	pop	r8
    190a:	7f 90       	pop	r7
    190c:	6f 90       	pop	r6
    190e:	5f 90       	pop	r5
    1910:	4f 90       	pop	r4
    1912:	3f 90       	pop	r3
    1914:	2f 90       	pop	r2
    1916:	1f 90       	pop	r1
    1918:	0f 90       	pop	r0
    191a:	ff 91       	pop	r31
    191c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1920:	ff 91       	pop	r31
    1922:	ff bf       	out	0x3f, r31	; 63
    1924:	ff 91       	pop	r31
    1926:	18 95       	reti
	...

0000192a <prvSetupTimerInterrupt>:
//-----------------------------------------------------------
//
// Setup of 16bit timer C0 to generate a tick interrupt in case of overflow.
//
static void prvSetupTimerInterrupt( void )
{
    192a:	cf 93       	push	r28
    192c:	df 93       	push	r29
    192e:	00 d0       	rcall	.+0      	; 0x1930 <prvSetupTimerInterrupt+0x6>
    1930:	1f 92       	push	r1
    1932:	cd b7       	in	r28, 0x3d	; 61
    1934:	de b7       	in	r29, 0x3e	; 62

	unsigned portLONG ulOvfMatch;

	ulOvfMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	9d e7       	ldi	r25, 0x7D	; 125
    193a:	a0 e0       	ldi	r26, 0x00	; 0
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	89 83       	std	Y+1, r24	; 0x01
    1940:	9a 83       	std	Y+2, r25	; 0x02
    1942:	ab 83       	std	Y+3, r26	; 0x03
    1944:	bc 83       	std	Y+4, r27	; 0x04

	// We only have 16bits so have to scale to get our required tick rate.
	ulOvfMatch /= portCLOCK_PRESCALER_TIMER0;
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	9a 81       	ldd	r25, Y+2	; 0x02
    194a:	ab 81       	ldd	r26, Y+3	; 0x03
    194c:	bc 81       	ldd	r27, Y+4	; 0x04
    194e:	68 94       	set
    1950:	15 f8       	bld	r1, 5
    1952:	b6 95       	lsr	r27
    1954:	a7 95       	ror	r26
    1956:	97 95       	ror	r25
    1958:	87 95       	ror	r24
    195a:	16 94       	lsr	r1
    195c:	d1 f7       	brne	.-12     	; 0x1952 <prvSetupTimerInterrupt+0x28>
    195e:	89 83       	std	Y+1, r24	; 0x01
    1960:	9a 83       	std	Y+2, r25	; 0x02
    1962:	ab 83       	std	Y+3, r26	; 0x03
    1964:	bc 83       	std	Y+4, r27	; 0x04

	// Adjust for correct value. (because overflow clear if CNT > PER)
	ulOvfMatch -= ( unsigned portLONG ) 1;
    1966:	89 81       	ldd	r24, Y+1	; 0x01
    1968:	9a 81       	ldd	r25, Y+2	; 0x02
    196a:	ab 81       	ldd	r26, Y+3	; 0x03
    196c:	bc 81       	ldd	r27, Y+4	; 0x04
    196e:	01 97       	sbiw	r24, 0x01	; 1
    1970:	a1 09       	sbc	r26, r1
    1972:	b1 09       	sbc	r27, r1
    1974:	89 83       	std	Y+1, r24	; 0x01
    1976:	9a 83       	std	Y+2, r25	; 0x02
    1978:	ab 83       	std	Y+3, r26	; 0x03
    197a:	bc 83       	std	Y+4, r27	; 0x04

	// Setup overflow value
	TC_SetPeriod( &TCC0, ulOvfMatch);
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	98 e0       	ldi	r25, 0x08	; 8
    1980:	29 81       	ldd	r18, Y+1	; 0x01
    1982:	3a 81       	ldd	r19, Y+2	; 0x02
    1984:	fc 01       	movw	r30, r24
    1986:	26 a3       	std	Z+38, r18	; 0x26
    1988:	37 a3       	std	Z+39, r19	; 0x27
		
	// Setup clock source and compare match behaviour.
	TC0_ConfigClockSource( &TCC0, TC_CLKSEL_DIV64_gc);
    198a:	65 e0       	ldi	r22, 0x05	; 5
    198c:	80 e0       	ldi	r24, 0x00	; 0
    198e:	98 e0       	ldi	r25, 0x08	; 8
    1990:	0e 94 c2 03 	call	0x784	; 0x784 <TC0_ConfigClockSource>

	// Enable the interrupt - this is okay as interrupts are currently globally disabled.
	// The tick interrupt may run in one of the three levels.
#if   configKERNEL_INTERRUPT_PRIORITY == 0
	TC0_SetOverflowIntLevel( &TCC0, TC_OVFINTLVL_LO_gc);	//low interrupt priority
    1994:	61 e0       	ldi	r22, 0x01	; 1
    1996:	80 e0       	ldi	r24, 0x00	; 0
    1998:	98 e0       	ldi	r25, 0x08	; 8
    199a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <TC0_SetOverflowIntLevel>
#elif configKERNEL_INTERRUPT_PRIORITY == 1
	TC0_SetOverflowIntLevel( &TCC0, TC_OVFINTLVL_MED_gc);	//medium interrupt priority
#elif configKERNEL_INTERRUPT_PRIORITY == 2
	TC0_SetOverflowIntLevel( &TCC0, TC_OVFINTLVL_HI_gc);	//high interrupt priority
#endif
}
    199e:	00 00       	nop
    19a0:	24 96       	adiw	r28, 0x04	; 4
    19a2:	cd bf       	out	0x3d, r28	; 61
    19a4:	de bf       	out	0x3e, r29	; 62
    19a6:	df 91       	pop	r29
    19a8:	cf 91       	pop	r28
    19aa:	08 95       	ret

000019ac <xQueueGenericReset>:
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
    19ac:	cf 93       	push	r28
    19ae:	df 93       	push	r29
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
    19b4:	25 97       	sbiw	r28, 0x05	; 5
    19b6:	cd bf       	out	0x3d, r28	; 61
    19b8:	de bf       	out	0x3e, r29	; 62
    19ba:	8b 83       	std	Y+3, r24	; 0x03
    19bc:	9c 83       	std	Y+4, r25	; 0x04
    19be:	6d 83       	std	Y+5, r22	; 0x05
    19c0:	8b 81       	ldd	r24, Y+3	; 0x03
    19c2:	9c 81       	ldd	r25, Y+4	; 0x04
    19c4:	89 83       	std	Y+1, r24	; 0x01
    19c6:	9a 83       	std	Y+2, r25	; 0x02
    19c8:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    19cc:	ff 93       	push	r31
    19ce:	f8 7f       	andi	r31, 0xF8	; 248
    19d0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
    19d6:	9a 81       	ldd	r25, Y+2	; 0x02
    19d8:	fc 01       	movw	r30, r24
    19da:	80 81       	ld	r24, Z
    19dc:	91 81       	ldd	r25, Z+1	; 0x01
    19de:	29 81       	ldd	r18, Y+1	; 0x01
    19e0:	3a 81       	ldd	r19, Y+2	; 0x02
    19e2:	f9 01       	movw	r30, r18
    19e4:	27 8d       	ldd	r18, Z+31	; 0x1f
    19e6:	42 2f       	mov	r20, r18
    19e8:	50 e0       	ldi	r21, 0x00	; 0
    19ea:	29 81       	ldd	r18, Y+1	; 0x01
    19ec:	3a 81       	ldd	r19, Y+2	; 0x02
    19ee:	f9 01       	movw	r30, r18
    19f0:	20 a1       	ldd	r18, Z+32	; 0x20
    19f2:	22 2f       	mov	r18, r18
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	42 9f       	mul	r20, r18
    19f8:	b0 01       	movw	r22, r0
    19fa:	43 9f       	mul	r20, r19
    19fc:	70 0d       	add	r23, r0
    19fe:	52 9f       	mul	r21, r18
    1a00:	70 0d       	add	r23, r0
    1a02:	11 24       	eor	r1, r1
    1a04:	9b 01       	movw	r18, r22
    1a06:	28 0f       	add	r18, r24
    1a08:	39 1f       	adc	r19, r25
    1a0a:	89 81       	ldd	r24, Y+1	; 0x01
    1a0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0e:	fc 01       	movw	r30, r24
    1a10:	22 83       	std	Z+2, r18	; 0x02
    1a12:	33 83       	std	Z+3, r19	; 0x03
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
    1a16:	9a 81       	ldd	r25, Y+2	; 0x02
    1a18:	fc 01       	movw	r30, r24
    1a1a:	16 8e       	std	Z+30, r1	; 0x1e
    1a1c:	89 81       	ldd	r24, Y+1	; 0x01
    1a1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a20:	fc 01       	movw	r30, r24
    1a22:	20 81       	ld	r18, Z
    1a24:	31 81       	ldd	r19, Z+1	; 0x01
    1a26:	89 81       	ldd	r24, Y+1	; 0x01
    1a28:	9a 81       	ldd	r25, Y+2	; 0x02
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	24 83       	std	Z+4, r18	; 0x04
    1a2e:	35 83       	std	Z+5, r19	; 0x05
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
    1a32:	9a 81       	ldd	r25, Y+2	; 0x02
    1a34:	fc 01       	movw	r30, r24
    1a36:	80 81       	ld	r24, Z
    1a38:	91 81       	ldd	r25, Z+1	; 0x01
    1a3a:	29 81       	ldd	r18, Y+1	; 0x01
    1a3c:	3a 81       	ldd	r19, Y+2	; 0x02
    1a3e:	f9 01       	movw	r30, r18
    1a40:	27 8d       	ldd	r18, Z+31	; 0x1f
    1a42:	22 2f       	mov	r18, r18
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	a9 01       	movw	r20, r18
    1a48:	41 50       	subi	r20, 0x01	; 1
    1a4a:	51 09       	sbc	r21, r1
    1a4c:	29 81       	ldd	r18, Y+1	; 0x01
    1a4e:	3a 81       	ldd	r19, Y+2	; 0x02
    1a50:	f9 01       	movw	r30, r18
    1a52:	20 a1       	ldd	r18, Z+32	; 0x20
    1a54:	22 2f       	mov	r18, r18
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	42 9f       	mul	r20, r18
    1a5a:	b0 01       	movw	r22, r0
    1a5c:	43 9f       	mul	r20, r19
    1a5e:	70 0d       	add	r23, r0
    1a60:	52 9f       	mul	r21, r18
    1a62:	70 0d       	add	r23, r0
    1a64:	11 24       	eor	r1, r1
    1a66:	9b 01       	movw	r18, r22
    1a68:	28 0f       	add	r18, r24
    1a6a:	39 1f       	adc	r19, r25
    1a6c:	89 81       	ldd	r24, Y+1	; 0x01
    1a6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a70:	fc 01       	movw	r30, r24
    1a72:	26 83       	std	Z+6, r18	; 0x06
    1a74:	37 83       	std	Z+7, r19	; 0x07
    1a76:	89 81       	ldd	r24, Y+1	; 0x01
    1a78:	9a 81       	ldd	r25, Y+2	; 0x02
    1a7a:	2f ef       	ldi	r18, 0xFF	; 255
    1a7c:	fc 01       	movw	r30, r24
    1a7e:	21 a3       	std	Z+33, r18	; 0x21
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	9a 81       	ldd	r25, Y+2	; 0x02
    1a84:	2f ef       	ldi	r18, 0xFF	; 255
    1a86:	fc 01       	movw	r30, r24
    1a88:	22 a3       	std	Z+34, r18	; 0x22
    1a8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8c:	88 23       	and	r24, r24
    1a8e:	81 f4       	brne	.+32     	; 0x1ab0 <xQueueGenericReset+0x104>
    1a90:	89 81       	ldd	r24, Y+1	; 0x01
    1a92:	9a 81       	ldd	r25, Y+2	; 0x02
    1a94:	fc 01       	movw	r30, r24
    1a96:	80 85       	ldd	r24, Z+8	; 0x08
    1a98:	88 23       	and	r24, r24
    1a9a:	a1 f0       	breq	.+40     	; 0x1ac4 <xQueueGenericReset+0x118>
    1a9c:	89 81       	ldd	r24, Y+1	; 0x01
    1a9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa0:	08 96       	adiw	r24, 0x08	; 8
    1aa2:	0e 94 38 18 	call	0x3070	; 0x3070 <xTaskRemoveFromEventList>
    1aa6:	88 23       	and	r24, r24
    1aa8:	69 f0       	breq	.+26     	; 0x1ac4 <xQueueGenericReset+0x118>
    1aaa:	0e 94 86 0b 	call	0x170c	; 0x170c <vPortYield>
    1aae:	0a c0       	rjmp	.+20     	; 0x1ac4 <xQueueGenericReset+0x118>
    1ab0:	89 81       	ldd	r24, Y+1	; 0x01
    1ab2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab4:	08 96       	adiw	r24, 0x08	; 8
    1ab6:	0e 94 ef 07 	call	0xfde	; 0xfde <vListInitialise>
    1aba:	89 81       	ldd	r24, Y+1	; 0x01
    1abc:	9a 81       	ldd	r25, Y+2	; 0x02
    1abe:	43 96       	adiw	r24, 0x13	; 19
    1ac0:	0e 94 ef 07 	call	0xfde	; 0xfde <vListInitialise>
    1ac4:	ff 91       	pop	r31
    1ac6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	25 96       	adiw	r28, 0x05	; 5
    1ace:	cd bf       	out	0x3d, r28	; 61
    1ad0:	de bf       	out	0x3e, r29	; 62
    1ad2:	df 91       	pop	r29
    1ad4:	cf 91       	pop	r28
    1ad6:	08 95       	ret

00001ad8 <xQueueGenericCreate>:
    1ad8:	0f 93       	push	r16
    1ada:	1f 93       	push	r17
    1adc:	cf 93       	push	r28
    1ade:	df 93       	push	r29
    1ae0:	cd b7       	in	r28, 0x3d	; 61
    1ae2:	de b7       	in	r29, 0x3e	; 62
    1ae4:	29 97       	sbiw	r28, 0x09	; 9
    1ae6:	cd bf       	out	0x3d, r28	; 61
    1ae8:	de bf       	out	0x3e, r29	; 62
    1aea:	8f 83       	std	Y+7, r24	; 0x07
    1aec:	68 87       	std	Y+8, r22	; 0x08
    1aee:	49 87       	std	Y+9, r20	; 0x09
    1af0:	88 85       	ldd	r24, Y+8	; 0x08
    1af2:	88 23       	and	r24, r24
    1af4:	19 f4       	brne	.+6      	; 0x1afc <xQueueGenericCreate+0x24>
    1af6:	19 82       	std	Y+1, r1	; 0x01
    1af8:	1a 82       	std	Y+2, r1	; 0x02
    1afa:	0f c0       	rjmp	.+30     	; 0x1b1a <xQueueGenericCreate+0x42>
    1afc:	8f 81       	ldd	r24, Y+7	; 0x07
    1afe:	48 2f       	mov	r20, r24
    1b00:	50 e0       	ldi	r21, 0x00	; 0
    1b02:	88 85       	ldd	r24, Y+8	; 0x08
    1b04:	28 2f       	mov	r18, r24
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	42 9f       	mul	r20, r18
    1b0a:	c0 01       	movw	r24, r0
    1b0c:	43 9f       	mul	r20, r19
    1b0e:	90 0d       	add	r25, r0
    1b10:	52 9f       	mul	r21, r18
    1b12:	90 0d       	add	r25, r0
    1b14:	11 24       	eor	r1, r1
    1b16:	89 83       	std	Y+1, r24	; 0x01
    1b18:	9a 83       	std	Y+2, r25	; 0x02
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b1e:	85 96       	adiw	r24, 0x25	; 37
    1b20:	0e 94 9d 07 	call	0xf3a	; 0xf3a <pvPortMalloc>
    1b24:	8b 83       	std	Y+3, r24	; 0x03
    1b26:	9c 83       	std	Y+4, r25	; 0x04
    1b28:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2c:	89 2b       	or	r24, r25
    1b2e:	81 f0       	breq	.+32     	; 0x1b50 <xQueueGenericCreate+0x78>
    1b30:	8b 81       	ldd	r24, Y+3	; 0x03
    1b32:	9c 81       	ldd	r25, Y+4	; 0x04
    1b34:	85 96       	adiw	r24, 0x25	; 37
    1b36:	8d 83       	std	Y+5, r24	; 0x05
    1b38:	9e 83       	std	Y+6, r25	; 0x06
    1b3a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b3c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b40:	9e 81       	ldd	r25, Y+6	; 0x06
    1b42:	89 01       	movw	r16, r18
    1b44:	29 85       	ldd	r18, Y+9	; 0x09
    1b46:	ac 01       	movw	r20, r24
    1b48:	68 85       	ldd	r22, Y+8	; 0x08
    1b4a:	8f 81       	ldd	r24, Y+7	; 0x07
    1b4c:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <prvInitialiseNewQueue>
    1b50:	8b 81       	ldd	r24, Y+3	; 0x03
    1b52:	9c 81       	ldd	r25, Y+4	; 0x04
    1b54:	29 96       	adiw	r28, 0x09	; 9
    1b56:	cd bf       	out	0x3d, r28	; 61
    1b58:	de bf       	out	0x3e, r29	; 62
    1b5a:	df 91       	pop	r29
    1b5c:	cf 91       	pop	r28
    1b5e:	1f 91       	pop	r17
    1b60:	0f 91       	pop	r16
    1b62:	08 95       	ret

00001b64 <prvInitialiseNewQueue>:
    1b64:	0f 93       	push	r16
    1b66:	1f 93       	push	r17
    1b68:	cf 93       	push	r28
    1b6a:	df 93       	push	r29
    1b6c:	cd b7       	in	r28, 0x3d	; 61
    1b6e:	de b7       	in	r29, 0x3e	; 62
    1b70:	27 97       	sbiw	r28, 0x07	; 7
    1b72:	cd bf       	out	0x3d, r28	; 61
    1b74:	de bf       	out	0x3e, r29	; 62
    1b76:	89 83       	std	Y+1, r24	; 0x01
    1b78:	6a 83       	std	Y+2, r22	; 0x02
    1b7a:	4b 83       	std	Y+3, r20	; 0x03
    1b7c:	5c 83       	std	Y+4, r21	; 0x04
    1b7e:	2d 83       	std	Y+5, r18	; 0x05
    1b80:	0e 83       	std	Y+6, r16	; 0x06
    1b82:	1f 83       	std	Y+7, r17	; 0x07
    1b84:	8a 81       	ldd	r24, Y+2	; 0x02
    1b86:	88 23       	and	r24, r24
    1b88:	41 f4       	brne	.+16     	; 0x1b9a <prvInitialiseNewQueue+0x36>
    1b8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b8c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b8e:	2e 81       	ldd	r18, Y+6	; 0x06
    1b90:	3f 81       	ldd	r19, Y+7	; 0x07
    1b92:	fc 01       	movw	r30, r24
    1b94:	20 83       	st	Z, r18
    1b96:	31 83       	std	Z+1, r19	; 0x01
    1b98:	07 c0       	rjmp	.+14     	; 0x1ba8 <prvInitialiseNewQueue+0x44>
    1b9a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b9c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b9e:	2b 81       	ldd	r18, Y+3	; 0x03
    1ba0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ba2:	fc 01       	movw	r30, r24
    1ba4:	20 83       	st	Z, r18
    1ba6:	31 83       	std	Z+1, r19	; 0x01
    1ba8:	8e 81       	ldd	r24, Y+6	; 0x06
    1baa:	9f 81       	ldd	r25, Y+7	; 0x07
    1bac:	29 81       	ldd	r18, Y+1	; 0x01
    1bae:	fc 01       	movw	r30, r24
    1bb0:	27 8f       	std	Z+31, r18	; 0x1f
    1bb2:	8e 81       	ldd	r24, Y+6	; 0x06
    1bb4:	9f 81       	ldd	r25, Y+7	; 0x07
    1bb6:	2a 81       	ldd	r18, Y+2	; 0x02
    1bb8:	fc 01       	movw	r30, r24
    1bba:	20 a3       	std	Z+32, r18	; 0x20
    1bbc:	8e 81       	ldd	r24, Y+6	; 0x06
    1bbe:	9f 81       	ldd	r25, Y+7	; 0x07
    1bc0:	61 e0       	ldi	r22, 0x01	; 1
    1bc2:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <xQueueGenericReset>
    1bc6:	8e 81       	ldd	r24, Y+6	; 0x06
    1bc8:	9f 81       	ldd	r25, Y+7	; 0x07
    1bca:	2d 81       	ldd	r18, Y+5	; 0x05
    1bcc:	fc 01       	movw	r30, r24
    1bce:	24 a3       	std	Z+36, r18	; 0x24
    1bd0:	00 00       	nop
    1bd2:	27 96       	adiw	r28, 0x07	; 7
    1bd4:	cd bf       	out	0x3d, r28	; 61
    1bd6:	de bf       	out	0x3e, r29	; 62
    1bd8:	df 91       	pop	r29
    1bda:	cf 91       	pop	r28
    1bdc:	1f 91       	pop	r17
    1bde:	0f 91       	pop	r16
    1be0:	08 95       	ret

00001be2 <xQueueGenericSend>:
    1be2:	0f 93       	push	r16
    1be4:	cf 93       	push	r28
    1be6:	df 93       	push	r29
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
    1bec:	62 97       	sbiw	r28, 0x12	; 18
    1bee:	cd bf       	out	0x3d, r28	; 61
    1bf0:	de bf       	out	0x3e, r29	; 62
    1bf2:	8a 87       	std	Y+10, r24	; 0x0a
    1bf4:	9b 87       	std	Y+11, r25	; 0x0b
    1bf6:	6c 87       	std	Y+12, r22	; 0x0c
    1bf8:	7d 87       	std	Y+13, r23	; 0x0d
    1bfa:	2e 87       	std	Y+14, r18	; 0x0e
    1bfc:	3f 87       	std	Y+15, r19	; 0x0f
    1bfe:	48 8b       	std	Y+16, r20	; 0x10
    1c00:	59 8b       	std	Y+17, r21	; 0x11
    1c02:	0a 8b       	std	Y+18, r16	; 0x12
    1c04:	19 82       	std	Y+1, r1	; 0x01
    1c06:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c08:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c0a:	8a 83       	std	Y+2, r24	; 0x02
    1c0c:	9b 83       	std	Y+3, r25	; 0x03
    1c0e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1c12:	ff 93       	push	r31
    1c14:	f8 7f       	andi	r31, 0xF8	; 248
    1c16:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c1e:	fc 01       	movw	r30, r24
    1c20:	26 8d       	ldd	r18, Z+30	; 0x1e
    1c22:	8a 81       	ldd	r24, Y+2	; 0x02
    1c24:	9b 81       	ldd	r25, Y+3	; 0x03
    1c26:	fc 01       	movw	r30, r24
    1c28:	87 8d       	ldd	r24, Z+31	; 0x1f
    1c2a:	28 17       	cp	r18, r24
    1c2c:	18 f0       	brcs	.+6      	; 0x1c34 <xQueueGenericSend+0x52>
    1c2e:	8a 89       	ldd	r24, Y+18	; 0x12
    1c30:	82 30       	cpi	r24, 0x02	; 2
    1c32:	19 f5       	brne	.+70     	; 0x1c7a <xQueueGenericSend+0x98>
    1c34:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c36:	3d 85       	ldd	r19, Y+13	; 0x0d
    1c38:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c3c:	4a 89       	ldd	r20, Y+18	; 0x12
    1c3e:	b9 01       	movw	r22, r18
    1c40:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <prvCopyDataToQueue>
    1c44:	8c 83       	std	Y+4, r24	; 0x04
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	9b 81       	ldd	r25, Y+3	; 0x03
    1c4a:	fc 01       	movw	r30, r24
    1c4c:	83 89       	ldd	r24, Z+19	; 0x13
    1c4e:	88 23       	and	r24, r24
    1c50:	51 f0       	breq	.+20     	; 0x1c66 <xQueueGenericSend+0x84>
    1c52:	8a 81       	ldd	r24, Y+2	; 0x02
    1c54:	9b 81       	ldd	r25, Y+3	; 0x03
    1c56:	43 96       	adiw	r24, 0x13	; 19
    1c58:	0e 94 38 18 	call	0x3070	; 0x3070 <xTaskRemoveFromEventList>
    1c5c:	88 23       	and	r24, r24
    1c5e:	41 f0       	breq	.+16     	; 0x1c70 <xQueueGenericSend+0x8e>
    1c60:	0e 94 86 0b 	call	0x170c	; 0x170c <vPortYield>
    1c64:	05 c0       	rjmp	.+10     	; 0x1c70 <xQueueGenericSend+0x8e>
    1c66:	8c 81       	ldd	r24, Y+4	; 0x04
    1c68:	88 23       	and	r24, r24
    1c6a:	11 f0       	breq	.+4      	; 0x1c70 <xQueueGenericSend+0x8e>
    1c6c:	0e 94 86 0b 	call	0x170c	; 0x170c <vPortYield>
    1c70:	ff 91       	pop	r31
    1c72:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	6f c0       	rjmp	.+222    	; 0x1d58 <xQueueGenericSend+0x176>
    1c7a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c7c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c7e:	a8 89       	ldd	r26, Y+16	; 0x10
    1c80:	b9 89       	ldd	r27, Y+17	; 0x11
    1c82:	89 2b       	or	r24, r25
    1c84:	8a 2b       	or	r24, r26
    1c86:	8b 2b       	or	r24, r27
    1c88:	29 f4       	brne	.+10     	; 0x1c94 <xQueueGenericSend+0xb2>
    1c8a:	ff 91       	pop	r31
    1c8c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	62 c0       	rjmp	.+196    	; 0x1d58 <xQueueGenericSend+0x176>
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
    1c96:	88 23       	and	r24, r24
    1c98:	31 f4       	brne	.+12     	; 0x1ca6 <xQueueGenericSend+0xc4>
    1c9a:	ce 01       	movw	r24, r28
    1c9c:	05 96       	adiw	r24, 0x05	; 5
    1c9e:	0e 94 03 19 	call	0x3206	; 0x3206 <vTaskInternalSetTimeOutState>
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	89 83       	std	Y+1, r24	; 0x01
    1ca6:	ff 91       	pop	r31
    1ca8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1cac:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <vTaskSuspendAll>
    1cb0:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1cb4:	ff 93       	push	r31
    1cb6:	f8 7f       	andi	r31, 0xF8	; 248
    1cb8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbe:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc0:	fc 01       	movw	r30, r24
    1cc2:	81 a1       	ldd	r24, Z+33	; 0x21
    1cc4:	8f 3f       	cpi	r24, 0xFF	; 255
    1cc6:	21 f4       	brne	.+8      	; 0x1cd0 <xQueueGenericSend+0xee>
    1cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cca:	9b 81       	ldd	r25, Y+3	; 0x03
    1ccc:	fc 01       	movw	r30, r24
    1cce:	11 a2       	std	Z+33, r1	; 0x21
    1cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd2:	9b 81       	ldd	r25, Y+3	; 0x03
    1cd4:	fc 01       	movw	r30, r24
    1cd6:	82 a1       	ldd	r24, Z+34	; 0x22
    1cd8:	8f 3f       	cpi	r24, 0xFF	; 255
    1cda:	21 f4       	brne	.+8      	; 0x1ce4 <xQueueGenericSend+0x102>
    1cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cde:	9b 81       	ldd	r25, Y+3	; 0x03
    1ce0:	fc 01       	movw	r30, r24
    1ce2:	12 a2       	std	Z+34, r1	; 0x22
    1ce4:	ff 91       	pop	r31
    1ce6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1cea:	9e 01       	movw	r18, r28
    1cec:	22 5f       	subi	r18, 0xF2	; 242
    1cee:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf0:	ce 01       	movw	r24, r28
    1cf2:	05 96       	adiw	r24, 0x05	; 5
    1cf4:	b9 01       	movw	r22, r18
    1cf6:	0e 94 26 19 	call	0x324c	; 0x324c <xTaskCheckForTimeOut>
    1cfa:	88 23       	and	r24, r24
    1cfc:	31 f5       	brne	.+76     	; 0x1d4a <xQueueGenericSend+0x168>
    1cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1d00:	9b 81       	ldd	r25, Y+3	; 0x03
    1d02:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <prvIsQueueFull>
    1d06:	88 23       	and	r24, r24
    1d08:	c9 f0       	breq	.+50     	; 0x1d3c <xQueueGenericSend+0x15a>
    1d0a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d0c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d0e:	a8 89       	ldd	r26, Y+16	; 0x10
    1d10:	b9 89       	ldd	r27, Y+17	; 0x11
    1d12:	2a 81       	ldd	r18, Y+2	; 0x02
    1d14:	3b 81       	ldd	r19, Y+3	; 0x03
    1d16:	28 5f       	subi	r18, 0xF8	; 248
    1d18:	3f 4f       	sbci	r19, 0xFF	; 255
    1d1a:	ac 01       	movw	r20, r24
    1d1c:	bd 01       	movw	r22, r26
    1d1e:	c9 01       	movw	r24, r18
    1d20:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <vTaskPlaceOnEventList>
    1d24:	8a 81       	ldd	r24, Y+2	; 0x02
    1d26:	9b 81       	ldd	r25, Y+3	; 0x03
    1d28:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <prvUnlockQueue>
    1d2c:	0e 94 ff 14 	call	0x29fe	; 0x29fe <xTaskResumeAll>
    1d30:	88 23       	and	r24, r24
    1d32:	09 f0       	breq	.+2      	; 0x1d36 <xQueueGenericSend+0x154>
    1d34:	6c cf       	rjmp	.-296    	; 0x1c0e <xQueueGenericSend+0x2c>
    1d36:	0e 94 86 0b 	call	0x170c	; 0x170c <vPortYield>
    1d3a:	69 cf       	rjmp	.-302    	; 0x1c0e <xQueueGenericSend+0x2c>
    1d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d40:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <prvUnlockQueue>
    1d44:	0e 94 ff 14 	call	0x29fe	; 0x29fe <xTaskResumeAll>
    1d48:	62 cf       	rjmp	.-316    	; 0x1c0e <xQueueGenericSend+0x2c>
    1d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d4e:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <prvUnlockQueue>
    1d52:	0e 94 ff 14 	call	0x29fe	; 0x29fe <xTaskResumeAll>
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	62 96       	adiw	r28, 0x12	; 18
    1d5a:	cd bf       	out	0x3d, r28	; 61
    1d5c:	de bf       	out	0x3e, r29	; 62
    1d5e:	df 91       	pop	r29
    1d60:	cf 91       	pop	r28
    1d62:	0f 91       	pop	r16
    1d64:	08 95       	ret

00001d66 <xQueueGenericSendFromISR>:
    1d66:	cf 93       	push	r28
    1d68:	df 93       	push	r29
    1d6a:	cd b7       	in	r28, 0x3d	; 61
    1d6c:	de b7       	in	r29, 0x3e	; 62
    1d6e:	2c 97       	sbiw	r28, 0x0c	; 12
    1d70:	cd bf       	out	0x3d, r28	; 61
    1d72:	de bf       	out	0x3e, r29	; 62
    1d74:	8e 83       	std	Y+6, r24	; 0x06
    1d76:	9f 83       	std	Y+7, r25	; 0x07
    1d78:	68 87       	std	Y+8, r22	; 0x08
    1d7a:	79 87       	std	Y+9, r23	; 0x09
    1d7c:	4a 87       	std	Y+10, r20	; 0x0a
    1d7e:	5b 87       	std	Y+11, r21	; 0x0b
    1d80:	2c 87       	std	Y+12, r18	; 0x0c
    1d82:	8e 81       	ldd	r24, Y+6	; 0x06
    1d84:	9f 81       	ldd	r25, Y+7	; 0x07
    1d86:	8a 83       	std	Y+2, r24	; 0x02
    1d88:	9b 83       	std	Y+3, r25	; 0x03
    1d8a:	0e 94 5e 09 	call	0x12bc	; 0x12bc <_portSetInterruptMaskFromIsr>
    1d8e:	8c 83       	std	Y+4, r24	; 0x04
    1d90:	8a 81       	ldd	r24, Y+2	; 0x02
    1d92:	9b 81       	ldd	r25, Y+3	; 0x03
    1d94:	fc 01       	movw	r30, r24
    1d96:	26 8d       	ldd	r18, Z+30	; 0x1e
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d9c:	fc 01       	movw	r30, r24
    1d9e:	87 8d       	ldd	r24, Z+31	; 0x1f
    1da0:	28 17       	cp	r18, r24
    1da2:	18 f0       	brcs	.+6      	; 0x1daa <xQueueGenericSendFromISR+0x44>
    1da4:	8c 85       	ldd	r24, Y+12	; 0x0c
    1da6:	82 30       	cpi	r24, 0x02	; 2
    1da8:	89 f5       	brne	.+98     	; 0x1e0c <xQueueGenericSendFromISR+0xa6>
    1daa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dac:	9b 81       	ldd	r25, Y+3	; 0x03
    1dae:	fc 01       	movw	r30, r24
    1db0:	82 a1       	ldd	r24, Z+34	; 0x22
    1db2:	8d 83       	std	Y+5, r24	; 0x05
    1db4:	28 85       	ldd	r18, Y+8	; 0x08
    1db6:	39 85       	ldd	r19, Y+9	; 0x09
    1db8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dba:	9b 81       	ldd	r25, Y+3	; 0x03
    1dbc:	4c 85       	ldd	r20, Y+12	; 0x0c
    1dbe:	b9 01       	movw	r22, r18
    1dc0:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <prvCopyDataToQueue>
    1dc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc6:	8f 3f       	cpi	r24, 0xFF	; 255
    1dc8:	b9 f4       	brne	.+46     	; 0x1df8 <xQueueGenericSendFromISR+0x92>
    1dca:	8a 81       	ldd	r24, Y+2	; 0x02
    1dcc:	9b 81       	ldd	r25, Y+3	; 0x03
    1dce:	fc 01       	movw	r30, r24
    1dd0:	83 89       	ldd	r24, Z+19	; 0x13
    1dd2:	88 23       	and	r24, r24
    1dd4:	c1 f0       	breq	.+48     	; 0x1e06 <xQueueGenericSendFromISR+0xa0>
    1dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dda:	43 96       	adiw	r24, 0x13	; 19
    1ddc:	0e 94 38 18 	call	0x3070	; 0x3070 <xTaskRemoveFromEventList>
    1de0:	88 23       	and	r24, r24
    1de2:	89 f0       	breq	.+34     	; 0x1e06 <xQueueGenericSendFromISR+0xa0>
    1de4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1de6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1de8:	89 2b       	or	r24, r25
    1dea:	69 f0       	breq	.+26     	; 0x1e06 <xQueueGenericSendFromISR+0xa0>
    1dec:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dee:	9b 85       	ldd	r25, Y+11	; 0x0b
    1df0:	21 e0       	ldi	r18, 0x01	; 1
    1df2:	fc 01       	movw	r30, r24
    1df4:	20 83       	st	Z, r18
    1df6:	07 c0       	rjmp	.+14     	; 0x1e06 <xQueueGenericSendFromISR+0xa0>
    1df8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfa:	8f 5f       	subi	r24, 0xFF	; 255
    1dfc:	28 2f       	mov	r18, r24
    1dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1e00:	9b 81       	ldd	r25, Y+3	; 0x03
    1e02:	fc 01       	movw	r30, r24
    1e04:	22 a3       	std	Z+34, r18	; 0x22
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	89 83       	std	Y+1, r24	; 0x01
    1e0a:	01 c0       	rjmp	.+2      	; 0x1e0e <xQueueGenericSendFromISR+0xa8>
    1e0c:	19 82       	std	Y+1, r1	; 0x01
    1e0e:	80 ea       	ldi	r24, 0xA0	; 160
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	2c 81       	ldd	r18, Y+4	; 0x04
    1e14:	fc 01       	movw	r30, r24
    1e16:	22 83       	std	Z+2, r18	; 0x02
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	2c 96       	adiw	r28, 0x0c	; 12
    1e1c:	cd bf       	out	0x3d, r28	; 61
    1e1e:	de bf       	out	0x3e, r29	; 62
    1e20:	df 91       	pop	r29
    1e22:	cf 91       	pop	r28
    1e24:	08 95       	ret

00001e26 <xQueueReceive>:
    1e26:	cf 93       	push	r28
    1e28:	df 93       	push	r29
    1e2a:	cd b7       	in	r28, 0x3d	; 61
    1e2c:	de b7       	in	r29, 0x3e	; 62
    1e2e:	61 97       	sbiw	r28, 0x11	; 17
    1e30:	cd bf       	out	0x3d, r28	; 61
    1e32:	de bf       	out	0x3e, r29	; 62
    1e34:	8a 87       	std	Y+10, r24	; 0x0a
    1e36:	9b 87       	std	Y+11, r25	; 0x0b
    1e38:	6c 87       	std	Y+12, r22	; 0x0c
    1e3a:	7d 87       	std	Y+13, r23	; 0x0d
    1e3c:	2e 87       	std	Y+14, r18	; 0x0e
    1e3e:	3f 87       	std	Y+15, r19	; 0x0f
    1e40:	48 8b       	std	Y+16, r20	; 0x10
    1e42:	59 8b       	std	Y+17, r21	; 0x11
    1e44:	19 82       	std	Y+1, r1	; 0x01
    1e46:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e48:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e4a:	8a 83       	std	Y+2, r24	; 0x02
    1e4c:	9b 83       	std	Y+3, r25	; 0x03
    1e4e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1e52:	ff 93       	push	r31
    1e54:	f8 7f       	andi	r31, 0xF8	; 248
    1e56:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e5e:	fc 01       	movw	r30, r24
    1e60:	86 8d       	ldd	r24, Z+30	; 0x1e
    1e62:	8c 83       	std	Y+4, r24	; 0x04
    1e64:	8c 81       	ldd	r24, Y+4	; 0x04
    1e66:	88 23       	and	r24, r24
    1e68:	11 f1       	breq	.+68     	; 0x1eae <xQueueReceive+0x88>
    1e6a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e6c:	3d 85       	ldd	r19, Y+13	; 0x0d
    1e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e70:	9b 81       	ldd	r25, Y+3	; 0x03
    1e72:	b9 01       	movw	r22, r18
    1e74:	0e 94 a4 10 	call	0x2148	; 0x2148 <prvCopyDataFromQueue>
    1e78:	8c 81       	ldd	r24, Y+4	; 0x04
    1e7a:	2f ef       	ldi	r18, 0xFF	; 255
    1e7c:	28 0f       	add	r18, r24
    1e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e80:	9b 81       	ldd	r25, Y+3	; 0x03
    1e82:	fc 01       	movw	r30, r24
    1e84:	26 8f       	std	Z+30, r18	; 0x1e
    1e86:	8a 81       	ldd	r24, Y+2	; 0x02
    1e88:	9b 81       	ldd	r25, Y+3	; 0x03
    1e8a:	fc 01       	movw	r30, r24
    1e8c:	80 85       	ldd	r24, Z+8	; 0x08
    1e8e:	88 23       	and	r24, r24
    1e90:	49 f0       	breq	.+18     	; 0x1ea4 <xQueueReceive+0x7e>
    1e92:	8a 81       	ldd	r24, Y+2	; 0x02
    1e94:	9b 81       	ldd	r25, Y+3	; 0x03
    1e96:	08 96       	adiw	r24, 0x08	; 8
    1e98:	0e 94 38 18 	call	0x3070	; 0x3070 <xTaskRemoveFromEventList>
    1e9c:	88 23       	and	r24, r24
    1e9e:	11 f0       	breq	.+4      	; 0x1ea4 <xQueueReceive+0x7e>
    1ea0:	0e 94 86 0b 	call	0x170c	; 0x170c <vPortYield>
    1ea4:	ff 91       	pop	r31
    1ea6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	76 c0       	rjmp	.+236    	; 0x1f9a <xQueueReceive+0x174>
    1eae:	8e 85       	ldd	r24, Y+14	; 0x0e
    1eb0:	9f 85       	ldd	r25, Y+15	; 0x0f
    1eb2:	a8 89       	ldd	r26, Y+16	; 0x10
    1eb4:	b9 89       	ldd	r27, Y+17	; 0x11
    1eb6:	89 2b       	or	r24, r25
    1eb8:	8a 2b       	or	r24, r26
    1eba:	8b 2b       	or	r24, r27
    1ebc:	29 f4       	brne	.+10     	; 0x1ec8 <xQueueReceive+0xa2>
    1ebe:	ff 91       	pop	r31
    1ec0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	69 c0       	rjmp	.+210    	; 0x1f9a <xQueueReceive+0x174>
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
    1eca:	88 23       	and	r24, r24
    1ecc:	31 f4       	brne	.+12     	; 0x1eda <xQueueReceive+0xb4>
    1ece:	ce 01       	movw	r24, r28
    1ed0:	05 96       	adiw	r24, 0x05	; 5
    1ed2:	0e 94 03 19 	call	0x3206	; 0x3206 <vTaskInternalSetTimeOutState>
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	89 83       	std	Y+1, r24	; 0x01
    1eda:	ff 91       	pop	r31
    1edc:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1ee0:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <vTaskSuspendAll>
    1ee4:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1ee8:	ff 93       	push	r31
    1eea:	f8 7f       	andi	r31, 0xF8	; 248
    1eec:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	81 a1       	ldd	r24, Z+33	; 0x21
    1ef8:	8f 3f       	cpi	r24, 0xFF	; 255
    1efa:	21 f4       	brne	.+8      	; 0x1f04 <xQueueReceive+0xde>
    1efc:	8a 81       	ldd	r24, Y+2	; 0x02
    1efe:	9b 81       	ldd	r25, Y+3	; 0x03
    1f00:	fc 01       	movw	r30, r24
    1f02:	11 a2       	std	Z+33, r1	; 0x21
    1f04:	8a 81       	ldd	r24, Y+2	; 0x02
    1f06:	9b 81       	ldd	r25, Y+3	; 0x03
    1f08:	fc 01       	movw	r30, r24
    1f0a:	82 a1       	ldd	r24, Z+34	; 0x22
    1f0c:	8f 3f       	cpi	r24, 0xFF	; 255
    1f0e:	21 f4       	brne	.+8      	; 0x1f18 <xQueueReceive+0xf2>
    1f10:	8a 81       	ldd	r24, Y+2	; 0x02
    1f12:	9b 81       	ldd	r25, Y+3	; 0x03
    1f14:	fc 01       	movw	r30, r24
    1f16:	12 a2       	std	Z+34, r1	; 0x22
    1f18:	ff 91       	pop	r31
    1f1a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1f1e:	9e 01       	movw	r18, r28
    1f20:	22 5f       	subi	r18, 0xF2	; 242
    1f22:	3f 4f       	sbci	r19, 0xFF	; 255
    1f24:	ce 01       	movw	r24, r28
    1f26:	05 96       	adiw	r24, 0x05	; 5
    1f28:	b9 01       	movw	r22, r18
    1f2a:	0e 94 26 19 	call	0x324c	; 0x324c <xTaskCheckForTimeOut>
    1f2e:	88 23       	and	r24, r24
    1f30:	31 f5       	brne	.+76     	; 0x1f7e <xQueueReceive+0x158>
    1f32:	8a 81       	ldd	r24, Y+2	; 0x02
    1f34:	9b 81       	ldd	r25, Y+3	; 0x03
    1f36:	0e 94 59 11 	call	0x22b2	; 0x22b2 <prvIsQueueEmpty>
    1f3a:	88 23       	and	r24, r24
    1f3c:	c9 f0       	breq	.+50     	; 0x1f70 <xQueueReceive+0x14a>
    1f3e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f40:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f42:	a8 89       	ldd	r26, Y+16	; 0x10
    1f44:	b9 89       	ldd	r27, Y+17	; 0x11
    1f46:	2a 81       	ldd	r18, Y+2	; 0x02
    1f48:	3b 81       	ldd	r19, Y+3	; 0x03
    1f4a:	2d 5e       	subi	r18, 0xED	; 237
    1f4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f4e:	ac 01       	movw	r20, r24
    1f50:	bd 01       	movw	r22, r26
    1f52:	c9 01       	movw	r24, r18
    1f54:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <vTaskPlaceOnEventList>
    1f58:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f5c:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <prvUnlockQueue>
    1f60:	0e 94 ff 14 	call	0x29fe	; 0x29fe <xTaskResumeAll>
    1f64:	88 23       	and	r24, r24
    1f66:	09 f0       	breq	.+2      	; 0x1f6a <xQueueReceive+0x144>
    1f68:	72 cf       	rjmp	.-284    	; 0x1e4e <xQueueReceive+0x28>
    1f6a:	0e 94 86 0b 	call	0x170c	; 0x170c <vPortYield>
    1f6e:	6f cf       	rjmp	.-290    	; 0x1e4e <xQueueReceive+0x28>
    1f70:	8a 81       	ldd	r24, Y+2	; 0x02
    1f72:	9b 81       	ldd	r25, Y+3	; 0x03
    1f74:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <prvUnlockQueue>
    1f78:	0e 94 ff 14 	call	0x29fe	; 0x29fe <xTaskResumeAll>
    1f7c:	68 cf       	rjmp	.-304    	; 0x1e4e <xQueueReceive+0x28>
    1f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f80:	9b 81       	ldd	r25, Y+3	; 0x03
    1f82:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <prvUnlockQueue>
    1f86:	0e 94 ff 14 	call	0x29fe	; 0x29fe <xTaskResumeAll>
    1f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f8e:	0e 94 59 11 	call	0x22b2	; 0x22b2 <prvIsQueueEmpty>
    1f92:	88 23       	and	r24, r24
    1f94:	09 f4       	brne	.+2      	; 0x1f98 <xQueueReceive+0x172>
    1f96:	5b cf       	rjmp	.-330    	; 0x1e4e <xQueueReceive+0x28>
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	61 96       	adiw	r28, 0x11	; 17
    1f9c:	cd bf       	out	0x3d, r28	; 61
    1f9e:	de bf       	out	0x3e, r29	; 62
    1fa0:	df 91       	pop	r29
    1fa2:	cf 91       	pop	r28
    1fa4:	08 95       	ret

00001fa6 <uxQueueMessagesWaiting>:
    1fa6:	cf 93       	push	r28
    1fa8:	df 93       	push	r29
    1faa:	00 d0       	rcall	.+0      	; 0x1fac <uxQueueMessagesWaiting+0x6>
    1fac:	cd b7       	in	r28, 0x3d	; 61
    1fae:	de b7       	in	r29, 0x3e	; 62
    1fb0:	8a 83       	std	Y+2, r24	; 0x02
    1fb2:	9b 83       	std	Y+3, r25	; 0x03
    1fb4:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1fb8:	ff 93       	push	r31
    1fba:	f8 7f       	andi	r31, 0xF8	; 248
    1fbc:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc2:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc4:	fc 01       	movw	r30, r24
    1fc6:	86 8d       	ldd	r24, Z+30	; 0x1e
    1fc8:	89 83       	std	Y+1, r24	; 0x01
    1fca:	ff 91       	pop	r31
    1fcc:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1fd0:	89 81       	ldd	r24, Y+1	; 0x01
    1fd2:	23 96       	adiw	r28, 0x03	; 3
    1fd4:	cd bf       	out	0x3d, r28	; 61
    1fd6:	de bf       	out	0x3e, r29	; 62
    1fd8:	df 91       	pop	r29
    1fda:	cf 91       	pop	r28
    1fdc:	08 95       	ret

00001fde <prvCopyDataToQueue>:
    1fde:	cf 93       	push	r28
    1fe0:	df 93       	push	r29
    1fe2:	cd b7       	in	r28, 0x3d	; 61
    1fe4:	de b7       	in	r29, 0x3e	; 62
    1fe6:	27 97       	sbiw	r28, 0x07	; 7
    1fe8:	cd bf       	out	0x3d, r28	; 61
    1fea:	de bf       	out	0x3e, r29	; 62
    1fec:	8b 83       	std	Y+3, r24	; 0x03
    1fee:	9c 83       	std	Y+4, r25	; 0x04
    1ff0:	6d 83       	std	Y+5, r22	; 0x05
    1ff2:	7e 83       	std	Y+6, r23	; 0x06
    1ff4:	4f 83       	std	Y+7, r20	; 0x07
    1ff6:	1a 82       	std	Y+2, r1	; 0x02
    1ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffa:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffc:	fc 01       	movw	r30, r24
    1ffe:	86 8d       	ldd	r24, Z+30	; 0x1e
    2000:	89 83       	std	Y+1, r24	; 0x01
    2002:	8b 81       	ldd	r24, Y+3	; 0x03
    2004:	9c 81       	ldd	r25, Y+4	; 0x04
    2006:	fc 01       	movw	r30, r24
    2008:	80 a1       	ldd	r24, Z+32	; 0x20
    200a:	88 23       	and	r24, r24
    200c:	09 f4       	brne	.+2      	; 0x2010 <__DATA_REGION_LENGTH__+0x10>
    200e:	8e c0       	rjmp	.+284    	; 0x212c <__DATA_REGION_LENGTH__+0x12c>
    2010:	8f 81       	ldd	r24, Y+7	; 0x07
    2012:	88 23       	and	r24, r24
    2014:	d9 f5       	brne	.+118    	; 0x208c <__DATA_REGION_LENGTH__+0x8c>
    2016:	8b 81       	ldd	r24, Y+3	; 0x03
    2018:	9c 81       	ldd	r25, Y+4	; 0x04
    201a:	fc 01       	movw	r30, r24
    201c:	80 a1       	ldd	r24, Z+32	; 0x20
    201e:	48 2f       	mov	r20, r24
    2020:	50 e0       	ldi	r21, 0x00	; 0
    2022:	8b 81       	ldd	r24, Y+3	; 0x03
    2024:	9c 81       	ldd	r25, Y+4	; 0x04
    2026:	fc 01       	movw	r30, r24
    2028:	84 81       	ldd	r24, Z+4	; 0x04
    202a:	95 81       	ldd	r25, Z+5	; 0x05
    202c:	2d 81       	ldd	r18, Y+5	; 0x05
    202e:	3e 81       	ldd	r19, Y+6	; 0x06
    2030:	b9 01       	movw	r22, r18
    2032:	0e 94 22 36 	call	0x6c44	; 0x6c44 <memcpy>
    2036:	8b 81       	ldd	r24, Y+3	; 0x03
    2038:	9c 81       	ldd	r25, Y+4	; 0x04
    203a:	fc 01       	movw	r30, r24
    203c:	24 81       	ldd	r18, Z+4	; 0x04
    203e:	35 81       	ldd	r19, Z+5	; 0x05
    2040:	8b 81       	ldd	r24, Y+3	; 0x03
    2042:	9c 81       	ldd	r25, Y+4	; 0x04
    2044:	fc 01       	movw	r30, r24
    2046:	80 a1       	ldd	r24, Z+32	; 0x20
    2048:	88 2f       	mov	r24, r24
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	28 0f       	add	r18, r24
    204e:	39 1f       	adc	r19, r25
    2050:	8b 81       	ldd	r24, Y+3	; 0x03
    2052:	9c 81       	ldd	r25, Y+4	; 0x04
    2054:	fc 01       	movw	r30, r24
    2056:	24 83       	std	Z+4, r18	; 0x04
    2058:	35 83       	std	Z+5, r19	; 0x05
    205a:	8b 81       	ldd	r24, Y+3	; 0x03
    205c:	9c 81       	ldd	r25, Y+4	; 0x04
    205e:	fc 01       	movw	r30, r24
    2060:	24 81       	ldd	r18, Z+4	; 0x04
    2062:	35 81       	ldd	r19, Z+5	; 0x05
    2064:	8b 81       	ldd	r24, Y+3	; 0x03
    2066:	9c 81       	ldd	r25, Y+4	; 0x04
    2068:	fc 01       	movw	r30, r24
    206a:	82 81       	ldd	r24, Z+2	; 0x02
    206c:	93 81       	ldd	r25, Z+3	; 0x03
    206e:	28 17       	cp	r18, r24
    2070:	39 07       	cpc	r19, r25
    2072:	08 f4       	brcc	.+2      	; 0x2076 <__DATA_REGION_LENGTH__+0x76>
    2074:	5b c0       	rjmp	.+182    	; 0x212c <__DATA_REGION_LENGTH__+0x12c>
    2076:	8b 81       	ldd	r24, Y+3	; 0x03
    2078:	9c 81       	ldd	r25, Y+4	; 0x04
    207a:	fc 01       	movw	r30, r24
    207c:	20 81       	ld	r18, Z
    207e:	31 81       	ldd	r19, Z+1	; 0x01
    2080:	8b 81       	ldd	r24, Y+3	; 0x03
    2082:	9c 81       	ldd	r25, Y+4	; 0x04
    2084:	fc 01       	movw	r30, r24
    2086:	24 83       	std	Z+4, r18	; 0x04
    2088:	35 83       	std	Z+5, r19	; 0x05
    208a:	50 c0       	rjmp	.+160    	; 0x212c <__DATA_REGION_LENGTH__+0x12c>
    208c:	8b 81       	ldd	r24, Y+3	; 0x03
    208e:	9c 81       	ldd	r25, Y+4	; 0x04
    2090:	fc 01       	movw	r30, r24
    2092:	80 a1       	ldd	r24, Z+32	; 0x20
    2094:	48 2f       	mov	r20, r24
    2096:	50 e0       	ldi	r21, 0x00	; 0
    2098:	8b 81       	ldd	r24, Y+3	; 0x03
    209a:	9c 81       	ldd	r25, Y+4	; 0x04
    209c:	fc 01       	movw	r30, r24
    209e:	86 81       	ldd	r24, Z+6	; 0x06
    20a0:	97 81       	ldd	r25, Z+7	; 0x07
    20a2:	2d 81       	ldd	r18, Y+5	; 0x05
    20a4:	3e 81       	ldd	r19, Y+6	; 0x06
    20a6:	b9 01       	movw	r22, r18
    20a8:	0e 94 22 36 	call	0x6c44	; 0x6c44 <memcpy>
    20ac:	8b 81       	ldd	r24, Y+3	; 0x03
    20ae:	9c 81       	ldd	r25, Y+4	; 0x04
    20b0:	fc 01       	movw	r30, r24
    20b2:	26 81       	ldd	r18, Z+6	; 0x06
    20b4:	37 81       	ldd	r19, Z+7	; 0x07
    20b6:	8b 81       	ldd	r24, Y+3	; 0x03
    20b8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ba:	fc 01       	movw	r30, r24
    20bc:	80 a1       	ldd	r24, Z+32	; 0x20
    20be:	88 2f       	mov	r24, r24
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	91 95       	neg	r25
    20c4:	81 95       	neg	r24
    20c6:	91 09       	sbc	r25, r1
    20c8:	28 0f       	add	r18, r24
    20ca:	39 1f       	adc	r19, r25
    20cc:	8b 81       	ldd	r24, Y+3	; 0x03
    20ce:	9c 81       	ldd	r25, Y+4	; 0x04
    20d0:	fc 01       	movw	r30, r24
    20d2:	26 83       	std	Z+6, r18	; 0x06
    20d4:	37 83       	std	Z+7, r19	; 0x07
    20d6:	8b 81       	ldd	r24, Y+3	; 0x03
    20d8:	9c 81       	ldd	r25, Y+4	; 0x04
    20da:	fc 01       	movw	r30, r24
    20dc:	26 81       	ldd	r18, Z+6	; 0x06
    20de:	37 81       	ldd	r19, Z+7	; 0x07
    20e0:	8b 81       	ldd	r24, Y+3	; 0x03
    20e2:	9c 81       	ldd	r25, Y+4	; 0x04
    20e4:	fc 01       	movw	r30, r24
    20e6:	80 81       	ld	r24, Z
    20e8:	91 81       	ldd	r25, Z+1	; 0x01
    20ea:	28 17       	cp	r18, r24
    20ec:	39 07       	cpc	r19, r25
    20ee:	a8 f4       	brcc	.+42     	; 0x211a <__DATA_REGION_LENGTH__+0x11a>
    20f0:	8b 81       	ldd	r24, Y+3	; 0x03
    20f2:	9c 81       	ldd	r25, Y+4	; 0x04
    20f4:	fc 01       	movw	r30, r24
    20f6:	22 81       	ldd	r18, Z+2	; 0x02
    20f8:	33 81       	ldd	r19, Z+3	; 0x03
    20fa:	8b 81       	ldd	r24, Y+3	; 0x03
    20fc:	9c 81       	ldd	r25, Y+4	; 0x04
    20fe:	fc 01       	movw	r30, r24
    2100:	80 a1       	ldd	r24, Z+32	; 0x20
    2102:	88 2f       	mov	r24, r24
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	91 95       	neg	r25
    2108:	81 95       	neg	r24
    210a:	91 09       	sbc	r25, r1
    210c:	28 0f       	add	r18, r24
    210e:	39 1f       	adc	r19, r25
    2110:	8b 81       	ldd	r24, Y+3	; 0x03
    2112:	9c 81       	ldd	r25, Y+4	; 0x04
    2114:	fc 01       	movw	r30, r24
    2116:	26 83       	std	Z+6, r18	; 0x06
    2118:	37 83       	std	Z+7, r19	; 0x07
    211a:	8f 81       	ldd	r24, Y+7	; 0x07
    211c:	82 30       	cpi	r24, 0x02	; 2
    211e:	31 f4       	brne	.+12     	; 0x212c <__DATA_REGION_LENGTH__+0x12c>
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	88 23       	and	r24, r24
    2124:	19 f0       	breq	.+6      	; 0x212c <__DATA_REGION_LENGTH__+0x12c>
    2126:	89 81       	ldd	r24, Y+1	; 0x01
    2128:	81 50       	subi	r24, 0x01	; 1
    212a:	89 83       	std	Y+1, r24	; 0x01
    212c:	89 81       	ldd	r24, Y+1	; 0x01
    212e:	21 e0       	ldi	r18, 0x01	; 1
    2130:	28 0f       	add	r18, r24
    2132:	8b 81       	ldd	r24, Y+3	; 0x03
    2134:	9c 81       	ldd	r25, Y+4	; 0x04
    2136:	fc 01       	movw	r30, r24
    2138:	26 8f       	std	Z+30, r18	; 0x1e
    213a:	8a 81       	ldd	r24, Y+2	; 0x02
    213c:	27 96       	adiw	r28, 0x07	; 7
    213e:	cd bf       	out	0x3d, r28	; 61
    2140:	de bf       	out	0x3e, r29	; 62
    2142:	df 91       	pop	r29
    2144:	cf 91       	pop	r28
    2146:	08 95       	ret

00002148 <prvCopyDataFromQueue>:
    2148:	cf 93       	push	r28
    214a:	df 93       	push	r29
    214c:	00 d0       	rcall	.+0      	; 0x214e <prvCopyDataFromQueue+0x6>
    214e:	1f 92       	push	r1
    2150:	cd b7       	in	r28, 0x3d	; 61
    2152:	de b7       	in	r29, 0x3e	; 62
    2154:	89 83       	std	Y+1, r24	; 0x01
    2156:	9a 83       	std	Y+2, r25	; 0x02
    2158:	6b 83       	std	Y+3, r22	; 0x03
    215a:	7c 83       	std	Y+4, r23	; 0x04
    215c:	89 81       	ldd	r24, Y+1	; 0x01
    215e:	9a 81       	ldd	r25, Y+2	; 0x02
    2160:	fc 01       	movw	r30, r24
    2162:	80 a1       	ldd	r24, Z+32	; 0x20
    2164:	88 23       	and	r24, r24
    2166:	c9 f1       	breq	.+114    	; 0x21da <prvCopyDataFromQueue+0x92>
    2168:	89 81       	ldd	r24, Y+1	; 0x01
    216a:	9a 81       	ldd	r25, Y+2	; 0x02
    216c:	fc 01       	movw	r30, r24
    216e:	26 81       	ldd	r18, Z+6	; 0x06
    2170:	37 81       	ldd	r19, Z+7	; 0x07
    2172:	89 81       	ldd	r24, Y+1	; 0x01
    2174:	9a 81       	ldd	r25, Y+2	; 0x02
    2176:	fc 01       	movw	r30, r24
    2178:	80 a1       	ldd	r24, Z+32	; 0x20
    217a:	88 2f       	mov	r24, r24
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	28 0f       	add	r18, r24
    2180:	39 1f       	adc	r19, r25
    2182:	89 81       	ldd	r24, Y+1	; 0x01
    2184:	9a 81       	ldd	r25, Y+2	; 0x02
    2186:	fc 01       	movw	r30, r24
    2188:	26 83       	std	Z+6, r18	; 0x06
    218a:	37 83       	std	Z+7, r19	; 0x07
    218c:	89 81       	ldd	r24, Y+1	; 0x01
    218e:	9a 81       	ldd	r25, Y+2	; 0x02
    2190:	fc 01       	movw	r30, r24
    2192:	26 81       	ldd	r18, Z+6	; 0x06
    2194:	37 81       	ldd	r19, Z+7	; 0x07
    2196:	89 81       	ldd	r24, Y+1	; 0x01
    2198:	9a 81       	ldd	r25, Y+2	; 0x02
    219a:	fc 01       	movw	r30, r24
    219c:	82 81       	ldd	r24, Z+2	; 0x02
    219e:	93 81       	ldd	r25, Z+3	; 0x03
    21a0:	28 17       	cp	r18, r24
    21a2:	39 07       	cpc	r19, r25
    21a4:	50 f0       	brcs	.+20     	; 0x21ba <prvCopyDataFromQueue+0x72>
    21a6:	89 81       	ldd	r24, Y+1	; 0x01
    21a8:	9a 81       	ldd	r25, Y+2	; 0x02
    21aa:	fc 01       	movw	r30, r24
    21ac:	20 81       	ld	r18, Z
    21ae:	31 81       	ldd	r19, Z+1	; 0x01
    21b0:	89 81       	ldd	r24, Y+1	; 0x01
    21b2:	9a 81       	ldd	r25, Y+2	; 0x02
    21b4:	fc 01       	movw	r30, r24
    21b6:	26 83       	std	Z+6, r18	; 0x06
    21b8:	37 83       	std	Z+7, r19	; 0x07
    21ba:	89 81       	ldd	r24, Y+1	; 0x01
    21bc:	9a 81       	ldd	r25, Y+2	; 0x02
    21be:	fc 01       	movw	r30, r24
    21c0:	80 a1       	ldd	r24, Z+32	; 0x20
    21c2:	48 2f       	mov	r20, r24
    21c4:	50 e0       	ldi	r21, 0x00	; 0
    21c6:	89 81       	ldd	r24, Y+1	; 0x01
    21c8:	9a 81       	ldd	r25, Y+2	; 0x02
    21ca:	fc 01       	movw	r30, r24
    21cc:	26 81       	ldd	r18, Z+6	; 0x06
    21ce:	37 81       	ldd	r19, Z+7	; 0x07
    21d0:	8b 81       	ldd	r24, Y+3	; 0x03
    21d2:	9c 81       	ldd	r25, Y+4	; 0x04
    21d4:	b9 01       	movw	r22, r18
    21d6:	0e 94 22 36 	call	0x6c44	; 0x6c44 <memcpy>
    21da:	00 00       	nop
    21dc:	24 96       	adiw	r28, 0x04	; 4
    21de:	cd bf       	out	0x3d, r28	; 61
    21e0:	de bf       	out	0x3e, r29	; 62
    21e2:	df 91       	pop	r29
    21e4:	cf 91       	pop	r28
    21e6:	08 95       	ret

000021e8 <prvUnlockQueue>:
    21e8:	cf 93       	push	r28
    21ea:	df 93       	push	r29
    21ec:	00 d0       	rcall	.+0      	; 0x21ee <prvUnlockQueue+0x6>
    21ee:	1f 92       	push	r1
    21f0:	cd b7       	in	r28, 0x3d	; 61
    21f2:	de b7       	in	r29, 0x3e	; 62
    21f4:	8b 83       	std	Y+3, r24	; 0x03
    21f6:	9c 83       	std	Y+4, r25	; 0x04
    21f8:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    21fc:	ff 93       	push	r31
    21fe:	f8 7f       	andi	r31, 0xF8	; 248
    2200:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2204:	8b 81       	ldd	r24, Y+3	; 0x03
    2206:	9c 81       	ldd	r25, Y+4	; 0x04
    2208:	fc 01       	movw	r30, r24
    220a:	82 a1       	ldd	r24, Z+34	; 0x22
    220c:	89 83       	std	Y+1, r24	; 0x01
    220e:	12 c0       	rjmp	.+36     	; 0x2234 <prvUnlockQueue+0x4c>
    2210:	8b 81       	ldd	r24, Y+3	; 0x03
    2212:	9c 81       	ldd	r25, Y+4	; 0x04
    2214:	fc 01       	movw	r30, r24
    2216:	83 89       	ldd	r24, Z+19	; 0x13
    2218:	88 23       	and	r24, r24
    221a:	81 f0       	breq	.+32     	; 0x223c <prvUnlockQueue+0x54>
    221c:	8b 81       	ldd	r24, Y+3	; 0x03
    221e:	9c 81       	ldd	r25, Y+4	; 0x04
    2220:	43 96       	adiw	r24, 0x13	; 19
    2222:	0e 94 38 18 	call	0x3070	; 0x3070 <xTaskRemoveFromEventList>
    2226:	88 23       	and	r24, r24
    2228:	11 f0       	breq	.+4      	; 0x222e <prvUnlockQueue+0x46>
    222a:	0e 94 ce 19 	call	0x339c	; 0x339c <vTaskMissedYield>
    222e:	89 81       	ldd	r24, Y+1	; 0x01
    2230:	81 50       	subi	r24, 0x01	; 1
    2232:	89 83       	std	Y+1, r24	; 0x01
    2234:	89 81       	ldd	r24, Y+1	; 0x01
    2236:	18 16       	cp	r1, r24
    2238:	5c f3       	brlt	.-42     	; 0x2210 <prvUnlockQueue+0x28>
    223a:	01 c0       	rjmp	.+2      	; 0x223e <prvUnlockQueue+0x56>
    223c:	00 00       	nop
    223e:	8b 81       	ldd	r24, Y+3	; 0x03
    2240:	9c 81       	ldd	r25, Y+4	; 0x04
    2242:	2f ef       	ldi	r18, 0xFF	; 255
    2244:	fc 01       	movw	r30, r24
    2246:	22 a3       	std	Z+34, r18	; 0x22
    2248:	ff 91       	pop	r31
    224a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    224e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2252:	ff 93       	push	r31
    2254:	f8 7f       	andi	r31, 0xF8	; 248
    2256:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    225a:	8b 81       	ldd	r24, Y+3	; 0x03
    225c:	9c 81       	ldd	r25, Y+4	; 0x04
    225e:	fc 01       	movw	r30, r24
    2260:	81 a1       	ldd	r24, Z+33	; 0x21
    2262:	8a 83       	std	Y+2, r24	; 0x02
    2264:	12 c0       	rjmp	.+36     	; 0x228a <prvUnlockQueue+0xa2>
    2266:	8b 81       	ldd	r24, Y+3	; 0x03
    2268:	9c 81       	ldd	r25, Y+4	; 0x04
    226a:	fc 01       	movw	r30, r24
    226c:	80 85       	ldd	r24, Z+8	; 0x08
    226e:	88 23       	and	r24, r24
    2270:	81 f0       	breq	.+32     	; 0x2292 <prvUnlockQueue+0xaa>
    2272:	8b 81       	ldd	r24, Y+3	; 0x03
    2274:	9c 81       	ldd	r25, Y+4	; 0x04
    2276:	08 96       	adiw	r24, 0x08	; 8
    2278:	0e 94 38 18 	call	0x3070	; 0x3070 <xTaskRemoveFromEventList>
    227c:	88 23       	and	r24, r24
    227e:	11 f0       	breq	.+4      	; 0x2284 <prvUnlockQueue+0x9c>
    2280:	0e 94 ce 19 	call	0x339c	; 0x339c <vTaskMissedYield>
    2284:	8a 81       	ldd	r24, Y+2	; 0x02
    2286:	81 50       	subi	r24, 0x01	; 1
    2288:	8a 83       	std	Y+2, r24	; 0x02
    228a:	8a 81       	ldd	r24, Y+2	; 0x02
    228c:	18 16       	cp	r1, r24
    228e:	5c f3       	brlt	.-42     	; 0x2266 <prvUnlockQueue+0x7e>
    2290:	01 c0       	rjmp	.+2      	; 0x2294 <prvUnlockQueue+0xac>
    2292:	00 00       	nop
    2294:	8b 81       	ldd	r24, Y+3	; 0x03
    2296:	9c 81       	ldd	r25, Y+4	; 0x04
    2298:	2f ef       	ldi	r18, 0xFF	; 255
    229a:	fc 01       	movw	r30, r24
    229c:	21 a3       	std	Z+33, r18	; 0x21
    229e:	ff 91       	pop	r31
    22a0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    22a4:	00 00       	nop
    22a6:	24 96       	adiw	r28, 0x04	; 4
    22a8:	cd bf       	out	0x3d, r28	; 61
    22aa:	de bf       	out	0x3e, r29	; 62
    22ac:	df 91       	pop	r29
    22ae:	cf 91       	pop	r28
    22b0:	08 95       	ret

000022b2 <prvIsQueueEmpty>:
    22b2:	cf 93       	push	r28
    22b4:	df 93       	push	r29
    22b6:	00 d0       	rcall	.+0      	; 0x22b8 <prvIsQueueEmpty+0x6>
    22b8:	cd b7       	in	r28, 0x3d	; 61
    22ba:	de b7       	in	r29, 0x3e	; 62
    22bc:	8a 83       	std	Y+2, r24	; 0x02
    22be:	9b 83       	std	Y+3, r25	; 0x03
    22c0:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    22c4:	ff 93       	push	r31
    22c6:	f8 7f       	andi	r31, 0xF8	; 248
    22c8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    22cc:	8a 81       	ldd	r24, Y+2	; 0x02
    22ce:	9b 81       	ldd	r25, Y+3	; 0x03
    22d0:	fc 01       	movw	r30, r24
    22d2:	86 8d       	ldd	r24, Z+30	; 0x1e
    22d4:	88 23       	and	r24, r24
    22d6:	19 f4       	brne	.+6      	; 0x22de <prvIsQueueEmpty+0x2c>
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	89 83       	std	Y+1, r24	; 0x01
    22dc:	01 c0       	rjmp	.+2      	; 0x22e0 <prvIsQueueEmpty+0x2e>
    22de:	19 82       	std	Y+1, r1	; 0x01
    22e0:	ff 91       	pop	r31
    22e2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    22e6:	89 81       	ldd	r24, Y+1	; 0x01
    22e8:	23 96       	adiw	r28, 0x03	; 3
    22ea:	cd bf       	out	0x3d, r28	; 61
    22ec:	de bf       	out	0x3e, r29	; 62
    22ee:	df 91       	pop	r29
    22f0:	cf 91       	pop	r28
    22f2:	08 95       	ret

000022f4 <prvIsQueueFull>:
    22f4:	cf 93       	push	r28
    22f6:	df 93       	push	r29
    22f8:	00 d0       	rcall	.+0      	; 0x22fa <prvIsQueueFull+0x6>
    22fa:	cd b7       	in	r28, 0x3d	; 61
    22fc:	de b7       	in	r29, 0x3e	; 62
    22fe:	8a 83       	std	Y+2, r24	; 0x02
    2300:	9b 83       	std	Y+3, r25	; 0x03
    2302:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2306:	ff 93       	push	r31
    2308:	f8 7f       	andi	r31, 0xF8	; 248
    230a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    230e:	8a 81       	ldd	r24, Y+2	; 0x02
    2310:	9b 81       	ldd	r25, Y+3	; 0x03
    2312:	fc 01       	movw	r30, r24
    2314:	26 8d       	ldd	r18, Z+30	; 0x1e
    2316:	8a 81       	ldd	r24, Y+2	; 0x02
    2318:	9b 81       	ldd	r25, Y+3	; 0x03
    231a:	fc 01       	movw	r30, r24
    231c:	87 8d       	ldd	r24, Z+31	; 0x1f
    231e:	28 17       	cp	r18, r24
    2320:	19 f4       	brne	.+6      	; 0x2328 <prvIsQueueFull+0x34>
    2322:	81 e0       	ldi	r24, 0x01	; 1
    2324:	89 83       	std	Y+1, r24	; 0x01
    2326:	01 c0       	rjmp	.+2      	; 0x232a <prvIsQueueFull+0x36>
    2328:	19 82       	std	Y+1, r1	; 0x01
    232a:	ff 91       	pop	r31
    232c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2330:	89 81       	ldd	r24, Y+1	; 0x01
    2332:	23 96       	adiw	r28, 0x03	; 3
    2334:	cd bf       	out	0x3d, r28	; 61
    2336:	de bf       	out	0x3e, r29	; 62
    2338:	df 91       	pop	r29
    233a:	cf 91       	pop	r28
    233c:	08 95       	ret

0000233e <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    233e:	cf 93       	push	r28
    2340:	df 93       	push	r29
    2342:	cd b7       	in	r28, 0x3d	; 61
    2344:	de b7       	in	r29, 0x3e	; 62
    2346:	29 97       	sbiw	r28, 0x09	; 9
    2348:	cd bf       	out	0x3d, r28	; 61
    234a:	de bf       	out	0x3e, r29	; 62
    234c:	8b 83       	std	Y+3, r24	; 0x03
    234e:	9c 83       	std	Y+4, r25	; 0x04
    2350:	4d 83       	std	Y+5, r20	; 0x05
    2352:	5e 83       	std	Y+6, r21	; 0x06
    2354:	6f 83       	std	Y+7, r22	; 0x07
    2356:	78 87       	std	Y+8, r23	; 0x08
    2358:	29 87       	std	Y+9, r18	; 0x09
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    235a:	8b 81       	ldd	r24, Y+3	; 0x03
    235c:	9c 81       	ldd	r25, Y+4	; 0x04
    235e:	89 83       	std	Y+1, r24	; 0x01
    2360:	9a 83       	std	Y+2, r25	; 0x02
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    2362:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2366:	ff 93       	push	r31
    2368:	f8 7f       	andi	r31, 0xF8	; 248
    236a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    236e:	89 81       	ldd	r24, Y+1	; 0x01
    2370:	9a 81       	ldd	r25, Y+2	; 0x02
    2372:	fc 01       	movw	r30, r24
    2374:	81 a1       	ldd	r24, Z+33	; 0x21
    2376:	8f 3f       	cpi	r24, 0xFF	; 255
    2378:	21 f4       	brne	.+8      	; 0x2382 <vQueueWaitForMessageRestricted+0x44>
    237a:	89 81       	ldd	r24, Y+1	; 0x01
    237c:	9a 81       	ldd	r25, Y+2	; 0x02
    237e:	fc 01       	movw	r30, r24
    2380:	11 a2       	std	Z+33, r1	; 0x21
    2382:	89 81       	ldd	r24, Y+1	; 0x01
    2384:	9a 81       	ldd	r25, Y+2	; 0x02
    2386:	fc 01       	movw	r30, r24
    2388:	82 a1       	ldd	r24, Z+34	; 0x22
    238a:	8f 3f       	cpi	r24, 0xFF	; 255
    238c:	21 f4       	brne	.+8      	; 0x2396 <vQueueWaitForMessageRestricted+0x58>
    238e:	89 81       	ldd	r24, Y+1	; 0x01
    2390:	9a 81       	ldd	r25, Y+2	; 0x02
    2392:	fc 01       	movw	r30, r24
    2394:	12 a2       	std	Z+34, r1	; 0x22
    2396:	ff 91       	pop	r31
    2398:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    239c:	89 81       	ldd	r24, Y+1	; 0x01
    239e:	9a 81       	ldd	r25, Y+2	; 0x02
    23a0:	fc 01       	movw	r30, r24
    23a2:	86 8d       	ldd	r24, Z+30	; 0x1e
    23a4:	88 23       	and	r24, r24
    23a6:	71 f4       	brne	.+28     	; 0x23c4 <vQueueWaitForMessageRestricted+0x86>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    23a8:	89 81       	ldd	r24, Y+1	; 0x01
    23aa:	9a 81       	ldd	r25, Y+2	; 0x02
    23ac:	fc 01       	movw	r30, r24
    23ae:	73 96       	adiw	r30, 0x13	; 19
    23b0:	8d 81       	ldd	r24, Y+5	; 0x05
    23b2:	9e 81       	ldd	r25, Y+6	; 0x06
    23b4:	af 81       	ldd	r26, Y+7	; 0x07
    23b6:	b8 85       	ldd	r27, Y+8	; 0x08
    23b8:	29 85       	ldd	r18, Y+9	; 0x09
    23ba:	ac 01       	movw	r20, r24
    23bc:	bd 01       	movw	r22, r26
    23be:	cf 01       	movw	r24, r30
    23c0:	0e 94 04 18 	call	0x3008	; 0x3008 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    23c4:	89 81       	ldd	r24, Y+1	; 0x01
    23c6:	9a 81       	ldd	r25, Y+2	; 0x02
    23c8:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <prvUnlockQueue>
	}
    23cc:	00 00       	nop
    23ce:	29 96       	adiw	r28, 0x09	; 9
    23d0:	cd bf       	out	0x3d, r28	; 61
    23d2:	de bf       	out	0x3e, r29	; 62
    23d4:	df 91       	pop	r29
    23d6:	cf 91       	pop	r28
    23d8:	08 95       	ret

000023da <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
    23da:	8f 92       	push	r8
    23dc:	9f 92       	push	r9
    23de:	af 92       	push	r10
    23e0:	bf 92       	push	r11
    23e2:	cf 92       	push	r12
    23e4:	df 92       	push	r13
    23e6:	ef 92       	push	r14
    23e8:	ff 92       	push	r15
    23ea:	0f 93       	push	r16
    23ec:	1f 93       	push	r17
    23ee:	cf 93       	push	r28
    23f0:	df 93       	push	r29
    23f2:	cd b7       	in	r28, 0x3d	; 61
    23f4:	de b7       	in	r29, 0x3e	; 62
    23f6:	60 97       	sbiw	r28, 0x10	; 16
    23f8:	cd bf       	out	0x3d, r28	; 61
    23fa:	de bf       	out	0x3e, r29	; 62
    23fc:	8e 83       	std	Y+6, r24	; 0x06
    23fe:	9f 83       	std	Y+7, r25	; 0x07
    2400:	68 87       	std	Y+8, r22	; 0x08
    2402:	79 87       	std	Y+9, r23	; 0x09
    2404:	4a 87       	std	Y+10, r20	; 0x0a
    2406:	5b 87       	std	Y+11, r21	; 0x0b
    2408:	2c 87       	std	Y+12, r18	; 0x0c
    240a:	3d 87       	std	Y+13, r19	; 0x0d
    240c:	0e 87       	std	Y+14, r16	; 0x0e
    240e:	ef 86       	std	Y+15, r14	; 0x0f
    2410:	f8 8a       	std	Y+16, r15	; 0x10
    2412:	8a 85       	ldd	r24, Y+10	; 0x0a
    2414:	9b 85       	ldd	r25, Y+11	; 0x0b
    2416:	0e 94 9d 07 	call	0xf3a	; 0xf3a <pvPortMalloc>
    241a:	8c 83       	std	Y+4, r24	; 0x04
    241c:	9d 83       	std	Y+5, r25	; 0x05
    241e:	8c 81       	ldd	r24, Y+4	; 0x04
    2420:	9d 81       	ldd	r25, Y+5	; 0x05
    2422:	89 2b       	or	r24, r25
    2424:	b9 f0       	breq	.+46     	; 0x2454 <xTaskCreate+0x7a>
    2426:	8c e2       	ldi	r24, 0x2C	; 44
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	0e 94 9d 07 	call	0xf3a	; 0xf3a <pvPortMalloc>
    242e:	89 83       	std	Y+1, r24	; 0x01
    2430:	9a 83       	std	Y+2, r25	; 0x02
    2432:	89 81       	ldd	r24, Y+1	; 0x01
    2434:	9a 81       	ldd	r25, Y+2	; 0x02
    2436:	89 2b       	or	r24, r25
    2438:	41 f0       	breq	.+16     	; 0x244a <xTaskCreate+0x70>
    243a:	89 81       	ldd	r24, Y+1	; 0x01
    243c:	9a 81       	ldd	r25, Y+2	; 0x02
    243e:	2c 81       	ldd	r18, Y+4	; 0x04
    2440:	3d 81       	ldd	r19, Y+5	; 0x05
    2442:	fc 01       	movw	r30, r24
    2444:	23 8f       	std	Z+27, r18	; 0x1b
    2446:	34 8f       	std	Z+28, r19	; 0x1c
    2448:	07 c0       	rjmp	.+14     	; 0x2458 <xTaskCreate+0x7e>
    244a:	8c 81       	ldd	r24, Y+4	; 0x04
    244c:	9d 81       	ldd	r25, Y+5	; 0x05
    244e:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <vPortFree>
    2452:	02 c0       	rjmp	.+4      	; 0x2458 <xTaskCreate+0x7e>
    2454:	19 82       	std	Y+1, r1	; 0x01
    2456:	1a 82       	std	Y+2, r1	; 0x02
    2458:	89 81       	ldd	r24, Y+1	; 0x01
    245a:	9a 81       	ldd	r25, Y+2	; 0x02
    245c:	89 2b       	or	r24, r25
    245e:	09 f1       	breq	.+66     	; 0x24a2 <xTaskCreate+0xc8>
    2460:	8a 85       	ldd	r24, Y+10	; 0x0a
    2462:	9b 85       	ldd	r25, Y+11	; 0x0b
    2464:	cc 01       	movw	r24, r24
    2466:	a0 e0       	ldi	r26, 0x00	; 0
    2468:	b0 e0       	ldi	r27, 0x00	; 0
    246a:	09 81       	ldd	r16, Y+1	; 0x01
    246c:	1a 81       	ldd	r17, Y+2	; 0x02
    246e:	4f 85       	ldd	r20, Y+15	; 0x0f
    2470:	58 89       	ldd	r21, Y+16	; 0x10
    2472:	2c 85       	ldd	r18, Y+12	; 0x0c
    2474:	3d 85       	ldd	r19, Y+13	; 0x0d
    2476:	68 85       	ldd	r22, Y+8	; 0x08
    2478:	79 85       	ldd	r23, Y+9	; 0x09
    247a:	ee 81       	ldd	r30, Y+6	; 0x06
    247c:	ff 81       	ldd	r31, Y+7	; 0x07
    247e:	81 2c       	mov	r8, r1
    2480:	91 2c       	mov	r9, r1
    2482:	58 01       	movw	r10, r16
    2484:	6a 01       	movw	r12, r20
    2486:	ee 84       	ldd	r14, Y+14	; 0x0e
    2488:	89 01       	movw	r16, r18
    248a:	9c 01       	movw	r18, r24
    248c:	ad 01       	movw	r20, r26
    248e:	cf 01       	movw	r24, r30
    2490:	0e 94 64 12 	call	0x24c8	; 0x24c8 <prvInitialiseNewTask>
    2494:	89 81       	ldd	r24, Y+1	; 0x01
    2496:	9a 81       	ldd	r25, Y+2	; 0x02
    2498:	0e 94 3a 13 	call	0x2674	; 0x2674 <prvAddNewTaskToReadyList>
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	8b 83       	std	Y+3, r24	; 0x03
    24a0:	02 c0       	rjmp	.+4      	; 0x24a6 <xTaskCreate+0xcc>
    24a2:	8f ef       	ldi	r24, 0xFF	; 255
    24a4:	8b 83       	std	Y+3, r24	; 0x03
    24a6:	8b 81       	ldd	r24, Y+3	; 0x03
    24a8:	60 96       	adiw	r28, 0x10	; 16
    24aa:	cd bf       	out	0x3d, r28	; 61
    24ac:	de bf       	out	0x3e, r29	; 62
    24ae:	df 91       	pop	r29
    24b0:	cf 91       	pop	r28
    24b2:	1f 91       	pop	r17
    24b4:	0f 91       	pop	r16
    24b6:	ff 90       	pop	r15
    24b8:	ef 90       	pop	r14
    24ba:	df 90       	pop	r13
    24bc:	cf 90       	pop	r12
    24be:	bf 90       	pop	r11
    24c0:	af 90       	pop	r10
    24c2:	9f 90       	pop	r9
    24c4:	8f 90       	pop	r8
    24c6:	08 95       	ret

000024c8 <prvInitialiseNewTask>:
    24c8:	8f 92       	push	r8
    24ca:	9f 92       	push	r9
    24cc:	af 92       	push	r10
    24ce:	bf 92       	push	r11
    24d0:	cf 92       	push	r12
    24d2:	df 92       	push	r13
    24d4:	ef 92       	push	r14
    24d6:	ff 92       	push	r15
    24d8:	0f 93       	push	r16
    24da:	1f 93       	push	r17
    24dc:	cf 93       	push	r28
    24de:	df 93       	push	r29
    24e0:	cd b7       	in	r28, 0x3d	; 61
    24e2:	de b7       	in	r29, 0x3e	; 62
    24e4:	64 97       	sbiw	r28, 0x14	; 20
    24e6:	cd bf       	out	0x3d, r28	; 61
    24e8:	de bf       	out	0x3e, r29	; 62
    24ea:	8c 83       	std	Y+4, r24	; 0x04
    24ec:	9d 83       	std	Y+5, r25	; 0x05
    24ee:	6e 83       	std	Y+6, r22	; 0x06
    24f0:	7f 83       	std	Y+7, r23	; 0x07
    24f2:	28 87       	std	Y+8, r18	; 0x08
    24f4:	39 87       	std	Y+9, r19	; 0x09
    24f6:	4a 87       	std	Y+10, r20	; 0x0a
    24f8:	5b 87       	std	Y+11, r21	; 0x0b
    24fa:	0c 87       	std	Y+12, r16	; 0x0c
    24fc:	1d 87       	std	Y+13, r17	; 0x0d
    24fe:	ee 86       	std	Y+14, r14	; 0x0e
    2500:	cf 86       	std	Y+15, r12	; 0x0f
    2502:	d8 8a       	std	Y+16, r13	; 0x10
    2504:	a9 8a       	std	Y+17, r10	; 0x11
    2506:	ba 8a       	std	Y+18, r11	; 0x12
    2508:	8b 8a       	std	Y+19, r8	; 0x13
    250a:	9c 8a       	std	Y+20, r9	; 0x14
    250c:	28 85       	ldd	r18, Y+8	; 0x08
    250e:	39 85       	ldd	r19, Y+9	; 0x09
    2510:	89 89       	ldd	r24, Y+17	; 0x11
    2512:	9a 89       	ldd	r25, Y+18	; 0x12
    2514:	fc 01       	movw	r30, r24
    2516:	83 8d       	ldd	r24, Z+27	; 0x1b
    2518:	94 8d       	ldd	r25, Z+28	; 0x1c
    251a:	a9 01       	movw	r20, r18
    251c:	65 ea       	ldi	r22, 0xA5	; 165
    251e:	70 e0       	ldi	r23, 0x00	; 0
    2520:	0e 94 2b 36 	call	0x6c56	; 0x6c56 <memset>
    2524:	89 89       	ldd	r24, Y+17	; 0x11
    2526:	9a 89       	ldd	r25, Y+18	; 0x12
    2528:	fc 01       	movw	r30, r24
    252a:	23 8d       	ldd	r18, Z+27	; 0x1b
    252c:	34 8d       	ldd	r19, Z+28	; 0x1c
    252e:	88 85       	ldd	r24, Y+8	; 0x08
    2530:	99 85       	ldd	r25, Y+9	; 0x09
    2532:	01 97       	sbiw	r24, 0x01	; 1
    2534:	82 0f       	add	r24, r18
    2536:	93 1f       	adc	r25, r19
    2538:	8a 83       	std	Y+2, r24	; 0x02
    253a:	9b 83       	std	Y+3, r25	; 0x03
    253c:	19 82       	std	Y+1, r1	; 0x01
    253e:	21 c0       	rjmp	.+66     	; 0x2582 <prvInitialiseNewTask+0xba>
    2540:	89 81       	ldd	r24, Y+1	; 0x01
    2542:	88 2f       	mov	r24, r24
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	29 81       	ldd	r18, Y+1	; 0x01
    2548:	22 2f       	mov	r18, r18
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	4e 81       	ldd	r20, Y+6	; 0x06
    254e:	5f 81       	ldd	r21, Y+7	; 0x07
    2550:	24 0f       	add	r18, r20
    2552:	35 1f       	adc	r19, r21
    2554:	f9 01       	movw	r30, r18
    2556:	40 81       	ld	r20, Z
    2558:	29 89       	ldd	r18, Y+17	; 0x11
    255a:	3a 89       	ldd	r19, Y+18	; 0x12
    255c:	82 0f       	add	r24, r18
    255e:	93 1f       	adc	r25, r19
    2560:	4d 96       	adiw	r24, 0x1d	; 29
    2562:	fc 01       	movw	r30, r24
    2564:	40 83       	st	Z, r20
    2566:	89 81       	ldd	r24, Y+1	; 0x01
    2568:	88 2f       	mov	r24, r24
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	2e 81       	ldd	r18, Y+6	; 0x06
    256e:	3f 81       	ldd	r19, Y+7	; 0x07
    2570:	82 0f       	add	r24, r18
    2572:	93 1f       	adc	r25, r19
    2574:	fc 01       	movw	r30, r24
    2576:	80 81       	ld	r24, Z
    2578:	88 23       	and	r24, r24
    257a:	39 f0       	breq	.+14     	; 0x258a <prvInitialiseNewTask+0xc2>
    257c:	89 81       	ldd	r24, Y+1	; 0x01
    257e:	8f 5f       	subi	r24, 0xFF	; 255
    2580:	89 83       	std	Y+1, r24	; 0x01
    2582:	89 81       	ldd	r24, Y+1	; 0x01
    2584:	88 30       	cpi	r24, 0x08	; 8
    2586:	e0 f2       	brcs	.-72     	; 0x2540 <prvInitialiseNewTask+0x78>
    2588:	01 c0       	rjmp	.+2      	; 0x258c <prvInitialiseNewTask+0xc4>
    258a:	00 00       	nop
    258c:	89 89       	ldd	r24, Y+17	; 0x11
    258e:	9a 89       	ldd	r25, Y+18	; 0x12
    2590:	fc 01       	movw	r30, r24
    2592:	14 a2       	std	Z+36, r1	; 0x24
    2594:	8e 85       	ldd	r24, Y+14	; 0x0e
    2596:	84 30       	cpi	r24, 0x04	; 4
    2598:	10 f0       	brcs	.+4      	; 0x259e <prvInitialiseNewTask+0xd6>
    259a:	83 e0       	ldi	r24, 0x03	; 3
    259c:	8e 87       	std	Y+14, r24	; 0x0e
    259e:	89 89       	ldd	r24, Y+17	; 0x11
    25a0:	9a 89       	ldd	r25, Y+18	; 0x12
    25a2:	2e 85       	ldd	r18, Y+14	; 0x0e
    25a4:	fc 01       	movw	r30, r24
    25a6:	22 8f       	std	Z+26, r18	; 0x1a
    25a8:	89 89       	ldd	r24, Y+17	; 0x11
    25aa:	9a 89       	ldd	r25, Y+18	; 0x12
    25ac:	02 96       	adiw	r24, 0x02	; 2
    25ae:	0e 94 29 08 	call	0x1052	; 0x1052 <vListInitialiseItem>
    25b2:	89 89       	ldd	r24, Y+17	; 0x11
    25b4:	9a 89       	ldd	r25, Y+18	; 0x12
    25b6:	0e 96       	adiw	r24, 0x0e	; 14
    25b8:	0e 94 29 08 	call	0x1052	; 0x1052 <vListInitialiseItem>
    25bc:	89 89       	ldd	r24, Y+17	; 0x11
    25be:	9a 89       	ldd	r25, Y+18	; 0x12
    25c0:	29 89       	ldd	r18, Y+17	; 0x11
    25c2:	3a 89       	ldd	r19, Y+18	; 0x12
    25c4:	fc 01       	movw	r30, r24
    25c6:	22 87       	std	Z+10, r18	; 0x0a
    25c8:	33 87       	std	Z+11, r19	; 0x0b
    25ca:	8e 85       	ldd	r24, Y+14	; 0x0e
    25cc:	88 2f       	mov	r24, r24
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	a0 e0       	ldi	r26, 0x00	; 0
    25d2:	b0 e0       	ldi	r27, 0x00	; 0
    25d4:	24 e0       	ldi	r18, 0x04	; 4
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	40 e0       	ldi	r20, 0x00	; 0
    25da:	50 e0       	ldi	r21, 0x00	; 0
    25dc:	79 01       	movw	r14, r18
    25de:	8a 01       	movw	r16, r20
    25e0:	e8 1a       	sub	r14, r24
    25e2:	f9 0a       	sbc	r15, r25
    25e4:	0a 0b       	sbc	r16, r26
    25e6:	1b 0b       	sbc	r17, r27
    25e8:	d8 01       	movw	r26, r16
    25ea:	c7 01       	movw	r24, r14
    25ec:	29 89       	ldd	r18, Y+17	; 0x11
    25ee:	3a 89       	ldd	r19, Y+18	; 0x12
    25f0:	f9 01       	movw	r30, r18
    25f2:	86 87       	std	Z+14, r24	; 0x0e
    25f4:	97 87       	std	Z+15, r25	; 0x0f
    25f6:	a0 8b       	std	Z+16, r26	; 0x10
    25f8:	b1 8b       	std	Z+17, r27	; 0x11
    25fa:	89 89       	ldd	r24, Y+17	; 0x11
    25fc:	9a 89       	ldd	r25, Y+18	; 0x12
    25fe:	29 89       	ldd	r18, Y+17	; 0x11
    2600:	3a 89       	ldd	r19, Y+18	; 0x12
    2602:	fc 01       	movw	r30, r24
    2604:	26 8b       	std	Z+22, r18	; 0x16
    2606:	37 8b       	std	Z+23, r19	; 0x17
    2608:	89 89       	ldd	r24, Y+17	; 0x11
    260a:	9a 89       	ldd	r25, Y+18	; 0x12
    260c:	fc 01       	movw	r30, r24
    260e:	17 a2       	std	Z+39, r1	; 0x27
    2610:	10 a6       	std	Z+40, r1	; 0x28
    2612:	11 a6       	std	Z+41, r1	; 0x29
    2614:	12 a6       	std	Z+42, r1	; 0x2a
    2616:	89 89       	ldd	r24, Y+17	; 0x11
    2618:	9a 89       	ldd	r25, Y+18	; 0x12
    261a:	fc 01       	movw	r30, r24
    261c:	13 a6       	std	Z+43, r1	; 0x2b
    261e:	4c 85       	ldd	r20, Y+12	; 0x0c
    2620:	5d 85       	ldd	r21, Y+13	; 0x0d
    2622:	2c 81       	ldd	r18, Y+4	; 0x04
    2624:	3d 81       	ldd	r19, Y+5	; 0x05
    2626:	8a 81       	ldd	r24, Y+2	; 0x02
    2628:	9b 81       	ldd	r25, Y+3	; 0x03
    262a:	b9 01       	movw	r22, r18
    262c:	0e 94 75 09 	call	0x12ea	; 0x12ea <pxPortInitialiseStack>
    2630:	9c 01       	movw	r18, r24
    2632:	89 89       	ldd	r24, Y+17	; 0x11
    2634:	9a 89       	ldd	r25, Y+18	; 0x12
    2636:	fc 01       	movw	r30, r24
    2638:	20 83       	st	Z, r18
    263a:	31 83       	std	Z+1, r19	; 0x01
    263c:	8f 85       	ldd	r24, Y+15	; 0x0f
    263e:	98 89       	ldd	r25, Y+16	; 0x10
    2640:	89 2b       	or	r24, r25
    2642:	39 f0       	breq	.+14     	; 0x2652 <prvInitialiseNewTask+0x18a>
    2644:	8f 85       	ldd	r24, Y+15	; 0x0f
    2646:	98 89       	ldd	r25, Y+16	; 0x10
    2648:	29 89       	ldd	r18, Y+17	; 0x11
    264a:	3a 89       	ldd	r19, Y+18	; 0x12
    264c:	fc 01       	movw	r30, r24
    264e:	20 83       	st	Z, r18
    2650:	31 83       	std	Z+1, r19	; 0x01
    2652:	00 00       	nop
    2654:	64 96       	adiw	r28, 0x14	; 20
    2656:	cd bf       	out	0x3d, r28	; 61
    2658:	de bf       	out	0x3e, r29	; 62
    265a:	df 91       	pop	r29
    265c:	cf 91       	pop	r28
    265e:	1f 91       	pop	r17
    2660:	0f 91       	pop	r16
    2662:	ff 90       	pop	r15
    2664:	ef 90       	pop	r14
    2666:	df 90       	pop	r13
    2668:	cf 90       	pop	r12
    266a:	bf 90       	pop	r11
    266c:	af 90       	pop	r10
    266e:	9f 90       	pop	r9
    2670:	8f 90       	pop	r8
    2672:	08 95       	ret

00002674 <prvAddNewTaskToReadyList>:
    2674:	cf 93       	push	r28
    2676:	df 93       	push	r29
    2678:	1f 92       	push	r1
    267a:	1f 92       	push	r1
    267c:	cd b7       	in	r28, 0x3d	; 61
    267e:	de b7       	in	r29, 0x3e	; 62
    2680:	89 83       	std	Y+1, r24	; 0x01
    2682:	9a 83       	std	Y+2, r25	; 0x02
    2684:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2688:	ff 93       	push	r31
    268a:	f8 7f       	andi	r31, 0xF8	; 248
    268c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2690:	80 91 ce 30 	lds	r24, 0x30CE	; 0x8030ce <uxCurrentNumberOfTasks>
    2694:	8f 5f       	subi	r24, 0xFF	; 255
    2696:	80 93 ce 30 	sts	0x30CE, r24	; 0x8030ce <uxCurrentNumberOfTasks>
    269a:	80 91 70 30 	lds	r24, 0x3070	; 0x803070 <pxCurrentTCB>
    269e:	90 91 71 30 	lds	r25, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    26a2:	89 2b       	or	r24, r25
    26a4:	69 f4       	brne	.+26     	; 0x26c0 <prvAddNewTaskToReadyList+0x4c>
    26a6:	89 81       	ldd	r24, Y+1	; 0x01
    26a8:	9a 81       	ldd	r25, Y+2	; 0x02
    26aa:	80 93 70 30 	sts	0x3070, r24	; 0x803070 <pxCurrentTCB>
    26ae:	90 93 71 30 	sts	0x3071, r25	; 0x803071 <pxCurrentTCB+0x1>
    26b2:	80 91 ce 30 	lds	r24, 0x30CE	; 0x8030ce <uxCurrentNumberOfTasks>
    26b6:	81 30       	cpi	r24, 0x01	; 1
    26b8:	c9 f4       	brne	.+50     	; 0x26ec <prvAddNewTaskToReadyList+0x78>
    26ba:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <prvInitialiseTaskLists>
    26be:	16 c0       	rjmp	.+44     	; 0x26ec <prvAddNewTaskToReadyList+0x78>
    26c0:	80 91 d4 30 	lds	r24, 0x30D4	; 0x8030d4 <xSchedulerRunning>
    26c4:	88 23       	and	r24, r24
    26c6:	91 f4       	brne	.+36     	; 0x26ec <prvAddNewTaskToReadyList+0x78>
    26c8:	80 91 70 30 	lds	r24, 0x3070	; 0x803070 <pxCurrentTCB>
    26cc:	90 91 71 30 	lds	r25, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    26d0:	fc 01       	movw	r30, r24
    26d2:	22 8d       	ldd	r18, Z+26	; 0x1a
    26d4:	89 81       	ldd	r24, Y+1	; 0x01
    26d6:	9a 81       	ldd	r25, Y+2	; 0x02
    26d8:	fc 01       	movw	r30, r24
    26da:	82 8d       	ldd	r24, Z+26	; 0x1a
    26dc:	82 17       	cp	r24, r18
    26de:	30 f0       	brcs	.+12     	; 0x26ec <prvAddNewTaskToReadyList+0x78>
    26e0:	89 81       	ldd	r24, Y+1	; 0x01
    26e2:	9a 81       	ldd	r25, Y+2	; 0x02
    26e4:	80 93 70 30 	sts	0x3070, r24	; 0x803070 <pxCurrentTCB>
    26e8:	90 93 71 30 	sts	0x3071, r25	; 0x803071 <pxCurrentTCB+0x1>
    26ec:	80 91 d8 30 	lds	r24, 0x30D8	; 0x8030d8 <uxTaskNumber>
    26f0:	8f 5f       	subi	r24, 0xFF	; 255
    26f2:	80 93 d8 30 	sts	0x30D8, r24	; 0x8030d8 <uxTaskNumber>
    26f6:	20 91 d8 30 	lds	r18, 0x30D8	; 0x8030d8 <uxTaskNumber>
    26fa:	89 81       	ldd	r24, Y+1	; 0x01
    26fc:	9a 81       	ldd	r25, Y+2	; 0x02
    26fe:	fc 01       	movw	r30, r24
    2700:	25 a3       	std	Z+37, r18	; 0x25
    2702:	89 81       	ldd	r24, Y+1	; 0x01
    2704:	9a 81       	ldd	r25, Y+2	; 0x02
    2706:	fc 01       	movw	r30, r24
    2708:	92 8d       	ldd	r25, Z+26	; 0x1a
    270a:	80 91 d3 30 	lds	r24, 0x30D3	; 0x8030d3 <uxTopReadyPriority>
    270e:	89 17       	cp	r24, r25
    2710:	30 f4       	brcc	.+12     	; 0x271e <prvAddNewTaskToReadyList+0xaa>
    2712:	89 81       	ldd	r24, Y+1	; 0x01
    2714:	9a 81       	ldd	r25, Y+2	; 0x02
    2716:	fc 01       	movw	r30, r24
    2718:	82 8d       	ldd	r24, Z+26	; 0x1a
    271a:	80 93 d3 30 	sts	0x30D3, r24	; 0x8030d3 <uxTopReadyPriority>
    271e:	89 81       	ldd	r24, Y+1	; 0x01
    2720:	9a 81       	ldd	r25, Y+2	; 0x02
    2722:	ac 01       	movw	r20, r24
    2724:	4e 5f       	subi	r20, 0xFE	; 254
    2726:	5f 4f       	sbci	r21, 0xFF	; 255
    2728:	89 81       	ldd	r24, Y+1	; 0x01
    272a:	9a 81       	ldd	r25, Y+2	; 0x02
    272c:	fc 01       	movw	r30, r24
    272e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2730:	28 2f       	mov	r18, r24
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	6b e0       	ldi	r22, 0x0B	; 11
    2736:	62 9f       	mul	r22, r18
    2738:	c0 01       	movw	r24, r0
    273a:	63 9f       	mul	r22, r19
    273c:	90 0d       	add	r25, r0
    273e:	11 24       	eor	r1, r1
    2740:	8e 58       	subi	r24, 0x8E	; 142
    2742:	9f 4c       	sbci	r25, 0xCF	; 207
    2744:	ba 01       	movw	r22, r20
    2746:	0e 94 3c 08 	call	0x1078	; 0x1078 <vListInsertEnd>
    274a:	ff 91       	pop	r31
    274c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2750:	80 91 d4 30 	lds	r24, 0x30D4	; 0x8030d4 <xSchedulerRunning>
    2754:	88 23       	and	r24, r24
    2756:	71 f0       	breq	.+28     	; 0x2774 <prvAddNewTaskToReadyList+0x100>
    2758:	80 91 70 30 	lds	r24, 0x3070	; 0x803070 <pxCurrentTCB>
    275c:	90 91 71 30 	lds	r25, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    2760:	fc 01       	movw	r30, r24
    2762:	22 8d       	ldd	r18, Z+26	; 0x1a
    2764:	89 81       	ldd	r24, Y+1	; 0x01
    2766:	9a 81       	ldd	r25, Y+2	; 0x02
    2768:	fc 01       	movw	r30, r24
    276a:	82 8d       	ldd	r24, Z+26	; 0x1a
    276c:	28 17       	cp	r18, r24
    276e:	10 f4       	brcc	.+4      	; 0x2774 <prvAddNewTaskToReadyList+0x100>
    2770:	0e 94 86 0b 	call	0x170c	; 0x170c <vPortYield>
    2774:	00 00       	nop
    2776:	0f 90       	pop	r0
    2778:	0f 90       	pop	r0
    277a:	df 91       	pop	r29
    277c:	cf 91       	pop	r28
    277e:	08 95       	ret

00002780 <vTaskDelayUntil>:
    2780:	ef 92       	push	r14
    2782:	ff 92       	push	r15
    2784:	0f 93       	push	r16
    2786:	1f 93       	push	r17
    2788:	cf 93       	push	r28
    278a:	df 93       	push	r29
    278c:	cd b7       	in	r28, 0x3d	; 61
    278e:	de b7       	in	r29, 0x3e	; 62
    2790:	60 97       	sbiw	r28, 0x10	; 16
    2792:	cd bf       	out	0x3d, r28	; 61
    2794:	de bf       	out	0x3e, r29	; 62
    2796:	8b 87       	std	Y+11, r24	; 0x0b
    2798:	9c 87       	std	Y+12, r25	; 0x0c
    279a:	4d 87       	std	Y+13, r20	; 0x0d
    279c:	5e 87       	std	Y+14, r21	; 0x0e
    279e:	6f 87       	std	Y+15, r22	; 0x0f
    27a0:	78 8b       	std	Y+16, r23	; 0x10
    27a2:	19 82       	std	Y+1, r1	; 0x01
    27a4:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <vTaskSuspendAll>
    27a8:	80 91 cf 30 	lds	r24, 0x30CF	; 0x8030cf <xTickCount>
    27ac:	90 91 d0 30 	lds	r25, 0x30D0	; 0x8030d0 <xTickCount+0x1>
    27b0:	a0 91 d1 30 	lds	r26, 0x30D1	; 0x8030d1 <xTickCount+0x2>
    27b4:	b0 91 d2 30 	lds	r27, 0x30D2	; 0x8030d2 <xTickCount+0x3>
    27b8:	8a 83       	std	Y+2, r24	; 0x02
    27ba:	9b 83       	std	Y+3, r25	; 0x03
    27bc:	ac 83       	std	Y+4, r26	; 0x04
    27be:	bd 83       	std	Y+5, r27	; 0x05
    27c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    27c2:	9c 85       	ldd	r25, Y+12	; 0x0c
    27c4:	fc 01       	movw	r30, r24
    27c6:	20 81       	ld	r18, Z
    27c8:	31 81       	ldd	r19, Z+1	; 0x01
    27ca:	42 81       	ldd	r20, Z+2	; 0x02
    27cc:	53 81       	ldd	r21, Z+3	; 0x03
    27ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    27d2:	af 85       	ldd	r26, Y+15	; 0x0f
    27d4:	b8 89       	ldd	r27, Y+16	; 0x10
    27d6:	82 0f       	add	r24, r18
    27d8:	93 1f       	adc	r25, r19
    27da:	a4 1f       	adc	r26, r20
    27dc:	b5 1f       	adc	r27, r21
    27de:	8e 83       	std	Y+6, r24	; 0x06
    27e0:	9f 83       	std	Y+7, r25	; 0x07
    27e2:	a8 87       	std	Y+8, r26	; 0x08
    27e4:	b9 87       	std	Y+9, r27	; 0x09
    27e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    27e8:	9c 85       	ldd	r25, Y+12	; 0x0c
    27ea:	fc 01       	movw	r30, r24
    27ec:	20 81       	ld	r18, Z
    27ee:	31 81       	ldd	r19, Z+1	; 0x01
    27f0:	42 81       	ldd	r20, Z+2	; 0x02
    27f2:	53 81       	ldd	r21, Z+3	; 0x03
    27f4:	8a 81       	ldd	r24, Y+2	; 0x02
    27f6:	9b 81       	ldd	r25, Y+3	; 0x03
    27f8:	ac 81       	ldd	r26, Y+4	; 0x04
    27fa:	bd 81       	ldd	r27, Y+5	; 0x05
    27fc:	82 17       	cp	r24, r18
    27fe:	93 07       	cpc	r25, r19
    2800:	a4 07       	cpc	r26, r20
    2802:	b5 07       	cpc	r27, r21
    2804:	00 f5       	brcc	.+64     	; 0x2846 <vTaskDelayUntil+0xc6>
    2806:	8b 85       	ldd	r24, Y+11	; 0x0b
    2808:	9c 85       	ldd	r25, Y+12	; 0x0c
    280a:	fc 01       	movw	r30, r24
    280c:	20 81       	ld	r18, Z
    280e:	31 81       	ldd	r19, Z+1	; 0x01
    2810:	42 81       	ldd	r20, Z+2	; 0x02
    2812:	53 81       	ldd	r21, Z+3	; 0x03
    2814:	8e 81       	ldd	r24, Y+6	; 0x06
    2816:	9f 81       	ldd	r25, Y+7	; 0x07
    2818:	a8 85       	ldd	r26, Y+8	; 0x08
    281a:	b9 85       	ldd	r27, Y+9	; 0x09
    281c:	82 17       	cp	r24, r18
    281e:	93 07       	cpc	r25, r19
    2820:	a4 07       	cpc	r26, r20
    2822:	b5 07       	cpc	r27, r21
    2824:	78 f5       	brcc	.+94     	; 0x2884 <vTaskDelayUntil+0x104>
    2826:	2e 81       	ldd	r18, Y+6	; 0x06
    2828:	3f 81       	ldd	r19, Y+7	; 0x07
    282a:	48 85       	ldd	r20, Y+8	; 0x08
    282c:	59 85       	ldd	r21, Y+9	; 0x09
    282e:	8a 81       	ldd	r24, Y+2	; 0x02
    2830:	9b 81       	ldd	r25, Y+3	; 0x03
    2832:	ac 81       	ldd	r26, Y+4	; 0x04
    2834:	bd 81       	ldd	r27, Y+5	; 0x05
    2836:	82 17       	cp	r24, r18
    2838:	93 07       	cpc	r25, r19
    283a:	a4 07       	cpc	r26, r20
    283c:	b5 07       	cpc	r27, r21
    283e:	10 f5       	brcc	.+68     	; 0x2884 <vTaskDelayUntil+0x104>
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	89 83       	std	Y+1, r24	; 0x01
    2844:	1f c0       	rjmp	.+62     	; 0x2884 <vTaskDelayUntil+0x104>
    2846:	8b 85       	ldd	r24, Y+11	; 0x0b
    2848:	9c 85       	ldd	r25, Y+12	; 0x0c
    284a:	fc 01       	movw	r30, r24
    284c:	20 81       	ld	r18, Z
    284e:	31 81       	ldd	r19, Z+1	; 0x01
    2850:	42 81       	ldd	r20, Z+2	; 0x02
    2852:	53 81       	ldd	r21, Z+3	; 0x03
    2854:	8e 81       	ldd	r24, Y+6	; 0x06
    2856:	9f 81       	ldd	r25, Y+7	; 0x07
    2858:	a8 85       	ldd	r26, Y+8	; 0x08
    285a:	b9 85       	ldd	r27, Y+9	; 0x09
    285c:	82 17       	cp	r24, r18
    285e:	93 07       	cpc	r25, r19
    2860:	a4 07       	cpc	r26, r20
    2862:	b5 07       	cpc	r27, r21
    2864:	68 f0       	brcs	.+26     	; 0x2880 <vTaskDelayUntil+0x100>
    2866:	2e 81       	ldd	r18, Y+6	; 0x06
    2868:	3f 81       	ldd	r19, Y+7	; 0x07
    286a:	48 85       	ldd	r20, Y+8	; 0x08
    286c:	59 85       	ldd	r21, Y+9	; 0x09
    286e:	8a 81       	ldd	r24, Y+2	; 0x02
    2870:	9b 81       	ldd	r25, Y+3	; 0x03
    2872:	ac 81       	ldd	r26, Y+4	; 0x04
    2874:	bd 81       	ldd	r27, Y+5	; 0x05
    2876:	82 17       	cp	r24, r18
    2878:	93 07       	cpc	r25, r19
    287a:	a4 07       	cpc	r26, r20
    287c:	b5 07       	cpc	r27, r21
    287e:	10 f4       	brcc	.+4      	; 0x2884 <vTaskDelayUntil+0x104>
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	89 83       	std	Y+1, r24	; 0x01
    2884:	2b 85       	ldd	r18, Y+11	; 0x0b
    2886:	3c 85       	ldd	r19, Y+12	; 0x0c
    2888:	8e 81       	ldd	r24, Y+6	; 0x06
    288a:	9f 81       	ldd	r25, Y+7	; 0x07
    288c:	a8 85       	ldd	r26, Y+8	; 0x08
    288e:	b9 85       	ldd	r27, Y+9	; 0x09
    2890:	f9 01       	movw	r30, r18
    2892:	80 83       	st	Z, r24
    2894:	91 83       	std	Z+1, r25	; 0x01
    2896:	a2 83       	std	Z+2, r26	; 0x02
    2898:	b3 83       	std	Z+3, r27	; 0x03
    289a:	89 81       	ldd	r24, Y+1	; 0x01
    289c:	88 23       	and	r24, r24
    289e:	a9 f0       	breq	.+42     	; 0x28ca <vTaskDelayUntil+0x14a>
    28a0:	2e 81       	ldd	r18, Y+6	; 0x06
    28a2:	3f 81       	ldd	r19, Y+7	; 0x07
    28a4:	48 85       	ldd	r20, Y+8	; 0x08
    28a6:	59 85       	ldd	r21, Y+9	; 0x09
    28a8:	8a 81       	ldd	r24, Y+2	; 0x02
    28aa:	9b 81       	ldd	r25, Y+3	; 0x03
    28ac:	ac 81       	ldd	r26, Y+4	; 0x04
    28ae:	bd 81       	ldd	r27, Y+5	; 0x05
    28b0:	79 01       	movw	r14, r18
    28b2:	8a 01       	movw	r16, r20
    28b4:	e8 1a       	sub	r14, r24
    28b6:	f9 0a       	sbc	r15, r25
    28b8:	0a 0b       	sbc	r16, r26
    28ba:	1b 0b       	sbc	r17, r27
    28bc:	d8 01       	movw	r26, r16
    28be:	c7 01       	movw	r24, r14
    28c0:	40 e0       	ldi	r20, 0x00	; 0
    28c2:	bc 01       	movw	r22, r24
    28c4:	cd 01       	movw	r24, r26
    28c6:	0e 94 c9 1a 	call	0x3592	; 0x3592 <prvAddCurrentTaskToDelayedList>
    28ca:	0e 94 ff 14 	call	0x29fe	; 0x29fe <xTaskResumeAll>
    28ce:	8a 87       	std	Y+10, r24	; 0x0a
    28d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    28d2:	88 23       	and	r24, r24
    28d4:	11 f4       	brne	.+4      	; 0x28da <vTaskDelayUntil+0x15a>
    28d6:	0e 94 86 0b 	call	0x170c	; 0x170c <vPortYield>
    28da:	00 00       	nop
    28dc:	60 96       	adiw	r28, 0x10	; 16
    28de:	cd bf       	out	0x3d, r28	; 61
    28e0:	de bf       	out	0x3e, r29	; 62
    28e2:	df 91       	pop	r29
    28e4:	cf 91       	pop	r28
    28e6:	1f 91       	pop	r17
    28e8:	0f 91       	pop	r16
    28ea:	ff 90       	pop	r15
    28ec:	ef 90       	pop	r14
    28ee:	08 95       	ret

000028f0 <vTaskDelay>:
    28f0:	cf 93       	push	r28
    28f2:	df 93       	push	r29
    28f4:	cd b7       	in	r28, 0x3d	; 61
    28f6:	de b7       	in	r29, 0x3e	; 62
    28f8:	25 97       	sbiw	r28, 0x05	; 5
    28fa:	cd bf       	out	0x3d, r28	; 61
    28fc:	de bf       	out	0x3e, r29	; 62
    28fe:	6a 83       	std	Y+2, r22	; 0x02
    2900:	7b 83       	std	Y+3, r23	; 0x03
    2902:	8c 83       	std	Y+4, r24	; 0x04
    2904:	9d 83       	std	Y+5, r25	; 0x05
    2906:	19 82       	std	Y+1, r1	; 0x01
    2908:	8a 81       	ldd	r24, Y+2	; 0x02
    290a:	9b 81       	ldd	r25, Y+3	; 0x03
    290c:	ac 81       	ldd	r26, Y+4	; 0x04
    290e:	bd 81       	ldd	r27, Y+5	; 0x05
    2910:	89 2b       	or	r24, r25
    2912:	8a 2b       	or	r24, r26
    2914:	8b 2b       	or	r24, r27
    2916:	71 f0       	breq	.+28     	; 0x2934 <vTaskDelay+0x44>
    2918:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <vTaskSuspendAll>
    291c:	8a 81       	ldd	r24, Y+2	; 0x02
    291e:	9b 81       	ldd	r25, Y+3	; 0x03
    2920:	ac 81       	ldd	r26, Y+4	; 0x04
    2922:	bd 81       	ldd	r27, Y+5	; 0x05
    2924:	40 e0       	ldi	r20, 0x00	; 0
    2926:	bc 01       	movw	r22, r24
    2928:	cd 01       	movw	r24, r26
    292a:	0e 94 c9 1a 	call	0x3592	; 0x3592 <prvAddCurrentTaskToDelayedList>
    292e:	0e 94 ff 14 	call	0x29fe	; 0x29fe <xTaskResumeAll>
    2932:	89 83       	std	Y+1, r24	; 0x01
    2934:	89 81       	ldd	r24, Y+1	; 0x01
    2936:	88 23       	and	r24, r24
    2938:	11 f4       	brne	.+4      	; 0x293e <vTaskDelay+0x4e>
    293a:	0e 94 86 0b 	call	0x170c	; 0x170c <vPortYield>
    293e:	00 00       	nop
    2940:	25 96       	adiw	r28, 0x05	; 5
    2942:	cd bf       	out	0x3d, r28	; 61
    2944:	de bf       	out	0x3e, r29	; 62
    2946:	df 91       	pop	r29
    2948:	cf 91       	pop	r28
    294a:	08 95       	ret

0000294c <vTaskStartScheduler>:
    294c:	ef 92       	push	r14
    294e:	ff 92       	push	r15
    2950:	0f 93       	push	r16
    2952:	cf 93       	push	r28
    2954:	df 93       	push	r29
    2956:	1f 92       	push	r1
    2958:	cd b7       	in	r28, 0x3d	; 61
    295a:	de b7       	in	r29, 0x3e	; 62
    295c:	0f 2e       	mov	r0, r31
    295e:	fd ed       	ldi	r31, 0xDD	; 221
    2960:	ef 2e       	mov	r14, r31
    2962:	f0 e3       	ldi	r31, 0x30	; 48
    2964:	ff 2e       	mov	r15, r31
    2966:	f0 2d       	mov	r31, r0
    2968:	00 e0       	ldi	r16, 0x00	; 0
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	48 ec       	ldi	r20, 0xC8	; 200
    2970:	50 e0       	ldi	r21, 0x00	; 0
    2972:	64 e0       	ldi	r22, 0x04	; 4
    2974:	70 e2       	ldi	r23, 0x20	; 32
    2976:	89 ed       	ldi	r24, 0xD9	; 217
    2978:	99 e1       	ldi	r25, 0x19	; 25
    297a:	0e 94 ed 11 	call	0x23da	; 0x23da <xTaskCreate>
    297e:	89 83       	std	Y+1, r24	; 0x01
    2980:	89 81       	ldd	r24, Y+1	; 0x01
    2982:	81 30       	cpi	r24, 0x01	; 1
    2984:	19 f4       	brne	.+6      	; 0x298c <vTaskStartScheduler+0x40>
    2986:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <xTimerCreateTimerTask>
    298a:	89 83       	std	Y+1, r24	; 0x01
    298c:	89 81       	ldd	r24, Y+1	; 0x01
    298e:	81 30       	cpi	r24, 0x01	; 1
    2990:	09 f5       	brne	.+66     	; 0x29d4 <vTaskStartScheduler+0x88>
    2992:	80 ea       	ldi	r24, 0xA0	; 160
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	20 ea       	ldi	r18, 0xA0	; 160
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	f9 01       	movw	r30, r18
    299c:	22 81       	ldd	r18, Z+2	; 0x02
    299e:	28 7f       	andi	r18, 0xF8	; 248
    29a0:	fc 01       	movw	r30, r24
    29a2:	22 83       	std	Z+2, r18	; 0x02
    29a4:	8f ef       	ldi	r24, 0xFF	; 255
    29a6:	9f ef       	ldi	r25, 0xFF	; 255
    29a8:	dc 01       	movw	r26, r24
    29aa:	80 93 d9 30 	sts	0x30D9, r24	; 0x8030d9 <xNextTaskUnblockTime>
    29ae:	90 93 da 30 	sts	0x30DA, r25	; 0x8030da <xNextTaskUnblockTime+0x1>
    29b2:	a0 93 db 30 	sts	0x30DB, r26	; 0x8030db <xNextTaskUnblockTime+0x2>
    29b6:	b0 93 dc 30 	sts	0x30DC, r27	; 0x8030dc <xNextTaskUnblockTime+0x3>
    29ba:	81 e0       	ldi	r24, 0x01	; 1
    29bc:	80 93 d4 30 	sts	0x30D4, r24	; 0x8030d4 <xSchedulerRunning>
    29c0:	10 92 cf 30 	sts	0x30CF, r1	; 0x8030cf <xTickCount>
    29c4:	10 92 d0 30 	sts	0x30D0, r1	; 0x8030d0 <xTickCount+0x1>
    29c8:	10 92 d1 30 	sts	0x30D1, r1	; 0x8030d1 <xTickCount+0x2>
    29cc:	10 92 d2 30 	sts	0x30D2, r1	; 0x8030d2 <xTickCount+0x3>
    29d0:	0e 94 4e 0b 	call	0x169c	; 0x169c <xPortStartScheduler>
    29d4:	00 00       	nop
    29d6:	0f 90       	pop	r0
    29d8:	df 91       	pop	r29
    29da:	cf 91       	pop	r28
    29dc:	0f 91       	pop	r16
    29de:	ff 90       	pop	r15
    29e0:	ef 90       	pop	r14
    29e2:	08 95       	ret

000029e4 <vTaskSuspendAll>:
    29e4:	cf 93       	push	r28
    29e6:	df 93       	push	r29
    29e8:	cd b7       	in	r28, 0x3d	; 61
    29ea:	de b7       	in	r29, 0x3e	; 62
    29ec:	80 91 df 30 	lds	r24, 0x30DF	; 0x8030df <uxSchedulerSuspended>
    29f0:	8f 5f       	subi	r24, 0xFF	; 255
    29f2:	80 93 df 30 	sts	0x30DF, r24	; 0x8030df <uxSchedulerSuspended>
    29f6:	00 00       	nop
    29f8:	df 91       	pop	r29
    29fa:	cf 91       	pop	r28
    29fc:	08 95       	ret

000029fe <xTaskResumeAll>:
    29fe:	cf 93       	push	r28
    2a00:	df 93       	push	r29
    2a02:	00 d0       	rcall	.+0      	; 0x2a04 <xTaskResumeAll+0x6>
    2a04:	1f 92       	push	r1
    2a06:	cd b7       	in	r28, 0x3d	; 61
    2a08:	de b7       	in	r29, 0x3e	; 62
    2a0a:	19 82       	std	Y+1, r1	; 0x01
    2a0c:	1a 82       	std	Y+2, r1	; 0x02
    2a0e:	1b 82       	std	Y+3, r1	; 0x03
    2a10:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2a14:	ff 93       	push	r31
    2a16:	f8 7f       	andi	r31, 0xF8	; 248
    2a18:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2a1c:	80 91 df 30 	lds	r24, 0x30DF	; 0x8030df <uxSchedulerSuspended>
    2a20:	81 50       	subi	r24, 0x01	; 1
    2a22:	80 93 df 30 	sts	0x30DF, r24	; 0x8030df <uxSchedulerSuspended>
    2a26:	80 91 df 30 	lds	r24, 0x30DF	; 0x8030df <uxSchedulerSuspended>
    2a2a:	88 23       	and	r24, r24
    2a2c:	09 f0       	breq	.+2      	; 0x2a30 <xTaskResumeAll+0x32>
    2a2e:	74 c0       	rjmp	.+232    	; 0x2b18 <xTaskResumeAll+0x11a>
    2a30:	80 91 ce 30 	lds	r24, 0x30CE	; 0x8030ce <uxCurrentNumberOfTasks>
    2a34:	88 23       	and	r24, r24
    2a36:	09 f4       	brne	.+2      	; 0x2a3a <xTaskResumeAll+0x3c>
    2a38:	6f c0       	rjmp	.+222    	; 0x2b18 <xTaskResumeAll+0x11a>
    2a3a:	46 c0       	rjmp	.+140    	; 0x2ac8 <xTaskResumeAll+0xca>
    2a3c:	80 91 bf 30 	lds	r24, 0x30BF	; 0x8030bf <xPendingReadyList+0x7>
    2a40:	90 91 c0 30 	lds	r25, 0x30C0	; 0x8030c0 <xPendingReadyList+0x8>
    2a44:	fc 01       	movw	r30, r24
    2a46:	80 85       	ldd	r24, Z+8	; 0x08
    2a48:	91 85       	ldd	r25, Z+9	; 0x09
    2a4a:	89 83       	std	Y+1, r24	; 0x01
    2a4c:	9a 83       	std	Y+2, r25	; 0x02
    2a4e:	89 81       	ldd	r24, Y+1	; 0x01
    2a50:	9a 81       	ldd	r25, Y+2	; 0x02
    2a52:	0e 96       	adiw	r24, 0x0e	; 14
    2a54:	0e 94 08 09 	call	0x1210	; 0x1210 <uxListRemove>
    2a58:	89 81       	ldd	r24, Y+1	; 0x01
    2a5a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a5c:	02 96       	adiw	r24, 0x02	; 2
    2a5e:	0e 94 08 09 	call	0x1210	; 0x1210 <uxListRemove>
    2a62:	89 81       	ldd	r24, Y+1	; 0x01
    2a64:	9a 81       	ldd	r25, Y+2	; 0x02
    2a66:	fc 01       	movw	r30, r24
    2a68:	92 8d       	ldd	r25, Z+26	; 0x1a
    2a6a:	80 91 d3 30 	lds	r24, 0x30D3	; 0x8030d3 <uxTopReadyPriority>
    2a6e:	89 17       	cp	r24, r25
    2a70:	30 f4       	brcc	.+12     	; 0x2a7e <xTaskResumeAll+0x80>
    2a72:	89 81       	ldd	r24, Y+1	; 0x01
    2a74:	9a 81       	ldd	r25, Y+2	; 0x02
    2a76:	fc 01       	movw	r30, r24
    2a78:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a7a:	80 93 d3 30 	sts	0x30D3, r24	; 0x8030d3 <uxTopReadyPriority>
    2a7e:	89 81       	ldd	r24, Y+1	; 0x01
    2a80:	9a 81       	ldd	r25, Y+2	; 0x02
    2a82:	ac 01       	movw	r20, r24
    2a84:	4e 5f       	subi	r20, 0xFE	; 254
    2a86:	5f 4f       	sbci	r21, 0xFF	; 255
    2a88:	89 81       	ldd	r24, Y+1	; 0x01
    2a8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a8c:	fc 01       	movw	r30, r24
    2a8e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a90:	28 2f       	mov	r18, r24
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	6b e0       	ldi	r22, 0x0B	; 11
    2a96:	62 9f       	mul	r22, r18
    2a98:	c0 01       	movw	r24, r0
    2a9a:	63 9f       	mul	r22, r19
    2a9c:	90 0d       	add	r25, r0
    2a9e:	11 24       	eor	r1, r1
    2aa0:	8e 58       	subi	r24, 0x8E	; 142
    2aa2:	9f 4c       	sbci	r25, 0xCF	; 207
    2aa4:	ba 01       	movw	r22, r20
    2aa6:	0e 94 3c 08 	call	0x1078	; 0x1078 <vListInsertEnd>
    2aaa:	89 81       	ldd	r24, Y+1	; 0x01
    2aac:	9a 81       	ldd	r25, Y+2	; 0x02
    2aae:	fc 01       	movw	r30, r24
    2ab0:	22 8d       	ldd	r18, Z+26	; 0x1a
    2ab2:	80 91 70 30 	lds	r24, 0x3070	; 0x803070 <pxCurrentTCB>
    2ab6:	90 91 71 30 	lds	r25, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    2aba:	fc 01       	movw	r30, r24
    2abc:	82 8d       	ldd	r24, Z+26	; 0x1a
    2abe:	28 17       	cp	r18, r24
    2ac0:	18 f0       	brcs	.+6      	; 0x2ac8 <xTaskResumeAll+0xca>
    2ac2:	81 e0       	ldi	r24, 0x01	; 1
    2ac4:	80 93 d6 30 	sts	0x30D6, r24	; 0x8030d6 <xYieldPending>
    2ac8:	80 91 b8 30 	lds	r24, 0x30B8	; 0x8030b8 <xPendingReadyList>
    2acc:	88 23       	and	r24, r24
    2ace:	09 f0       	breq	.+2      	; 0x2ad2 <xTaskResumeAll+0xd4>
    2ad0:	b5 cf       	rjmp	.-150    	; 0x2a3c <xTaskResumeAll+0x3e>
    2ad2:	89 81       	ldd	r24, Y+1	; 0x01
    2ad4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad6:	89 2b       	or	r24, r25
    2ad8:	11 f0       	breq	.+4      	; 0x2ade <xTaskResumeAll+0xe0>
    2ada:	0e 94 2f 1a 	call	0x345e	; 0x345e <prvResetNextTaskUnblockTime>
    2ade:	80 91 d5 30 	lds	r24, 0x30D5	; 0x8030d5 <uxPendedTicks>
    2ae2:	8c 83       	std	Y+4, r24	; 0x04
    2ae4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ae6:	88 23       	and	r24, r24
    2ae8:	79 f0       	breq	.+30     	; 0x2b08 <xTaskResumeAll+0x10a>
    2aea:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <xTaskIncrementTick>
    2aee:	88 23       	and	r24, r24
    2af0:	19 f0       	breq	.+6      	; 0x2af8 <xTaskResumeAll+0xfa>
    2af2:	81 e0       	ldi	r24, 0x01	; 1
    2af4:	80 93 d6 30 	sts	0x30D6, r24	; 0x8030d6 <xYieldPending>
    2af8:	8c 81       	ldd	r24, Y+4	; 0x04
    2afa:	81 50       	subi	r24, 0x01	; 1
    2afc:	8c 83       	std	Y+4, r24	; 0x04
    2afe:	8c 81       	ldd	r24, Y+4	; 0x04
    2b00:	88 23       	and	r24, r24
    2b02:	99 f7       	brne	.-26     	; 0x2aea <xTaskResumeAll+0xec>
    2b04:	10 92 d5 30 	sts	0x30D5, r1	; 0x8030d5 <uxPendedTicks>
    2b08:	80 91 d6 30 	lds	r24, 0x30D6	; 0x8030d6 <xYieldPending>
    2b0c:	88 23       	and	r24, r24
    2b0e:	21 f0       	breq	.+8      	; 0x2b18 <xTaskResumeAll+0x11a>
    2b10:	81 e0       	ldi	r24, 0x01	; 1
    2b12:	8b 83       	std	Y+3, r24	; 0x03
    2b14:	0e 94 86 0b 	call	0x170c	; 0x170c <vPortYield>
    2b18:	ff 91       	pop	r31
    2b1a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b20:	24 96       	adiw	r28, 0x04	; 4
    2b22:	cd bf       	out	0x3d, r28	; 61
    2b24:	de bf       	out	0x3e, r29	; 62
    2b26:	df 91       	pop	r29
    2b28:	cf 91       	pop	r28
    2b2a:	08 95       	ret

00002b2c <xTaskGetTickCount>:
    2b2c:	cf 93       	push	r28
    2b2e:	df 93       	push	r29
    2b30:	00 d0       	rcall	.+0      	; 0x2b32 <xTaskGetTickCount+0x6>
    2b32:	1f 92       	push	r1
    2b34:	cd b7       	in	r28, 0x3d	; 61
    2b36:	de b7       	in	r29, 0x3e	; 62
    2b38:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2b3c:	ff 93       	push	r31
    2b3e:	f8 7f       	andi	r31, 0xF8	; 248
    2b40:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2b44:	80 91 cf 30 	lds	r24, 0x30CF	; 0x8030cf <xTickCount>
    2b48:	90 91 d0 30 	lds	r25, 0x30D0	; 0x8030d0 <xTickCount+0x1>
    2b4c:	a0 91 d1 30 	lds	r26, 0x30D1	; 0x8030d1 <xTickCount+0x2>
    2b50:	b0 91 d2 30 	lds	r27, 0x30D2	; 0x8030d2 <xTickCount+0x3>
    2b54:	89 83       	std	Y+1, r24	; 0x01
    2b56:	9a 83       	std	Y+2, r25	; 0x02
    2b58:	ab 83       	std	Y+3, r26	; 0x03
    2b5a:	bc 83       	std	Y+4, r27	; 0x04
    2b5c:	ff 91       	pop	r31
    2b5e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2b62:	89 81       	ldd	r24, Y+1	; 0x01
    2b64:	9a 81       	ldd	r25, Y+2	; 0x02
    2b66:	ab 81       	ldd	r26, Y+3	; 0x03
    2b68:	bc 81       	ldd	r27, Y+4	; 0x04
    2b6a:	bc 01       	movw	r22, r24
    2b6c:	cd 01       	movw	r24, r26
    2b6e:	24 96       	adiw	r28, 0x04	; 4
    2b70:	cd bf       	out	0x3d, r28	; 61
    2b72:	de bf       	out	0x3e, r29	; 62
    2b74:	df 91       	pop	r29
    2b76:	cf 91       	pop	r28
    2b78:	08 95       	ret

00002b7a <xTaskIncrementTick>:
    2b7a:	cf 93       	push	r28
    2b7c:	df 93       	push	r29
    2b7e:	cd b7       	in	r28, 0x3d	; 61
    2b80:	de b7       	in	r29, 0x3e	; 62
    2b82:	2d 97       	sbiw	r28, 0x0d	; 13
    2b84:	cd bf       	out	0x3d, r28	; 61
    2b86:	de bf       	out	0x3e, r29	; 62
    2b88:	19 82       	std	Y+1, r1	; 0x01
    2b8a:	80 91 df 30 	lds	r24, 0x30DF	; 0x8030df <uxSchedulerSuspended>
    2b8e:	88 23       	and	r24, r24
    2b90:	09 f0       	breq	.+2      	; 0x2b94 <xTaskIncrementTick+0x1a>
    2b92:	f1 c0       	rjmp	.+482    	; 0x2d76 <xTaskIncrementTick+0x1fc>
    2b94:	80 91 cf 30 	lds	r24, 0x30CF	; 0x8030cf <xTickCount>
    2b98:	90 91 d0 30 	lds	r25, 0x30D0	; 0x8030d0 <xTickCount+0x1>
    2b9c:	a0 91 d1 30 	lds	r26, 0x30D1	; 0x8030d1 <xTickCount+0x2>
    2ba0:	b0 91 d2 30 	lds	r27, 0x30D2	; 0x8030d2 <xTickCount+0x3>
    2ba4:	01 96       	adiw	r24, 0x01	; 1
    2ba6:	a1 1d       	adc	r26, r1
    2ba8:	b1 1d       	adc	r27, r1
    2baa:	8a 83       	std	Y+2, r24	; 0x02
    2bac:	9b 83       	std	Y+3, r25	; 0x03
    2bae:	ac 83       	std	Y+4, r26	; 0x04
    2bb0:	bd 83       	std	Y+5, r27	; 0x05
    2bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb4:	9b 81       	ldd	r25, Y+3	; 0x03
    2bb6:	ac 81       	ldd	r26, Y+4	; 0x04
    2bb8:	bd 81       	ldd	r27, Y+5	; 0x05
    2bba:	80 93 cf 30 	sts	0x30CF, r24	; 0x8030cf <xTickCount>
    2bbe:	90 93 d0 30 	sts	0x30D0, r25	; 0x8030d0 <xTickCount+0x1>
    2bc2:	a0 93 d1 30 	sts	0x30D1, r26	; 0x8030d1 <xTickCount+0x2>
    2bc6:	b0 93 d2 30 	sts	0x30D2, r27	; 0x8030d2 <xTickCount+0x3>
    2bca:	8a 81       	ldd	r24, Y+2	; 0x02
    2bcc:	9b 81       	ldd	r25, Y+3	; 0x03
    2bce:	ac 81       	ldd	r26, Y+4	; 0x04
    2bd0:	bd 81       	ldd	r27, Y+5	; 0x05
    2bd2:	89 2b       	or	r24, r25
    2bd4:	8a 2b       	or	r24, r26
    2bd6:	8b 2b       	or	r24, r27
    2bd8:	d9 f4       	brne	.+54     	; 0x2c10 <xTaskIncrementTick+0x96>
    2bda:	80 91 b4 30 	lds	r24, 0x30B4	; 0x8030b4 <pxDelayedTaskList>
    2bde:	90 91 b5 30 	lds	r25, 0x30B5	; 0x8030b5 <pxDelayedTaskList+0x1>
    2be2:	8e 83       	std	Y+6, r24	; 0x06
    2be4:	9f 83       	std	Y+7, r25	; 0x07
    2be6:	80 91 b6 30 	lds	r24, 0x30B6	; 0x8030b6 <pxOverflowDelayedTaskList>
    2bea:	90 91 b7 30 	lds	r25, 0x30B7	; 0x8030b7 <pxOverflowDelayedTaskList+0x1>
    2bee:	80 93 b4 30 	sts	0x30B4, r24	; 0x8030b4 <pxDelayedTaskList>
    2bf2:	90 93 b5 30 	sts	0x30B5, r25	; 0x8030b5 <pxDelayedTaskList+0x1>
    2bf6:	8e 81       	ldd	r24, Y+6	; 0x06
    2bf8:	9f 81       	ldd	r25, Y+7	; 0x07
    2bfa:	80 93 b6 30 	sts	0x30B6, r24	; 0x8030b6 <pxOverflowDelayedTaskList>
    2bfe:	90 93 b7 30 	sts	0x30B7, r25	; 0x8030b7 <pxOverflowDelayedTaskList+0x1>
    2c02:	80 91 d7 30 	lds	r24, 0x30D7	; 0x8030d7 <xNumOfOverflows>
    2c06:	8f 5f       	subi	r24, 0xFF	; 255
    2c08:	80 93 d7 30 	sts	0x30D7, r24	; 0x8030d7 <xNumOfOverflows>
    2c0c:	0e 94 2f 1a 	call	0x345e	; 0x345e <prvResetNextTaskUnblockTime>
    2c10:	80 91 d9 30 	lds	r24, 0x30D9	; 0x8030d9 <xNextTaskUnblockTime>
    2c14:	90 91 da 30 	lds	r25, 0x30DA	; 0x8030da <xNextTaskUnblockTime+0x1>
    2c18:	a0 91 db 30 	lds	r26, 0x30DB	; 0x8030db <xNextTaskUnblockTime+0x2>
    2c1c:	b0 91 dc 30 	lds	r27, 0x30DC	; 0x8030dc <xNextTaskUnblockTime+0x3>
    2c20:	2a 81       	ldd	r18, Y+2	; 0x02
    2c22:	3b 81       	ldd	r19, Y+3	; 0x03
    2c24:	4c 81       	ldd	r20, Y+4	; 0x04
    2c26:	5d 81       	ldd	r21, Y+5	; 0x05
    2c28:	28 17       	cp	r18, r24
    2c2a:	39 07       	cpc	r19, r25
    2c2c:	4a 07       	cpc	r20, r26
    2c2e:	5b 07       	cpc	r21, r27
    2c30:	08 f4       	brcc	.+2      	; 0x2c34 <xTaskIncrementTick+0xba>
    2c32:	8a c0       	rjmp	.+276    	; 0x2d48 <xTaskIncrementTick+0x1ce>
    2c34:	80 91 b4 30 	lds	r24, 0x30B4	; 0x8030b4 <pxDelayedTaskList>
    2c38:	90 91 b5 30 	lds	r25, 0x30B5	; 0x8030b5 <pxDelayedTaskList+0x1>
    2c3c:	fc 01       	movw	r30, r24
    2c3e:	80 81       	ld	r24, Z
    2c40:	88 23       	and	r24, r24
    2c42:	61 f4       	brne	.+24     	; 0x2c5c <xTaskIncrementTick+0xe2>
    2c44:	8f ef       	ldi	r24, 0xFF	; 255
    2c46:	9f ef       	ldi	r25, 0xFF	; 255
    2c48:	dc 01       	movw	r26, r24
    2c4a:	80 93 d9 30 	sts	0x30D9, r24	; 0x8030d9 <xNextTaskUnblockTime>
    2c4e:	90 93 da 30 	sts	0x30DA, r25	; 0x8030da <xNextTaskUnblockTime+0x1>
    2c52:	a0 93 db 30 	sts	0x30DB, r26	; 0x8030db <xNextTaskUnblockTime+0x2>
    2c56:	b0 93 dc 30 	sts	0x30DC, r27	; 0x8030dc <xNextTaskUnblockTime+0x3>
    2c5a:	76 c0       	rjmp	.+236    	; 0x2d48 <xTaskIncrementTick+0x1ce>
    2c5c:	80 91 b4 30 	lds	r24, 0x30B4	; 0x8030b4 <pxDelayedTaskList>
    2c60:	90 91 b5 30 	lds	r25, 0x30B5	; 0x8030b5 <pxDelayedTaskList+0x1>
    2c64:	fc 01       	movw	r30, r24
    2c66:	87 81       	ldd	r24, Z+7	; 0x07
    2c68:	90 85       	ldd	r25, Z+8	; 0x08
    2c6a:	fc 01       	movw	r30, r24
    2c6c:	80 85       	ldd	r24, Z+8	; 0x08
    2c6e:	91 85       	ldd	r25, Z+9	; 0x09
    2c70:	88 87       	std	Y+8, r24	; 0x08
    2c72:	99 87       	std	Y+9, r25	; 0x09
    2c74:	88 85       	ldd	r24, Y+8	; 0x08
    2c76:	99 85       	ldd	r25, Y+9	; 0x09
    2c78:	fc 01       	movw	r30, r24
    2c7a:	82 81       	ldd	r24, Z+2	; 0x02
    2c7c:	93 81       	ldd	r25, Z+3	; 0x03
    2c7e:	a4 81       	ldd	r26, Z+4	; 0x04
    2c80:	b5 81       	ldd	r27, Z+5	; 0x05
    2c82:	8a 87       	std	Y+10, r24	; 0x0a
    2c84:	9b 87       	std	Y+11, r25	; 0x0b
    2c86:	ac 87       	std	Y+12, r26	; 0x0c
    2c88:	bd 87       	std	Y+13, r27	; 0x0d
    2c8a:	2a 81       	ldd	r18, Y+2	; 0x02
    2c8c:	3b 81       	ldd	r19, Y+3	; 0x03
    2c8e:	4c 81       	ldd	r20, Y+4	; 0x04
    2c90:	5d 81       	ldd	r21, Y+5	; 0x05
    2c92:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c94:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c96:	ac 85       	ldd	r26, Y+12	; 0x0c
    2c98:	bd 85       	ldd	r27, Y+13	; 0x0d
    2c9a:	28 17       	cp	r18, r24
    2c9c:	39 07       	cpc	r19, r25
    2c9e:	4a 07       	cpc	r20, r26
    2ca0:	5b 07       	cpc	r21, r27
    2ca2:	68 f4       	brcc	.+26     	; 0x2cbe <xTaskIncrementTick+0x144>
    2ca4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ca6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ca8:	ac 85       	ldd	r26, Y+12	; 0x0c
    2caa:	bd 85       	ldd	r27, Y+13	; 0x0d
    2cac:	80 93 d9 30 	sts	0x30D9, r24	; 0x8030d9 <xNextTaskUnblockTime>
    2cb0:	90 93 da 30 	sts	0x30DA, r25	; 0x8030da <xNextTaskUnblockTime+0x1>
    2cb4:	a0 93 db 30 	sts	0x30DB, r26	; 0x8030db <xNextTaskUnblockTime+0x2>
    2cb8:	b0 93 dc 30 	sts	0x30DC, r27	; 0x8030dc <xNextTaskUnblockTime+0x3>
    2cbc:	45 c0       	rjmp	.+138    	; 0x2d48 <xTaskIncrementTick+0x1ce>
    2cbe:	88 85       	ldd	r24, Y+8	; 0x08
    2cc0:	99 85       	ldd	r25, Y+9	; 0x09
    2cc2:	02 96       	adiw	r24, 0x02	; 2
    2cc4:	0e 94 08 09 	call	0x1210	; 0x1210 <uxListRemove>
    2cc8:	88 85       	ldd	r24, Y+8	; 0x08
    2cca:	99 85       	ldd	r25, Y+9	; 0x09
    2ccc:	fc 01       	movw	r30, r24
    2cce:	80 8d       	ldd	r24, Z+24	; 0x18
    2cd0:	91 8d       	ldd	r25, Z+25	; 0x19
    2cd2:	89 2b       	or	r24, r25
    2cd4:	29 f0       	breq	.+10     	; 0x2ce0 <xTaskIncrementTick+0x166>
    2cd6:	88 85       	ldd	r24, Y+8	; 0x08
    2cd8:	99 85       	ldd	r25, Y+9	; 0x09
    2cda:	0e 96       	adiw	r24, 0x0e	; 14
    2cdc:	0e 94 08 09 	call	0x1210	; 0x1210 <uxListRemove>
    2ce0:	88 85       	ldd	r24, Y+8	; 0x08
    2ce2:	99 85       	ldd	r25, Y+9	; 0x09
    2ce4:	fc 01       	movw	r30, r24
    2ce6:	92 8d       	ldd	r25, Z+26	; 0x1a
    2ce8:	80 91 d3 30 	lds	r24, 0x30D3	; 0x8030d3 <uxTopReadyPriority>
    2cec:	89 17       	cp	r24, r25
    2cee:	30 f4       	brcc	.+12     	; 0x2cfc <xTaskIncrementTick+0x182>
    2cf0:	88 85       	ldd	r24, Y+8	; 0x08
    2cf2:	99 85       	ldd	r25, Y+9	; 0x09
    2cf4:	fc 01       	movw	r30, r24
    2cf6:	82 8d       	ldd	r24, Z+26	; 0x1a
    2cf8:	80 93 d3 30 	sts	0x30D3, r24	; 0x8030d3 <uxTopReadyPriority>
    2cfc:	88 85       	ldd	r24, Y+8	; 0x08
    2cfe:	99 85       	ldd	r25, Y+9	; 0x09
    2d00:	ac 01       	movw	r20, r24
    2d02:	4e 5f       	subi	r20, 0xFE	; 254
    2d04:	5f 4f       	sbci	r21, 0xFF	; 255
    2d06:	88 85       	ldd	r24, Y+8	; 0x08
    2d08:	99 85       	ldd	r25, Y+9	; 0x09
    2d0a:	fc 01       	movw	r30, r24
    2d0c:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d0e:	28 2f       	mov	r18, r24
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	6b e0       	ldi	r22, 0x0B	; 11
    2d14:	62 9f       	mul	r22, r18
    2d16:	c0 01       	movw	r24, r0
    2d18:	63 9f       	mul	r22, r19
    2d1a:	90 0d       	add	r25, r0
    2d1c:	11 24       	eor	r1, r1
    2d1e:	8e 58       	subi	r24, 0x8E	; 142
    2d20:	9f 4c       	sbci	r25, 0xCF	; 207
    2d22:	ba 01       	movw	r22, r20
    2d24:	0e 94 3c 08 	call	0x1078	; 0x1078 <vListInsertEnd>
    2d28:	88 85       	ldd	r24, Y+8	; 0x08
    2d2a:	99 85       	ldd	r25, Y+9	; 0x09
    2d2c:	fc 01       	movw	r30, r24
    2d2e:	22 8d       	ldd	r18, Z+26	; 0x1a
    2d30:	80 91 70 30 	lds	r24, 0x3070	; 0x803070 <pxCurrentTCB>
    2d34:	90 91 71 30 	lds	r25, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    2d38:	fc 01       	movw	r30, r24
    2d3a:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d3c:	28 17       	cp	r18, r24
    2d3e:	08 f4       	brcc	.+2      	; 0x2d42 <xTaskIncrementTick+0x1c8>
    2d40:	79 cf       	rjmp	.-270    	; 0x2c34 <xTaskIncrementTick+0xba>
    2d42:	81 e0       	ldi	r24, 0x01	; 1
    2d44:	89 83       	std	Y+1, r24	; 0x01
    2d46:	76 cf       	rjmp	.-276    	; 0x2c34 <xTaskIncrementTick+0xba>
    2d48:	80 91 70 30 	lds	r24, 0x3070	; 0x803070 <pxCurrentTCB>
    2d4c:	90 91 71 30 	lds	r25, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    2d50:	fc 01       	movw	r30, r24
    2d52:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d54:	28 2f       	mov	r18, r24
    2d56:	30 e0       	ldi	r19, 0x00	; 0
    2d58:	4b e0       	ldi	r20, 0x0B	; 11
    2d5a:	42 9f       	mul	r20, r18
    2d5c:	c0 01       	movw	r24, r0
    2d5e:	43 9f       	mul	r20, r19
    2d60:	90 0d       	add	r25, r0
    2d62:	11 24       	eor	r1, r1
    2d64:	8e 58       	subi	r24, 0x8E	; 142
    2d66:	9f 4c       	sbci	r25, 0xCF	; 207
    2d68:	fc 01       	movw	r30, r24
    2d6a:	80 81       	ld	r24, Z
    2d6c:	82 30       	cpi	r24, 0x02	; 2
    2d6e:	40 f0       	brcs	.+16     	; 0x2d80 <xTaskIncrementTick+0x206>
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	89 83       	std	Y+1, r24	; 0x01
    2d74:	05 c0       	rjmp	.+10     	; 0x2d80 <xTaskIncrementTick+0x206>
    2d76:	80 91 d5 30 	lds	r24, 0x30D5	; 0x8030d5 <uxPendedTicks>
    2d7a:	8f 5f       	subi	r24, 0xFF	; 255
    2d7c:	80 93 d5 30 	sts	0x30D5, r24	; 0x8030d5 <uxPendedTicks>
    2d80:	80 91 d6 30 	lds	r24, 0x30D6	; 0x8030d6 <xYieldPending>
    2d84:	88 23       	and	r24, r24
    2d86:	11 f0       	breq	.+4      	; 0x2d8c <xTaskIncrementTick+0x212>
    2d88:	81 e0       	ldi	r24, 0x01	; 1
    2d8a:	89 83       	std	Y+1, r24	; 0x01
    2d8c:	89 81       	ldd	r24, Y+1	; 0x01
    2d8e:	2d 96       	adiw	r28, 0x0d	; 13
    2d90:	cd bf       	out	0x3d, r28	; 61
    2d92:	de bf       	out	0x3e, r29	; 62
    2d94:	df 91       	pop	r29
    2d96:	cf 91       	pop	r28
    2d98:	08 95       	ret

00002d9a <vTaskSwitchContext>:
    2d9a:	cf 93       	push	r28
    2d9c:	df 93       	push	r29
    2d9e:	cd b7       	in	r28, 0x3d	; 61
    2da0:	de b7       	in	r29, 0x3e	; 62
    2da2:	29 97       	sbiw	r28, 0x09	; 9
    2da4:	cd bf       	out	0x3d, r28	; 61
    2da6:	de bf       	out	0x3e, r29	; 62
    2da8:	80 91 df 30 	lds	r24, 0x30DF	; 0x8030df <uxSchedulerSuspended>
    2dac:	88 23       	and	r24, r24
    2dae:	21 f0       	breq	.+8      	; 0x2db8 <vTaskSwitchContext+0x1e>
    2db0:	81 e0       	ldi	r24, 0x01	; 1
    2db2:	80 93 d6 30 	sts	0x30D6, r24	; 0x8030d6 <xYieldPending>
    2db6:	ba c0       	rjmp	.+372    	; 0x2f2c <vTaskSwitchContext+0x192>
    2db8:	10 92 d6 30 	sts	0x30D6, r1	; 0x8030d6 <xYieldPending>
    2dbc:	80 91 70 30 	lds	r24, 0x3070	; 0x803070 <pxCurrentTCB>
    2dc0:	90 91 71 30 	lds	r25, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    2dc4:	fc 01       	movw	r30, r24
    2dc6:	83 8d       	ldd	r24, Z+27	; 0x1b
    2dc8:	94 8d       	ldd	r25, Z+28	; 0x1c
    2dca:	8a 83       	std	Y+2, r24	; 0x02
    2dcc:	9b 83       	std	Y+3, r25	; 0x03
    2dce:	85 ea       	ldi	r24, 0xA5	; 165
    2dd0:	95 ea       	ldi	r25, 0xA5	; 165
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	8c 83       	std	Y+4, r24	; 0x04
    2dd6:	9d 83       	std	Y+5, r25	; 0x05
    2dd8:	ae 83       	std	Y+6, r26	; 0x06
    2dda:	bf 83       	std	Y+7, r27	; 0x07
    2ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dde:	9b 81       	ldd	r25, Y+3	; 0x03
    2de0:	fc 01       	movw	r30, r24
    2de2:	20 81       	ld	r18, Z
    2de4:	31 81       	ldd	r19, Z+1	; 0x01
    2de6:	42 81       	ldd	r20, Z+2	; 0x02
    2de8:	53 81       	ldd	r21, Z+3	; 0x03
    2dea:	8c 81       	ldd	r24, Y+4	; 0x04
    2dec:	9d 81       	ldd	r25, Y+5	; 0x05
    2dee:	ae 81       	ldd	r26, Y+6	; 0x06
    2df0:	bf 81       	ldd	r27, Y+7	; 0x07
    2df2:	28 17       	cp	r18, r24
    2df4:	39 07       	cpc	r19, r25
    2df6:	4a 07       	cpc	r20, r26
    2df8:	5b 07       	cpc	r21, r27
    2dfa:	99 f5       	brne	.+102    	; 0x2e62 <vTaskSwitchContext+0xc8>
    2dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfe:	9b 81       	ldd	r25, Y+3	; 0x03
    2e00:	04 96       	adiw	r24, 0x04	; 4
    2e02:	fc 01       	movw	r30, r24
    2e04:	20 81       	ld	r18, Z
    2e06:	31 81       	ldd	r19, Z+1	; 0x01
    2e08:	42 81       	ldd	r20, Z+2	; 0x02
    2e0a:	53 81       	ldd	r21, Z+3	; 0x03
    2e0c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e0e:	9d 81       	ldd	r25, Y+5	; 0x05
    2e10:	ae 81       	ldd	r26, Y+6	; 0x06
    2e12:	bf 81       	ldd	r27, Y+7	; 0x07
    2e14:	28 17       	cp	r18, r24
    2e16:	39 07       	cpc	r19, r25
    2e18:	4a 07       	cpc	r20, r26
    2e1a:	5b 07       	cpc	r21, r27
    2e1c:	11 f5       	brne	.+68     	; 0x2e62 <vTaskSwitchContext+0xc8>
    2e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e20:	9b 81       	ldd	r25, Y+3	; 0x03
    2e22:	08 96       	adiw	r24, 0x08	; 8
    2e24:	fc 01       	movw	r30, r24
    2e26:	20 81       	ld	r18, Z
    2e28:	31 81       	ldd	r19, Z+1	; 0x01
    2e2a:	42 81       	ldd	r20, Z+2	; 0x02
    2e2c:	53 81       	ldd	r21, Z+3	; 0x03
    2e2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2e30:	9d 81       	ldd	r25, Y+5	; 0x05
    2e32:	ae 81       	ldd	r26, Y+6	; 0x06
    2e34:	bf 81       	ldd	r27, Y+7	; 0x07
    2e36:	28 17       	cp	r18, r24
    2e38:	39 07       	cpc	r19, r25
    2e3a:	4a 07       	cpc	r20, r26
    2e3c:	5b 07       	cpc	r21, r27
    2e3e:	89 f4       	brne	.+34     	; 0x2e62 <vTaskSwitchContext+0xc8>
    2e40:	8a 81       	ldd	r24, Y+2	; 0x02
    2e42:	9b 81       	ldd	r25, Y+3	; 0x03
    2e44:	0c 96       	adiw	r24, 0x0c	; 12
    2e46:	fc 01       	movw	r30, r24
    2e48:	20 81       	ld	r18, Z
    2e4a:	31 81       	ldd	r19, Z+1	; 0x01
    2e4c:	42 81       	ldd	r20, Z+2	; 0x02
    2e4e:	53 81       	ldd	r21, Z+3	; 0x03
    2e50:	8c 81       	ldd	r24, Y+4	; 0x04
    2e52:	9d 81       	ldd	r25, Y+5	; 0x05
    2e54:	ae 81       	ldd	r26, Y+6	; 0x06
    2e56:	bf 81       	ldd	r27, Y+7	; 0x07
    2e58:	28 17       	cp	r18, r24
    2e5a:	39 07       	cpc	r19, r25
    2e5c:	4a 07       	cpc	r20, r26
    2e5e:	5b 07       	cpc	r21, r27
    2e60:	71 f0       	breq	.+28     	; 0x2e7e <vTaskSwitchContext+0xe4>
    2e62:	80 91 70 30 	lds	r24, 0x3070	; 0x803070 <pxCurrentTCB>
    2e66:	90 91 71 30 	lds	r25, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    2e6a:	9c 01       	movw	r18, r24
    2e6c:	23 5e       	subi	r18, 0xE3	; 227
    2e6e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e70:	80 91 70 30 	lds	r24, 0x3070	; 0x803070 <pxCurrentTCB>
    2e74:	90 91 71 30 	lds	r25, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    2e78:	b9 01       	movw	r22, r18
    2e7a:	0e 94 16 04 	call	0x82c	; 0x82c <vApplicationStackOverflowHook>
    2e7e:	80 91 d3 30 	lds	r24, 0x30D3	; 0x8030d3 <uxTopReadyPriority>
    2e82:	89 83       	std	Y+1, r24	; 0x01
    2e84:	03 c0       	rjmp	.+6      	; 0x2e8c <vTaskSwitchContext+0xf2>
    2e86:	89 81       	ldd	r24, Y+1	; 0x01
    2e88:	81 50       	subi	r24, 0x01	; 1
    2e8a:	89 83       	std	Y+1, r24	; 0x01
    2e8c:	89 81       	ldd	r24, Y+1	; 0x01
    2e8e:	28 2f       	mov	r18, r24
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	4b e0       	ldi	r20, 0x0B	; 11
    2e94:	42 9f       	mul	r20, r18
    2e96:	c0 01       	movw	r24, r0
    2e98:	43 9f       	mul	r20, r19
    2e9a:	90 0d       	add	r25, r0
    2e9c:	11 24       	eor	r1, r1
    2e9e:	8e 58       	subi	r24, 0x8E	; 142
    2ea0:	9f 4c       	sbci	r25, 0xCF	; 207
    2ea2:	fc 01       	movw	r30, r24
    2ea4:	80 81       	ld	r24, Z
    2ea6:	88 23       	and	r24, r24
    2ea8:	71 f3       	breq	.-36     	; 0x2e86 <vTaskSwitchContext+0xec>
    2eaa:	89 81       	ldd	r24, Y+1	; 0x01
    2eac:	28 2f       	mov	r18, r24
    2eae:	30 e0       	ldi	r19, 0x00	; 0
    2eb0:	4b e0       	ldi	r20, 0x0B	; 11
    2eb2:	42 9f       	mul	r20, r18
    2eb4:	c0 01       	movw	r24, r0
    2eb6:	43 9f       	mul	r20, r19
    2eb8:	90 0d       	add	r25, r0
    2eba:	11 24       	eor	r1, r1
    2ebc:	8e 58       	subi	r24, 0x8E	; 142
    2ebe:	9f 4c       	sbci	r25, 0xCF	; 207
    2ec0:	88 87       	std	Y+8, r24	; 0x08
    2ec2:	99 87       	std	Y+9, r25	; 0x09
    2ec4:	88 85       	ldd	r24, Y+8	; 0x08
    2ec6:	99 85       	ldd	r25, Y+9	; 0x09
    2ec8:	fc 01       	movw	r30, r24
    2eca:	81 81       	ldd	r24, Z+1	; 0x01
    2ecc:	92 81       	ldd	r25, Z+2	; 0x02
    2ece:	fc 01       	movw	r30, r24
    2ed0:	24 81       	ldd	r18, Z+4	; 0x04
    2ed2:	35 81       	ldd	r19, Z+5	; 0x05
    2ed4:	88 85       	ldd	r24, Y+8	; 0x08
    2ed6:	99 85       	ldd	r25, Y+9	; 0x09
    2ed8:	fc 01       	movw	r30, r24
    2eda:	21 83       	std	Z+1, r18	; 0x01
    2edc:	32 83       	std	Z+2, r19	; 0x02
    2ede:	88 85       	ldd	r24, Y+8	; 0x08
    2ee0:	99 85       	ldd	r25, Y+9	; 0x09
    2ee2:	fc 01       	movw	r30, r24
    2ee4:	21 81       	ldd	r18, Z+1	; 0x01
    2ee6:	32 81       	ldd	r19, Z+2	; 0x02
    2ee8:	88 85       	ldd	r24, Y+8	; 0x08
    2eea:	99 85       	ldd	r25, Y+9	; 0x09
    2eec:	03 96       	adiw	r24, 0x03	; 3
    2eee:	28 17       	cp	r18, r24
    2ef0:	39 07       	cpc	r19, r25
    2ef2:	69 f4       	brne	.+26     	; 0x2f0e <vTaskSwitchContext+0x174>
    2ef4:	88 85       	ldd	r24, Y+8	; 0x08
    2ef6:	99 85       	ldd	r25, Y+9	; 0x09
    2ef8:	fc 01       	movw	r30, r24
    2efa:	81 81       	ldd	r24, Z+1	; 0x01
    2efc:	92 81       	ldd	r25, Z+2	; 0x02
    2efe:	fc 01       	movw	r30, r24
    2f00:	24 81       	ldd	r18, Z+4	; 0x04
    2f02:	35 81       	ldd	r19, Z+5	; 0x05
    2f04:	88 85       	ldd	r24, Y+8	; 0x08
    2f06:	99 85       	ldd	r25, Y+9	; 0x09
    2f08:	fc 01       	movw	r30, r24
    2f0a:	21 83       	std	Z+1, r18	; 0x01
    2f0c:	32 83       	std	Z+2, r19	; 0x02
    2f0e:	88 85       	ldd	r24, Y+8	; 0x08
    2f10:	99 85       	ldd	r25, Y+9	; 0x09
    2f12:	fc 01       	movw	r30, r24
    2f14:	81 81       	ldd	r24, Z+1	; 0x01
    2f16:	92 81       	ldd	r25, Z+2	; 0x02
    2f18:	fc 01       	movw	r30, r24
    2f1a:	80 85       	ldd	r24, Z+8	; 0x08
    2f1c:	91 85       	ldd	r25, Z+9	; 0x09
    2f1e:	80 93 70 30 	sts	0x3070, r24	; 0x803070 <pxCurrentTCB>
    2f22:	90 93 71 30 	sts	0x3071, r25	; 0x803071 <pxCurrentTCB+0x1>
    2f26:	89 81       	ldd	r24, Y+1	; 0x01
    2f28:	80 93 d3 30 	sts	0x30D3, r24	; 0x8030d3 <uxTopReadyPriority>
    2f2c:	00 00       	nop
    2f2e:	29 96       	adiw	r28, 0x09	; 9
    2f30:	cd bf       	out	0x3d, r28	; 61
    2f32:	de bf       	out	0x3e, r29	; 62
    2f34:	df 91       	pop	r29
    2f36:	cf 91       	pop	r28
    2f38:	08 95       	ret

00002f3a <vTaskPlaceOnEventList>:
    2f3a:	cf 93       	push	r28
    2f3c:	df 93       	push	r29
    2f3e:	00 d0       	rcall	.+0      	; 0x2f40 <vTaskPlaceOnEventList+0x6>
    2f40:	00 d0       	rcall	.+0      	; 0x2f42 <vTaskPlaceOnEventList+0x8>
    2f42:	cd b7       	in	r28, 0x3d	; 61
    2f44:	de b7       	in	r29, 0x3e	; 62
    2f46:	89 83       	std	Y+1, r24	; 0x01
    2f48:	9a 83       	std	Y+2, r25	; 0x02
    2f4a:	4b 83       	std	Y+3, r20	; 0x03
    2f4c:	5c 83       	std	Y+4, r21	; 0x04
    2f4e:	6d 83       	std	Y+5, r22	; 0x05
    2f50:	7e 83       	std	Y+6, r23	; 0x06
    2f52:	80 91 70 30 	lds	r24, 0x3070	; 0x803070 <pxCurrentTCB>
    2f56:	90 91 71 30 	lds	r25, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    2f5a:	9c 01       	movw	r18, r24
    2f5c:	22 5f       	subi	r18, 0xF2	; 242
    2f5e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f60:	89 81       	ldd	r24, Y+1	; 0x01
    2f62:	9a 81       	ldd	r25, Y+2	; 0x02
    2f64:	b9 01       	movw	r22, r18
    2f66:	0e 94 87 08 	call	0x110e	; 0x110e <vListInsert>
    2f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f6e:	ad 81       	ldd	r26, Y+5	; 0x05
    2f70:	be 81       	ldd	r27, Y+6	; 0x06
    2f72:	41 e0       	ldi	r20, 0x01	; 1
    2f74:	bc 01       	movw	r22, r24
    2f76:	cd 01       	movw	r24, r26
    2f78:	0e 94 c9 1a 	call	0x3592	; 0x3592 <prvAddCurrentTaskToDelayedList>
    2f7c:	00 00       	nop
    2f7e:	26 96       	adiw	r28, 0x06	; 6
    2f80:	cd bf       	out	0x3d, r28	; 61
    2f82:	de bf       	out	0x3e, r29	; 62
    2f84:	df 91       	pop	r29
    2f86:	cf 91       	pop	r28
    2f88:	08 95       	ret

00002f8a <vTaskPlaceOnUnorderedEventList>:
    2f8a:	0f 93       	push	r16
    2f8c:	1f 93       	push	r17
    2f8e:	cf 93       	push	r28
    2f90:	df 93       	push	r29
    2f92:	cd b7       	in	r28, 0x3d	; 61
    2f94:	de b7       	in	r29, 0x3e	; 62
    2f96:	2a 97       	sbiw	r28, 0x0a	; 10
    2f98:	cd bf       	out	0x3d, r28	; 61
    2f9a:	de bf       	out	0x3e, r29	; 62
    2f9c:	89 83       	std	Y+1, r24	; 0x01
    2f9e:	9a 83       	std	Y+2, r25	; 0x02
    2fa0:	4b 83       	std	Y+3, r20	; 0x03
    2fa2:	5c 83       	std	Y+4, r21	; 0x04
    2fa4:	6d 83       	std	Y+5, r22	; 0x05
    2fa6:	7e 83       	std	Y+6, r23	; 0x06
    2fa8:	0f 83       	std	Y+7, r16	; 0x07
    2faa:	18 87       	std	Y+8, r17	; 0x08
    2fac:	29 87       	std	Y+9, r18	; 0x09
    2fae:	3a 87       	std	Y+10, r19	; 0x0a
    2fb0:	20 91 70 30 	lds	r18, 0x3070	; 0x803070 <pxCurrentTCB>
    2fb4:	30 91 71 30 	lds	r19, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    2fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2fba:	9c 81       	ldd	r25, Y+4	; 0x04
    2fbc:	ad 81       	ldd	r26, Y+5	; 0x05
    2fbe:	be 81       	ldd	r27, Y+6	; 0x06
    2fc0:	b0 68       	ori	r27, 0x80	; 128
    2fc2:	f9 01       	movw	r30, r18
    2fc4:	86 87       	std	Z+14, r24	; 0x0e
    2fc6:	97 87       	std	Z+15, r25	; 0x0f
    2fc8:	a0 8b       	std	Z+16, r26	; 0x10
    2fca:	b1 8b       	std	Z+17, r27	; 0x11
    2fcc:	80 91 70 30 	lds	r24, 0x3070	; 0x803070 <pxCurrentTCB>
    2fd0:	90 91 71 30 	lds	r25, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    2fd4:	9c 01       	movw	r18, r24
    2fd6:	22 5f       	subi	r18, 0xF2	; 242
    2fd8:	3f 4f       	sbci	r19, 0xFF	; 255
    2fda:	89 81       	ldd	r24, Y+1	; 0x01
    2fdc:	9a 81       	ldd	r25, Y+2	; 0x02
    2fde:	b9 01       	movw	r22, r18
    2fe0:	0e 94 3c 08 	call	0x1078	; 0x1078 <vListInsertEnd>
    2fe4:	8f 81       	ldd	r24, Y+7	; 0x07
    2fe6:	98 85       	ldd	r25, Y+8	; 0x08
    2fe8:	a9 85       	ldd	r26, Y+9	; 0x09
    2fea:	ba 85       	ldd	r27, Y+10	; 0x0a
    2fec:	41 e0       	ldi	r20, 0x01	; 1
    2fee:	bc 01       	movw	r22, r24
    2ff0:	cd 01       	movw	r24, r26
    2ff2:	0e 94 c9 1a 	call	0x3592	; 0x3592 <prvAddCurrentTaskToDelayedList>
    2ff6:	00 00       	nop
    2ff8:	2a 96       	adiw	r28, 0x0a	; 10
    2ffa:	cd bf       	out	0x3d, r28	; 61
    2ffc:	de bf       	out	0x3e, r29	; 62
    2ffe:	df 91       	pop	r29
    3000:	cf 91       	pop	r28
    3002:	1f 91       	pop	r17
    3004:	0f 91       	pop	r16
    3006:	08 95       	ret

00003008 <vTaskPlaceOnEventListRestricted>:
    3008:	cf 93       	push	r28
    300a:	df 93       	push	r29
    300c:	cd b7       	in	r28, 0x3d	; 61
    300e:	de b7       	in	r29, 0x3e	; 62
    3010:	27 97       	sbiw	r28, 0x07	; 7
    3012:	cd bf       	out	0x3d, r28	; 61
    3014:	de bf       	out	0x3e, r29	; 62
    3016:	89 83       	std	Y+1, r24	; 0x01
    3018:	9a 83       	std	Y+2, r25	; 0x02
    301a:	4b 83       	std	Y+3, r20	; 0x03
    301c:	5c 83       	std	Y+4, r21	; 0x04
    301e:	6d 83       	std	Y+5, r22	; 0x05
    3020:	7e 83       	std	Y+6, r23	; 0x06
    3022:	2f 83       	std	Y+7, r18	; 0x07
    3024:	80 91 70 30 	lds	r24, 0x3070	; 0x803070 <pxCurrentTCB>
    3028:	90 91 71 30 	lds	r25, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    302c:	9c 01       	movw	r18, r24
    302e:	22 5f       	subi	r18, 0xF2	; 242
    3030:	3f 4f       	sbci	r19, 0xFF	; 255
    3032:	89 81       	ldd	r24, Y+1	; 0x01
    3034:	9a 81       	ldd	r25, Y+2	; 0x02
    3036:	b9 01       	movw	r22, r18
    3038:	0e 94 3c 08 	call	0x1078	; 0x1078 <vListInsertEnd>
    303c:	8f 81       	ldd	r24, Y+7	; 0x07
    303e:	88 23       	and	r24, r24
    3040:	39 f0       	breq	.+14     	; 0x3050 <vTaskPlaceOnEventListRestricted+0x48>
    3042:	8f ef       	ldi	r24, 0xFF	; 255
    3044:	9f ef       	ldi	r25, 0xFF	; 255
    3046:	dc 01       	movw	r26, r24
    3048:	8b 83       	std	Y+3, r24	; 0x03
    304a:	9c 83       	std	Y+4, r25	; 0x04
    304c:	ad 83       	std	Y+5, r26	; 0x05
    304e:	be 83       	std	Y+6, r27	; 0x06
    3050:	8b 81       	ldd	r24, Y+3	; 0x03
    3052:	9c 81       	ldd	r25, Y+4	; 0x04
    3054:	ad 81       	ldd	r26, Y+5	; 0x05
    3056:	be 81       	ldd	r27, Y+6	; 0x06
    3058:	4f 81       	ldd	r20, Y+7	; 0x07
    305a:	bc 01       	movw	r22, r24
    305c:	cd 01       	movw	r24, r26
    305e:	0e 94 c9 1a 	call	0x3592	; 0x3592 <prvAddCurrentTaskToDelayedList>
    3062:	00 00       	nop
    3064:	27 96       	adiw	r28, 0x07	; 7
    3066:	cd bf       	out	0x3d, r28	; 61
    3068:	de bf       	out	0x3e, r29	; 62
    306a:	df 91       	pop	r29
    306c:	cf 91       	pop	r28
    306e:	08 95       	ret

00003070 <xTaskRemoveFromEventList>:
    3070:	cf 93       	push	r28
    3072:	df 93       	push	r29
    3074:	cd b7       	in	r28, 0x3d	; 61
    3076:	de b7       	in	r29, 0x3e	; 62
    3078:	25 97       	sbiw	r28, 0x05	; 5
    307a:	cd bf       	out	0x3d, r28	; 61
    307c:	de bf       	out	0x3e, r29	; 62
    307e:	8c 83       	std	Y+4, r24	; 0x04
    3080:	9d 83       	std	Y+5, r25	; 0x05
    3082:	8c 81       	ldd	r24, Y+4	; 0x04
    3084:	9d 81       	ldd	r25, Y+5	; 0x05
    3086:	fc 01       	movw	r30, r24
    3088:	87 81       	ldd	r24, Z+7	; 0x07
    308a:	90 85       	ldd	r25, Z+8	; 0x08
    308c:	fc 01       	movw	r30, r24
    308e:	80 85       	ldd	r24, Z+8	; 0x08
    3090:	91 85       	ldd	r25, Z+9	; 0x09
    3092:	8a 83       	std	Y+2, r24	; 0x02
    3094:	9b 83       	std	Y+3, r25	; 0x03
    3096:	8a 81       	ldd	r24, Y+2	; 0x02
    3098:	9b 81       	ldd	r25, Y+3	; 0x03
    309a:	0e 96       	adiw	r24, 0x0e	; 14
    309c:	0e 94 08 09 	call	0x1210	; 0x1210 <uxListRemove>
    30a0:	80 91 df 30 	lds	r24, 0x30DF	; 0x8030df <uxSchedulerSuspended>
    30a4:	88 23       	and	r24, r24
    30a6:	51 f5       	brne	.+84     	; 0x30fc <xTaskRemoveFromEventList+0x8c>
    30a8:	8a 81       	ldd	r24, Y+2	; 0x02
    30aa:	9b 81       	ldd	r25, Y+3	; 0x03
    30ac:	02 96       	adiw	r24, 0x02	; 2
    30ae:	0e 94 08 09 	call	0x1210	; 0x1210 <uxListRemove>
    30b2:	8a 81       	ldd	r24, Y+2	; 0x02
    30b4:	9b 81       	ldd	r25, Y+3	; 0x03
    30b6:	fc 01       	movw	r30, r24
    30b8:	92 8d       	ldd	r25, Z+26	; 0x1a
    30ba:	80 91 d3 30 	lds	r24, 0x30D3	; 0x8030d3 <uxTopReadyPriority>
    30be:	89 17       	cp	r24, r25
    30c0:	30 f4       	brcc	.+12     	; 0x30ce <xTaskRemoveFromEventList+0x5e>
    30c2:	8a 81       	ldd	r24, Y+2	; 0x02
    30c4:	9b 81       	ldd	r25, Y+3	; 0x03
    30c6:	fc 01       	movw	r30, r24
    30c8:	82 8d       	ldd	r24, Z+26	; 0x1a
    30ca:	80 93 d3 30 	sts	0x30D3, r24	; 0x8030d3 <uxTopReadyPriority>
    30ce:	8a 81       	ldd	r24, Y+2	; 0x02
    30d0:	9b 81       	ldd	r25, Y+3	; 0x03
    30d2:	ac 01       	movw	r20, r24
    30d4:	4e 5f       	subi	r20, 0xFE	; 254
    30d6:	5f 4f       	sbci	r21, 0xFF	; 255
    30d8:	8a 81       	ldd	r24, Y+2	; 0x02
    30da:	9b 81       	ldd	r25, Y+3	; 0x03
    30dc:	fc 01       	movw	r30, r24
    30de:	82 8d       	ldd	r24, Z+26	; 0x1a
    30e0:	28 2f       	mov	r18, r24
    30e2:	30 e0       	ldi	r19, 0x00	; 0
    30e4:	6b e0       	ldi	r22, 0x0B	; 11
    30e6:	62 9f       	mul	r22, r18
    30e8:	c0 01       	movw	r24, r0
    30ea:	63 9f       	mul	r22, r19
    30ec:	90 0d       	add	r25, r0
    30ee:	11 24       	eor	r1, r1
    30f0:	8e 58       	subi	r24, 0x8E	; 142
    30f2:	9f 4c       	sbci	r25, 0xCF	; 207
    30f4:	ba 01       	movw	r22, r20
    30f6:	0e 94 3c 08 	call	0x1078	; 0x1078 <vListInsertEnd>
    30fa:	08 c0       	rjmp	.+16     	; 0x310c <xTaskRemoveFromEventList+0x9c>
    30fc:	8a 81       	ldd	r24, Y+2	; 0x02
    30fe:	9b 81       	ldd	r25, Y+3	; 0x03
    3100:	0e 96       	adiw	r24, 0x0e	; 14
    3102:	bc 01       	movw	r22, r24
    3104:	88 eb       	ldi	r24, 0xB8	; 184
    3106:	90 e3       	ldi	r25, 0x30	; 48
    3108:	0e 94 3c 08 	call	0x1078	; 0x1078 <vListInsertEnd>
    310c:	8a 81       	ldd	r24, Y+2	; 0x02
    310e:	9b 81       	ldd	r25, Y+3	; 0x03
    3110:	fc 01       	movw	r30, r24
    3112:	22 8d       	ldd	r18, Z+26	; 0x1a
    3114:	80 91 70 30 	lds	r24, 0x3070	; 0x803070 <pxCurrentTCB>
    3118:	90 91 71 30 	lds	r25, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    311c:	fc 01       	movw	r30, r24
    311e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3120:	82 17       	cp	r24, r18
    3122:	30 f4       	brcc	.+12     	; 0x3130 <xTaskRemoveFromEventList+0xc0>
    3124:	81 e0       	ldi	r24, 0x01	; 1
    3126:	89 83       	std	Y+1, r24	; 0x01
    3128:	81 e0       	ldi	r24, 0x01	; 1
    312a:	80 93 d6 30 	sts	0x30D6, r24	; 0x8030d6 <xYieldPending>
    312e:	01 c0       	rjmp	.+2      	; 0x3132 <xTaskRemoveFromEventList+0xc2>
    3130:	19 82       	std	Y+1, r1	; 0x01
    3132:	89 81       	ldd	r24, Y+1	; 0x01
    3134:	25 96       	adiw	r28, 0x05	; 5
    3136:	cd bf       	out	0x3d, r28	; 61
    3138:	de bf       	out	0x3e, r29	; 62
    313a:	df 91       	pop	r29
    313c:	cf 91       	pop	r28
    313e:	08 95       	ret

00003140 <vTaskRemoveFromUnorderedEventList>:
    3140:	cf 93       	push	r28
    3142:	df 93       	push	r29
    3144:	cd b7       	in	r28, 0x3d	; 61
    3146:	de b7       	in	r29, 0x3e	; 62
    3148:	28 97       	sbiw	r28, 0x08	; 8
    314a:	cd bf       	out	0x3d, r28	; 61
    314c:	de bf       	out	0x3e, r29	; 62
    314e:	8b 83       	std	Y+3, r24	; 0x03
    3150:	9c 83       	std	Y+4, r25	; 0x04
    3152:	4d 83       	std	Y+5, r20	; 0x05
    3154:	5e 83       	std	Y+6, r21	; 0x06
    3156:	6f 83       	std	Y+7, r22	; 0x07
    3158:	78 87       	std	Y+8, r23	; 0x08
    315a:	8d 81       	ldd	r24, Y+5	; 0x05
    315c:	9e 81       	ldd	r25, Y+6	; 0x06
    315e:	af 81       	ldd	r26, Y+7	; 0x07
    3160:	b8 85       	ldd	r27, Y+8	; 0x08
    3162:	b0 68       	ori	r27, 0x80	; 128
    3164:	2b 81       	ldd	r18, Y+3	; 0x03
    3166:	3c 81       	ldd	r19, Y+4	; 0x04
    3168:	f9 01       	movw	r30, r18
    316a:	80 83       	st	Z, r24
    316c:	91 83       	std	Z+1, r25	; 0x01
    316e:	a2 83       	std	Z+2, r26	; 0x02
    3170:	b3 83       	std	Z+3, r27	; 0x03
    3172:	8b 81       	ldd	r24, Y+3	; 0x03
    3174:	9c 81       	ldd	r25, Y+4	; 0x04
    3176:	fc 01       	movw	r30, r24
    3178:	80 85       	ldd	r24, Z+8	; 0x08
    317a:	91 85       	ldd	r25, Z+9	; 0x09
    317c:	89 83       	std	Y+1, r24	; 0x01
    317e:	9a 83       	std	Y+2, r25	; 0x02
    3180:	8b 81       	ldd	r24, Y+3	; 0x03
    3182:	9c 81       	ldd	r25, Y+4	; 0x04
    3184:	0e 94 08 09 	call	0x1210	; 0x1210 <uxListRemove>
    3188:	89 81       	ldd	r24, Y+1	; 0x01
    318a:	9a 81       	ldd	r25, Y+2	; 0x02
    318c:	02 96       	adiw	r24, 0x02	; 2
    318e:	0e 94 08 09 	call	0x1210	; 0x1210 <uxListRemove>
    3192:	89 81       	ldd	r24, Y+1	; 0x01
    3194:	9a 81       	ldd	r25, Y+2	; 0x02
    3196:	fc 01       	movw	r30, r24
    3198:	92 8d       	ldd	r25, Z+26	; 0x1a
    319a:	80 91 d3 30 	lds	r24, 0x30D3	; 0x8030d3 <uxTopReadyPriority>
    319e:	89 17       	cp	r24, r25
    31a0:	30 f4       	brcc	.+12     	; 0x31ae <vTaskRemoveFromUnorderedEventList+0x6e>
    31a2:	89 81       	ldd	r24, Y+1	; 0x01
    31a4:	9a 81       	ldd	r25, Y+2	; 0x02
    31a6:	fc 01       	movw	r30, r24
    31a8:	82 8d       	ldd	r24, Z+26	; 0x1a
    31aa:	80 93 d3 30 	sts	0x30D3, r24	; 0x8030d3 <uxTopReadyPriority>
    31ae:	89 81       	ldd	r24, Y+1	; 0x01
    31b0:	9a 81       	ldd	r25, Y+2	; 0x02
    31b2:	ac 01       	movw	r20, r24
    31b4:	4e 5f       	subi	r20, 0xFE	; 254
    31b6:	5f 4f       	sbci	r21, 0xFF	; 255
    31b8:	89 81       	ldd	r24, Y+1	; 0x01
    31ba:	9a 81       	ldd	r25, Y+2	; 0x02
    31bc:	fc 01       	movw	r30, r24
    31be:	82 8d       	ldd	r24, Z+26	; 0x1a
    31c0:	28 2f       	mov	r18, r24
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	6b e0       	ldi	r22, 0x0B	; 11
    31c6:	62 9f       	mul	r22, r18
    31c8:	c0 01       	movw	r24, r0
    31ca:	63 9f       	mul	r22, r19
    31cc:	90 0d       	add	r25, r0
    31ce:	11 24       	eor	r1, r1
    31d0:	8e 58       	subi	r24, 0x8E	; 142
    31d2:	9f 4c       	sbci	r25, 0xCF	; 207
    31d4:	ba 01       	movw	r22, r20
    31d6:	0e 94 3c 08 	call	0x1078	; 0x1078 <vListInsertEnd>
    31da:	89 81       	ldd	r24, Y+1	; 0x01
    31dc:	9a 81       	ldd	r25, Y+2	; 0x02
    31de:	fc 01       	movw	r30, r24
    31e0:	22 8d       	ldd	r18, Z+26	; 0x1a
    31e2:	80 91 70 30 	lds	r24, 0x3070	; 0x803070 <pxCurrentTCB>
    31e6:	90 91 71 30 	lds	r25, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    31ea:	fc 01       	movw	r30, r24
    31ec:	82 8d       	ldd	r24, Z+26	; 0x1a
    31ee:	82 17       	cp	r24, r18
    31f0:	18 f4       	brcc	.+6      	; 0x31f8 <vTaskRemoveFromUnorderedEventList+0xb8>
    31f2:	81 e0       	ldi	r24, 0x01	; 1
    31f4:	80 93 d6 30 	sts	0x30D6, r24	; 0x8030d6 <xYieldPending>
    31f8:	00 00       	nop
    31fa:	28 96       	adiw	r28, 0x08	; 8
    31fc:	cd bf       	out	0x3d, r28	; 61
    31fe:	de bf       	out	0x3e, r29	; 62
    3200:	df 91       	pop	r29
    3202:	cf 91       	pop	r28
    3204:	08 95       	ret

00003206 <vTaskInternalSetTimeOutState>:
    3206:	cf 93       	push	r28
    3208:	df 93       	push	r29
    320a:	1f 92       	push	r1
    320c:	1f 92       	push	r1
    320e:	cd b7       	in	r28, 0x3d	; 61
    3210:	de b7       	in	r29, 0x3e	; 62
    3212:	89 83       	std	Y+1, r24	; 0x01
    3214:	9a 83       	std	Y+2, r25	; 0x02
    3216:	20 91 d7 30 	lds	r18, 0x30D7	; 0x8030d7 <xNumOfOverflows>
    321a:	89 81       	ldd	r24, Y+1	; 0x01
    321c:	9a 81       	ldd	r25, Y+2	; 0x02
    321e:	fc 01       	movw	r30, r24
    3220:	20 83       	st	Z, r18
    3222:	80 91 cf 30 	lds	r24, 0x30CF	; 0x8030cf <xTickCount>
    3226:	90 91 d0 30 	lds	r25, 0x30D0	; 0x8030d0 <xTickCount+0x1>
    322a:	a0 91 d1 30 	lds	r26, 0x30D1	; 0x8030d1 <xTickCount+0x2>
    322e:	b0 91 d2 30 	lds	r27, 0x30D2	; 0x8030d2 <xTickCount+0x3>
    3232:	29 81       	ldd	r18, Y+1	; 0x01
    3234:	3a 81       	ldd	r19, Y+2	; 0x02
    3236:	f9 01       	movw	r30, r18
    3238:	81 83       	std	Z+1, r24	; 0x01
    323a:	92 83       	std	Z+2, r25	; 0x02
    323c:	a3 83       	std	Z+3, r26	; 0x03
    323e:	b4 83       	std	Z+4, r27	; 0x04
    3240:	00 00       	nop
    3242:	0f 90       	pop	r0
    3244:	0f 90       	pop	r0
    3246:	df 91       	pop	r29
    3248:	cf 91       	pop	r28
    324a:	08 95       	ret

0000324c <xTaskCheckForTimeOut>:
    324c:	ef 92       	push	r14
    324e:	ff 92       	push	r15
    3250:	0f 93       	push	r16
    3252:	1f 93       	push	r17
    3254:	cf 93       	push	r28
    3256:	df 93       	push	r29
    3258:	cd b7       	in	r28, 0x3d	; 61
    325a:	de b7       	in	r29, 0x3e	; 62
    325c:	2d 97       	sbiw	r28, 0x0d	; 13
    325e:	cd bf       	out	0x3d, r28	; 61
    3260:	de bf       	out	0x3e, r29	; 62
    3262:	8a 87       	std	Y+10, r24	; 0x0a
    3264:	9b 87       	std	Y+11, r25	; 0x0b
    3266:	6c 87       	std	Y+12, r22	; 0x0c
    3268:	7d 87       	std	Y+13, r23	; 0x0d
    326a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    326e:	ff 93       	push	r31
    3270:	f8 7f       	andi	r31, 0xF8	; 248
    3272:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    3276:	80 91 cf 30 	lds	r24, 0x30CF	; 0x8030cf <xTickCount>
    327a:	90 91 d0 30 	lds	r25, 0x30D0	; 0x8030d0 <xTickCount+0x1>
    327e:	a0 91 d1 30 	lds	r26, 0x30D1	; 0x8030d1 <xTickCount+0x2>
    3282:	b0 91 d2 30 	lds	r27, 0x30D2	; 0x8030d2 <xTickCount+0x3>
    3286:	8a 83       	std	Y+2, r24	; 0x02
    3288:	9b 83       	std	Y+3, r25	; 0x03
    328a:	ac 83       	std	Y+4, r26	; 0x04
    328c:	bd 83       	std	Y+5, r27	; 0x05
    328e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3290:	9b 85       	ldd	r25, Y+11	; 0x0b
    3292:	fc 01       	movw	r30, r24
    3294:	81 81       	ldd	r24, Z+1	; 0x01
    3296:	92 81       	ldd	r25, Z+2	; 0x02
    3298:	a3 81       	ldd	r26, Z+3	; 0x03
    329a:	b4 81       	ldd	r27, Z+4	; 0x04
    329c:	2a 81       	ldd	r18, Y+2	; 0x02
    329e:	3b 81       	ldd	r19, Y+3	; 0x03
    32a0:	4c 81       	ldd	r20, Y+4	; 0x04
    32a2:	5d 81       	ldd	r21, Y+5	; 0x05
    32a4:	79 01       	movw	r14, r18
    32a6:	8a 01       	movw	r16, r20
    32a8:	e8 1a       	sub	r14, r24
    32aa:	f9 0a       	sbc	r15, r25
    32ac:	0a 0b       	sbc	r16, r26
    32ae:	1b 0b       	sbc	r17, r27
    32b0:	d8 01       	movw	r26, r16
    32b2:	c7 01       	movw	r24, r14
    32b4:	8e 83       	std	Y+6, r24	; 0x06
    32b6:	9f 83       	std	Y+7, r25	; 0x07
    32b8:	a8 87       	std	Y+8, r26	; 0x08
    32ba:	b9 87       	std	Y+9, r27	; 0x09
    32bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    32be:	9d 85       	ldd	r25, Y+13	; 0x0d
    32c0:	fc 01       	movw	r30, r24
    32c2:	80 81       	ld	r24, Z
    32c4:	91 81       	ldd	r25, Z+1	; 0x01
    32c6:	a2 81       	ldd	r26, Z+2	; 0x02
    32c8:	b3 81       	ldd	r27, Z+3	; 0x03
    32ca:	8f 3f       	cpi	r24, 0xFF	; 255
    32cc:	9f 4f       	sbci	r25, 0xFF	; 255
    32ce:	af 4f       	sbci	r26, 0xFF	; 255
    32d0:	bf 4f       	sbci	r27, 0xFF	; 255
    32d2:	11 f4       	brne	.+4      	; 0x32d8 <xTaskCheckForTimeOut+0x8c>
    32d4:	19 82       	std	Y+1, r1	; 0x01
    32d6:	54 c0       	rjmp	.+168    	; 0x3380 <xTaskCheckForTimeOut+0x134>
    32d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    32da:	9b 85       	ldd	r25, Y+11	; 0x0b
    32dc:	fc 01       	movw	r30, r24
    32de:	90 81       	ld	r25, Z
    32e0:	80 91 d7 30 	lds	r24, 0x30D7	; 0x8030d7 <xNumOfOverflows>
    32e4:	98 17       	cp	r25, r24
    32e6:	99 f0       	breq	.+38     	; 0x330e <xTaskCheckForTimeOut+0xc2>
    32e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    32ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    32ec:	fc 01       	movw	r30, r24
    32ee:	21 81       	ldd	r18, Z+1	; 0x01
    32f0:	32 81       	ldd	r19, Z+2	; 0x02
    32f2:	43 81       	ldd	r20, Z+3	; 0x03
    32f4:	54 81       	ldd	r21, Z+4	; 0x04
    32f6:	8a 81       	ldd	r24, Y+2	; 0x02
    32f8:	9b 81       	ldd	r25, Y+3	; 0x03
    32fa:	ac 81       	ldd	r26, Y+4	; 0x04
    32fc:	bd 81       	ldd	r27, Y+5	; 0x05
    32fe:	82 17       	cp	r24, r18
    3300:	93 07       	cpc	r25, r19
    3302:	a4 07       	cpc	r26, r20
    3304:	b5 07       	cpc	r27, r21
    3306:	18 f0       	brcs	.+6      	; 0x330e <xTaskCheckForTimeOut+0xc2>
    3308:	81 e0       	ldi	r24, 0x01	; 1
    330a:	89 83       	std	Y+1, r24	; 0x01
    330c:	39 c0       	rjmp	.+114    	; 0x3380 <xTaskCheckForTimeOut+0x134>
    330e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3310:	9d 85       	ldd	r25, Y+13	; 0x0d
    3312:	fc 01       	movw	r30, r24
    3314:	20 81       	ld	r18, Z
    3316:	31 81       	ldd	r19, Z+1	; 0x01
    3318:	42 81       	ldd	r20, Z+2	; 0x02
    331a:	53 81       	ldd	r21, Z+3	; 0x03
    331c:	8e 81       	ldd	r24, Y+6	; 0x06
    331e:	9f 81       	ldd	r25, Y+7	; 0x07
    3320:	a8 85       	ldd	r26, Y+8	; 0x08
    3322:	b9 85       	ldd	r27, Y+9	; 0x09
    3324:	82 17       	cp	r24, r18
    3326:	93 07       	cpc	r25, r19
    3328:	a4 07       	cpc	r26, r20
    332a:	b5 07       	cpc	r27, r21
    332c:	00 f5       	brcc	.+64     	; 0x336e <xTaskCheckForTimeOut+0x122>
    332e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3330:	9d 85       	ldd	r25, Y+13	; 0x0d
    3332:	fc 01       	movw	r30, r24
    3334:	20 81       	ld	r18, Z
    3336:	31 81       	ldd	r19, Z+1	; 0x01
    3338:	42 81       	ldd	r20, Z+2	; 0x02
    333a:	53 81       	ldd	r21, Z+3	; 0x03
    333c:	8e 81       	ldd	r24, Y+6	; 0x06
    333e:	9f 81       	ldd	r25, Y+7	; 0x07
    3340:	a8 85       	ldd	r26, Y+8	; 0x08
    3342:	b9 85       	ldd	r27, Y+9	; 0x09
    3344:	79 01       	movw	r14, r18
    3346:	8a 01       	movw	r16, r20
    3348:	e8 1a       	sub	r14, r24
    334a:	f9 0a       	sbc	r15, r25
    334c:	0a 0b       	sbc	r16, r26
    334e:	1b 0b       	sbc	r17, r27
    3350:	d8 01       	movw	r26, r16
    3352:	c7 01       	movw	r24, r14
    3354:	2c 85       	ldd	r18, Y+12	; 0x0c
    3356:	3d 85       	ldd	r19, Y+13	; 0x0d
    3358:	f9 01       	movw	r30, r18
    335a:	80 83       	st	Z, r24
    335c:	91 83       	std	Z+1, r25	; 0x01
    335e:	a2 83       	std	Z+2, r26	; 0x02
    3360:	b3 83       	std	Z+3, r27	; 0x03
    3362:	8a 85       	ldd	r24, Y+10	; 0x0a
    3364:	9b 85       	ldd	r25, Y+11	; 0x0b
    3366:	0e 94 03 19 	call	0x3206	; 0x3206 <vTaskInternalSetTimeOutState>
    336a:	19 82       	std	Y+1, r1	; 0x01
    336c:	09 c0       	rjmp	.+18     	; 0x3380 <xTaskCheckForTimeOut+0x134>
    336e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3370:	9d 85       	ldd	r25, Y+13	; 0x0d
    3372:	fc 01       	movw	r30, r24
    3374:	10 82       	st	Z, r1
    3376:	11 82       	std	Z+1, r1	; 0x01
    3378:	12 82       	std	Z+2, r1	; 0x02
    337a:	13 82       	std	Z+3, r1	; 0x03
    337c:	81 e0       	ldi	r24, 0x01	; 1
    337e:	89 83       	std	Y+1, r24	; 0x01
    3380:	ff 91       	pop	r31
    3382:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    3386:	89 81       	ldd	r24, Y+1	; 0x01
    3388:	2d 96       	adiw	r28, 0x0d	; 13
    338a:	cd bf       	out	0x3d, r28	; 61
    338c:	de bf       	out	0x3e, r29	; 62
    338e:	df 91       	pop	r29
    3390:	cf 91       	pop	r28
    3392:	1f 91       	pop	r17
    3394:	0f 91       	pop	r16
    3396:	ff 90       	pop	r15
    3398:	ef 90       	pop	r14
    339a:	08 95       	ret

0000339c <vTaskMissedYield>:
    339c:	cf 93       	push	r28
    339e:	df 93       	push	r29
    33a0:	cd b7       	in	r28, 0x3d	; 61
    33a2:	de b7       	in	r29, 0x3e	; 62
    33a4:	81 e0       	ldi	r24, 0x01	; 1
    33a6:	80 93 d6 30 	sts	0x30D6, r24	; 0x8030d6 <xYieldPending>
    33aa:	00 00       	nop
    33ac:	df 91       	pop	r29
    33ae:	cf 91       	pop	r28
    33b0:	08 95       	ret

000033b2 <prvIdleTask>:
    33b2:	cf 93       	push	r28
    33b4:	df 93       	push	r29
    33b6:	1f 92       	push	r1
    33b8:	1f 92       	push	r1
    33ba:	cd b7       	in	r28, 0x3d	; 61
    33bc:	de b7       	in	r29, 0x3e	; 62
    33be:	89 83       	std	Y+1, r24	; 0x01
    33c0:	9a 83       	std	Y+2, r25	; 0x02
    33c2:	0e 94 27 1a 	call	0x344e	; 0x344e <prvCheckTasksWaitingTermination>
    33c6:	80 91 72 30 	lds	r24, 0x3072	; 0x803072 <pxReadyTasksLists>
    33ca:	82 30       	cpi	r24, 0x02	; 2
    33cc:	10 f0       	brcs	.+4      	; 0x33d2 <prvIdleTask+0x20>
    33ce:	0e 94 86 0b 	call	0x170c	; 0x170c <vPortYield>
    33d2:	0e 94 c8 20 	call	0x4190	; 0x4190 <vApplicationIdleHook>
    33d6:	f5 cf       	rjmp	.-22     	; 0x33c2 <prvIdleTask+0x10>

000033d8 <prvInitialiseTaskLists>:
    33d8:	cf 93       	push	r28
    33da:	df 93       	push	r29
    33dc:	1f 92       	push	r1
    33de:	cd b7       	in	r28, 0x3d	; 61
    33e0:	de b7       	in	r29, 0x3e	; 62
    33e2:	19 82       	std	Y+1, r1	; 0x01
    33e4:	10 c0       	rjmp	.+32     	; 0x3406 <prvInitialiseTaskLists+0x2e>
    33e6:	89 81       	ldd	r24, Y+1	; 0x01
    33e8:	28 2f       	mov	r18, r24
    33ea:	30 e0       	ldi	r19, 0x00	; 0
    33ec:	4b e0       	ldi	r20, 0x0B	; 11
    33ee:	42 9f       	mul	r20, r18
    33f0:	c0 01       	movw	r24, r0
    33f2:	43 9f       	mul	r20, r19
    33f4:	90 0d       	add	r25, r0
    33f6:	11 24       	eor	r1, r1
    33f8:	8e 58       	subi	r24, 0x8E	; 142
    33fa:	9f 4c       	sbci	r25, 0xCF	; 207
    33fc:	0e 94 ef 07 	call	0xfde	; 0xfde <vListInitialise>
    3400:	89 81       	ldd	r24, Y+1	; 0x01
    3402:	8f 5f       	subi	r24, 0xFF	; 255
    3404:	89 83       	std	Y+1, r24	; 0x01
    3406:	89 81       	ldd	r24, Y+1	; 0x01
    3408:	84 30       	cpi	r24, 0x04	; 4
    340a:	68 f3       	brcs	.-38     	; 0x33e6 <prvInitialiseTaskLists+0xe>
    340c:	8e e9       	ldi	r24, 0x9E	; 158
    340e:	90 e3       	ldi	r25, 0x30	; 48
    3410:	0e 94 ef 07 	call	0xfde	; 0xfde <vListInitialise>
    3414:	89 ea       	ldi	r24, 0xA9	; 169
    3416:	90 e3       	ldi	r25, 0x30	; 48
    3418:	0e 94 ef 07 	call	0xfde	; 0xfde <vListInitialise>
    341c:	88 eb       	ldi	r24, 0xB8	; 184
    341e:	90 e3       	ldi	r25, 0x30	; 48
    3420:	0e 94 ef 07 	call	0xfde	; 0xfde <vListInitialise>
    3424:	83 ec       	ldi	r24, 0xC3	; 195
    3426:	90 e3       	ldi	r25, 0x30	; 48
    3428:	0e 94 ef 07 	call	0xfde	; 0xfde <vListInitialise>
    342c:	8e e9       	ldi	r24, 0x9E	; 158
    342e:	90 e3       	ldi	r25, 0x30	; 48
    3430:	80 93 b4 30 	sts	0x30B4, r24	; 0x8030b4 <pxDelayedTaskList>
    3434:	90 93 b5 30 	sts	0x30B5, r25	; 0x8030b5 <pxDelayedTaskList+0x1>
    3438:	89 ea       	ldi	r24, 0xA9	; 169
    343a:	90 e3       	ldi	r25, 0x30	; 48
    343c:	80 93 b6 30 	sts	0x30B6, r24	; 0x8030b6 <pxOverflowDelayedTaskList>
    3440:	90 93 b7 30 	sts	0x30B7, r25	; 0x8030b7 <pxOverflowDelayedTaskList+0x1>
    3444:	00 00       	nop
    3446:	0f 90       	pop	r0
    3448:	df 91       	pop	r29
    344a:	cf 91       	pop	r28
    344c:	08 95       	ret

0000344e <prvCheckTasksWaitingTermination>:
    344e:	cf 93       	push	r28
    3450:	df 93       	push	r29
    3452:	cd b7       	in	r28, 0x3d	; 61
    3454:	de b7       	in	r29, 0x3e	; 62
    3456:	00 00       	nop
    3458:	df 91       	pop	r29
    345a:	cf 91       	pop	r28
    345c:	08 95       	ret

0000345e <prvResetNextTaskUnblockTime>:
    345e:	cf 93       	push	r28
    3460:	df 93       	push	r29
    3462:	1f 92       	push	r1
    3464:	1f 92       	push	r1
    3466:	cd b7       	in	r28, 0x3d	; 61
    3468:	de b7       	in	r29, 0x3e	; 62
    346a:	80 91 b4 30 	lds	r24, 0x30B4	; 0x8030b4 <pxDelayedTaskList>
    346e:	90 91 b5 30 	lds	r25, 0x30B5	; 0x8030b5 <pxDelayedTaskList+0x1>
    3472:	fc 01       	movw	r30, r24
    3474:	80 81       	ld	r24, Z
    3476:	88 23       	and	r24, r24
    3478:	61 f4       	brne	.+24     	; 0x3492 <prvResetNextTaskUnblockTime+0x34>
    347a:	8f ef       	ldi	r24, 0xFF	; 255
    347c:	9f ef       	ldi	r25, 0xFF	; 255
    347e:	dc 01       	movw	r26, r24
    3480:	80 93 d9 30 	sts	0x30D9, r24	; 0x8030d9 <xNextTaskUnblockTime>
    3484:	90 93 da 30 	sts	0x30DA, r25	; 0x8030da <xNextTaskUnblockTime+0x1>
    3488:	a0 93 db 30 	sts	0x30DB, r26	; 0x8030db <xNextTaskUnblockTime+0x2>
    348c:	b0 93 dc 30 	sts	0x30DC, r27	; 0x8030dc <xNextTaskUnblockTime+0x3>
    3490:	1b c0       	rjmp	.+54     	; 0x34c8 <prvResetNextTaskUnblockTime+0x6a>
    3492:	80 91 b4 30 	lds	r24, 0x30B4	; 0x8030b4 <pxDelayedTaskList>
    3496:	90 91 b5 30 	lds	r25, 0x30B5	; 0x8030b5 <pxDelayedTaskList+0x1>
    349a:	fc 01       	movw	r30, r24
    349c:	87 81       	ldd	r24, Z+7	; 0x07
    349e:	90 85       	ldd	r25, Z+8	; 0x08
    34a0:	fc 01       	movw	r30, r24
    34a2:	80 85       	ldd	r24, Z+8	; 0x08
    34a4:	91 85       	ldd	r25, Z+9	; 0x09
    34a6:	89 83       	std	Y+1, r24	; 0x01
    34a8:	9a 83       	std	Y+2, r25	; 0x02
    34aa:	89 81       	ldd	r24, Y+1	; 0x01
    34ac:	9a 81       	ldd	r25, Y+2	; 0x02
    34ae:	fc 01       	movw	r30, r24
    34b0:	82 81       	ldd	r24, Z+2	; 0x02
    34b2:	93 81       	ldd	r25, Z+3	; 0x03
    34b4:	a4 81       	ldd	r26, Z+4	; 0x04
    34b6:	b5 81       	ldd	r27, Z+5	; 0x05
    34b8:	80 93 d9 30 	sts	0x30D9, r24	; 0x8030d9 <xNextTaskUnblockTime>
    34bc:	90 93 da 30 	sts	0x30DA, r25	; 0x8030da <xNextTaskUnblockTime+0x1>
    34c0:	a0 93 db 30 	sts	0x30DB, r26	; 0x8030db <xNextTaskUnblockTime+0x2>
    34c4:	b0 93 dc 30 	sts	0x30DC, r27	; 0x8030dc <xNextTaskUnblockTime+0x3>
    34c8:	00 00       	nop
    34ca:	0f 90       	pop	r0
    34cc:	0f 90       	pop	r0
    34ce:	df 91       	pop	r29
    34d0:	cf 91       	pop	r28
    34d2:	08 95       	ret

000034d4 <xTaskGetSchedulerState>:
    34d4:	cf 93       	push	r28
    34d6:	df 93       	push	r29
    34d8:	1f 92       	push	r1
    34da:	cd b7       	in	r28, 0x3d	; 61
    34dc:	de b7       	in	r29, 0x3e	; 62
    34de:	80 91 d4 30 	lds	r24, 0x30D4	; 0x8030d4 <xSchedulerRunning>
    34e2:	88 23       	and	r24, r24
    34e4:	19 f4       	brne	.+6      	; 0x34ec <xTaskGetSchedulerState+0x18>
    34e6:	81 e0       	ldi	r24, 0x01	; 1
    34e8:	89 83       	std	Y+1, r24	; 0x01
    34ea:	08 c0       	rjmp	.+16     	; 0x34fc <xTaskGetSchedulerState+0x28>
    34ec:	80 91 df 30 	lds	r24, 0x30DF	; 0x8030df <uxSchedulerSuspended>
    34f0:	88 23       	and	r24, r24
    34f2:	19 f4       	brne	.+6      	; 0x34fa <xTaskGetSchedulerState+0x26>
    34f4:	82 e0       	ldi	r24, 0x02	; 2
    34f6:	89 83       	std	Y+1, r24	; 0x01
    34f8:	01 c0       	rjmp	.+2      	; 0x34fc <xTaskGetSchedulerState+0x28>
    34fa:	19 82       	std	Y+1, r1	; 0x01
    34fc:	89 81       	ldd	r24, Y+1	; 0x01
    34fe:	0f 90       	pop	r0
    3500:	df 91       	pop	r29
    3502:	cf 91       	pop	r28
    3504:	08 95       	ret

00003506 <uxTaskResetEventItemValue>:
    3506:	ef 92       	push	r14
    3508:	ff 92       	push	r15
    350a:	0f 93       	push	r16
    350c:	1f 93       	push	r17
    350e:	cf 93       	push	r28
    3510:	df 93       	push	r29
    3512:	00 d0       	rcall	.+0      	; 0x3514 <uxTaskResetEventItemValue+0xe>
    3514:	1f 92       	push	r1
    3516:	cd b7       	in	r28, 0x3d	; 61
    3518:	de b7       	in	r29, 0x3e	; 62
    351a:	80 91 70 30 	lds	r24, 0x3070	; 0x803070 <pxCurrentTCB>
    351e:	90 91 71 30 	lds	r25, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    3522:	fc 01       	movw	r30, r24
    3524:	86 85       	ldd	r24, Z+14	; 0x0e
    3526:	97 85       	ldd	r25, Z+15	; 0x0f
    3528:	a0 89       	ldd	r26, Z+16	; 0x10
    352a:	b1 89       	ldd	r27, Z+17	; 0x11
    352c:	89 83       	std	Y+1, r24	; 0x01
    352e:	9a 83       	std	Y+2, r25	; 0x02
    3530:	ab 83       	std	Y+3, r26	; 0x03
    3532:	bc 83       	std	Y+4, r27	; 0x04
    3534:	60 91 70 30 	lds	r22, 0x3070	; 0x803070 <pxCurrentTCB>
    3538:	70 91 71 30 	lds	r23, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    353c:	80 91 70 30 	lds	r24, 0x3070	; 0x803070 <pxCurrentTCB>
    3540:	90 91 71 30 	lds	r25, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    3544:	fc 01       	movw	r30, r24
    3546:	82 8d       	ldd	r24, Z+26	; 0x1a
    3548:	88 2f       	mov	r24, r24
    354a:	90 e0       	ldi	r25, 0x00	; 0
    354c:	a0 e0       	ldi	r26, 0x00	; 0
    354e:	b0 e0       	ldi	r27, 0x00	; 0
    3550:	24 e0       	ldi	r18, 0x04	; 4
    3552:	30 e0       	ldi	r19, 0x00	; 0
    3554:	40 e0       	ldi	r20, 0x00	; 0
    3556:	50 e0       	ldi	r21, 0x00	; 0
    3558:	79 01       	movw	r14, r18
    355a:	8a 01       	movw	r16, r20
    355c:	e8 1a       	sub	r14, r24
    355e:	f9 0a       	sbc	r15, r25
    3560:	0a 0b       	sbc	r16, r26
    3562:	1b 0b       	sbc	r17, r27
    3564:	d8 01       	movw	r26, r16
    3566:	c7 01       	movw	r24, r14
    3568:	fb 01       	movw	r30, r22
    356a:	86 87       	std	Z+14, r24	; 0x0e
    356c:	97 87       	std	Z+15, r25	; 0x0f
    356e:	a0 8b       	std	Z+16, r26	; 0x10
    3570:	b1 8b       	std	Z+17, r27	; 0x11
    3572:	89 81       	ldd	r24, Y+1	; 0x01
    3574:	9a 81       	ldd	r25, Y+2	; 0x02
    3576:	ab 81       	ldd	r26, Y+3	; 0x03
    3578:	bc 81       	ldd	r27, Y+4	; 0x04
    357a:	bc 01       	movw	r22, r24
    357c:	cd 01       	movw	r24, r26
    357e:	24 96       	adiw	r28, 0x04	; 4
    3580:	cd bf       	out	0x3d, r28	; 61
    3582:	de bf       	out	0x3e, r29	; 62
    3584:	df 91       	pop	r29
    3586:	cf 91       	pop	r28
    3588:	1f 91       	pop	r17
    358a:	0f 91       	pop	r16
    358c:	ff 90       	pop	r15
    358e:	ef 90       	pop	r14
    3590:	08 95       	ret

00003592 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    3592:	cf 93       	push	r28
    3594:	df 93       	push	r29
    3596:	cd b7       	in	r28, 0x3d	; 61
    3598:	de b7       	in	r29, 0x3e	; 62
    359a:	2d 97       	sbiw	r28, 0x0d	; 13
    359c:	cd bf       	out	0x3d, r28	; 61
    359e:	de bf       	out	0x3e, r29	; 62
    35a0:	69 87       	std	Y+9, r22	; 0x09
    35a2:	7a 87       	std	Y+10, r23	; 0x0a
    35a4:	8b 87       	std	Y+11, r24	; 0x0b
    35a6:	9c 87       	std	Y+12, r25	; 0x0c
    35a8:	4d 87       	std	Y+13, r20	; 0x0d
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    35aa:	80 91 cf 30 	lds	r24, 0x30CF	; 0x8030cf <xTickCount>
    35ae:	90 91 d0 30 	lds	r25, 0x30D0	; 0x8030d0 <xTickCount+0x1>
    35b2:	a0 91 d1 30 	lds	r26, 0x30D1	; 0x8030d1 <xTickCount+0x2>
    35b6:	b0 91 d2 30 	lds	r27, 0x30D2	; 0x8030d2 <xTickCount+0x3>
    35ba:	89 83       	std	Y+1, r24	; 0x01
    35bc:	9a 83       	std	Y+2, r25	; 0x02
    35be:	ab 83       	std	Y+3, r26	; 0x03
    35c0:	bc 83       	std	Y+4, r27	; 0x04
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    35c2:	80 91 70 30 	lds	r24, 0x3070	; 0x803070 <pxCurrentTCB>
    35c6:	90 91 71 30 	lds	r25, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    35ca:	02 96       	adiw	r24, 0x02	; 2
    35cc:	0e 94 08 09 	call	0x1210	; 0x1210 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    35d0:	89 85       	ldd	r24, Y+9	; 0x09
    35d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    35d4:	ab 85       	ldd	r26, Y+11	; 0x0b
    35d6:	bc 85       	ldd	r27, Y+12	; 0x0c
    35d8:	8f 3f       	cpi	r24, 0xFF	; 255
    35da:	9f 4f       	sbci	r25, 0xFF	; 255
    35dc:	af 4f       	sbci	r26, 0xFF	; 255
    35de:	bf 4f       	sbci	r27, 0xFF	; 255
    35e0:	71 f4       	brne	.+28     	; 0x35fe <prvAddCurrentTaskToDelayedList+0x6c>
    35e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    35e4:	88 23       	and	r24, r24
    35e6:	59 f0       	breq	.+22     	; 0x35fe <prvAddCurrentTaskToDelayedList+0x6c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    35e8:	80 91 70 30 	lds	r24, 0x3070	; 0x803070 <pxCurrentTCB>
    35ec:	90 91 71 30 	lds	r25, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    35f0:	02 96       	adiw	r24, 0x02	; 2
    35f2:	bc 01       	movw	r22, r24
    35f4:	83 ec       	ldi	r24, 0xC3	; 195
    35f6:	90 e3       	ldi	r25, 0x30	; 48
    35f8:	0e 94 3c 08 	call	0x1078	; 0x1078 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    35fc:	64 c0       	rjmp	.+200    	; 0x36c6 <prvAddCurrentTaskToDelayedList+0x134>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    35fe:	29 81       	ldd	r18, Y+1	; 0x01
    3600:	3a 81       	ldd	r19, Y+2	; 0x02
    3602:	4b 81       	ldd	r20, Y+3	; 0x03
    3604:	5c 81       	ldd	r21, Y+4	; 0x04
    3606:	89 85       	ldd	r24, Y+9	; 0x09
    3608:	9a 85       	ldd	r25, Y+10	; 0x0a
    360a:	ab 85       	ldd	r26, Y+11	; 0x0b
    360c:	bc 85       	ldd	r27, Y+12	; 0x0c
    360e:	82 0f       	add	r24, r18
    3610:	93 1f       	adc	r25, r19
    3612:	a4 1f       	adc	r26, r20
    3614:	b5 1f       	adc	r27, r21
    3616:	8d 83       	std	Y+5, r24	; 0x05
    3618:	9e 83       	std	Y+6, r25	; 0x06
    361a:	af 83       	std	Y+7, r26	; 0x07
    361c:	b8 87       	std	Y+8, r27	; 0x08

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    361e:	20 91 70 30 	lds	r18, 0x3070	; 0x803070 <pxCurrentTCB>
    3622:	30 91 71 30 	lds	r19, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    3626:	8d 81       	ldd	r24, Y+5	; 0x05
    3628:	9e 81       	ldd	r25, Y+6	; 0x06
    362a:	af 81       	ldd	r26, Y+7	; 0x07
    362c:	b8 85       	ldd	r27, Y+8	; 0x08
    362e:	f9 01       	movw	r30, r18
    3630:	82 83       	std	Z+2, r24	; 0x02
    3632:	93 83       	std	Z+3, r25	; 0x03
    3634:	a4 83       	std	Z+4, r26	; 0x04
    3636:	b5 83       	std	Z+5, r27	; 0x05

			if( xTimeToWake < xConstTickCount )
    3638:	2d 81       	ldd	r18, Y+5	; 0x05
    363a:	3e 81       	ldd	r19, Y+6	; 0x06
    363c:	4f 81       	ldd	r20, Y+7	; 0x07
    363e:	58 85       	ldd	r21, Y+8	; 0x08
    3640:	89 81       	ldd	r24, Y+1	; 0x01
    3642:	9a 81       	ldd	r25, Y+2	; 0x02
    3644:	ab 81       	ldd	r26, Y+3	; 0x03
    3646:	bc 81       	ldd	r27, Y+4	; 0x04
    3648:	28 17       	cp	r18, r24
    364a:	39 07       	cpc	r19, r25
    364c:	4a 07       	cpc	r20, r26
    364e:	5b 07       	cpc	r21, r27
    3650:	78 f4       	brcc	.+30     	; 0x3670 <prvAddCurrentTaskToDelayedList+0xde>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3652:	80 91 70 30 	lds	r24, 0x3070	; 0x803070 <pxCurrentTCB>
    3656:	90 91 71 30 	lds	r25, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    365a:	9c 01       	movw	r18, r24
    365c:	2e 5f       	subi	r18, 0xFE	; 254
    365e:	3f 4f       	sbci	r19, 0xFF	; 255
    3660:	80 91 b6 30 	lds	r24, 0x30B6	; 0x8030b6 <pxOverflowDelayedTaskList>
    3664:	90 91 b7 30 	lds	r25, 0x30B7	; 0x8030b7 <pxOverflowDelayedTaskList+0x1>
    3668:	b9 01       	movw	r22, r18
    366a:	0e 94 87 08 	call	0x110e	; 0x110e <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    366e:	2b c0       	rjmp	.+86     	; 0x36c6 <prvAddCurrentTaskToDelayedList+0x134>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3670:	80 91 70 30 	lds	r24, 0x3070	; 0x803070 <pxCurrentTCB>
    3674:	90 91 71 30 	lds	r25, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    3678:	9c 01       	movw	r18, r24
    367a:	2e 5f       	subi	r18, 0xFE	; 254
    367c:	3f 4f       	sbci	r19, 0xFF	; 255
    367e:	80 91 b4 30 	lds	r24, 0x30B4	; 0x8030b4 <pxDelayedTaskList>
    3682:	90 91 b5 30 	lds	r25, 0x30B5	; 0x8030b5 <pxDelayedTaskList+0x1>
    3686:	b9 01       	movw	r22, r18
    3688:	0e 94 87 08 	call	0x110e	; 0x110e <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    368c:	80 91 d9 30 	lds	r24, 0x30D9	; 0x8030d9 <xNextTaskUnblockTime>
    3690:	90 91 da 30 	lds	r25, 0x30DA	; 0x8030da <xNextTaskUnblockTime+0x1>
    3694:	a0 91 db 30 	lds	r26, 0x30DB	; 0x8030db <xNextTaskUnblockTime+0x2>
    3698:	b0 91 dc 30 	lds	r27, 0x30DC	; 0x8030dc <xNextTaskUnblockTime+0x3>
    369c:	2d 81       	ldd	r18, Y+5	; 0x05
    369e:	3e 81       	ldd	r19, Y+6	; 0x06
    36a0:	4f 81       	ldd	r20, Y+7	; 0x07
    36a2:	58 85       	ldd	r21, Y+8	; 0x08
    36a4:	28 17       	cp	r18, r24
    36a6:	39 07       	cpc	r19, r25
    36a8:	4a 07       	cpc	r20, r26
    36aa:	5b 07       	cpc	r21, r27
    36ac:	60 f4       	brcc	.+24     	; 0x36c6 <prvAddCurrentTaskToDelayedList+0x134>
				{
					xNextTaskUnblockTime = xTimeToWake;
    36ae:	8d 81       	ldd	r24, Y+5	; 0x05
    36b0:	9e 81       	ldd	r25, Y+6	; 0x06
    36b2:	af 81       	ldd	r26, Y+7	; 0x07
    36b4:	b8 85       	ldd	r27, Y+8	; 0x08
    36b6:	80 93 d9 30 	sts	0x30D9, r24	; 0x8030d9 <xNextTaskUnblockTime>
    36ba:	90 93 da 30 	sts	0x30DA, r25	; 0x8030da <xNextTaskUnblockTime+0x1>
    36be:	a0 93 db 30 	sts	0x30DB, r26	; 0x8030db <xNextTaskUnblockTime+0x2>
    36c2:	b0 93 dc 30 	sts	0x30DC, r27	; 0x8030dc <xNextTaskUnblockTime+0x3>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    36c6:	00 00       	nop
    36c8:	2d 96       	adiw	r28, 0x0d	; 13
    36ca:	cd bf       	out	0x3d, r28	; 61
    36cc:	de bf       	out	0x3e, r29	; 62
    36ce:	df 91       	pop	r29
    36d0:	cf 91       	pop	r28
    36d2:	08 95       	ret

000036d4 <xTimerCreateTimerTask>:
	taskENTER_CRITICAL();
	{
		pxTimer->pvTimerID = pvNewID;
	}
	taskEXIT_CRITICAL();
}
    36d4:	ef 92       	push	r14
    36d6:	ff 92       	push	r15
    36d8:	0f 93       	push	r16
    36da:	cf 93       	push	r28
    36dc:	df 93       	push	r29
    36de:	1f 92       	push	r1
    36e0:	cd b7       	in	r28, 0x3d	; 61
    36e2:	de b7       	in	r29, 0x3e	; 62
    36e4:	19 82       	std	Y+1, r1	; 0x01
    36e6:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <prvCheckForValidListAndQueue>
    36ea:	80 91 fa 30 	lds	r24, 0x30FA	; 0x8030fa <xTimerQueue>
    36ee:	90 91 fb 30 	lds	r25, 0x30FB	; 0x8030fb <xTimerQueue+0x1>
    36f2:	89 2b       	or	r24, r25
    36f4:	91 f0       	breq	.+36     	; 0x371a <xTimerCreateTimerTask+0x46>
    36f6:	0f 2e       	mov	r0, r31
    36f8:	fc ef       	ldi	r31, 0xFC	; 252
    36fa:	ef 2e       	mov	r14, r31
    36fc:	f0 e3       	ldi	r31, 0x30	; 48
    36fe:	ff 2e       	mov	r15, r31
    3700:	f0 2d       	mov	r31, r0
    3702:	03 e0       	ldi	r16, 0x03	; 3
    3704:	20 e0       	ldi	r18, 0x00	; 0
    3706:	30 e0       	ldi	r19, 0x00	; 0
    3708:	48 ec       	ldi	r20, 0xC8	; 200
    370a:	50 e0       	ldi	r21, 0x00	; 0
    370c:	69 e0       	ldi	r22, 0x09	; 9
    370e:	70 e2       	ldi	r23, 0x20	; 32
    3710:	80 e8       	ldi	r24, 0x80	; 128
    3712:	9c e1       	ldi	r25, 0x1C	; 28
    3714:	0e 94 ed 11 	call	0x23da	; 0x23da <xTaskCreate>
    3718:	89 83       	std	Y+1, r24	; 0x01
    371a:	89 81       	ldd	r24, Y+1	; 0x01
    371c:	0f 90       	pop	r0
    371e:	df 91       	pop	r29
    3720:	cf 91       	pop	r28
    3722:	0f 91       	pop	r16
    3724:	ff 90       	pop	r15
    3726:	ef 90       	pop	r14
    3728:	08 95       	ret

0000372a <xTimerGenericCommand>:
    372a:	cf 92       	push	r12
    372c:	df 92       	push	r13
    372e:	ef 92       	push	r14
    3730:	ff 92       	push	r15
    3732:	0f 93       	push	r16
    3734:	1f 93       	push	r17
    3736:	cf 93       	push	r28
    3738:	df 93       	push	r29
    373a:	cd b7       	in	r28, 0x3d	; 61
    373c:	de b7       	in	r29, 0x3e	; 62
    373e:	67 97       	sbiw	r28, 0x17	; 23
    3740:	cd bf       	out	0x3d, r28	; 61
    3742:	de bf       	out	0x3e, r29	; 62
    3744:	8b 87       	std	Y+11, r24	; 0x0b
    3746:	9c 87       	std	Y+12, r25	; 0x0c
    3748:	6d 87       	std	Y+13, r22	; 0x0d
    374a:	2e 87       	std	Y+14, r18	; 0x0e
    374c:	3f 87       	std	Y+15, r19	; 0x0f
    374e:	48 8b       	std	Y+16, r20	; 0x10
    3750:	59 8b       	std	Y+17, r21	; 0x11
    3752:	0a 8b       	std	Y+18, r16	; 0x12
    3754:	1b 8b       	std	Y+19, r17	; 0x13
    3756:	cc 8a       	std	Y+20, r12	; 0x14
    3758:	dd 8a       	std	Y+21, r13	; 0x15
    375a:	ee 8a       	std	Y+22, r14	; 0x16
    375c:	ff 8a       	std	Y+23, r15	; 0x17
    375e:	19 82       	std	Y+1, r1	; 0x01
    3760:	80 91 fa 30 	lds	r24, 0x30FA	; 0x8030fa <xTimerQueue>
    3764:	90 91 fb 30 	lds	r25, 0x30FB	; 0x8030fb <xTimerQueue+0x1>
    3768:	89 2b       	or	r24, r25
    376a:	09 f4       	brne	.+2      	; 0x376e <xTimerGenericCommand+0x44>
    376c:	44 c0       	rjmp	.+136    	; 0x37f6 <xTimerGenericCommand+0xcc>
    376e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3770:	8a 83       	std	Y+2, r24	; 0x02
    3772:	8e 85       	ldd	r24, Y+14	; 0x0e
    3774:	9f 85       	ldd	r25, Y+15	; 0x0f
    3776:	a8 89       	ldd	r26, Y+16	; 0x10
    3778:	b9 89       	ldd	r27, Y+17	; 0x11
    377a:	8b 83       	std	Y+3, r24	; 0x03
    377c:	9c 83       	std	Y+4, r25	; 0x04
    377e:	ad 83       	std	Y+5, r26	; 0x05
    3780:	be 83       	std	Y+6, r27	; 0x06
    3782:	8b 85       	ldd	r24, Y+11	; 0x0b
    3784:	9c 85       	ldd	r25, Y+12	; 0x0c
    3786:	8f 83       	std	Y+7, r24	; 0x07
    3788:	98 87       	std	Y+8, r25	; 0x08
    378a:	8d 85       	ldd	r24, Y+13	; 0x0d
    378c:	86 30       	cpi	r24, 0x06	; 6
    378e:	34 f5       	brge	.+76     	; 0x37dc <xTimerGenericCommand+0xb2>
    3790:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <xTaskGetSchedulerState>
    3794:	82 30       	cpi	r24, 0x02	; 2
    3796:	99 f4       	brne	.+38     	; 0x37be <xTimerGenericCommand+0x94>
    3798:	e0 91 fa 30 	lds	r30, 0x30FA	; 0x8030fa <xTimerQueue>
    379c:	f0 91 fb 30 	lds	r31, 0x30FB	; 0x8030fb <xTimerQueue+0x1>
    37a0:	8c 89       	ldd	r24, Y+20	; 0x14
    37a2:	9d 89       	ldd	r25, Y+21	; 0x15
    37a4:	ae 89       	ldd	r26, Y+22	; 0x16
    37a6:	bf 89       	ldd	r27, Y+23	; 0x17
    37a8:	be 01       	movw	r22, r28
    37aa:	6e 5f       	subi	r22, 0xFE	; 254
    37ac:	7f 4f       	sbci	r23, 0xFF	; 255
    37ae:	00 e0       	ldi	r16, 0x00	; 0
    37b0:	9c 01       	movw	r18, r24
    37b2:	ad 01       	movw	r20, r26
    37b4:	cf 01       	movw	r24, r30
    37b6:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <xQueueGenericSend>
    37ba:	89 83       	std	Y+1, r24	; 0x01
    37bc:	1c c0       	rjmp	.+56     	; 0x37f6 <xTimerGenericCommand+0xcc>
    37be:	80 91 fa 30 	lds	r24, 0x30FA	; 0x8030fa <xTimerQueue>
    37c2:	90 91 fb 30 	lds	r25, 0x30FB	; 0x8030fb <xTimerQueue+0x1>
    37c6:	be 01       	movw	r22, r28
    37c8:	6e 5f       	subi	r22, 0xFE	; 254
    37ca:	7f 4f       	sbci	r23, 0xFF	; 255
    37cc:	00 e0       	ldi	r16, 0x00	; 0
    37ce:	20 e0       	ldi	r18, 0x00	; 0
    37d0:	30 e0       	ldi	r19, 0x00	; 0
    37d2:	a9 01       	movw	r20, r18
    37d4:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <xQueueGenericSend>
    37d8:	89 83       	std	Y+1, r24	; 0x01
    37da:	0d c0       	rjmp	.+26     	; 0x37f6 <xTimerGenericCommand+0xcc>
    37dc:	80 91 fa 30 	lds	r24, 0x30FA	; 0x8030fa <xTimerQueue>
    37e0:	90 91 fb 30 	lds	r25, 0x30FB	; 0x8030fb <xTimerQueue+0x1>
    37e4:	4a 89       	ldd	r20, Y+18	; 0x12
    37e6:	5b 89       	ldd	r21, Y+19	; 0x13
    37e8:	be 01       	movw	r22, r28
    37ea:	6e 5f       	subi	r22, 0xFE	; 254
    37ec:	7f 4f       	sbci	r23, 0xFF	; 255
    37ee:	20 e0       	ldi	r18, 0x00	; 0
    37f0:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <xQueueGenericSendFromISR>
    37f4:	89 83       	std	Y+1, r24	; 0x01
    37f6:	89 81       	ldd	r24, Y+1	; 0x01
    37f8:	67 96       	adiw	r28, 0x17	; 23
    37fa:	cd bf       	out	0x3d, r28	; 61
    37fc:	de bf       	out	0x3e, r29	; 62
    37fe:	df 91       	pop	r29
    3800:	cf 91       	pop	r28
    3802:	1f 91       	pop	r17
    3804:	0f 91       	pop	r16
    3806:	ff 90       	pop	r15
    3808:	ef 90       	pop	r14
    380a:	df 90       	pop	r13
    380c:	cf 90       	pop	r12
    380e:	08 95       	ret

00003810 <prvProcessExpiredTimer>:
    3810:	cf 92       	push	r12
    3812:	df 92       	push	r13
    3814:	ef 92       	push	r14
    3816:	ff 92       	push	r15
    3818:	0f 93       	push	r16
    381a:	1f 93       	push	r17
    381c:	cf 93       	push	r28
    381e:	df 93       	push	r29
    3820:	cd b7       	in	r28, 0x3d	; 61
    3822:	de b7       	in	r29, 0x3e	; 62
    3824:	2b 97       	sbiw	r28, 0x0b	; 11
    3826:	cd bf       	out	0x3d, r28	; 61
    3828:	de bf       	out	0x3e, r29	; 62
    382a:	6c 83       	std	Y+4, r22	; 0x04
    382c:	7d 83       	std	Y+5, r23	; 0x05
    382e:	8e 83       	std	Y+6, r24	; 0x06
    3830:	9f 83       	std	Y+7, r25	; 0x07
    3832:	28 87       	std	Y+8, r18	; 0x08
    3834:	39 87       	std	Y+9, r19	; 0x09
    3836:	4a 87       	std	Y+10, r20	; 0x0a
    3838:	5b 87       	std	Y+11, r21	; 0x0b
    383a:	80 91 f6 30 	lds	r24, 0x30F6	; 0x8030f6 <pxCurrentTimerList>
    383e:	90 91 f7 30 	lds	r25, 0x30F7	; 0x8030f7 <pxCurrentTimerList+0x1>
    3842:	fc 01       	movw	r30, r24
    3844:	87 81       	ldd	r24, Z+7	; 0x07
    3846:	90 85       	ldd	r25, Z+8	; 0x08
    3848:	fc 01       	movw	r30, r24
    384a:	80 85       	ldd	r24, Z+8	; 0x08
    384c:	91 85       	ldd	r25, Z+9	; 0x09
    384e:	89 83       	std	Y+1, r24	; 0x01
    3850:	9a 83       	std	Y+2, r25	; 0x02
    3852:	89 81       	ldd	r24, Y+1	; 0x01
    3854:	9a 81       	ldd	r25, Y+2	; 0x02
    3856:	02 96       	adiw	r24, 0x02	; 2
    3858:	0e 94 08 09 	call	0x1210	; 0x1210 <uxListRemove>
    385c:	89 81       	ldd	r24, Y+1	; 0x01
    385e:	9a 81       	ldd	r25, Y+2	; 0x02
    3860:	fc 01       	movw	r30, r24
    3862:	82 89       	ldd	r24, Z+18	; 0x12
    3864:	81 30       	cpi	r24, 0x01	; 1
    3866:	b1 f5       	brne	.+108    	; 0x38d4 <prvProcessExpiredTimer+0xc4>
    3868:	89 81       	ldd	r24, Y+1	; 0x01
    386a:	9a 81       	ldd	r25, Y+2	; 0x02
    386c:	fc 01       	movw	r30, r24
    386e:	26 85       	ldd	r18, Z+14	; 0x0e
    3870:	37 85       	ldd	r19, Z+15	; 0x0f
    3872:	40 89       	ldd	r20, Z+16	; 0x10
    3874:	51 89       	ldd	r21, Z+17	; 0x11
    3876:	8c 81       	ldd	r24, Y+4	; 0x04
    3878:	9d 81       	ldd	r25, Y+5	; 0x05
    387a:	ae 81       	ldd	r26, Y+6	; 0x06
    387c:	bf 81       	ldd	r27, Y+7	; 0x07
    387e:	82 0f       	add	r24, r18
    3880:	93 1f       	adc	r25, r19
    3882:	a4 1f       	adc	r26, r20
    3884:	b5 1f       	adc	r27, r21
    3886:	ec 80       	ldd	r14, Y+4	; 0x04
    3888:	fd 80       	ldd	r15, Y+5	; 0x05
    388a:	0e 81       	ldd	r16, Y+6	; 0x06
    388c:	1f 81       	ldd	r17, Y+7	; 0x07
    388e:	28 85       	ldd	r18, Y+8	; 0x08
    3890:	39 85       	ldd	r19, Y+9	; 0x09
    3892:	4a 85       	ldd	r20, Y+10	; 0x0a
    3894:	5b 85       	ldd	r21, Y+11	; 0x0b
    3896:	e9 81       	ldd	r30, Y+1	; 0x01
    3898:	fa 81       	ldd	r31, Y+2	; 0x02
    389a:	67 01       	movw	r12, r14
    389c:	78 01       	movw	r14, r16
    389e:	89 01       	movw	r16, r18
    38a0:	9a 01       	movw	r18, r20
    38a2:	ac 01       	movw	r20, r24
    38a4:	bd 01       	movw	r22, r26
    38a6:	cf 01       	movw	r24, r30
    38a8:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <prvInsertTimerInActiveList>
    38ac:	88 23       	and	r24, r24
    38ae:	91 f0       	breq	.+36     	; 0x38d4 <prvProcessExpiredTimer+0xc4>
    38b0:	8c 81       	ldd	r24, Y+4	; 0x04
    38b2:	9d 81       	ldd	r25, Y+5	; 0x05
    38b4:	ae 81       	ldd	r26, Y+6	; 0x06
    38b6:	bf 81       	ldd	r27, Y+7	; 0x07
    38b8:	e9 81       	ldd	r30, Y+1	; 0x01
    38ba:	fa 81       	ldd	r31, Y+2	; 0x02
    38bc:	c1 2c       	mov	r12, r1
    38be:	d1 2c       	mov	r13, r1
    38c0:	76 01       	movw	r14, r12
    38c2:	00 e0       	ldi	r16, 0x00	; 0
    38c4:	10 e0       	ldi	r17, 0x00	; 0
    38c6:	9c 01       	movw	r18, r24
    38c8:	ad 01       	movw	r20, r26
    38ca:	60 e0       	ldi	r22, 0x00	; 0
    38cc:	cf 01       	movw	r24, r30
    38ce:	0e 94 95 1b 	call	0x372a	; 0x372a <xTimerGenericCommand>
    38d2:	8b 83       	std	Y+3, r24	; 0x03
    38d4:	89 81       	ldd	r24, Y+1	; 0x01
    38d6:	9a 81       	ldd	r25, Y+2	; 0x02
    38d8:	fc 01       	movw	r30, r24
    38da:	25 89       	ldd	r18, Z+21	; 0x15
    38dc:	36 89       	ldd	r19, Z+22	; 0x16
    38de:	89 81       	ldd	r24, Y+1	; 0x01
    38e0:	9a 81       	ldd	r25, Y+2	; 0x02
    38e2:	f9 01       	movw	r30, r18
    38e4:	19 95       	eicall
    38e6:	00 00       	nop
    38e8:	2b 96       	adiw	r28, 0x0b	; 11
    38ea:	cd bf       	out	0x3d, r28	; 61
    38ec:	de bf       	out	0x3e, r29	; 62
    38ee:	df 91       	pop	r29
    38f0:	cf 91       	pop	r28
    38f2:	1f 91       	pop	r17
    38f4:	0f 91       	pop	r16
    38f6:	ff 90       	pop	r15
    38f8:	ef 90       	pop	r14
    38fa:	df 90       	pop	r13
    38fc:	cf 90       	pop	r12
    38fe:	08 95       	ret

00003900 <prvTimerTask>:
    3900:	cf 93       	push	r28
    3902:	df 93       	push	r29
    3904:	cd b7       	in	r28, 0x3d	; 61
    3906:	de b7       	in	r29, 0x3e	; 62
    3908:	27 97       	sbiw	r28, 0x07	; 7
    390a:	cd bf       	out	0x3d, r28	; 61
    390c:	de bf       	out	0x3e, r29	; 62
    390e:	8e 83       	std	Y+6, r24	; 0x06
    3910:	9f 83       	std	Y+7, r25	; 0x07
    3912:	ce 01       	movw	r24, r28
    3914:	05 96       	adiw	r24, 0x05	; 5
    3916:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <prvGetNextExpireTime>
    391a:	dc 01       	movw	r26, r24
    391c:	cb 01       	movw	r24, r22
    391e:	89 83       	std	Y+1, r24	; 0x01
    3920:	9a 83       	std	Y+2, r25	; 0x02
    3922:	ab 83       	std	Y+3, r26	; 0x03
    3924:	bc 83       	std	Y+4, r27	; 0x04
    3926:	2d 81       	ldd	r18, Y+5	; 0x05
    3928:	89 81       	ldd	r24, Y+1	; 0x01
    392a:	9a 81       	ldd	r25, Y+2	; 0x02
    392c:	ab 81       	ldd	r26, Y+3	; 0x03
    392e:	bc 81       	ldd	r27, Y+4	; 0x04
    3930:	42 2f       	mov	r20, r18
    3932:	bc 01       	movw	r22, r24
    3934:	cd 01       	movw	r24, r26
    3936:	0e 94 a0 1c 	call	0x3940	; 0x3940 <prvProcessTimerOrBlockTask>
    393a:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <prvProcessReceivedCommands>
    393e:	e9 cf       	rjmp	.-46     	; 0x3912 <prvTimerTask+0x12>

00003940 <prvProcessTimerOrBlockTask>:
    3940:	ef 92       	push	r14
    3942:	ff 92       	push	r15
    3944:	0f 93       	push	r16
    3946:	1f 93       	push	r17
    3948:	cf 93       	push	r28
    394a:	df 93       	push	r29
    394c:	cd b7       	in	r28, 0x3d	; 61
    394e:	de b7       	in	r29, 0x3e	; 62
    3950:	2a 97       	sbiw	r28, 0x0a	; 10
    3952:	cd bf       	out	0x3d, r28	; 61
    3954:	de bf       	out	0x3e, r29	; 62
    3956:	6e 83       	std	Y+6, r22	; 0x06
    3958:	7f 83       	std	Y+7, r23	; 0x07
    395a:	88 87       	std	Y+8, r24	; 0x08
    395c:	99 87       	std	Y+9, r25	; 0x09
    395e:	4a 87       	std	Y+10, r20	; 0x0a
    3960:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <vTaskSuspendAll>
    3964:	ce 01       	movw	r24, r28
    3966:	05 96       	adiw	r24, 0x05	; 5
    3968:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <prvSampleTimeNow>
    396c:	dc 01       	movw	r26, r24
    396e:	cb 01       	movw	r24, r22
    3970:	89 83       	std	Y+1, r24	; 0x01
    3972:	9a 83       	std	Y+2, r25	; 0x02
    3974:	ab 83       	std	Y+3, r26	; 0x03
    3976:	bc 83       	std	Y+4, r27	; 0x04
    3978:	8d 81       	ldd	r24, Y+5	; 0x05
    397a:	88 23       	and	r24, r24
    397c:	09 f0       	breq	.+2      	; 0x3980 <prvProcessTimerOrBlockTask+0x40>
    397e:	4e c0       	rjmp	.+156    	; 0x3a1c <prvProcessTimerOrBlockTask+0xdc>
    3980:	8a 85       	ldd	r24, Y+10	; 0x0a
    3982:	88 23       	and	r24, r24
    3984:	e1 f4       	brne	.+56     	; 0x39be <prvProcessTimerOrBlockTask+0x7e>
    3986:	2e 81       	ldd	r18, Y+6	; 0x06
    3988:	3f 81       	ldd	r19, Y+7	; 0x07
    398a:	48 85       	ldd	r20, Y+8	; 0x08
    398c:	59 85       	ldd	r21, Y+9	; 0x09
    398e:	89 81       	ldd	r24, Y+1	; 0x01
    3990:	9a 81       	ldd	r25, Y+2	; 0x02
    3992:	ab 81       	ldd	r26, Y+3	; 0x03
    3994:	bc 81       	ldd	r27, Y+4	; 0x04
    3996:	82 17       	cp	r24, r18
    3998:	93 07       	cpc	r25, r19
    399a:	a4 07       	cpc	r26, r20
    399c:	b5 07       	cpc	r27, r21
    399e:	78 f0       	brcs	.+30     	; 0x39be <prvProcessTimerOrBlockTask+0x7e>
    39a0:	0e 94 ff 14 	call	0x29fe	; 0x29fe <xTaskResumeAll>
    39a4:	29 81       	ldd	r18, Y+1	; 0x01
    39a6:	3a 81       	ldd	r19, Y+2	; 0x02
    39a8:	4b 81       	ldd	r20, Y+3	; 0x03
    39aa:	5c 81       	ldd	r21, Y+4	; 0x04
    39ac:	8e 81       	ldd	r24, Y+6	; 0x06
    39ae:	9f 81       	ldd	r25, Y+7	; 0x07
    39b0:	a8 85       	ldd	r26, Y+8	; 0x08
    39b2:	b9 85       	ldd	r27, Y+9	; 0x09
    39b4:	bc 01       	movw	r22, r24
    39b6:	cd 01       	movw	r24, r26
    39b8:	0e 94 08 1c 	call	0x3810	; 0x3810 <prvProcessExpiredTimer>
    39bc:	31 c0       	rjmp	.+98     	; 0x3a20 <prvProcessTimerOrBlockTask+0xe0>
    39be:	8a 85       	ldd	r24, Y+10	; 0x0a
    39c0:	88 23       	and	r24, r24
    39c2:	59 f0       	breq	.+22     	; 0x39da <prvProcessTimerOrBlockTask+0x9a>
    39c4:	80 91 f8 30 	lds	r24, 0x30F8	; 0x8030f8 <pxOverflowTimerList>
    39c8:	90 91 f9 30 	lds	r25, 0x30F9	; 0x8030f9 <pxOverflowTimerList+0x1>
    39cc:	fc 01       	movw	r30, r24
    39ce:	90 81       	ld	r25, Z
    39d0:	81 e0       	ldi	r24, 0x01	; 1
    39d2:	99 23       	and	r25, r25
    39d4:	09 f0       	breq	.+2      	; 0x39d8 <prvProcessTimerOrBlockTask+0x98>
    39d6:	80 e0       	ldi	r24, 0x00	; 0
    39d8:	8a 87       	std	Y+10, r24	; 0x0a
    39da:	2e 81       	ldd	r18, Y+6	; 0x06
    39dc:	3f 81       	ldd	r19, Y+7	; 0x07
    39de:	48 85       	ldd	r20, Y+8	; 0x08
    39e0:	59 85       	ldd	r21, Y+9	; 0x09
    39e2:	89 81       	ldd	r24, Y+1	; 0x01
    39e4:	9a 81       	ldd	r25, Y+2	; 0x02
    39e6:	ab 81       	ldd	r26, Y+3	; 0x03
    39e8:	bc 81       	ldd	r27, Y+4	; 0x04
    39ea:	79 01       	movw	r14, r18
    39ec:	8a 01       	movw	r16, r20
    39ee:	e8 1a       	sub	r14, r24
    39f0:	f9 0a       	sbc	r15, r25
    39f2:	0a 0b       	sbc	r16, r26
    39f4:	1b 0b       	sbc	r17, r27
    39f6:	d8 01       	movw	r26, r16
    39f8:	c7 01       	movw	r24, r14
    39fa:	e0 91 fa 30 	lds	r30, 0x30FA	; 0x8030fa <xTimerQueue>
    39fe:	f0 91 fb 30 	lds	r31, 0x30FB	; 0x8030fb <xTimerQueue+0x1>
    3a02:	2a 85       	ldd	r18, Y+10	; 0x0a
    3a04:	ac 01       	movw	r20, r24
    3a06:	bd 01       	movw	r22, r26
    3a08:	cf 01       	movw	r24, r30
    3a0a:	0e 94 9f 11 	call	0x233e	; 0x233e <vQueueWaitForMessageRestricted>
    3a0e:	0e 94 ff 14 	call	0x29fe	; 0x29fe <xTaskResumeAll>
    3a12:	88 23       	and	r24, r24
    3a14:	29 f4       	brne	.+10     	; 0x3a20 <prvProcessTimerOrBlockTask+0xe0>
    3a16:	0e 94 86 0b 	call	0x170c	; 0x170c <vPortYield>
    3a1a:	02 c0       	rjmp	.+4      	; 0x3a20 <prvProcessTimerOrBlockTask+0xe0>
    3a1c:	0e 94 ff 14 	call	0x29fe	; 0x29fe <xTaskResumeAll>
    3a20:	00 00       	nop
    3a22:	2a 96       	adiw	r28, 0x0a	; 10
    3a24:	cd bf       	out	0x3d, r28	; 61
    3a26:	de bf       	out	0x3e, r29	; 62
    3a28:	df 91       	pop	r29
    3a2a:	cf 91       	pop	r28
    3a2c:	1f 91       	pop	r17
    3a2e:	0f 91       	pop	r16
    3a30:	ff 90       	pop	r15
    3a32:	ef 90       	pop	r14
    3a34:	08 95       	ret

00003a36 <prvGetNextExpireTime>:
    3a36:	cf 93       	push	r28
    3a38:	df 93       	push	r29
    3a3a:	00 d0       	rcall	.+0      	; 0x3a3c <prvGetNextExpireTime+0x6>
    3a3c:	00 d0       	rcall	.+0      	; 0x3a3e <prvGetNextExpireTime+0x8>
    3a3e:	cd b7       	in	r28, 0x3d	; 61
    3a40:	de b7       	in	r29, 0x3e	; 62
    3a42:	8d 83       	std	Y+5, r24	; 0x05
    3a44:	9e 83       	std	Y+6, r25	; 0x06
    3a46:	80 91 f6 30 	lds	r24, 0x30F6	; 0x8030f6 <pxCurrentTimerList>
    3a4a:	90 91 f7 30 	lds	r25, 0x30F7	; 0x8030f7 <pxCurrentTimerList+0x1>
    3a4e:	fc 01       	movw	r30, r24
    3a50:	90 81       	ld	r25, Z
    3a52:	81 e0       	ldi	r24, 0x01	; 1
    3a54:	99 23       	and	r25, r25
    3a56:	09 f0       	breq	.+2      	; 0x3a5a <prvGetNextExpireTime+0x24>
    3a58:	80 e0       	ldi	r24, 0x00	; 0
    3a5a:	28 2f       	mov	r18, r24
    3a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a60:	fc 01       	movw	r30, r24
    3a62:	20 83       	st	Z, r18
    3a64:	8d 81       	ldd	r24, Y+5	; 0x05
    3a66:	9e 81       	ldd	r25, Y+6	; 0x06
    3a68:	fc 01       	movw	r30, r24
    3a6a:	80 81       	ld	r24, Z
    3a6c:	88 23       	and	r24, r24
    3a6e:	89 f4       	brne	.+34     	; 0x3a92 <prvGetNextExpireTime+0x5c>
    3a70:	80 91 f6 30 	lds	r24, 0x30F6	; 0x8030f6 <pxCurrentTimerList>
    3a74:	90 91 f7 30 	lds	r25, 0x30F7	; 0x8030f7 <pxCurrentTimerList+0x1>
    3a78:	fc 01       	movw	r30, r24
    3a7a:	87 81       	ldd	r24, Z+7	; 0x07
    3a7c:	90 85       	ldd	r25, Z+8	; 0x08
    3a7e:	fc 01       	movw	r30, r24
    3a80:	80 81       	ld	r24, Z
    3a82:	91 81       	ldd	r25, Z+1	; 0x01
    3a84:	a2 81       	ldd	r26, Z+2	; 0x02
    3a86:	b3 81       	ldd	r27, Z+3	; 0x03
    3a88:	89 83       	std	Y+1, r24	; 0x01
    3a8a:	9a 83       	std	Y+2, r25	; 0x02
    3a8c:	ab 83       	std	Y+3, r26	; 0x03
    3a8e:	bc 83       	std	Y+4, r27	; 0x04
    3a90:	04 c0       	rjmp	.+8      	; 0x3a9a <prvGetNextExpireTime+0x64>
    3a92:	19 82       	std	Y+1, r1	; 0x01
    3a94:	1a 82       	std	Y+2, r1	; 0x02
    3a96:	1b 82       	std	Y+3, r1	; 0x03
    3a98:	1c 82       	std	Y+4, r1	; 0x04
    3a9a:	89 81       	ldd	r24, Y+1	; 0x01
    3a9c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a9e:	ab 81       	ldd	r26, Y+3	; 0x03
    3aa0:	bc 81       	ldd	r27, Y+4	; 0x04
    3aa2:	bc 01       	movw	r22, r24
    3aa4:	cd 01       	movw	r24, r26
    3aa6:	26 96       	adiw	r28, 0x06	; 6
    3aa8:	cd bf       	out	0x3d, r28	; 61
    3aaa:	de bf       	out	0x3e, r29	; 62
    3aac:	df 91       	pop	r29
    3aae:	cf 91       	pop	r28
    3ab0:	08 95       	ret

00003ab2 <prvSampleTimeNow>:
    3ab2:	cf 93       	push	r28
    3ab4:	df 93       	push	r29
    3ab6:	00 d0       	rcall	.+0      	; 0x3ab8 <prvSampleTimeNow+0x6>
    3ab8:	00 d0       	rcall	.+0      	; 0x3aba <prvSampleTimeNow+0x8>
    3aba:	cd b7       	in	r28, 0x3d	; 61
    3abc:	de b7       	in	r29, 0x3e	; 62
    3abe:	8d 83       	std	Y+5, r24	; 0x05
    3ac0:	9e 83       	std	Y+6, r25	; 0x06
    3ac2:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <xTaskGetTickCount>
    3ac6:	dc 01       	movw	r26, r24
    3ac8:	cb 01       	movw	r24, r22
    3aca:	89 83       	std	Y+1, r24	; 0x01
    3acc:	9a 83       	std	Y+2, r25	; 0x02
    3ace:	ab 83       	std	Y+3, r26	; 0x03
    3ad0:	bc 83       	std	Y+4, r27	; 0x04
    3ad2:	80 91 fe 30 	lds	r24, 0x30FE	; 0x8030fe <xLastTime.4745>
    3ad6:	90 91 ff 30 	lds	r25, 0x30FF	; 0x8030ff <xLastTime.4745+0x1>
    3ada:	a0 91 00 31 	lds	r26, 0x3100	; 0x803100 <xLastTime.4745+0x2>
    3ade:	b0 91 01 31 	lds	r27, 0x3101	; 0x803101 <xLastTime.4745+0x3>
    3ae2:	29 81       	ldd	r18, Y+1	; 0x01
    3ae4:	3a 81       	ldd	r19, Y+2	; 0x02
    3ae6:	4b 81       	ldd	r20, Y+3	; 0x03
    3ae8:	5c 81       	ldd	r21, Y+4	; 0x04
    3aea:	28 17       	cp	r18, r24
    3aec:	39 07       	cpc	r19, r25
    3aee:	4a 07       	cpc	r20, r26
    3af0:	5b 07       	cpc	r21, r27
    3af2:	40 f4       	brcc	.+16     	; 0x3b04 <prvSampleTimeNow+0x52>
    3af4:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <prvSwitchTimerLists>
    3af8:	8d 81       	ldd	r24, Y+5	; 0x05
    3afa:	9e 81       	ldd	r25, Y+6	; 0x06
    3afc:	21 e0       	ldi	r18, 0x01	; 1
    3afe:	fc 01       	movw	r30, r24
    3b00:	20 83       	st	Z, r18
    3b02:	04 c0       	rjmp	.+8      	; 0x3b0c <prvSampleTimeNow+0x5a>
    3b04:	8d 81       	ldd	r24, Y+5	; 0x05
    3b06:	9e 81       	ldd	r25, Y+6	; 0x06
    3b08:	fc 01       	movw	r30, r24
    3b0a:	10 82       	st	Z, r1
    3b0c:	89 81       	ldd	r24, Y+1	; 0x01
    3b0e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b10:	ab 81       	ldd	r26, Y+3	; 0x03
    3b12:	bc 81       	ldd	r27, Y+4	; 0x04
    3b14:	80 93 fe 30 	sts	0x30FE, r24	; 0x8030fe <xLastTime.4745>
    3b18:	90 93 ff 30 	sts	0x30FF, r25	; 0x8030ff <xLastTime.4745+0x1>
    3b1c:	a0 93 00 31 	sts	0x3100, r26	; 0x803100 <xLastTime.4745+0x2>
    3b20:	b0 93 01 31 	sts	0x3101, r27	; 0x803101 <xLastTime.4745+0x3>
    3b24:	89 81       	ldd	r24, Y+1	; 0x01
    3b26:	9a 81       	ldd	r25, Y+2	; 0x02
    3b28:	ab 81       	ldd	r26, Y+3	; 0x03
    3b2a:	bc 81       	ldd	r27, Y+4	; 0x04
    3b2c:	bc 01       	movw	r22, r24
    3b2e:	cd 01       	movw	r24, r26
    3b30:	26 96       	adiw	r28, 0x06	; 6
    3b32:	cd bf       	out	0x3d, r28	; 61
    3b34:	de bf       	out	0x3e, r29	; 62
    3b36:	df 91       	pop	r29
    3b38:	cf 91       	pop	r28
    3b3a:	08 95       	ret

00003b3c <prvInsertTimerInActiveList>:
    3b3c:	cf 92       	push	r12
    3b3e:	df 92       	push	r13
    3b40:	ef 92       	push	r14
    3b42:	ff 92       	push	r15
    3b44:	0f 93       	push	r16
    3b46:	1f 93       	push	r17
    3b48:	cf 93       	push	r28
    3b4a:	df 93       	push	r29
    3b4c:	cd b7       	in	r28, 0x3d	; 61
    3b4e:	de b7       	in	r29, 0x3e	; 62
    3b50:	2f 97       	sbiw	r28, 0x0f	; 15
    3b52:	cd bf       	out	0x3d, r28	; 61
    3b54:	de bf       	out	0x3e, r29	; 62
    3b56:	8a 83       	std	Y+2, r24	; 0x02
    3b58:	9b 83       	std	Y+3, r25	; 0x03
    3b5a:	4c 83       	std	Y+4, r20	; 0x04
    3b5c:	5d 83       	std	Y+5, r21	; 0x05
    3b5e:	6e 83       	std	Y+6, r22	; 0x06
    3b60:	7f 83       	std	Y+7, r23	; 0x07
    3b62:	08 87       	std	Y+8, r16	; 0x08
    3b64:	19 87       	std	Y+9, r17	; 0x09
    3b66:	2a 87       	std	Y+10, r18	; 0x0a
    3b68:	3b 87       	std	Y+11, r19	; 0x0b
    3b6a:	cc 86       	std	Y+12, r12	; 0x0c
    3b6c:	dd 86       	std	Y+13, r13	; 0x0d
    3b6e:	ee 86       	std	Y+14, r14	; 0x0e
    3b70:	ff 86       	std	Y+15, r15	; 0x0f
    3b72:	19 82       	std	Y+1, r1	; 0x01
    3b74:	2a 81       	ldd	r18, Y+2	; 0x02
    3b76:	3b 81       	ldd	r19, Y+3	; 0x03
    3b78:	8c 81       	ldd	r24, Y+4	; 0x04
    3b7a:	9d 81       	ldd	r25, Y+5	; 0x05
    3b7c:	ae 81       	ldd	r26, Y+6	; 0x06
    3b7e:	bf 81       	ldd	r27, Y+7	; 0x07
    3b80:	f9 01       	movw	r30, r18
    3b82:	82 83       	std	Z+2, r24	; 0x02
    3b84:	93 83       	std	Z+3, r25	; 0x03
    3b86:	a4 83       	std	Z+4, r26	; 0x04
    3b88:	b5 83       	std	Z+5, r27	; 0x05
    3b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b8c:	9b 81       	ldd	r25, Y+3	; 0x03
    3b8e:	2a 81       	ldd	r18, Y+2	; 0x02
    3b90:	3b 81       	ldd	r19, Y+3	; 0x03
    3b92:	fc 01       	movw	r30, r24
    3b94:	22 87       	std	Z+10, r18	; 0x0a
    3b96:	33 87       	std	Z+11, r19	; 0x0b
    3b98:	2c 81       	ldd	r18, Y+4	; 0x04
    3b9a:	3d 81       	ldd	r19, Y+5	; 0x05
    3b9c:	4e 81       	ldd	r20, Y+6	; 0x06
    3b9e:	5f 81       	ldd	r21, Y+7	; 0x07
    3ba0:	88 85       	ldd	r24, Y+8	; 0x08
    3ba2:	99 85       	ldd	r25, Y+9	; 0x09
    3ba4:	aa 85       	ldd	r26, Y+10	; 0x0a
    3ba6:	bb 85       	ldd	r27, Y+11	; 0x0b
    3ba8:	82 17       	cp	r24, r18
    3baa:	93 07       	cpc	r25, r19
    3bac:	a4 07       	cpc	r26, r20
    3bae:	b5 07       	cpc	r27, r21
    3bb0:	40 f1       	brcs	.+80     	; 0x3c02 <prvInsertTimerInActiveList+0xc6>
    3bb2:	28 85       	ldd	r18, Y+8	; 0x08
    3bb4:	39 85       	ldd	r19, Y+9	; 0x09
    3bb6:	4a 85       	ldd	r20, Y+10	; 0x0a
    3bb8:	5b 85       	ldd	r21, Y+11	; 0x0b
    3bba:	8c 85       	ldd	r24, Y+12	; 0x0c
    3bbc:	9d 85       	ldd	r25, Y+13	; 0x0d
    3bbe:	ae 85       	ldd	r26, Y+14	; 0x0e
    3bc0:	bf 85       	ldd	r27, Y+15	; 0x0f
    3bc2:	28 1b       	sub	r18, r24
    3bc4:	39 0b       	sbc	r19, r25
    3bc6:	4a 0b       	sbc	r20, r26
    3bc8:	5b 0b       	sbc	r21, r27
    3bca:	8a 81       	ldd	r24, Y+2	; 0x02
    3bcc:	9b 81       	ldd	r25, Y+3	; 0x03
    3bce:	fc 01       	movw	r30, r24
    3bd0:	86 85       	ldd	r24, Z+14	; 0x0e
    3bd2:	97 85       	ldd	r25, Z+15	; 0x0f
    3bd4:	a0 89       	ldd	r26, Z+16	; 0x10
    3bd6:	b1 89       	ldd	r27, Z+17	; 0x11
    3bd8:	28 17       	cp	r18, r24
    3bda:	39 07       	cpc	r19, r25
    3bdc:	4a 07       	cpc	r20, r26
    3bde:	5b 07       	cpc	r21, r27
    3be0:	18 f0       	brcs	.+6      	; 0x3be8 <prvInsertTimerInActiveList+0xac>
    3be2:	81 e0       	ldi	r24, 0x01	; 1
    3be4:	89 83       	std	Y+1, r24	; 0x01
    3be6:	36 c0       	rjmp	.+108    	; 0x3c54 <prvInsertTimerInActiveList+0x118>
    3be8:	8a 81       	ldd	r24, Y+2	; 0x02
    3bea:	9b 81       	ldd	r25, Y+3	; 0x03
    3bec:	9c 01       	movw	r18, r24
    3bee:	2e 5f       	subi	r18, 0xFE	; 254
    3bf0:	3f 4f       	sbci	r19, 0xFF	; 255
    3bf2:	80 91 f8 30 	lds	r24, 0x30F8	; 0x8030f8 <pxOverflowTimerList>
    3bf6:	90 91 f9 30 	lds	r25, 0x30F9	; 0x8030f9 <pxOverflowTimerList+0x1>
    3bfa:	b9 01       	movw	r22, r18
    3bfc:	0e 94 87 08 	call	0x110e	; 0x110e <vListInsert>
    3c00:	29 c0       	rjmp	.+82     	; 0x3c54 <prvInsertTimerInActiveList+0x118>
    3c02:	28 85       	ldd	r18, Y+8	; 0x08
    3c04:	39 85       	ldd	r19, Y+9	; 0x09
    3c06:	4a 85       	ldd	r20, Y+10	; 0x0a
    3c08:	5b 85       	ldd	r21, Y+11	; 0x0b
    3c0a:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c0c:	9d 85       	ldd	r25, Y+13	; 0x0d
    3c0e:	ae 85       	ldd	r26, Y+14	; 0x0e
    3c10:	bf 85       	ldd	r27, Y+15	; 0x0f
    3c12:	28 17       	cp	r18, r24
    3c14:	39 07       	cpc	r19, r25
    3c16:	4a 07       	cpc	r20, r26
    3c18:	5b 07       	cpc	r21, r27
    3c1a:	80 f4       	brcc	.+32     	; 0x3c3c <prvInsertTimerInActiveList+0x100>
    3c1c:	2c 81       	ldd	r18, Y+4	; 0x04
    3c1e:	3d 81       	ldd	r19, Y+5	; 0x05
    3c20:	4e 81       	ldd	r20, Y+6	; 0x06
    3c22:	5f 81       	ldd	r21, Y+7	; 0x07
    3c24:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c26:	9d 85       	ldd	r25, Y+13	; 0x0d
    3c28:	ae 85       	ldd	r26, Y+14	; 0x0e
    3c2a:	bf 85       	ldd	r27, Y+15	; 0x0f
    3c2c:	28 17       	cp	r18, r24
    3c2e:	39 07       	cpc	r19, r25
    3c30:	4a 07       	cpc	r20, r26
    3c32:	5b 07       	cpc	r21, r27
    3c34:	18 f0       	brcs	.+6      	; 0x3c3c <prvInsertTimerInActiveList+0x100>
    3c36:	81 e0       	ldi	r24, 0x01	; 1
    3c38:	89 83       	std	Y+1, r24	; 0x01
    3c3a:	0c c0       	rjmp	.+24     	; 0x3c54 <prvInsertTimerInActiveList+0x118>
    3c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c3e:	9b 81       	ldd	r25, Y+3	; 0x03
    3c40:	9c 01       	movw	r18, r24
    3c42:	2e 5f       	subi	r18, 0xFE	; 254
    3c44:	3f 4f       	sbci	r19, 0xFF	; 255
    3c46:	80 91 f6 30 	lds	r24, 0x30F6	; 0x8030f6 <pxCurrentTimerList>
    3c4a:	90 91 f7 30 	lds	r25, 0x30F7	; 0x8030f7 <pxCurrentTimerList+0x1>
    3c4e:	b9 01       	movw	r22, r18
    3c50:	0e 94 87 08 	call	0x110e	; 0x110e <vListInsert>
    3c54:	89 81       	ldd	r24, Y+1	; 0x01
    3c56:	2f 96       	adiw	r28, 0x0f	; 15
    3c58:	cd bf       	out	0x3d, r28	; 61
    3c5a:	de bf       	out	0x3e, r29	; 62
    3c5c:	df 91       	pop	r29
    3c5e:	cf 91       	pop	r28
    3c60:	1f 91       	pop	r17
    3c62:	0f 91       	pop	r16
    3c64:	ff 90       	pop	r15
    3c66:	ef 90       	pop	r14
    3c68:	df 90       	pop	r13
    3c6a:	cf 90       	pop	r12
    3c6c:	08 95       	ret

00003c6e <prvProcessReceivedCommands>:
    3c6e:	cf 92       	push	r12
    3c70:	df 92       	push	r13
    3c72:	ef 92       	push	r14
    3c74:	ff 92       	push	r15
    3c76:	0f 93       	push	r16
    3c78:	1f 93       	push	r17
    3c7a:	cf 93       	push	r28
    3c7c:	df 93       	push	r29
    3c7e:	cd b7       	in	r28, 0x3d	; 61
    3c80:	de b7       	in	r29, 0x3e	; 62
    3c82:	65 97       	sbiw	r28, 0x15	; 21
    3c84:	cd bf       	out	0x3d, r28	; 61
    3c86:	de bf       	out	0x3e, r29	; 62
    3c88:	e0 c0       	rjmp	.+448    	; 0x3e4a <prvProcessReceivedCommands+0x1dc>
    3c8a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c8c:	88 23       	and	r24, r24
    3c8e:	fc f4       	brge	.+62     	; 0x3cce <prvProcessReceivedCommands+0x60>
    3c90:	ce 01       	movw	r24, r28
    3c92:	0a 96       	adiw	r24, 0x0a	; 10
    3c94:	01 96       	adiw	r24, 0x01	; 1
    3c96:	89 83       	std	Y+1, r24	; 0x01
    3c98:	9a 83       	std	Y+2, r25	; 0x02
    3c9a:	89 81       	ldd	r24, Y+1	; 0x01
    3c9c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c9e:	fc 01       	movw	r30, r24
    3ca0:	20 81       	ld	r18, Z
    3ca2:	31 81       	ldd	r19, Z+1	; 0x01
    3ca4:	89 81       	ldd	r24, Y+1	; 0x01
    3ca6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ca8:	fc 01       	movw	r30, r24
    3caa:	84 81       	ldd	r24, Z+4	; 0x04
    3cac:	95 81       	ldd	r25, Z+5	; 0x05
    3cae:	a6 81       	ldd	r26, Z+6	; 0x06
    3cb0:	b7 81       	ldd	r27, Z+7	; 0x07
    3cb2:	49 81       	ldd	r20, Y+1	; 0x01
    3cb4:	5a 81       	ldd	r21, Y+2	; 0x02
    3cb6:	fa 01       	movw	r30, r20
    3cb8:	02 80       	ldd	r0, Z+2	; 0x02
    3cba:	f3 81       	ldd	r31, Z+3	; 0x03
    3cbc:	e0 2d       	mov	r30, r0
    3cbe:	ec 8b       	std	Y+20, r30	; 0x14
    3cc0:	fd 8b       	std	Y+21, r31	; 0x15
    3cc2:	ac 01       	movw	r20, r24
    3cc4:	bd 01       	movw	r22, r26
    3cc6:	8c 89       	ldd	r24, Y+20	; 0x14
    3cc8:	9d 89       	ldd	r25, Y+21	; 0x15
    3cca:	f9 01       	movw	r30, r18
    3ccc:	19 95       	eicall
    3cce:	8a 85       	ldd	r24, Y+10	; 0x0a
    3cd0:	88 23       	and	r24, r24
    3cd2:	0c f4       	brge	.+2      	; 0x3cd6 <prvProcessReceivedCommands+0x68>
    3cd4:	ba c0       	rjmp	.+372    	; 0x3e4a <prvProcessReceivedCommands+0x1dc>
    3cd6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cd8:	98 89       	ldd	r25, Y+16	; 0x10
    3cda:	8b 83       	std	Y+3, r24	; 0x03
    3cdc:	9c 83       	std	Y+4, r25	; 0x04
    3cde:	8b 81       	ldd	r24, Y+3	; 0x03
    3ce0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ce2:	fc 01       	movw	r30, r24
    3ce4:	84 85       	ldd	r24, Z+12	; 0x0c
    3ce6:	95 85       	ldd	r25, Z+13	; 0x0d
    3ce8:	89 2b       	or	r24, r25
    3cea:	29 f0       	breq	.+10     	; 0x3cf6 <prvProcessReceivedCommands+0x88>
    3cec:	8b 81       	ldd	r24, Y+3	; 0x03
    3cee:	9c 81       	ldd	r25, Y+4	; 0x04
    3cf0:	02 96       	adiw	r24, 0x02	; 2
    3cf2:	0e 94 08 09 	call	0x1210	; 0x1210 <uxListRemove>
    3cf6:	ce 01       	movw	r24, r28
    3cf8:	43 96       	adiw	r24, 0x13	; 19
    3cfa:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <prvSampleTimeNow>
    3cfe:	dc 01       	movw	r26, r24
    3d00:	cb 01       	movw	r24, r22
    3d02:	8d 83       	std	Y+5, r24	; 0x05
    3d04:	9e 83       	std	Y+6, r25	; 0x06
    3d06:	af 83       	std	Y+7, r26	; 0x07
    3d08:	b8 87       	std	Y+8, r27	; 0x08
    3d0a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d0c:	08 2e       	mov	r0, r24
    3d0e:	00 0c       	add	r0, r0
    3d10:	99 0b       	sbc	r25, r25
    3d12:	09 2e       	mov	r0, r25
    3d14:	00 0c       	add	r0, r0
    3d16:	aa 0b       	sbc	r26, r26
    3d18:	bb 0b       	sbc	r27, r27
    3d1a:	40 e0       	ldi	r20, 0x00	; 0
    3d1c:	50 e0       	ldi	r21, 0x00	; 0
    3d1e:	29 e0       	ldi	r18, 0x09	; 9
    3d20:	30 e0       	ldi	r19, 0x00	; 0
    3d22:	84 1b       	sub	r24, r20
    3d24:	95 0b       	sbc	r25, r21
    3d26:	28 17       	cp	r18, r24
    3d28:	39 07       	cpc	r19, r25
    3d2a:	08 f4       	brcc	.+2      	; 0x3d2e <prvProcessReceivedCommands+0xc0>
    3d2c:	8d c0       	rjmp	.+282    	; 0x3e48 <prvProcessReceivedCommands+0x1da>
    3d2e:	fc 01       	movw	r30, r24
    3d30:	88 27       	eor	r24, r24
    3d32:	e2 50       	subi	r30, 0x02	; 2
    3d34:	ff 4f       	sbci	r31, 0xFF	; 255
    3d36:	8f 4f       	sbci	r24, 0xFF	; 255
    3d38:	0c 94 37 35 	jmp	0x6a6e	; 0x6a6e <__tablejump2__>
    3d3c:	eb 84       	ldd	r14, Y+11	; 0x0b
    3d3e:	fc 84       	ldd	r15, Y+12	; 0x0c
    3d40:	0d 85       	ldd	r16, Y+13	; 0x0d
    3d42:	1e 85       	ldd	r17, Y+14	; 0x0e
    3d44:	2b 85       	ldd	r18, Y+11	; 0x0b
    3d46:	3c 85       	ldd	r19, Y+12	; 0x0c
    3d48:	4d 85       	ldd	r20, Y+13	; 0x0d
    3d4a:	5e 85       	ldd	r21, Y+14	; 0x0e
    3d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d4e:	9c 81       	ldd	r25, Y+4	; 0x04
    3d50:	fc 01       	movw	r30, r24
    3d52:	86 85       	ldd	r24, Z+14	; 0x0e
    3d54:	97 85       	ldd	r25, Z+15	; 0x0f
    3d56:	a0 89       	ldd	r26, Z+16	; 0x10
    3d58:	b1 89       	ldd	r27, Z+17	; 0x11
    3d5a:	82 0f       	add	r24, r18
    3d5c:	93 1f       	adc	r25, r19
    3d5e:	a4 1f       	adc	r26, r20
    3d60:	b5 1f       	adc	r27, r21
    3d62:	2d 81       	ldd	r18, Y+5	; 0x05
    3d64:	3e 81       	ldd	r19, Y+6	; 0x06
    3d66:	4f 81       	ldd	r20, Y+7	; 0x07
    3d68:	58 85       	ldd	r21, Y+8	; 0x08
    3d6a:	eb 81       	ldd	r30, Y+3	; 0x03
    3d6c:	fc 81       	ldd	r31, Y+4	; 0x04
    3d6e:	67 01       	movw	r12, r14
    3d70:	78 01       	movw	r14, r16
    3d72:	89 01       	movw	r16, r18
    3d74:	9a 01       	movw	r18, r20
    3d76:	ac 01       	movw	r20, r24
    3d78:	bd 01       	movw	r22, r26
    3d7a:	cf 01       	movw	r24, r30
    3d7c:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <prvInsertTimerInActiveList>
    3d80:	88 23       	and	r24, r24
    3d82:	09 f4       	brne	.+2      	; 0x3d86 <prvProcessReceivedCommands+0x118>
    3d84:	62 c0       	rjmp	.+196    	; 0x3e4a <prvProcessReceivedCommands+0x1dc>
    3d86:	8b 81       	ldd	r24, Y+3	; 0x03
    3d88:	9c 81       	ldd	r25, Y+4	; 0x04
    3d8a:	fc 01       	movw	r30, r24
    3d8c:	25 89       	ldd	r18, Z+21	; 0x15
    3d8e:	36 89       	ldd	r19, Z+22	; 0x16
    3d90:	8b 81       	ldd	r24, Y+3	; 0x03
    3d92:	9c 81       	ldd	r25, Y+4	; 0x04
    3d94:	f9 01       	movw	r30, r18
    3d96:	19 95       	eicall
    3d98:	8b 81       	ldd	r24, Y+3	; 0x03
    3d9a:	9c 81       	ldd	r25, Y+4	; 0x04
    3d9c:	fc 01       	movw	r30, r24
    3d9e:	82 89       	ldd	r24, Z+18	; 0x12
    3da0:	81 30       	cpi	r24, 0x01	; 1
    3da2:	09 f0       	breq	.+2      	; 0x3da6 <prvProcessReceivedCommands+0x138>
    3da4:	52 c0       	rjmp	.+164    	; 0x3e4a <prvProcessReceivedCommands+0x1dc>
    3da6:	2b 85       	ldd	r18, Y+11	; 0x0b
    3da8:	3c 85       	ldd	r19, Y+12	; 0x0c
    3daa:	4d 85       	ldd	r20, Y+13	; 0x0d
    3dac:	5e 85       	ldd	r21, Y+14	; 0x0e
    3dae:	8b 81       	ldd	r24, Y+3	; 0x03
    3db0:	9c 81       	ldd	r25, Y+4	; 0x04
    3db2:	fc 01       	movw	r30, r24
    3db4:	86 85       	ldd	r24, Z+14	; 0x0e
    3db6:	97 85       	ldd	r25, Z+15	; 0x0f
    3db8:	a0 89       	ldd	r26, Z+16	; 0x10
    3dba:	b1 89       	ldd	r27, Z+17	; 0x11
    3dbc:	82 0f       	add	r24, r18
    3dbe:	93 1f       	adc	r25, r19
    3dc0:	a4 1f       	adc	r26, r20
    3dc2:	b5 1f       	adc	r27, r21
    3dc4:	eb 81       	ldd	r30, Y+3	; 0x03
    3dc6:	fc 81       	ldd	r31, Y+4	; 0x04
    3dc8:	c1 2c       	mov	r12, r1
    3dca:	d1 2c       	mov	r13, r1
    3dcc:	76 01       	movw	r14, r12
    3dce:	00 e0       	ldi	r16, 0x00	; 0
    3dd0:	10 e0       	ldi	r17, 0x00	; 0
    3dd2:	9c 01       	movw	r18, r24
    3dd4:	ad 01       	movw	r20, r26
    3dd6:	60 e0       	ldi	r22, 0x00	; 0
    3dd8:	cf 01       	movw	r24, r30
    3dda:	0e 94 95 1b 	call	0x372a	; 0x372a <xTimerGenericCommand>
    3dde:	89 87       	std	Y+9, r24	; 0x09
    3de0:	34 c0       	rjmp	.+104    	; 0x3e4a <prvProcessReceivedCommands+0x1dc>
    3de2:	8b 85       	ldd	r24, Y+11	; 0x0b
    3de4:	9c 85       	ldd	r25, Y+12	; 0x0c
    3de6:	ad 85       	ldd	r26, Y+13	; 0x0d
    3de8:	be 85       	ldd	r27, Y+14	; 0x0e
    3dea:	2b 81       	ldd	r18, Y+3	; 0x03
    3dec:	3c 81       	ldd	r19, Y+4	; 0x04
    3dee:	f9 01       	movw	r30, r18
    3df0:	86 87       	std	Z+14, r24	; 0x0e
    3df2:	97 87       	std	Z+15, r25	; 0x0f
    3df4:	a0 8b       	std	Z+16, r26	; 0x10
    3df6:	b1 8b       	std	Z+17, r27	; 0x11
    3df8:	8b 81       	ldd	r24, Y+3	; 0x03
    3dfa:	9c 81       	ldd	r25, Y+4	; 0x04
    3dfc:	fc 01       	movw	r30, r24
    3dfe:	26 85       	ldd	r18, Z+14	; 0x0e
    3e00:	37 85       	ldd	r19, Z+15	; 0x0f
    3e02:	40 89       	ldd	r20, Z+16	; 0x10
    3e04:	51 89       	ldd	r21, Z+17	; 0x11
    3e06:	8d 81       	ldd	r24, Y+5	; 0x05
    3e08:	9e 81       	ldd	r25, Y+6	; 0x06
    3e0a:	af 81       	ldd	r26, Y+7	; 0x07
    3e0c:	b8 85       	ldd	r27, Y+8	; 0x08
    3e0e:	82 0f       	add	r24, r18
    3e10:	93 1f       	adc	r25, r19
    3e12:	a4 1f       	adc	r26, r20
    3e14:	b5 1f       	adc	r27, r21
    3e16:	ed 80       	ldd	r14, Y+5	; 0x05
    3e18:	fe 80       	ldd	r15, Y+6	; 0x06
    3e1a:	0f 81       	ldd	r16, Y+7	; 0x07
    3e1c:	18 85       	ldd	r17, Y+8	; 0x08
    3e1e:	2d 81       	ldd	r18, Y+5	; 0x05
    3e20:	3e 81       	ldd	r19, Y+6	; 0x06
    3e22:	4f 81       	ldd	r20, Y+7	; 0x07
    3e24:	58 85       	ldd	r21, Y+8	; 0x08
    3e26:	eb 81       	ldd	r30, Y+3	; 0x03
    3e28:	fc 81       	ldd	r31, Y+4	; 0x04
    3e2a:	67 01       	movw	r12, r14
    3e2c:	78 01       	movw	r14, r16
    3e2e:	89 01       	movw	r16, r18
    3e30:	9a 01       	movw	r18, r20
    3e32:	ac 01       	movw	r20, r24
    3e34:	bd 01       	movw	r22, r26
    3e36:	cf 01       	movw	r24, r30
    3e38:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <prvInsertTimerInActiveList>
    3e3c:	06 c0       	rjmp	.+12     	; 0x3e4a <prvProcessReceivedCommands+0x1dc>
    3e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e40:	9c 81       	ldd	r25, Y+4	; 0x04
    3e42:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <vPortFree>
    3e46:	01 c0       	rjmp	.+2      	; 0x3e4a <prvProcessReceivedCommands+0x1dc>
    3e48:	00 00       	nop
    3e4a:	80 91 fa 30 	lds	r24, 0x30FA	; 0x8030fa <xTimerQueue>
    3e4e:	90 91 fb 30 	lds	r25, 0x30FB	; 0x8030fb <xTimerQueue+0x1>
    3e52:	be 01       	movw	r22, r28
    3e54:	66 5f       	subi	r22, 0xF6	; 246
    3e56:	7f 4f       	sbci	r23, 0xFF	; 255
    3e58:	20 e0       	ldi	r18, 0x00	; 0
    3e5a:	30 e0       	ldi	r19, 0x00	; 0
    3e5c:	a9 01       	movw	r20, r18
    3e5e:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <xQueueReceive>
    3e62:	88 23       	and	r24, r24
    3e64:	09 f0       	breq	.+2      	; 0x3e68 <prvProcessReceivedCommands+0x1fa>
    3e66:	11 cf       	rjmp	.-478    	; 0x3c8a <prvProcessReceivedCommands+0x1c>
    3e68:	00 00       	nop
    3e6a:	65 96       	adiw	r28, 0x15	; 21
    3e6c:	cd bf       	out	0x3d, r28	; 61
    3e6e:	de bf       	out	0x3e, r29	; 62
    3e70:	df 91       	pop	r29
    3e72:	cf 91       	pop	r28
    3e74:	1f 91       	pop	r17
    3e76:	0f 91       	pop	r16
    3e78:	ff 90       	pop	r15
    3e7a:	ef 90       	pop	r14
    3e7c:	df 90       	pop	r13
    3e7e:	cf 90       	pop	r12
    3e80:	08 95       	ret

00003e82 <prvSwitchTimerLists>:
    3e82:	cf 92       	push	r12
    3e84:	df 92       	push	r13
    3e86:	ef 92       	push	r14
    3e88:	ff 92       	push	r15
    3e8a:	0f 93       	push	r16
    3e8c:	1f 93       	push	r17
    3e8e:	cf 93       	push	r28
    3e90:	df 93       	push	r29
    3e92:	cd b7       	in	r28, 0x3d	; 61
    3e94:	de b7       	in	r29, 0x3e	; 62
    3e96:	2d 97       	sbiw	r28, 0x0d	; 13
    3e98:	cd bf       	out	0x3d, r28	; 61
    3e9a:	de bf       	out	0x3e, r29	; 62
    3e9c:	82 c0       	rjmp	.+260    	; 0x3fa2 <prvSwitchTimerLists+0x120>
    3e9e:	80 91 f6 30 	lds	r24, 0x30F6	; 0x8030f6 <pxCurrentTimerList>
    3ea2:	90 91 f7 30 	lds	r25, 0x30F7	; 0x8030f7 <pxCurrentTimerList+0x1>
    3ea6:	fc 01       	movw	r30, r24
    3ea8:	87 81       	ldd	r24, Z+7	; 0x07
    3eaa:	90 85       	ldd	r25, Z+8	; 0x08
    3eac:	fc 01       	movw	r30, r24
    3eae:	80 81       	ld	r24, Z
    3eb0:	91 81       	ldd	r25, Z+1	; 0x01
    3eb2:	a2 81       	ldd	r26, Z+2	; 0x02
    3eb4:	b3 81       	ldd	r27, Z+3	; 0x03
    3eb6:	89 83       	std	Y+1, r24	; 0x01
    3eb8:	9a 83       	std	Y+2, r25	; 0x02
    3eba:	ab 83       	std	Y+3, r26	; 0x03
    3ebc:	bc 83       	std	Y+4, r27	; 0x04
    3ebe:	80 91 f6 30 	lds	r24, 0x30F6	; 0x8030f6 <pxCurrentTimerList>
    3ec2:	90 91 f7 30 	lds	r25, 0x30F7	; 0x8030f7 <pxCurrentTimerList+0x1>
    3ec6:	fc 01       	movw	r30, r24
    3ec8:	87 81       	ldd	r24, Z+7	; 0x07
    3eca:	90 85       	ldd	r25, Z+8	; 0x08
    3ecc:	fc 01       	movw	r30, r24
    3ece:	80 85       	ldd	r24, Z+8	; 0x08
    3ed0:	91 85       	ldd	r25, Z+9	; 0x09
    3ed2:	8d 83       	std	Y+5, r24	; 0x05
    3ed4:	9e 83       	std	Y+6, r25	; 0x06
    3ed6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ed8:	9e 81       	ldd	r25, Y+6	; 0x06
    3eda:	02 96       	adiw	r24, 0x02	; 2
    3edc:	0e 94 08 09 	call	0x1210	; 0x1210 <uxListRemove>
    3ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ee2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ee4:	fc 01       	movw	r30, r24
    3ee6:	25 89       	ldd	r18, Z+21	; 0x15
    3ee8:	36 89       	ldd	r19, Z+22	; 0x16
    3eea:	8d 81       	ldd	r24, Y+5	; 0x05
    3eec:	9e 81       	ldd	r25, Y+6	; 0x06
    3eee:	f9 01       	movw	r30, r18
    3ef0:	19 95       	eicall
    3ef2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ef4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ef6:	fc 01       	movw	r30, r24
    3ef8:	82 89       	ldd	r24, Z+18	; 0x12
    3efa:	81 30       	cpi	r24, 0x01	; 1
    3efc:	09 f0       	breq	.+2      	; 0x3f00 <prvSwitchTimerLists+0x7e>
    3efe:	51 c0       	rjmp	.+162    	; 0x3fa2 <prvSwitchTimerLists+0x120>
    3f00:	8d 81       	ldd	r24, Y+5	; 0x05
    3f02:	9e 81       	ldd	r25, Y+6	; 0x06
    3f04:	fc 01       	movw	r30, r24
    3f06:	26 85       	ldd	r18, Z+14	; 0x0e
    3f08:	37 85       	ldd	r19, Z+15	; 0x0f
    3f0a:	40 89       	ldd	r20, Z+16	; 0x10
    3f0c:	51 89       	ldd	r21, Z+17	; 0x11
    3f0e:	89 81       	ldd	r24, Y+1	; 0x01
    3f10:	9a 81       	ldd	r25, Y+2	; 0x02
    3f12:	ab 81       	ldd	r26, Y+3	; 0x03
    3f14:	bc 81       	ldd	r27, Y+4	; 0x04
    3f16:	82 0f       	add	r24, r18
    3f18:	93 1f       	adc	r25, r19
    3f1a:	a4 1f       	adc	r26, r20
    3f1c:	b5 1f       	adc	r27, r21
    3f1e:	8f 83       	std	Y+7, r24	; 0x07
    3f20:	98 87       	std	Y+8, r25	; 0x08
    3f22:	a9 87       	std	Y+9, r26	; 0x09
    3f24:	ba 87       	std	Y+10, r27	; 0x0a
    3f26:	2f 81       	ldd	r18, Y+7	; 0x07
    3f28:	38 85       	ldd	r19, Y+8	; 0x08
    3f2a:	49 85       	ldd	r20, Y+9	; 0x09
    3f2c:	5a 85       	ldd	r21, Y+10	; 0x0a
    3f2e:	89 81       	ldd	r24, Y+1	; 0x01
    3f30:	9a 81       	ldd	r25, Y+2	; 0x02
    3f32:	ab 81       	ldd	r26, Y+3	; 0x03
    3f34:	bc 81       	ldd	r27, Y+4	; 0x04
    3f36:	82 17       	cp	r24, r18
    3f38:	93 07       	cpc	r25, r19
    3f3a:	a4 07       	cpc	r26, r20
    3f3c:	b5 07       	cpc	r27, r21
    3f3e:	f8 f4       	brcc	.+62     	; 0x3f7e <prvSwitchTimerLists+0xfc>
    3f40:	2d 81       	ldd	r18, Y+5	; 0x05
    3f42:	3e 81       	ldd	r19, Y+6	; 0x06
    3f44:	8f 81       	ldd	r24, Y+7	; 0x07
    3f46:	98 85       	ldd	r25, Y+8	; 0x08
    3f48:	a9 85       	ldd	r26, Y+9	; 0x09
    3f4a:	ba 85       	ldd	r27, Y+10	; 0x0a
    3f4c:	f9 01       	movw	r30, r18
    3f4e:	82 83       	std	Z+2, r24	; 0x02
    3f50:	93 83       	std	Z+3, r25	; 0x03
    3f52:	a4 83       	std	Z+4, r26	; 0x04
    3f54:	b5 83       	std	Z+5, r27	; 0x05
    3f56:	8d 81       	ldd	r24, Y+5	; 0x05
    3f58:	9e 81       	ldd	r25, Y+6	; 0x06
    3f5a:	2d 81       	ldd	r18, Y+5	; 0x05
    3f5c:	3e 81       	ldd	r19, Y+6	; 0x06
    3f5e:	fc 01       	movw	r30, r24
    3f60:	22 87       	std	Z+10, r18	; 0x0a
    3f62:	33 87       	std	Z+11, r19	; 0x0b
    3f64:	8d 81       	ldd	r24, Y+5	; 0x05
    3f66:	9e 81       	ldd	r25, Y+6	; 0x06
    3f68:	9c 01       	movw	r18, r24
    3f6a:	2e 5f       	subi	r18, 0xFE	; 254
    3f6c:	3f 4f       	sbci	r19, 0xFF	; 255
    3f6e:	80 91 f6 30 	lds	r24, 0x30F6	; 0x8030f6 <pxCurrentTimerList>
    3f72:	90 91 f7 30 	lds	r25, 0x30F7	; 0x8030f7 <pxCurrentTimerList+0x1>
    3f76:	b9 01       	movw	r22, r18
    3f78:	0e 94 87 08 	call	0x110e	; 0x110e <vListInsert>
    3f7c:	12 c0       	rjmp	.+36     	; 0x3fa2 <prvSwitchTimerLists+0x120>
    3f7e:	89 81       	ldd	r24, Y+1	; 0x01
    3f80:	9a 81       	ldd	r25, Y+2	; 0x02
    3f82:	ab 81       	ldd	r26, Y+3	; 0x03
    3f84:	bc 81       	ldd	r27, Y+4	; 0x04
    3f86:	ed 81       	ldd	r30, Y+5	; 0x05
    3f88:	fe 81       	ldd	r31, Y+6	; 0x06
    3f8a:	c1 2c       	mov	r12, r1
    3f8c:	d1 2c       	mov	r13, r1
    3f8e:	76 01       	movw	r14, r12
    3f90:	00 e0       	ldi	r16, 0x00	; 0
    3f92:	10 e0       	ldi	r17, 0x00	; 0
    3f94:	9c 01       	movw	r18, r24
    3f96:	ad 01       	movw	r20, r26
    3f98:	60 e0       	ldi	r22, 0x00	; 0
    3f9a:	cf 01       	movw	r24, r30
    3f9c:	0e 94 95 1b 	call	0x372a	; 0x372a <xTimerGenericCommand>
    3fa0:	8b 87       	std	Y+11, r24	; 0x0b
    3fa2:	80 91 f6 30 	lds	r24, 0x30F6	; 0x8030f6 <pxCurrentTimerList>
    3fa6:	90 91 f7 30 	lds	r25, 0x30F7	; 0x8030f7 <pxCurrentTimerList+0x1>
    3faa:	fc 01       	movw	r30, r24
    3fac:	80 81       	ld	r24, Z
    3fae:	88 23       	and	r24, r24
    3fb0:	09 f0       	breq	.+2      	; 0x3fb4 <prvSwitchTimerLists+0x132>
    3fb2:	75 cf       	rjmp	.-278    	; 0x3e9e <prvSwitchTimerLists+0x1c>
    3fb4:	80 91 f6 30 	lds	r24, 0x30F6	; 0x8030f6 <pxCurrentTimerList>
    3fb8:	90 91 f7 30 	lds	r25, 0x30F7	; 0x8030f7 <pxCurrentTimerList+0x1>
    3fbc:	8c 87       	std	Y+12, r24	; 0x0c
    3fbe:	9d 87       	std	Y+13, r25	; 0x0d
    3fc0:	80 91 f8 30 	lds	r24, 0x30F8	; 0x8030f8 <pxOverflowTimerList>
    3fc4:	90 91 f9 30 	lds	r25, 0x30F9	; 0x8030f9 <pxOverflowTimerList+0x1>
    3fc8:	80 93 f6 30 	sts	0x30F6, r24	; 0x8030f6 <pxCurrentTimerList>
    3fcc:	90 93 f7 30 	sts	0x30F7, r25	; 0x8030f7 <pxCurrentTimerList+0x1>
    3fd0:	8c 85       	ldd	r24, Y+12	; 0x0c
    3fd2:	9d 85       	ldd	r25, Y+13	; 0x0d
    3fd4:	80 93 f8 30 	sts	0x30F8, r24	; 0x8030f8 <pxOverflowTimerList>
    3fd8:	90 93 f9 30 	sts	0x30F9, r25	; 0x8030f9 <pxOverflowTimerList+0x1>
    3fdc:	00 00       	nop
    3fde:	2d 96       	adiw	r28, 0x0d	; 13
    3fe0:	cd bf       	out	0x3d, r28	; 61
    3fe2:	de bf       	out	0x3e, r29	; 62
    3fe4:	df 91       	pop	r29
    3fe6:	cf 91       	pop	r28
    3fe8:	1f 91       	pop	r17
    3fea:	0f 91       	pop	r16
    3fec:	ff 90       	pop	r15
    3fee:	ef 90       	pop	r14
    3ff0:	df 90       	pop	r13
    3ff2:	cf 90       	pop	r12
    3ff4:	08 95       	ret

00003ff6 <prvCheckForValidListAndQueue>:
    3ff6:	cf 93       	push	r28
    3ff8:	df 93       	push	r29
    3ffa:	cd b7       	in	r28, 0x3d	; 61
    3ffc:	de b7       	in	r29, 0x3e	; 62
    3ffe:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    4002:	ff 93       	push	r31
    4004:	f8 7f       	andi	r31, 0xF8	; 248
    4006:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    400a:	80 91 fa 30 	lds	r24, 0x30FA	; 0x8030fa <xTimerQueue>
    400e:	90 91 fb 30 	lds	r25, 0x30FB	; 0x8030fb <xTimerQueue+0x1>
    4012:	89 2b       	or	r24, r25
    4014:	e9 f4       	brne	.+58     	; 0x4050 <__stack+0x51>
    4016:	80 ee       	ldi	r24, 0xE0	; 224
    4018:	90 e3       	ldi	r25, 0x30	; 48
    401a:	0e 94 ef 07 	call	0xfde	; 0xfde <vListInitialise>
    401e:	8b ee       	ldi	r24, 0xEB	; 235
    4020:	90 e3       	ldi	r25, 0x30	; 48
    4022:	0e 94 ef 07 	call	0xfde	; 0xfde <vListInitialise>
    4026:	80 ee       	ldi	r24, 0xE0	; 224
    4028:	90 e3       	ldi	r25, 0x30	; 48
    402a:	80 93 f6 30 	sts	0x30F6, r24	; 0x8030f6 <pxCurrentTimerList>
    402e:	90 93 f7 30 	sts	0x30F7, r25	; 0x8030f7 <pxCurrentTimerList+0x1>
    4032:	8b ee       	ldi	r24, 0xEB	; 235
    4034:	90 e3       	ldi	r25, 0x30	; 48
    4036:	80 93 f8 30 	sts	0x30F8, r24	; 0x8030f8 <pxOverflowTimerList>
    403a:	90 93 f9 30 	sts	0x30F9, r25	; 0x8030f9 <pxOverflowTimerList+0x1>
    403e:	40 e0       	ldi	r20, 0x00	; 0
    4040:	69 e0       	ldi	r22, 0x09	; 9
    4042:	85 e0       	ldi	r24, 0x05	; 5
    4044:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <xQueueGenericCreate>
    4048:	80 93 fa 30 	sts	0x30FA, r24	; 0x8030fa <xTimerQueue>
    404c:	90 93 fb 30 	sts	0x30FB, r25	; 0x8030fb <xTimerQueue+0x1>
    4050:	ff 91       	pop	r31
    4052:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    4056:	00 00       	nop
    4058:	df 91       	pop	r29
    405a:	cf 91       	pop	r28
    405c:	08 95       	ret

0000405e <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
    405e:	0f 93       	push	r16
    4060:	1f 93       	push	r17
    4062:	cf 93       	push	r28
    4064:	df 93       	push	r29
    4066:	cd b7       	in	r28, 0x3d	; 61
    4068:	de b7       	in	r29, 0x3e	; 62
    406a:	64 97       	sbiw	r28, 0x14	; 20
    406c:	cd bf       	out	0x3d, r28	; 61
    406e:	de bf       	out	0x3e, r29	; 62
    4070:	8b 87       	std	Y+11, r24	; 0x0b
    4072:	9c 87       	std	Y+12, r25	; 0x0c
    4074:	6d 87       	std	Y+13, r22	; 0x0d
    4076:	7e 87       	std	Y+14, r23	; 0x0e
    4078:	2f 87       	std	Y+15, r18	; 0x0f
    407a:	38 8b       	std	Y+16, r19	; 0x10
    407c:	49 8b       	std	Y+17, r20	; 0x11
    407e:	5a 8b       	std	Y+18, r21	; 0x12
    4080:	0b 8b       	std	Y+19, r16	; 0x13
    4082:	1c 8b       	std	Y+20, r17	; 0x14
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
    4084:	8e ef       	ldi	r24, 0xFE	; 254
    4086:	8a 83       	std	Y+2, r24	; 0x02
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
    4088:	8b 85       	ldd	r24, Y+11	; 0x0b
    408a:	9c 85       	ldd	r25, Y+12	; 0x0c
    408c:	8b 83       	std	Y+3, r24	; 0x03
    408e:	9c 83       	std	Y+4, r25	; 0x04
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
    4090:	8d 85       	ldd	r24, Y+13	; 0x0d
    4092:	9e 85       	ldd	r25, Y+14	; 0x0e
    4094:	8d 83       	std	Y+5, r24	; 0x05
    4096:	9e 83       	std	Y+6, r25	; 0x06
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
    4098:	8f 85       	ldd	r24, Y+15	; 0x0f
    409a:	98 89       	ldd	r25, Y+16	; 0x10
    409c:	a9 89       	ldd	r26, Y+17	; 0x11
    409e:	ba 89       	ldd	r27, Y+18	; 0x12
    40a0:	8f 83       	std	Y+7, r24	; 0x07
    40a2:	98 87       	std	Y+8, r25	; 0x08
    40a4:	a9 87       	std	Y+9, r26	; 0x09
    40a6:	ba 87       	std	Y+10, r27	; 0x0a

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    40a8:	80 91 fa 30 	lds	r24, 0x30FA	; 0x8030fa <xTimerQueue>
    40ac:	90 91 fb 30 	lds	r25, 0x30FB	; 0x8030fb <xTimerQueue+0x1>
    40b0:	4b 89       	ldd	r20, Y+19	; 0x13
    40b2:	5c 89       	ldd	r21, Y+20	; 0x14
    40b4:	be 01       	movw	r22, r28
    40b6:	6e 5f       	subi	r22, 0xFE	; 254
    40b8:	7f 4f       	sbci	r23, 0xFF	; 255
    40ba:	20 e0       	ldi	r18, 0x00	; 0
    40bc:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <xQueueGenericSendFromISR>
    40c0:	89 83       	std	Y+1, r24	; 0x01

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
    40c2:	89 81       	ldd	r24, Y+1	; 0x01
	}
    40c4:	64 96       	adiw	r28, 0x14	; 20
    40c6:	cd bf       	out	0x3d, r28	; 61
    40c8:	de bf       	out	0x3e, r29	; 62
    40ca:	df 91       	pop	r29
    40cc:	cf 91       	pop	r28
    40ce:	1f 91       	pop	r17
    40d0:	0f 91       	pop	r16
    40d2:	08 95       	ret

000040d4 <vInitClock>:
#include "init.h"
#include "clksys_driver.h"


void vInitClock(void)
{
    40d4:	cf 93       	push	r28
    40d6:	df 93       	push	r29
    40d8:	cd b7       	in	r28, 0x3d	; 61
    40da:	de b7       	in	r29, 0x3e	; 62
	CLKSYS_Enable( OSC_RC2MEN_bm );
    40dc:	80 e5       	ldi	r24, 0x50	; 80
    40de:	90 e0       	ldi	r25, 0x00	; 0
    40e0:	20 e5       	ldi	r18, 0x50	; 80
    40e2:	30 e0       	ldi	r19, 0x00	; 0
    40e4:	f9 01       	movw	r30, r18
    40e6:	20 81       	ld	r18, Z
    40e8:	21 60       	ori	r18, 0x01	; 1
    40ea:	fc 01       	movw	r30, r24
    40ec:	20 83       	st	Z, r18
	do {} while ( CLKSYS_IsReady( OSC_RC2MRDY_bm ) == 0 );
    40ee:	80 e5       	ldi	r24, 0x50	; 80
    40f0:	90 e0       	ldi	r25, 0x00	; 0
    40f2:	fc 01       	movw	r30, r24
    40f4:	81 81       	ldd	r24, Z+1	; 0x01
    40f6:	88 2f       	mov	r24, r24
    40f8:	90 e0       	ldi	r25, 0x00	; 0
    40fa:	81 70       	andi	r24, 0x01	; 1
    40fc:	99 27       	eor	r25, r25
    40fe:	89 2b       	or	r24, r25
    4100:	b1 f3       	breq	.-20     	; 0x40ee <vInitClock+0x1a>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC2M_gc );
    4102:	80 e0       	ldi	r24, 0x00	; 0
    4104:	0e 94 a0 03 	call	0x740	; 0x740 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC32KEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
    4108:	8e e1       	ldi	r24, 0x1E	; 30
    410a:	0e 94 69 03 	call	0x6d2	; 0x6d2 <CLKSYS_Disable>
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    410e:	60 e0       	ldi	r22, 0x00	; 0
    4110:	80 e0       	ldi	r24, 0x00	; 0
    4112:	0e 94 89 03 	call	0x712	; 0x712 <CLKSYS_Prescalers_Config>
	CLKSYS_XOSC_Config( OSC_FRQRANGE_2TO9_gc,false,OSC_XOSCSEL_XTAL_256CLK_gc );
    4116:	43 e0       	ldi	r20, 0x03	; 3
    4118:	60 e0       	ldi	r22, 0x00	; 0
    411a:	80 e4       	ldi	r24, 0x40	; 64
    411c:	0e 94 34 03 	call	0x668	; 0x668 <CLKSYS_XOSC_Config>
	CLKSYS_Enable( OSC_XOSCEN_bm );
    4120:	80 e5       	ldi	r24, 0x50	; 80
    4122:	90 e0       	ldi	r25, 0x00	; 0
    4124:	20 e5       	ldi	r18, 0x50	; 80
    4126:	30 e0       	ldi	r19, 0x00	; 0
    4128:	f9 01       	movw	r30, r18
    412a:	20 81       	ld	r18, Z
    412c:	28 60       	ori	r18, 0x08	; 8
    412e:	fc 01       	movw	r30, r24
    4130:	20 83       	st	Z, r18
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
    4132:	80 e5       	ldi	r24, 0x50	; 80
    4134:	90 e0       	ldi	r25, 0x00	; 0
    4136:	fc 01       	movw	r30, r24
    4138:	81 81       	ldd	r24, Z+1	; 0x01
    413a:	88 2f       	mov	r24, r24
    413c:	90 e0       	ldi	r25, 0x00	; 0
    413e:	88 70       	andi	r24, 0x08	; 8
    4140:	99 27       	eor	r25, r25
    4142:	89 2b       	or	r24, r25
    4144:	b1 f3       	breq	.-20     	; 0x4132 <vInitClock+0x5e>
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 4 );
    4146:	64 e0       	ldi	r22, 0x04	; 4
    4148:	80 ec       	ldi	r24, 0xC0	; 192
    414a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
    414e:	80 e5       	ldi	r24, 0x50	; 80
    4150:	90 e0       	ldi	r25, 0x00	; 0
    4152:	20 e5       	ldi	r18, 0x50	; 80
    4154:	30 e0       	ldi	r19, 0x00	; 0
    4156:	f9 01       	movw	r30, r18
    4158:	20 81       	ld	r18, Z
    415a:	20 61       	ori	r18, 0x10	; 16
    415c:	fc 01       	movw	r30, r24
    415e:	20 83       	st	Z, r18
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    4160:	60 e0       	ldi	r22, 0x00	; 0
    4162:	80 e0       	ldi	r24, 0x00	; 0
    4164:	0e 94 89 03 	call	0x712	; 0x712 <CLKSYS_Prescalers_Config>
	do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
    4168:	80 e5       	ldi	r24, 0x50	; 80
    416a:	90 e0       	ldi	r25, 0x00	; 0
    416c:	fc 01       	movw	r30, r24
    416e:	81 81       	ldd	r24, Z+1	; 0x01
    4170:	88 2f       	mov	r24, r24
    4172:	90 e0       	ldi	r25, 0x00	; 0
    4174:	80 71       	andi	r24, 0x10	; 16
    4176:	99 27       	eor	r25, r25
    4178:	89 2b       	or	r24, r25
    417a:	b1 f3       	breq	.-20     	; 0x4168 <vInitClock+0x94>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
    417c:	84 e0       	ldi	r24, 0x04	; 4
    417e:	0e 94 a0 03 	call	0x740	; 0x740 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC2MEN_bm | OSC_RC32KEN_bm);
    4182:	87 e0       	ldi	r24, 0x07	; 7
    4184:	0e 94 69 03 	call	0x6d2	; 0x6d2 <CLKSYS_Disable>
    4188:	00 00       	nop
    418a:	df 91       	pop	r29
    418c:	cf 91       	pop	r28
    418e:	08 95       	ret

00004190 <vApplicationIdleHook>:
/*********************************************************************************
Idle Task
*********************************************************************************/

void vApplicationIdleHook( void )
{	
    4190:	cf 93       	push	r28
    4192:	df 93       	push	r29
    4194:	cd b7       	in	r28, 0x3d	; 61
    4196:	de b7       	in	r29, 0x3e	; 62
	
}
    4198:	00 00       	nop
    419a:	df 91       	pop	r29
    419c:	cf 91       	pop	r28
    419e:	08 95       	ret

000041a0 <main>:
/*********************************************************************************
Main
*********************************************************************************/

int main(void)
{
    41a0:	ef 92       	push	r14
    41a2:	ff 92       	push	r15
    41a4:	0f 93       	push	r16
    41a6:	cf 93       	push	r28
    41a8:	df 93       	push	r29
    41aa:	cd b7       	in	r28, 0x3d	; 61
    41ac:	de b7       	in	r29, 0x3e	; 62
	vInitClock();
    41ae:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <vInitClock>
	vInitDisplay();
    41b2:	0e 94 48 27 	call	0x4e90	; 0x4e90 <vInitDisplay>
	
	xTaskCreate( controllerTask, (const char *) "vControl_tsk", configMINIMAL_STACK_SIZE+150, NULL, 3, NULL);
    41b6:	e1 2c       	mov	r14, r1
    41b8:	f1 2c       	mov	r15, r1
    41ba:	03 e0       	ldi	r16, 0x03	; 3
    41bc:	20 e0       	ldi	r18, 0x00	; 0
    41be:	30 e0       	ldi	r19, 0x00	; 0
    41c0:	4e e5       	ldi	r20, 0x5E	; 94
    41c2:	51 e0       	ldi	r21, 0x01	; 1
    41c4:	61 e1       	ldi	r22, 0x11	; 17
    41c6:	70 e2       	ldi	r23, 0x20	; 32
    41c8:	81 e1       	ldi	r24, 0x11	; 17
    41ca:	95 e2       	ldi	r25, 0x25	; 37
    41cc:	0e 94 ed 11 	call	0x23da	; 0x23da <xTaskCreate>
	xTaskCreate( vPiLeibniz, (const char *) "vLeibniz_tsk", configMINIMAL_STACK_SIZE+10, NULL, 1, NULL);
    41d0:	e1 2c       	mov	r14, r1
    41d2:	f1 2c       	mov	r15, r1
    41d4:	01 e0       	ldi	r16, 0x01	; 1
    41d6:	20 e0       	ldi	r18, 0x00	; 0
    41d8:	30 e0       	ldi	r19, 0x00	; 0
    41da:	42 ed       	ldi	r20, 0xD2	; 210
    41dc:	50 e0       	ldi	r21, 0x00	; 0
    41de:	6e e1       	ldi	r22, 0x1E	; 30
    41e0:	70 e2       	ldi	r23, 0x20	; 32
    41e2:	88 ee       	ldi	r24, 0xE8	; 232
    41e4:	91 e2       	ldi	r25, 0x21	; 33
    41e6:	0e 94 ed 11 	call	0x23da	; 0x23da <xTaskCreate>
	xTaskCreate( vVietaPi, (const char *) "vVietaPi_tsk", configMINIMAL_STACK_SIZE+10, NULL, 1, NULL);
    41ea:	e1 2c       	mov	r14, r1
    41ec:	f1 2c       	mov	r15, r1
    41ee:	01 e0       	ldi	r16, 0x01	; 1
    41f0:	20 e0       	ldi	r18, 0x00	; 0
    41f2:	30 e0       	ldi	r19, 0x00	; 0
    41f4:	42 ed       	ldi	r20, 0xD2	; 210
    41f6:	50 e0       	ldi	r21, 0x00	; 0
    41f8:	6b e2       	ldi	r22, 0x2B	; 43
    41fa:	70 e2       	ldi	r23, 0x20	; 32
    41fc:	8a e9       	ldi	r24, 0x9A	; 154
    41fe:	92 e2       	ldi	r25, 0x22	; 34
    4200:	0e 94 ed 11 	call	0x23da	; 0x23da <xTaskCreate>
	xTaskCreate( vCompare, (const char *) "vComp_tsk", configMINIMAL_STACK_SIZE+10, NULL, 2, NULL);
    4204:	e1 2c       	mov	r14, r1
    4206:	f1 2c       	mov	r15, r1
    4208:	02 e0       	ldi	r16, 0x02	; 2
    420a:	20 e0       	ldi	r18, 0x00	; 0
    420c:	30 e0       	ldi	r19, 0x00	; 0
    420e:	42 ed       	ldi	r20, 0xD2	; 210
    4210:	50 e0       	ldi	r21, 0x00	; 0
    4212:	68 e3       	ldi	r22, 0x38	; 56
    4214:	70 e2       	ldi	r23, 0x20	; 32
    4216:	80 e3       	ldi	r24, 0x30	; 48
    4218:	93 e2       	ldi	r25, 0x23	; 35
    421a:	0e 94 ed 11 	call	0x23da	; 0x23da <xTaskCreate>
	xTaskCreate( vDisplaytask, (const char *) "vDisp_tsk", configMINIMAL_STACK_SIZE+150, NULL, 3, NULL);
    421e:	e1 2c       	mov	r14, r1
    4220:	f1 2c       	mov	r15, r1
    4222:	03 e0       	ldi	r16, 0x03	; 3
    4224:	20 e0       	ldi	r18, 0x00	; 0
    4226:	30 e0       	ldi	r19, 0x00	; 0
    4228:	4e e5       	ldi	r20, 0x5E	; 94
    422a:	51 e0       	ldi	r21, 0x01	; 1
    422c:	62 e4       	ldi	r22, 0x42	; 66
    422e:	70 e2       	ldi	r23, 0x20	; 32
    4230:	87 ed       	ldi	r24, 0xD7	; 215
    4232:	93 e2       	ldi	r25, 0x23	; 35
    4234:	0e 94 ed 11 	call	0x23da	; 0x23da <xTaskCreate>
	xTaskCreate( vTimeMeasurement, (const char *) "vTimeMeasurement_tsk", configMINIMAL_STACK_SIZE+100, NULL, 2, NULL);
    4238:	e1 2c       	mov	r14, r1
    423a:	f1 2c       	mov	r15, r1
    423c:	02 e0       	ldi	r16, 0x02	; 2
    423e:	20 e0       	ldi	r18, 0x00	; 0
    4240:	30 e0       	ldi	r19, 0x00	; 0
    4242:	4c e2       	ldi	r20, 0x2C	; 44
    4244:	51 e0       	ldi	r21, 0x01	; 1
    4246:	6c e4       	ldi	r22, 0x4C	; 76
    4248:	70 e2       	ldi	r23, 0x20	; 32
    424a:	8b e3       	ldi	r24, 0x3B	; 59
    424c:	91 e2       	ldi	r25, 0x21	; 33
    424e:	0e 94 ed 11 	call	0x23da	; 0x23da <xTaskCreate>
	ProgState = xEventGroupCreate();
    4252:	0e 94 60 04 	call	0x8c0	; 0x8c0 <xEventGroupCreate>
    4256:	80 93 3e 31 	sts	0x313E, r24	; 0x80313e <ProgState>
    425a:	90 93 3f 31 	sts	0x313F, r25	; 0x80313f <ProgState+0x1>
	vDisplayClear();
    425e:	0e 94 93 29 	call	0x5326	; 0x5326 <vDisplayClear>
	vTaskStartScheduler();
    4262:	0e 94 a6 14 	call	0x294c	; 0x294c <vTaskStartScheduler>
	
	return 0;
    4266:	80 e0       	ldi	r24, 0x00	; 0
    4268:	90 e0       	ldi	r25, 0x00	; 0
}
    426a:	df 91       	pop	r29
    426c:	cf 91       	pop	r28
    426e:	0f 91       	pop	r16
    4270:	ff 90       	pop	r15
    4272:	ef 90       	pop	r14
    4274:	08 95       	ret

00004276 <vTimeMeasurement>:
/*********************************************************************************
Functions
*********************************************************************************/


void vTimeMeasurement(void* pvParameters){							//Time Function for measuring execution time
    4276:	cf 93       	push	r28
    4278:	df 93       	push	r29
    427a:	00 d0       	rcall	.+0      	; 0x427c <vTimeMeasurement+0x6>
    427c:	00 d0       	rcall	.+0      	; 0x427e <vTimeMeasurement+0x8>
    427e:	cd b7       	in	r28, 0x3d	; 61
    4280:	de b7       	in	r29, 0x3e	; 62
    4282:	8d 83       	std	Y+5, r24	; 0x05
    4284:	9e 83       	std	Y+6, r25	; 0x06
TickType_t lasttime = xTaskGetTickCount();
    4286:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <xTaskGetTickCount>
    428a:	dc 01       	movw	r26, r24
    428c:	cb 01       	movw	r24, r22
    428e:	89 83       	std	Y+1, r24	; 0x01
    4290:	9a 83       	std	Y+2, r25	; 0x02
    4292:	ab 83       	std	Y+3, r26	; 0x03
    4294:	bc 83       	std	Y+4, r27	; 0x04
	for(;;) {
		if (xEventGroupGetBits(ProgState) & TimerRunBit)
    4296:	80 91 3e 31 	lds	r24, 0x313E	; 0x80313e <ProgState>
    429a:	90 91 3f 31 	lds	r25, 0x313F	; 0x80313f <ProgState+0x1>
    429e:	40 e0       	ldi	r20, 0x00	; 0
    42a0:	50 e0       	ldi	r21, 0x00	; 0
    42a2:	ba 01       	movw	r22, r20
    42a4:	0e 94 bb 05 	call	0xb76	; 0xb76 <xEventGroupClearBits>
    42a8:	dc 01       	movw	r26, r24
    42aa:	cb 01       	movw	r24, r22
    42ac:	88 70       	andi	r24, 0x08	; 8
    42ae:	99 27       	eor	r25, r25
    42b0:	aa 27       	eor	r26, r26
    42b2:	bb 27       	eor	r27, r27
    42b4:	89 2b       	or	r24, r25
    42b6:	8a 2b       	or	r24, r26
    42b8:	8b 2b       	or	r24, r27
    42ba:	d1 f1       	breq	.+116    	; 0x4330 <vTimeMeasurement+0xba>
		{
			
			GlobalHunSec++;
    42bc:	80 91 0e 31 	lds	r24, 0x310E	; 0x80310e <GlobalHunSec>
    42c0:	90 91 0f 31 	lds	r25, 0x310F	; 0x80310f <GlobalHunSec+0x1>
    42c4:	01 96       	adiw	r24, 0x01	; 1
    42c6:	80 93 0e 31 	sts	0x310E, r24	; 0x80310e <GlobalHunSec>
    42ca:	90 93 0f 31 	sts	0x310F, r25	; 0x80310f <GlobalHunSec+0x1>
			if(GlobalHunSec >= 100) {
    42ce:	80 91 0e 31 	lds	r24, 0x310E	; 0x80310e <GlobalHunSec>
    42d2:	90 91 0f 31 	lds	r25, 0x310F	; 0x80310f <GlobalHunSec+0x1>
    42d6:	84 36       	cpi	r24, 0x64	; 100
    42d8:	91 05       	cpc	r25, r1
    42da:	6c f0       	brlt	.+26     	; 0x42f6 <vTimeMeasurement+0x80>
				GlobalHunSec = 0;
    42dc:	10 92 0e 31 	sts	0x310E, r1	; 0x80310e <GlobalHunSec>
    42e0:	10 92 0f 31 	sts	0x310F, r1	; 0x80310f <GlobalHunSec+0x1>
				GlobalSec++;
    42e4:	80 91 0a 31 	lds	r24, 0x310A	; 0x80310a <GlobalSec>
    42e8:	90 91 0b 31 	lds	r25, 0x310B	; 0x80310b <GlobalSec+0x1>
    42ec:	01 96       	adiw	r24, 0x01	; 1
    42ee:	80 93 0a 31 	sts	0x310A, r24	; 0x80310a <GlobalSec>
    42f2:	90 93 0b 31 	sts	0x310B, r25	; 0x80310b <GlobalSec+0x1>
			}
			if (GlobalSec >= 60){
    42f6:	80 91 0a 31 	lds	r24, 0x310A	; 0x80310a <GlobalSec>
    42fa:	90 91 0b 31 	lds	r25, 0x310B	; 0x80310b <GlobalSec+0x1>
    42fe:	cc 97       	sbiw	r24, 0x3c	; 60
    4300:	6c f0       	brlt	.+26     	; 0x431c <vTimeMeasurement+0xa6>
				GlobalSec = 0;
    4302:	10 92 0a 31 	sts	0x310A, r1	; 0x80310a <GlobalSec>
    4306:	10 92 0b 31 	sts	0x310B, r1	; 0x80310b <GlobalSec+0x1>
				GlobalMin++;
    430a:	80 91 0c 31 	lds	r24, 0x310C	; 0x80310c <GlobalMin>
    430e:	90 91 0d 31 	lds	r25, 0x310D	; 0x80310d <GlobalMin+0x1>
    4312:	01 96       	adiw	r24, 0x01	; 1
    4314:	80 93 0c 31 	sts	0x310C, r24	; 0x80310c <GlobalMin>
    4318:	90 93 0d 31 	sts	0x310D, r25	; 0x80310d <GlobalMin+0x1>
			}
			if(GlobalMin >= 60) {
    431c:	80 91 0c 31 	lds	r24, 0x310C	; 0x80310c <GlobalMin>
    4320:	90 91 0d 31 	lds	r25, 0x310D	; 0x80310d <GlobalMin+0x1>
    4324:	cc 97       	sbiw	r24, 0x3c	; 60
    4326:	24 f0       	brlt	.+8      	; 0x4330 <vTimeMeasurement+0xba>
				GlobalMin = 0;
    4328:	10 92 0c 31 	sts	0x310C, r1	; 0x80310c <GlobalMin>
    432c:	10 92 0d 31 	sts	0x310D, r1	; 0x80310d <GlobalMin+0x1>
			}
		}
		if (xEventGroupGetBits(ProgState) & 0x07) 
    4330:	80 91 3e 31 	lds	r24, 0x313E	; 0x80313e <ProgState>
    4334:	90 91 3f 31 	lds	r25, 0x313F	; 0x80313f <ProgState+0x1>
    4338:	40 e0       	ldi	r20, 0x00	; 0
    433a:	50 e0       	ldi	r21, 0x00	; 0
    433c:	ba 01       	movw	r22, r20
    433e:	0e 94 bb 05 	call	0xb76	; 0xb76 <xEventGroupClearBits>
    4342:	dc 01       	movw	r26, r24
    4344:	cb 01       	movw	r24, r22
    4346:	87 70       	andi	r24, 0x07	; 7
    4348:	99 27       	eor	r25, r25
    434a:	aa 27       	eor	r26, r26
    434c:	bb 27       	eor	r27, r27
    434e:	89 2b       	or	r24, r25
    4350:	8a 2b       	or	r24, r26
    4352:	8b 2b       	or	r24, r27
    4354:	a1 f1       	breq	.+104    	; 0x43be <vTimeMeasurement+0x148>
		{
			GlobalHunSec = 0;
    4356:	10 92 0e 31 	sts	0x310E, r1	; 0x80310e <GlobalHunSec>
    435a:	10 92 0f 31 	sts	0x310F, r1	; 0x80310f <GlobalHunSec+0x1>
			GlobalSec = 0;
    435e:	10 92 0a 31 	sts	0x310A, r1	; 0x80310a <GlobalSec>
    4362:	10 92 0b 31 	sts	0x310B, r1	; 0x80310b <GlobalSec+0x1>
			GlobalMin = 0;
    4366:	10 92 0c 31 	sts	0x310C, r1	; 0x80310c <GlobalMin>
    436a:	10 92 0d 31 	sts	0x310D, r1	; 0x80310d <GlobalMin+0x1>
			xEventGroupClearBits(ProgState, LeibResetBit);
    436e:	80 91 3e 31 	lds	r24, 0x313E	; 0x80313e <ProgState>
    4372:	90 91 3f 31 	lds	r25, 0x313F	; 0x80313f <ProgState+0x1>
    4376:	42 e0       	ldi	r20, 0x02	; 2
    4378:	50 e0       	ldi	r21, 0x00	; 0
    437a:	60 e0       	ldi	r22, 0x00	; 0
    437c:	70 e0       	ldi	r23, 0x00	; 0
    437e:	0e 94 bb 05 	call	0xb76	; 0xb76 <xEventGroupClearBits>
			xEventGroupClearBits(ProgState, VietResetBit);
    4382:	80 91 3e 31 	lds	r24, 0x313E	; 0x80313e <ProgState>
    4386:	90 91 3f 31 	lds	r25, 0x313F	; 0x80313f <ProgState+0x1>
    438a:	44 e0       	ldi	r20, 0x04	; 4
    438c:	50 e0       	ldi	r21, 0x00	; 0
    438e:	60 e0       	ldi	r22, 0x00	; 0
    4390:	70 e0       	ldi	r23, 0x00	; 0
    4392:	0e 94 bb 05 	call	0xb76	; 0xb76 <xEventGroupClearBits>
			xEventGroupClearBits(ProgState, ResetBit);
    4396:	80 91 3e 31 	lds	r24, 0x313E	; 0x80313e <ProgState>
    439a:	90 91 3f 31 	lds	r25, 0x313F	; 0x80313f <ProgState+0x1>
    439e:	41 e0       	ldi	r20, 0x01	; 1
    43a0:	50 e0       	ldi	r21, 0x00	; 0
    43a2:	60 e0       	ldi	r22, 0x00	; 0
    43a4:	70 e0       	ldi	r23, 0x00	; 0
    43a6:	0e 94 bb 05 	call	0xb76	; 0xb76 <xEventGroupClearBits>
			xEventGroupClearBits(ProgState, TimerRunBit);
    43aa:	80 91 3e 31 	lds	r24, 0x313E	; 0x80313e <ProgState>
    43ae:	90 91 3f 31 	lds	r25, 0x313F	; 0x80313f <ProgState+0x1>
    43b2:	48 e0       	ldi	r20, 0x08	; 8
    43b4:	50 e0       	ldi	r21, 0x00	; 0
    43b6:	60 e0       	ldi	r22, 0x00	; 0
    43b8:	70 e0       	ldi	r23, 0x00	; 0
    43ba:	0e 94 bb 05 	call	0xb76	; 0xb76 <xEventGroupClearBits>
		}
		vTaskDelayUntil(&lasttime, 10/portTICK_RATE_MS);
    43be:	4a e0       	ldi	r20, 0x0A	; 10
    43c0:	50 e0       	ldi	r21, 0x00	; 0
    43c2:	60 e0       	ldi	r22, 0x00	; 0
    43c4:	70 e0       	ldi	r23, 0x00	; 0
    43c6:	ce 01       	movw	r24, r28
    43c8:	01 96       	adiw	r24, 0x01	; 1
    43ca:	0e 94 c0 13 	call	0x2780	; 0x2780 <vTaskDelayUntil>
	}
    43ce:	63 cf       	rjmp	.-314    	; 0x4296 <vTimeMeasurement+0x20>

000043d0 <vPiLeibniz>:
}


void vPiLeibniz(void* pvParameters)												//Approximation of Pi by Leibniz Method
{
    43d0:	ef 92       	push	r14
    43d2:	ff 92       	push	r15
    43d4:	0f 93       	push	r16
    43d6:	1f 93       	push	r17
    43d8:	cf 93       	push	r28
    43da:	df 93       	push	r29
    43dc:	cd b7       	in	r28, 0x3d	; 61
    43de:	de b7       	in	r29, 0x3e	; 62
    43e0:	2a 97       	sbiw	r28, 0x0a	; 10
    43e2:	cd bf       	out	0x3d, r28	; 61
    43e4:	de bf       	out	0x3e, r29	; 62
    43e6:	89 87       	std	Y+9, r24	; 0x09
    43e8:	9a 87       	std	Y+10, r25	; 0x0a
	uint32_t CurIterations = 0;
    43ea:	19 82       	std	Y+1, r1	; 0x01
    43ec:	1a 82       	std	Y+2, r1	; 0x02
    43ee:	1b 82       	std	Y+3, r1	; 0x03
    43f0:	1c 82       	std	Y+4, r1	; 0x04
	double NextSign = 1.0;
    43f2:	80 e0       	ldi	r24, 0x00	; 0
    43f4:	90 e0       	ldi	r25, 0x00	; 0
    43f6:	a0 e8       	ldi	r26, 0x80	; 128
    43f8:	bf e3       	ldi	r27, 0x3F	; 63
    43fa:	8d 83       	std	Y+5, r24	; 0x05
    43fc:	9e 83       	std	Y+6, r25	; 0x06
    43fe:	af 83       	std	Y+7, r26	; 0x07
    4400:	b8 87       	std	Y+8, r27	; 0x08
		while (1)
		{
			if (State == RunLeibniz)
    4402:	80 91 10 31 	lds	r24, 0x3110	; 0x803110 <State>
    4406:	82 30       	cpi	r24, 0x02	; 2
    4408:	09 f0       	breq	.+2      	; 0x440c <vPiLeibniz+0x3c>
    440a:	5c c0       	rjmp	.+184    	; 0x44c4 <vPiLeibniz+0xf4>
			{
				LeibnizPi = LeibnizPi + (NextSign / (2.0 * CurIterations + 1)) * 4;
    440c:	69 81       	ldd	r22, Y+1	; 0x01
    440e:	7a 81       	ldd	r23, Y+2	; 0x02
    4410:	8b 81       	ldd	r24, Y+3	; 0x03
    4412:	9c 81       	ldd	r25, Y+4	; 0x04
    4414:	0e 94 18 30 	call	0x6030	; 0x6030 <__floatunsisf>
    4418:	dc 01       	movw	r26, r24
    441a:	cb 01       	movw	r24, r22
    441c:	9c 01       	movw	r18, r24
    441e:	ad 01       	movw	r20, r26
    4420:	bc 01       	movw	r22, r24
    4422:	cd 01       	movw	r24, r26
    4424:	0e 94 ff 2e 	call	0x5dfe	; 0x5dfe <__addsf3>
    4428:	dc 01       	movw	r26, r24
    442a:	cb 01       	movw	r24, r22
    442c:	20 e0       	ldi	r18, 0x00	; 0
    442e:	30 e0       	ldi	r19, 0x00	; 0
    4430:	40 e8       	ldi	r20, 0x80	; 128
    4432:	5f e3       	ldi	r21, 0x3F	; 63
    4434:	bc 01       	movw	r22, r24
    4436:	cd 01       	movw	r24, r26
    4438:	0e 94 ff 2e 	call	0x5dfe	; 0x5dfe <__addsf3>
    443c:	dc 01       	movw	r26, r24
    443e:	cb 01       	movw	r24, r22
    4440:	9c 01       	movw	r18, r24
    4442:	ad 01       	movw	r20, r26
    4444:	6d 81       	ldd	r22, Y+5	; 0x05
    4446:	7e 81       	ldd	r23, Y+6	; 0x06
    4448:	8f 81       	ldd	r24, Y+7	; 0x07
    444a:	98 85       	ldd	r25, Y+8	; 0x08
    444c:	0e 94 70 2f 	call	0x5ee0	; 0x5ee0 <__divsf3>
    4450:	dc 01       	movw	r26, r24
    4452:	cb 01       	movw	r24, r22
    4454:	20 e0       	ldi	r18, 0x00	; 0
    4456:	30 e0       	ldi	r19, 0x00	; 0
    4458:	40 e8       	ldi	r20, 0x80	; 128
    445a:	50 e4       	ldi	r21, 0x40	; 64
    445c:	bc 01       	movw	r22, r24
    445e:	cd 01       	movw	r24, r26
    4460:	0e 94 cf 30 	call	0x619e	; 0x619e <__mulsf3>
    4464:	dc 01       	movw	r26, r24
    4466:	cb 01       	movw	r24, r22
    4468:	7c 01       	movw	r14, r24
    446a:	8d 01       	movw	r16, r26
    446c:	80 91 02 31 	lds	r24, 0x3102	; 0x803102 <LeibnizPi>
    4470:	90 91 03 31 	lds	r25, 0x3103	; 0x803103 <LeibnizPi+0x1>
    4474:	a0 91 04 31 	lds	r26, 0x3104	; 0x803104 <LeibnizPi+0x2>
    4478:	b0 91 05 31 	lds	r27, 0x3105	; 0x803105 <LeibnizPi+0x3>
    447c:	9c 01       	movw	r18, r24
    447e:	ad 01       	movw	r20, r26
    4480:	c8 01       	movw	r24, r16
    4482:	b7 01       	movw	r22, r14
    4484:	0e 94 ff 2e 	call	0x5dfe	; 0x5dfe <__addsf3>
    4488:	dc 01       	movw	r26, r24
    448a:	cb 01       	movw	r24, r22
    448c:	80 93 02 31 	sts	0x3102, r24	; 0x803102 <LeibnizPi>
    4490:	90 93 03 31 	sts	0x3103, r25	; 0x803103 <LeibnizPi+0x1>
    4494:	a0 93 04 31 	sts	0x3104, r26	; 0x803104 <LeibnizPi+0x2>
    4498:	b0 93 05 31 	sts	0x3105, r27	; 0x803105 <LeibnizPi+0x3>
				NextSign = - NextSign;
    449c:	8d 81       	ldd	r24, Y+5	; 0x05
    449e:	9e 81       	ldd	r25, Y+6	; 0x06
    44a0:	af 81       	ldd	r26, Y+7	; 0x07
    44a2:	b8 85       	ldd	r27, Y+8	; 0x08
    44a4:	b0 58       	subi	r27, 0x80	; 128
    44a6:	8d 83       	std	Y+5, r24	; 0x05
    44a8:	9e 83       	std	Y+6, r25	; 0x06
    44aa:	af 83       	std	Y+7, r26	; 0x07
    44ac:	b8 87       	std	Y+8, r27	; 0x08
				CurIterations++;
    44ae:	89 81       	ldd	r24, Y+1	; 0x01
    44b0:	9a 81       	ldd	r25, Y+2	; 0x02
    44b2:	ab 81       	ldd	r26, Y+3	; 0x03
    44b4:	bc 81       	ldd	r27, Y+4	; 0x04
    44b6:	01 96       	adiw	r24, 0x01	; 1
    44b8:	a1 1d       	adc	r26, r1
    44ba:	b1 1d       	adc	r27, r1
    44bc:	89 83       	std	Y+1, r24	; 0x01
    44be:	9a 83       	std	Y+2, r25	; 0x02
    44c0:	ab 83       	std	Y+3, r26	; 0x03
    44c2:	bc 83       	std	Y+4, r27	; 0x04
			}
			if (xEventGroupGetBits(ProgState) & ResetBit)
    44c4:	80 91 3e 31 	lds	r24, 0x313E	; 0x80313e <ProgState>
    44c8:	90 91 3f 31 	lds	r25, 0x313F	; 0x80313f <ProgState+0x1>
    44cc:	40 e0       	ldi	r20, 0x00	; 0
    44ce:	50 e0       	ldi	r21, 0x00	; 0
    44d0:	ba 01       	movw	r22, r20
    44d2:	0e 94 bb 05 	call	0xb76	; 0xb76 <xEventGroupClearBits>
    44d6:	dc 01       	movw	r26, r24
    44d8:	cb 01       	movw	r24, r22
    44da:	81 70       	andi	r24, 0x01	; 1
    44dc:	99 27       	eor	r25, r25
    44de:	aa 27       	eor	r26, r26
    44e0:	bb 27       	eor	r27, r27
    44e2:	89 2b       	or	r24, r25
    44e4:	8a 2b       	or	r24, r26
    44e6:	8b 2b       	or	r24, r27
    44e8:	f1 f0       	breq	.+60     	; 0x4526 <vPiLeibniz+0x156>
			{
				LeibnizPi = 0;
    44ea:	10 92 02 31 	sts	0x3102, r1	; 0x803102 <LeibnizPi>
    44ee:	10 92 03 31 	sts	0x3103, r1	; 0x803103 <LeibnizPi+0x1>
    44f2:	10 92 04 31 	sts	0x3104, r1	; 0x803104 <LeibnizPi+0x2>
    44f6:	10 92 05 31 	sts	0x3105, r1	; 0x803105 <LeibnizPi+0x3>
				CurIterations = 0;
    44fa:	19 82       	std	Y+1, r1	; 0x01
    44fc:	1a 82       	std	Y+2, r1	; 0x02
    44fe:	1b 82       	std	Y+3, r1	; 0x03
    4500:	1c 82       	std	Y+4, r1	; 0x04
				NextSign = 1.0;
    4502:	80 e0       	ldi	r24, 0x00	; 0
    4504:	90 e0       	ldi	r25, 0x00	; 0
    4506:	a0 e8       	ldi	r26, 0x80	; 128
    4508:	bf e3       	ldi	r27, 0x3F	; 63
    450a:	8d 83       	std	Y+5, r24	; 0x05
    450c:	9e 83       	std	Y+6, r25	; 0x06
    450e:	af 83       	std	Y+7, r26	; 0x07
    4510:	b8 87       	std	Y+8, r27	; 0x08
				xEventGroupSetBits(ProgState, LeibResetBit);
    4512:	80 91 3e 31 	lds	r24, 0x313E	; 0x80313e <ProgState>
    4516:	90 91 3f 31 	lds	r25, 0x313F	; 0x80313f <ProgState+0x1>
    451a:	42 e0       	ldi	r20, 0x02	; 2
    451c:	50 e0       	ldi	r21, 0x00	; 0
    451e:	60 e0       	ldi	r22, 0x00	; 0
    4520:	70 e0       	ldi	r23, 0x00	; 0
    4522:	0e 94 06 06 	call	0xc0c	; 0xc0c <xEventGroupSetBits>
			}
			vTaskDelay(1/portTICK_RATE_MS);
    4526:	61 e0       	ldi	r22, 0x01	; 1
    4528:	70 e0       	ldi	r23, 0x00	; 0
    452a:	80 e0       	ldi	r24, 0x00	; 0
    452c:	90 e0       	ldi	r25, 0x00	; 0
    452e:	0e 94 78 14 	call	0x28f0	; 0x28f0 <vTaskDelay>
		}
    4532:	67 cf       	rjmp	.-306    	; 0x4402 <vPiLeibniz+0x32>

00004534 <vVietaPi>:
}

void vVietaPi(void* pvParameters)											//Approximation of Pi by Vieta Method
{
    4534:	cf 93       	push	r28
    4536:	df 93       	push	r29
    4538:	cd b7       	in	r28, 0x3d	; 61
    453a:	de b7       	in	r29, 0x3e	; 62
    453c:	2a 97       	sbiw	r28, 0x0a	; 10
    453e:	cd bf       	out	0x3d, r28	; 61
    4540:	de bf       	out	0x3e, r29	; 62
    4542:	89 87       	std	Y+9, r24	; 0x09
    4544:	9a 87       	std	Y+10, r25	; 0x0a

	double CurrentApprox = 1;
    4546:	80 e0       	ldi	r24, 0x00	; 0
    4548:	90 e0       	ldi	r25, 0x00	; 0
    454a:	a0 e8       	ldi	r26, 0x80	; 128
    454c:	bf e3       	ldi	r27, 0x3F	; 63
    454e:	89 83       	std	Y+1, r24	; 0x01
    4550:	9a 83       	std	Y+2, r25	; 0x02
    4552:	ab 83       	std	Y+3, r26	; 0x03
    4554:	bc 83       	std	Y+4, r27	; 0x04
	double CurrentSqrt = 0;
    4556:	1d 82       	std	Y+5, r1	; 0x05
    4558:	1e 82       	std	Y+6, r1	; 0x06
    455a:	1f 82       	std	Y+7, r1	; 0x07
    455c:	18 86       	std	Y+8, r1	; 0x08
	
	while(1)
	{
		
		if ( State == RunVieta)
    455e:	80 91 10 31 	lds	r24, 0x3110	; 0x803110 <State>
    4562:	83 30       	cpi	r24, 0x03	; 3
    4564:	09 f0       	breq	.+2      	; 0x4568 <vVietaPi+0x34>
    4566:	44 c0       	rjmp	.+136    	; 0x45f0 <vVietaPi+0xbc>
		{
			CurrentSqrt = sqrt(2 + CurrentSqrt); 
    4568:	20 e0       	ldi	r18, 0x00	; 0
    456a:	30 e0       	ldi	r19, 0x00	; 0
    456c:	40 e0       	ldi	r20, 0x00	; 0
    456e:	50 e4       	ldi	r21, 0x40	; 64
    4570:	6d 81       	ldd	r22, Y+5	; 0x05
    4572:	7e 81       	ldd	r23, Y+6	; 0x06
    4574:	8f 81       	ldd	r24, Y+7	; 0x07
    4576:	98 85       	ldd	r25, Y+8	; 0x08
    4578:	0e 94 ff 2e 	call	0x5dfe	; 0x5dfe <__addsf3>
    457c:	dc 01       	movw	r26, r24
    457e:	cb 01       	movw	r24, r22
    4580:	bc 01       	movw	r22, r24
    4582:	cd 01       	movw	r24, r26
    4584:	0e 94 42 31 	call	0x6284	; 0x6284 <sqrt>
    4588:	dc 01       	movw	r26, r24
    458a:	cb 01       	movw	r24, r22
    458c:	8d 83       	std	Y+5, r24	; 0x05
    458e:	9e 83       	std	Y+6, r25	; 0x06
    4590:	af 83       	std	Y+7, r26	; 0x07
    4592:	b8 87       	std	Y+8, r27	; 0x08
			CurrentApprox = CurrentApprox * (CurrentSqrt / 2.0);
    4594:	20 e0       	ldi	r18, 0x00	; 0
    4596:	30 e0       	ldi	r19, 0x00	; 0
    4598:	40 e0       	ldi	r20, 0x00	; 0
    459a:	50 e4       	ldi	r21, 0x40	; 64
    459c:	6d 81       	ldd	r22, Y+5	; 0x05
    459e:	7e 81       	ldd	r23, Y+6	; 0x06
    45a0:	8f 81       	ldd	r24, Y+7	; 0x07
    45a2:	98 85       	ldd	r25, Y+8	; 0x08
    45a4:	0e 94 70 2f 	call	0x5ee0	; 0x5ee0 <__divsf3>
    45a8:	dc 01       	movw	r26, r24
    45aa:	cb 01       	movw	r24, r22
    45ac:	9c 01       	movw	r18, r24
    45ae:	ad 01       	movw	r20, r26
    45b0:	69 81       	ldd	r22, Y+1	; 0x01
    45b2:	7a 81       	ldd	r23, Y+2	; 0x02
    45b4:	8b 81       	ldd	r24, Y+3	; 0x03
    45b6:	9c 81       	ldd	r25, Y+4	; 0x04
    45b8:	0e 94 cf 30 	call	0x619e	; 0x619e <__mulsf3>
    45bc:	dc 01       	movw	r26, r24
    45be:	cb 01       	movw	r24, r22
    45c0:	89 83       	std	Y+1, r24	; 0x01
    45c2:	9a 83       	std	Y+2, r25	; 0x02
    45c4:	ab 83       	std	Y+3, r26	; 0x03
    45c6:	bc 83       	std	Y+4, r27	; 0x04
			VietaPi = 2 / CurrentApprox;
    45c8:	29 81       	ldd	r18, Y+1	; 0x01
    45ca:	3a 81       	ldd	r19, Y+2	; 0x02
    45cc:	4b 81       	ldd	r20, Y+3	; 0x03
    45ce:	5c 81       	ldd	r21, Y+4	; 0x04
    45d0:	60 e0       	ldi	r22, 0x00	; 0
    45d2:	70 e0       	ldi	r23, 0x00	; 0
    45d4:	80 e0       	ldi	r24, 0x00	; 0
    45d6:	90 e4       	ldi	r25, 0x40	; 64
    45d8:	0e 94 70 2f 	call	0x5ee0	; 0x5ee0 <__divsf3>
    45dc:	dc 01       	movw	r26, r24
    45de:	cb 01       	movw	r24, r22
    45e0:	80 93 06 31 	sts	0x3106, r24	; 0x803106 <VietaPi>
    45e4:	90 93 07 31 	sts	0x3107, r25	; 0x803107 <VietaPi+0x1>
    45e8:	a0 93 08 31 	sts	0x3108, r26	; 0x803108 <VietaPi+0x2>
    45ec:	b0 93 09 31 	sts	0x3109, r27	; 0x803109 <VietaPi+0x3>
		}
		if (xEventGroupGetBits(ProgState) & ResetBit)
    45f0:	80 91 3e 31 	lds	r24, 0x313E	; 0x80313e <ProgState>
    45f4:	90 91 3f 31 	lds	r25, 0x313F	; 0x80313f <ProgState+0x1>
    45f8:	40 e0       	ldi	r20, 0x00	; 0
    45fa:	50 e0       	ldi	r21, 0x00	; 0
    45fc:	ba 01       	movw	r22, r20
    45fe:	0e 94 bb 05 	call	0xb76	; 0xb76 <xEventGroupClearBits>
    4602:	dc 01       	movw	r26, r24
    4604:	cb 01       	movw	r24, r22
    4606:	81 70       	andi	r24, 0x01	; 1
    4608:	99 27       	eor	r25, r25
    460a:	aa 27       	eor	r26, r26
    460c:	bb 27       	eor	r27, r27
    460e:	89 2b       	or	r24, r25
    4610:	8a 2b       	or	r24, r26
    4612:	8b 2b       	or	r24, r27
    4614:	f1 f0       	breq	.+60     	; 0x4652 <vVietaPi+0x11e>
			{
				CurrentApprox = 1;
    4616:	80 e0       	ldi	r24, 0x00	; 0
    4618:	90 e0       	ldi	r25, 0x00	; 0
    461a:	a0 e8       	ldi	r26, 0x80	; 128
    461c:	bf e3       	ldi	r27, 0x3F	; 63
    461e:	89 83       	std	Y+1, r24	; 0x01
    4620:	9a 83       	std	Y+2, r25	; 0x02
    4622:	ab 83       	std	Y+3, r26	; 0x03
    4624:	bc 83       	std	Y+4, r27	; 0x04
				CurrentSqrt = 0;
    4626:	1d 82       	std	Y+5, r1	; 0x05
    4628:	1e 82       	std	Y+6, r1	; 0x06
    462a:	1f 82       	std	Y+7, r1	; 0x07
    462c:	18 86       	std	Y+8, r1	; 0x08
				VietaPi = 0;
    462e:	10 92 06 31 	sts	0x3106, r1	; 0x803106 <VietaPi>
    4632:	10 92 07 31 	sts	0x3107, r1	; 0x803107 <VietaPi+0x1>
    4636:	10 92 08 31 	sts	0x3108, r1	; 0x803108 <VietaPi+0x2>
    463a:	10 92 09 31 	sts	0x3109, r1	; 0x803109 <VietaPi+0x3>
				xEventGroupSetBits(ProgState, VietResetBit);
    463e:	80 91 3e 31 	lds	r24, 0x313E	; 0x80313e <ProgState>
    4642:	90 91 3f 31 	lds	r25, 0x313F	; 0x80313f <ProgState+0x1>
    4646:	44 e0       	ldi	r20, 0x04	; 4
    4648:	50 e0       	ldi	r21, 0x00	; 0
    464a:	60 e0       	ldi	r22, 0x00	; 0
    464c:	70 e0       	ldi	r23, 0x00	; 0
    464e:	0e 94 06 06 	call	0xc0c	; 0xc0c <xEventGroupSetBits>
			}
		vTaskDelay(1/portTICK_RATE_MS);
    4652:	61 e0       	ldi	r22, 0x01	; 1
    4654:	70 e0       	ldi	r23, 0x00	; 0
    4656:	80 e0       	ldi	r24, 0x00	; 0
    4658:	90 e0       	ldi	r25, 0x00	; 0
    465a:	0e 94 78 14 	call	0x28f0	; 0x28f0 <vTaskDelay>
	}
    465e:	7f cf       	rjmp	.-258    	; 0x455e <vVietaPi+0x2a>

00004660 <vCompare>:
}


void vCompare(void* pvParameters)														//Comparing Approximated Pi with Reference
{
    4660:	cf 93       	push	r28
    4662:	df 93       	push	r29
    4664:	cd b7       	in	r28, 0x3d	; 61
    4666:	de b7       	in	r29, 0x3e	; 62
    4668:	2e 97       	sbiw	r28, 0x0e	; 14
    466a:	cd bf       	out	0x3d, r28	; 61
    466c:	de bf       	out	0x3e, r29	; 62
    466e:	8d 87       	std	Y+13, r24	; 0x0d
    4670:	9e 87       	std	Y+14, r25	; 0x0e
	uint32_t RoundVietaPi = 0;
    4672:	19 82       	std	Y+1, r1	; 0x01
    4674:	1a 82       	std	Y+2, r1	; 0x02
    4676:	1b 82       	std	Y+3, r1	; 0x03
    4678:	1c 82       	std	Y+4, r1	; 0x04
	uint32_t RoundLeibPi = 0;
    467a:	1d 82       	std	Y+5, r1	; 0x05
    467c:	1e 82       	std	Y+6, r1	; 0x06
    467e:	1f 82       	std	Y+7, r1	; 0x07
    4680:	18 86       	std	Y+8, r1	; 0x08
	uint32_t RoundRefPi = 0;
    4682:	19 86       	std	Y+9, r1	; 0x09
    4684:	1a 86       	std	Y+10, r1	; 0x0a
    4686:	1b 86       	std	Y+11, r1	; 0x0b
    4688:	1c 86       	std	Y+12, r1	; 0x0c
	while(1)
	{
		RoundVietaPi = (uint32_t) (VietaPi * 100000);
    468a:	80 91 06 31 	lds	r24, 0x3106	; 0x803106 <VietaPi>
    468e:	90 91 07 31 	lds	r25, 0x3107	; 0x803107 <VietaPi+0x1>
    4692:	a0 91 08 31 	lds	r26, 0x3108	; 0x803108 <VietaPi+0x2>
    4696:	b0 91 09 31 	lds	r27, 0x3109	; 0x803109 <VietaPi+0x3>
    469a:	20 e0       	ldi	r18, 0x00	; 0
    469c:	30 e5       	ldi	r19, 0x50	; 80
    469e:	43 ec       	ldi	r20, 0xC3	; 195
    46a0:	57 e4       	ldi	r21, 0x47	; 71
    46a2:	bc 01       	movw	r22, r24
    46a4:	cd 01       	movw	r24, r26
    46a6:	0e 94 cf 30 	call	0x619e	; 0x619e <__mulsf3>
    46aa:	dc 01       	movw	r26, r24
    46ac:	cb 01       	movw	r24, r22
    46ae:	bc 01       	movw	r22, r24
    46b0:	cd 01       	movw	r24, r26
    46b2:	0e 94 e9 2f 	call	0x5fd2	; 0x5fd2 <__fixunssfsi>
    46b6:	dc 01       	movw	r26, r24
    46b8:	cb 01       	movw	r24, r22
    46ba:	89 83       	std	Y+1, r24	; 0x01
    46bc:	9a 83       	std	Y+2, r25	; 0x02
    46be:	ab 83       	std	Y+3, r26	; 0x03
    46c0:	bc 83       	std	Y+4, r27	; 0x04
		RoundLeibPi = (uint32_t) (LeibnizPi * 100000);
    46c2:	80 91 02 31 	lds	r24, 0x3102	; 0x803102 <LeibnizPi>
    46c6:	90 91 03 31 	lds	r25, 0x3103	; 0x803103 <LeibnizPi+0x1>
    46ca:	a0 91 04 31 	lds	r26, 0x3104	; 0x803104 <LeibnizPi+0x2>
    46ce:	b0 91 05 31 	lds	r27, 0x3105	; 0x803105 <LeibnizPi+0x3>
    46d2:	20 e0       	ldi	r18, 0x00	; 0
    46d4:	30 e5       	ldi	r19, 0x50	; 80
    46d6:	43 ec       	ldi	r20, 0xC3	; 195
    46d8:	57 e4       	ldi	r21, 0x47	; 71
    46da:	bc 01       	movw	r22, r24
    46dc:	cd 01       	movw	r24, r26
    46de:	0e 94 cf 30 	call	0x619e	; 0x619e <__mulsf3>
    46e2:	dc 01       	movw	r26, r24
    46e4:	cb 01       	movw	r24, r22
    46e6:	bc 01       	movw	r22, r24
    46e8:	cd 01       	movw	r24, r26
    46ea:	0e 94 e9 2f 	call	0x5fd2	; 0x5fd2 <__fixunssfsi>
    46ee:	dc 01       	movw	r26, r24
    46f0:	cb 01       	movw	r24, r22
    46f2:	8d 83       	std	Y+5, r24	; 0x05
    46f4:	9e 83       	std	Y+6, r25	; 0x06
    46f6:	af 83       	std	Y+7, r26	; 0x07
    46f8:	b8 87       	std	Y+8, r27	; 0x08
		RoundRefPi = (uint32_t) (RefPi * 100000);
    46fa:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    46fe:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    4702:	a0 91 02 20 	lds	r26, 0x2002	; 0x802002 <__DATA_REGION_ORIGIN__+0x2>
    4706:	b0 91 03 20 	lds	r27, 0x2003	; 0x802003 <__DATA_REGION_ORIGIN__+0x3>
    470a:	20 e0       	ldi	r18, 0x00	; 0
    470c:	30 e5       	ldi	r19, 0x50	; 80
    470e:	43 ec       	ldi	r20, 0xC3	; 195
    4710:	57 e4       	ldi	r21, 0x47	; 71
    4712:	bc 01       	movw	r22, r24
    4714:	cd 01       	movw	r24, r26
    4716:	0e 94 cf 30 	call	0x619e	; 0x619e <__mulsf3>
    471a:	dc 01       	movw	r26, r24
    471c:	cb 01       	movw	r24, r22
    471e:	bc 01       	movw	r22, r24
    4720:	cd 01       	movw	r24, r26
    4722:	0e 94 e9 2f 	call	0x5fd2	; 0x5fd2 <__fixunssfsi>
    4726:	dc 01       	movw	r26, r24
    4728:	cb 01       	movw	r24, r22
    472a:	89 87       	std	Y+9, r24	; 0x09
    472c:	9a 87       	std	Y+10, r25	; 0x0a
    472e:	ab 87       	std	Y+11, r26	; 0x0b
    4730:	bc 87       	std	Y+12, r27	; 0x0c
		if ((xEventGroupGetBits(ProgState) & TimerRunBit) && (( RoundRefPi == RoundLeibPi) || ( RoundRefPi == RoundVietaPi)))
    4732:	80 91 3e 31 	lds	r24, 0x313E	; 0x80313e <ProgState>
    4736:	90 91 3f 31 	lds	r25, 0x313F	; 0x80313f <ProgState+0x1>
    473a:	40 e0       	ldi	r20, 0x00	; 0
    473c:	50 e0       	ldi	r21, 0x00	; 0
    473e:	ba 01       	movw	r22, r20
    4740:	0e 94 bb 05 	call	0xb76	; 0xb76 <xEventGroupClearBits>
    4744:	dc 01       	movw	r26, r24
    4746:	cb 01       	movw	r24, r22
    4748:	88 70       	andi	r24, 0x08	; 8
    474a:	99 27       	eor	r25, r25
    474c:	aa 27       	eor	r26, r26
    474e:	bb 27       	eor	r27, r27
    4750:	89 2b       	or	r24, r25
    4752:	8a 2b       	or	r24, r26
    4754:	8b 2b       	or	r24, r27
    4756:	21 f1       	breq	.+72     	; 0x47a0 <vCompare+0x140>
    4758:	29 85       	ldd	r18, Y+9	; 0x09
    475a:	3a 85       	ldd	r19, Y+10	; 0x0a
    475c:	4b 85       	ldd	r20, Y+11	; 0x0b
    475e:	5c 85       	ldd	r21, Y+12	; 0x0c
    4760:	8d 81       	ldd	r24, Y+5	; 0x05
    4762:	9e 81       	ldd	r25, Y+6	; 0x06
    4764:	af 81       	ldd	r26, Y+7	; 0x07
    4766:	b8 85       	ldd	r27, Y+8	; 0x08
    4768:	28 17       	cp	r18, r24
    476a:	39 07       	cpc	r19, r25
    476c:	4a 07       	cpc	r20, r26
    476e:	5b 07       	cpc	r21, r27
    4770:	69 f0       	breq	.+26     	; 0x478c <vCompare+0x12c>
    4772:	29 85       	ldd	r18, Y+9	; 0x09
    4774:	3a 85       	ldd	r19, Y+10	; 0x0a
    4776:	4b 85       	ldd	r20, Y+11	; 0x0b
    4778:	5c 85       	ldd	r21, Y+12	; 0x0c
    477a:	89 81       	ldd	r24, Y+1	; 0x01
    477c:	9a 81       	ldd	r25, Y+2	; 0x02
    477e:	ab 81       	ldd	r26, Y+3	; 0x03
    4780:	bc 81       	ldd	r27, Y+4	; 0x04
    4782:	28 17       	cp	r18, r24
    4784:	39 07       	cpc	r19, r25
    4786:	4a 07       	cpc	r20, r26
    4788:	5b 07       	cpc	r21, r27
    478a:	51 f4       	brne	.+20     	; 0x47a0 <vCompare+0x140>
		{
			xEventGroupClearBits(ProgState, TimerRunBit);
    478c:	80 91 3e 31 	lds	r24, 0x313E	; 0x80313e <ProgState>
    4790:	90 91 3f 31 	lds	r25, 0x313F	; 0x80313f <ProgState+0x1>
    4794:	48 e0       	ldi	r20, 0x08	; 8
    4796:	50 e0       	ldi	r21, 0x00	; 0
    4798:	60 e0       	ldi	r22, 0x00	; 0
    479a:	70 e0       	ldi	r23, 0x00	; 0
    479c:	0e 94 bb 05 	call	0xb76	; 0xb76 <xEventGroupClearBits>
		}
		vTaskDelay(10/portTICK_RATE_MS);
    47a0:	6a e0       	ldi	r22, 0x0A	; 10
    47a2:	70 e0       	ldi	r23, 0x00	; 0
    47a4:	80 e0       	ldi	r24, 0x00	; 0
    47a6:	90 e0       	ldi	r25, 0x00	; 0
    47a8:	0e 94 78 14 	call	0x28f0	; 0x28f0 <vTaskDelay>
	}
    47ac:	6e cf       	rjmp	.-292    	; 0x468a <vCompare+0x2a>

000047ae <vDisplaytask>:
}



void vDisplaytask(void* pvParameters)									//Display Task
{
    47ae:	cf 93       	push	r28
    47b0:	df 93       	push	r29
    47b2:	cd b7       	in	r28, 0x3d	; 61
    47b4:	de b7       	in	r29, 0x3e	; 62
    47b6:	c6 55       	subi	r28, 0x56	; 86
    47b8:	d1 09       	sbc	r29, r1
    47ba:	cd bf       	out	0x3d, r28	; 61
    47bc:	de bf       	out	0x3e, r29	; 62
    47be:	9e 01       	movw	r18, r28
    47c0:	2b 5a       	subi	r18, 0xAB	; 171
    47c2:	3f 4f       	sbci	r19, 0xFF	; 255
    47c4:	f9 01       	movw	r30, r18
    47c6:	80 83       	st	Z, r24
    47c8:	91 83       	std	Z+1, r25	; 0x01
	TickType_t lasttime = xTaskGetTickCount();
    47ca:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <xTaskGetTickCount>
    47ce:	dc 01       	movw	r26, r24
    47d0:	cb 01       	movw	r24, r22
    47d2:	89 83       	std	Y+1, r24	; 0x01
    47d4:	9a 83       	std	Y+2, r25	; 0x02
    47d6:	ab 83       	std	Y+3, r26	; 0x03
    47d8:	bc 83       	std	Y+4, r27	; 0x04
	char TitleString[20];
	char TimeString[20];
	
	while(1)
	{
		switch(State)
    47da:	80 91 10 31 	lds	r24, 0x3110	; 0x803110 <State>
    47de:	88 2f       	mov	r24, r24
    47e0:	90 e0       	ldi	r25, 0x00	; 0
    47e2:	81 30       	cpi	r24, 0x01	; 1
    47e4:	91 05       	cpc	r25, r1
    47e6:	c9 f1       	breq	.+114    	; 0x485a <vDisplaytask+0xac>
    47e8:	82 30       	cpi	r24, 0x02	; 2
    47ea:	91 05       	cpc	r25, r1
    47ec:	1c f4       	brge	.+6      	; 0x47f4 <vDisplaytask+0x46>
    47ee:	89 2b       	or	r24, r25
    47f0:	39 f0       	breq	.+14     	; 0x4800 <vDisplaytask+0x52>
    47f2:	60 c0       	rjmp	.+192    	; 0x48b4 <vDisplaytask+0x106>
    47f4:	82 30       	cpi	r24, 0x02	; 2
    47f6:	91 05       	cpc	r25, r1
    47f8:	19 f0       	breq	.+6      	; 0x4800 <vDisplaytask+0x52>
    47fa:	03 97       	sbiw	r24, 0x03	; 3
    47fc:	71 f1       	breq	.+92     	; 0x485a <vDisplaytask+0xac>
    47fe:	5a c0       	rjmp	.+180    	; 0x48b4 <vDisplaytask+0x106>
		{
			
		case RunLeibniz:	
		case StopLeibniz:
			sprintf(&TitleString[0], "Leibniz Approx:");	
    4800:	ce 01       	movw	r24, r28
    4802:	8d 96       	adiw	r24, 0x2d	; 45
    4804:	20 e1       	ldi	r18, 0x10	; 16
    4806:	e1 e6       	ldi	r30, 0x61	; 97
    4808:	f0 e2       	ldi	r31, 0x20	; 32
    480a:	dc 01       	movw	r26, r24
    480c:	01 90       	ld	r0, Z+
    480e:	0d 92       	st	X+, r0
    4810:	2a 95       	dec	r18
    4812:	e1 f7       	brne	.-8      	; 0x480c <vDisplaytask+0x5e>
			sprintf(&ApproxPiString[0], "ApproxPI: %.7f", LeibnizPi);
    4814:	80 91 02 31 	lds	r24, 0x3102	; 0x803102 <LeibnizPi>
    4818:	90 91 03 31 	lds	r25, 0x3103	; 0x803103 <LeibnizPi+0x1>
    481c:	a0 91 04 31 	lds	r26, 0x3104	; 0x803104 <LeibnizPi+0x2>
    4820:	b0 91 05 31 	lds	r27, 0x3105	; 0x803105 <LeibnizPi+0x3>
    4824:	2b 2f       	mov	r18, r27
    4826:	2f 93       	push	r18
    4828:	2a 2f       	mov	r18, r26
    482a:	2f 93       	push	r18
    482c:	29 2f       	mov	r18, r25
    482e:	2f 93       	push	r18
    4830:	8f 93       	push	r24
    4832:	81 e7       	ldi	r24, 0x71	; 113
    4834:	90 e2       	ldi	r25, 0x20	; 32
    4836:	89 2f       	mov	r24, r25
    4838:	8f 93       	push	r24
    483a:	81 e7       	ldi	r24, 0x71	; 113
    483c:	90 e2       	ldi	r25, 0x20	; 32
    483e:	8f 93       	push	r24
    4840:	ce 01       	movw	r24, r28
    4842:	05 96       	adiw	r24, 0x05	; 5
    4844:	29 2f       	mov	r18, r25
    4846:	2f 93       	push	r18
    4848:	8f 93       	push	r24
    484a:	0e 94 b2 36 	call	0x6d64	; 0x6d64 <sprintf>
    484e:	8d b7       	in	r24, 0x3d	; 61
    4850:	9e b7       	in	r25, 0x3e	; 62
    4852:	08 96       	adiw	r24, 0x08	; 8
    4854:	cd bf       	out	0x3d, r28	; 61
    4856:	de bf       	out	0x3e, r29	; 62
			break;
    4858:	30 c0       	rjmp	.+96     	; 0x48ba <vDisplaytask+0x10c>
		case RunVieta:
		case StopVieta:
			sprintf(&TitleString[0], "Vieta Approx:  ");
    485a:	ce 01       	movw	r24, r28
    485c:	8d 96       	adiw	r24, 0x2d	; 45
    485e:	20 e1       	ldi	r18, 0x10	; 16
    4860:	e0 e8       	ldi	r30, 0x80	; 128
    4862:	f0 e2       	ldi	r31, 0x20	; 32
    4864:	dc 01       	movw	r26, r24
    4866:	01 90       	ld	r0, Z+
    4868:	0d 92       	st	X+, r0
    486a:	2a 95       	dec	r18
    486c:	e1 f7       	brne	.-8      	; 0x4866 <vDisplaytask+0xb8>
			sprintf(&ApproxPiString[0], "ApproxPI: %.7f", VietaPi);
    486e:	80 91 06 31 	lds	r24, 0x3106	; 0x803106 <VietaPi>
    4872:	90 91 07 31 	lds	r25, 0x3107	; 0x803107 <VietaPi+0x1>
    4876:	a0 91 08 31 	lds	r26, 0x3108	; 0x803108 <VietaPi+0x2>
    487a:	b0 91 09 31 	lds	r27, 0x3109	; 0x803109 <VietaPi+0x3>
    487e:	2b 2f       	mov	r18, r27
    4880:	2f 93       	push	r18
    4882:	2a 2f       	mov	r18, r26
    4884:	2f 93       	push	r18
    4886:	29 2f       	mov	r18, r25
    4888:	2f 93       	push	r18
    488a:	8f 93       	push	r24
    488c:	81 e7       	ldi	r24, 0x71	; 113
    488e:	90 e2       	ldi	r25, 0x20	; 32
    4890:	89 2f       	mov	r24, r25
    4892:	8f 93       	push	r24
    4894:	81 e7       	ldi	r24, 0x71	; 113
    4896:	90 e2       	ldi	r25, 0x20	; 32
    4898:	8f 93       	push	r24
    489a:	ce 01       	movw	r24, r28
    489c:	05 96       	adiw	r24, 0x05	; 5
    489e:	29 2f       	mov	r18, r25
    48a0:	2f 93       	push	r18
    48a2:	8f 93       	push	r24
    48a4:	0e 94 b2 36 	call	0x6d64	; 0x6d64 <sprintf>
    48a8:	ed b7       	in	r30, 0x3d	; 61
    48aa:	fe b7       	in	r31, 0x3e	; 62
    48ac:	38 96       	adiw	r30, 0x08	; 8
    48ae:	cd bf       	out	0x3d, r28	; 61
    48b0:	de bf       	out	0x3e, r29	; 62
			break;
    48b2:	03 c0       	rjmp	.+6      	; 0x48ba <vDisplaytask+0x10c>
		default:
			State = StopLeibniz;
    48b4:	10 92 10 31 	sts	0x3110, r1	; 0x803110 <State>
			break;
    48b8:	00 00       	nop
		}
	sprintf(&RefPiString[0], "Refer PI: %.7f", RefPi);
    48ba:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    48be:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    48c2:	a0 91 02 20 	lds	r26, 0x2002	; 0x802002 <__DATA_REGION_ORIGIN__+0x2>
    48c6:	b0 91 03 20 	lds	r27, 0x2003	; 0x802003 <__DATA_REGION_ORIGIN__+0x3>
    48ca:	2b 2f       	mov	r18, r27
    48cc:	2f 93       	push	r18
    48ce:	2a 2f       	mov	r18, r26
    48d0:	2f 93       	push	r18
    48d2:	29 2f       	mov	r18, r25
    48d4:	2f 93       	push	r18
    48d6:	8f 93       	push	r24
    48d8:	80 e9       	ldi	r24, 0x90	; 144
    48da:	90 e2       	ldi	r25, 0x20	; 32
    48dc:	89 2f       	mov	r24, r25
    48de:	8f 93       	push	r24
    48e0:	80 e9       	ldi	r24, 0x90	; 144
    48e2:	90 e2       	ldi	r25, 0x20	; 32
    48e4:	8f 93       	push	r24
    48e6:	ce 01       	movw	r24, r28
    48e8:	49 96       	adiw	r24, 0x19	; 25
    48ea:	29 2f       	mov	r18, r25
    48ec:	2f 93       	push	r18
    48ee:	8f 93       	push	r24
    48f0:	0e 94 b2 36 	call	0x6d64	; 0x6d64 <sprintf>
    48f4:	8d b7       	in	r24, 0x3d	; 61
    48f6:	9e b7       	in	r25, 0x3e	; 62
    48f8:	08 96       	adiw	r24, 0x08	; 8
    48fa:	cd bf       	out	0x3d, r28	; 61
    48fc:	de bf       	out	0x3e, r29	; 62
	sprintf(&TimeString[0], "Time: %.2i:%.2i:%.2i", GlobalMin, GlobalSec, GlobalHunSec);
    48fe:	40 91 0e 31 	lds	r20, 0x310E	; 0x80310e <GlobalHunSec>
    4902:	50 91 0f 31 	lds	r21, 0x310F	; 0x80310f <GlobalHunSec+0x1>
    4906:	20 91 0a 31 	lds	r18, 0x310A	; 0x80310a <GlobalSec>
    490a:	30 91 0b 31 	lds	r19, 0x310B	; 0x80310b <GlobalSec+0x1>
    490e:	80 91 0c 31 	lds	r24, 0x310C	; 0x80310c <GlobalMin>
    4912:	90 91 0d 31 	lds	r25, 0x310D	; 0x80310d <GlobalMin+0x1>
    4916:	65 2f       	mov	r22, r21
    4918:	6f 93       	push	r22
    491a:	4f 93       	push	r20
    491c:	43 2f       	mov	r20, r19
    491e:	4f 93       	push	r20
    4920:	2f 93       	push	r18
    4922:	29 2f       	mov	r18, r25
    4924:	2f 93       	push	r18
    4926:	8f 93       	push	r24
    4928:	8f e9       	ldi	r24, 0x9F	; 159
    492a:	90 e2       	ldi	r25, 0x20	; 32
    492c:	89 2f       	mov	r24, r25
    492e:	8f 93       	push	r24
    4930:	8f e9       	ldi	r24, 0x9F	; 159
    4932:	90 e2       	ldi	r25, 0x20	; 32
    4934:	8f 93       	push	r24
    4936:	ce 01       	movw	r24, r28
    4938:	8f 5b       	subi	r24, 0xBF	; 191
    493a:	9f 4f       	sbci	r25, 0xFF	; 255
    493c:	29 2f       	mov	r18, r25
    493e:	2f 93       	push	r18
    4940:	8f 93       	push	r24
    4942:	0e 94 b2 36 	call	0x6d64	; 0x6d64 <sprintf>
    4946:	ed b7       	in	r30, 0x3d	; 61
    4948:	fe b7       	in	r31, 0x3e	; 62
    494a:	3a 96       	adiw	r30, 0x0a	; 10
    494c:	cd bf       	out	0x3d, r28	; 61
    494e:	de bf       	out	0x3e, r29	; 62
	vDisplayWriteStringAtPos(0,0, "%s", TitleString);	
    4950:	ce 01       	movw	r24, r28
    4952:	8d 96       	adiw	r24, 0x2d	; 45
    4954:	29 2f       	mov	r18, r25
    4956:	2f 93       	push	r18
    4958:	8f 93       	push	r24
    495a:	84 eb       	ldi	r24, 0xB4	; 180
    495c:	90 e2       	ldi	r25, 0x20	; 32
    495e:	89 2f       	mov	r24, r25
    4960:	8f 93       	push	r24
    4962:	84 eb       	ldi	r24, 0xB4	; 180
    4964:	90 e2       	ldi	r25, 0x20	; 32
    4966:	8f 93       	push	r24
    4968:	1f 92       	push	r1
    496a:	1f 92       	push	r1
    496c:	1f 92       	push	r1
    496e:	1f 92       	push	r1
    4970:	0e 94 a5 29 	call	0x534a	; 0x534a <vDisplayWriteStringAtPos>
    4974:	8d b7       	in	r24, 0x3d	; 61
    4976:	9e b7       	in	r25, 0x3e	; 62
    4978:	08 96       	adiw	r24, 0x08	; 8
    497a:	cd bf       	out	0x3d, r28	; 61
    497c:	de bf       	out	0x3e, r29	; 62
	vDisplayWriteStringAtPos(1,0, "%s", ApproxPiString);	
    497e:	ce 01       	movw	r24, r28
    4980:	05 96       	adiw	r24, 0x05	; 5
    4982:	29 2f       	mov	r18, r25
    4984:	2f 93       	push	r18
    4986:	8f 93       	push	r24
    4988:	84 eb       	ldi	r24, 0xB4	; 180
    498a:	90 e2       	ldi	r25, 0x20	; 32
    498c:	89 2f       	mov	r24, r25
    498e:	8f 93       	push	r24
    4990:	84 eb       	ldi	r24, 0xB4	; 180
    4992:	90 e2       	ldi	r25, 0x20	; 32
    4994:	8f 93       	push	r24
    4996:	1f 92       	push	r1
    4998:	1f 92       	push	r1
    499a:	1f 92       	push	r1
    499c:	81 e0       	ldi	r24, 0x01	; 1
    499e:	8f 93       	push	r24
    49a0:	0e 94 a5 29 	call	0x534a	; 0x534a <vDisplayWriteStringAtPos>
    49a4:	ed b7       	in	r30, 0x3d	; 61
    49a6:	fe b7       	in	r31, 0x3e	; 62
    49a8:	38 96       	adiw	r30, 0x08	; 8
    49aa:	cd bf       	out	0x3d, r28	; 61
    49ac:	de bf       	out	0x3e, r29	; 62
	vDisplayWriteStringAtPos(2,0, "%s", RefPiString);	
    49ae:	ce 01       	movw	r24, r28
    49b0:	49 96       	adiw	r24, 0x19	; 25
    49b2:	29 2f       	mov	r18, r25
    49b4:	2f 93       	push	r18
    49b6:	8f 93       	push	r24
    49b8:	84 eb       	ldi	r24, 0xB4	; 180
    49ba:	90 e2       	ldi	r25, 0x20	; 32
    49bc:	89 2f       	mov	r24, r25
    49be:	8f 93       	push	r24
    49c0:	84 eb       	ldi	r24, 0xB4	; 180
    49c2:	90 e2       	ldi	r25, 0x20	; 32
    49c4:	8f 93       	push	r24
    49c6:	1f 92       	push	r1
    49c8:	1f 92       	push	r1
    49ca:	1f 92       	push	r1
    49cc:	82 e0       	ldi	r24, 0x02	; 2
    49ce:	8f 93       	push	r24
    49d0:	0e 94 a5 29 	call	0x534a	; 0x534a <vDisplayWriteStringAtPos>
    49d4:	8d b7       	in	r24, 0x3d	; 61
    49d6:	9e b7       	in	r25, 0x3e	; 62
    49d8:	08 96       	adiw	r24, 0x08	; 8
    49da:	cd bf       	out	0x3d, r28	; 61
    49dc:	de bf       	out	0x3e, r29	; 62
	vDisplayWriteStringAtPos(3,0, "%s", TimeString);
    49de:	ce 01       	movw	r24, r28
    49e0:	8f 5b       	subi	r24, 0xBF	; 191
    49e2:	9f 4f       	sbci	r25, 0xFF	; 255
    49e4:	29 2f       	mov	r18, r25
    49e6:	2f 93       	push	r18
    49e8:	8f 93       	push	r24
    49ea:	84 eb       	ldi	r24, 0xB4	; 180
    49ec:	90 e2       	ldi	r25, 0x20	; 32
    49ee:	89 2f       	mov	r24, r25
    49f0:	8f 93       	push	r24
    49f2:	84 eb       	ldi	r24, 0xB4	; 180
    49f4:	90 e2       	ldi	r25, 0x20	; 32
    49f6:	8f 93       	push	r24
    49f8:	1f 92       	push	r1
    49fa:	1f 92       	push	r1
    49fc:	1f 92       	push	r1
    49fe:	83 e0       	ldi	r24, 0x03	; 3
    4a00:	8f 93       	push	r24
    4a02:	0e 94 a5 29 	call	0x534a	; 0x534a <vDisplayWriteStringAtPos>
    4a06:	ed b7       	in	r30, 0x3d	; 61
    4a08:	fe b7       	in	r31, 0x3e	; 62
    4a0a:	38 96       	adiw	r30, 0x08	; 8
    4a0c:	cd bf       	out	0x3d, r28	; 61
    4a0e:	de bf       	out	0x3e, r29	; 62
	vTaskDelayUntil(&lasttime, 500/portTICK_RATE_MS);
    4a10:	44 ef       	ldi	r20, 0xF4	; 244
    4a12:	51 e0       	ldi	r21, 0x01	; 1
    4a14:	60 e0       	ldi	r22, 0x00	; 0
    4a16:	70 e0       	ldi	r23, 0x00	; 0
    4a18:	ce 01       	movw	r24, r28
    4a1a:	01 96       	adiw	r24, 0x01	; 1
    4a1c:	0e 94 c0 13 	call	0x2780	; 0x2780 <vTaskDelayUntil>
	}
    4a20:	dc ce       	rjmp	.-584    	; 0x47da <vDisplaytask+0x2c>

00004a22 <controllerTask>:

}


void controllerTask(void* pvParameters) {
    4a22:	cf 93       	push	r28
    4a24:	df 93       	push	r29
    4a26:	1f 92       	push	r1
    4a28:	1f 92       	push	r1
    4a2a:	cd b7       	in	r28, 0x3d	; 61
    4a2c:	de b7       	in	r29, 0x3e	; 62
    4a2e:	89 83       	std	Y+1, r24	; 0x01
    4a30:	9a 83       	std	Y+2, r25	; 0x02
	initButtons();
    4a32:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <initButtons>
	for(;;) {
		updateButtons();
    4a36:	0e 94 ed 01 	call	0x3da	; 0x3da <updateButtons>
		if(getButtonPress(BUTTON1) == SHORT_PRESSED) {
    4a3a:	80 e0       	ldi	r24, 0x00	; 0
    4a3c:	0e 94 df 02 	call	0x5be	; 0x5be <getButtonPress>
    4a40:	81 30       	cpi	r24, 0x01	; 1
    4a42:	19 f5       	brne	.+70     	; 0x4a8a <controllerTask+0x68>
			if (State == StopLeibniz)
    4a44:	80 91 10 31 	lds	r24, 0x3110	; 0x803110 <State>
    4a48:	88 23       	and	r24, r24
    4a4a:	71 f4       	brne	.+28     	; 0x4a68 <controllerTask+0x46>
			{
				State = RunLeibniz;
    4a4c:	82 e0       	ldi	r24, 0x02	; 2
    4a4e:	80 93 10 31 	sts	0x3110, r24	; 0x803110 <State>
				xEventGroupSetBits(ProgState, TimerRunBit);
    4a52:	80 91 3e 31 	lds	r24, 0x313E	; 0x80313e <ProgState>
    4a56:	90 91 3f 31 	lds	r25, 0x313F	; 0x80313f <ProgState+0x1>
    4a5a:	48 e0       	ldi	r20, 0x08	; 8
    4a5c:	50 e0       	ldi	r21, 0x00	; 0
    4a5e:	60 e0       	ldi	r22, 0x00	; 0
    4a60:	70 e0       	ldi	r23, 0x00	; 0
    4a62:	0e 94 06 06 	call	0xc0c	; 0xc0c <xEventGroupSetBits>
    4a66:	11 c0       	rjmp	.+34     	; 0x4a8a <controllerTask+0x68>
			}
			else if (State == StopVieta)
    4a68:	80 91 10 31 	lds	r24, 0x3110	; 0x803110 <State>
    4a6c:	81 30       	cpi	r24, 0x01	; 1
    4a6e:	69 f4       	brne	.+26     	; 0x4a8a <controllerTask+0x68>
			{
				State = RunVieta;
    4a70:	83 e0       	ldi	r24, 0x03	; 3
    4a72:	80 93 10 31 	sts	0x3110, r24	; 0x803110 <State>
				xEventGroupSetBits(ProgState, TimerRunBit);
    4a76:	80 91 3e 31 	lds	r24, 0x313E	; 0x80313e <ProgState>
    4a7a:	90 91 3f 31 	lds	r25, 0x313F	; 0x80313f <ProgState+0x1>
    4a7e:	48 e0       	ldi	r20, 0x08	; 8
    4a80:	50 e0       	ldi	r21, 0x00	; 0
    4a82:	60 e0       	ldi	r22, 0x00	; 0
    4a84:	70 e0       	ldi	r23, 0x00	; 0
    4a86:	0e 94 06 06 	call	0xc0c	; 0xc0c <xEventGroupSetBits>
			}
		}
		if(getButtonPress(BUTTON2) == SHORT_PRESSED) {
    4a8a:	81 e0       	ldi	r24, 0x01	; 1
    4a8c:	0e 94 df 02 	call	0x5be	; 0x5be <getButtonPress>
    4a90:	81 30       	cpi	r24, 0x01	; 1
    4a92:	11 f5       	brne	.+68     	; 0x4ad8 <controllerTask+0xb6>
			if (State == RunLeibniz)
    4a94:	80 91 10 31 	lds	r24, 0x3110	; 0x803110 <State>
    4a98:	82 30       	cpi	r24, 0x02	; 2
    4a9a:	69 f4       	brne	.+26     	; 0x4ab6 <controllerTask+0x94>
			{
				State = StopLeibniz;
    4a9c:	10 92 10 31 	sts	0x3110, r1	; 0x803110 <State>
				xEventGroupClearBits(ProgState, TimerRunBit);
    4aa0:	80 91 3e 31 	lds	r24, 0x313E	; 0x80313e <ProgState>
    4aa4:	90 91 3f 31 	lds	r25, 0x313F	; 0x80313f <ProgState+0x1>
    4aa8:	48 e0       	ldi	r20, 0x08	; 8
    4aaa:	50 e0       	ldi	r21, 0x00	; 0
    4aac:	60 e0       	ldi	r22, 0x00	; 0
    4aae:	70 e0       	ldi	r23, 0x00	; 0
    4ab0:	0e 94 bb 05 	call	0xb76	; 0xb76 <xEventGroupClearBits>
    4ab4:	11 c0       	rjmp	.+34     	; 0x4ad8 <controllerTask+0xb6>
			}
			else if (State == RunVieta)
    4ab6:	80 91 10 31 	lds	r24, 0x3110	; 0x803110 <State>
    4aba:	83 30       	cpi	r24, 0x03	; 3
    4abc:	69 f4       	brne	.+26     	; 0x4ad8 <controllerTask+0xb6>
			{
				State = StopVieta;	
    4abe:	81 e0       	ldi	r24, 0x01	; 1
    4ac0:	80 93 10 31 	sts	0x3110, r24	; 0x803110 <State>
				xEventGroupClearBits(ProgState, TimerRunBit);
    4ac4:	80 91 3e 31 	lds	r24, 0x313E	; 0x80313e <ProgState>
    4ac8:	90 91 3f 31 	lds	r25, 0x313F	; 0x80313f <ProgState+0x1>
    4acc:	48 e0       	ldi	r20, 0x08	; 8
    4ace:	50 e0       	ldi	r21, 0x00	; 0
    4ad0:	60 e0       	ldi	r22, 0x00	; 0
    4ad2:	70 e0       	ldi	r23, 0x00	; 0
    4ad4:	0e 94 bb 05 	call	0xb76	; 0xb76 <xEventGroupClearBits>
			}
		}
		if(getButtonPress(BUTTON3) == SHORT_PRESSED) {
    4ad8:	82 e0       	ldi	r24, 0x02	; 2
    4ada:	0e 94 df 02 	call	0x5be	; 0x5be <getButtonPress>
    4ade:	81 30       	cpi	r24, 0x01	; 1
    4ae0:	c1 f4       	brne	.+48     	; 0x4b12 <controllerTask+0xf0>
			xEventGroupSetBits(ProgState, ResetBit);
    4ae2:	80 91 3e 31 	lds	r24, 0x313E	; 0x80313e <ProgState>
    4ae6:	90 91 3f 31 	lds	r25, 0x313F	; 0x80313f <ProgState+0x1>
    4aea:	41 e0       	ldi	r20, 0x01	; 1
    4aec:	50 e0       	ldi	r21, 0x00	; 0
    4aee:	60 e0       	ldi	r22, 0x00	; 0
    4af0:	70 e0       	ldi	r23, 0x00	; 0
    4af2:	0e 94 06 06 	call	0xc0c	; 0xc0c <xEventGroupSetBits>
			if (State == RunLeibniz)
    4af6:	80 91 10 31 	lds	r24, 0x3110	; 0x803110 <State>
    4afa:	82 30       	cpi	r24, 0x02	; 2
    4afc:	19 f4       	brne	.+6      	; 0x4b04 <controllerTask+0xe2>
			{
				State = StopLeibniz;
    4afe:	10 92 10 31 	sts	0x3110, r1	; 0x803110 <State>
    4b02:	07 c0       	rjmp	.+14     	; 0x4b12 <controllerTask+0xf0>
			}
			else if (State == RunVieta)
    4b04:	80 91 10 31 	lds	r24, 0x3110	; 0x803110 <State>
    4b08:	83 30       	cpi	r24, 0x03	; 3
    4b0a:	19 f4       	brne	.+6      	; 0x4b12 <controllerTask+0xf0>
			{
				State = StopVieta;	
    4b0c:	81 e0       	ldi	r24, 0x01	; 1
    4b0e:	80 93 10 31 	sts	0x3110, r24	; 0x803110 <State>
			}
		}
		if(getButtonPress(BUTTON4) == SHORT_PRESSED) {
    4b12:	83 e0       	ldi	r24, 0x03	; 3
    4b14:	0e 94 df 02 	call	0x5be	; 0x5be <getButtonPress>
    4b18:	81 30       	cpi	r24, 0x01	; 1
    4b1a:	f1 f4       	brne	.+60     	; 0x4b58 <controllerTask+0x136>
			if(State == StopLeibniz)
    4b1c:	80 91 10 31 	lds	r24, 0x3110	; 0x803110 <State>
    4b20:	88 23       	and	r24, r24
    4b22:	21 f4       	brne	.+8      	; 0x4b2c <controllerTask+0x10a>
			{
				State = StopVieta;
    4b24:	81 e0       	ldi	r24, 0x01	; 1
    4b26:	80 93 10 31 	sts	0x3110, r24	; 0x803110 <State>
    4b2a:	16 c0       	rjmp	.+44     	; 0x4b58 <controllerTask+0x136>
			}
			else if (State == StopVieta)
    4b2c:	80 91 10 31 	lds	r24, 0x3110	; 0x803110 <State>
    4b30:	81 30       	cpi	r24, 0x01	; 1
    4b32:	19 f4       	brne	.+6      	; 0x4b3a <controllerTask+0x118>
			{
				State = StopLeibniz;
    4b34:	10 92 10 31 	sts	0x3110, r1	; 0x803110 <State>
    4b38:	0f c0       	rjmp	.+30     	; 0x4b58 <controllerTask+0x136>
			}
			else if(State == RunLeibniz)
    4b3a:	80 91 10 31 	lds	r24, 0x3110	; 0x803110 <State>
    4b3e:	82 30       	cpi	r24, 0x02	; 2
    4b40:	21 f4       	brne	.+8      	; 0x4b4a <controllerTask+0x128>
			{
				State = RunVieta;
    4b42:	83 e0       	ldi	r24, 0x03	; 3
    4b44:	80 93 10 31 	sts	0x3110, r24	; 0x803110 <State>
    4b48:	07 c0       	rjmp	.+14     	; 0x4b58 <controllerTask+0x136>
			}
			else if (State == RunVieta)
    4b4a:	80 91 10 31 	lds	r24, 0x3110	; 0x803110 <State>
    4b4e:	83 30       	cpi	r24, 0x03	; 3
    4b50:	19 f4       	brne	.+6      	; 0x4b58 <controllerTask+0x136>
			{
				State = RunLeibniz;
    4b52:	82 e0       	ldi	r24, 0x02	; 2
    4b54:	80 93 10 31 	sts	0x3110, r24	; 0x803110 <State>
			}	
		}
		vTaskDelay(10/portTICK_RATE_MS);
    4b58:	6a e0       	ldi	r22, 0x0A	; 10
    4b5a:	70 e0       	ldi	r23, 0x00	; 0
    4b5c:	80 e0       	ldi	r24, 0x00	; 0
    4b5e:	90 e0       	ldi	r25, 0x00	; 0
    4b60:	0e 94 78 14 	call	0x28f0	; 0x28f0 <vTaskDelay>
	}
    4b64:	68 cf       	rjmp	.-304    	; 0x4a36 <controllerTask+0x14>

00004b66 <__vector_108>:
	 command(0x02);
 }
 void _displayClear() {
	 command(0x01);
	 delayUS(2000);
 }
    4b66:	1f 92       	push	r1
    4b68:	0f 92       	push	r0
    4b6a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7de03f>
    4b6e:	0f 92       	push	r0
    4b70:	11 24       	eor	r1, r1
    4b72:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
    4b76:	0f 92       	push	r0
    4b78:	2f 93       	push	r18
    4b7a:	3f 93       	push	r19
    4b7c:	4f 93       	push	r20
    4b7e:	5f 93       	push	r21
    4b80:	6f 93       	push	r22
    4b82:	7f 93       	push	r23
    4b84:	8f 93       	push	r24
    4b86:	9f 93       	push	r25
    4b88:	af 93       	push	r26
    4b8a:	bf 93       	push	r27
    4b8c:	ef 93       	push	r30
    4b8e:	ff 93       	push	r31
    4b90:	cf 93       	push	r28
    4b92:	df 93       	push	r29
    4b94:	1f 92       	push	r1
    4b96:	cd b7       	in	r28, 0x3d	; 61
    4b98:	de b7       	in	r29, 0x3e	; 62
    4b9a:	19 82       	std	Y+1, r1	; 0x01
    4b9c:	80 91 42 31 	lds	r24, 0x3142	; 0x803142 <egDisplayTiming>
    4ba0:	90 91 43 31 	lds	r25, 0x3143	; 0x803143 <egDisplayTiming+0x1>
    4ba4:	9e 01       	movw	r18, r28
    4ba6:	2f 5f       	subi	r18, 0xFF	; 255
    4ba8:	3f 4f       	sbci	r19, 0xFF	; 255
    4baa:	41 e0       	ldi	r20, 0x01	; 1
    4bac:	50 e0       	ldi	r21, 0x00	; 0
    4bae:	60 e0       	ldi	r22, 0x00	; 0
    4bb0:	70 e0       	ldi	r23, 0x00	; 0
    4bb2:	0e 94 73 07 	call	0xee6	; 0xee6 <xEventGroupSetBitsFromISR>
    4bb6:	60 e0       	ldi	r22, 0x00	; 0
    4bb8:	80 e0       	ldi	r24, 0x00	; 0
    4bba:	9b e0       	ldi	r25, 0x0B	; 11
    4bbc:	0e 94 c2 03 	call	0x784	; 0x784 <TC0_ConfigClockSource>
    4bc0:	80 e0       	ldi	r24, 0x00	; 0
    4bc2:	9b e0       	ldi	r25, 0x0B	; 11
    4bc4:	fc 01       	movw	r30, r24
    4bc6:	16 82       	std	Z+6, r1	; 0x06
    4bc8:	00 00       	nop
    4bca:	0f 90       	pop	r0
    4bcc:	df 91       	pop	r29
    4bce:	cf 91       	pop	r28
    4bd0:	ff 91       	pop	r31
    4bd2:	ef 91       	pop	r30
    4bd4:	bf 91       	pop	r27
    4bd6:	af 91       	pop	r26
    4bd8:	9f 91       	pop	r25
    4bda:	8f 91       	pop	r24
    4bdc:	7f 91       	pop	r23
    4bde:	6f 91       	pop	r22
    4be0:	5f 91       	pop	r21
    4be2:	4f 91       	pop	r20
    4be4:	3f 91       	pop	r19
    4be6:	2f 91       	pop	r18
    4be8:	0f 90       	pop	r0
    4bea:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
    4bee:	0f 90       	pop	r0
    4bf0:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7de03f>
    4bf4:	0f 90       	pop	r0
    4bf6:	1f 90       	pop	r1
    4bf8:	18 95       	reti

00004bfa <delayUS>:
    4bfa:	cf 92       	push	r12
    4bfc:	df 92       	push	r13
    4bfe:	ef 92       	push	r14
    4c00:	ff 92       	push	r15
    4c02:	0f 93       	push	r16
    4c04:	cf 93       	push	r28
    4c06:	df 93       	push	r29
    4c08:	00 d0       	rcall	.+0      	; 0x4c0a <delayUS+0x10>
    4c0a:	1f 92       	push	r1
    4c0c:	cd b7       	in	r28, 0x3d	; 61
    4c0e:	de b7       	in	r29, 0x3e	; 62
    4c10:	69 83       	std	Y+1, r22	; 0x01
    4c12:	7a 83       	std	Y+2, r23	; 0x02
    4c14:	8b 83       	std	Y+3, r24	; 0x03
    4c16:	9c 83       	std	Y+4, r25	; 0x04
    4c18:	89 81       	ldd	r24, Y+1	; 0x01
    4c1a:	9a 81       	ldd	r25, Y+2	; 0x02
    4c1c:	ab 81       	ldd	r26, Y+3	; 0x03
    4c1e:	bc 81       	ldd	r27, Y+4	; 0x04
    4c20:	02 97       	sbiw	r24, 0x02	; 2
    4c22:	a1 05       	cpc	r26, r1
    4c24:	b1 05       	cpc	r27, r1
    4c26:	40 f4       	brcc	.+16     	; 0x4c38 <delayUS+0x3e>
    4c28:	82 e0       	ldi	r24, 0x02	; 2
    4c2a:	90 e0       	ldi	r25, 0x00	; 0
    4c2c:	a0 e0       	ldi	r26, 0x00	; 0
    4c2e:	b0 e0       	ldi	r27, 0x00	; 0
    4c30:	89 83       	std	Y+1, r24	; 0x01
    4c32:	9a 83       	std	Y+2, r25	; 0x02
    4c34:	ab 83       	std	Y+3, r26	; 0x03
    4c36:	bc 83       	std	Y+4, r27	; 0x04
    4c38:	80 e0       	ldi	r24, 0x00	; 0
    4c3a:	9b e0       	ldi	r25, 0x0B	; 11
    4c3c:	21 e0       	ldi	r18, 0x01	; 1
    4c3e:	fc 01       	movw	r30, r24
    4c40:	26 83       	std	Z+6, r18	; 0x06
    4c42:	80 e0       	ldi	r24, 0x00	; 0
    4c44:	9b e0       	ldi	r25, 0x0B	; 11
    4c46:	fc 01       	movw	r30, r24
    4c48:	10 a2       	std	Z+32, r1	; 0x20
    4c4a:	11 a2       	std	Z+33, r1	; 0x21
    4c4c:	60 e0       	ldi	r22, 0x00	; 0
    4c4e:	80 e0       	ldi	r24, 0x00	; 0
    4c50:	9b e0       	ldi	r25, 0x0B	; 11
    4c52:	0e 94 de 03 	call	0x7bc	; 0x7bc <TC0_ConfigWGM>
    4c56:	89 81       	ldd	r24, Y+1	; 0x01
    4c58:	9a 81       	ldd	r25, Y+2	; 0x02
    4c5a:	ab 81       	ldd	r26, Y+3	; 0x03
    4c5c:	bc 81       	ldd	r27, Y+4	; 0x04
    4c5e:	8e 3f       	cpi	r24, 0xFE	; 254
    4c60:	9f 4f       	sbci	r25, 0xFF	; 255
    4c62:	a1 05       	cpc	r26, r1
    4c64:	b1 05       	cpc	r27, r1
    4c66:	98 f4       	brcc	.+38     	; 0x4c8e <delayUS+0x94>
    4c68:	20 e0       	ldi	r18, 0x00	; 0
    4c6a:	3b e0       	ldi	r19, 0x0B	; 11
    4c6c:	89 81       	ldd	r24, Y+1	; 0x01
    4c6e:	9a 81       	ldd	r25, Y+2	; 0x02
    4c70:	ab 81       	ldd	r26, Y+3	; 0x03
    4c72:	bc 81       	ldd	r27, Y+4	; 0x04
    4c74:	b6 95       	lsr	r27
    4c76:	a7 95       	ror	r26
    4c78:	97 95       	ror	r25
    4c7a:	87 95       	ror	r24
    4c7c:	f9 01       	movw	r30, r18
    4c7e:	86 a3       	std	Z+38, r24	; 0x26
    4c80:	97 a3       	std	Z+39, r25	; 0x27
    4c82:	65 e0       	ldi	r22, 0x05	; 5
    4c84:	80 e0       	ldi	r24, 0x00	; 0
    4c86:	9b e0       	ldi	r25, 0x0B	; 11
    4c88:	0e 94 c2 03 	call	0x784	; 0x784 <TC0_ConfigClockSource>
    4c8c:	1f c0       	rjmp	.+62     	; 0x4ccc <delayUS+0xd2>
    4c8e:	89 81       	ldd	r24, Y+1	; 0x01
    4c90:	9a 81       	ldd	r25, Y+2	; 0x02
    4c92:	ab 81       	ldd	r26, Y+3	; 0x03
    4c94:	bc 81       	ldd	r27, Y+4	; 0x04
    4c96:	80 34       	cpi	r24, 0x40	; 64
    4c98:	92 44       	sbci	r25, 0x42	; 66
    4c9a:	af 40       	sbci	r26, 0x0F	; 15
    4c9c:	b1 05       	cpc	r27, r1
    4c9e:	b0 f4       	brcc	.+44     	; 0x4ccc <delayUS+0xd2>
    4ca0:	20 e0       	ldi	r18, 0x00	; 0
    4ca2:	3b e0       	ldi	r19, 0x0B	; 11
    4ca4:	89 81       	ldd	r24, Y+1	; 0x01
    4ca6:	9a 81       	ldd	r25, Y+2	; 0x02
    4ca8:	ab 81       	ldd	r26, Y+3	; 0x03
    4caa:	bc 81       	ldd	r27, Y+4	; 0x04
    4cac:	68 94       	set
    4cae:	14 f8       	bld	r1, 4
    4cb0:	b6 95       	lsr	r27
    4cb2:	a7 95       	ror	r26
    4cb4:	97 95       	ror	r25
    4cb6:	87 95       	ror	r24
    4cb8:	16 94       	lsr	r1
    4cba:	d1 f7       	brne	.-12     	; 0x4cb0 <delayUS+0xb6>
    4cbc:	f9 01       	movw	r30, r18
    4cbe:	86 a3       	std	Z+38, r24	; 0x26
    4cc0:	97 a3       	std	Z+39, r25	; 0x27
    4cc2:	67 e0       	ldi	r22, 0x07	; 7
    4cc4:	80 e0       	ldi	r24, 0x00	; 0
    4cc6:	9b e0       	ldi	r25, 0x0B	; 11
    4cc8:	0e 94 c2 03 	call	0x784	; 0x784 <TC0_ConfigClockSource>
    4ccc:	80 91 42 31 	lds	r24, 0x3142	; 0x803142 <egDisplayTiming>
    4cd0:	90 91 43 31 	lds	r25, 0x3143	; 0x803143 <egDisplayTiming+0x1>
    4cd4:	0f 2e       	mov	r0, r31
    4cd6:	f4 ef       	ldi	r31, 0xF4	; 244
    4cd8:	cf 2e       	mov	r12, r31
    4cda:	dd 24       	eor	r13, r13
    4cdc:	d3 94       	inc	r13
    4cde:	e1 2c       	mov	r14, r1
    4ce0:	f1 2c       	mov	r15, r1
    4ce2:	f0 2d       	mov	r31, r0
    4ce4:	00 e0       	ldi	r16, 0x00	; 0
    4ce6:	21 e0       	ldi	r18, 0x01	; 1
    4ce8:	41 e0       	ldi	r20, 0x01	; 1
    4cea:	50 e0       	ldi	r21, 0x00	; 0
    4cec:	60 e0       	ldi	r22, 0x00	; 0
    4cee:	70 e0       	ldi	r23, 0x00	; 0
    4cf0:	0e 94 83 04 	call	0x906	; 0x906 <xEventGroupWaitBits>
    4cf4:	00 00       	nop
    4cf6:	24 96       	adiw	r28, 0x04	; 4
    4cf8:	cd bf       	out	0x3d, r28	; 61
    4cfa:	de bf       	out	0x3e, r29	; 62
    4cfc:	df 91       	pop	r29
    4cfe:	cf 91       	pop	r28
    4d00:	0f 91       	pop	r16
    4d02:	ff 90       	pop	r15
    4d04:	ef 90       	pop	r14
    4d06:	df 90       	pop	r13
    4d08:	cf 90       	pop	r12
    4d0a:	08 95       	ret

00004d0c <setPort>:
    4d0c:	cf 93       	push	r28
    4d0e:	df 93       	push	r29
    4d10:	1f 92       	push	r1
    4d12:	cd b7       	in	r28, 0x3d	; 61
    4d14:	de b7       	in	r29, 0x3e	; 62
    4d16:	89 83       	std	Y+1, r24	; 0x01
    4d18:	89 81       	ldd	r24, Y+1	; 0x01
    4d1a:	8f 70       	andi	r24, 0x0F	; 15
    4d1c:	89 83       	std	Y+1, r24	; 0x01
    4d1e:	89 81       	ldd	r24, Y+1	; 0x01
    4d20:	82 95       	swap	r24
    4d22:	80 7f       	andi	r24, 0xF0	; 240
    4d24:	89 83       	std	Y+1, r24	; 0x01
    4d26:	80 e0       	ldi	r24, 0x00	; 0
    4d28:	96 e0       	ldi	r25, 0x06	; 6
    4d2a:	20 e0       	ldi	r18, 0x00	; 0
    4d2c:	36 e0       	ldi	r19, 0x06	; 6
    4d2e:	f9 01       	movw	r30, r18
    4d30:	34 81       	ldd	r19, Z+4	; 0x04
    4d32:	29 81       	ldd	r18, Y+1	; 0x01
    4d34:	2f 60       	ori	r18, 0x0F	; 15
    4d36:	23 23       	and	r18, r19
    4d38:	fc 01       	movw	r30, r24
    4d3a:	24 83       	std	Z+4, r18	; 0x04
    4d3c:	80 e0       	ldi	r24, 0x00	; 0
    4d3e:	96 e0       	ldi	r25, 0x06	; 6
    4d40:	20 e0       	ldi	r18, 0x00	; 0
    4d42:	36 e0       	ldi	r19, 0x06	; 6
    4d44:	f9 01       	movw	r30, r18
    4d46:	34 81       	ldd	r19, Z+4	; 0x04
    4d48:	29 81       	ldd	r18, Y+1	; 0x01
    4d4a:	23 2b       	or	r18, r19
    4d4c:	fc 01       	movw	r30, r24
    4d4e:	24 83       	std	Z+4, r18	; 0x04
    4d50:	00 00       	nop
    4d52:	0f 90       	pop	r0
    4d54:	df 91       	pop	r29
    4d56:	cf 91       	pop	r28
    4d58:	08 95       	ret

00004d5a <setRS>:
    4d5a:	cf 93       	push	r28
    4d5c:	df 93       	push	r29
    4d5e:	1f 92       	push	r1
    4d60:	cd b7       	in	r28, 0x3d	; 61
    4d62:	de b7       	in	r29, 0x3e	; 62
    4d64:	89 83       	std	Y+1, r24	; 0x01
    4d66:	89 81       	ldd	r24, Y+1	; 0x01
    4d68:	88 23       	and	r24, r24
    4d6a:	31 f0       	breq	.+12     	; 0x4d78 <setRS+0x1e>
    4d6c:	80 e6       	ldi	r24, 0x60	; 96
    4d6e:	96 e0       	ldi	r25, 0x06	; 6
    4d70:	21 e0       	ldi	r18, 0x01	; 1
    4d72:	fc 01       	movw	r30, r24
    4d74:	25 83       	std	Z+5, r18	; 0x05
    4d76:	05 c0       	rjmp	.+10     	; 0x4d82 <setRS+0x28>
    4d78:	80 e6       	ldi	r24, 0x60	; 96
    4d7a:	96 e0       	ldi	r25, 0x06	; 6
    4d7c:	21 e0       	ldi	r18, 0x01	; 1
    4d7e:	fc 01       	movw	r30, r24
    4d80:	26 83       	std	Z+6, r18	; 0x06
    4d82:	00 00       	nop
    4d84:	0f 90       	pop	r0
    4d86:	df 91       	pop	r29
    4d88:	cf 91       	pop	r28
    4d8a:	08 95       	ret

00004d8c <setRW>:
    4d8c:	cf 93       	push	r28
    4d8e:	df 93       	push	r29
    4d90:	1f 92       	push	r1
    4d92:	cd b7       	in	r28, 0x3d	; 61
    4d94:	de b7       	in	r29, 0x3e	; 62
    4d96:	89 83       	std	Y+1, r24	; 0x01
    4d98:	89 81       	ldd	r24, Y+1	; 0x01
    4d9a:	88 23       	and	r24, r24
    4d9c:	31 f0       	breq	.+12     	; 0x4daa <setRW+0x1e>
    4d9e:	80 e6       	ldi	r24, 0x60	; 96
    4da0:	96 e0       	ldi	r25, 0x06	; 6
    4da2:	22 e0       	ldi	r18, 0x02	; 2
    4da4:	fc 01       	movw	r30, r24
    4da6:	25 83       	std	Z+5, r18	; 0x05
    4da8:	05 c0       	rjmp	.+10     	; 0x4db4 <setRW+0x28>
    4daa:	80 e6       	ldi	r24, 0x60	; 96
    4dac:	96 e0       	ldi	r25, 0x06	; 6
    4dae:	22 e0       	ldi	r18, 0x02	; 2
    4db0:	fc 01       	movw	r30, r24
    4db2:	26 83       	std	Z+6, r18	; 0x06
    4db4:	00 00       	nop
    4db6:	0f 90       	pop	r0
    4db8:	df 91       	pop	r29
    4dba:	cf 91       	pop	r28
    4dbc:	08 95       	ret

00004dbe <setE>:
    4dbe:	cf 93       	push	r28
    4dc0:	df 93       	push	r29
    4dc2:	1f 92       	push	r1
    4dc4:	cd b7       	in	r28, 0x3d	; 61
    4dc6:	de b7       	in	r29, 0x3e	; 62
    4dc8:	89 83       	std	Y+1, r24	; 0x01
    4dca:	89 81       	ldd	r24, Y+1	; 0x01
    4dcc:	88 23       	and	r24, r24
    4dce:	31 f0       	breq	.+12     	; 0x4ddc <setE+0x1e>
    4dd0:	80 e6       	ldi	r24, 0x60	; 96
    4dd2:	96 e0       	ldi	r25, 0x06	; 6
    4dd4:	24 e0       	ldi	r18, 0x04	; 4
    4dd6:	fc 01       	movw	r30, r24
    4dd8:	25 83       	std	Z+5, r18	; 0x05
    4dda:	05 c0       	rjmp	.+10     	; 0x4de6 <setE+0x28>
    4ddc:	80 e6       	ldi	r24, 0x60	; 96
    4dde:	96 e0       	ldi	r25, 0x06	; 6
    4de0:	24 e0       	ldi	r18, 0x04	; 4
    4de2:	fc 01       	movw	r30, r24
    4de4:	26 83       	std	Z+6, r18	; 0x06
    4de6:	00 00       	nop
    4de8:	0f 90       	pop	r0
    4dea:	df 91       	pop	r29
    4dec:	cf 91       	pop	r28
    4dee:	08 95       	ret

00004df0 <Nybble>:
    4df0:	cf 93       	push	r28
    4df2:	df 93       	push	r29
    4df4:	cd b7       	in	r28, 0x3d	; 61
    4df6:	de b7       	in	r29, 0x3e	; 62
    4df8:	81 e0       	ldi	r24, 0x01	; 1
    4dfa:	0e 94 df 26 	call	0x4dbe	; 0x4dbe <setE>
    4dfe:	61 e0       	ldi	r22, 0x01	; 1
    4e00:	70 e0       	ldi	r23, 0x00	; 0
    4e02:	80 e0       	ldi	r24, 0x00	; 0
    4e04:	90 e0       	ldi	r25, 0x00	; 0
    4e06:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <delayUS>
    4e0a:	80 e0       	ldi	r24, 0x00	; 0
    4e0c:	0e 94 df 26 	call	0x4dbe	; 0x4dbe <setE>
    4e10:	00 00       	nop
    4e12:	df 91       	pop	r29
    4e14:	cf 91       	pop	r28
    4e16:	08 95       	ret

00004e18 <command>:
    4e18:	cf 93       	push	r28
    4e1a:	df 93       	push	r29
    4e1c:	1f 92       	push	r1
    4e1e:	cd b7       	in	r28, 0x3d	; 61
    4e20:	de b7       	in	r29, 0x3e	; 62
    4e22:	89 83       	std	Y+1, r24	; 0x01
    4e24:	89 81       	ldd	r24, Y+1	; 0x01
    4e26:	82 95       	swap	r24
    4e28:	8f 70       	andi	r24, 0x0F	; 15
    4e2a:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <setPort>
    4e2e:	80 e0       	ldi	r24, 0x00	; 0
    4e30:	0e 94 ad 26 	call	0x4d5a	; 0x4d5a <setRS>
    4e34:	80 e0       	ldi	r24, 0x00	; 0
    4e36:	0e 94 c6 26 	call	0x4d8c	; 0x4d8c <setRW>
    4e3a:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <Nybble>
    4e3e:	89 81       	ldd	r24, Y+1	; 0x01
    4e40:	8f 70       	andi	r24, 0x0F	; 15
    4e42:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <setPort>
    4e46:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <Nybble>
    4e4a:	00 00       	nop
    4e4c:	0f 90       	pop	r0
    4e4e:	df 91       	pop	r29
    4e50:	cf 91       	pop	r28
    4e52:	08 95       	ret

00004e54 <write>:
    4e54:	cf 93       	push	r28
    4e56:	df 93       	push	r29
    4e58:	1f 92       	push	r1
    4e5a:	cd b7       	in	r28, 0x3d	; 61
    4e5c:	de b7       	in	r29, 0x3e	; 62
    4e5e:	89 83       	std	Y+1, r24	; 0x01
    4e60:	89 81       	ldd	r24, Y+1	; 0x01
    4e62:	82 95       	swap	r24
    4e64:	8f 70       	andi	r24, 0x0F	; 15
    4e66:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <setPort>
    4e6a:	81 e0       	ldi	r24, 0x01	; 1
    4e6c:	0e 94 ad 26 	call	0x4d5a	; 0x4d5a <setRS>
    4e70:	80 e0       	ldi	r24, 0x00	; 0
    4e72:	0e 94 c6 26 	call	0x4d8c	; 0x4d8c <setRW>
    4e76:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <Nybble>
    4e7a:	89 81       	ldd	r24, Y+1	; 0x01
    4e7c:	8f 70       	andi	r24, 0x0F	; 15
    4e7e:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <setPort>
    4e82:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <Nybble>
    4e86:	00 00       	nop
    4e88:	0f 90       	pop	r0
    4e8a:	df 91       	pop	r29
    4e8c:	cf 91       	pop	r28
    4e8e:	08 95       	ret

00004e90 <vInitDisplay>:
 
 void vInitDisplay() {
    4e90:	ef 92       	push	r14
    4e92:	ff 92       	push	r15
    4e94:	0f 93       	push	r16
    4e96:	cf 93       	push	r28
    4e98:	df 93       	push	r29
    4e9a:	cd b7       	in	r28, 0x3d	; 61
    4e9c:	de b7       	in	r29, 0x3e	; 62
	PORTA.DIRSET = PIN4_bm;
    4e9e:	80 e0       	ldi	r24, 0x00	; 0
    4ea0:	96 e0       	ldi	r25, 0x06	; 6
    4ea2:	20 e1       	ldi	r18, 0x10	; 16
    4ea4:	fc 01       	movw	r30, r24
    4ea6:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN5_bm;
    4ea8:	80 e0       	ldi	r24, 0x00	; 0
    4eaa:	96 e0       	ldi	r25, 0x06	; 6
    4eac:	20 e2       	ldi	r18, 0x20	; 32
    4eae:	fc 01       	movw	r30, r24
    4eb0:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN6_bm;
    4eb2:	80 e0       	ldi	r24, 0x00	; 0
    4eb4:	96 e0       	ldi	r25, 0x06	; 6
    4eb6:	20 e4       	ldi	r18, 0x40	; 64
    4eb8:	fc 01       	movw	r30, r24
    4eba:	21 83       	std	Z+1, r18	; 0x01
	PORTA.DIRSET = PIN7_bm;
    4ebc:	80 e0       	ldi	r24, 0x00	; 0
    4ebe:	96 e0       	ldi	r25, 0x06	; 6
    4ec0:	20 e8       	ldi	r18, 0x80	; 128
    4ec2:	fc 01       	movw	r30, r24
    4ec4:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN0_bm;
    4ec6:	80 e6       	ldi	r24, 0x60	; 96
    4ec8:	96 e0       	ldi	r25, 0x06	; 6
    4eca:	21 e0       	ldi	r18, 0x01	; 1
    4ecc:	fc 01       	movw	r30, r24
    4ece:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN1_bm;
    4ed0:	80 e6       	ldi	r24, 0x60	; 96
    4ed2:	96 e0       	ldi	r25, 0x06	; 6
    4ed4:	22 e0       	ldi	r18, 0x02	; 2
    4ed6:	fc 01       	movw	r30, r24
    4ed8:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRSET = PIN2_bm;
    4eda:	80 e6       	ldi	r24, 0x60	; 96
    4edc:	96 e0       	ldi	r25, 0x06	; 6
    4ede:	24 e0       	ldi	r18, 0x04	; 4
    4ee0:	fc 01       	movw	r30, r24
    4ee2:	21 83       	std	Z+1, r18	; 0x01
	PORTA.OUT &= 0x0F;
    4ee4:	80 e0       	ldi	r24, 0x00	; 0
    4ee6:	96 e0       	ldi	r25, 0x06	; 6
    4ee8:	20 e0       	ldi	r18, 0x00	; 0
    4eea:	36 e0       	ldi	r19, 0x06	; 6
    4eec:	f9 01       	movw	r30, r18
    4eee:	24 81       	ldd	r18, Z+4	; 0x04
    4ef0:	2f 70       	andi	r18, 0x0F	; 15
    4ef2:	fc 01       	movw	r30, r24
    4ef4:	24 83       	std	Z+4, r18	; 0x04
	PORTD.OUT &= 0xF8;
    4ef6:	80 e6       	ldi	r24, 0x60	; 96
    4ef8:	96 e0       	ldi	r25, 0x06	; 6
    4efa:	20 e6       	ldi	r18, 0x60	; 96
    4efc:	36 e0       	ldi	r19, 0x06	; 6
    4efe:	f9 01       	movw	r30, r18
    4f00:	24 81       	ldd	r18, Z+4	; 0x04
    4f02:	28 7f       	andi	r18, 0xF8	; 248
    4f04:	fc 01       	movw	r30, r24
    4f06:	24 83       	std	Z+4, r18	; 0x04

	if((displayLineQueue = xQueueCreate(DISPLAY_QUEUE_DEPTH, sizeof(displayLine_t))) == NULL)
    4f08:	40 e0       	ldi	r20, 0x00	; 0
    4f0a:	66 e1       	ldi	r22, 0x16	; 22
    4f0c:	88 e0       	ldi	r24, 0x08	; 8
    4f0e:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <xQueueGenericCreate>
    4f12:	80 93 40 31 	sts	0x3140, r24	; 0x803140 <displayLineQueue>
    4f16:	90 93 41 31 	sts	0x3141, r25	; 0x803141 <displayLineQueue+0x1>
	{
		//error(ERR_QUEUE_CREATE_HANDLE_NULL);
	}
	
	egDisplayTiming = xEventGroupCreate();
    4f1a:	0e 94 60 04 	call	0x8c0	; 0x8c0 <xEventGroupCreate>
    4f1e:	80 93 42 31 	sts	0x3142, r24	; 0x803142 <egDisplayTiming>
    4f22:	90 93 43 31 	sts	0x3143, r25	; 0x803143 <egDisplayTiming+0x1>
	

	xTaskCreate(vDisplayUpdateTask, (const char*) "dispUpdate", configMINIMAL_STACK_SIZE+150, NULL, 1, NULL);	
    4f26:	e1 2c       	mov	r14, r1
    4f28:	f1 2c       	mov	r15, r1
    4f2a:	01 e0       	ldi	r16, 0x01	; 1
    4f2c:	20 e0       	ldi	r18, 0x00	; 0
    4f2e:	30 e0       	ldi	r19, 0x00	; 0
    4f30:	4e e5       	ldi	r20, 0x5E	; 94
    4f32:	51 e0       	ldi	r21, 0x01	; 1
    4f34:	67 eb       	ldi	r22, 0xB7	; 183
    4f36:	70 e2       	ldi	r23, 0x20	; 32
    4f38:	86 e4       	ldi	r24, 0x46	; 70
    4f3a:	98 e2       	ldi	r25, 0x28	; 40
    4f3c:	0e 94 ed 11 	call	0x23da	; 0x23da <xTaskCreate>
 }
    4f40:	00 00       	nop
    4f42:	df 91       	pop	r29
    4f44:	cf 91       	pop	r28
    4f46:	0f 91       	pop	r16
    4f48:	ff 90       	pop	r15
    4f4a:	ef 90       	pop	r14
    4f4c:	08 95       	ret

00004f4e <_displaySetPos>:
 
 void _displaySetPos(int line, int pos) {
    4f4e:	cf 93       	push	r28
    4f50:	df 93       	push	r29
    4f52:	00 d0       	rcall	.+0      	; 0x4f54 <_displaySetPos+0x6>
    4f54:	1f 92       	push	r1
    4f56:	cd b7       	in	r28, 0x3d	; 61
    4f58:	de b7       	in	r29, 0x3e	; 62
    4f5a:	89 83       	std	Y+1, r24	; 0x01
    4f5c:	9a 83       	std	Y+2, r25	; 0x02
    4f5e:	6b 83       	std	Y+3, r22	; 0x03
    4f60:	7c 83       	std	Y+4, r23	; 0x04
	 switch(line) {
    4f62:	89 81       	ldd	r24, Y+1	; 0x01
    4f64:	9a 81       	ldd	r25, Y+2	; 0x02
    4f66:	81 30       	cpi	r24, 0x01	; 1
    4f68:	91 05       	cpc	r25, r1
    4f6a:	89 f0       	breq	.+34     	; 0x4f8e <_displaySetPos+0x40>
    4f6c:	82 30       	cpi	r24, 0x02	; 2
    4f6e:	91 05       	cpc	r25, r1
    4f70:	1c f4       	brge	.+6      	; 0x4f78 <_displaySetPos+0x2a>
    4f72:	89 2b       	or	r24, r25
    4f74:	39 f0       	breq	.+14     	; 0x4f84 <_displaySetPos+0x36>
    4f76:	1a c0       	rjmp	.+52     	; 0x4fac <_displaySetPos+0x5e>
    4f78:	82 30       	cpi	r24, 0x02	; 2
    4f7a:	91 05       	cpc	r25, r1
    4f7c:	69 f0       	breq	.+26     	; 0x4f98 <_displaySetPos+0x4a>
    4f7e:	03 97       	sbiw	r24, 0x03	; 3
    4f80:	81 f0       	breq	.+32     	; 0x4fa2 <_displaySetPos+0x54>
    4f82:	14 c0       	rjmp	.+40     	; 0x4fac <_displaySetPos+0x5e>
		 case 0:
		 command(0x80 + 0x00 + pos);
    4f84:	8b 81       	ldd	r24, Y+3	; 0x03
    4f86:	80 58       	subi	r24, 0x80	; 128
    4f88:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <command>
		 break;
    4f8c:	0f c0       	rjmp	.+30     	; 0x4fac <_displaySetPos+0x5e>
		 case 1:
		 command(0x80 + 0x40 + pos);
    4f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    4f90:	80 54       	subi	r24, 0x40	; 64
    4f92:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <command>
		 break;
    4f96:	0a c0       	rjmp	.+20     	; 0x4fac <_displaySetPos+0x5e>
		 case 2:
		 command(0x80 + 0x14 + pos);
    4f98:	8b 81       	ldd	r24, Y+3	; 0x03
    4f9a:	8c 56       	subi	r24, 0x6C	; 108
    4f9c:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <command>
		 break;
    4fa0:	05 c0       	rjmp	.+10     	; 0x4fac <_displaySetPos+0x5e>
		 case 3:
		 command(0x80 + 0x54 + pos);
    4fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    4fa4:	8c 52       	subi	r24, 0x2C	; 44
    4fa6:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <command>
		 break;
    4faa:	00 00       	nop
	 }
	 delayUS(39);
    4fac:	67 e2       	ldi	r22, 0x27	; 39
    4fae:	70 e0       	ldi	r23, 0x00	; 0
    4fb0:	80 e0       	ldi	r24, 0x00	; 0
    4fb2:	90 e0       	ldi	r25, 0x00	; 0
    4fb4:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <delayUS>
 }
    4fb8:	00 00       	nop
    4fba:	24 96       	adiw	r28, 0x04	; 4
    4fbc:	cd bf       	out	0x3d, r28	; 61
    4fbe:	de bf       	out	0x3e, r29	; 62
    4fc0:	df 91       	pop	r29
    4fc2:	cf 91       	pop	r28
    4fc4:	08 95       	ret

00004fc6 <_displayWriteChar>:

 void _displayWriteChar(char c) {
    4fc6:	cf 93       	push	r28
    4fc8:	df 93       	push	r29
    4fca:	1f 92       	push	r1
    4fcc:	cd b7       	in	r28, 0x3d	; 61
    4fce:	de b7       	in	r29, 0x3e	; 62
    4fd0:	89 83       	std	Y+1, r24	; 0x01
	 write(c);
    4fd2:	89 81       	ldd	r24, Y+1	; 0x01
    4fd4:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <write>
	 delayUS(43);
    4fd8:	6b e2       	ldi	r22, 0x2B	; 43
    4fda:	70 e0       	ldi	r23, 0x00	; 0
    4fdc:	80 e0       	ldi	r24, 0x00	; 0
    4fde:	90 e0       	ldi	r25, 0x00	; 0
    4fe0:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <delayUS>
 }
    4fe4:	00 00       	nop
    4fe6:	0f 90       	pop	r0
    4fe8:	df 91       	pop	r29
    4fea:	cf 91       	pop	r28
    4fec:	08 95       	ret

00004fee <_displayWriteString>:
 
 void _displayWriteString(char* s) {
    4fee:	cf 93       	push	r28
    4ff0:	df 93       	push	r29
    4ff2:	00 d0       	rcall	.+0      	; 0x4ff4 <_displayWriteString+0x6>
    4ff4:	1f 92       	push	r1
    4ff6:	cd b7       	in	r28, 0x3d	; 61
    4ff8:	de b7       	in	r29, 0x3e	; 62
    4ffa:	8b 83       	std	Y+3, r24	; 0x03
    4ffc:	9c 83       	std	Y+4, r25	; 0x04
	 for(int i = 0; i < 20; i++) {
    4ffe:	19 82       	std	Y+1, r1	; 0x01
    5000:	1a 82       	std	Y+2, r1	; 0x02
    5002:	19 c0       	rjmp	.+50     	; 0x5036 <_displayWriteString+0x48>
		 if(s[i] == '\0') {
    5004:	89 81       	ldd	r24, Y+1	; 0x01
    5006:	9a 81       	ldd	r25, Y+2	; 0x02
    5008:	2b 81       	ldd	r18, Y+3	; 0x03
    500a:	3c 81       	ldd	r19, Y+4	; 0x04
    500c:	82 0f       	add	r24, r18
    500e:	93 1f       	adc	r25, r19
    5010:	fc 01       	movw	r30, r24
    5012:	80 81       	ld	r24, Z
    5014:	88 23       	and	r24, r24
    5016:	a1 f0       	breq	.+40     	; 0x5040 <_displayWriteString+0x52>
			 break;
		 }
		 _displayWriteChar(s[i]);
    5018:	89 81       	ldd	r24, Y+1	; 0x01
    501a:	9a 81       	ldd	r25, Y+2	; 0x02
    501c:	2b 81       	ldd	r18, Y+3	; 0x03
    501e:	3c 81       	ldd	r19, Y+4	; 0x04
    5020:	82 0f       	add	r24, r18
    5022:	93 1f       	adc	r25, r19
    5024:	fc 01       	movw	r30, r24
    5026:	80 81       	ld	r24, Z
    5028:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <_displayWriteChar>
	 write(c);
	 delayUS(43);
 }
 
 void _displayWriteString(char* s) {
	 for(int i = 0; i < 20; i++) {
    502c:	89 81       	ldd	r24, Y+1	; 0x01
    502e:	9a 81       	ldd	r25, Y+2	; 0x02
    5030:	01 96       	adiw	r24, 0x01	; 1
    5032:	89 83       	std	Y+1, r24	; 0x01
    5034:	9a 83       	std	Y+2, r25	; 0x02
    5036:	89 81       	ldd	r24, Y+1	; 0x01
    5038:	9a 81       	ldd	r25, Y+2	; 0x02
    503a:	44 97       	sbiw	r24, 0x14	; 20
    503c:	1c f3       	brlt	.-58     	; 0x5004 <_displayWriteString+0x16>
		 if(s[i] == '\0') {
			 break;
		 }
		 _displayWriteChar(s[i]);
	 }
 }
    503e:	01 c0       	rjmp	.+2      	; 0x5042 <_displayWriteString+0x54>
 }
 
 void _displayWriteString(char* s) {
	 for(int i = 0; i < 20; i++) {
		 if(s[i] == '\0') {
			 break;
    5040:	00 00       	nop
		 }
		 _displayWriteChar(s[i]);
	 }
 }
    5042:	00 00       	nop
    5044:	24 96       	adiw	r28, 0x04	; 4
    5046:	cd bf       	out	0x3d, r28	; 61
    5048:	de bf       	out	0x3e, r29	; 62
    504a:	df 91       	pop	r29
    504c:	cf 91       	pop	r28
    504e:	08 95       	ret

00005050 <_displayWriteStringAtPos>:

 void _displayWriteStringAtPos(int line, int pos, char* s) {
    5050:	cf 93       	push	r28
    5052:	df 93       	push	r29
    5054:	00 d0       	rcall	.+0      	; 0x5056 <_displayWriteStringAtPos+0x6>
    5056:	00 d0       	rcall	.+0      	; 0x5058 <_displayWriteStringAtPos+0x8>
    5058:	cd b7       	in	r28, 0x3d	; 61
    505a:	de b7       	in	r29, 0x3e	; 62
    505c:	89 83       	std	Y+1, r24	; 0x01
    505e:	9a 83       	std	Y+2, r25	; 0x02
    5060:	6b 83       	std	Y+3, r22	; 0x03
    5062:	7c 83       	std	Y+4, r23	; 0x04
    5064:	4d 83       	std	Y+5, r20	; 0x05
    5066:	5e 83       	std	Y+6, r21	; 0x06
	 _displaySetPos(line, pos);
    5068:	2b 81       	ldd	r18, Y+3	; 0x03
    506a:	3c 81       	ldd	r19, Y+4	; 0x04
    506c:	89 81       	ldd	r24, Y+1	; 0x01
    506e:	9a 81       	ldd	r25, Y+2	; 0x02
    5070:	b9 01       	movw	r22, r18
    5072:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <_displaySetPos>
	 _displayWriteString(s);
    5076:	8d 81       	ldd	r24, Y+5	; 0x05
    5078:	9e 81       	ldd	r25, Y+6	; 0x06
    507a:	0e 94 f7 27 	call	0x4fee	; 0x4fee <_displayWriteString>
 }
    507e:	00 00       	nop
    5080:	26 96       	adiw	r28, 0x06	; 6
    5082:	cd bf       	out	0x3d, r28	; 61
    5084:	de bf       	out	0x3e, r29	; 62
    5086:	df 91       	pop	r29
    5088:	cf 91       	pop	r28
    508a:	08 95       	ret

0000508c <vDisplayUpdateTask>:

 void vDisplayUpdateTask(void *pvParameters) {
    508c:	cf 93       	push	r28
    508e:	df 93       	push	r29
    5090:	cd b7       	in	r28, 0x3d	; 61
    5092:	de b7       	in	r29, 0x3e	; 62
    5094:	c0 57       	subi	r28, 0x70	; 112
    5096:	d1 09       	sbc	r29, r1
    5098:	cd bf       	out	0x3d, r28	; 61
    509a:	de bf       	out	0x3e, r29	; 62
    509c:	9e 01       	movw	r18, r28
    509e:	21 59       	subi	r18, 0x91	; 145
    50a0:	3f 4f       	sbci	r19, 0xFF	; 255
    50a2:	f9 01       	movw	r30, r18
    50a4:	80 83       	st	Z, r24
    50a6:	91 83       	std	Z+1, r25	; 0x01
	 int i = 0;
    50a8:	19 82       	std	Y+1, r1	; 0x01
    50aa:	1a 82       	std	Y+2, r1	; 0x02
	 int j = 0;
    50ac:	1b 82       	std	Y+3, r1	; 0x03
    50ae:	1c 82       	std	Y+4, r1	; 0x04
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
    50b0:	1d 82       	std	Y+5, r1	; 0x05
    50b2:	1e 82       	std	Y+6, r1	; 0x06
    50b4:	26 c0       	rjmp	.+76     	; 0x5102 <vDisplayUpdateTask+0x76>
		for(int j = 0; j < 20; j ++) {
    50b6:	1f 82       	std	Y+7, r1	; 0x07
    50b8:	18 86       	std	Y+8, r1	; 0x08
    50ba:	1a c0       	rjmp	.+52     	; 0x50f0 <vDisplayUpdateTask+0x64>
			displayLines[i][j] = 0x20;
    50bc:	2d 81       	ldd	r18, Y+5	; 0x05
    50be:	3e 81       	ldd	r19, Y+6	; 0x06
    50c0:	44 e1       	ldi	r20, 0x14	; 20
    50c2:	42 9f       	mul	r20, r18
    50c4:	c0 01       	movw	r24, r0
    50c6:	43 9f       	mul	r20, r19
    50c8:	90 0d       	add	r25, r0
    50ca:	11 24       	eor	r1, r1
    50cc:	9e 01       	movw	r18, r28
    50ce:	2f 5f       	subi	r18, 0xFF	; 255
    50d0:	3f 4f       	sbci	r19, 0xFF	; 255
    50d2:	28 0f       	add	r18, r24
    50d4:	39 1f       	adc	r19, r25
    50d6:	8f 81       	ldd	r24, Y+7	; 0x07
    50d8:	98 85       	ldd	r25, Y+8	; 0x08
    50da:	82 0f       	add	r24, r18
    50dc:	93 1f       	adc	r25, r19
    50de:	08 96       	adiw	r24, 0x08	; 8
    50e0:	20 e2       	ldi	r18, 0x20	; 32
    50e2:	fc 01       	movw	r30, r24
    50e4:	20 83       	st	Z, r18
 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
		for(int j = 0; j < 20; j ++) {
    50e6:	8f 81       	ldd	r24, Y+7	; 0x07
    50e8:	98 85       	ldd	r25, Y+8	; 0x08
    50ea:	01 96       	adiw	r24, 0x01	; 1
    50ec:	8f 83       	std	Y+7, r24	; 0x07
    50ee:	98 87       	std	Y+8, r25	; 0x08
    50f0:	8f 81       	ldd	r24, Y+7	; 0x07
    50f2:	98 85       	ldd	r25, Y+8	; 0x08
    50f4:	44 97       	sbiw	r24, 0x14	; 20
    50f6:	14 f3       	brlt	.-60     	; 0x50bc <vDisplayUpdateTask+0x30>

 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
    50f8:	8d 81       	ldd	r24, Y+5	; 0x05
    50fa:	9e 81       	ldd	r25, Y+6	; 0x06
    50fc:	01 96       	adiw	r24, 0x01	; 1
    50fe:	8d 83       	std	Y+5, r24	; 0x05
    5100:	9e 83       	std	Y+6, r25	; 0x06
    5102:	8d 81       	ldd	r24, Y+5	; 0x05
    5104:	9e 81       	ldd	r25, Y+6	; 0x06
    5106:	04 97       	sbiw	r24, 0x04	; 4
    5108:	b4 f2       	brlt	.-84     	; 0x50b6 <vDisplayUpdateTask+0x2a>
			displayLines[i][j] = 0x20;
		}
	 }
	 displayLine_t newLine;

	 delayUS(40000);
    510a:	60 e4       	ldi	r22, 0x40	; 64
    510c:	7c e9       	ldi	r23, 0x9C	; 156
    510e:	80 e0       	ldi	r24, 0x00	; 0
    5110:	90 e0       	ldi	r25, 0x00	; 0
    5112:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <delayUS>
	 setPort(0x03);
    5116:	83 e0       	ldi	r24, 0x03	; 3
    5118:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <setPort>
	 delayUS(5000);
    511c:	68 e8       	ldi	r22, 0x88	; 136
    511e:	73 e1       	ldi	r23, 0x13	; 19
    5120:	80 e0       	ldi	r24, 0x00	; 0
    5122:	90 e0       	ldi	r25, 0x00	; 0
    5124:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <delayUS>
	 Nybble();
    5128:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <Nybble>
	 delayUS(160);
    512c:	60 ea       	ldi	r22, 0xA0	; 160
    512e:	70 e0       	ldi	r23, 0x00	; 0
    5130:	80 e0       	ldi	r24, 0x00	; 0
    5132:	90 e0       	ldi	r25, 0x00	; 0
    5134:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <delayUS>
	 Nybble();
    5138:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <Nybble>
	 delayUS(160);
    513c:	60 ea       	ldi	r22, 0xA0	; 160
    513e:	70 e0       	ldi	r23, 0x00	; 0
    5140:	80 e0       	ldi	r24, 0x00	; 0
    5142:	90 e0       	ldi	r25, 0x00	; 0
    5144:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <delayUS>
	 Nybble();
    5148:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <Nybble>
	 delayUS(160);
    514c:	60 ea       	ldi	r22, 0xA0	; 160
    514e:	70 e0       	ldi	r23, 0x00	; 0
    5150:	80 e0       	ldi	r24, 0x00	; 0
    5152:	90 e0       	ldi	r25, 0x00	; 0
    5154:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <delayUS>
	 setPort(0x02);
    5158:	82 e0       	ldi	r24, 0x02	; 2
    515a:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <setPort>
	 Nybble();
    515e:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <Nybble>
	 command(0x28);
    5162:	88 e2       	ldi	r24, 0x28	; 40
    5164:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <command>
	 command(0x10);
    5168:	80 e1       	ldi	r24, 0x10	; 16
    516a:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <command>
	 command(0x0C); //Cursor and Blinking off
    516e:	8c e0       	ldi	r24, 0x0C	; 12
    5170:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <command>
	 command(0x06);
    5174:	86 e0       	ldi	r24, 0x06	; 6
    5176:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <command>
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
    517a:	68 ec       	ldi	r22, 0xC8	; 200
    517c:	70 e0       	ldi	r23, 0x00	; 0
    517e:	80 e0       	ldi	r24, 0x00	; 0
    5180:	90 e0       	ldi	r25, 0x00	; 0
    5182:	0e 94 78 14 	call	0x28f0	; 0x28f0 <vTaskDelay>
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
    5186:	80 91 42 31 	lds	r24, 0x3142	; 0x803142 <egDisplayTiming>
    518a:	90 91 43 31 	lds	r25, 0x3143	; 0x803143 <egDisplayTiming+0x1>
    518e:	40 e0       	ldi	r20, 0x00	; 0
    5190:	50 e0       	ldi	r21, 0x00	; 0
    5192:	ba 01       	movw	r22, r20
    5194:	0e 94 bb 05 	call	0xb76	; 0xb76 <xEventGroupClearBits>
    5198:	dc 01       	movw	r26, r24
    519a:	cb 01       	movw	r24, r22
    519c:	89 2b       	or	r24, r25
    519e:	8a 2b       	or	r24, r26
    51a0:	8b 2b       	or	r24, r27
    51a2:	09 f4       	brne	.+2      	; 0x51a6 <vDisplayUpdateTask+0x11a>
    51a4:	96 c0       	rjmp	.+300    	; 0x52d2 <vDisplayUpdateTask+0x246>
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    51a6:	80 91 42 31 	lds	r24, 0x3142	; 0x803142 <egDisplayTiming>
    51aa:	90 91 43 31 	lds	r25, 0x3143	; 0x803143 <egDisplayTiming+0x1>
    51ae:	42 e0       	ldi	r20, 0x02	; 2
    51b0:	50 e0       	ldi	r21, 0x00	; 0
    51b2:	60 e0       	ldi	r22, 0x00	; 0
    51b4:	70 e0       	ldi	r23, 0x00	; 0
    51b6:	0e 94 bb 05 	call	0xb76	; 0xb76 <xEventGroupClearBits>
			for(i = 0; i < 4;i++) {
    51ba:	19 82       	std	Y+1, r1	; 0x01
    51bc:	1a 82       	std	Y+2, r1	; 0x02
    51be:	26 c0       	rjmp	.+76     	; 0x520c <vDisplayUpdateTask+0x180>
				for(j = 0; j < 20; j ++) {
    51c0:	1b 82       	std	Y+3, r1	; 0x03
    51c2:	1c 82       	std	Y+4, r1	; 0x04
    51c4:	1a c0       	rjmp	.+52     	; 0x51fa <vDisplayUpdateTask+0x16e>
					displayLines[i][j] = 0x20;
    51c6:	29 81       	ldd	r18, Y+1	; 0x01
    51c8:	3a 81       	ldd	r19, Y+2	; 0x02
    51ca:	44 e1       	ldi	r20, 0x14	; 20
    51cc:	42 9f       	mul	r20, r18
    51ce:	c0 01       	movw	r24, r0
    51d0:	43 9f       	mul	r20, r19
    51d2:	90 0d       	add	r25, r0
    51d4:	11 24       	eor	r1, r1
    51d6:	9e 01       	movw	r18, r28
    51d8:	2f 5f       	subi	r18, 0xFF	; 255
    51da:	3f 4f       	sbci	r19, 0xFF	; 255
    51dc:	28 0f       	add	r18, r24
    51de:	39 1f       	adc	r19, r25
    51e0:	8b 81       	ldd	r24, Y+3	; 0x03
    51e2:	9c 81       	ldd	r25, Y+4	; 0x04
    51e4:	82 0f       	add	r24, r18
    51e6:	93 1f       	adc	r25, r19
    51e8:	08 96       	adiw	r24, 0x08	; 8
    51ea:	20 e2       	ldi	r18, 0x20	; 32
    51ec:	fc 01       	movw	r30, r24
    51ee:	20 83       	st	Z, r18
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
				for(j = 0; j < 20; j ++) {
    51f0:	8b 81       	ldd	r24, Y+3	; 0x03
    51f2:	9c 81       	ldd	r25, Y+4	; 0x04
    51f4:	01 96       	adiw	r24, 0x01	; 1
    51f6:	8b 83       	std	Y+3, r24	; 0x03
    51f8:	9c 83       	std	Y+4, r25	; 0x04
    51fa:	8b 81       	ldd	r24, Y+3	; 0x03
    51fc:	9c 81       	ldd	r25, Y+4	; 0x04
    51fe:	44 97       	sbiw	r24, 0x14	; 20
    5200:	14 f3       	brlt	.-60     	; 0x51c6 <vDisplayUpdateTask+0x13a>
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
    5202:	89 81       	ldd	r24, Y+1	; 0x01
    5204:	9a 81       	ldd	r25, Y+2	; 0x02
    5206:	01 96       	adiw	r24, 0x01	; 1
    5208:	89 83       	std	Y+1, r24	; 0x01
    520a:	9a 83       	std	Y+2, r25	; 0x02
    520c:	89 81       	ldd	r24, Y+1	; 0x01
    520e:	9a 81       	ldd	r25, Y+2	; 0x02
    5210:	04 97       	sbiw	r24, 0x04	; 4
    5212:	b4 f2       	brlt	.-84     	; 0x51c0 <vDisplayUpdateTask+0x134>
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
    5214:	5e c0       	rjmp	.+188    	; 0x52d2 <vDisplayUpdateTask+0x246>
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
    5216:	80 91 40 31 	lds	r24, 0x3140	; 0x803140 <displayLineQueue>
    521a:	90 91 41 31 	lds	r25, 0x3141	; 0x803141 <displayLineQueue+0x1>
    521e:	be 01       	movw	r22, r28
    5220:	67 5a       	subi	r22, 0xA7	; 167
    5222:	7f 4f       	sbci	r23, 0xFF	; 255
    5224:	2f ef       	ldi	r18, 0xFF	; 255
    5226:	3f ef       	ldi	r19, 0xFF	; 255
    5228:	a9 01       	movw	r20, r18
    522a:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <xQueueReceive>
    522e:	88 23       	and	r24, r24
    5230:	09 f4       	brne	.+2      	; 0x5234 <vDisplayUpdateTask+0x1a8>
    5232:	4f c0       	rjmp	.+158    	; 0x52d2 <vDisplayUpdateTask+0x246>
				i=0;			
    5234:	19 82       	std	Y+1, r1	; 0x01
    5236:	1a 82       	std	Y+2, r1	; 0x02
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    5238:	32 c0       	rjmp	.+100    	; 0x529e <vDisplayUpdateTask+0x212>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
    523a:	ce 01       	movw	r24, r28
    523c:	87 5a       	subi	r24, 0xA7	; 167
    523e:	9f 4f       	sbci	r25, 0xFF	; 255
    5240:	fc 01       	movw	r30, r24
    5242:	80 81       	ld	r24, Z
    5244:	48 2f       	mov	r20, r24
    5246:	50 e0       	ldi	r21, 0x00	; 0
    5248:	ce 01       	movw	r24, r28
    524a:	87 5a       	subi	r24, 0xA7	; 167
    524c:	9f 4f       	sbci	r25, 0xFF	; 255
    524e:	fc 01       	movw	r30, r24
    5250:	81 81       	ldd	r24, Z+1	; 0x01
    5252:	28 2f       	mov	r18, r24
    5254:	30 e0       	ldi	r19, 0x00	; 0
    5256:	89 81       	ldd	r24, Y+1	; 0x01
    5258:	9a 81       	ldd	r25, Y+2	; 0x02
    525a:	82 0f       	add	r24, r18
    525c:	93 1f       	adc	r25, r19
    525e:	be 01       	movw	r22, r28
    5260:	67 5a       	subi	r22, 0xA7	; 167
    5262:	7f 4f       	sbci	r23, 0xFF	; 255
    5264:	29 81       	ldd	r18, Y+1	; 0x01
    5266:	3a 81       	ldd	r19, Y+2	; 0x02
    5268:	26 0f       	add	r18, r22
    526a:	37 1f       	adc	r19, r23
    526c:	2e 5f       	subi	r18, 0xFE	; 254
    526e:	3f 4f       	sbci	r19, 0xFF	; 255
    5270:	f9 01       	movw	r30, r18
    5272:	60 81       	ld	r22, Z
    5274:	74 e1       	ldi	r23, 0x14	; 20
    5276:	74 9f       	mul	r23, r20
    5278:	90 01       	movw	r18, r0
    527a:	75 9f       	mul	r23, r21
    527c:	30 0d       	add	r19, r0
    527e:	11 24       	eor	r1, r1
    5280:	ae 01       	movw	r20, r28
    5282:	4f 5f       	subi	r20, 0xFF	; 255
    5284:	5f 4f       	sbci	r21, 0xFF	; 255
    5286:	24 0f       	add	r18, r20
    5288:	35 1f       	adc	r19, r21
    528a:	82 0f       	add	r24, r18
    528c:	93 1f       	adc	r25, r19
    528e:	08 96       	adiw	r24, 0x08	; 8
    5290:	fc 01       	movw	r30, r24
    5292:	60 83       	st	Z, r22
					i++;
    5294:	89 81       	ldd	r24, Y+1	; 0x01
    5296:	9a 81       	ldd	r25, Y+2	; 0x02
    5298:	01 96       	adiw	r24, 0x01	; 1
    529a:	89 83       	std	Y+1, r24	; 0x01
    529c:	9a 83       	std	Y+2, r25	; 0x02
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
				i=0;			
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    529e:	ce 01       	movw	r24, r28
    52a0:	87 5a       	subi	r24, 0xA7	; 167
    52a2:	9f 4f       	sbci	r25, 0xFF	; 255
    52a4:	fc 01       	movw	r30, r24
    52a6:	81 81       	ldd	r24, Z+1	; 0x01
    52a8:	28 2f       	mov	r18, r24
    52aa:	30 e0       	ldi	r19, 0x00	; 0
    52ac:	89 81       	ldd	r24, Y+1	; 0x01
    52ae:	9a 81       	ldd	r25, Y+2	; 0x02
    52b0:	82 0f       	add	r24, r18
    52b2:	93 1f       	adc	r25, r19
    52b4:	44 97       	sbiw	r24, 0x14	; 20
    52b6:	6c f4       	brge	.+26     	; 0x52d2 <vDisplayUpdateTask+0x246>
    52b8:	9e 01       	movw	r18, r28
    52ba:	27 5a       	subi	r18, 0xA7	; 167
    52bc:	3f 4f       	sbci	r19, 0xFF	; 255
    52be:	89 81       	ldd	r24, Y+1	; 0x01
    52c0:	9a 81       	ldd	r25, Y+2	; 0x02
    52c2:	82 0f       	add	r24, r18
    52c4:	93 1f       	adc	r25, r19
    52c6:	02 96       	adiw	r24, 0x02	; 2
    52c8:	fc 01       	movw	r30, r24
    52ca:	80 81       	ld	r24, Z
    52cc:	88 23       	and	r24, r24
    52ce:	09 f0       	breq	.+2      	; 0x52d2 <vDisplayUpdateTask+0x246>
    52d0:	b4 cf       	rjmp	.-152    	; 0x523a <vDisplayUpdateTask+0x1ae>
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
    52d2:	80 91 40 31 	lds	r24, 0x3140	; 0x803140 <displayLineQueue>
    52d6:	90 91 41 31 	lds	r25, 0x3141	; 0x803141 <displayLineQueue+0x1>
    52da:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <uxQueueMessagesWaiting>
    52de:	88 23       	and	r24, r24
    52e0:	09 f0       	breq	.+2      	; 0x52e4 <vDisplayUpdateTask+0x258>
    52e2:	99 cf       	rjmp	.-206    	; 0x5216 <vDisplayUpdateTask+0x18a>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
    52e4:	19 82       	std	Y+1, r1	; 0x01
    52e6:	1a 82       	std	Y+2, r1	; 0x02
    52e8:	19 c0       	rjmp	.+50     	; 0x531c <vDisplayUpdateTask+0x290>
			 _displayWriteStringAtPos(i,0,&displayLines[i][0]);
    52ea:	9e 01       	movw	r18, r28
    52ec:	27 5f       	subi	r18, 0xF7	; 247
    52ee:	3f 4f       	sbci	r19, 0xFF	; 255
    52f0:	49 81       	ldd	r20, Y+1	; 0x01
    52f2:	5a 81       	ldd	r21, Y+2	; 0x02
    52f4:	64 e1       	ldi	r22, 0x14	; 20
    52f6:	64 9f       	mul	r22, r20
    52f8:	c0 01       	movw	r24, r0
    52fa:	65 9f       	mul	r22, r21
    52fc:	90 0d       	add	r25, r0
    52fe:	11 24       	eor	r1, r1
    5300:	28 0f       	add	r18, r24
    5302:	39 1f       	adc	r19, r25
    5304:	89 81       	ldd	r24, Y+1	; 0x01
    5306:	9a 81       	ldd	r25, Y+2	; 0x02
    5308:	a9 01       	movw	r20, r18
    530a:	60 e0       	ldi	r22, 0x00	; 0
    530c:	70 e0       	ldi	r23, 0x00	; 0
    530e:	0e 94 28 28 	call	0x5050	; 0x5050 <_displayWriteStringAtPos>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
    5312:	89 81       	ldd	r24, Y+1	; 0x01
    5314:	9a 81       	ldd	r25, Y+2	; 0x02
    5316:	01 96       	adiw	r24, 0x01	; 1
    5318:	89 83       	std	Y+1, r24	; 0x01
    531a:	9a 83       	std	Y+2, r25	; 0x02
    531c:	89 81       	ldd	r24, Y+1	; 0x01
    531e:	9a 81       	ldd	r25, Y+2	; 0x02
    5320:	04 97       	sbiw	r24, 0x04	; 4
    5322:	1c f3       	brlt	.-58     	; 0x52ea <vDisplayUpdateTask+0x25e>
			 _displayWriteStringAtPos(i,0,&displayLines[i][0]);
		 }
	 }
    5324:	2a cf       	rjmp	.-428    	; 0x517a <vDisplayUpdateTask+0xee>

00005326 <vDisplayClear>:
 }
 

void vDisplayClear() {
    5326:	cf 93       	push	r28
    5328:	df 93       	push	r29
    532a:	cd b7       	in	r28, 0x3d	; 61
    532c:	de b7       	in	r29, 0x3e	; 62
	xEventGroupSetBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    532e:	80 91 42 31 	lds	r24, 0x3142	; 0x803142 <egDisplayTiming>
    5332:	90 91 43 31 	lds	r25, 0x3143	; 0x803143 <egDisplayTiming+0x1>
    5336:	42 e0       	ldi	r20, 0x02	; 2
    5338:	50 e0       	ldi	r21, 0x00	; 0
    533a:	60 e0       	ldi	r22, 0x00	; 0
    533c:	70 e0       	ldi	r23, 0x00	; 0
    533e:	0e 94 06 06 	call	0xc0c	; 0xc0c <xEventGroupSetBits>
}
    5342:	00 00       	nop
    5344:	df 91       	pop	r29
    5346:	cf 91       	pop	r28
    5348:	08 95       	ret

0000534a <vDisplayWriteStringAtPos>:

void vDisplayWriteStringAtPos(int line, int pos, char const *fmt, ...) {
    534a:	cf 93       	push	r28
    534c:	df 93       	push	r29
    534e:	1f 92       	push	r1
    5350:	1f 92       	push	r1
    5352:	cd b7       	in	r28, 0x3d	; 61
    5354:	de b7       	in	r29, 0x3e	; 62
	va_list arg;	
	va_start(arg, fmt);
    5356:	ce 01       	movw	r24, r28
    5358:	0e 96       	adiw	r24, 0x0e	; 14
    535a:	89 83       	std	Y+1, r24	; 0x01
    535c:	9a 83       	std	Y+2, r25	; 0x02
	display_vprintf(line, pos, fmt, arg);
    535e:	29 81       	ldd	r18, Y+1	; 0x01
    5360:	3a 81       	ldd	r19, Y+2	; 0x02
    5362:	4c 85       	ldd	r20, Y+12	; 0x0c
    5364:	5d 85       	ldd	r21, Y+13	; 0x0d
    5366:	6a 85       	ldd	r22, Y+10	; 0x0a
    5368:	7b 85       	ldd	r23, Y+11	; 0x0b
    536a:	88 85       	ldd	r24, Y+8	; 0x08
    536c:	99 85       	ldd	r25, Y+9	; 0x09
    536e:	0e 94 bf 29 	call	0x537e	; 0x537e <display_vprintf>
	va_end(arg);	
}
    5372:	00 00       	nop
    5374:	0f 90       	pop	r0
    5376:	0f 90       	pop	r0
    5378:	df 91       	pop	r29
    537a:	cf 91       	pop	r28
    537c:	08 95       	ret

0000537e <display_vprintf>:
 
static int display_vprintf(int line, int pos, char const *fmt, va_list arg) {
    537e:	0f 93       	push	r16
    5380:	cf 93       	push	r28
    5382:	df 93       	push	r29
    5384:	cd b7       	in	r28, 0x3d	; 61
    5386:	de b7       	in	r29, 0x3e	; 62
    5388:	ec 97       	sbiw	r28, 0x3c	; 60
    538a:	cd bf       	out	0x3d, r28	; 61
    538c:	de bf       	out	0x3e, r29	; 62
    538e:	8d ab       	std	Y+53, r24	; 0x35
    5390:	9e ab       	std	Y+54, r25	; 0x36
    5392:	6f ab       	std	Y+55, r22	; 0x37
    5394:	78 af       	std	Y+56, r23	; 0x38
    5396:	49 af       	std	Y+57, r20	; 0x39
    5398:	5a af       	std	Y+58, r21	; 0x3a
    539a:	2b af       	std	Y+59, r18	; 0x3b
    539c:	3c af       	std	Y+60, r19	; 0x3c
	int int_temp;
	char char_temp;
	char *string_temp;
	double double_temp;
	char ch;
	int length = 0;
    539e:	19 82       	std	Y+1, r1	; 0x01
    53a0:	1a 82       	std	Y+2, r1	; 0x02

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
    53a2:	1b 82       	std	Y+3, r1	; 0x03
    53a4:	1c 82       	std	Y+4, r1	; 0x04
    53a6:	0b c0       	rjmp	.+22     	; 0x53be <display_vprintf+0x40>
		buffer[i] = 0x00;
    53a8:	8b 81       	ldd	r24, Y+3	; 0x03
    53aa:	9c 81       	ldd	r25, Y+4	; 0x04
    53ac:	8f 5e       	subi	r24, 0xEF	; 239
    53ae:	9e 4c       	sbci	r25, 0xCE	; 206
    53b0:	fc 01       	movw	r30, r24
    53b2:	10 82       	st	Z, r1
	char ch;
	int length = 0;

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
    53b4:	8b 81       	ldd	r24, Y+3	; 0x03
    53b6:	9c 81       	ldd	r25, Y+4	; 0x04
    53b8:	01 96       	adiw	r24, 0x01	; 1
    53ba:	8b 83       	std	Y+3, r24	; 0x03
    53bc:	9c 83       	std	Y+4, r25	; 0x04
    53be:	8b 81       	ldd	r24, Y+3	; 0x03
    53c0:	9c 81       	ldd	r25, Y+4	; 0x04
    53c2:	44 97       	sbiw	r24, 0x14	; 20
    53c4:	8c f3       	brlt	.-30     	; 0x53a8 <display_vprintf+0x2a>
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    53c6:	1d 82       	std	Y+5, r1	; 0x05
    53c8:	1e 82       	std	Y+6, r1	; 0x06
    53ca:	0b c0       	rjmp	.+22     	; 0x53e2 <display_vprintf+0x64>
		str[i] = 0x00;
    53cc:	8d 81       	ldd	r24, Y+5	; 0x05
    53ce:	9e 81       	ldd	r25, Y+6	; 0x06
    53d0:	8b 5d       	subi	r24, 0xDB	; 219
    53d2:	9e 4c       	sbci	r25, 0xCE	; 206
    53d4:	fc 01       	movw	r30, r24
    53d6:	10 82       	st	Z, r1
	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    53d8:	8d 81       	ldd	r24, Y+5	; 0x05
    53da:	9e 81       	ldd	r25, Y+6	; 0x06
    53dc:	01 96       	adiw	r24, 0x01	; 1
    53de:	8d 83       	std	Y+5, r24	; 0x05
    53e0:	9e 83       	std	Y+6, r25	; 0x06
    53e2:	8d 81       	ldd	r24, Y+5	; 0x05
    53e4:	9e 81       	ldd	r25, Y+6	; 0x06
    53e6:	44 97       	sbiw	r24, 0x14	; 20
    53e8:	8c f3       	brlt	.-30     	; 0x53cc <display_vprintf+0x4e>
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    53ea:	be c1       	rjmp	.+892    	; 0x5768 <display_vprintf+0x3ea>
		if ( '%' == ch ) {
    53ec:	8d 89       	ldd	r24, Y+21	; 0x15
    53ee:	85 32       	cpi	r24, 0x25	; 37
    53f0:	09 f0       	breq	.+2      	; 0x53f4 <display_vprintf+0x76>
    53f2:	a0 c1       	rjmp	.+832    	; 0x5734 <display_vprintf+0x3b6>
			switch (ch = *fmt++) {
    53f4:	89 ad       	ldd	r24, Y+57	; 0x39
    53f6:	9a ad       	ldd	r25, Y+58	; 0x3a
    53f8:	9c 01       	movw	r18, r24
    53fa:	2f 5f       	subi	r18, 0xFF	; 255
    53fc:	3f 4f       	sbci	r19, 0xFF	; 255
    53fe:	29 af       	std	Y+57, r18	; 0x39
    5400:	3a af       	std	Y+58, r19	; 0x3a
    5402:	fc 01       	movw	r30, r24
    5404:	80 81       	ld	r24, Z
    5406:	8d 8b       	std	Y+21, r24	; 0x15
    5408:	8d 89       	ldd	r24, Y+21	; 0x15
    540a:	88 2f       	mov	r24, r24
    540c:	90 e0       	ldi	r25, 0x00	; 0
    540e:	85 36       	cpi	r24, 0x65	; 101
    5410:	91 05       	cpc	r25, r1
    5412:	09 f4       	brne	.+2      	; 0x5416 <display_vprintf+0x98>
    5414:	46 c1       	rjmp	.+652    	; 0x56a2 <display_vprintf+0x324>
    5416:	86 36       	cpi	r24, 0x66	; 102
    5418:	91 05       	cpc	r25, r1
    541a:	54 f4       	brge	.+20     	; 0x5430 <display_vprintf+0xb2>
    541c:	83 36       	cpi	r24, 0x63	; 99
    541e:	91 05       	cpc	r25, r1
    5420:	01 f1       	breq	.+64     	; 0x5462 <display_vprintf+0xe4>
    5422:	84 36       	cpi	r24, 0x64	; 100
    5424:	91 05       	cpc	r25, r1
    5426:	0c f0       	brlt	.+2      	; 0x542a <display_vprintf+0xac>
    5428:	70 c0       	rjmp	.+224    	; 0x550a <display_vprintf+0x18c>
    542a:	85 97       	sbiw	r24, 0x25	; 37
    542c:	69 f0       	breq	.+26     	; 0x5448 <display_vprintf+0xca>
    542e:	9c c1       	rjmp	.+824    	; 0x5768 <display_vprintf+0x3ea>
    5430:	83 37       	cpi	r24, 0x73	; 115
    5432:	91 05       	cpc	r25, r1
    5434:	71 f1       	breq	.+92     	; 0x5492 <display_vprintf+0x114>
    5436:	88 37       	cpi	r24, 0x78	; 120
    5438:	91 05       	cpc	r25, r1
    543a:	09 f4       	brne	.+2      	; 0x543e <display_vprintf+0xc0>
    543c:	a8 c0       	rjmp	.+336    	; 0x558e <display_vprintf+0x210>
    543e:	86 36       	cpi	r24, 0x66	; 102
    5440:	91 05       	cpc	r25, r1
    5442:	09 f4       	brne	.+2      	; 0x5446 <display_vprintf+0xc8>
    5444:	e6 c0       	rjmp	.+460    	; 0x5612 <display_vprintf+0x294>
    5446:	90 c1       	rjmp	.+800    	; 0x5768 <display_vprintf+0x3ea>
				/* %% - print out a single %    */
				case '%':
				str[length] = '%';
    5448:	89 81       	ldd	r24, Y+1	; 0x01
    544a:	9a 81       	ldd	r25, Y+2	; 0x02
    544c:	8b 5d       	subi	r24, 0xDB	; 219
    544e:	9e 4c       	sbci	r25, 0xCE	; 206
    5450:	25 e2       	ldi	r18, 0x25	; 37
    5452:	fc 01       	movw	r30, r24
    5454:	20 83       	st	Z, r18
				length++;
    5456:	89 81       	ldd	r24, Y+1	; 0x01
    5458:	9a 81       	ldd	r25, Y+2	; 0x02
    545a:	01 96       	adiw	r24, 0x01	; 1
    545c:	89 83       	std	Y+1, r24	; 0x01
    545e:	9a 83       	std	Y+2, r25	; 0x02
				break;
    5460:	83 c1       	rjmp	.+774    	; 0x5768 <display_vprintf+0x3ea>

				/* %c: print out a character    */
				case 'c':
				char_temp = va_arg(arg, int);
    5462:	8b ad       	ldd	r24, Y+59	; 0x3b
    5464:	9c ad       	ldd	r25, Y+60	; 0x3c
    5466:	9c 01       	movw	r18, r24
    5468:	2e 5f       	subi	r18, 0xFE	; 254
    546a:	3f 4f       	sbci	r19, 0xFF	; 255
    546c:	2b af       	std	Y+59, r18	; 0x3b
    546e:	3c af       	std	Y+60, r19	; 0x3c
    5470:	fc 01       	movw	r30, r24
    5472:	80 81       	ld	r24, Z
    5474:	91 81       	ldd	r25, Z+1	; 0x01
    5476:	8e 8b       	std	Y+22, r24	; 0x16
				str[length] = char_temp;
    5478:	89 81       	ldd	r24, Y+1	; 0x01
    547a:	9a 81       	ldd	r25, Y+2	; 0x02
    547c:	8b 5d       	subi	r24, 0xDB	; 219
    547e:	9e 4c       	sbci	r25, 0xCE	; 206
    5480:	2e 89       	ldd	r18, Y+22	; 0x16
    5482:	fc 01       	movw	r30, r24
    5484:	20 83       	st	Z, r18
				length++;
    5486:	89 81       	ldd	r24, Y+1	; 0x01
    5488:	9a 81       	ldd	r25, Y+2	; 0x02
    548a:	01 96       	adiw	r24, 0x01	; 1
    548c:	89 83       	std	Y+1, r24	; 0x01
    548e:	9a 83       	std	Y+2, r25	; 0x02
				break;
    5490:	6b c1       	rjmp	.+726    	; 0x5768 <display_vprintf+0x3ea>

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
    5492:	8b ad       	ldd	r24, Y+59	; 0x3b
    5494:	9c ad       	ldd	r25, Y+60	; 0x3c
    5496:	9c 01       	movw	r18, r24
    5498:	2e 5f       	subi	r18, 0xFE	; 254
    549a:	3f 4f       	sbci	r19, 0xFF	; 255
    549c:	2b af       	std	Y+59, r18	; 0x3b
    549e:	3c af       	std	Y+60, r19	; 0x3c
    54a0:	fc 01       	movw	r30, r24
    54a2:	80 81       	ld	r24, Z
    54a4:	91 81       	ldd	r25, Z+1	; 0x01
    54a6:	8f 8b       	std	Y+23, r24	; 0x17
    54a8:	98 8f       	std	Y+24, r25	; 0x18
				for(int i = 0; i < strlen(string_temp);i++) {
    54aa:	1f 82       	std	Y+7, r1	; 0x07
    54ac:	18 86       	std	Y+8, r1	; 0x08
    54ae:	17 c0       	rjmp	.+46     	; 0x54de <display_vprintf+0x160>
					str[length+i] = string_temp[i];
    54b0:	29 81       	ldd	r18, Y+1	; 0x01
    54b2:	3a 81       	ldd	r19, Y+2	; 0x02
    54b4:	8f 81       	ldd	r24, Y+7	; 0x07
    54b6:	98 85       	ldd	r25, Y+8	; 0x08
    54b8:	82 0f       	add	r24, r18
    54ba:	93 1f       	adc	r25, r19
    54bc:	2f 81       	ldd	r18, Y+7	; 0x07
    54be:	38 85       	ldd	r19, Y+8	; 0x08
    54c0:	4f 89       	ldd	r20, Y+23	; 0x17
    54c2:	58 8d       	ldd	r21, Y+24	; 0x18
    54c4:	24 0f       	add	r18, r20
    54c6:	35 1f       	adc	r19, r21
    54c8:	f9 01       	movw	r30, r18
    54ca:	20 81       	ld	r18, Z
    54cc:	8b 5d       	subi	r24, 0xDB	; 219
    54ce:	9e 4c       	sbci	r25, 0xCE	; 206
    54d0:	fc 01       	movw	r30, r24
    54d2:	20 83       	st	Z, r18
				break;

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
				for(int i = 0; i < strlen(string_temp);i++) {
    54d4:	8f 81       	ldd	r24, Y+7	; 0x07
    54d6:	98 85       	ldd	r25, Y+8	; 0x08
    54d8:	01 96       	adiw	r24, 0x01	; 1
    54da:	8f 83       	std	Y+7, r24	; 0x07
    54dc:	98 87       	std	Y+8, r25	; 0x08
    54de:	8f 89       	ldd	r24, Y+23	; 0x17
    54e0:	98 8d       	ldd	r25, Y+24	; 0x18
    54e2:	0e 94 32 36 	call	0x6c64	; 0x6c64 <strlen>
    54e6:	9c 01       	movw	r18, r24
    54e8:	8f 81       	ldd	r24, Y+7	; 0x07
    54ea:	98 85       	ldd	r25, Y+8	; 0x08
    54ec:	82 17       	cp	r24, r18
    54ee:	93 07       	cpc	r25, r19
    54f0:	f8 f2       	brcs	.-66     	; 0x54b0 <display_vprintf+0x132>
					str[length+i] = string_temp[i];
				}
				length += strlen(string_temp);
    54f2:	8f 89       	ldd	r24, Y+23	; 0x17
    54f4:	98 8d       	ldd	r25, Y+24	; 0x18
    54f6:	0e 94 32 36 	call	0x6c64	; 0x6c64 <strlen>
    54fa:	9c 01       	movw	r18, r24
    54fc:	89 81       	ldd	r24, Y+1	; 0x01
    54fe:	9a 81       	ldd	r25, Y+2	; 0x02
    5500:	82 0f       	add	r24, r18
    5502:	93 1f       	adc	r25, r19
    5504:	89 83       	std	Y+1, r24	; 0x01
    5506:	9a 83       	std	Y+2, r25	; 0x02
				break;
    5508:	2f c1       	rjmp	.+606    	; 0x5768 <display_vprintf+0x3ea>

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
    550a:	8b ad       	ldd	r24, Y+59	; 0x3b
    550c:	9c ad       	ldd	r25, Y+60	; 0x3c
    550e:	9c 01       	movw	r18, r24
    5510:	2e 5f       	subi	r18, 0xFE	; 254
    5512:	3f 4f       	sbci	r19, 0xFF	; 255
    5514:	2b af       	std	Y+59, r18	; 0x3b
    5516:	3c af       	std	Y+60, r19	; 0x3c
    5518:	fc 01       	movw	r30, r24
    551a:	80 81       	ld	r24, Z
    551c:	91 81       	ldd	r25, Z+1	; 0x01
    551e:	89 8f       	std	Y+25, r24	; 0x19
    5520:	9a 8f       	std	Y+26, r25	; 0x1a
				itoa(int_temp, buffer, 10);
    5522:	89 8d       	ldd	r24, Y+25	; 0x19
    5524:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5526:	4a e0       	ldi	r20, 0x0A	; 10
    5528:	50 e0       	ldi	r21, 0x00	; 0
    552a:	61 e1       	ldi	r22, 0x11	; 17
    552c:	71 e3       	ldi	r23, 0x31	; 49
    552e:	0e 94 46 36 	call	0x6c8c	; 0x6c8c <itoa>
				for(int i = 0; i < strlen(buffer);i++) {
    5532:	19 86       	std	Y+9, r1	; 0x09
    5534:	1a 86       	std	Y+10, r1	; 0x0a
    5536:	15 c0       	rjmp	.+42     	; 0x5562 <display_vprintf+0x1e4>
					str[length+i] = buffer[i];
    5538:	29 81       	ldd	r18, Y+1	; 0x01
    553a:	3a 81       	ldd	r19, Y+2	; 0x02
    553c:	89 85       	ldd	r24, Y+9	; 0x09
    553e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5540:	82 0f       	add	r24, r18
    5542:	93 1f       	adc	r25, r19
    5544:	29 85       	ldd	r18, Y+9	; 0x09
    5546:	3a 85       	ldd	r19, Y+10	; 0x0a
    5548:	2f 5e       	subi	r18, 0xEF	; 239
    554a:	3e 4c       	sbci	r19, 0xCE	; 206
    554c:	f9 01       	movw	r30, r18
    554e:	20 81       	ld	r18, Z
    5550:	8b 5d       	subi	r24, 0xDB	; 219
    5552:	9e 4c       	sbci	r25, 0xCE	; 206
    5554:	fc 01       	movw	r30, r24
    5556:	20 83       	st	Z, r18

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 10);
				for(int i = 0; i < strlen(buffer);i++) {
    5558:	89 85       	ldd	r24, Y+9	; 0x09
    555a:	9a 85       	ldd	r25, Y+10	; 0x0a
    555c:	01 96       	adiw	r24, 0x01	; 1
    555e:	89 87       	std	Y+9, r24	; 0x09
    5560:	9a 87       	std	Y+10, r25	; 0x0a
    5562:	81 e1       	ldi	r24, 0x11	; 17
    5564:	91 e3       	ldi	r25, 0x31	; 49
    5566:	0e 94 32 36 	call	0x6c64	; 0x6c64 <strlen>
    556a:	9c 01       	movw	r18, r24
    556c:	89 85       	ldd	r24, Y+9	; 0x09
    556e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5570:	82 17       	cp	r24, r18
    5572:	93 07       	cpc	r25, r19
    5574:	08 f3       	brcs	.-62     	; 0x5538 <display_vprintf+0x1ba>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    5576:	81 e1       	ldi	r24, 0x11	; 17
    5578:	91 e3       	ldi	r25, 0x31	; 49
    557a:	0e 94 32 36 	call	0x6c64	; 0x6c64 <strlen>
    557e:	9c 01       	movw	r18, r24
    5580:	89 81       	ldd	r24, Y+1	; 0x01
    5582:	9a 81       	ldd	r25, Y+2	; 0x02
    5584:	82 0f       	add	r24, r18
    5586:	93 1f       	adc	r25, r19
    5588:	89 83       	std	Y+1, r24	; 0x01
    558a:	9a 83       	std	Y+2, r25	; 0x02
				break;
    558c:	ed c0       	rjmp	.+474    	; 0x5768 <display_vprintf+0x3ea>

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
    558e:	8b ad       	ldd	r24, Y+59	; 0x3b
    5590:	9c ad       	ldd	r25, Y+60	; 0x3c
    5592:	9c 01       	movw	r18, r24
    5594:	2e 5f       	subi	r18, 0xFE	; 254
    5596:	3f 4f       	sbci	r19, 0xFF	; 255
    5598:	2b af       	std	Y+59, r18	; 0x3b
    559a:	3c af       	std	Y+60, r19	; 0x3c
    559c:	fc 01       	movw	r30, r24
    559e:	80 81       	ld	r24, Z
    55a0:	91 81       	ldd	r25, Z+1	; 0x01
    55a2:	89 8f       	std	Y+25, r24	; 0x19
    55a4:	9a 8f       	std	Y+26, r25	; 0x1a
				itoa(int_temp, buffer, 16);
    55a6:	89 8d       	ldd	r24, Y+25	; 0x19
    55a8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    55aa:	40 e1       	ldi	r20, 0x10	; 16
    55ac:	50 e0       	ldi	r21, 0x00	; 0
    55ae:	61 e1       	ldi	r22, 0x11	; 17
    55b0:	71 e3       	ldi	r23, 0x31	; 49
    55b2:	0e 94 46 36 	call	0x6c8c	; 0x6c8c <itoa>
				for(int i = 0; i < strlen(buffer);i++) {
    55b6:	1b 86       	std	Y+11, r1	; 0x0b
    55b8:	1c 86       	std	Y+12, r1	; 0x0c
    55ba:	15 c0       	rjmp	.+42     	; 0x55e6 <display_vprintf+0x268>
					str[length+i] = buffer[i];
    55bc:	29 81       	ldd	r18, Y+1	; 0x01
    55be:	3a 81       	ldd	r19, Y+2	; 0x02
    55c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    55c2:	9c 85       	ldd	r25, Y+12	; 0x0c
    55c4:	82 0f       	add	r24, r18
    55c6:	93 1f       	adc	r25, r19
    55c8:	2b 85       	ldd	r18, Y+11	; 0x0b
    55ca:	3c 85       	ldd	r19, Y+12	; 0x0c
    55cc:	2f 5e       	subi	r18, 0xEF	; 239
    55ce:	3e 4c       	sbci	r19, 0xCE	; 206
    55d0:	f9 01       	movw	r30, r18
    55d2:	20 81       	ld	r18, Z
    55d4:	8b 5d       	subi	r24, 0xDB	; 219
    55d6:	9e 4c       	sbci	r25, 0xCE	; 206
    55d8:	fc 01       	movw	r30, r24
    55da:	20 83       	st	Z, r18

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 16);
				for(int i = 0; i < strlen(buffer);i++) {
    55dc:	8b 85       	ldd	r24, Y+11	; 0x0b
    55de:	9c 85       	ldd	r25, Y+12	; 0x0c
    55e0:	01 96       	adiw	r24, 0x01	; 1
    55e2:	8b 87       	std	Y+11, r24	; 0x0b
    55e4:	9c 87       	std	Y+12, r25	; 0x0c
    55e6:	81 e1       	ldi	r24, 0x11	; 17
    55e8:	91 e3       	ldi	r25, 0x31	; 49
    55ea:	0e 94 32 36 	call	0x6c64	; 0x6c64 <strlen>
    55ee:	9c 01       	movw	r18, r24
    55f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    55f2:	9c 85       	ldd	r25, Y+12	; 0x0c
    55f4:	82 17       	cp	r24, r18
    55f6:	93 07       	cpc	r25, r19
    55f8:	08 f3       	brcs	.-62     	; 0x55bc <display_vprintf+0x23e>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    55fa:	81 e1       	ldi	r24, 0x11	; 17
    55fc:	91 e3       	ldi	r25, 0x31	; 49
    55fe:	0e 94 32 36 	call	0x6c64	; 0x6c64 <strlen>
    5602:	9c 01       	movw	r18, r24
    5604:	89 81       	ldd	r24, Y+1	; 0x01
    5606:	9a 81       	ldd	r25, Y+2	; 0x02
    5608:	82 0f       	add	r24, r18
    560a:	93 1f       	adc	r25, r19
    560c:	89 83       	std	Y+1, r24	; 0x01
    560e:	9a 83       	std	Y+2, r25	; 0x02
				break;
    5610:	ab c0       	rjmp	.+342    	; 0x5768 <display_vprintf+0x3ea>

				case 'f':
				double_temp = va_arg(arg, double);
    5612:	8b ad       	ldd	r24, Y+59	; 0x3b
    5614:	9c ad       	ldd	r25, Y+60	; 0x3c
    5616:	9c 01       	movw	r18, r24
    5618:	2c 5f       	subi	r18, 0xFC	; 252
    561a:	3f 4f       	sbci	r19, 0xFF	; 255
    561c:	2b af       	std	Y+59, r18	; 0x3b
    561e:	3c af       	std	Y+60, r19	; 0x3c
    5620:	fc 01       	movw	r30, r24
    5622:	80 81       	ld	r24, Z
    5624:	91 81       	ldd	r25, Z+1	; 0x01
    5626:	a2 81       	ldd	r26, Z+2	; 0x02
    5628:	b3 81       	ldd	r27, Z+3	; 0x03
    562a:	8b 8f       	std	Y+27, r24	; 0x1b
    562c:	9c 8f       	std	Y+28, r25	; 0x1c
    562e:	ad 8f       	std	Y+29, r26	; 0x1d
    5630:	be 8f       	std	Y+30, r27	; 0x1e
				ftoa_fixed(buffer, double_temp);
    5632:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5634:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5636:	ad 8d       	ldd	r26, Y+29	; 0x1d
    5638:	be 8d       	ldd	r27, Y+30	; 0x1e
    563a:	ac 01       	movw	r20, r24
    563c:	bd 01       	movw	r22, r26
    563e:	81 e1       	ldi	r24, 0x11	; 17
    5640:	91 e3       	ldi	r25, 0x31	; 49
    5642:	0e 94 8e 2c 	call	0x591c	; 0x591c <ftoa_fixed>
				for(int i = 0; i < strlen(buffer);i++) {
    5646:	1d 86       	std	Y+13, r1	; 0x0d
    5648:	1e 86       	std	Y+14, r1	; 0x0e
    564a:	15 c0       	rjmp	.+42     	; 0x5676 <display_vprintf+0x2f8>
					str[length+i] = buffer[i];
    564c:	29 81       	ldd	r18, Y+1	; 0x01
    564e:	3a 81       	ldd	r19, Y+2	; 0x02
    5650:	8d 85       	ldd	r24, Y+13	; 0x0d
    5652:	9e 85       	ldd	r25, Y+14	; 0x0e
    5654:	82 0f       	add	r24, r18
    5656:	93 1f       	adc	r25, r19
    5658:	2d 85       	ldd	r18, Y+13	; 0x0d
    565a:	3e 85       	ldd	r19, Y+14	; 0x0e
    565c:	2f 5e       	subi	r18, 0xEF	; 239
    565e:	3e 4c       	sbci	r19, 0xCE	; 206
    5660:	f9 01       	movw	r30, r18
    5662:	20 81       	ld	r18, Z
    5664:	8b 5d       	subi	r24, 0xDB	; 219
    5666:	9e 4c       	sbci	r25, 0xCE	; 206
    5668:	fc 01       	movw	r30, r24
    566a:	20 83       	st	Z, r18
				break;

				case 'f':
				double_temp = va_arg(arg, double);
				ftoa_fixed(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    566c:	8d 85       	ldd	r24, Y+13	; 0x0d
    566e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5670:	01 96       	adiw	r24, 0x01	; 1
    5672:	8d 87       	std	Y+13, r24	; 0x0d
    5674:	9e 87       	std	Y+14, r25	; 0x0e
    5676:	81 e1       	ldi	r24, 0x11	; 17
    5678:	91 e3       	ldi	r25, 0x31	; 49
    567a:	0e 94 32 36 	call	0x6c64	; 0x6c64 <strlen>
    567e:	9c 01       	movw	r18, r24
    5680:	8d 85       	ldd	r24, Y+13	; 0x0d
    5682:	9e 85       	ldd	r25, Y+14	; 0x0e
    5684:	82 17       	cp	r24, r18
    5686:	93 07       	cpc	r25, r19
    5688:	08 f3       	brcs	.-62     	; 0x564c <display_vprintf+0x2ce>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    568a:	81 e1       	ldi	r24, 0x11	; 17
    568c:	91 e3       	ldi	r25, 0x31	; 49
    568e:	0e 94 32 36 	call	0x6c64	; 0x6c64 <strlen>
    5692:	9c 01       	movw	r18, r24
    5694:	89 81       	ldd	r24, Y+1	; 0x01
    5696:	9a 81       	ldd	r25, Y+2	; 0x02
    5698:	82 0f       	add	r24, r18
    569a:	93 1f       	adc	r25, r19
    569c:	89 83       	std	Y+1, r24	; 0x01
    569e:	9a 83       	std	Y+2, r25	; 0x02
				break;
    56a0:	63 c0       	rjmp	.+198    	; 0x5768 <display_vprintf+0x3ea>

				case 'e':
				double_temp = va_arg(arg, double);
    56a2:	8b ad       	ldd	r24, Y+59	; 0x3b
    56a4:	9c ad       	ldd	r25, Y+60	; 0x3c
    56a6:	9c 01       	movw	r18, r24
    56a8:	2c 5f       	subi	r18, 0xFC	; 252
    56aa:	3f 4f       	sbci	r19, 0xFF	; 255
    56ac:	2b af       	std	Y+59, r18	; 0x3b
    56ae:	3c af       	std	Y+60, r19	; 0x3c
    56b0:	fc 01       	movw	r30, r24
    56b2:	80 81       	ld	r24, Z
    56b4:	91 81       	ldd	r25, Z+1	; 0x01
    56b6:	a2 81       	ldd	r26, Z+2	; 0x02
    56b8:	b3 81       	ldd	r27, Z+3	; 0x03
    56ba:	8b 8f       	std	Y+27, r24	; 0x1b
    56bc:	9c 8f       	std	Y+28, r25	; 0x1c
    56be:	ad 8f       	std	Y+29, r26	; 0x1d
    56c0:	be 8f       	std	Y+30, r27	; 0x1e
				ftoa_sci(buffer, double_temp);
    56c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    56c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    56c6:	ad 8d       	ldd	r26, Y+29	; 0x1d
    56c8:	be 8d       	ldd	r27, Y+30	; 0x1e
    56ca:	ac 01       	movw	r20, r24
    56cc:	bd 01       	movw	r22, r26
    56ce:	81 e1       	ldi	r24, 0x11	; 17
    56d0:	91 e3       	ldi	r25, 0x31	; 49
    56d2:	0e 94 dd 2d 	call	0x5bba	; 0x5bba <ftoa_sci>
				for(int i = 0; i < strlen(buffer);i++) {
    56d6:	1f 86       	std	Y+15, r1	; 0x0f
    56d8:	18 8a       	std	Y+16, r1	; 0x10
    56da:	15 c0       	rjmp	.+42     	; 0x5706 <display_vprintf+0x388>
					str[length+i] = buffer[i];
    56dc:	29 81       	ldd	r18, Y+1	; 0x01
    56de:	3a 81       	ldd	r19, Y+2	; 0x02
    56e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    56e2:	98 89       	ldd	r25, Y+16	; 0x10
    56e4:	82 0f       	add	r24, r18
    56e6:	93 1f       	adc	r25, r19
    56e8:	2f 85       	ldd	r18, Y+15	; 0x0f
    56ea:	38 89       	ldd	r19, Y+16	; 0x10
    56ec:	2f 5e       	subi	r18, 0xEF	; 239
    56ee:	3e 4c       	sbci	r19, 0xCE	; 206
    56f0:	f9 01       	movw	r30, r18
    56f2:	20 81       	ld	r18, Z
    56f4:	8b 5d       	subi	r24, 0xDB	; 219
    56f6:	9e 4c       	sbci	r25, 0xCE	; 206
    56f8:	fc 01       	movw	r30, r24
    56fa:	20 83       	st	Z, r18
				break;

				case 'e':
				double_temp = va_arg(arg, double);
				ftoa_sci(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    56fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    56fe:	98 89       	ldd	r25, Y+16	; 0x10
    5700:	01 96       	adiw	r24, 0x01	; 1
    5702:	8f 87       	std	Y+15, r24	; 0x0f
    5704:	98 8b       	std	Y+16, r25	; 0x10
    5706:	81 e1       	ldi	r24, 0x11	; 17
    5708:	91 e3       	ldi	r25, 0x31	; 49
    570a:	0e 94 32 36 	call	0x6c64	; 0x6c64 <strlen>
    570e:	9c 01       	movw	r18, r24
    5710:	8f 85       	ldd	r24, Y+15	; 0x0f
    5712:	98 89       	ldd	r25, Y+16	; 0x10
    5714:	82 17       	cp	r24, r18
    5716:	93 07       	cpc	r25, r19
    5718:	08 f3       	brcs	.-62     	; 0x56dc <display_vprintf+0x35e>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    571a:	81 e1       	ldi	r24, 0x11	; 17
    571c:	91 e3       	ldi	r25, 0x31	; 49
    571e:	0e 94 32 36 	call	0x6c64	; 0x6c64 <strlen>
    5722:	9c 01       	movw	r18, r24
    5724:	89 81       	ldd	r24, Y+1	; 0x01
    5726:	9a 81       	ldd	r25, Y+2	; 0x02
    5728:	82 0f       	add	r24, r18
    572a:	93 1f       	adc	r25, r19
    572c:	89 83       	std	Y+1, r24	; 0x01
    572e:	9a 83       	std	Y+2, r25	; 0x02
				break;
    5730:	00 00       	nop
    5732:	1a c0       	rjmp	.+52     	; 0x5768 <display_vprintf+0x3ea>
			}
		}
		else {
			str[length] = ch;
    5734:	89 81       	ldd	r24, Y+1	; 0x01
    5736:	9a 81       	ldd	r25, Y+2	; 0x02
    5738:	8b 5d       	subi	r24, 0xDB	; 219
    573a:	9e 4c       	sbci	r25, 0xCE	; 206
    573c:	2d 89       	ldd	r18, Y+21	; 0x15
    573e:	fc 01       	movw	r30, r24
    5740:	20 83       	st	Z, r18
			if(str[length] == '\n') {
    5742:	89 81       	ldd	r24, Y+1	; 0x01
    5744:	9a 81       	ldd	r25, Y+2	; 0x02
    5746:	8b 5d       	subi	r24, 0xDB	; 219
    5748:	9e 4c       	sbci	r25, 0xCE	; 206
    574a:	fc 01       	movw	r30, r24
    574c:	80 81       	ld	r24, Z
    574e:	8a 30       	cpi	r24, 0x0A	; 10
    5750:	31 f4       	brne	.+12     	; 0x575e <display_vprintf+0x3e0>
				str[length] = '\0';				
    5752:	89 81       	ldd	r24, Y+1	; 0x01
    5754:	9a 81       	ldd	r25, Y+2	; 0x02
    5756:	8b 5d       	subi	r24, 0xDB	; 219
    5758:	9e 4c       	sbci	r25, 0xCE	; 206
    575a:	fc 01       	movw	r30, r24
    575c:	10 82       	st	Z, r1
			}
			length++;
    575e:	89 81       	ldd	r24, Y+1	; 0x01
    5760:	9a 81       	ldd	r25, Y+2	; 0x02
    5762:	01 96       	adiw	r24, 0x01	; 1
    5764:	89 83       	std	Y+1, r24	; 0x01
    5766:	9a 83       	std	Y+2, r25	; 0x02
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    5768:	89 ad       	ldd	r24, Y+57	; 0x39
    576a:	9a ad       	ldd	r25, Y+58	; 0x3a
    576c:	9c 01       	movw	r18, r24
    576e:	2f 5f       	subi	r18, 0xFF	; 255
    5770:	3f 4f       	sbci	r19, 0xFF	; 255
    5772:	29 af       	std	Y+57, r18	; 0x39
    5774:	3a af       	std	Y+58, r19	; 0x3a
    5776:	fc 01       	movw	r30, r24
    5778:	80 81       	ld	r24, Z
    577a:	8d 8b       	std	Y+21, r24	; 0x15
    577c:	8d 89       	ldd	r24, Y+21	; 0x15
    577e:	88 23       	and	r24, r24
    5780:	09 f0       	breq	.+2      	; 0x5784 <display_vprintf+0x406>
    5782:	34 ce       	rjmp	.-920    	; 0x53ec <display_vprintf+0x6e>
				str[length] = '\0';				
			}
			length++;
		}
	}
	if(length + pos >= 20) {
    5784:	29 81       	ldd	r18, Y+1	; 0x01
    5786:	3a 81       	ldd	r19, Y+2	; 0x02
    5788:	8f a9       	ldd	r24, Y+55	; 0x37
    578a:	98 ad       	ldd	r25, Y+56	; 0x38
    578c:	82 0f       	add	r24, r18
    578e:	93 1f       	adc	r25, r19
    5790:	44 97       	sbiw	r24, 0x14	; 20
    5792:	54 f0       	brlt	.+20     	; 0x57a8 <display_vprintf+0x42a>
		length = 20-pos;
    5794:	24 e1       	ldi	r18, 0x14	; 20
    5796:	30 e0       	ldi	r19, 0x00	; 0
    5798:	8f a9       	ldd	r24, Y+55	; 0x37
    579a:	98 ad       	ldd	r25, Y+56	; 0x38
    579c:	a9 01       	movw	r20, r18
    579e:	48 1b       	sub	r20, r24
    57a0:	59 0b       	sbc	r21, r25
    57a2:	ca 01       	movw	r24, r20
    57a4:	89 83       	std	Y+1, r24	; 0x01
    57a6:	9a 83       	std	Y+2, r25	; 0x02
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
    57a8:	19 8a       	std	Y+17, r1	; 0x11
    57aa:	1a 8a       	std	Y+18, r1	; 0x12
    57ac:	0e c0       	rjmp	.+28     	; 0x57ca <display_vprintf+0x44c>
		newLine.displayBuffer[i] = 0x00;
    57ae:	9e 01       	movw	r18, r28
    57b0:	2f 5d       	subi	r18, 0xDF	; 223
    57b2:	3f 4f       	sbci	r19, 0xFF	; 255
    57b4:	89 89       	ldd	r24, Y+17	; 0x11
    57b6:	9a 89       	ldd	r25, Y+18	; 0x12
    57b8:	82 0f       	add	r24, r18
    57ba:	93 1f       	adc	r25, r19
    57bc:	fc 01       	movw	r30, r24
    57be:	10 82       	st	Z, r1
	}
	if(length + pos >= 20) {
		length = 20-pos;
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
    57c0:	89 89       	ldd	r24, Y+17	; 0x11
    57c2:	9a 89       	ldd	r25, Y+18	; 0x12
    57c4:	01 96       	adiw	r24, 0x01	; 1
    57c6:	89 8b       	std	Y+17, r24	; 0x11
    57c8:	9a 8b       	std	Y+18, r25	; 0x12
    57ca:	89 89       	ldd	r24, Y+17	; 0x11
    57cc:	9a 89       	ldd	r25, Y+18	; 0x12
    57ce:	44 97       	sbiw	r24, 0x14	; 20
    57d0:	74 f3       	brlt	.-36     	; 0x57ae <display_vprintf+0x430>
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
    57d2:	8d a9       	ldd	r24, Y+53	; 0x35
    57d4:	8f 8f       	std	Y+31, r24	; 0x1f
	newLine.displayPos = pos;
    57d6:	8f a9       	ldd	r24, Y+55	; 0x37
    57d8:	88 a3       	std	Y+32, r24	; 0x20
	for(int i = 0; i < length;i++) {
    57da:	1b 8a       	std	Y+19, r1	; 0x13
    57dc:	1c 8a       	std	Y+20, r1	; 0x14
    57de:	14 c0       	rjmp	.+40     	; 0x5808 <display_vprintf+0x48a>
		newLine.displayBuffer[i] = str[i];
    57e0:	8b 89       	ldd	r24, Y+19	; 0x13
    57e2:	9c 89       	ldd	r25, Y+20	; 0x14
    57e4:	8b 5d       	subi	r24, 0xDB	; 219
    57e6:	9e 4c       	sbci	r25, 0xCE	; 206
    57e8:	fc 01       	movw	r30, r24
    57ea:	40 81       	ld	r20, Z
    57ec:	9e 01       	movw	r18, r28
    57ee:	2f 5d       	subi	r18, 0xDF	; 223
    57f0:	3f 4f       	sbci	r19, 0xFF	; 255
    57f2:	8b 89       	ldd	r24, Y+19	; 0x13
    57f4:	9c 89       	ldd	r25, Y+20	; 0x14
    57f6:	82 0f       	add	r24, r18
    57f8:	93 1f       	adc	r25, r19
    57fa:	fc 01       	movw	r30, r24
    57fc:	40 83       	st	Z, r20
	for(int i = 0; i < 20; i++) {
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
	newLine.displayPos = pos;
	for(int i = 0; i < length;i++) {
    57fe:	8b 89       	ldd	r24, Y+19	; 0x13
    5800:	9c 89       	ldd	r25, Y+20	; 0x14
    5802:	01 96       	adiw	r24, 0x01	; 1
    5804:	8b 8b       	std	Y+19, r24	; 0x13
    5806:	9c 8b       	std	Y+20, r25	; 0x14
    5808:	2b 89       	ldd	r18, Y+19	; 0x13
    580a:	3c 89       	ldd	r19, Y+20	; 0x14
    580c:	89 81       	ldd	r24, Y+1	; 0x01
    580e:	9a 81       	ldd	r25, Y+2	; 0x02
    5810:	28 17       	cp	r18, r24
    5812:	39 07       	cpc	r19, r25
    5814:	2c f3       	brlt	.-54     	; 0x57e0 <display_vprintf+0x462>
		newLine.displayBuffer[i] = str[i];
	}	
	xQueueSend(displayLineQueue, (void *) &newLine, portMAX_DELAY);
    5816:	80 91 40 31 	lds	r24, 0x3140	; 0x803140 <displayLineQueue>
    581a:	90 91 41 31 	lds	r25, 0x3141	; 0x803141 <displayLineQueue+0x1>
    581e:	be 01       	movw	r22, r28
    5820:	61 5e       	subi	r22, 0xE1	; 225
    5822:	7f 4f       	sbci	r23, 0xFF	; 255
    5824:	00 e0       	ldi	r16, 0x00	; 0
    5826:	2f ef       	ldi	r18, 0xFF	; 255
    5828:	3f ef       	ldi	r19, 0xFF	; 255
    582a:	a9 01       	movw	r20, r18
    582c:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <xQueueGenericSend>
	
	
	return length;
    5830:	89 81       	ldd	r24, Y+1	; 0x01
    5832:	9a 81       	ldd	r25, Y+2	; 0x02
}
    5834:	ec 96       	adiw	r28, 0x3c	; 60
    5836:	cd bf       	out	0x3d, r28	; 61
    5838:	de bf       	out	0x3e, r29	; 62
    583a:	df 91       	pop	r29
    583c:	cf 91       	pop	r28
    583e:	0f 91       	pop	r16
    5840:	08 95       	ret

00005842 <normalize>:

static int normalize(double *val) {
    5842:	cf 93       	push	r28
    5844:	df 93       	push	r29
    5846:	cd b7       	in	r28, 0x3d	; 61
    5848:	de b7       	in	r29, 0x3e	; 62
    584a:	28 97       	sbiw	r28, 0x08	; 8
    584c:	cd bf       	out	0x3d, r28	; 61
    584e:	de bf       	out	0x3e, r29	; 62
    5850:	8f 83       	std	Y+7, r24	; 0x07
    5852:	98 87       	std	Y+8, r25	; 0x08
    int exponent = 0;
    5854:	19 82       	std	Y+1, r1	; 0x01
    5856:	1a 82       	std	Y+2, r1	; 0x02
    double value = *val;
    5858:	8f 81       	ldd	r24, Y+7	; 0x07
    585a:	98 85       	ldd	r25, Y+8	; 0x08
    585c:	fc 01       	movw	r30, r24
    585e:	80 81       	ld	r24, Z
    5860:	91 81       	ldd	r25, Z+1	; 0x01
    5862:	a2 81       	ldd	r26, Z+2	; 0x02
    5864:	b3 81       	ldd	r27, Z+3	; 0x03
    5866:	8b 83       	std	Y+3, r24	; 0x03
    5868:	9c 83       	std	Y+4, r25	; 0x04
    586a:	ad 83       	std	Y+5, r26	; 0x05
    586c:	be 83       	std	Y+6, r27	; 0x06

    while (value >= 1.0) {
    586e:	15 c0       	rjmp	.+42     	; 0x589a <normalize+0x58>
        value /= 10.0;
    5870:	20 e0       	ldi	r18, 0x00	; 0
    5872:	30 e0       	ldi	r19, 0x00	; 0
    5874:	40 e2       	ldi	r20, 0x20	; 32
    5876:	51 e4       	ldi	r21, 0x41	; 65
    5878:	6b 81       	ldd	r22, Y+3	; 0x03
    587a:	7c 81       	ldd	r23, Y+4	; 0x04
    587c:	8d 81       	ldd	r24, Y+5	; 0x05
    587e:	9e 81       	ldd	r25, Y+6	; 0x06
    5880:	0e 94 70 2f 	call	0x5ee0	; 0x5ee0 <__divsf3>
    5884:	dc 01       	movw	r26, r24
    5886:	cb 01       	movw	r24, r22
    5888:	8b 83       	std	Y+3, r24	; 0x03
    588a:	9c 83       	std	Y+4, r25	; 0x04
    588c:	ad 83       	std	Y+5, r26	; 0x05
    588e:	be 83       	std	Y+6, r27	; 0x06
        ++exponent;
    5890:	89 81       	ldd	r24, Y+1	; 0x01
    5892:	9a 81       	ldd	r25, Y+2	; 0x02
    5894:	01 96       	adiw	r24, 0x01	; 1
    5896:	89 83       	std	Y+1, r24	; 0x01
    5898:	9a 83       	std	Y+2, r25	; 0x02

static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
    589a:	20 e0       	ldi	r18, 0x00	; 0
    589c:	30 e0       	ldi	r19, 0x00	; 0
    589e:	40 e8       	ldi	r20, 0x80	; 128
    58a0:	5f e3       	ldi	r21, 0x3F	; 63
    58a2:	6b 81       	ldd	r22, Y+3	; 0x03
    58a4:	7c 81       	ldd	r23, Y+4	; 0x04
    58a6:	8d 81       	ldd	r24, Y+5	; 0x05
    58a8:	9e 81       	ldd	r25, Y+6	; 0x06
    58aa:	0e 94 ca 30 	call	0x6194	; 0x6194 <__gesf2>
    58ae:	88 23       	and	r24, r24
    58b0:	fc f6       	brge	.-66     	; 0x5870 <normalize+0x2e>
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    58b2:	15 c0       	rjmp	.+42     	; 0x58de <normalize+0x9c>
        value *= 10.0;
    58b4:	20 e0       	ldi	r18, 0x00	; 0
    58b6:	30 e0       	ldi	r19, 0x00	; 0
    58b8:	40 e2       	ldi	r20, 0x20	; 32
    58ba:	51 e4       	ldi	r21, 0x41	; 65
    58bc:	6b 81       	ldd	r22, Y+3	; 0x03
    58be:	7c 81       	ldd	r23, Y+4	; 0x04
    58c0:	8d 81       	ldd	r24, Y+5	; 0x05
    58c2:	9e 81       	ldd	r25, Y+6	; 0x06
    58c4:	0e 94 cf 30 	call	0x619e	; 0x619e <__mulsf3>
    58c8:	dc 01       	movw	r26, r24
    58ca:	cb 01       	movw	r24, r22
    58cc:	8b 83       	std	Y+3, r24	; 0x03
    58ce:	9c 83       	std	Y+4, r25	; 0x04
    58d0:	ad 83       	std	Y+5, r26	; 0x05
    58d2:	be 83       	std	Y+6, r27	; 0x06
        --exponent;
    58d4:	89 81       	ldd	r24, Y+1	; 0x01
    58d6:	9a 81       	ldd	r25, Y+2	; 0x02
    58d8:	01 97       	sbiw	r24, 0x01	; 1
    58da:	89 83       	std	Y+1, r24	; 0x01
    58dc:	9a 83       	std	Y+2, r25	; 0x02
    while (value >= 1.0) {
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    58de:	2d ec       	ldi	r18, 0xCD	; 205
    58e0:	3c ec       	ldi	r19, 0xCC	; 204
    58e2:	4c ec       	ldi	r20, 0xCC	; 204
    58e4:	5d e3       	ldi	r21, 0x3D	; 61
    58e6:	6b 81       	ldd	r22, Y+3	; 0x03
    58e8:	7c 81       	ldd	r23, Y+4	; 0x04
    58ea:	8d 81       	ldd	r24, Y+5	; 0x05
    58ec:	9e 81       	ldd	r25, Y+6	; 0x06
    58ee:	0e 94 6b 2f 	call	0x5ed6	; 0x5ed6 <__cmpsf2>
    58f2:	88 23       	and	r24, r24
    58f4:	fc f2       	brlt	.-66     	; 0x58b4 <normalize+0x72>
        value *= 10.0;
        --exponent;
    }
    *val = value;
    58f6:	2f 81       	ldd	r18, Y+7	; 0x07
    58f8:	38 85       	ldd	r19, Y+8	; 0x08
    58fa:	8b 81       	ldd	r24, Y+3	; 0x03
    58fc:	9c 81       	ldd	r25, Y+4	; 0x04
    58fe:	ad 81       	ldd	r26, Y+5	; 0x05
    5900:	be 81       	ldd	r27, Y+6	; 0x06
    5902:	f9 01       	movw	r30, r18
    5904:	80 83       	st	Z, r24
    5906:	91 83       	std	Z+1, r25	; 0x01
    5908:	a2 83       	std	Z+2, r26	; 0x02
    590a:	b3 83       	std	Z+3, r27	; 0x03
    return exponent;
    590c:	89 81       	ldd	r24, Y+1	; 0x01
    590e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    5910:	28 96       	adiw	r28, 0x08	; 8
    5912:	cd bf       	out	0x3d, r28	; 61
    5914:	de bf       	out	0x3e, r29	; 62
    5916:	df 91       	pop	r29
    5918:	cf 91       	pop	r28
    591a:	08 95       	ret

0000591c <ftoa_fixed>:

static void ftoa_fixed(char *buffer, double value) {  
    591c:	cf 92       	push	r12
    591e:	df 92       	push	r13
    5920:	ef 92       	push	r14
    5922:	ff 92       	push	r15
    5924:	cf 93       	push	r28
    5926:	df 93       	push	r29
    5928:	cd b7       	in	r28, 0x3d	; 61
    592a:	de b7       	in	r29, 0x3e	; 62
    592c:	2e 97       	sbiw	r28, 0x0e	; 14
    592e:	cd bf       	out	0x3d, r28	; 61
    5930:	de bf       	out	0x3e, r29	; 62
    5932:	89 87       	std	Y+9, r24	; 0x09
    5934:	9a 87       	std	Y+10, r25	; 0x0a
    5936:	4b 87       	std	Y+11, r20	; 0x0b
    5938:	5c 87       	std	Y+12, r21	; 0x0c
    593a:	6d 87       	std	Y+13, r22	; 0x0d
    593c:	7e 87       	std	Y+14, r23	; 0x0e
     * The largest value we expect is an IEEE 754 double precision real, with maximum magnitude of approximately
     * e+308. The C standard requires an implementation to allow a single conversion to produce up to 512 
     * characters, so that's what we really expect as the buffer size.     
     */

    int exponent = 0;
    593e:	19 82       	std	Y+1, r1	; 0x01
    5940:	1a 82       	std	Y+2, r1	; 0x02
    int places = 0;
    5942:	1b 82       	std	Y+3, r1	; 0x03
    5944:	1c 82       	std	Y+4, r1	; 0x04
    static const int width = 4;

    if (value == 0.0) {
    5946:	8b 85       	ldd	r24, Y+11	; 0x0b
    5948:	9c 85       	ldd	r25, Y+12	; 0x0c
    594a:	ad 85       	ldd	r26, Y+13	; 0x0d
    594c:	be 85       	ldd	r27, Y+14	; 0x0e
    594e:	20 e0       	ldi	r18, 0x00	; 0
    5950:	30 e0       	ldi	r19, 0x00	; 0
    5952:	a9 01       	movw	r20, r18
    5954:	bc 01       	movw	r22, r24
    5956:	cd 01       	movw	r24, r26
    5958:	0e 94 6b 2f 	call	0x5ed6	; 0x5ed6 <__cmpsf2>
    595c:	88 23       	and	r24, r24
    595e:	59 f4       	brne	.+22     	; 0x5976 <ftoa_fixed+0x5a>
        buffer[0] = '0';
    5960:	89 85       	ldd	r24, Y+9	; 0x09
    5962:	9a 85       	ldd	r25, Y+10	; 0x0a
    5964:	20 e3       	ldi	r18, 0x30	; 48
    5966:	fc 01       	movw	r30, r24
    5968:	20 83       	st	Z, r18
        buffer[1] = '\0';
    596a:	89 85       	ldd	r24, Y+9	; 0x09
    596c:	9a 85       	ldd	r25, Y+10	; 0x0a
    596e:	01 96       	adiw	r24, 0x01	; 1
    5970:	fc 01       	movw	r30, r24
    5972:	10 82       	st	Z, r1
        return;
    5974:	18 c1       	rjmp	.+560    	; 0x5ba6 <ftoa_fixed+0x28a>
    }         

    if (value < 0.0) {
    5976:	8b 85       	ldd	r24, Y+11	; 0x0b
    5978:	9c 85       	ldd	r25, Y+12	; 0x0c
    597a:	ad 85       	ldd	r26, Y+13	; 0x0d
    597c:	be 85       	ldd	r27, Y+14	; 0x0e
    597e:	20 e0       	ldi	r18, 0x00	; 0
    5980:	30 e0       	ldi	r19, 0x00	; 0
    5982:	a9 01       	movw	r20, r18
    5984:	bc 01       	movw	r22, r24
    5986:	cd 01       	movw	r24, r26
    5988:	0e 94 6b 2f 	call	0x5ed6	; 0x5ed6 <__cmpsf2>
    598c:	88 23       	and	r24, r24
    598e:	9c f4       	brge	.+38     	; 0x59b6 <ftoa_fixed+0x9a>
        *buffer++ = '-';
    5990:	89 85       	ldd	r24, Y+9	; 0x09
    5992:	9a 85       	ldd	r25, Y+10	; 0x0a
    5994:	9c 01       	movw	r18, r24
    5996:	2f 5f       	subi	r18, 0xFF	; 255
    5998:	3f 4f       	sbci	r19, 0xFF	; 255
    599a:	29 87       	std	Y+9, r18	; 0x09
    599c:	3a 87       	std	Y+10, r19	; 0x0a
    599e:	2d e2       	ldi	r18, 0x2D	; 45
    59a0:	fc 01       	movw	r30, r24
    59a2:	20 83       	st	Z, r18
        value = -value;
    59a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    59a6:	9c 85       	ldd	r25, Y+12	; 0x0c
    59a8:	ad 85       	ldd	r26, Y+13	; 0x0d
    59aa:	be 85       	ldd	r27, Y+14	; 0x0e
    59ac:	b0 58       	subi	r27, 0x80	; 128
    59ae:	8b 87       	std	Y+11, r24	; 0x0b
    59b0:	9c 87       	std	Y+12, r25	; 0x0c
    59b2:	ad 87       	std	Y+13, r26	; 0x0d
    59b4:	be 87       	std	Y+14, r27	; 0x0e
    }

    exponent = normalize(&value);
    59b6:	ce 01       	movw	r24, r28
    59b8:	0b 96       	adiw	r24, 0x0b	; 11
    59ba:	0e 94 21 2c 	call	0x5842	; 0x5842 <normalize>
    59be:	89 83       	std	Y+1, r24	; 0x01
    59c0:	9a 83       	std	Y+2, r25	; 0x02

    while (exponent > 0) {
    59c2:	53 c0       	rjmp	.+166    	; 0x5a6a <ftoa_fixed+0x14e>
        int digit = value * 10;
    59c4:	8b 85       	ldd	r24, Y+11	; 0x0b
    59c6:	9c 85       	ldd	r25, Y+12	; 0x0c
    59c8:	ad 85       	ldd	r26, Y+13	; 0x0d
    59ca:	be 85       	ldd	r27, Y+14	; 0x0e
    59cc:	20 e0       	ldi	r18, 0x00	; 0
    59ce:	30 e0       	ldi	r19, 0x00	; 0
    59d0:	40 e2       	ldi	r20, 0x20	; 32
    59d2:	51 e4       	ldi	r21, 0x41	; 65
    59d4:	bc 01       	movw	r22, r24
    59d6:	cd 01       	movw	r24, r26
    59d8:	0e 94 cf 30 	call	0x619e	; 0x619e <__mulsf3>
    59dc:	dc 01       	movw	r26, r24
    59de:	cb 01       	movw	r24, r22
    59e0:	bc 01       	movw	r22, r24
    59e2:	cd 01       	movw	r24, r26
    59e4:	0e 94 e2 2f 	call	0x5fc4	; 0x5fc4 <__fixsfsi>
    59e8:	dc 01       	movw	r26, r24
    59ea:	cb 01       	movw	r24, r22
    59ec:	8d 83       	std	Y+5, r24	; 0x05
    59ee:	9e 83       	std	Y+6, r25	; 0x06
        *buffer++ = digit + '0';
    59f0:	89 85       	ldd	r24, Y+9	; 0x09
    59f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    59f4:	9c 01       	movw	r18, r24
    59f6:	2f 5f       	subi	r18, 0xFF	; 255
    59f8:	3f 4f       	sbci	r19, 0xFF	; 255
    59fa:	29 87       	std	Y+9, r18	; 0x09
    59fc:	3a 87       	std	Y+10, r19	; 0x0a
    59fe:	2d 81       	ldd	r18, Y+5	; 0x05
    5a00:	20 5d       	subi	r18, 0xD0	; 208
    5a02:	fc 01       	movw	r30, r24
    5a04:	20 83       	st	Z, r18
        value = value * 10 - digit;
    5a06:	8b 85       	ldd	r24, Y+11	; 0x0b
    5a08:	9c 85       	ldd	r25, Y+12	; 0x0c
    5a0a:	ad 85       	ldd	r26, Y+13	; 0x0d
    5a0c:	be 85       	ldd	r27, Y+14	; 0x0e
    5a0e:	20 e0       	ldi	r18, 0x00	; 0
    5a10:	30 e0       	ldi	r19, 0x00	; 0
    5a12:	40 e2       	ldi	r20, 0x20	; 32
    5a14:	51 e4       	ldi	r21, 0x41	; 65
    5a16:	bc 01       	movw	r22, r24
    5a18:	cd 01       	movw	r24, r26
    5a1a:	0e 94 cf 30 	call	0x619e	; 0x619e <__mulsf3>
    5a1e:	dc 01       	movw	r26, r24
    5a20:	cb 01       	movw	r24, r22
    5a22:	6c 01       	movw	r12, r24
    5a24:	7d 01       	movw	r14, r26
    5a26:	8d 81       	ldd	r24, Y+5	; 0x05
    5a28:	9e 81       	ldd	r25, Y+6	; 0x06
    5a2a:	09 2e       	mov	r0, r25
    5a2c:	00 0c       	add	r0, r0
    5a2e:	aa 0b       	sbc	r26, r26
    5a30:	bb 0b       	sbc	r27, r27
    5a32:	bc 01       	movw	r22, r24
    5a34:	cd 01       	movw	r24, r26
    5a36:	0e 94 1a 30 	call	0x6034	; 0x6034 <__floatsisf>
    5a3a:	dc 01       	movw	r26, r24
    5a3c:	cb 01       	movw	r24, r22
    5a3e:	9c 01       	movw	r18, r24
    5a40:	ad 01       	movw	r20, r26
    5a42:	c7 01       	movw	r24, r14
    5a44:	b6 01       	movw	r22, r12
    5a46:	0e 94 fe 2e 	call	0x5dfc	; 0x5dfc <__subsf3>
    5a4a:	dc 01       	movw	r26, r24
    5a4c:	cb 01       	movw	r24, r22
    5a4e:	8b 87       	std	Y+11, r24	; 0x0b
    5a50:	9c 87       	std	Y+12, r25	; 0x0c
    5a52:	ad 87       	std	Y+13, r26	; 0x0d
    5a54:	be 87       	std	Y+14, r27	; 0x0e
        ++places;
    5a56:	8b 81       	ldd	r24, Y+3	; 0x03
    5a58:	9c 81       	ldd	r25, Y+4	; 0x04
    5a5a:	01 96       	adiw	r24, 0x01	; 1
    5a5c:	8b 83       	std	Y+3, r24	; 0x03
    5a5e:	9c 83       	std	Y+4, r25	; 0x04
        --exponent;
    5a60:	89 81       	ldd	r24, Y+1	; 0x01
    5a62:	9a 81       	ldd	r25, Y+2	; 0x02
    5a64:	01 97       	sbiw	r24, 0x01	; 1
    5a66:	89 83       	std	Y+1, r24	; 0x01
    5a68:	9a 83       	std	Y+2, r25	; 0x02
        value = -value;
    }

    exponent = normalize(&value);

    while (exponent > 0) {
    5a6a:	89 81       	ldd	r24, Y+1	; 0x01
    5a6c:	9a 81       	ldd	r25, Y+2	; 0x02
    5a6e:	18 16       	cp	r1, r24
    5a70:	19 06       	cpc	r1, r25
    5a72:	0c f4       	brge	.+2      	; 0x5a76 <ftoa_fixed+0x15a>
    5a74:	a7 cf       	rjmp	.-178    	; 0x59c4 <ftoa_fixed+0xa8>
        value = value * 10 - digit;
        ++places;
        --exponent;
    }

    if (places == 0)
    5a76:	8b 81       	ldd	r24, Y+3	; 0x03
    5a78:	9c 81       	ldd	r25, Y+4	; 0x04
    5a7a:	89 2b       	or	r24, r25
    5a7c:	51 f4       	brne	.+20     	; 0x5a92 <ftoa_fixed+0x176>
        *buffer++ = '0';
    5a7e:	89 85       	ldd	r24, Y+9	; 0x09
    5a80:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a82:	9c 01       	movw	r18, r24
    5a84:	2f 5f       	subi	r18, 0xFF	; 255
    5a86:	3f 4f       	sbci	r19, 0xFF	; 255
    5a88:	29 87       	std	Y+9, r18	; 0x09
    5a8a:	3a 87       	std	Y+10, r19	; 0x0a
    5a8c:	20 e3       	ldi	r18, 0x30	; 48
    5a8e:	fc 01       	movw	r30, r24
    5a90:	20 83       	st	Z, r18

    *buffer++ = '.';
    5a92:	89 85       	ldd	r24, Y+9	; 0x09
    5a94:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a96:	9c 01       	movw	r18, r24
    5a98:	2f 5f       	subi	r18, 0xFF	; 255
    5a9a:	3f 4f       	sbci	r19, 0xFF	; 255
    5a9c:	29 87       	std	Y+9, r18	; 0x09
    5a9e:	3a 87       	std	Y+10, r19	; 0x0a
    5aa0:	2e e2       	ldi	r18, 0x2E	; 46
    5aa2:	fc 01       	movw	r30, r24
    5aa4:	20 83       	st	Z, r18

    while (exponent < 0 && places < width) {
    5aa6:	14 c0       	rjmp	.+40     	; 0x5ad0 <ftoa_fixed+0x1b4>
        *buffer++ = '0';
    5aa8:	89 85       	ldd	r24, Y+9	; 0x09
    5aaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    5aac:	9c 01       	movw	r18, r24
    5aae:	2f 5f       	subi	r18, 0xFF	; 255
    5ab0:	3f 4f       	sbci	r19, 0xFF	; 255
    5ab2:	29 87       	std	Y+9, r18	; 0x09
    5ab4:	3a 87       	std	Y+10, r19	; 0x0a
    5ab6:	20 e3       	ldi	r18, 0x30	; 48
    5ab8:	fc 01       	movw	r30, r24
    5aba:	20 83       	st	Z, r18
        --exponent;
    5abc:	89 81       	ldd	r24, Y+1	; 0x01
    5abe:	9a 81       	ldd	r25, Y+2	; 0x02
    5ac0:	01 97       	sbiw	r24, 0x01	; 1
    5ac2:	89 83       	std	Y+1, r24	; 0x01
    5ac4:	9a 83       	std	Y+2, r25	; 0x02
        ++places;
    5ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    5ac8:	9c 81       	ldd	r25, Y+4	; 0x04
    5aca:	01 96       	adiw	r24, 0x01	; 1
    5acc:	8b 83       	std	Y+3, r24	; 0x03
    5ace:	9c 83       	std	Y+4, r25	; 0x04
    if (places == 0)
        *buffer++ = '0';

    *buffer++ = '.';

    while (exponent < 0 && places < width) {
    5ad0:	89 81       	ldd	r24, Y+1	; 0x01
    5ad2:	9a 81       	ldd	r25, Y+2	; 0x02
    5ad4:	99 23       	and	r25, r25
    5ad6:	0c f0       	brlt	.+2      	; 0x5ada <ftoa_fixed+0x1be>
    5ad8:	58 c0       	rjmp	.+176    	; 0x5b8a <ftoa_fixed+0x26e>
    5ada:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <width.5062>
    5ade:	90 91 c3 20 	lds	r25, 0x20C3	; 0x8020c3 <width.5062+0x1>
    5ae2:	2b 81       	ldd	r18, Y+3	; 0x03
    5ae4:	3c 81       	ldd	r19, Y+4	; 0x04
    5ae6:	28 17       	cp	r18, r24
    5ae8:	39 07       	cpc	r19, r25
    5aea:	f4 f2       	brlt	.-68     	; 0x5aa8 <ftoa_fixed+0x18c>
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    5aec:	4e c0       	rjmp	.+156    	; 0x5b8a <ftoa_fixed+0x26e>
        int digit = value * 10.0;
    5aee:	8b 85       	ldd	r24, Y+11	; 0x0b
    5af0:	9c 85       	ldd	r25, Y+12	; 0x0c
    5af2:	ad 85       	ldd	r26, Y+13	; 0x0d
    5af4:	be 85       	ldd	r27, Y+14	; 0x0e
    5af6:	20 e0       	ldi	r18, 0x00	; 0
    5af8:	30 e0       	ldi	r19, 0x00	; 0
    5afa:	40 e2       	ldi	r20, 0x20	; 32
    5afc:	51 e4       	ldi	r21, 0x41	; 65
    5afe:	bc 01       	movw	r22, r24
    5b00:	cd 01       	movw	r24, r26
    5b02:	0e 94 cf 30 	call	0x619e	; 0x619e <__mulsf3>
    5b06:	dc 01       	movw	r26, r24
    5b08:	cb 01       	movw	r24, r22
    5b0a:	bc 01       	movw	r22, r24
    5b0c:	cd 01       	movw	r24, r26
    5b0e:	0e 94 e2 2f 	call	0x5fc4	; 0x5fc4 <__fixsfsi>
    5b12:	dc 01       	movw	r26, r24
    5b14:	cb 01       	movw	r24, r22
    5b16:	8f 83       	std	Y+7, r24	; 0x07
    5b18:	98 87       	std	Y+8, r25	; 0x08
        *buffer++ = digit + '0';
    5b1a:	89 85       	ldd	r24, Y+9	; 0x09
    5b1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b1e:	9c 01       	movw	r18, r24
    5b20:	2f 5f       	subi	r18, 0xFF	; 255
    5b22:	3f 4f       	sbci	r19, 0xFF	; 255
    5b24:	29 87       	std	Y+9, r18	; 0x09
    5b26:	3a 87       	std	Y+10, r19	; 0x0a
    5b28:	2f 81       	ldd	r18, Y+7	; 0x07
    5b2a:	20 5d       	subi	r18, 0xD0	; 208
    5b2c:	fc 01       	movw	r30, r24
    5b2e:	20 83       	st	Z, r18
        value = value * 10.0 - digit;
    5b30:	8b 85       	ldd	r24, Y+11	; 0x0b
    5b32:	9c 85       	ldd	r25, Y+12	; 0x0c
    5b34:	ad 85       	ldd	r26, Y+13	; 0x0d
    5b36:	be 85       	ldd	r27, Y+14	; 0x0e
    5b38:	20 e0       	ldi	r18, 0x00	; 0
    5b3a:	30 e0       	ldi	r19, 0x00	; 0
    5b3c:	40 e2       	ldi	r20, 0x20	; 32
    5b3e:	51 e4       	ldi	r21, 0x41	; 65
    5b40:	bc 01       	movw	r22, r24
    5b42:	cd 01       	movw	r24, r26
    5b44:	0e 94 cf 30 	call	0x619e	; 0x619e <__mulsf3>
    5b48:	dc 01       	movw	r26, r24
    5b4a:	cb 01       	movw	r24, r22
    5b4c:	6c 01       	movw	r12, r24
    5b4e:	7d 01       	movw	r14, r26
    5b50:	8f 81       	ldd	r24, Y+7	; 0x07
    5b52:	98 85       	ldd	r25, Y+8	; 0x08
    5b54:	09 2e       	mov	r0, r25
    5b56:	00 0c       	add	r0, r0
    5b58:	aa 0b       	sbc	r26, r26
    5b5a:	bb 0b       	sbc	r27, r27
    5b5c:	bc 01       	movw	r22, r24
    5b5e:	cd 01       	movw	r24, r26
    5b60:	0e 94 1a 30 	call	0x6034	; 0x6034 <__floatsisf>
    5b64:	dc 01       	movw	r26, r24
    5b66:	cb 01       	movw	r24, r22
    5b68:	9c 01       	movw	r18, r24
    5b6a:	ad 01       	movw	r20, r26
    5b6c:	c7 01       	movw	r24, r14
    5b6e:	b6 01       	movw	r22, r12
    5b70:	0e 94 fe 2e 	call	0x5dfc	; 0x5dfc <__subsf3>
    5b74:	dc 01       	movw	r26, r24
    5b76:	cb 01       	movw	r24, r22
    5b78:	8b 87       	std	Y+11, r24	; 0x0b
    5b7a:	9c 87       	std	Y+12, r25	; 0x0c
    5b7c:	ad 87       	std	Y+13, r26	; 0x0d
    5b7e:	be 87       	std	Y+14, r27	; 0x0e
        ++places;
    5b80:	8b 81       	ldd	r24, Y+3	; 0x03
    5b82:	9c 81       	ldd	r25, Y+4	; 0x04
    5b84:	01 96       	adiw	r24, 0x01	; 1
    5b86:	8b 83       	std	Y+3, r24	; 0x03
    5b88:	9c 83       	std	Y+4, r25	; 0x04
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    5b8a:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <width.5062>
    5b8e:	90 91 c3 20 	lds	r25, 0x20C3	; 0x8020c3 <width.5062+0x1>
    5b92:	2b 81       	ldd	r18, Y+3	; 0x03
    5b94:	3c 81       	ldd	r19, Y+4	; 0x04
    5b96:	28 17       	cp	r18, r24
    5b98:	39 07       	cpc	r19, r25
    5b9a:	0c f4       	brge	.+2      	; 0x5b9e <ftoa_fixed+0x282>
    5b9c:	a8 cf       	rjmp	.-176    	; 0x5aee <ftoa_fixed+0x1d2>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
        ++places;
    }
    *buffer = '\0';
    5b9e:	89 85       	ldd	r24, Y+9	; 0x09
    5ba0:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ba2:	fc 01       	movw	r30, r24
    5ba4:	10 82       	st	Z, r1
}
    5ba6:	2e 96       	adiw	r28, 0x0e	; 14
    5ba8:	cd bf       	out	0x3d, r28	; 61
    5baa:	de bf       	out	0x3e, r29	; 62
    5bac:	df 91       	pop	r29
    5bae:	cf 91       	pop	r28
    5bb0:	ff 90       	pop	r15
    5bb2:	ef 90       	pop	r14
    5bb4:	df 90       	pop	r13
    5bb6:	cf 90       	pop	r12
    5bb8:	08 95       	ret

00005bba <ftoa_sci>:

void ftoa_sci(char *buffer, double value) {
    5bba:	cf 92       	push	r12
    5bbc:	df 92       	push	r13
    5bbe:	ef 92       	push	r14
    5bc0:	ff 92       	push	r15
    5bc2:	cf 93       	push	r28
    5bc4:	df 93       	push	r29
    5bc6:	cd b7       	in	r28, 0x3d	; 61
    5bc8:	de b7       	in	r29, 0x3e	; 62
    5bca:	2e 97       	sbiw	r28, 0x0e	; 14
    5bcc:	cd bf       	out	0x3d, r28	; 61
    5bce:	de bf       	out	0x3e, r29	; 62
    5bd0:	89 87       	std	Y+9, r24	; 0x09
    5bd2:	9a 87       	std	Y+10, r25	; 0x0a
    5bd4:	4b 87       	std	Y+11, r20	; 0x0b
    5bd6:	5c 87       	std	Y+12, r21	; 0x0c
    5bd8:	6d 87       	std	Y+13, r22	; 0x0d
    5bda:	7e 87       	std	Y+14, r23	; 0x0e
    int exponent = 0;    
    5bdc:	1b 82       	std	Y+3, r1	; 0x03
    5bde:	1c 82       	std	Y+4, r1	; 0x04
    static const int width = 4;

    if (value == 0.0) {
    5be0:	8b 85       	ldd	r24, Y+11	; 0x0b
    5be2:	9c 85       	ldd	r25, Y+12	; 0x0c
    5be4:	ad 85       	ldd	r26, Y+13	; 0x0d
    5be6:	be 85       	ldd	r27, Y+14	; 0x0e
    5be8:	20 e0       	ldi	r18, 0x00	; 0
    5bea:	30 e0       	ldi	r19, 0x00	; 0
    5bec:	a9 01       	movw	r20, r18
    5bee:	bc 01       	movw	r22, r24
    5bf0:	cd 01       	movw	r24, r26
    5bf2:	0e 94 6b 2f 	call	0x5ed6	; 0x5ed6 <__cmpsf2>
    5bf6:	88 23       	and	r24, r24
    5bf8:	59 f4       	brne	.+22     	; 0x5c10 <ftoa_sci+0x56>
        buffer[0] = '0';
    5bfa:	89 85       	ldd	r24, Y+9	; 0x09
    5bfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    5bfe:	20 e3       	ldi	r18, 0x30	; 48
    5c00:	fc 01       	movw	r30, r24
    5c02:	20 83       	st	Z, r18
        buffer[1] = '\0';
    5c04:	89 85       	ldd	r24, Y+9	; 0x09
    5c06:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c08:	01 96       	adiw	r24, 0x01	; 1
    5c0a:	fc 01       	movw	r30, r24
    5c0c:	10 82       	st	Z, r1
        return;
    5c0e:	ec c0       	rjmp	.+472    	; 0x5de8 <ftoa_sci+0x22e>
    }

    if (value < 0.0) {
    5c10:	8b 85       	ldd	r24, Y+11	; 0x0b
    5c12:	9c 85       	ldd	r25, Y+12	; 0x0c
    5c14:	ad 85       	ldd	r26, Y+13	; 0x0d
    5c16:	be 85       	ldd	r27, Y+14	; 0x0e
    5c18:	20 e0       	ldi	r18, 0x00	; 0
    5c1a:	30 e0       	ldi	r19, 0x00	; 0
    5c1c:	a9 01       	movw	r20, r18
    5c1e:	bc 01       	movw	r22, r24
    5c20:	cd 01       	movw	r24, r26
    5c22:	0e 94 6b 2f 	call	0x5ed6	; 0x5ed6 <__cmpsf2>
    5c26:	88 23       	and	r24, r24
    5c28:	9c f4       	brge	.+38     	; 0x5c50 <ftoa_sci+0x96>
        *buffer++ = '-';
    5c2a:	89 85       	ldd	r24, Y+9	; 0x09
    5c2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c2e:	9c 01       	movw	r18, r24
    5c30:	2f 5f       	subi	r18, 0xFF	; 255
    5c32:	3f 4f       	sbci	r19, 0xFF	; 255
    5c34:	29 87       	std	Y+9, r18	; 0x09
    5c36:	3a 87       	std	Y+10, r19	; 0x0a
    5c38:	2d e2       	ldi	r18, 0x2D	; 45
    5c3a:	fc 01       	movw	r30, r24
    5c3c:	20 83       	st	Z, r18
        value = -value;
    5c3e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5c40:	9c 85       	ldd	r25, Y+12	; 0x0c
    5c42:	ad 85       	ldd	r26, Y+13	; 0x0d
    5c44:	be 85       	ldd	r27, Y+14	; 0x0e
    5c46:	b0 58       	subi	r27, 0x80	; 128
    5c48:	8b 87       	std	Y+11, r24	; 0x0b
    5c4a:	9c 87       	std	Y+12, r25	; 0x0c
    5c4c:	ad 87       	std	Y+13, r26	; 0x0d
    5c4e:	be 87       	std	Y+14, r27	; 0x0e
    }

    exponent = normalize(&value);
    5c50:	ce 01       	movw	r24, r28
    5c52:	0b 96       	adiw	r24, 0x0b	; 11
    5c54:	0e 94 21 2c 	call	0x5842	; 0x5842 <normalize>
    5c58:	8b 83       	std	Y+3, r24	; 0x03
    5c5a:	9c 83       	std	Y+4, r25	; 0x04

    int digit = value * 10.0;
    5c5c:	8b 85       	ldd	r24, Y+11	; 0x0b
    5c5e:	9c 85       	ldd	r25, Y+12	; 0x0c
    5c60:	ad 85       	ldd	r26, Y+13	; 0x0d
    5c62:	be 85       	ldd	r27, Y+14	; 0x0e
    5c64:	20 e0       	ldi	r18, 0x00	; 0
    5c66:	30 e0       	ldi	r19, 0x00	; 0
    5c68:	40 e2       	ldi	r20, 0x20	; 32
    5c6a:	51 e4       	ldi	r21, 0x41	; 65
    5c6c:	bc 01       	movw	r22, r24
    5c6e:	cd 01       	movw	r24, r26
    5c70:	0e 94 cf 30 	call	0x619e	; 0x619e <__mulsf3>
    5c74:	dc 01       	movw	r26, r24
    5c76:	cb 01       	movw	r24, r22
    5c78:	bc 01       	movw	r22, r24
    5c7a:	cd 01       	movw	r24, r26
    5c7c:	0e 94 e2 2f 	call	0x5fc4	; 0x5fc4 <__fixsfsi>
    5c80:	dc 01       	movw	r26, r24
    5c82:	cb 01       	movw	r24, r22
    5c84:	8d 83       	std	Y+5, r24	; 0x05
    5c86:	9e 83       	std	Y+6, r25	; 0x06
    *buffer++ = digit + '0';
    5c88:	89 85       	ldd	r24, Y+9	; 0x09
    5c8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c8c:	9c 01       	movw	r18, r24
    5c8e:	2f 5f       	subi	r18, 0xFF	; 255
    5c90:	3f 4f       	sbci	r19, 0xFF	; 255
    5c92:	29 87       	std	Y+9, r18	; 0x09
    5c94:	3a 87       	std	Y+10, r19	; 0x0a
    5c96:	2d 81       	ldd	r18, Y+5	; 0x05
    5c98:	20 5d       	subi	r18, 0xD0	; 208
    5c9a:	fc 01       	movw	r30, r24
    5c9c:	20 83       	st	Z, r18
    value = value * 10.0 - digit;
    5c9e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5ca0:	9c 85       	ldd	r25, Y+12	; 0x0c
    5ca2:	ad 85       	ldd	r26, Y+13	; 0x0d
    5ca4:	be 85       	ldd	r27, Y+14	; 0x0e
    5ca6:	20 e0       	ldi	r18, 0x00	; 0
    5ca8:	30 e0       	ldi	r19, 0x00	; 0
    5caa:	40 e2       	ldi	r20, 0x20	; 32
    5cac:	51 e4       	ldi	r21, 0x41	; 65
    5cae:	bc 01       	movw	r22, r24
    5cb0:	cd 01       	movw	r24, r26
    5cb2:	0e 94 cf 30 	call	0x619e	; 0x619e <__mulsf3>
    5cb6:	dc 01       	movw	r26, r24
    5cb8:	cb 01       	movw	r24, r22
    5cba:	6c 01       	movw	r12, r24
    5cbc:	7d 01       	movw	r14, r26
    5cbe:	8d 81       	ldd	r24, Y+5	; 0x05
    5cc0:	9e 81       	ldd	r25, Y+6	; 0x06
    5cc2:	09 2e       	mov	r0, r25
    5cc4:	00 0c       	add	r0, r0
    5cc6:	aa 0b       	sbc	r26, r26
    5cc8:	bb 0b       	sbc	r27, r27
    5cca:	bc 01       	movw	r22, r24
    5ccc:	cd 01       	movw	r24, r26
    5cce:	0e 94 1a 30 	call	0x6034	; 0x6034 <__floatsisf>
    5cd2:	dc 01       	movw	r26, r24
    5cd4:	cb 01       	movw	r24, r22
    5cd6:	9c 01       	movw	r18, r24
    5cd8:	ad 01       	movw	r20, r26
    5cda:	c7 01       	movw	r24, r14
    5cdc:	b6 01       	movw	r22, r12
    5cde:	0e 94 fe 2e 	call	0x5dfc	; 0x5dfc <__subsf3>
    5ce2:	dc 01       	movw	r26, r24
    5ce4:	cb 01       	movw	r24, r22
    5ce6:	8b 87       	std	Y+11, r24	; 0x0b
    5ce8:	9c 87       	std	Y+12, r25	; 0x0c
    5cea:	ad 87       	std	Y+13, r26	; 0x0d
    5cec:	be 87       	std	Y+14, r27	; 0x0e
    --exponent;
    5cee:	8b 81       	ldd	r24, Y+3	; 0x03
    5cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    5cf2:	01 97       	sbiw	r24, 0x01	; 1
    5cf4:	8b 83       	std	Y+3, r24	; 0x03
    5cf6:	9c 83       	std	Y+4, r25	; 0x04

    *buffer++ = '.';
    5cf8:	89 85       	ldd	r24, Y+9	; 0x09
    5cfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    5cfc:	9c 01       	movw	r18, r24
    5cfe:	2f 5f       	subi	r18, 0xFF	; 255
    5d00:	3f 4f       	sbci	r19, 0xFF	; 255
    5d02:	29 87       	std	Y+9, r18	; 0x09
    5d04:	3a 87       	std	Y+10, r19	; 0x0a
    5d06:	2e e2       	ldi	r18, 0x2E	; 46
    5d08:	fc 01       	movw	r30, r24
    5d0a:	20 83       	st	Z, r18

    for (int i = 0; i < width; i++) {
    5d0c:	19 82       	std	Y+1, r1	; 0x01
    5d0e:	1a 82       	std	Y+2, r1	; 0x02
    5d10:	4e c0       	rjmp	.+156    	; 0x5dae <ftoa_sci+0x1f4>
        int digit = value * 10.0;
    5d12:	8b 85       	ldd	r24, Y+11	; 0x0b
    5d14:	9c 85       	ldd	r25, Y+12	; 0x0c
    5d16:	ad 85       	ldd	r26, Y+13	; 0x0d
    5d18:	be 85       	ldd	r27, Y+14	; 0x0e
    5d1a:	20 e0       	ldi	r18, 0x00	; 0
    5d1c:	30 e0       	ldi	r19, 0x00	; 0
    5d1e:	40 e2       	ldi	r20, 0x20	; 32
    5d20:	51 e4       	ldi	r21, 0x41	; 65
    5d22:	bc 01       	movw	r22, r24
    5d24:	cd 01       	movw	r24, r26
    5d26:	0e 94 cf 30 	call	0x619e	; 0x619e <__mulsf3>
    5d2a:	dc 01       	movw	r26, r24
    5d2c:	cb 01       	movw	r24, r22
    5d2e:	bc 01       	movw	r22, r24
    5d30:	cd 01       	movw	r24, r26
    5d32:	0e 94 e2 2f 	call	0x5fc4	; 0x5fc4 <__fixsfsi>
    5d36:	dc 01       	movw	r26, r24
    5d38:	cb 01       	movw	r24, r22
    5d3a:	8f 83       	std	Y+7, r24	; 0x07
    5d3c:	98 87       	std	Y+8, r25	; 0x08
        *buffer++ = digit + '0';
    5d3e:	89 85       	ldd	r24, Y+9	; 0x09
    5d40:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d42:	9c 01       	movw	r18, r24
    5d44:	2f 5f       	subi	r18, 0xFF	; 255
    5d46:	3f 4f       	sbci	r19, 0xFF	; 255
    5d48:	29 87       	std	Y+9, r18	; 0x09
    5d4a:	3a 87       	std	Y+10, r19	; 0x0a
    5d4c:	2f 81       	ldd	r18, Y+7	; 0x07
    5d4e:	20 5d       	subi	r18, 0xD0	; 208
    5d50:	fc 01       	movw	r30, r24
    5d52:	20 83       	st	Z, r18
        value = value * 10.0 - digit;
    5d54:	8b 85       	ldd	r24, Y+11	; 0x0b
    5d56:	9c 85       	ldd	r25, Y+12	; 0x0c
    5d58:	ad 85       	ldd	r26, Y+13	; 0x0d
    5d5a:	be 85       	ldd	r27, Y+14	; 0x0e
    5d5c:	20 e0       	ldi	r18, 0x00	; 0
    5d5e:	30 e0       	ldi	r19, 0x00	; 0
    5d60:	40 e2       	ldi	r20, 0x20	; 32
    5d62:	51 e4       	ldi	r21, 0x41	; 65
    5d64:	bc 01       	movw	r22, r24
    5d66:	cd 01       	movw	r24, r26
    5d68:	0e 94 cf 30 	call	0x619e	; 0x619e <__mulsf3>
    5d6c:	dc 01       	movw	r26, r24
    5d6e:	cb 01       	movw	r24, r22
    5d70:	6c 01       	movw	r12, r24
    5d72:	7d 01       	movw	r14, r26
    5d74:	8f 81       	ldd	r24, Y+7	; 0x07
    5d76:	98 85       	ldd	r25, Y+8	; 0x08
    5d78:	09 2e       	mov	r0, r25
    5d7a:	00 0c       	add	r0, r0
    5d7c:	aa 0b       	sbc	r26, r26
    5d7e:	bb 0b       	sbc	r27, r27
    5d80:	bc 01       	movw	r22, r24
    5d82:	cd 01       	movw	r24, r26
    5d84:	0e 94 1a 30 	call	0x6034	; 0x6034 <__floatsisf>
    5d88:	dc 01       	movw	r26, r24
    5d8a:	cb 01       	movw	r24, r22
    5d8c:	9c 01       	movw	r18, r24
    5d8e:	ad 01       	movw	r20, r26
    5d90:	c7 01       	movw	r24, r14
    5d92:	b6 01       	movw	r22, r12
    5d94:	0e 94 fe 2e 	call	0x5dfc	; 0x5dfc <__subsf3>
    5d98:	dc 01       	movw	r26, r24
    5d9a:	cb 01       	movw	r24, r22
    5d9c:	8b 87       	std	Y+11, r24	; 0x0b
    5d9e:	9c 87       	std	Y+12, r25	; 0x0c
    5da0:	ad 87       	std	Y+13, r26	; 0x0d
    5da2:	be 87       	std	Y+14, r27	; 0x0e
    value = value * 10.0 - digit;
    --exponent;

    *buffer++ = '.';

    for (int i = 0; i < width; i++) {
    5da4:	89 81       	ldd	r24, Y+1	; 0x01
    5da6:	9a 81       	ldd	r25, Y+2	; 0x02
    5da8:	01 96       	adiw	r24, 0x01	; 1
    5daa:	89 83       	std	Y+1, r24	; 0x01
    5dac:	9a 83       	std	Y+2, r25	; 0x02
    5dae:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <width.5079>
    5db2:	90 91 c5 20 	lds	r25, 0x20C5	; 0x8020c5 <width.5079+0x1>
    5db6:	29 81       	ldd	r18, Y+1	; 0x01
    5db8:	3a 81       	ldd	r19, Y+2	; 0x02
    5dba:	28 17       	cp	r18, r24
    5dbc:	39 07       	cpc	r19, r25
    5dbe:	0c f4       	brge	.+2      	; 0x5dc2 <ftoa_sci+0x208>
    5dc0:	a8 cf       	rjmp	.-176    	; 0x5d12 <ftoa_sci+0x158>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
    }

    *buffer++ = 'e';
    5dc2:	89 85       	ldd	r24, Y+9	; 0x09
    5dc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    5dc6:	9c 01       	movw	r18, r24
    5dc8:	2f 5f       	subi	r18, 0xFF	; 255
    5dca:	3f 4f       	sbci	r19, 0xFF	; 255
    5dcc:	29 87       	std	Y+9, r18	; 0x09
    5dce:	3a 87       	std	Y+10, r19	; 0x0a
    5dd0:	25 e6       	ldi	r18, 0x65	; 101
    5dd2:	fc 01       	movw	r30, r24
    5dd4:	20 83       	st	Z, r18
    itoa(exponent, buffer, 10);
    5dd6:	29 85       	ldd	r18, Y+9	; 0x09
    5dd8:	3a 85       	ldd	r19, Y+10	; 0x0a
    5dda:	8b 81       	ldd	r24, Y+3	; 0x03
    5ddc:	9c 81       	ldd	r25, Y+4	; 0x04
    5dde:	4a e0       	ldi	r20, 0x0A	; 10
    5de0:	50 e0       	ldi	r21, 0x00	; 0
    5de2:	b9 01       	movw	r22, r18
    5de4:	0e 94 46 36 	call	0x6c8c	; 0x6c8c <itoa>
}
    5de8:	2e 96       	adiw	r28, 0x0e	; 14
    5dea:	cd bf       	out	0x3d, r28	; 61
    5dec:	de bf       	out	0x3e, r29	; 62
    5dee:	df 91       	pop	r29
    5df0:	cf 91       	pop	r28
    5df2:	ff 90       	pop	r15
    5df4:	ef 90       	pop	r14
    5df6:	df 90       	pop	r13
    5df8:	cf 90       	pop	r12
    5dfa:	08 95       	ret

00005dfc <__subsf3>:
    5dfc:	50 58       	subi	r21, 0x80	; 128

00005dfe <__addsf3>:
    5dfe:	bb 27       	eor	r27, r27
    5e00:	aa 27       	eor	r26, r26
    5e02:	0e 94 16 2f 	call	0x5e2c	; 0x5e2c <__addsf3x>
    5e06:	0c 94 90 30 	jmp	0x6120	; 0x6120 <__fp_round>
    5e0a:	0e 94 82 30 	call	0x6104	; 0x6104 <__fp_pscA>
    5e0e:	38 f0       	brcs	.+14     	; 0x5e1e <__addsf3+0x20>
    5e10:	0e 94 89 30 	call	0x6112	; 0x6112 <__fp_pscB>
    5e14:	20 f0       	brcs	.+8      	; 0x5e1e <__addsf3+0x20>
    5e16:	39 f4       	brne	.+14     	; 0x5e26 <__addsf3+0x28>
    5e18:	9f 3f       	cpi	r25, 0xFF	; 255
    5e1a:	19 f4       	brne	.+6      	; 0x5e22 <__addsf3+0x24>
    5e1c:	26 f4       	brtc	.+8      	; 0x5e26 <__addsf3+0x28>
    5e1e:	0c 94 7f 30 	jmp	0x60fe	; 0x60fe <__fp_nan>
    5e22:	0e f4       	brtc	.+2      	; 0x5e26 <__addsf3+0x28>
    5e24:	e0 95       	com	r30
    5e26:	e7 fb       	bst	r30, 7
    5e28:	0c 94 79 30 	jmp	0x60f2	; 0x60f2 <__fp_inf>

00005e2c <__addsf3x>:
    5e2c:	e9 2f       	mov	r30, r25
    5e2e:	0e 94 a1 30 	call	0x6142	; 0x6142 <__fp_split3>
    5e32:	58 f3       	brcs	.-42     	; 0x5e0a <__addsf3+0xc>
    5e34:	ba 17       	cp	r27, r26
    5e36:	62 07       	cpc	r22, r18
    5e38:	73 07       	cpc	r23, r19
    5e3a:	84 07       	cpc	r24, r20
    5e3c:	95 07       	cpc	r25, r21
    5e3e:	20 f0       	brcs	.+8      	; 0x5e48 <__addsf3x+0x1c>
    5e40:	79 f4       	brne	.+30     	; 0x5e60 <__addsf3x+0x34>
    5e42:	a6 f5       	brtc	.+104    	; 0x5eac <__addsf3x+0x80>
    5e44:	0c 94 c3 30 	jmp	0x6186	; 0x6186 <__fp_zero>
    5e48:	0e f4       	brtc	.+2      	; 0x5e4c <__addsf3x+0x20>
    5e4a:	e0 95       	com	r30
    5e4c:	0b 2e       	mov	r0, r27
    5e4e:	ba 2f       	mov	r27, r26
    5e50:	a0 2d       	mov	r26, r0
    5e52:	0b 01       	movw	r0, r22
    5e54:	b9 01       	movw	r22, r18
    5e56:	90 01       	movw	r18, r0
    5e58:	0c 01       	movw	r0, r24
    5e5a:	ca 01       	movw	r24, r20
    5e5c:	a0 01       	movw	r20, r0
    5e5e:	11 24       	eor	r1, r1
    5e60:	ff 27       	eor	r31, r31
    5e62:	59 1b       	sub	r21, r25
    5e64:	99 f0       	breq	.+38     	; 0x5e8c <__addsf3x+0x60>
    5e66:	59 3f       	cpi	r21, 0xF9	; 249
    5e68:	50 f4       	brcc	.+20     	; 0x5e7e <__addsf3x+0x52>
    5e6a:	50 3e       	cpi	r21, 0xE0	; 224
    5e6c:	68 f1       	brcs	.+90     	; 0x5ec8 <__addsf3x+0x9c>
    5e6e:	1a 16       	cp	r1, r26
    5e70:	f0 40       	sbci	r31, 0x00	; 0
    5e72:	a2 2f       	mov	r26, r18
    5e74:	23 2f       	mov	r18, r19
    5e76:	34 2f       	mov	r19, r20
    5e78:	44 27       	eor	r20, r20
    5e7a:	58 5f       	subi	r21, 0xF8	; 248
    5e7c:	f3 cf       	rjmp	.-26     	; 0x5e64 <__addsf3x+0x38>
    5e7e:	46 95       	lsr	r20
    5e80:	37 95       	ror	r19
    5e82:	27 95       	ror	r18
    5e84:	a7 95       	ror	r26
    5e86:	f0 40       	sbci	r31, 0x00	; 0
    5e88:	53 95       	inc	r21
    5e8a:	c9 f7       	brne	.-14     	; 0x5e7e <__addsf3x+0x52>
    5e8c:	7e f4       	brtc	.+30     	; 0x5eac <__addsf3x+0x80>
    5e8e:	1f 16       	cp	r1, r31
    5e90:	ba 0b       	sbc	r27, r26
    5e92:	62 0b       	sbc	r22, r18
    5e94:	73 0b       	sbc	r23, r19
    5e96:	84 0b       	sbc	r24, r20
    5e98:	ba f0       	brmi	.+46     	; 0x5ec8 <__addsf3x+0x9c>
    5e9a:	91 50       	subi	r25, 0x01	; 1
    5e9c:	a1 f0       	breq	.+40     	; 0x5ec6 <__addsf3x+0x9a>
    5e9e:	ff 0f       	add	r31, r31
    5ea0:	bb 1f       	adc	r27, r27
    5ea2:	66 1f       	adc	r22, r22
    5ea4:	77 1f       	adc	r23, r23
    5ea6:	88 1f       	adc	r24, r24
    5ea8:	c2 f7       	brpl	.-16     	; 0x5e9a <__addsf3x+0x6e>
    5eaa:	0e c0       	rjmp	.+28     	; 0x5ec8 <__addsf3x+0x9c>
    5eac:	ba 0f       	add	r27, r26
    5eae:	62 1f       	adc	r22, r18
    5eb0:	73 1f       	adc	r23, r19
    5eb2:	84 1f       	adc	r24, r20
    5eb4:	48 f4       	brcc	.+18     	; 0x5ec8 <__addsf3x+0x9c>
    5eb6:	87 95       	ror	r24
    5eb8:	77 95       	ror	r23
    5eba:	67 95       	ror	r22
    5ebc:	b7 95       	ror	r27
    5ebe:	f7 95       	ror	r31
    5ec0:	9e 3f       	cpi	r25, 0xFE	; 254
    5ec2:	08 f0       	brcs	.+2      	; 0x5ec6 <__addsf3x+0x9a>
    5ec4:	b0 cf       	rjmp	.-160    	; 0x5e26 <__addsf3+0x28>
    5ec6:	93 95       	inc	r25
    5ec8:	88 0f       	add	r24, r24
    5eca:	08 f0       	brcs	.+2      	; 0x5ece <__addsf3x+0xa2>
    5ecc:	99 27       	eor	r25, r25
    5ece:	ee 0f       	add	r30, r30
    5ed0:	97 95       	ror	r25
    5ed2:	87 95       	ror	r24
    5ed4:	08 95       	ret

00005ed6 <__cmpsf2>:
    5ed6:	0e 94 55 30 	call	0x60aa	; 0x60aa <__fp_cmp>
    5eda:	08 f4       	brcc	.+2      	; 0x5ede <__cmpsf2+0x8>
    5edc:	81 e0       	ldi	r24, 0x01	; 1
    5ede:	08 95       	ret

00005ee0 <__divsf3>:
    5ee0:	0e 94 84 2f 	call	0x5f08	; 0x5f08 <__divsf3x>
    5ee4:	0c 94 90 30 	jmp	0x6120	; 0x6120 <__fp_round>
    5ee8:	0e 94 89 30 	call	0x6112	; 0x6112 <__fp_pscB>
    5eec:	58 f0       	brcs	.+22     	; 0x5f04 <__divsf3+0x24>
    5eee:	0e 94 82 30 	call	0x6104	; 0x6104 <__fp_pscA>
    5ef2:	40 f0       	brcs	.+16     	; 0x5f04 <__divsf3+0x24>
    5ef4:	29 f4       	brne	.+10     	; 0x5f00 <__divsf3+0x20>
    5ef6:	5f 3f       	cpi	r21, 0xFF	; 255
    5ef8:	29 f0       	breq	.+10     	; 0x5f04 <__divsf3+0x24>
    5efa:	0c 94 79 30 	jmp	0x60f2	; 0x60f2 <__fp_inf>
    5efe:	51 11       	cpse	r21, r1
    5f00:	0c 94 c4 30 	jmp	0x6188	; 0x6188 <__fp_szero>
    5f04:	0c 94 7f 30 	jmp	0x60fe	; 0x60fe <__fp_nan>

00005f08 <__divsf3x>:
    5f08:	0e 94 a1 30 	call	0x6142	; 0x6142 <__fp_split3>
    5f0c:	68 f3       	brcs	.-38     	; 0x5ee8 <__divsf3+0x8>

00005f0e <__divsf3_pse>:
    5f0e:	99 23       	and	r25, r25
    5f10:	b1 f3       	breq	.-20     	; 0x5efe <__divsf3+0x1e>
    5f12:	55 23       	and	r21, r21
    5f14:	91 f3       	breq	.-28     	; 0x5efa <__divsf3+0x1a>
    5f16:	95 1b       	sub	r25, r21
    5f18:	55 0b       	sbc	r21, r21
    5f1a:	bb 27       	eor	r27, r27
    5f1c:	aa 27       	eor	r26, r26
    5f1e:	62 17       	cp	r22, r18
    5f20:	73 07       	cpc	r23, r19
    5f22:	84 07       	cpc	r24, r20
    5f24:	38 f0       	brcs	.+14     	; 0x5f34 <__divsf3_pse+0x26>
    5f26:	9f 5f       	subi	r25, 0xFF	; 255
    5f28:	5f 4f       	sbci	r21, 0xFF	; 255
    5f2a:	22 0f       	add	r18, r18
    5f2c:	33 1f       	adc	r19, r19
    5f2e:	44 1f       	adc	r20, r20
    5f30:	aa 1f       	adc	r26, r26
    5f32:	a9 f3       	breq	.-22     	; 0x5f1e <__divsf3_pse+0x10>
    5f34:	35 d0       	rcall	.+106    	; 0x5fa0 <__divsf3_pse+0x92>
    5f36:	0e 2e       	mov	r0, r30
    5f38:	3a f0       	brmi	.+14     	; 0x5f48 <__divsf3_pse+0x3a>
    5f3a:	e0 e8       	ldi	r30, 0x80	; 128
    5f3c:	32 d0       	rcall	.+100    	; 0x5fa2 <__divsf3_pse+0x94>
    5f3e:	91 50       	subi	r25, 0x01	; 1
    5f40:	50 40       	sbci	r21, 0x00	; 0
    5f42:	e6 95       	lsr	r30
    5f44:	00 1c       	adc	r0, r0
    5f46:	ca f7       	brpl	.-14     	; 0x5f3a <__divsf3_pse+0x2c>
    5f48:	2b d0       	rcall	.+86     	; 0x5fa0 <__divsf3_pse+0x92>
    5f4a:	fe 2f       	mov	r31, r30
    5f4c:	29 d0       	rcall	.+82     	; 0x5fa0 <__divsf3_pse+0x92>
    5f4e:	66 0f       	add	r22, r22
    5f50:	77 1f       	adc	r23, r23
    5f52:	88 1f       	adc	r24, r24
    5f54:	bb 1f       	adc	r27, r27
    5f56:	26 17       	cp	r18, r22
    5f58:	37 07       	cpc	r19, r23
    5f5a:	48 07       	cpc	r20, r24
    5f5c:	ab 07       	cpc	r26, r27
    5f5e:	b0 e8       	ldi	r27, 0x80	; 128
    5f60:	09 f0       	breq	.+2      	; 0x5f64 <__divsf3_pse+0x56>
    5f62:	bb 0b       	sbc	r27, r27
    5f64:	80 2d       	mov	r24, r0
    5f66:	bf 01       	movw	r22, r30
    5f68:	ff 27       	eor	r31, r31
    5f6a:	93 58       	subi	r25, 0x83	; 131
    5f6c:	5f 4f       	sbci	r21, 0xFF	; 255
    5f6e:	3a f0       	brmi	.+14     	; 0x5f7e <__divsf3_pse+0x70>
    5f70:	9e 3f       	cpi	r25, 0xFE	; 254
    5f72:	51 05       	cpc	r21, r1
    5f74:	78 f0       	brcs	.+30     	; 0x5f94 <__divsf3_pse+0x86>
    5f76:	0c 94 79 30 	jmp	0x60f2	; 0x60f2 <__fp_inf>
    5f7a:	0c 94 c4 30 	jmp	0x6188	; 0x6188 <__fp_szero>
    5f7e:	5f 3f       	cpi	r21, 0xFF	; 255
    5f80:	e4 f3       	brlt	.-8      	; 0x5f7a <__divsf3_pse+0x6c>
    5f82:	98 3e       	cpi	r25, 0xE8	; 232
    5f84:	d4 f3       	brlt	.-12     	; 0x5f7a <__divsf3_pse+0x6c>
    5f86:	86 95       	lsr	r24
    5f88:	77 95       	ror	r23
    5f8a:	67 95       	ror	r22
    5f8c:	b7 95       	ror	r27
    5f8e:	f7 95       	ror	r31
    5f90:	9f 5f       	subi	r25, 0xFF	; 255
    5f92:	c9 f7       	brne	.-14     	; 0x5f86 <__divsf3_pse+0x78>
    5f94:	88 0f       	add	r24, r24
    5f96:	91 1d       	adc	r25, r1
    5f98:	96 95       	lsr	r25
    5f9a:	87 95       	ror	r24
    5f9c:	97 f9       	bld	r25, 7
    5f9e:	08 95       	ret
    5fa0:	e1 e0       	ldi	r30, 0x01	; 1
    5fa2:	66 0f       	add	r22, r22
    5fa4:	77 1f       	adc	r23, r23
    5fa6:	88 1f       	adc	r24, r24
    5fa8:	bb 1f       	adc	r27, r27
    5faa:	62 17       	cp	r22, r18
    5fac:	73 07       	cpc	r23, r19
    5fae:	84 07       	cpc	r24, r20
    5fb0:	ba 07       	cpc	r27, r26
    5fb2:	20 f0       	brcs	.+8      	; 0x5fbc <__divsf3_pse+0xae>
    5fb4:	62 1b       	sub	r22, r18
    5fb6:	73 0b       	sbc	r23, r19
    5fb8:	84 0b       	sbc	r24, r20
    5fba:	ba 0b       	sbc	r27, r26
    5fbc:	ee 1f       	adc	r30, r30
    5fbe:	88 f7       	brcc	.-30     	; 0x5fa2 <__divsf3_pse+0x94>
    5fc0:	e0 95       	com	r30
    5fc2:	08 95       	ret

00005fc4 <__fixsfsi>:
    5fc4:	0e 94 e9 2f 	call	0x5fd2	; 0x5fd2 <__fixunssfsi>
    5fc8:	68 94       	set
    5fca:	b1 11       	cpse	r27, r1
    5fcc:	0c 94 c4 30 	jmp	0x6188	; 0x6188 <__fp_szero>
    5fd0:	08 95       	ret

00005fd2 <__fixunssfsi>:
    5fd2:	0e 94 a9 30 	call	0x6152	; 0x6152 <__fp_splitA>
    5fd6:	88 f0       	brcs	.+34     	; 0x5ffa <__fixunssfsi+0x28>
    5fd8:	9f 57       	subi	r25, 0x7F	; 127
    5fda:	98 f0       	brcs	.+38     	; 0x6002 <__fixunssfsi+0x30>
    5fdc:	b9 2f       	mov	r27, r25
    5fde:	99 27       	eor	r25, r25
    5fe0:	b7 51       	subi	r27, 0x17	; 23
    5fe2:	b0 f0       	brcs	.+44     	; 0x6010 <__fixunssfsi+0x3e>
    5fe4:	e1 f0       	breq	.+56     	; 0x601e <__fixunssfsi+0x4c>
    5fe6:	66 0f       	add	r22, r22
    5fe8:	77 1f       	adc	r23, r23
    5fea:	88 1f       	adc	r24, r24
    5fec:	99 1f       	adc	r25, r25
    5fee:	1a f0       	brmi	.+6      	; 0x5ff6 <__fixunssfsi+0x24>
    5ff0:	ba 95       	dec	r27
    5ff2:	c9 f7       	brne	.-14     	; 0x5fe6 <__fixunssfsi+0x14>
    5ff4:	14 c0       	rjmp	.+40     	; 0x601e <__fixunssfsi+0x4c>
    5ff6:	b1 30       	cpi	r27, 0x01	; 1
    5ff8:	91 f0       	breq	.+36     	; 0x601e <__fixunssfsi+0x4c>
    5ffa:	0e 94 c3 30 	call	0x6186	; 0x6186 <__fp_zero>
    5ffe:	b1 e0       	ldi	r27, 0x01	; 1
    6000:	08 95       	ret
    6002:	0c 94 c3 30 	jmp	0x6186	; 0x6186 <__fp_zero>
    6006:	67 2f       	mov	r22, r23
    6008:	78 2f       	mov	r23, r24
    600a:	88 27       	eor	r24, r24
    600c:	b8 5f       	subi	r27, 0xF8	; 248
    600e:	39 f0       	breq	.+14     	; 0x601e <__fixunssfsi+0x4c>
    6010:	b9 3f       	cpi	r27, 0xF9	; 249
    6012:	cc f3       	brlt	.-14     	; 0x6006 <__fixunssfsi+0x34>
    6014:	86 95       	lsr	r24
    6016:	77 95       	ror	r23
    6018:	67 95       	ror	r22
    601a:	b3 95       	inc	r27
    601c:	d9 f7       	brne	.-10     	; 0x6014 <__fixunssfsi+0x42>
    601e:	3e f4       	brtc	.+14     	; 0x602e <__fixunssfsi+0x5c>
    6020:	90 95       	com	r25
    6022:	80 95       	com	r24
    6024:	70 95       	com	r23
    6026:	61 95       	neg	r22
    6028:	7f 4f       	sbci	r23, 0xFF	; 255
    602a:	8f 4f       	sbci	r24, 0xFF	; 255
    602c:	9f 4f       	sbci	r25, 0xFF	; 255
    602e:	08 95       	ret

00006030 <__floatunsisf>:
    6030:	e8 94       	clt
    6032:	09 c0       	rjmp	.+18     	; 0x6046 <__floatsisf+0x12>

00006034 <__floatsisf>:
    6034:	97 fb       	bst	r25, 7
    6036:	3e f4       	brtc	.+14     	; 0x6046 <__floatsisf+0x12>
    6038:	90 95       	com	r25
    603a:	80 95       	com	r24
    603c:	70 95       	com	r23
    603e:	61 95       	neg	r22
    6040:	7f 4f       	sbci	r23, 0xFF	; 255
    6042:	8f 4f       	sbci	r24, 0xFF	; 255
    6044:	9f 4f       	sbci	r25, 0xFF	; 255
    6046:	99 23       	and	r25, r25
    6048:	a9 f0       	breq	.+42     	; 0x6074 <__floatsisf+0x40>
    604a:	f9 2f       	mov	r31, r25
    604c:	96 e9       	ldi	r25, 0x96	; 150
    604e:	bb 27       	eor	r27, r27
    6050:	93 95       	inc	r25
    6052:	f6 95       	lsr	r31
    6054:	87 95       	ror	r24
    6056:	77 95       	ror	r23
    6058:	67 95       	ror	r22
    605a:	b7 95       	ror	r27
    605c:	f1 11       	cpse	r31, r1
    605e:	f8 cf       	rjmp	.-16     	; 0x6050 <__floatsisf+0x1c>
    6060:	fa f4       	brpl	.+62     	; 0x60a0 <__floatsisf+0x6c>
    6062:	bb 0f       	add	r27, r27
    6064:	11 f4       	brne	.+4      	; 0x606a <__floatsisf+0x36>
    6066:	60 ff       	sbrs	r22, 0
    6068:	1b c0       	rjmp	.+54     	; 0x60a0 <__floatsisf+0x6c>
    606a:	6f 5f       	subi	r22, 0xFF	; 255
    606c:	7f 4f       	sbci	r23, 0xFF	; 255
    606e:	8f 4f       	sbci	r24, 0xFF	; 255
    6070:	9f 4f       	sbci	r25, 0xFF	; 255
    6072:	16 c0       	rjmp	.+44     	; 0x60a0 <__floatsisf+0x6c>
    6074:	88 23       	and	r24, r24
    6076:	11 f0       	breq	.+4      	; 0x607c <__floatsisf+0x48>
    6078:	96 e9       	ldi	r25, 0x96	; 150
    607a:	11 c0       	rjmp	.+34     	; 0x609e <__floatsisf+0x6a>
    607c:	77 23       	and	r23, r23
    607e:	21 f0       	breq	.+8      	; 0x6088 <__floatsisf+0x54>
    6080:	9e e8       	ldi	r25, 0x8E	; 142
    6082:	87 2f       	mov	r24, r23
    6084:	76 2f       	mov	r23, r22
    6086:	05 c0       	rjmp	.+10     	; 0x6092 <__floatsisf+0x5e>
    6088:	66 23       	and	r22, r22
    608a:	71 f0       	breq	.+28     	; 0x60a8 <__floatsisf+0x74>
    608c:	96 e8       	ldi	r25, 0x86	; 134
    608e:	86 2f       	mov	r24, r22
    6090:	70 e0       	ldi	r23, 0x00	; 0
    6092:	60 e0       	ldi	r22, 0x00	; 0
    6094:	2a f0       	brmi	.+10     	; 0x60a0 <__floatsisf+0x6c>
    6096:	9a 95       	dec	r25
    6098:	66 0f       	add	r22, r22
    609a:	77 1f       	adc	r23, r23
    609c:	88 1f       	adc	r24, r24
    609e:	da f7       	brpl	.-10     	; 0x6096 <__floatsisf+0x62>
    60a0:	88 0f       	add	r24, r24
    60a2:	96 95       	lsr	r25
    60a4:	87 95       	ror	r24
    60a6:	97 f9       	bld	r25, 7
    60a8:	08 95       	ret

000060aa <__fp_cmp>:
    60aa:	99 0f       	add	r25, r25
    60ac:	00 08       	sbc	r0, r0
    60ae:	55 0f       	add	r21, r21
    60b0:	aa 0b       	sbc	r26, r26
    60b2:	e0 e8       	ldi	r30, 0x80	; 128
    60b4:	fe ef       	ldi	r31, 0xFE	; 254
    60b6:	16 16       	cp	r1, r22
    60b8:	17 06       	cpc	r1, r23
    60ba:	e8 07       	cpc	r30, r24
    60bc:	f9 07       	cpc	r31, r25
    60be:	c0 f0       	brcs	.+48     	; 0x60f0 <__fp_cmp+0x46>
    60c0:	12 16       	cp	r1, r18
    60c2:	13 06       	cpc	r1, r19
    60c4:	e4 07       	cpc	r30, r20
    60c6:	f5 07       	cpc	r31, r21
    60c8:	98 f0       	brcs	.+38     	; 0x60f0 <__fp_cmp+0x46>
    60ca:	62 1b       	sub	r22, r18
    60cc:	73 0b       	sbc	r23, r19
    60ce:	84 0b       	sbc	r24, r20
    60d0:	95 0b       	sbc	r25, r21
    60d2:	39 f4       	brne	.+14     	; 0x60e2 <__fp_cmp+0x38>
    60d4:	0a 26       	eor	r0, r26
    60d6:	61 f0       	breq	.+24     	; 0x60f0 <__fp_cmp+0x46>
    60d8:	23 2b       	or	r18, r19
    60da:	24 2b       	or	r18, r20
    60dc:	25 2b       	or	r18, r21
    60de:	21 f4       	brne	.+8      	; 0x60e8 <__fp_cmp+0x3e>
    60e0:	08 95       	ret
    60e2:	0a 26       	eor	r0, r26
    60e4:	09 f4       	brne	.+2      	; 0x60e8 <__fp_cmp+0x3e>
    60e6:	a1 40       	sbci	r26, 0x01	; 1
    60e8:	a6 95       	lsr	r26
    60ea:	8f ef       	ldi	r24, 0xFF	; 255
    60ec:	81 1d       	adc	r24, r1
    60ee:	81 1d       	adc	r24, r1
    60f0:	08 95       	ret

000060f2 <__fp_inf>:
    60f2:	97 f9       	bld	r25, 7
    60f4:	9f 67       	ori	r25, 0x7F	; 127
    60f6:	80 e8       	ldi	r24, 0x80	; 128
    60f8:	70 e0       	ldi	r23, 0x00	; 0
    60fa:	60 e0       	ldi	r22, 0x00	; 0
    60fc:	08 95       	ret

000060fe <__fp_nan>:
    60fe:	9f ef       	ldi	r25, 0xFF	; 255
    6100:	80 ec       	ldi	r24, 0xC0	; 192
    6102:	08 95       	ret

00006104 <__fp_pscA>:
    6104:	00 24       	eor	r0, r0
    6106:	0a 94       	dec	r0
    6108:	16 16       	cp	r1, r22
    610a:	17 06       	cpc	r1, r23
    610c:	18 06       	cpc	r1, r24
    610e:	09 06       	cpc	r0, r25
    6110:	08 95       	ret

00006112 <__fp_pscB>:
    6112:	00 24       	eor	r0, r0
    6114:	0a 94       	dec	r0
    6116:	12 16       	cp	r1, r18
    6118:	13 06       	cpc	r1, r19
    611a:	14 06       	cpc	r1, r20
    611c:	05 06       	cpc	r0, r21
    611e:	08 95       	ret

00006120 <__fp_round>:
    6120:	09 2e       	mov	r0, r25
    6122:	03 94       	inc	r0
    6124:	00 0c       	add	r0, r0
    6126:	11 f4       	brne	.+4      	; 0x612c <__fp_round+0xc>
    6128:	88 23       	and	r24, r24
    612a:	52 f0       	brmi	.+20     	; 0x6140 <__fp_round+0x20>
    612c:	bb 0f       	add	r27, r27
    612e:	40 f4       	brcc	.+16     	; 0x6140 <__fp_round+0x20>
    6130:	bf 2b       	or	r27, r31
    6132:	11 f4       	brne	.+4      	; 0x6138 <__fp_round+0x18>
    6134:	60 ff       	sbrs	r22, 0
    6136:	04 c0       	rjmp	.+8      	; 0x6140 <__fp_round+0x20>
    6138:	6f 5f       	subi	r22, 0xFF	; 255
    613a:	7f 4f       	sbci	r23, 0xFF	; 255
    613c:	8f 4f       	sbci	r24, 0xFF	; 255
    613e:	9f 4f       	sbci	r25, 0xFF	; 255
    6140:	08 95       	ret

00006142 <__fp_split3>:
    6142:	57 fd       	sbrc	r21, 7
    6144:	90 58       	subi	r25, 0x80	; 128
    6146:	44 0f       	add	r20, r20
    6148:	55 1f       	adc	r21, r21
    614a:	59 f0       	breq	.+22     	; 0x6162 <__fp_splitA+0x10>
    614c:	5f 3f       	cpi	r21, 0xFF	; 255
    614e:	71 f0       	breq	.+28     	; 0x616c <__fp_splitA+0x1a>
    6150:	47 95       	ror	r20

00006152 <__fp_splitA>:
    6152:	88 0f       	add	r24, r24
    6154:	97 fb       	bst	r25, 7
    6156:	99 1f       	adc	r25, r25
    6158:	61 f0       	breq	.+24     	; 0x6172 <__fp_splitA+0x20>
    615a:	9f 3f       	cpi	r25, 0xFF	; 255
    615c:	79 f0       	breq	.+30     	; 0x617c <__fp_splitA+0x2a>
    615e:	87 95       	ror	r24
    6160:	08 95       	ret
    6162:	12 16       	cp	r1, r18
    6164:	13 06       	cpc	r1, r19
    6166:	14 06       	cpc	r1, r20
    6168:	55 1f       	adc	r21, r21
    616a:	f2 cf       	rjmp	.-28     	; 0x6150 <__fp_split3+0xe>
    616c:	46 95       	lsr	r20
    616e:	f1 df       	rcall	.-30     	; 0x6152 <__fp_splitA>
    6170:	08 c0       	rjmp	.+16     	; 0x6182 <__fp_splitA+0x30>
    6172:	16 16       	cp	r1, r22
    6174:	17 06       	cpc	r1, r23
    6176:	18 06       	cpc	r1, r24
    6178:	99 1f       	adc	r25, r25
    617a:	f1 cf       	rjmp	.-30     	; 0x615e <__fp_splitA+0xc>
    617c:	86 95       	lsr	r24
    617e:	71 05       	cpc	r23, r1
    6180:	61 05       	cpc	r22, r1
    6182:	08 94       	sec
    6184:	08 95       	ret

00006186 <__fp_zero>:
    6186:	e8 94       	clt

00006188 <__fp_szero>:
    6188:	bb 27       	eor	r27, r27
    618a:	66 27       	eor	r22, r22
    618c:	77 27       	eor	r23, r23
    618e:	cb 01       	movw	r24, r22
    6190:	97 f9       	bld	r25, 7
    6192:	08 95       	ret

00006194 <__gesf2>:
    6194:	0e 94 55 30 	call	0x60aa	; 0x60aa <__fp_cmp>
    6198:	08 f4       	brcc	.+2      	; 0x619c <__gesf2+0x8>
    619a:	8f ef       	ldi	r24, 0xFF	; 255
    619c:	08 95       	ret

0000619e <__mulsf3>:
    619e:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__mulsf3x>
    61a2:	0c 94 90 30 	jmp	0x6120	; 0x6120 <__fp_round>
    61a6:	0e 94 82 30 	call	0x6104	; 0x6104 <__fp_pscA>
    61aa:	38 f0       	brcs	.+14     	; 0x61ba <__mulsf3+0x1c>
    61ac:	0e 94 89 30 	call	0x6112	; 0x6112 <__fp_pscB>
    61b0:	20 f0       	brcs	.+8      	; 0x61ba <__mulsf3+0x1c>
    61b2:	95 23       	and	r25, r21
    61b4:	11 f0       	breq	.+4      	; 0x61ba <__mulsf3+0x1c>
    61b6:	0c 94 79 30 	jmp	0x60f2	; 0x60f2 <__fp_inf>
    61ba:	0c 94 7f 30 	jmp	0x60fe	; 0x60fe <__fp_nan>
    61be:	11 24       	eor	r1, r1
    61c0:	0c 94 c4 30 	jmp	0x6188	; 0x6188 <__fp_szero>

000061c4 <__mulsf3x>:
    61c4:	0e 94 a1 30 	call	0x6142	; 0x6142 <__fp_split3>
    61c8:	70 f3       	brcs	.-36     	; 0x61a6 <__mulsf3+0x8>

000061ca <__mulsf3_pse>:
    61ca:	95 9f       	mul	r25, r21
    61cc:	c1 f3       	breq	.-16     	; 0x61be <__mulsf3+0x20>
    61ce:	95 0f       	add	r25, r21
    61d0:	50 e0       	ldi	r21, 0x00	; 0
    61d2:	55 1f       	adc	r21, r21
    61d4:	62 9f       	mul	r22, r18
    61d6:	f0 01       	movw	r30, r0
    61d8:	72 9f       	mul	r23, r18
    61da:	bb 27       	eor	r27, r27
    61dc:	f0 0d       	add	r31, r0
    61de:	b1 1d       	adc	r27, r1
    61e0:	63 9f       	mul	r22, r19
    61e2:	aa 27       	eor	r26, r26
    61e4:	f0 0d       	add	r31, r0
    61e6:	b1 1d       	adc	r27, r1
    61e8:	aa 1f       	adc	r26, r26
    61ea:	64 9f       	mul	r22, r20
    61ec:	66 27       	eor	r22, r22
    61ee:	b0 0d       	add	r27, r0
    61f0:	a1 1d       	adc	r26, r1
    61f2:	66 1f       	adc	r22, r22
    61f4:	82 9f       	mul	r24, r18
    61f6:	22 27       	eor	r18, r18
    61f8:	b0 0d       	add	r27, r0
    61fa:	a1 1d       	adc	r26, r1
    61fc:	62 1f       	adc	r22, r18
    61fe:	73 9f       	mul	r23, r19
    6200:	b0 0d       	add	r27, r0
    6202:	a1 1d       	adc	r26, r1
    6204:	62 1f       	adc	r22, r18
    6206:	83 9f       	mul	r24, r19
    6208:	a0 0d       	add	r26, r0
    620a:	61 1d       	adc	r22, r1
    620c:	22 1f       	adc	r18, r18
    620e:	74 9f       	mul	r23, r20
    6210:	33 27       	eor	r19, r19
    6212:	a0 0d       	add	r26, r0
    6214:	61 1d       	adc	r22, r1
    6216:	23 1f       	adc	r18, r19
    6218:	84 9f       	mul	r24, r20
    621a:	60 0d       	add	r22, r0
    621c:	21 1d       	adc	r18, r1
    621e:	82 2f       	mov	r24, r18
    6220:	76 2f       	mov	r23, r22
    6222:	6a 2f       	mov	r22, r26
    6224:	11 24       	eor	r1, r1
    6226:	9f 57       	subi	r25, 0x7F	; 127
    6228:	50 40       	sbci	r21, 0x00	; 0
    622a:	9a f0       	brmi	.+38     	; 0x6252 <__mulsf3_pse+0x88>
    622c:	f1 f0       	breq	.+60     	; 0x626a <__mulsf3_pse+0xa0>
    622e:	88 23       	and	r24, r24
    6230:	4a f0       	brmi	.+18     	; 0x6244 <__mulsf3_pse+0x7a>
    6232:	ee 0f       	add	r30, r30
    6234:	ff 1f       	adc	r31, r31
    6236:	bb 1f       	adc	r27, r27
    6238:	66 1f       	adc	r22, r22
    623a:	77 1f       	adc	r23, r23
    623c:	88 1f       	adc	r24, r24
    623e:	91 50       	subi	r25, 0x01	; 1
    6240:	50 40       	sbci	r21, 0x00	; 0
    6242:	a9 f7       	brne	.-22     	; 0x622e <__mulsf3_pse+0x64>
    6244:	9e 3f       	cpi	r25, 0xFE	; 254
    6246:	51 05       	cpc	r21, r1
    6248:	80 f0       	brcs	.+32     	; 0x626a <__mulsf3_pse+0xa0>
    624a:	0c 94 79 30 	jmp	0x60f2	; 0x60f2 <__fp_inf>
    624e:	0c 94 c4 30 	jmp	0x6188	; 0x6188 <__fp_szero>
    6252:	5f 3f       	cpi	r21, 0xFF	; 255
    6254:	e4 f3       	brlt	.-8      	; 0x624e <__mulsf3_pse+0x84>
    6256:	98 3e       	cpi	r25, 0xE8	; 232
    6258:	d4 f3       	brlt	.-12     	; 0x624e <__mulsf3_pse+0x84>
    625a:	86 95       	lsr	r24
    625c:	77 95       	ror	r23
    625e:	67 95       	ror	r22
    6260:	b7 95       	ror	r27
    6262:	f7 95       	ror	r31
    6264:	e7 95       	ror	r30
    6266:	9f 5f       	subi	r25, 0xFF	; 255
    6268:	c1 f7       	brne	.-16     	; 0x625a <__mulsf3_pse+0x90>
    626a:	fe 2b       	or	r31, r30
    626c:	88 0f       	add	r24, r24
    626e:	91 1d       	adc	r25, r1
    6270:	96 95       	lsr	r25
    6272:	87 95       	ror	r24
    6274:	97 f9       	bld	r25, 7
    6276:	08 95       	ret
    6278:	19 f4       	brne	.+6      	; 0x6280 <__mulsf3_pse+0xb6>
    627a:	16 f4       	brtc	.+4      	; 0x6280 <__mulsf3_pse+0xb6>
    627c:	0c 94 7f 30 	jmp	0x60fe	; 0x60fe <__fp_nan>
    6280:	0c 94 82 31 	jmp	0x6304	; 0x6304 <__fp_mpack>

00006284 <sqrt>:
    6284:	0e 94 a9 30 	call	0x6152	; 0x6152 <__fp_splitA>
    6288:	b8 f3       	brcs	.-18     	; 0x6278 <__mulsf3_pse+0xae>
    628a:	99 23       	and	r25, r25
    628c:	c9 f3       	breq	.-14     	; 0x6280 <__mulsf3_pse+0xb6>
    628e:	b6 f3       	brts	.-20     	; 0x627c <__mulsf3_pse+0xb2>
    6290:	9f 57       	subi	r25, 0x7F	; 127
    6292:	55 0b       	sbc	r21, r21
    6294:	87 ff       	sbrs	r24, 7
    6296:	0e 94 90 31 	call	0x6320	; 0x6320 <__fp_norm2>
    629a:	00 24       	eor	r0, r0
    629c:	a0 e6       	ldi	r26, 0x60	; 96
    629e:	40 ea       	ldi	r20, 0xA0	; 160
    62a0:	90 01       	movw	r18, r0
    62a2:	80 58       	subi	r24, 0x80	; 128
    62a4:	56 95       	lsr	r21
    62a6:	97 95       	ror	r25
    62a8:	28 f4       	brcc	.+10     	; 0x62b4 <sqrt+0x30>
    62aa:	80 5c       	subi	r24, 0xC0	; 192
    62ac:	66 0f       	add	r22, r22
    62ae:	77 1f       	adc	r23, r23
    62b0:	88 1f       	adc	r24, r24
    62b2:	20 f0       	brcs	.+8      	; 0x62bc <sqrt+0x38>
    62b4:	26 17       	cp	r18, r22
    62b6:	37 07       	cpc	r19, r23
    62b8:	48 07       	cpc	r20, r24
    62ba:	30 f4       	brcc	.+12     	; 0x62c8 <sqrt+0x44>
    62bc:	62 1b       	sub	r22, r18
    62be:	73 0b       	sbc	r23, r19
    62c0:	84 0b       	sbc	r24, r20
    62c2:	20 29       	or	r18, r0
    62c4:	31 29       	or	r19, r1
    62c6:	4a 2b       	or	r20, r26
    62c8:	a6 95       	lsr	r26
    62ca:	17 94       	ror	r1
    62cc:	07 94       	ror	r0
    62ce:	20 25       	eor	r18, r0
    62d0:	31 25       	eor	r19, r1
    62d2:	4a 27       	eor	r20, r26
    62d4:	58 f7       	brcc	.-42     	; 0x62ac <sqrt+0x28>
    62d6:	66 0f       	add	r22, r22
    62d8:	77 1f       	adc	r23, r23
    62da:	88 1f       	adc	r24, r24
    62dc:	20 f0       	brcs	.+8      	; 0x62e6 <sqrt+0x62>
    62de:	26 17       	cp	r18, r22
    62e0:	37 07       	cpc	r19, r23
    62e2:	48 07       	cpc	r20, r24
    62e4:	30 f4       	brcc	.+12     	; 0x62f2 <sqrt+0x6e>
    62e6:	62 0b       	sbc	r22, r18
    62e8:	73 0b       	sbc	r23, r19
    62ea:	84 0b       	sbc	r24, r20
    62ec:	20 0d       	add	r18, r0
    62ee:	31 1d       	adc	r19, r1
    62f0:	41 1d       	adc	r20, r1
    62f2:	a0 95       	com	r26
    62f4:	81 f7       	brne	.-32     	; 0x62d6 <sqrt+0x52>
    62f6:	b9 01       	movw	r22, r18
    62f8:	84 2f       	mov	r24, r20
    62fa:	91 58       	subi	r25, 0x81	; 129
    62fc:	88 0f       	add	r24, r24
    62fe:	96 95       	lsr	r25
    6300:	87 95       	ror	r24
    6302:	08 95       	ret

00006304 <__fp_mpack>:
    6304:	9f 3f       	cpi	r25, 0xFF	; 255
    6306:	31 f0       	breq	.+12     	; 0x6314 <__fp_mpack_finite+0xc>

00006308 <__fp_mpack_finite>:
    6308:	91 50       	subi	r25, 0x01	; 1
    630a:	20 f4       	brcc	.+8      	; 0x6314 <__fp_mpack_finite+0xc>
    630c:	87 95       	ror	r24
    630e:	77 95       	ror	r23
    6310:	67 95       	ror	r22
    6312:	b7 95       	ror	r27
    6314:	88 0f       	add	r24, r24
    6316:	91 1d       	adc	r25, r1
    6318:	96 95       	lsr	r25
    631a:	87 95       	ror	r24
    631c:	97 f9       	bld	r25, 7
    631e:	08 95       	ret

00006320 <__fp_norm2>:
    6320:	91 50       	subi	r25, 0x01	; 1
    6322:	50 40       	sbci	r21, 0x00	; 0
    6324:	66 0f       	add	r22, r22
    6326:	77 1f       	adc	r23, r23
    6328:	88 1f       	adc	r24, r24
    632a:	d2 f7       	brpl	.-12     	; 0x6320 <__fp_norm2>
    632c:	08 95       	ret

0000632e <vfprintf>:
    632e:	2f 92       	push	r2
    6330:	3f 92       	push	r3
    6332:	4f 92       	push	r4
    6334:	5f 92       	push	r5
    6336:	6f 92       	push	r6
    6338:	7f 92       	push	r7
    633a:	8f 92       	push	r8
    633c:	9f 92       	push	r9
    633e:	af 92       	push	r10
    6340:	bf 92       	push	r11
    6342:	cf 92       	push	r12
    6344:	df 92       	push	r13
    6346:	ef 92       	push	r14
    6348:	ff 92       	push	r15
    634a:	0f 93       	push	r16
    634c:	1f 93       	push	r17
    634e:	cf 93       	push	r28
    6350:	df 93       	push	r29
    6352:	cd b7       	in	r28, 0x3d	; 61
    6354:	de b7       	in	r29, 0x3e	; 62
    6356:	60 97       	sbiw	r28, 0x10	; 16
    6358:	cd bf       	out	0x3d, r28	; 61
    635a:	de bf       	out	0x3e, r29	; 62
    635c:	7c 01       	movw	r14, r24
    635e:	1b 01       	movw	r2, r22
    6360:	6a 01       	movw	r12, r20
    6362:	fc 01       	movw	r30, r24
    6364:	16 82       	std	Z+6, r1	; 0x06
    6366:	17 82       	std	Z+7, r1	; 0x07
    6368:	83 81       	ldd	r24, Z+3	; 0x03
    636a:	81 ff       	sbrs	r24, 1
    636c:	44 c3       	rjmp	.+1672   	; 0x69f6 <vfprintf+0x6c8>
    636e:	9e 01       	movw	r18, r28
    6370:	2f 5f       	subi	r18, 0xFF	; 255
    6372:	3f 4f       	sbci	r19, 0xFF	; 255
    6374:	39 01       	movw	r6, r18
    6376:	f7 01       	movw	r30, r14
    6378:	93 81       	ldd	r25, Z+3	; 0x03
    637a:	f1 01       	movw	r30, r2
    637c:	93 fd       	sbrc	r25, 3
    637e:	85 91       	lpm	r24, Z+
    6380:	93 ff       	sbrs	r25, 3
    6382:	81 91       	ld	r24, Z+
    6384:	1f 01       	movw	r2, r30
    6386:	88 23       	and	r24, r24
    6388:	09 f4       	brne	.+2      	; 0x638c <vfprintf+0x5e>
    638a:	31 c3       	rjmp	.+1634   	; 0x69ee <vfprintf+0x6c0>
    638c:	85 32       	cpi	r24, 0x25	; 37
    638e:	39 f4       	brne	.+14     	; 0x639e <vfprintf+0x70>
    6390:	93 fd       	sbrc	r25, 3
    6392:	85 91       	lpm	r24, Z+
    6394:	93 ff       	sbrs	r25, 3
    6396:	81 91       	ld	r24, Z+
    6398:	1f 01       	movw	r2, r30
    639a:	85 32       	cpi	r24, 0x25	; 37
    639c:	39 f4       	brne	.+14     	; 0x63ac <vfprintf+0x7e>
    639e:	b7 01       	movw	r22, r14
    63a0:	90 e0       	ldi	r25, 0x00	; 0
    63a2:	0e 94 76 36 	call	0x6cec	; 0x6cec <fputc>
    63a6:	56 01       	movw	r10, r12
    63a8:	65 01       	movw	r12, r10
    63aa:	e5 cf       	rjmp	.-54     	; 0x6376 <vfprintf+0x48>
    63ac:	10 e0       	ldi	r17, 0x00	; 0
    63ae:	51 2c       	mov	r5, r1
    63b0:	91 2c       	mov	r9, r1
    63b2:	ff e1       	ldi	r31, 0x1F	; 31
    63b4:	f9 15       	cp	r31, r9
    63b6:	d8 f0       	brcs	.+54     	; 0x63ee <vfprintf+0xc0>
    63b8:	8b 32       	cpi	r24, 0x2B	; 43
    63ba:	79 f0       	breq	.+30     	; 0x63da <vfprintf+0xac>
    63bc:	38 f4       	brcc	.+14     	; 0x63cc <vfprintf+0x9e>
    63be:	80 32       	cpi	r24, 0x20	; 32
    63c0:	79 f0       	breq	.+30     	; 0x63e0 <vfprintf+0xb2>
    63c2:	83 32       	cpi	r24, 0x23	; 35
    63c4:	a1 f4       	brne	.+40     	; 0x63ee <vfprintf+0xc0>
    63c6:	f9 2d       	mov	r31, r9
    63c8:	f0 61       	ori	r31, 0x10	; 16
    63ca:	2e c0       	rjmp	.+92     	; 0x6428 <vfprintf+0xfa>
    63cc:	8d 32       	cpi	r24, 0x2D	; 45
    63ce:	61 f0       	breq	.+24     	; 0x63e8 <vfprintf+0xba>
    63d0:	80 33       	cpi	r24, 0x30	; 48
    63d2:	69 f4       	brne	.+26     	; 0x63ee <vfprintf+0xc0>
    63d4:	29 2d       	mov	r18, r9
    63d6:	21 60       	ori	r18, 0x01	; 1
    63d8:	2d c0       	rjmp	.+90     	; 0x6434 <vfprintf+0x106>
    63da:	39 2d       	mov	r19, r9
    63dc:	32 60       	ori	r19, 0x02	; 2
    63de:	93 2e       	mov	r9, r19
    63e0:	89 2d       	mov	r24, r9
    63e2:	84 60       	ori	r24, 0x04	; 4
    63e4:	98 2e       	mov	r9, r24
    63e6:	2a c0       	rjmp	.+84     	; 0x643c <vfprintf+0x10e>
    63e8:	e9 2d       	mov	r30, r9
    63ea:	e8 60       	ori	r30, 0x08	; 8
    63ec:	15 c0       	rjmp	.+42     	; 0x6418 <vfprintf+0xea>
    63ee:	97 fc       	sbrc	r9, 7
    63f0:	2d c0       	rjmp	.+90     	; 0x644c <vfprintf+0x11e>
    63f2:	20 ed       	ldi	r18, 0xD0	; 208
    63f4:	28 0f       	add	r18, r24
    63f6:	2a 30       	cpi	r18, 0x0A	; 10
    63f8:	88 f4       	brcc	.+34     	; 0x641c <vfprintf+0xee>
    63fa:	96 fe       	sbrs	r9, 6
    63fc:	06 c0       	rjmp	.+12     	; 0x640a <vfprintf+0xdc>
    63fe:	3a e0       	ldi	r19, 0x0A	; 10
    6400:	13 9f       	mul	r17, r19
    6402:	20 0d       	add	r18, r0
    6404:	11 24       	eor	r1, r1
    6406:	12 2f       	mov	r17, r18
    6408:	19 c0       	rjmp	.+50     	; 0x643c <vfprintf+0x10e>
    640a:	8a e0       	ldi	r24, 0x0A	; 10
    640c:	58 9e       	mul	r5, r24
    640e:	20 0d       	add	r18, r0
    6410:	11 24       	eor	r1, r1
    6412:	52 2e       	mov	r5, r18
    6414:	e9 2d       	mov	r30, r9
    6416:	e0 62       	ori	r30, 0x20	; 32
    6418:	9e 2e       	mov	r9, r30
    641a:	10 c0       	rjmp	.+32     	; 0x643c <vfprintf+0x10e>
    641c:	8e 32       	cpi	r24, 0x2E	; 46
    641e:	31 f4       	brne	.+12     	; 0x642c <vfprintf+0xfe>
    6420:	96 fc       	sbrc	r9, 6
    6422:	e5 c2       	rjmp	.+1482   	; 0x69ee <vfprintf+0x6c0>
    6424:	f9 2d       	mov	r31, r9
    6426:	f0 64       	ori	r31, 0x40	; 64
    6428:	9f 2e       	mov	r9, r31
    642a:	08 c0       	rjmp	.+16     	; 0x643c <vfprintf+0x10e>
    642c:	8c 36       	cpi	r24, 0x6C	; 108
    642e:	21 f4       	brne	.+8      	; 0x6438 <vfprintf+0x10a>
    6430:	29 2d       	mov	r18, r9
    6432:	20 68       	ori	r18, 0x80	; 128
    6434:	92 2e       	mov	r9, r18
    6436:	02 c0       	rjmp	.+4      	; 0x643c <vfprintf+0x10e>
    6438:	88 36       	cpi	r24, 0x68	; 104
    643a:	41 f4       	brne	.+16     	; 0x644c <vfprintf+0x11e>
    643c:	f1 01       	movw	r30, r2
    643e:	93 fd       	sbrc	r25, 3
    6440:	85 91       	lpm	r24, Z+
    6442:	93 ff       	sbrs	r25, 3
    6444:	81 91       	ld	r24, Z+
    6446:	1f 01       	movw	r2, r30
    6448:	81 11       	cpse	r24, r1
    644a:	b3 cf       	rjmp	.-154    	; 0x63b2 <vfprintf+0x84>
    644c:	9b eb       	ldi	r25, 0xBB	; 187
    644e:	98 0f       	add	r25, r24
    6450:	93 30       	cpi	r25, 0x03	; 3
    6452:	20 f4       	brcc	.+8      	; 0x645c <vfprintf+0x12e>
    6454:	99 2d       	mov	r25, r9
    6456:	90 61       	ori	r25, 0x10	; 16
    6458:	80 5e       	subi	r24, 0xE0	; 224
    645a:	07 c0       	rjmp	.+14     	; 0x646a <vfprintf+0x13c>
    645c:	9b e9       	ldi	r25, 0x9B	; 155
    645e:	98 0f       	add	r25, r24
    6460:	93 30       	cpi	r25, 0x03	; 3
    6462:	08 f0       	brcs	.+2      	; 0x6466 <vfprintf+0x138>
    6464:	66 c1       	rjmp	.+716    	; 0x6732 <vfprintf+0x404>
    6466:	99 2d       	mov	r25, r9
    6468:	9f 7e       	andi	r25, 0xEF	; 239
    646a:	96 ff       	sbrs	r25, 6
    646c:	16 e0       	ldi	r17, 0x06	; 6
    646e:	9f 73       	andi	r25, 0x3F	; 63
    6470:	99 2e       	mov	r9, r25
    6472:	85 36       	cpi	r24, 0x65	; 101
    6474:	19 f4       	brne	.+6      	; 0x647c <vfprintf+0x14e>
    6476:	90 64       	ori	r25, 0x40	; 64
    6478:	99 2e       	mov	r9, r25
    647a:	08 c0       	rjmp	.+16     	; 0x648c <vfprintf+0x15e>
    647c:	86 36       	cpi	r24, 0x66	; 102
    647e:	21 f4       	brne	.+8      	; 0x6488 <vfprintf+0x15a>
    6480:	39 2f       	mov	r19, r25
    6482:	30 68       	ori	r19, 0x80	; 128
    6484:	93 2e       	mov	r9, r19
    6486:	02 c0       	rjmp	.+4      	; 0x648c <vfprintf+0x15e>
    6488:	11 11       	cpse	r17, r1
    648a:	11 50       	subi	r17, 0x01	; 1
    648c:	97 fe       	sbrs	r9, 7
    648e:	07 c0       	rjmp	.+14     	; 0x649e <vfprintf+0x170>
    6490:	1c 33       	cpi	r17, 0x3C	; 60
    6492:	50 f4       	brcc	.+20     	; 0x64a8 <vfprintf+0x17a>
    6494:	44 24       	eor	r4, r4
    6496:	43 94       	inc	r4
    6498:	41 0e       	add	r4, r17
    649a:	27 e0       	ldi	r18, 0x07	; 7
    649c:	0b c0       	rjmp	.+22     	; 0x64b4 <vfprintf+0x186>
    649e:	18 30       	cpi	r17, 0x08	; 8
    64a0:	38 f0       	brcs	.+14     	; 0x64b0 <vfprintf+0x182>
    64a2:	27 e0       	ldi	r18, 0x07	; 7
    64a4:	17 e0       	ldi	r17, 0x07	; 7
    64a6:	05 c0       	rjmp	.+10     	; 0x64b2 <vfprintf+0x184>
    64a8:	27 e0       	ldi	r18, 0x07	; 7
    64aa:	9c e3       	ldi	r25, 0x3C	; 60
    64ac:	49 2e       	mov	r4, r25
    64ae:	02 c0       	rjmp	.+4      	; 0x64b4 <vfprintf+0x186>
    64b0:	21 2f       	mov	r18, r17
    64b2:	41 2c       	mov	r4, r1
    64b4:	56 01       	movw	r10, r12
    64b6:	84 e0       	ldi	r24, 0x04	; 4
    64b8:	a8 0e       	add	r10, r24
    64ba:	b1 1c       	adc	r11, r1
    64bc:	f6 01       	movw	r30, r12
    64be:	60 81       	ld	r22, Z
    64c0:	71 81       	ldd	r23, Z+1	; 0x01
    64c2:	82 81       	ldd	r24, Z+2	; 0x02
    64c4:	93 81       	ldd	r25, Z+3	; 0x03
    64c6:	04 2d       	mov	r16, r4
    64c8:	a3 01       	movw	r20, r6
    64ca:	0e 94 3f 35 	call	0x6a7e	; 0x6a7e <__ftoa_engine>
    64ce:	6c 01       	movw	r12, r24
    64d0:	f9 81       	ldd	r31, Y+1	; 0x01
    64d2:	fc 87       	std	Y+12, r31	; 0x0c
    64d4:	f0 ff       	sbrs	r31, 0
    64d6:	02 c0       	rjmp	.+4      	; 0x64dc <vfprintf+0x1ae>
    64d8:	f3 ff       	sbrs	r31, 3
    64da:	06 c0       	rjmp	.+12     	; 0x64e8 <vfprintf+0x1ba>
    64dc:	91 fc       	sbrc	r9, 1
    64de:	06 c0       	rjmp	.+12     	; 0x64ec <vfprintf+0x1be>
    64e0:	92 fe       	sbrs	r9, 2
    64e2:	06 c0       	rjmp	.+12     	; 0x64f0 <vfprintf+0x1c2>
    64e4:	00 e2       	ldi	r16, 0x20	; 32
    64e6:	05 c0       	rjmp	.+10     	; 0x64f2 <vfprintf+0x1c4>
    64e8:	0d e2       	ldi	r16, 0x2D	; 45
    64ea:	03 c0       	rjmp	.+6      	; 0x64f2 <vfprintf+0x1c4>
    64ec:	0b e2       	ldi	r16, 0x2B	; 43
    64ee:	01 c0       	rjmp	.+2      	; 0x64f2 <vfprintf+0x1c4>
    64f0:	00 e0       	ldi	r16, 0x00	; 0
    64f2:	8c 85       	ldd	r24, Y+12	; 0x0c
    64f4:	8c 70       	andi	r24, 0x0C	; 12
    64f6:	19 f0       	breq	.+6      	; 0x64fe <vfprintf+0x1d0>
    64f8:	01 11       	cpse	r16, r1
    64fa:	5a c2       	rjmp	.+1204   	; 0x69b0 <vfprintf+0x682>
    64fc:	9b c2       	rjmp	.+1334   	; 0x6a34 <vfprintf+0x706>
    64fe:	97 fe       	sbrs	r9, 7
    6500:	10 c0       	rjmp	.+32     	; 0x6522 <vfprintf+0x1f4>
    6502:	4c 0c       	add	r4, r12
    6504:	fc 85       	ldd	r31, Y+12	; 0x0c
    6506:	f4 ff       	sbrs	r31, 4
    6508:	04 c0       	rjmp	.+8      	; 0x6512 <vfprintf+0x1e4>
    650a:	8a 81       	ldd	r24, Y+2	; 0x02
    650c:	81 33       	cpi	r24, 0x31	; 49
    650e:	09 f4       	brne	.+2      	; 0x6512 <vfprintf+0x1e4>
    6510:	4a 94       	dec	r4
    6512:	14 14       	cp	r1, r4
    6514:	74 f5       	brge	.+92     	; 0x6572 <vfprintf+0x244>
    6516:	28 e0       	ldi	r18, 0x08	; 8
    6518:	24 15       	cp	r18, r4
    651a:	78 f5       	brcc	.+94     	; 0x657a <vfprintf+0x24c>
    651c:	88 e0       	ldi	r24, 0x08	; 8
    651e:	48 2e       	mov	r4, r24
    6520:	2c c0       	rjmp	.+88     	; 0x657a <vfprintf+0x24c>
    6522:	96 fc       	sbrc	r9, 6
    6524:	2a c0       	rjmp	.+84     	; 0x657a <vfprintf+0x24c>
    6526:	81 2f       	mov	r24, r17
    6528:	90 e0       	ldi	r25, 0x00	; 0
    652a:	8c 15       	cp	r24, r12
    652c:	9d 05       	cpc	r25, r13
    652e:	9c f0       	brlt	.+38     	; 0x6556 <vfprintf+0x228>
    6530:	3c ef       	ldi	r19, 0xFC	; 252
    6532:	c3 16       	cp	r12, r19
    6534:	3f ef       	ldi	r19, 0xFF	; 255
    6536:	d3 06       	cpc	r13, r19
    6538:	74 f0       	brlt	.+28     	; 0x6556 <vfprintf+0x228>
    653a:	89 2d       	mov	r24, r9
    653c:	80 68       	ori	r24, 0x80	; 128
    653e:	98 2e       	mov	r9, r24
    6540:	0a c0       	rjmp	.+20     	; 0x6556 <vfprintf+0x228>
    6542:	e2 e0       	ldi	r30, 0x02	; 2
    6544:	f0 e0       	ldi	r31, 0x00	; 0
    6546:	ec 0f       	add	r30, r28
    6548:	fd 1f       	adc	r31, r29
    654a:	e1 0f       	add	r30, r17
    654c:	f1 1d       	adc	r31, r1
    654e:	80 81       	ld	r24, Z
    6550:	80 33       	cpi	r24, 0x30	; 48
    6552:	19 f4       	brne	.+6      	; 0x655a <vfprintf+0x22c>
    6554:	11 50       	subi	r17, 0x01	; 1
    6556:	11 11       	cpse	r17, r1
    6558:	f4 cf       	rjmp	.-24     	; 0x6542 <vfprintf+0x214>
    655a:	97 fe       	sbrs	r9, 7
    655c:	0e c0       	rjmp	.+28     	; 0x657a <vfprintf+0x24c>
    655e:	44 24       	eor	r4, r4
    6560:	43 94       	inc	r4
    6562:	41 0e       	add	r4, r17
    6564:	81 2f       	mov	r24, r17
    6566:	90 e0       	ldi	r25, 0x00	; 0
    6568:	c8 16       	cp	r12, r24
    656a:	d9 06       	cpc	r13, r25
    656c:	2c f4       	brge	.+10     	; 0x6578 <vfprintf+0x24a>
    656e:	1c 19       	sub	r17, r12
    6570:	04 c0       	rjmp	.+8      	; 0x657a <vfprintf+0x24c>
    6572:	44 24       	eor	r4, r4
    6574:	43 94       	inc	r4
    6576:	01 c0       	rjmp	.+2      	; 0x657a <vfprintf+0x24c>
    6578:	10 e0       	ldi	r17, 0x00	; 0
    657a:	97 fe       	sbrs	r9, 7
    657c:	06 c0       	rjmp	.+12     	; 0x658a <vfprintf+0x25c>
    657e:	1c 14       	cp	r1, r12
    6580:	1d 04       	cpc	r1, r13
    6582:	34 f4       	brge	.+12     	; 0x6590 <vfprintf+0x262>
    6584:	c6 01       	movw	r24, r12
    6586:	01 96       	adiw	r24, 0x01	; 1
    6588:	05 c0       	rjmp	.+10     	; 0x6594 <vfprintf+0x266>
    658a:	85 e0       	ldi	r24, 0x05	; 5
    658c:	90 e0       	ldi	r25, 0x00	; 0
    658e:	02 c0       	rjmp	.+4      	; 0x6594 <vfprintf+0x266>
    6590:	81 e0       	ldi	r24, 0x01	; 1
    6592:	90 e0       	ldi	r25, 0x00	; 0
    6594:	01 11       	cpse	r16, r1
    6596:	01 96       	adiw	r24, 0x01	; 1
    6598:	11 23       	and	r17, r17
    659a:	31 f0       	breq	.+12     	; 0x65a8 <vfprintf+0x27a>
    659c:	21 2f       	mov	r18, r17
    659e:	30 e0       	ldi	r19, 0x00	; 0
    65a0:	2f 5f       	subi	r18, 0xFF	; 255
    65a2:	3f 4f       	sbci	r19, 0xFF	; 255
    65a4:	82 0f       	add	r24, r18
    65a6:	93 1f       	adc	r25, r19
    65a8:	25 2d       	mov	r18, r5
    65aa:	30 e0       	ldi	r19, 0x00	; 0
    65ac:	82 17       	cp	r24, r18
    65ae:	93 07       	cpc	r25, r19
    65b0:	14 f4       	brge	.+4      	; 0x65b6 <vfprintf+0x288>
    65b2:	58 1a       	sub	r5, r24
    65b4:	01 c0       	rjmp	.+2      	; 0x65b8 <vfprintf+0x28a>
    65b6:	51 2c       	mov	r5, r1
    65b8:	89 2d       	mov	r24, r9
    65ba:	89 70       	andi	r24, 0x09	; 9
    65bc:	49 f4       	brne	.+18     	; 0x65d0 <vfprintf+0x2a2>
    65be:	55 20       	and	r5, r5
    65c0:	39 f0       	breq	.+14     	; 0x65d0 <vfprintf+0x2a2>
    65c2:	b7 01       	movw	r22, r14
    65c4:	80 e2       	ldi	r24, 0x20	; 32
    65c6:	90 e0       	ldi	r25, 0x00	; 0
    65c8:	0e 94 76 36 	call	0x6cec	; 0x6cec <fputc>
    65cc:	5a 94       	dec	r5
    65ce:	f7 cf       	rjmp	.-18     	; 0x65be <vfprintf+0x290>
    65d0:	00 23       	and	r16, r16
    65d2:	29 f0       	breq	.+10     	; 0x65de <vfprintf+0x2b0>
    65d4:	b7 01       	movw	r22, r14
    65d6:	80 2f       	mov	r24, r16
    65d8:	90 e0       	ldi	r25, 0x00	; 0
    65da:	0e 94 76 36 	call	0x6cec	; 0x6cec <fputc>
    65de:	93 fc       	sbrc	r9, 3
    65e0:	09 c0       	rjmp	.+18     	; 0x65f4 <vfprintf+0x2c6>
    65e2:	55 20       	and	r5, r5
    65e4:	39 f0       	breq	.+14     	; 0x65f4 <vfprintf+0x2c6>
    65e6:	b7 01       	movw	r22, r14
    65e8:	80 e3       	ldi	r24, 0x30	; 48
    65ea:	90 e0       	ldi	r25, 0x00	; 0
    65ec:	0e 94 76 36 	call	0x6cec	; 0x6cec <fputc>
    65f0:	5a 94       	dec	r5
    65f2:	f7 cf       	rjmp	.-18     	; 0x65e2 <vfprintf+0x2b4>
    65f4:	97 fe       	sbrs	r9, 7
    65f6:	4c c0       	rjmp	.+152    	; 0x6690 <vfprintf+0x362>
    65f8:	46 01       	movw	r8, r12
    65fa:	d7 fe       	sbrs	r13, 7
    65fc:	02 c0       	rjmp	.+4      	; 0x6602 <vfprintf+0x2d4>
    65fe:	81 2c       	mov	r8, r1
    6600:	91 2c       	mov	r9, r1
    6602:	c6 01       	movw	r24, r12
    6604:	88 19       	sub	r24, r8
    6606:	99 09       	sbc	r25, r9
    6608:	f3 01       	movw	r30, r6
    660a:	e8 0f       	add	r30, r24
    660c:	f9 1f       	adc	r31, r25
    660e:	ed 87       	std	Y+13, r30	; 0x0d
    6610:	fe 87       	std	Y+14, r31	; 0x0e
    6612:	96 01       	movw	r18, r12
    6614:	24 19       	sub	r18, r4
    6616:	31 09       	sbc	r19, r1
    6618:	2f 87       	std	Y+15, r18	; 0x0f
    661a:	38 8b       	std	Y+16, r19	; 0x10
    661c:	01 2f       	mov	r16, r17
    661e:	10 e0       	ldi	r17, 0x00	; 0
    6620:	11 95       	neg	r17
    6622:	01 95       	neg	r16
    6624:	11 09       	sbc	r17, r1
    6626:	3f ef       	ldi	r19, 0xFF	; 255
    6628:	83 16       	cp	r8, r19
    662a:	93 06       	cpc	r9, r19
    662c:	29 f4       	brne	.+10     	; 0x6638 <vfprintf+0x30a>
    662e:	b7 01       	movw	r22, r14
    6630:	8e e2       	ldi	r24, 0x2E	; 46
    6632:	90 e0       	ldi	r25, 0x00	; 0
    6634:	0e 94 76 36 	call	0x6cec	; 0x6cec <fputc>
    6638:	c8 14       	cp	r12, r8
    663a:	d9 04       	cpc	r13, r9
    663c:	4c f0       	brlt	.+18     	; 0x6650 <vfprintf+0x322>
    663e:	8f 85       	ldd	r24, Y+15	; 0x0f
    6640:	98 89       	ldd	r25, Y+16	; 0x10
    6642:	88 15       	cp	r24, r8
    6644:	99 05       	cpc	r25, r9
    6646:	24 f4       	brge	.+8      	; 0x6650 <vfprintf+0x322>
    6648:	ed 85       	ldd	r30, Y+13	; 0x0d
    664a:	fe 85       	ldd	r31, Y+14	; 0x0e
    664c:	81 81       	ldd	r24, Z+1	; 0x01
    664e:	01 c0       	rjmp	.+2      	; 0x6652 <vfprintf+0x324>
    6650:	80 e3       	ldi	r24, 0x30	; 48
    6652:	f1 e0       	ldi	r31, 0x01	; 1
    6654:	8f 1a       	sub	r8, r31
    6656:	91 08       	sbc	r9, r1
    6658:	2d 85       	ldd	r18, Y+13	; 0x0d
    665a:	3e 85       	ldd	r19, Y+14	; 0x0e
    665c:	2f 5f       	subi	r18, 0xFF	; 255
    665e:	3f 4f       	sbci	r19, 0xFF	; 255
    6660:	2d 87       	std	Y+13, r18	; 0x0d
    6662:	3e 87       	std	Y+14, r19	; 0x0e
    6664:	80 16       	cp	r8, r16
    6666:	91 06       	cpc	r9, r17
    6668:	2c f0       	brlt	.+10     	; 0x6674 <vfprintf+0x346>
    666a:	b7 01       	movw	r22, r14
    666c:	90 e0       	ldi	r25, 0x00	; 0
    666e:	0e 94 76 36 	call	0x6cec	; 0x6cec <fputc>
    6672:	d9 cf       	rjmp	.-78     	; 0x6626 <vfprintf+0x2f8>
    6674:	c8 14       	cp	r12, r8
    6676:	d9 04       	cpc	r13, r9
    6678:	41 f4       	brne	.+16     	; 0x668a <vfprintf+0x35c>
    667a:	9a 81       	ldd	r25, Y+2	; 0x02
    667c:	96 33       	cpi	r25, 0x36	; 54
    667e:	20 f4       	brcc	.+8      	; 0x6688 <vfprintf+0x35a>
    6680:	95 33       	cpi	r25, 0x35	; 53
    6682:	19 f4       	brne	.+6      	; 0x668a <vfprintf+0x35c>
    6684:	3c 85       	ldd	r19, Y+12	; 0x0c
    6686:	34 ff       	sbrs	r19, 4
    6688:	81 e3       	ldi	r24, 0x31	; 49
    668a:	b7 01       	movw	r22, r14
    668c:	90 e0       	ldi	r25, 0x00	; 0
    668e:	4e c0       	rjmp	.+156    	; 0x672c <vfprintf+0x3fe>
    6690:	8a 81       	ldd	r24, Y+2	; 0x02
    6692:	81 33       	cpi	r24, 0x31	; 49
    6694:	19 f0       	breq	.+6      	; 0x669c <vfprintf+0x36e>
    6696:	9c 85       	ldd	r25, Y+12	; 0x0c
    6698:	9f 7e       	andi	r25, 0xEF	; 239
    669a:	9c 87       	std	Y+12, r25	; 0x0c
    669c:	b7 01       	movw	r22, r14
    669e:	90 e0       	ldi	r25, 0x00	; 0
    66a0:	0e 94 76 36 	call	0x6cec	; 0x6cec <fputc>
    66a4:	11 11       	cpse	r17, r1
    66a6:	05 c0       	rjmp	.+10     	; 0x66b2 <vfprintf+0x384>
    66a8:	94 fc       	sbrc	r9, 4
    66aa:	18 c0       	rjmp	.+48     	; 0x66dc <vfprintf+0x3ae>
    66ac:	85 e6       	ldi	r24, 0x65	; 101
    66ae:	90 e0       	ldi	r25, 0x00	; 0
    66b0:	17 c0       	rjmp	.+46     	; 0x66e0 <vfprintf+0x3b2>
    66b2:	b7 01       	movw	r22, r14
    66b4:	8e e2       	ldi	r24, 0x2E	; 46
    66b6:	90 e0       	ldi	r25, 0x00	; 0
    66b8:	0e 94 76 36 	call	0x6cec	; 0x6cec <fputc>
    66bc:	1e 5f       	subi	r17, 0xFE	; 254
    66be:	82 e0       	ldi	r24, 0x02	; 2
    66c0:	01 e0       	ldi	r16, 0x01	; 1
    66c2:	08 0f       	add	r16, r24
    66c4:	f3 01       	movw	r30, r6
    66c6:	e8 0f       	add	r30, r24
    66c8:	f1 1d       	adc	r31, r1
    66ca:	80 81       	ld	r24, Z
    66cc:	b7 01       	movw	r22, r14
    66ce:	90 e0       	ldi	r25, 0x00	; 0
    66d0:	0e 94 76 36 	call	0x6cec	; 0x6cec <fputc>
    66d4:	80 2f       	mov	r24, r16
    66d6:	01 13       	cpse	r16, r17
    66d8:	f3 cf       	rjmp	.-26     	; 0x66c0 <vfprintf+0x392>
    66da:	e6 cf       	rjmp	.-52     	; 0x66a8 <vfprintf+0x37a>
    66dc:	85 e4       	ldi	r24, 0x45	; 69
    66de:	90 e0       	ldi	r25, 0x00	; 0
    66e0:	b7 01       	movw	r22, r14
    66e2:	0e 94 76 36 	call	0x6cec	; 0x6cec <fputc>
    66e6:	d7 fc       	sbrc	r13, 7
    66e8:	06 c0       	rjmp	.+12     	; 0x66f6 <vfprintf+0x3c8>
    66ea:	c1 14       	cp	r12, r1
    66ec:	d1 04       	cpc	r13, r1
    66ee:	41 f4       	brne	.+16     	; 0x6700 <vfprintf+0x3d2>
    66f0:	ec 85       	ldd	r30, Y+12	; 0x0c
    66f2:	e4 ff       	sbrs	r30, 4
    66f4:	05 c0       	rjmp	.+10     	; 0x6700 <vfprintf+0x3d2>
    66f6:	d1 94       	neg	r13
    66f8:	c1 94       	neg	r12
    66fa:	d1 08       	sbc	r13, r1
    66fc:	8d e2       	ldi	r24, 0x2D	; 45
    66fe:	01 c0       	rjmp	.+2      	; 0x6702 <vfprintf+0x3d4>
    6700:	8b e2       	ldi	r24, 0x2B	; 43
    6702:	b7 01       	movw	r22, r14
    6704:	90 e0       	ldi	r25, 0x00	; 0
    6706:	0e 94 76 36 	call	0x6cec	; 0x6cec <fputc>
    670a:	80 e3       	ldi	r24, 0x30	; 48
    670c:	2a e0       	ldi	r18, 0x0A	; 10
    670e:	c2 16       	cp	r12, r18
    6710:	d1 04       	cpc	r13, r1
    6712:	2c f0       	brlt	.+10     	; 0x671e <vfprintf+0x3f0>
    6714:	8f 5f       	subi	r24, 0xFF	; 255
    6716:	fa e0       	ldi	r31, 0x0A	; 10
    6718:	cf 1a       	sub	r12, r31
    671a:	d1 08       	sbc	r13, r1
    671c:	f7 cf       	rjmp	.-18     	; 0x670c <vfprintf+0x3de>
    671e:	b7 01       	movw	r22, r14
    6720:	90 e0       	ldi	r25, 0x00	; 0
    6722:	0e 94 76 36 	call	0x6cec	; 0x6cec <fputc>
    6726:	b7 01       	movw	r22, r14
    6728:	c6 01       	movw	r24, r12
    672a:	c0 96       	adiw	r24, 0x30	; 48
    672c:	0e 94 76 36 	call	0x6cec	; 0x6cec <fputc>
    6730:	54 c1       	rjmp	.+680    	; 0x69da <vfprintf+0x6ac>
    6732:	83 36       	cpi	r24, 0x63	; 99
    6734:	31 f0       	breq	.+12     	; 0x6742 <vfprintf+0x414>
    6736:	83 37       	cpi	r24, 0x73	; 115
    6738:	79 f0       	breq	.+30     	; 0x6758 <vfprintf+0x42a>
    673a:	83 35       	cpi	r24, 0x53	; 83
    673c:	09 f0       	breq	.+2      	; 0x6740 <vfprintf+0x412>
    673e:	56 c0       	rjmp	.+172    	; 0x67ec <vfprintf+0x4be>
    6740:	20 c0       	rjmp	.+64     	; 0x6782 <vfprintf+0x454>
    6742:	56 01       	movw	r10, r12
    6744:	32 e0       	ldi	r19, 0x02	; 2
    6746:	a3 0e       	add	r10, r19
    6748:	b1 1c       	adc	r11, r1
    674a:	f6 01       	movw	r30, r12
    674c:	80 81       	ld	r24, Z
    674e:	89 83       	std	Y+1, r24	; 0x01
    6750:	01 e0       	ldi	r16, 0x01	; 1
    6752:	10 e0       	ldi	r17, 0x00	; 0
    6754:	63 01       	movw	r12, r6
    6756:	12 c0       	rjmp	.+36     	; 0x677c <vfprintf+0x44e>
    6758:	56 01       	movw	r10, r12
    675a:	f2 e0       	ldi	r31, 0x02	; 2
    675c:	af 0e       	add	r10, r31
    675e:	b1 1c       	adc	r11, r1
    6760:	f6 01       	movw	r30, r12
    6762:	c0 80       	ld	r12, Z
    6764:	d1 80       	ldd	r13, Z+1	; 0x01
    6766:	96 fe       	sbrs	r9, 6
    6768:	03 c0       	rjmp	.+6      	; 0x6770 <vfprintf+0x442>
    676a:	61 2f       	mov	r22, r17
    676c:	70 e0       	ldi	r23, 0x00	; 0
    676e:	02 c0       	rjmp	.+4      	; 0x6774 <vfprintf+0x446>
    6770:	6f ef       	ldi	r22, 0xFF	; 255
    6772:	7f ef       	ldi	r23, 0xFF	; 255
    6774:	c6 01       	movw	r24, r12
    6776:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <strnlen>
    677a:	8c 01       	movw	r16, r24
    677c:	f9 2d       	mov	r31, r9
    677e:	ff 77       	andi	r31, 0x7F	; 127
    6780:	14 c0       	rjmp	.+40     	; 0x67aa <vfprintf+0x47c>
    6782:	56 01       	movw	r10, r12
    6784:	22 e0       	ldi	r18, 0x02	; 2
    6786:	a2 0e       	add	r10, r18
    6788:	b1 1c       	adc	r11, r1
    678a:	f6 01       	movw	r30, r12
    678c:	c0 80       	ld	r12, Z
    678e:	d1 80       	ldd	r13, Z+1	; 0x01
    6790:	96 fe       	sbrs	r9, 6
    6792:	03 c0       	rjmp	.+6      	; 0x679a <vfprintf+0x46c>
    6794:	61 2f       	mov	r22, r17
    6796:	70 e0       	ldi	r23, 0x00	; 0
    6798:	02 c0       	rjmp	.+4      	; 0x679e <vfprintf+0x470>
    679a:	6f ef       	ldi	r22, 0xFF	; 255
    679c:	7f ef       	ldi	r23, 0xFF	; 255
    679e:	c6 01       	movw	r24, r12
    67a0:	0e 94 17 36 	call	0x6c2e	; 0x6c2e <strnlen_P>
    67a4:	8c 01       	movw	r16, r24
    67a6:	f9 2d       	mov	r31, r9
    67a8:	f0 68       	ori	r31, 0x80	; 128
    67aa:	9f 2e       	mov	r9, r31
    67ac:	f3 fd       	sbrc	r31, 3
    67ae:	1a c0       	rjmp	.+52     	; 0x67e4 <vfprintf+0x4b6>
    67b0:	85 2d       	mov	r24, r5
    67b2:	90 e0       	ldi	r25, 0x00	; 0
    67b4:	08 17       	cp	r16, r24
    67b6:	19 07       	cpc	r17, r25
    67b8:	a8 f4       	brcc	.+42     	; 0x67e4 <vfprintf+0x4b6>
    67ba:	b7 01       	movw	r22, r14
    67bc:	80 e2       	ldi	r24, 0x20	; 32
    67be:	90 e0       	ldi	r25, 0x00	; 0
    67c0:	0e 94 76 36 	call	0x6cec	; 0x6cec <fputc>
    67c4:	5a 94       	dec	r5
    67c6:	f4 cf       	rjmp	.-24     	; 0x67b0 <vfprintf+0x482>
    67c8:	f6 01       	movw	r30, r12
    67ca:	97 fc       	sbrc	r9, 7
    67cc:	85 91       	lpm	r24, Z+
    67ce:	97 fe       	sbrs	r9, 7
    67d0:	81 91       	ld	r24, Z+
    67d2:	6f 01       	movw	r12, r30
    67d4:	b7 01       	movw	r22, r14
    67d6:	90 e0       	ldi	r25, 0x00	; 0
    67d8:	0e 94 76 36 	call	0x6cec	; 0x6cec <fputc>
    67dc:	51 10       	cpse	r5, r1
    67de:	5a 94       	dec	r5
    67e0:	01 50       	subi	r16, 0x01	; 1
    67e2:	11 09       	sbc	r17, r1
    67e4:	01 15       	cp	r16, r1
    67e6:	11 05       	cpc	r17, r1
    67e8:	79 f7       	brne	.-34     	; 0x67c8 <vfprintf+0x49a>
    67ea:	f7 c0       	rjmp	.+494    	; 0x69da <vfprintf+0x6ac>
    67ec:	84 36       	cpi	r24, 0x64	; 100
    67ee:	11 f0       	breq	.+4      	; 0x67f4 <vfprintf+0x4c6>
    67f0:	89 36       	cpi	r24, 0x69	; 105
    67f2:	61 f5       	brne	.+88     	; 0x684c <vfprintf+0x51e>
    67f4:	56 01       	movw	r10, r12
    67f6:	97 fe       	sbrs	r9, 7
    67f8:	09 c0       	rjmp	.+18     	; 0x680c <vfprintf+0x4de>
    67fa:	24 e0       	ldi	r18, 0x04	; 4
    67fc:	a2 0e       	add	r10, r18
    67fe:	b1 1c       	adc	r11, r1
    6800:	f6 01       	movw	r30, r12
    6802:	60 81       	ld	r22, Z
    6804:	71 81       	ldd	r23, Z+1	; 0x01
    6806:	82 81       	ldd	r24, Z+2	; 0x02
    6808:	93 81       	ldd	r25, Z+3	; 0x03
    680a:	0a c0       	rjmp	.+20     	; 0x6820 <vfprintf+0x4f2>
    680c:	f2 e0       	ldi	r31, 0x02	; 2
    680e:	af 0e       	add	r10, r31
    6810:	b1 1c       	adc	r11, r1
    6812:	f6 01       	movw	r30, r12
    6814:	60 81       	ld	r22, Z
    6816:	71 81       	ldd	r23, Z+1	; 0x01
    6818:	07 2e       	mov	r0, r23
    681a:	00 0c       	add	r0, r0
    681c:	88 0b       	sbc	r24, r24
    681e:	99 0b       	sbc	r25, r25
    6820:	f9 2d       	mov	r31, r9
    6822:	ff 76       	andi	r31, 0x6F	; 111
    6824:	9f 2e       	mov	r9, r31
    6826:	97 ff       	sbrs	r25, 7
    6828:	09 c0       	rjmp	.+18     	; 0x683c <vfprintf+0x50e>
    682a:	90 95       	com	r25
    682c:	80 95       	com	r24
    682e:	70 95       	com	r23
    6830:	61 95       	neg	r22
    6832:	7f 4f       	sbci	r23, 0xFF	; 255
    6834:	8f 4f       	sbci	r24, 0xFF	; 255
    6836:	9f 4f       	sbci	r25, 0xFF	; 255
    6838:	f0 68       	ori	r31, 0x80	; 128
    683a:	9f 2e       	mov	r9, r31
    683c:	2a e0       	ldi	r18, 0x0A	; 10
    683e:	30 e0       	ldi	r19, 0x00	; 0
    6840:	a3 01       	movw	r20, r6
    6842:	0e 94 db 36 	call	0x6db6	; 0x6db6 <__ultoa_invert>
    6846:	c8 2e       	mov	r12, r24
    6848:	c6 18       	sub	r12, r6
    684a:	3f c0       	rjmp	.+126    	; 0x68ca <vfprintf+0x59c>
    684c:	09 2d       	mov	r16, r9
    684e:	85 37       	cpi	r24, 0x75	; 117
    6850:	21 f4       	brne	.+8      	; 0x685a <vfprintf+0x52c>
    6852:	0f 7e       	andi	r16, 0xEF	; 239
    6854:	2a e0       	ldi	r18, 0x0A	; 10
    6856:	30 e0       	ldi	r19, 0x00	; 0
    6858:	1d c0       	rjmp	.+58     	; 0x6894 <vfprintf+0x566>
    685a:	09 7f       	andi	r16, 0xF9	; 249
    685c:	8f 36       	cpi	r24, 0x6F	; 111
    685e:	91 f0       	breq	.+36     	; 0x6884 <vfprintf+0x556>
    6860:	18 f4       	brcc	.+6      	; 0x6868 <vfprintf+0x53a>
    6862:	88 35       	cpi	r24, 0x58	; 88
    6864:	59 f0       	breq	.+22     	; 0x687c <vfprintf+0x54e>
    6866:	c3 c0       	rjmp	.+390    	; 0x69ee <vfprintf+0x6c0>
    6868:	80 37       	cpi	r24, 0x70	; 112
    686a:	19 f0       	breq	.+6      	; 0x6872 <vfprintf+0x544>
    686c:	88 37       	cpi	r24, 0x78	; 120
    686e:	11 f0       	breq	.+4      	; 0x6874 <vfprintf+0x546>
    6870:	be c0       	rjmp	.+380    	; 0x69ee <vfprintf+0x6c0>
    6872:	00 61       	ori	r16, 0x10	; 16
    6874:	04 ff       	sbrs	r16, 4
    6876:	09 c0       	rjmp	.+18     	; 0x688a <vfprintf+0x55c>
    6878:	04 60       	ori	r16, 0x04	; 4
    687a:	07 c0       	rjmp	.+14     	; 0x688a <vfprintf+0x55c>
    687c:	94 fe       	sbrs	r9, 4
    687e:	08 c0       	rjmp	.+16     	; 0x6890 <vfprintf+0x562>
    6880:	06 60       	ori	r16, 0x06	; 6
    6882:	06 c0       	rjmp	.+12     	; 0x6890 <vfprintf+0x562>
    6884:	28 e0       	ldi	r18, 0x08	; 8
    6886:	30 e0       	ldi	r19, 0x00	; 0
    6888:	05 c0       	rjmp	.+10     	; 0x6894 <vfprintf+0x566>
    688a:	20 e1       	ldi	r18, 0x10	; 16
    688c:	30 e0       	ldi	r19, 0x00	; 0
    688e:	02 c0       	rjmp	.+4      	; 0x6894 <vfprintf+0x566>
    6890:	20 e1       	ldi	r18, 0x10	; 16
    6892:	32 e0       	ldi	r19, 0x02	; 2
    6894:	56 01       	movw	r10, r12
    6896:	07 ff       	sbrs	r16, 7
    6898:	09 c0       	rjmp	.+18     	; 0x68ac <vfprintf+0x57e>
    689a:	84 e0       	ldi	r24, 0x04	; 4
    689c:	a8 0e       	add	r10, r24
    689e:	b1 1c       	adc	r11, r1
    68a0:	f6 01       	movw	r30, r12
    68a2:	60 81       	ld	r22, Z
    68a4:	71 81       	ldd	r23, Z+1	; 0x01
    68a6:	82 81       	ldd	r24, Z+2	; 0x02
    68a8:	93 81       	ldd	r25, Z+3	; 0x03
    68aa:	08 c0       	rjmp	.+16     	; 0x68bc <vfprintf+0x58e>
    68ac:	f2 e0       	ldi	r31, 0x02	; 2
    68ae:	af 0e       	add	r10, r31
    68b0:	b1 1c       	adc	r11, r1
    68b2:	f6 01       	movw	r30, r12
    68b4:	60 81       	ld	r22, Z
    68b6:	71 81       	ldd	r23, Z+1	; 0x01
    68b8:	80 e0       	ldi	r24, 0x00	; 0
    68ba:	90 e0       	ldi	r25, 0x00	; 0
    68bc:	a3 01       	movw	r20, r6
    68be:	0e 94 db 36 	call	0x6db6	; 0x6db6 <__ultoa_invert>
    68c2:	c8 2e       	mov	r12, r24
    68c4:	c6 18       	sub	r12, r6
    68c6:	0f 77       	andi	r16, 0x7F	; 127
    68c8:	90 2e       	mov	r9, r16
    68ca:	96 fe       	sbrs	r9, 6
    68cc:	0b c0       	rjmp	.+22     	; 0x68e4 <vfprintf+0x5b6>
    68ce:	09 2d       	mov	r16, r9
    68d0:	0e 7f       	andi	r16, 0xFE	; 254
    68d2:	c1 16       	cp	r12, r17
    68d4:	50 f4       	brcc	.+20     	; 0x68ea <vfprintf+0x5bc>
    68d6:	94 fe       	sbrs	r9, 4
    68d8:	0a c0       	rjmp	.+20     	; 0x68ee <vfprintf+0x5c0>
    68da:	92 fc       	sbrc	r9, 2
    68dc:	08 c0       	rjmp	.+16     	; 0x68ee <vfprintf+0x5c0>
    68de:	09 2d       	mov	r16, r9
    68e0:	0e 7e       	andi	r16, 0xEE	; 238
    68e2:	05 c0       	rjmp	.+10     	; 0x68ee <vfprintf+0x5c0>
    68e4:	dc 2c       	mov	r13, r12
    68e6:	09 2d       	mov	r16, r9
    68e8:	03 c0       	rjmp	.+6      	; 0x68f0 <vfprintf+0x5c2>
    68ea:	dc 2c       	mov	r13, r12
    68ec:	01 c0       	rjmp	.+2      	; 0x68f0 <vfprintf+0x5c2>
    68ee:	d1 2e       	mov	r13, r17
    68f0:	04 ff       	sbrs	r16, 4
    68f2:	0d c0       	rjmp	.+26     	; 0x690e <vfprintf+0x5e0>
    68f4:	fe 01       	movw	r30, r28
    68f6:	ec 0d       	add	r30, r12
    68f8:	f1 1d       	adc	r31, r1
    68fa:	80 81       	ld	r24, Z
    68fc:	80 33       	cpi	r24, 0x30	; 48
    68fe:	11 f4       	brne	.+4      	; 0x6904 <vfprintf+0x5d6>
    6900:	09 7e       	andi	r16, 0xE9	; 233
    6902:	09 c0       	rjmp	.+18     	; 0x6916 <vfprintf+0x5e8>
    6904:	02 ff       	sbrs	r16, 2
    6906:	06 c0       	rjmp	.+12     	; 0x6914 <vfprintf+0x5e6>
    6908:	d3 94       	inc	r13
    690a:	d3 94       	inc	r13
    690c:	04 c0       	rjmp	.+8      	; 0x6916 <vfprintf+0x5e8>
    690e:	80 2f       	mov	r24, r16
    6910:	86 78       	andi	r24, 0x86	; 134
    6912:	09 f0       	breq	.+2      	; 0x6916 <vfprintf+0x5e8>
    6914:	d3 94       	inc	r13
    6916:	03 fd       	sbrc	r16, 3
    6918:	11 c0       	rjmp	.+34     	; 0x693c <vfprintf+0x60e>
    691a:	00 ff       	sbrs	r16, 0
    691c:	06 c0       	rjmp	.+12     	; 0x692a <vfprintf+0x5fc>
    691e:	1c 2d       	mov	r17, r12
    6920:	d5 14       	cp	r13, r5
    6922:	80 f4       	brcc	.+32     	; 0x6944 <vfprintf+0x616>
    6924:	15 0d       	add	r17, r5
    6926:	1d 19       	sub	r17, r13
    6928:	0d c0       	rjmp	.+26     	; 0x6944 <vfprintf+0x616>
    692a:	d5 14       	cp	r13, r5
    692c:	58 f4       	brcc	.+22     	; 0x6944 <vfprintf+0x616>
    692e:	b7 01       	movw	r22, r14
    6930:	80 e2       	ldi	r24, 0x20	; 32
    6932:	90 e0       	ldi	r25, 0x00	; 0
    6934:	0e 94 76 36 	call	0x6cec	; 0x6cec <fputc>
    6938:	d3 94       	inc	r13
    693a:	f7 cf       	rjmp	.-18     	; 0x692a <vfprintf+0x5fc>
    693c:	d5 14       	cp	r13, r5
    693e:	10 f4       	brcc	.+4      	; 0x6944 <vfprintf+0x616>
    6940:	5d 18       	sub	r5, r13
    6942:	01 c0       	rjmp	.+2      	; 0x6946 <vfprintf+0x618>
    6944:	51 2c       	mov	r5, r1
    6946:	04 ff       	sbrs	r16, 4
    6948:	10 c0       	rjmp	.+32     	; 0x696a <vfprintf+0x63c>
    694a:	b7 01       	movw	r22, r14
    694c:	80 e3       	ldi	r24, 0x30	; 48
    694e:	90 e0       	ldi	r25, 0x00	; 0
    6950:	0e 94 76 36 	call	0x6cec	; 0x6cec <fputc>
    6954:	02 ff       	sbrs	r16, 2
    6956:	17 c0       	rjmp	.+46     	; 0x6986 <vfprintf+0x658>
    6958:	01 fd       	sbrc	r16, 1
    695a:	03 c0       	rjmp	.+6      	; 0x6962 <vfprintf+0x634>
    695c:	88 e7       	ldi	r24, 0x78	; 120
    695e:	90 e0       	ldi	r25, 0x00	; 0
    6960:	02 c0       	rjmp	.+4      	; 0x6966 <vfprintf+0x638>
    6962:	88 e5       	ldi	r24, 0x58	; 88
    6964:	90 e0       	ldi	r25, 0x00	; 0
    6966:	b7 01       	movw	r22, r14
    6968:	0c c0       	rjmp	.+24     	; 0x6982 <vfprintf+0x654>
    696a:	80 2f       	mov	r24, r16
    696c:	86 78       	andi	r24, 0x86	; 134
    696e:	59 f0       	breq	.+22     	; 0x6986 <vfprintf+0x658>
    6970:	01 ff       	sbrs	r16, 1
    6972:	02 c0       	rjmp	.+4      	; 0x6978 <vfprintf+0x64a>
    6974:	8b e2       	ldi	r24, 0x2B	; 43
    6976:	01 c0       	rjmp	.+2      	; 0x697a <vfprintf+0x64c>
    6978:	80 e2       	ldi	r24, 0x20	; 32
    697a:	07 fd       	sbrc	r16, 7
    697c:	8d e2       	ldi	r24, 0x2D	; 45
    697e:	b7 01       	movw	r22, r14
    6980:	90 e0       	ldi	r25, 0x00	; 0
    6982:	0e 94 76 36 	call	0x6cec	; 0x6cec <fputc>
    6986:	c1 16       	cp	r12, r17
    6988:	38 f4       	brcc	.+14     	; 0x6998 <vfprintf+0x66a>
    698a:	b7 01       	movw	r22, r14
    698c:	80 e3       	ldi	r24, 0x30	; 48
    698e:	90 e0       	ldi	r25, 0x00	; 0
    6990:	0e 94 76 36 	call	0x6cec	; 0x6cec <fputc>
    6994:	11 50       	subi	r17, 0x01	; 1
    6996:	f7 cf       	rjmp	.-18     	; 0x6986 <vfprintf+0x658>
    6998:	ca 94       	dec	r12
    699a:	f3 01       	movw	r30, r6
    699c:	ec 0d       	add	r30, r12
    699e:	f1 1d       	adc	r31, r1
    69a0:	80 81       	ld	r24, Z
    69a2:	b7 01       	movw	r22, r14
    69a4:	90 e0       	ldi	r25, 0x00	; 0
    69a6:	0e 94 76 36 	call	0x6cec	; 0x6cec <fputc>
    69aa:	c1 10       	cpse	r12, r1
    69ac:	f5 cf       	rjmp	.-22     	; 0x6998 <vfprintf+0x66a>
    69ae:	15 c0       	rjmp	.+42     	; 0x69da <vfprintf+0x6ac>
    69b0:	f4 e0       	ldi	r31, 0x04	; 4
    69b2:	f5 15       	cp	r31, r5
    69b4:	60 f5       	brcc	.+88     	; 0x6a0e <vfprintf+0x6e0>
    69b6:	84 e0       	ldi	r24, 0x04	; 4
    69b8:	58 1a       	sub	r5, r24
    69ba:	93 fe       	sbrs	r9, 3
    69bc:	1f c0       	rjmp	.+62     	; 0x69fc <vfprintf+0x6ce>
    69be:	01 11       	cpse	r16, r1
    69c0:	27 c0       	rjmp	.+78     	; 0x6a10 <vfprintf+0x6e2>
    69c2:	2c 85       	ldd	r18, Y+12	; 0x0c
    69c4:	23 ff       	sbrs	r18, 3
    69c6:	2a c0       	rjmp	.+84     	; 0x6a1c <vfprintf+0x6ee>
    69c8:	08 e4       	ldi	r16, 0x48	; 72
    69ca:	12 e0       	ldi	r17, 0x02	; 2
    69cc:	39 2d       	mov	r19, r9
    69ce:	30 71       	andi	r19, 0x10	; 16
    69d0:	93 2e       	mov	r9, r19
    69d2:	f8 01       	movw	r30, r16
    69d4:	84 91       	lpm	r24, Z
    69d6:	81 11       	cpse	r24, r1
    69d8:	24 c0       	rjmp	.+72     	; 0x6a22 <vfprintf+0x6f4>
    69da:	55 20       	and	r5, r5
    69dc:	09 f4       	brne	.+2      	; 0x69e0 <vfprintf+0x6b2>
    69de:	e4 cc       	rjmp	.-1592   	; 0x63a8 <vfprintf+0x7a>
    69e0:	b7 01       	movw	r22, r14
    69e2:	80 e2       	ldi	r24, 0x20	; 32
    69e4:	90 e0       	ldi	r25, 0x00	; 0
    69e6:	0e 94 76 36 	call	0x6cec	; 0x6cec <fputc>
    69ea:	5a 94       	dec	r5
    69ec:	f6 cf       	rjmp	.-20     	; 0x69da <vfprintf+0x6ac>
    69ee:	f7 01       	movw	r30, r14
    69f0:	86 81       	ldd	r24, Z+6	; 0x06
    69f2:	97 81       	ldd	r25, Z+7	; 0x07
    69f4:	26 c0       	rjmp	.+76     	; 0x6a42 <vfprintf+0x714>
    69f6:	8f ef       	ldi	r24, 0xFF	; 255
    69f8:	9f ef       	ldi	r25, 0xFF	; 255
    69fa:	23 c0       	rjmp	.+70     	; 0x6a42 <vfprintf+0x714>
    69fc:	b7 01       	movw	r22, r14
    69fe:	80 e2       	ldi	r24, 0x20	; 32
    6a00:	90 e0       	ldi	r25, 0x00	; 0
    6a02:	0e 94 76 36 	call	0x6cec	; 0x6cec <fputc>
    6a06:	5a 94       	dec	r5
    6a08:	51 10       	cpse	r5, r1
    6a0a:	f8 cf       	rjmp	.-16     	; 0x69fc <vfprintf+0x6ce>
    6a0c:	d8 cf       	rjmp	.-80     	; 0x69be <vfprintf+0x690>
    6a0e:	51 2c       	mov	r5, r1
    6a10:	b7 01       	movw	r22, r14
    6a12:	80 2f       	mov	r24, r16
    6a14:	90 e0       	ldi	r25, 0x00	; 0
    6a16:	0e 94 76 36 	call	0x6cec	; 0x6cec <fputc>
    6a1a:	d3 cf       	rjmp	.-90     	; 0x69c2 <vfprintf+0x694>
    6a1c:	0c e4       	ldi	r16, 0x4C	; 76
    6a1e:	12 e0       	ldi	r17, 0x02	; 2
    6a20:	d5 cf       	rjmp	.-86     	; 0x69cc <vfprintf+0x69e>
    6a22:	91 10       	cpse	r9, r1
    6a24:	80 52       	subi	r24, 0x20	; 32
    6a26:	b7 01       	movw	r22, r14
    6a28:	90 e0       	ldi	r25, 0x00	; 0
    6a2a:	0e 94 76 36 	call	0x6cec	; 0x6cec <fputc>
    6a2e:	0f 5f       	subi	r16, 0xFF	; 255
    6a30:	1f 4f       	sbci	r17, 0xFF	; 255
    6a32:	cf cf       	rjmp	.-98     	; 0x69d2 <vfprintf+0x6a4>
    6a34:	23 e0       	ldi	r18, 0x03	; 3
    6a36:	25 15       	cp	r18, r5
    6a38:	10 f4       	brcc	.+4      	; 0x6a3e <vfprintf+0x710>
    6a3a:	83 e0       	ldi	r24, 0x03	; 3
    6a3c:	bd cf       	rjmp	.-134    	; 0x69b8 <vfprintf+0x68a>
    6a3e:	51 2c       	mov	r5, r1
    6a40:	c0 cf       	rjmp	.-128    	; 0x69c2 <vfprintf+0x694>
    6a42:	60 96       	adiw	r28, 0x10	; 16
    6a44:	cd bf       	out	0x3d, r28	; 61
    6a46:	de bf       	out	0x3e, r29	; 62
    6a48:	df 91       	pop	r29
    6a4a:	cf 91       	pop	r28
    6a4c:	1f 91       	pop	r17
    6a4e:	0f 91       	pop	r16
    6a50:	ff 90       	pop	r15
    6a52:	ef 90       	pop	r14
    6a54:	df 90       	pop	r13
    6a56:	cf 90       	pop	r12
    6a58:	bf 90       	pop	r11
    6a5a:	af 90       	pop	r10
    6a5c:	9f 90       	pop	r9
    6a5e:	8f 90       	pop	r8
    6a60:	7f 90       	pop	r7
    6a62:	6f 90       	pop	r6
    6a64:	5f 90       	pop	r5
    6a66:	4f 90       	pop	r4
    6a68:	3f 90       	pop	r3
    6a6a:	2f 90       	pop	r2
    6a6c:	08 95       	ret

00006a6e <__tablejump2__>:
    6a6e:	ee 0f       	add	r30, r30
    6a70:	ff 1f       	adc	r31, r31
    6a72:	88 1f       	adc	r24, r24
    6a74:	8b bf       	out	0x3b, r24	; 59
    6a76:	07 90       	elpm	r0, Z+
    6a78:	f6 91       	elpm	r31, Z
    6a7a:	e0 2d       	mov	r30, r0
    6a7c:	19 94       	eijmp

00006a7e <__ftoa_engine>:
    6a7e:	28 30       	cpi	r18, 0x08	; 8
    6a80:	08 f0       	brcs	.+2      	; 0x6a84 <__ftoa_engine+0x6>
    6a82:	27 e0       	ldi	r18, 0x07	; 7
    6a84:	33 27       	eor	r19, r19
    6a86:	da 01       	movw	r26, r20
    6a88:	99 0f       	add	r25, r25
    6a8a:	31 1d       	adc	r19, r1
    6a8c:	87 fd       	sbrc	r24, 7
    6a8e:	91 60       	ori	r25, 0x01	; 1
    6a90:	00 96       	adiw	r24, 0x00	; 0
    6a92:	61 05       	cpc	r22, r1
    6a94:	71 05       	cpc	r23, r1
    6a96:	39 f4       	brne	.+14     	; 0x6aa6 <__ftoa_engine+0x28>
    6a98:	32 60       	ori	r19, 0x02	; 2
    6a9a:	2e 5f       	subi	r18, 0xFE	; 254
    6a9c:	3d 93       	st	X+, r19
    6a9e:	30 e3       	ldi	r19, 0x30	; 48
    6aa0:	2a 95       	dec	r18
    6aa2:	e1 f7       	brne	.-8      	; 0x6a9c <__ftoa_engine+0x1e>
    6aa4:	08 95       	ret
    6aa6:	9f 3f       	cpi	r25, 0xFF	; 255
    6aa8:	30 f0       	brcs	.+12     	; 0x6ab6 <__ftoa_engine+0x38>
    6aaa:	80 38       	cpi	r24, 0x80	; 128
    6aac:	71 05       	cpc	r23, r1
    6aae:	61 05       	cpc	r22, r1
    6ab0:	09 f0       	breq	.+2      	; 0x6ab4 <__ftoa_engine+0x36>
    6ab2:	3c 5f       	subi	r19, 0xFC	; 252
    6ab4:	3c 5f       	subi	r19, 0xFC	; 252
    6ab6:	3d 93       	st	X+, r19
    6ab8:	91 30       	cpi	r25, 0x01	; 1
    6aba:	08 f0       	brcs	.+2      	; 0x6abe <__ftoa_engine+0x40>
    6abc:	80 68       	ori	r24, 0x80	; 128
    6abe:	91 1d       	adc	r25, r1
    6ac0:	df 93       	push	r29
    6ac2:	cf 93       	push	r28
    6ac4:	1f 93       	push	r17
    6ac6:	0f 93       	push	r16
    6ac8:	ff 92       	push	r15
    6aca:	ef 92       	push	r14
    6acc:	19 2f       	mov	r17, r25
    6ace:	98 7f       	andi	r25, 0xF8	; 248
    6ad0:	96 95       	lsr	r25
    6ad2:	e9 2f       	mov	r30, r25
    6ad4:	96 95       	lsr	r25
    6ad6:	96 95       	lsr	r25
    6ad8:	e9 0f       	add	r30, r25
    6ada:	ff 27       	eor	r31, r31
    6adc:	e6 55       	subi	r30, 0x56	; 86
    6ade:	fd 4f       	sbci	r31, 0xFD	; 253
    6ae0:	99 27       	eor	r25, r25
    6ae2:	33 27       	eor	r19, r19
    6ae4:	ee 24       	eor	r14, r14
    6ae6:	ff 24       	eor	r15, r15
    6ae8:	a7 01       	movw	r20, r14
    6aea:	e7 01       	movw	r28, r14
    6aec:	05 90       	lpm	r0, Z+
    6aee:	08 94       	sec
    6af0:	07 94       	ror	r0
    6af2:	28 f4       	brcc	.+10     	; 0x6afe <__ftoa_engine+0x80>
    6af4:	36 0f       	add	r19, r22
    6af6:	e7 1e       	adc	r14, r23
    6af8:	f8 1e       	adc	r15, r24
    6afa:	49 1f       	adc	r20, r25
    6afc:	51 1d       	adc	r21, r1
    6afe:	66 0f       	add	r22, r22
    6b00:	77 1f       	adc	r23, r23
    6b02:	88 1f       	adc	r24, r24
    6b04:	99 1f       	adc	r25, r25
    6b06:	06 94       	lsr	r0
    6b08:	a1 f7       	brne	.-24     	; 0x6af2 <__ftoa_engine+0x74>
    6b0a:	05 90       	lpm	r0, Z+
    6b0c:	07 94       	ror	r0
    6b0e:	28 f4       	brcc	.+10     	; 0x6b1a <__ftoa_engine+0x9c>
    6b10:	e7 0e       	add	r14, r23
    6b12:	f8 1e       	adc	r15, r24
    6b14:	49 1f       	adc	r20, r25
    6b16:	56 1f       	adc	r21, r22
    6b18:	c1 1d       	adc	r28, r1
    6b1a:	77 0f       	add	r23, r23
    6b1c:	88 1f       	adc	r24, r24
    6b1e:	99 1f       	adc	r25, r25
    6b20:	66 1f       	adc	r22, r22
    6b22:	06 94       	lsr	r0
    6b24:	a1 f7       	brne	.-24     	; 0x6b0e <__ftoa_engine+0x90>
    6b26:	05 90       	lpm	r0, Z+
    6b28:	07 94       	ror	r0
    6b2a:	28 f4       	brcc	.+10     	; 0x6b36 <__ftoa_engine+0xb8>
    6b2c:	f8 0e       	add	r15, r24
    6b2e:	49 1f       	adc	r20, r25
    6b30:	56 1f       	adc	r21, r22
    6b32:	c7 1f       	adc	r28, r23
    6b34:	d1 1d       	adc	r29, r1
    6b36:	88 0f       	add	r24, r24
    6b38:	99 1f       	adc	r25, r25
    6b3a:	66 1f       	adc	r22, r22
    6b3c:	77 1f       	adc	r23, r23
    6b3e:	06 94       	lsr	r0
    6b40:	a1 f7       	brne	.-24     	; 0x6b2a <__ftoa_engine+0xac>
    6b42:	05 90       	lpm	r0, Z+
    6b44:	07 94       	ror	r0
    6b46:	20 f4       	brcc	.+8      	; 0x6b50 <__ftoa_engine+0xd2>
    6b48:	49 0f       	add	r20, r25
    6b4a:	56 1f       	adc	r21, r22
    6b4c:	c7 1f       	adc	r28, r23
    6b4e:	d8 1f       	adc	r29, r24
    6b50:	99 0f       	add	r25, r25
    6b52:	66 1f       	adc	r22, r22
    6b54:	77 1f       	adc	r23, r23
    6b56:	88 1f       	adc	r24, r24
    6b58:	06 94       	lsr	r0
    6b5a:	a9 f7       	brne	.-22     	; 0x6b46 <__ftoa_engine+0xc8>
    6b5c:	84 91       	lpm	r24, Z
    6b5e:	10 95       	com	r17
    6b60:	17 70       	andi	r17, 0x07	; 7
    6b62:	41 f0       	breq	.+16     	; 0x6b74 <__ftoa_engine+0xf6>
    6b64:	d6 95       	lsr	r29
    6b66:	c7 95       	ror	r28
    6b68:	57 95       	ror	r21
    6b6a:	47 95       	ror	r20
    6b6c:	f7 94       	ror	r15
    6b6e:	e7 94       	ror	r14
    6b70:	1a 95       	dec	r17
    6b72:	c1 f7       	brne	.-16     	; 0x6b64 <__ftoa_engine+0xe6>
    6b74:	e0 e5       	ldi	r30, 0x50	; 80
    6b76:	f2 e0       	ldi	r31, 0x02	; 2
    6b78:	68 94       	set
    6b7a:	15 90       	lpm	r1, Z+
    6b7c:	15 91       	lpm	r17, Z+
    6b7e:	35 91       	lpm	r19, Z+
    6b80:	65 91       	lpm	r22, Z+
    6b82:	95 91       	lpm	r25, Z+
    6b84:	05 90       	lpm	r0, Z+
    6b86:	7f e2       	ldi	r23, 0x2F	; 47
    6b88:	73 95       	inc	r23
    6b8a:	e1 18       	sub	r14, r1
    6b8c:	f1 0a       	sbc	r15, r17
    6b8e:	43 0b       	sbc	r20, r19
    6b90:	56 0b       	sbc	r21, r22
    6b92:	c9 0b       	sbc	r28, r25
    6b94:	d0 09       	sbc	r29, r0
    6b96:	c0 f7       	brcc	.-16     	; 0x6b88 <__ftoa_engine+0x10a>
    6b98:	e1 0c       	add	r14, r1
    6b9a:	f1 1e       	adc	r15, r17
    6b9c:	43 1f       	adc	r20, r19
    6b9e:	56 1f       	adc	r21, r22
    6ba0:	c9 1f       	adc	r28, r25
    6ba2:	d0 1d       	adc	r29, r0
    6ba4:	7e f4       	brtc	.+30     	; 0x6bc4 <__ftoa_engine+0x146>
    6ba6:	70 33       	cpi	r23, 0x30	; 48
    6ba8:	11 f4       	brne	.+4      	; 0x6bae <__ftoa_engine+0x130>
    6baa:	8a 95       	dec	r24
    6bac:	e6 cf       	rjmp	.-52     	; 0x6b7a <__ftoa_engine+0xfc>
    6bae:	e8 94       	clt
    6bb0:	01 50       	subi	r16, 0x01	; 1
    6bb2:	30 f0       	brcs	.+12     	; 0x6bc0 <__ftoa_engine+0x142>
    6bb4:	08 0f       	add	r16, r24
    6bb6:	0a f4       	brpl	.+2      	; 0x6bba <__ftoa_engine+0x13c>
    6bb8:	00 27       	eor	r16, r16
    6bba:	02 17       	cp	r16, r18
    6bbc:	08 f4       	brcc	.+2      	; 0x6bc0 <__ftoa_engine+0x142>
    6bbe:	20 2f       	mov	r18, r16
    6bc0:	23 95       	inc	r18
    6bc2:	02 2f       	mov	r16, r18
    6bc4:	7a 33       	cpi	r23, 0x3A	; 58
    6bc6:	28 f0       	brcs	.+10     	; 0x6bd2 <__ftoa_engine+0x154>
    6bc8:	79 e3       	ldi	r23, 0x39	; 57
    6bca:	7d 93       	st	X+, r23
    6bcc:	2a 95       	dec	r18
    6bce:	e9 f7       	brne	.-6      	; 0x6bca <__ftoa_engine+0x14c>
    6bd0:	10 c0       	rjmp	.+32     	; 0x6bf2 <__ftoa_engine+0x174>
    6bd2:	7d 93       	st	X+, r23
    6bd4:	2a 95       	dec	r18
    6bd6:	89 f6       	brne	.-94     	; 0x6b7a <__ftoa_engine+0xfc>
    6bd8:	06 94       	lsr	r0
    6bda:	97 95       	ror	r25
    6bdc:	67 95       	ror	r22
    6bde:	37 95       	ror	r19
    6be0:	17 95       	ror	r17
    6be2:	17 94       	ror	r1
    6be4:	e1 18       	sub	r14, r1
    6be6:	f1 0a       	sbc	r15, r17
    6be8:	43 0b       	sbc	r20, r19
    6bea:	56 0b       	sbc	r21, r22
    6bec:	c9 0b       	sbc	r28, r25
    6bee:	d0 09       	sbc	r29, r0
    6bf0:	98 f0       	brcs	.+38     	; 0x6c18 <__ftoa_engine+0x19a>
    6bf2:	23 95       	inc	r18
    6bf4:	7e 91       	ld	r23, -X
    6bf6:	73 95       	inc	r23
    6bf8:	7a 33       	cpi	r23, 0x3A	; 58
    6bfa:	08 f0       	brcs	.+2      	; 0x6bfe <__ftoa_engine+0x180>
    6bfc:	70 e3       	ldi	r23, 0x30	; 48
    6bfe:	7c 93       	st	X, r23
    6c00:	20 13       	cpse	r18, r16
    6c02:	b8 f7       	brcc	.-18     	; 0x6bf2 <__ftoa_engine+0x174>
    6c04:	7e 91       	ld	r23, -X
    6c06:	70 61       	ori	r23, 0x10	; 16
    6c08:	7d 93       	st	X+, r23
    6c0a:	30 f0       	brcs	.+12     	; 0x6c18 <__ftoa_engine+0x19a>
    6c0c:	83 95       	inc	r24
    6c0e:	71 e3       	ldi	r23, 0x31	; 49
    6c10:	7d 93       	st	X+, r23
    6c12:	70 e3       	ldi	r23, 0x30	; 48
    6c14:	2a 95       	dec	r18
    6c16:	e1 f7       	brne	.-8      	; 0x6c10 <__ftoa_engine+0x192>
    6c18:	11 24       	eor	r1, r1
    6c1a:	ef 90       	pop	r14
    6c1c:	ff 90       	pop	r15
    6c1e:	0f 91       	pop	r16
    6c20:	1f 91       	pop	r17
    6c22:	cf 91       	pop	r28
    6c24:	df 91       	pop	r29
    6c26:	99 27       	eor	r25, r25
    6c28:	87 fd       	sbrc	r24, 7
    6c2a:	90 95       	com	r25
    6c2c:	08 95       	ret

00006c2e <strnlen_P>:
    6c2e:	fc 01       	movw	r30, r24
    6c30:	05 90       	lpm	r0, Z+
    6c32:	61 50       	subi	r22, 0x01	; 1
    6c34:	70 40       	sbci	r23, 0x00	; 0
    6c36:	01 10       	cpse	r0, r1
    6c38:	d8 f7       	brcc	.-10     	; 0x6c30 <strnlen_P+0x2>
    6c3a:	80 95       	com	r24
    6c3c:	90 95       	com	r25
    6c3e:	8e 0f       	add	r24, r30
    6c40:	9f 1f       	adc	r25, r31
    6c42:	08 95       	ret

00006c44 <memcpy>:
    6c44:	fb 01       	movw	r30, r22
    6c46:	dc 01       	movw	r26, r24
    6c48:	02 c0       	rjmp	.+4      	; 0x6c4e <memcpy+0xa>
    6c4a:	01 90       	ld	r0, Z+
    6c4c:	0d 92       	st	X+, r0
    6c4e:	41 50       	subi	r20, 0x01	; 1
    6c50:	50 40       	sbci	r21, 0x00	; 0
    6c52:	d8 f7       	brcc	.-10     	; 0x6c4a <memcpy+0x6>
    6c54:	08 95       	ret

00006c56 <memset>:
    6c56:	dc 01       	movw	r26, r24
    6c58:	01 c0       	rjmp	.+2      	; 0x6c5c <memset+0x6>
    6c5a:	6d 93       	st	X+, r22
    6c5c:	41 50       	subi	r20, 0x01	; 1
    6c5e:	50 40       	sbci	r21, 0x00	; 0
    6c60:	e0 f7       	brcc	.-8      	; 0x6c5a <memset+0x4>
    6c62:	08 95       	ret

00006c64 <strlen>:
    6c64:	fc 01       	movw	r30, r24
    6c66:	01 90       	ld	r0, Z+
    6c68:	00 20       	and	r0, r0
    6c6a:	e9 f7       	brne	.-6      	; 0x6c66 <strlen+0x2>
    6c6c:	80 95       	com	r24
    6c6e:	90 95       	com	r25
    6c70:	8e 0f       	add	r24, r30
    6c72:	9f 1f       	adc	r25, r31
    6c74:	08 95       	ret

00006c76 <strnlen>:
    6c76:	fc 01       	movw	r30, r24
    6c78:	61 50       	subi	r22, 0x01	; 1
    6c7a:	70 40       	sbci	r23, 0x00	; 0
    6c7c:	01 90       	ld	r0, Z+
    6c7e:	01 10       	cpse	r0, r1
    6c80:	d8 f7       	brcc	.-10     	; 0x6c78 <strnlen+0x2>
    6c82:	80 95       	com	r24
    6c84:	90 95       	com	r25
    6c86:	8e 0f       	add	r24, r30
    6c88:	9f 1f       	adc	r25, r31
    6c8a:	08 95       	ret

00006c8c <itoa>:
    6c8c:	45 32       	cpi	r20, 0x25	; 37
    6c8e:	51 05       	cpc	r21, r1
    6c90:	20 f4       	brcc	.+8      	; 0x6c9a <itoa+0xe>
    6c92:	42 30       	cpi	r20, 0x02	; 2
    6c94:	10 f0       	brcs	.+4      	; 0x6c9a <itoa+0xe>
    6c96:	0c 94 51 36 	jmp	0x6ca2	; 0x6ca2 <__itoa_ncheck>
    6c9a:	fb 01       	movw	r30, r22
    6c9c:	10 82       	st	Z, r1
    6c9e:	cb 01       	movw	r24, r22
    6ca0:	08 95       	ret

00006ca2 <__itoa_ncheck>:
    6ca2:	bb 27       	eor	r27, r27
    6ca4:	4a 30       	cpi	r20, 0x0A	; 10
    6ca6:	31 f4       	brne	.+12     	; 0x6cb4 <__itoa_ncheck+0x12>
    6ca8:	99 23       	and	r25, r25
    6caa:	22 f4       	brpl	.+8      	; 0x6cb4 <__itoa_ncheck+0x12>
    6cac:	bd e2       	ldi	r27, 0x2D	; 45
    6cae:	90 95       	com	r25
    6cb0:	81 95       	neg	r24
    6cb2:	9f 4f       	sbci	r25, 0xFF	; 255
    6cb4:	0c 94 5d 36 	jmp	0x6cba	; 0x6cba <__utoa_common>

00006cb8 <__utoa_ncheck>:
    6cb8:	bb 27       	eor	r27, r27

00006cba <__utoa_common>:
    6cba:	fb 01       	movw	r30, r22
    6cbc:	55 27       	eor	r21, r21
    6cbe:	aa 27       	eor	r26, r26
    6cc0:	88 0f       	add	r24, r24
    6cc2:	99 1f       	adc	r25, r25
    6cc4:	aa 1f       	adc	r26, r26
    6cc6:	a4 17       	cp	r26, r20
    6cc8:	10 f0       	brcs	.+4      	; 0x6cce <__utoa_common+0x14>
    6cca:	a4 1b       	sub	r26, r20
    6ccc:	83 95       	inc	r24
    6cce:	50 51       	subi	r21, 0x10	; 16
    6cd0:	b9 f7       	brne	.-18     	; 0x6cc0 <__utoa_common+0x6>
    6cd2:	a0 5d       	subi	r26, 0xD0	; 208
    6cd4:	aa 33       	cpi	r26, 0x3A	; 58
    6cd6:	08 f0       	brcs	.+2      	; 0x6cda <__utoa_common+0x20>
    6cd8:	a9 5d       	subi	r26, 0xD9	; 217
    6cda:	a1 93       	st	Z+, r26
    6cdc:	00 97       	sbiw	r24, 0x00	; 0
    6cde:	79 f7       	brne	.-34     	; 0x6cbe <__utoa_common+0x4>
    6ce0:	b1 11       	cpse	r27, r1
    6ce2:	b1 93       	st	Z+, r27
    6ce4:	11 92       	st	Z+, r1
    6ce6:	cb 01       	movw	r24, r22
    6ce8:	0c 94 39 37 	jmp	0x6e72	; 0x6e72 <strrev>

00006cec <fputc>:
    6cec:	0f 93       	push	r16
    6cee:	1f 93       	push	r17
    6cf0:	cf 93       	push	r28
    6cf2:	df 93       	push	r29
    6cf4:	fb 01       	movw	r30, r22
    6cf6:	23 81       	ldd	r18, Z+3	; 0x03
    6cf8:	21 fd       	sbrc	r18, 1
    6cfa:	03 c0       	rjmp	.+6      	; 0x6d02 <fputc+0x16>
    6cfc:	8f ef       	ldi	r24, 0xFF	; 255
    6cfe:	9f ef       	ldi	r25, 0xFF	; 255
    6d00:	2c c0       	rjmp	.+88     	; 0x6d5a <fputc+0x6e>
    6d02:	22 ff       	sbrs	r18, 2
    6d04:	16 c0       	rjmp	.+44     	; 0x6d32 <fputc+0x46>
    6d06:	46 81       	ldd	r20, Z+6	; 0x06
    6d08:	57 81       	ldd	r21, Z+7	; 0x07
    6d0a:	24 81       	ldd	r18, Z+4	; 0x04
    6d0c:	35 81       	ldd	r19, Z+5	; 0x05
    6d0e:	42 17       	cp	r20, r18
    6d10:	53 07       	cpc	r21, r19
    6d12:	44 f4       	brge	.+16     	; 0x6d24 <fputc+0x38>
    6d14:	a0 81       	ld	r26, Z
    6d16:	b1 81       	ldd	r27, Z+1	; 0x01
    6d18:	9d 01       	movw	r18, r26
    6d1a:	2f 5f       	subi	r18, 0xFF	; 255
    6d1c:	3f 4f       	sbci	r19, 0xFF	; 255
    6d1e:	20 83       	st	Z, r18
    6d20:	31 83       	std	Z+1, r19	; 0x01
    6d22:	8c 93       	st	X, r24
    6d24:	26 81       	ldd	r18, Z+6	; 0x06
    6d26:	37 81       	ldd	r19, Z+7	; 0x07
    6d28:	2f 5f       	subi	r18, 0xFF	; 255
    6d2a:	3f 4f       	sbci	r19, 0xFF	; 255
    6d2c:	26 83       	std	Z+6, r18	; 0x06
    6d2e:	37 83       	std	Z+7, r19	; 0x07
    6d30:	14 c0       	rjmp	.+40     	; 0x6d5a <fputc+0x6e>
    6d32:	8b 01       	movw	r16, r22
    6d34:	ec 01       	movw	r28, r24
    6d36:	fb 01       	movw	r30, r22
    6d38:	00 84       	ldd	r0, Z+8	; 0x08
    6d3a:	f1 85       	ldd	r31, Z+9	; 0x09
    6d3c:	e0 2d       	mov	r30, r0
    6d3e:	19 95       	eicall
    6d40:	89 2b       	or	r24, r25
    6d42:	e1 f6       	brne	.-72     	; 0x6cfc <fputc+0x10>
    6d44:	d8 01       	movw	r26, r16
    6d46:	16 96       	adiw	r26, 0x06	; 6
    6d48:	8d 91       	ld	r24, X+
    6d4a:	9c 91       	ld	r25, X
    6d4c:	17 97       	sbiw	r26, 0x07	; 7
    6d4e:	01 96       	adiw	r24, 0x01	; 1
    6d50:	16 96       	adiw	r26, 0x06	; 6
    6d52:	8d 93       	st	X+, r24
    6d54:	9c 93       	st	X, r25
    6d56:	17 97       	sbiw	r26, 0x07	; 7
    6d58:	ce 01       	movw	r24, r28
    6d5a:	df 91       	pop	r29
    6d5c:	cf 91       	pop	r28
    6d5e:	1f 91       	pop	r17
    6d60:	0f 91       	pop	r16
    6d62:	08 95       	ret

00006d64 <sprintf>:
    6d64:	0f 93       	push	r16
    6d66:	1f 93       	push	r17
    6d68:	cf 93       	push	r28
    6d6a:	df 93       	push	r29
    6d6c:	cd b7       	in	r28, 0x3d	; 61
    6d6e:	de b7       	in	r29, 0x3e	; 62
    6d70:	2e 97       	sbiw	r28, 0x0e	; 14
    6d72:	cd bf       	out	0x3d, r28	; 61
    6d74:	de bf       	out	0x3e, r29	; 62
    6d76:	0e 89       	ldd	r16, Y+22	; 0x16
    6d78:	1f 89       	ldd	r17, Y+23	; 0x17
    6d7a:	86 e0       	ldi	r24, 0x06	; 6
    6d7c:	8c 83       	std	Y+4, r24	; 0x04
    6d7e:	09 83       	std	Y+1, r16	; 0x01
    6d80:	1a 83       	std	Y+2, r17	; 0x02
    6d82:	8f ef       	ldi	r24, 0xFF	; 255
    6d84:	9f e7       	ldi	r25, 0x7F	; 127
    6d86:	8d 83       	std	Y+5, r24	; 0x05
    6d88:	9e 83       	std	Y+6, r25	; 0x06
    6d8a:	ae 01       	movw	r20, r28
    6d8c:	46 5e       	subi	r20, 0xE6	; 230
    6d8e:	5f 4f       	sbci	r21, 0xFF	; 255
    6d90:	68 8d       	ldd	r22, Y+24	; 0x18
    6d92:	79 8d       	ldd	r23, Y+25	; 0x19
    6d94:	ce 01       	movw	r24, r28
    6d96:	01 96       	adiw	r24, 0x01	; 1
    6d98:	0e 94 97 31 	call	0x632e	; 0x632e <vfprintf>
    6d9c:	ef 81       	ldd	r30, Y+7	; 0x07
    6d9e:	f8 85       	ldd	r31, Y+8	; 0x08
    6da0:	e0 0f       	add	r30, r16
    6da2:	f1 1f       	adc	r31, r17
    6da4:	10 82       	st	Z, r1
    6da6:	2e 96       	adiw	r28, 0x0e	; 14
    6da8:	cd bf       	out	0x3d, r28	; 61
    6daa:	de bf       	out	0x3e, r29	; 62
    6dac:	df 91       	pop	r29
    6dae:	cf 91       	pop	r28
    6db0:	1f 91       	pop	r17
    6db2:	0f 91       	pop	r16
    6db4:	08 95       	ret

00006db6 <__ultoa_invert>:
    6db6:	fa 01       	movw	r30, r20
    6db8:	aa 27       	eor	r26, r26
    6dba:	28 30       	cpi	r18, 0x08	; 8
    6dbc:	51 f1       	breq	.+84     	; 0x6e12 <__ultoa_invert+0x5c>
    6dbe:	20 31       	cpi	r18, 0x10	; 16
    6dc0:	81 f1       	breq	.+96     	; 0x6e22 <__ultoa_invert+0x6c>
    6dc2:	e8 94       	clt
    6dc4:	6f 93       	push	r22
    6dc6:	6e 7f       	andi	r22, 0xFE	; 254
    6dc8:	6e 5f       	subi	r22, 0xFE	; 254
    6dca:	7f 4f       	sbci	r23, 0xFF	; 255
    6dcc:	8f 4f       	sbci	r24, 0xFF	; 255
    6dce:	9f 4f       	sbci	r25, 0xFF	; 255
    6dd0:	af 4f       	sbci	r26, 0xFF	; 255
    6dd2:	b1 e0       	ldi	r27, 0x01	; 1
    6dd4:	3e d0       	rcall	.+124    	; 0x6e52 <__ultoa_invert+0x9c>
    6dd6:	b4 e0       	ldi	r27, 0x04	; 4
    6dd8:	3c d0       	rcall	.+120    	; 0x6e52 <__ultoa_invert+0x9c>
    6dda:	67 0f       	add	r22, r23
    6ddc:	78 1f       	adc	r23, r24
    6dde:	89 1f       	adc	r24, r25
    6de0:	9a 1f       	adc	r25, r26
    6de2:	a1 1d       	adc	r26, r1
    6de4:	68 0f       	add	r22, r24
    6de6:	79 1f       	adc	r23, r25
    6de8:	8a 1f       	adc	r24, r26
    6dea:	91 1d       	adc	r25, r1
    6dec:	a1 1d       	adc	r26, r1
    6dee:	6a 0f       	add	r22, r26
    6df0:	71 1d       	adc	r23, r1
    6df2:	81 1d       	adc	r24, r1
    6df4:	91 1d       	adc	r25, r1
    6df6:	a1 1d       	adc	r26, r1
    6df8:	20 d0       	rcall	.+64     	; 0x6e3a <__ultoa_invert+0x84>
    6dfa:	09 f4       	brne	.+2      	; 0x6dfe <__ultoa_invert+0x48>
    6dfc:	68 94       	set
    6dfe:	3f 91       	pop	r19
    6e00:	2a e0       	ldi	r18, 0x0A	; 10
    6e02:	26 9f       	mul	r18, r22
    6e04:	11 24       	eor	r1, r1
    6e06:	30 19       	sub	r19, r0
    6e08:	30 5d       	subi	r19, 0xD0	; 208
    6e0a:	31 93       	st	Z+, r19
    6e0c:	de f6       	brtc	.-74     	; 0x6dc4 <__ultoa_invert+0xe>
    6e0e:	cf 01       	movw	r24, r30
    6e10:	08 95       	ret
    6e12:	46 2f       	mov	r20, r22
    6e14:	47 70       	andi	r20, 0x07	; 7
    6e16:	40 5d       	subi	r20, 0xD0	; 208
    6e18:	41 93       	st	Z+, r20
    6e1a:	b3 e0       	ldi	r27, 0x03	; 3
    6e1c:	0f d0       	rcall	.+30     	; 0x6e3c <__ultoa_invert+0x86>
    6e1e:	c9 f7       	brne	.-14     	; 0x6e12 <__ultoa_invert+0x5c>
    6e20:	f6 cf       	rjmp	.-20     	; 0x6e0e <__ultoa_invert+0x58>
    6e22:	46 2f       	mov	r20, r22
    6e24:	4f 70       	andi	r20, 0x0F	; 15
    6e26:	40 5d       	subi	r20, 0xD0	; 208
    6e28:	4a 33       	cpi	r20, 0x3A	; 58
    6e2a:	18 f0       	brcs	.+6      	; 0x6e32 <__ultoa_invert+0x7c>
    6e2c:	49 5d       	subi	r20, 0xD9	; 217
    6e2e:	31 fd       	sbrc	r19, 1
    6e30:	40 52       	subi	r20, 0x20	; 32
    6e32:	41 93       	st	Z+, r20
    6e34:	02 d0       	rcall	.+4      	; 0x6e3a <__ultoa_invert+0x84>
    6e36:	a9 f7       	brne	.-22     	; 0x6e22 <__ultoa_invert+0x6c>
    6e38:	ea cf       	rjmp	.-44     	; 0x6e0e <__ultoa_invert+0x58>
    6e3a:	b4 e0       	ldi	r27, 0x04	; 4
    6e3c:	a6 95       	lsr	r26
    6e3e:	97 95       	ror	r25
    6e40:	87 95       	ror	r24
    6e42:	77 95       	ror	r23
    6e44:	67 95       	ror	r22
    6e46:	ba 95       	dec	r27
    6e48:	c9 f7       	brne	.-14     	; 0x6e3c <__ultoa_invert+0x86>
    6e4a:	00 97       	sbiw	r24, 0x00	; 0
    6e4c:	61 05       	cpc	r22, r1
    6e4e:	71 05       	cpc	r23, r1
    6e50:	08 95       	ret
    6e52:	9b 01       	movw	r18, r22
    6e54:	ac 01       	movw	r20, r24
    6e56:	0a 2e       	mov	r0, r26
    6e58:	06 94       	lsr	r0
    6e5a:	57 95       	ror	r21
    6e5c:	47 95       	ror	r20
    6e5e:	37 95       	ror	r19
    6e60:	27 95       	ror	r18
    6e62:	ba 95       	dec	r27
    6e64:	c9 f7       	brne	.-14     	; 0x6e58 <__ultoa_invert+0xa2>
    6e66:	62 0f       	add	r22, r18
    6e68:	73 1f       	adc	r23, r19
    6e6a:	84 1f       	adc	r24, r20
    6e6c:	95 1f       	adc	r25, r21
    6e6e:	a0 1d       	adc	r26, r0
    6e70:	08 95       	ret

00006e72 <strrev>:
    6e72:	dc 01       	movw	r26, r24
    6e74:	fc 01       	movw	r30, r24
    6e76:	67 2f       	mov	r22, r23
    6e78:	71 91       	ld	r23, Z+
    6e7a:	77 23       	and	r23, r23
    6e7c:	e1 f7       	brne	.-8      	; 0x6e76 <strrev+0x4>
    6e7e:	32 97       	sbiw	r30, 0x02	; 2
    6e80:	04 c0       	rjmp	.+8      	; 0x6e8a <strrev+0x18>
    6e82:	7c 91       	ld	r23, X
    6e84:	6d 93       	st	X+, r22
    6e86:	70 83       	st	Z, r23
    6e88:	62 91       	ld	r22, -Z
    6e8a:	ae 17       	cp	r26, r30
    6e8c:	bf 07       	cpc	r27, r31
    6e8e:	c8 f3       	brcs	.-14     	; 0x6e82 <strrev+0x10>
    6e90:	08 95       	ret

00006e92 <_exit>:
    6e92:	f8 94       	cli

00006e94 <__stop_program>:
    6e94:	ff cf       	rjmp	.-2      	; 0x6e94 <__stop_program>
