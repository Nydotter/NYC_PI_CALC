
NYC_PI_CALC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004410  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ba  00802000  00004410  000044a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000107b  008020ba  008020ba  0000455e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000455e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000045bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007f8  00000000  00000000  000045fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e248  00000000  00000000  00004df4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004ce3  00000000  00000000  0001303c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005134  00000000  00000000  00017d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001b20  00000000  00000000  0001ce54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000567b  00000000  00000000  0001e974  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008b9d  00000000  00000000  00023fef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007d8  00000000  00000000  0002cb8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 24 01 	jmp	0x248	; 0x248 <__ctors_end>
       4:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
       8:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
       c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      10:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      14:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      18:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      1c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      20:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      24:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      28:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      2c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      30:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      34:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      38:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__vector_14>
      3c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      40:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      44:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      48:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      4c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      50:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      54:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      58:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      5c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      60:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      64:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      68:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      6c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      70:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      74:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      78:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      7c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      80:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      84:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      88:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      8c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      90:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      94:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      98:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      9c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      a0:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      a4:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      a8:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      ac:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      b0:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      b4:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      b8:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      bc:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      c0:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      c4:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      c8:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      cc:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      d0:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      d4:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      d8:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      dc:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      e0:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      e4:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      e8:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      ec:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      f0:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      f4:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      f8:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      fc:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     100:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     104:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     108:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     10c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     110:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     114:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     118:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     11c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     120:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     124:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     128:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     12c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     130:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     134:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     138:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     13c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     140:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     144:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     148:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     14c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     150:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     154:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     158:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     15c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     160:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     164:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     168:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     16c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     170:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     174:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     178:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     17c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     180:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     184:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     188:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     18c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     190:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     194:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     198:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     19c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1a0:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1a4:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1a8:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1ac:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1b0:	0c 94 99 19 	jmp	0x3332	; 0x3332 <__vector_108>
     1b4:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1b8:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1bc:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1c0:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1c4:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1c8:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1cc:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1d0:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1d4:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1d8:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1dc:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1e0:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1e4:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1e8:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1ec:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1f0:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1f4:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1f8:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1fc:	46 12       	cpse	r4, r22
     1fe:	46 12       	cpse	r4, r22
     200:	46 12       	cpse	r4, r22
     202:	93 12       	cpse	r9, r19
     204:	7b 12       	cpse	r7, r27
     206:	90 12       	cpse	r9, r16
     208:	46 12       	cpse	r4, r22
     20a:	46 12       	cpse	r4, r22
     20c:	93 12       	cpse	r9, r19
     20e:	7b 12       	cpse	r7, r27

00000210 <__trampolines_start>:
     210:	0c 94 6e 13 	jmp	0x26dc	; 0x26dc <vPiLeibniz>
     214:	0c 94 3c 0b 	jmp	0x1678	; 0x1678 <prvIdleTask>
     218:	0c 94 d0 13 	jmp	0x27a0	; 0x27a0 <vCompare>
     21c:	0c 94 7b 12 	jmp	0x24f6	; 0x24f6 <prvProcessReceivedCommands+0xf2>
     220:	0c 94 1b 15 	jmp	0x2a36	; 0x2a36 <controllerTask>
     224:	0c 94 93 12 	jmp	0x2526	; 0x2526 <prvProcessReceivedCommands+0x122>
     228:	0c 94 46 14 	jmp	0x288c	; 0x288c <vDisplaytask>
     22c:	0c 94 ef 13 	jmp	0x27de	; 0x27de <vVietaPi>
     230:	0c 94 af 12 	jmp	0x255e	; 0x255e <prvTimerTask>
     234:	0c 94 1d 13 	jmp	0x263a	; 0x263a <vTimeMeasurement>
     238:	0c 94 46 12 	jmp	0x248c	; 0x248c <prvProcessReceivedCommands+0x88>
     23c:	0c 94 90 12 	jmp	0x2520	; 0x2520 <prvProcessReceivedCommands+0x11c>
     240:	0c 94 0a 04 	jmp	0x814	; 0x814 <vEventGroupSetBitsCallback>
     244:	0c 94 3d 1b 	jmp	0x367a	; 0x367a <vDisplayUpdateTask>

00000248 <__ctors_end>:
     248:	11 24       	eor	r1, r1
     24a:	1f be       	out	0x3f, r1	; 63
     24c:	cf ef       	ldi	r28, 0xFF	; 255
     24e:	cd bf       	out	0x3d, r28	; 61
     250:	df e3       	ldi	r29, 0x3F	; 63
     252:	de bf       	out	0x3e, r29	; 62
     254:	00 e0       	ldi	r16, 0x00	; 0
     256:	0c bf       	out	0x3c, r16	; 60

00000258 <init_mem>:
// !!! Never call this function, it is part of .init-Code
void __attribute__ ((naked, section(".init3"))) init_mem (void);
void init_mem (void)
{
   //  Use inline assembler so it works even with optimization turned off
   __asm volatile (
     258:	e5 e3       	ldi	r30, 0x35	; 53
     25a:	f1 e3       	ldi	r31, 0x31	; 49
     25c:	8a ea       	ldi	r24, 0xAA	; 170
     25e:	90 e4       	ldi	r25, 0x40	; 64
     260:	81 93       	st	Z+, r24
     262:	e0 30       	cpi	r30, 0x00	; 0
     264:	f9 07       	cpc	r31, r25
     266:	e0 f3       	brcs	.-8      	; 0x260 <init_mem+0x8>

00000268 <__do_copy_data>:
     268:	10 e2       	ldi	r17, 0x20	; 32
     26a:	a0 e0       	ldi	r26, 0x00	; 0
     26c:	b0 e2       	ldi	r27, 0x20	; 32
     26e:	e0 e1       	ldi	r30, 0x10	; 16
     270:	f4 e4       	ldi	r31, 0x44	; 68
     272:	00 e0       	ldi	r16, 0x00	; 0
     274:	0b bf       	out	0x3b, r16	; 59
     276:	02 c0       	rjmp	.+4      	; 0x27c <__do_copy_data+0x14>
     278:	07 90       	elpm	r0, Z+
     27a:	0d 92       	st	X+, r0
     27c:	aa 3b       	cpi	r26, 0xBA	; 186
     27e:	b1 07       	cpc	r27, r17
     280:	d9 f7       	brne	.-10     	; 0x278 <__do_copy_data+0x10>

00000282 <__do_clear_bss>:
     282:	21 e3       	ldi	r18, 0x31	; 49
     284:	aa eb       	ldi	r26, 0xBA	; 186
     286:	b0 e2       	ldi	r27, 0x20	; 32
     288:	01 c0       	rjmp	.+2      	; 0x28c <.do_clear_bss_start>

0000028a <.do_clear_bss_loop>:
     28a:	1d 92       	st	X+, r1

0000028c <.do_clear_bss_start>:
     28c:	a5 33       	cpi	r26, 0x35	; 53
     28e:	b2 07       	cpc	r27, r18
     290:	e1 f7       	brne	.-8      	; 0x28a <.do_clear_bss_loop>
     292:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <main>
     296:	0c 94 06 22 	jmp	0x440c	; 0x440c <_exit>

0000029a <__bad_interrupt>:
     29a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000029e <initButtons>:
 #define BUTTON_PRESS_LONG			500

 

 void initButtons(void) {
	PORTF.DIRCLR = PIN4_bm; //SW1
     29e:	e0 ea       	ldi	r30, 0xA0	; 160
     2a0:	f6 e0       	ldi	r31, 0x06	; 6
     2a2:	80 e1       	ldi	r24, 0x10	; 16
     2a4:	82 83       	std	Z+2, r24	; 0x02
	PORTF.DIRCLR = PIN5_bm; //SW2
     2a6:	80 e2       	ldi	r24, 0x20	; 32
     2a8:	82 83       	std	Z+2, r24	; 0x02
	PORTF.DIRCLR = PIN6_bm; //SW3
     2aa:	80 e4       	ldi	r24, 0x40	; 64
     2ac:	82 83       	std	Z+2, r24	; 0x02
	PORTF.DIRCLR = PIN7_bm; //SW4
     2ae:	80 e8       	ldi	r24, 0x80	; 128
     2b0:	82 83       	std	Z+2, r24	; 0x02
     2b2:	08 95       	ret

000002b4 <updateButtons>:
 void updateButtons(void) {
	static uint16_t b1Count = 0;
	static uint16_t b2Count = 0;
	static uint16_t b3Count = 0;
	static uint16_t b4Count = 0;
	if(Button1_Value == 0) {
     2b4:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7de6a8>
     2b8:	84 fd       	sbrc	r24, 4
     2ba:	0e c0       	rjmp	.+28     	; 0x2d8 <updateButtons+0x24>
		if(b1Count < 60000) {
     2bc:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <b1Count.3829>
     2c0:	90 91 c1 20 	lds	r25, 0x20C1	; 0x8020c1 <b1Count.3829+0x1>
     2c4:	80 36       	cpi	r24, 0x60	; 96
     2c6:	2a ee       	ldi	r18, 0xEA	; 234
     2c8:	92 07       	cpc	r25, r18
     2ca:	e8 f4       	brcc	.+58     	; 0x306 <updateButtons+0x52>
			b1Count++;
     2cc:	01 96       	adiw	r24, 0x01	; 1
     2ce:	80 93 c0 20 	sts	0x20C0, r24	; 0x8020c0 <b1Count.3829>
     2d2:	90 93 c1 20 	sts	0x20C1, r25	; 0x8020c1 <b1Count.3829+0x1>
     2d6:	17 c0       	rjmp	.+46     	; 0x306 <updateButtons+0x52>
		}
	} else {
		if(b1Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     2d8:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <b1Count.3829>
     2dc:	90 91 c1 20 	lds	r25, 0x20C1	; 0x8020c1 <b1Count.3829+0x1>
     2e0:	8b 30       	cpi	r24, 0x0B	; 11
     2e2:	91 05       	cpc	r25, r1
     2e4:	48 f0       	brcs	.+18     	; 0x2f8 <updateButtons+0x44>
			if(b1Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     2e6:	c3 97       	sbiw	r24, 0x33	; 51
     2e8:	18 f0       	brcs	.+6      	; 0x2f0 <updateButtons+0x3c>
				//Button was pressed Long
				b1Status = LONG_PRESSED;
     2ea:	10 92 2c 31 	sts	0x312C, r1	; 0x80312c <b1Status>
     2ee:	07 c0       	rjmp	.+14     	; 0x2fe <updateButtons+0x4a>
			} else {
				//Button was pressed Short	
				b1Status = SHORT_PRESSED;
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	80 93 2c 31 	sts	0x312C, r24	; 0x80312c <b1Status>
     2f6:	03 c0       	rjmp	.+6      	; 0x2fe <updateButtons+0x4a>
			}
		} else {
			b1Status = NOT_PRESSED;
     2f8:	82 e0       	ldi	r24, 0x02	; 2
     2fa:	80 93 2c 31 	sts	0x312C, r24	; 0x80312c <b1Status>
		}
		b1Count = 0;
     2fe:	10 92 c0 20 	sts	0x20C0, r1	; 0x8020c0 <b1Count.3829>
     302:	10 92 c1 20 	sts	0x20C1, r1	; 0x8020c1 <b1Count.3829+0x1>
	}
	if(Button2_Value == 0) {
     306:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7de6a8>
     30a:	85 fd       	sbrc	r24, 5
     30c:	0e c0       	rjmp	.+28     	; 0x32a <updateButtons+0x76>
		if(b2Count < 60000) {
     30e:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <b2Count.3830>
     312:	90 91 bf 20 	lds	r25, 0x20BF	; 0x8020bf <b2Count.3830+0x1>
     316:	80 36       	cpi	r24, 0x60	; 96
     318:	2a ee       	ldi	r18, 0xEA	; 234
     31a:	92 07       	cpc	r25, r18
     31c:	e8 f4       	brcc	.+58     	; 0x358 <updateButtons+0xa4>
			b2Count++;
     31e:	01 96       	adiw	r24, 0x01	; 1
     320:	80 93 be 20 	sts	0x20BE, r24	; 0x8020be <b2Count.3830>
     324:	90 93 bf 20 	sts	0x20BF, r25	; 0x8020bf <b2Count.3830+0x1>
     328:	17 c0       	rjmp	.+46     	; 0x358 <updateButtons+0xa4>
		}
	} else {
		if(b2Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     32a:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <b2Count.3830>
     32e:	90 91 bf 20 	lds	r25, 0x20BF	; 0x8020bf <b2Count.3830+0x1>
     332:	8b 30       	cpi	r24, 0x0B	; 11
     334:	91 05       	cpc	r25, r1
     336:	48 f0       	brcs	.+18     	; 0x34a <updateButtons+0x96>
			if(b2Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     338:	c3 97       	sbiw	r24, 0x33	; 51
     33a:	18 f0       	brcs	.+6      	; 0x342 <updateButtons+0x8e>
				//Button was pressed Long
				b2Status = LONG_PRESSED;
     33c:	10 92 2d 31 	sts	0x312D, r1	; 0x80312d <b2Status>
     340:	07 c0       	rjmp	.+14     	; 0x350 <updateButtons+0x9c>
				} else {
				//Button was pressed Short
				b2Status = SHORT_PRESSED;
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	80 93 2d 31 	sts	0x312D, r24	; 0x80312d <b2Status>
     348:	03 c0       	rjmp	.+6      	; 0x350 <updateButtons+0x9c>
			}
		} else {
			b2Status = NOT_PRESSED;			
     34a:	82 e0       	ldi	r24, 0x02	; 2
     34c:	80 93 2d 31 	sts	0x312D, r24	; 0x80312d <b2Status>
		}
		b2Count = 0;
     350:	10 92 be 20 	sts	0x20BE, r1	; 0x8020be <b2Count.3830>
     354:	10 92 bf 20 	sts	0x20BF, r1	; 0x8020bf <b2Count.3830+0x1>
	}
	if(Button3_Value == 0) {
     358:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7de6a8>
     35c:	86 fd       	sbrc	r24, 6
     35e:	0e c0       	rjmp	.+28     	; 0x37c <updateButtons+0xc8>
		if(b3Count < 60000) {
     360:	80 91 bc 20 	lds	r24, 0x20BC	; 0x8020bc <b3Count.3831>
     364:	90 91 bd 20 	lds	r25, 0x20BD	; 0x8020bd <b3Count.3831+0x1>
     368:	80 36       	cpi	r24, 0x60	; 96
     36a:	2a ee       	ldi	r18, 0xEA	; 234
     36c:	92 07       	cpc	r25, r18
     36e:	e8 f4       	brcc	.+58     	; 0x3aa <updateButtons+0xf6>
			b3Count++;
     370:	01 96       	adiw	r24, 0x01	; 1
     372:	80 93 bc 20 	sts	0x20BC, r24	; 0x8020bc <b3Count.3831>
     376:	90 93 bd 20 	sts	0x20BD, r25	; 0x8020bd <b3Count.3831+0x1>
     37a:	17 c0       	rjmp	.+46     	; 0x3aa <updateButtons+0xf6>
		}
	} else {
		if(b3Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     37c:	80 91 bc 20 	lds	r24, 0x20BC	; 0x8020bc <b3Count.3831>
     380:	90 91 bd 20 	lds	r25, 0x20BD	; 0x8020bd <b3Count.3831+0x1>
     384:	8b 30       	cpi	r24, 0x0B	; 11
     386:	91 05       	cpc	r25, r1
     388:	48 f0       	brcs	.+18     	; 0x39c <updateButtons+0xe8>
			if(b3Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     38a:	c3 97       	sbiw	r24, 0x33	; 51
     38c:	18 f0       	brcs	.+6      	; 0x394 <updateButtons+0xe0>
				//Button was pressed Long
				b3Status = LONG_PRESSED;
     38e:	10 92 2e 31 	sts	0x312E, r1	; 0x80312e <b3Status>
     392:	07 c0       	rjmp	.+14     	; 0x3a2 <updateButtons+0xee>
				} else {
				//Button was pressed Short
				b3Status = SHORT_PRESSED;
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	80 93 2e 31 	sts	0x312E, r24	; 0x80312e <b3Status>
     39a:	03 c0       	rjmp	.+6      	; 0x3a2 <updateButtons+0xee>
			}
		} else {
			b3Status = NOT_PRESSED;
     39c:	82 e0       	ldi	r24, 0x02	; 2
     39e:	80 93 2e 31 	sts	0x312E, r24	; 0x80312e <b3Status>
		}
		b3Count = 0;
     3a2:	10 92 bc 20 	sts	0x20BC, r1	; 0x8020bc <b3Count.3831>
     3a6:	10 92 bd 20 	sts	0x20BD, r1	; 0x8020bd <b3Count.3831+0x1>
	}
	if(Button4_Value == 0) {
     3aa:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7de6a8>
     3ae:	88 23       	and	r24, r24
     3b0:	74 f0       	brlt	.+28     	; 0x3ce <updateButtons+0x11a>
		if(b4Count < 60000) {
     3b2:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <__data_end>
     3b6:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <__data_end+0x1>
     3ba:	80 36       	cpi	r24, 0x60	; 96
     3bc:	2a ee       	ldi	r18, 0xEA	; 234
     3be:	92 07       	cpc	r25, r18
     3c0:	e8 f4       	brcc	.+58     	; 0x3fc <updateButtons+0x148>
			b4Count++;
     3c2:	01 96       	adiw	r24, 0x01	; 1
     3c4:	80 93 ba 20 	sts	0x20BA, r24	; 0x8020ba <__data_end>
     3c8:	90 93 bb 20 	sts	0x20BB, r25	; 0x8020bb <__data_end+0x1>
     3cc:	08 95       	ret
		}
	} else {
		if(b4Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     3ce:	80 91 ba 20 	lds	r24, 0x20BA	; 0x8020ba <__data_end>
     3d2:	90 91 bb 20 	lds	r25, 0x20BB	; 0x8020bb <__data_end+0x1>
     3d6:	8b 30       	cpi	r24, 0x0B	; 11
     3d8:	91 05       	cpc	r25, r1
     3da:	48 f0       	brcs	.+18     	; 0x3ee <updateButtons+0x13a>
			if(b4Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     3dc:	c3 97       	sbiw	r24, 0x33	; 51
     3de:	18 f0       	brcs	.+6      	; 0x3e6 <updateButtons+0x132>
				//Button was pressed Long
				b4Status = LONG_PRESSED;
     3e0:	10 92 2f 31 	sts	0x312F, r1	; 0x80312f <b4Status>
     3e4:	07 c0       	rjmp	.+14     	; 0x3f4 <updateButtons+0x140>
				} else {
				//Button was pressed Short
				b4Status = SHORT_PRESSED;
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	80 93 2f 31 	sts	0x312F, r24	; 0x80312f <b4Status>
     3ec:	03 c0       	rjmp	.+6      	; 0x3f4 <updateButtons+0x140>
			}
		} else {
			b4Status = NOT_PRESSED;
     3ee:	82 e0       	ldi	r24, 0x02	; 2
     3f0:	80 93 2f 31 	sts	0x312F, r24	; 0x80312f <b4Status>
		}
		b4Count = 0;
     3f4:	10 92 ba 20 	sts	0x20BA, r1	; 0x8020ba <__data_end>
     3f8:	10 92 bb 20 	sts	0x20BB, r1	; 0x8020bb <__data_end+0x1>
     3fc:	08 95       	ret

000003fe <getButtonPress>:
	}
 }

 button_press_t getButtonPress(button_t button) {
	switch(button) {
     3fe:	81 30       	cpi	r24, 0x01	; 1
     400:	49 f0       	breq	.+18     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     402:	28 f0       	brcs	.+10     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     404:	82 30       	cpi	r24, 0x02	; 2
     406:	49 f0       	breq	.+18     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     408:	83 30       	cpi	r24, 0x03	; 3
     40a:	51 f0       	breq	.+20     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     40c:	0c c0       	rjmp	.+24     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		case BUTTON1:
			return b1Status;
     40e:	80 91 2c 31 	lds	r24, 0x312C	; 0x80312c <b1Status>
     412:	08 95       	ret
		break;
		case BUTTON2:
			return b2Status;
     414:	80 91 2d 31 	lds	r24, 0x312D	; 0x80312d <b2Status>
     418:	08 95       	ret
		break;
		case BUTTON3:
			return b3Status;
     41a:	80 91 2e 31 	lds	r24, 0x312E	; 0x80312e <b3Status>
     41e:	08 95       	ret
		break;
		case BUTTON4:
			return b4Status;
     420:	80 91 2f 31 	lds	r24, 0x312F	; 0x80312f <b4Status>
     424:	08 95       	ret
		break;
	}
	return NOT_PRESSED;
     426:	82 e0       	ldi	r24, 0x02	; 2
     428:	08 95       	ret

0000042a <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
     42a:	0f 93       	push	r16
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
     430:	1f 92       	push	r1
     432:	cd b7       	in	r28, 0x3d	; 61
     434:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
     436:	2f b7       	in	r18, 0x3f	; 63
     438:	29 83       	std	Y+1, r18	; 0x01
     43a:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
     43c:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
     43e:	fc 01       	movw	r30, r24
     440:	08 ed       	ldi	r16, 0xD8	; 216
     442:	04 bf       	out	0x34, r16	; 52
     444:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
     446:	89 81       	ldd	r24, Y+1	; 0x01
     448:	8f bf       	out	0x3f, r24	; 63
#endif
}
     44a:	0f 90       	pop	r0
     44c:	df 91       	pop	r29
     44e:	cf 91       	pop	r28
     450:	0f 91       	pop	r16
     452:	08 95       	ret

00000454 <CLKSYS_XOSC_Config>:
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
	OSC.XOSCCTRL = (uint8_t) freqRange |
     454:	66 23       	and	r22, r22
     456:	11 f0       	breq	.+4      	; 0x45c <CLKSYS_XOSC_Config+0x8>
     458:	90 e2       	ldi	r25, 0x20	; 32
     45a:	01 c0       	rjmp	.+2      	; 0x45e <CLKSYS_XOSC_Config+0xa>
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	89 2b       	or	r24, r25
     460:	48 2b       	or	r20, r24
     462:	40 93 52 00 	sts	0x0052, r20	; 0x800052 <__TEXT_REGION_LENGTH__+0x7de052>
     466:	08 95       	ret

00000468 <CLKSYS_PLL_Config>:
 *  \param  factor      PLL multiplication factor, must be
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
	factor &= OSC_PLLFAC_gm;
     468:	6f 71       	andi	r22, 0x1F	; 31
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
     46a:	86 2b       	or	r24, r22
     46c:	80 93 55 00 	sts	0x0055, r24	; 0x800055 <__TEXT_REGION_LENGTH__+0x7de055>
     470:	08 95       	ret

00000472 <CLKSYS_Disable>:
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
     472:	e0 e5       	ldi	r30, 0x50	; 80
     474:	f0 e0       	ldi	r31, 0x00	; 0
     476:	90 81       	ld	r25, Z
     478:	28 2f       	mov	r18, r24
     47a:	20 95       	com	r18
     47c:	92 23       	and	r25, r18
     47e:	90 83       	st	Z, r25
	uint8_t clkEnabled = OSC.CTRL & oscSel;
     480:	90 81       	ld	r25, Z
	return clkEnabled;
}
     482:	89 23       	and	r24, r25
     484:	08 95       	ret

00000486 <CLKSYS_Prescalers_Config>:
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
     486:	68 2b       	or	r22, r24
	CCPWrite( &CLK.PSCTRL, PSconfig );
     488:	81 e4       	ldi	r24, 0x41	; 65
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	0e 94 15 02 	call	0x42a	; 0x42a <CCPWrite>
     490:	08 95       	ret

00000492 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	cf 93       	push	r28
     498:	c8 2f       	mov	r28, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     49a:	00 e4       	ldi	r16, 0x40	; 64
     49c:	10 e0       	ldi	r17, 0x00	; 0
     49e:	f8 01       	movw	r30, r16
     4a0:	60 81       	ld	r22, Z
     4a2:	68 7f       	andi	r22, 0xF8	; 248
     4a4:	68 2b       	or	r22, r24
	CCPWrite( &CLK.CTRL, clkCtrl );
     4a6:	80 e4       	ldi	r24, 0x40	; 64
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	0e 94 15 02 	call	0x42a	; 0x42a <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
     4ae:	f8 01       	movw	r30, r16
     4b0:	80 81       	ld	r24, Z
	return clkCtrl;
}
     4b2:	8c 23       	and	r24, r28
     4b4:	cf 91       	pop	r28
     4b6:	1f 91       	pop	r17
     4b8:	0f 91       	pop	r16
     4ba:	08 95       	ret

000004bc <TC0_ConfigClockSource>:
{
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
     4bc:	fc 01       	movw	r30, r24
     4be:	90 81       	ld	r25, Z
     4c0:	90 7f       	andi	r25, 0xF0	; 240
     4c2:	69 2b       	or	r22, r25
     4c4:	60 83       	st	Z, r22
     4c6:	08 95       	ret

000004c8 <TC0_ConfigWGM>:
     4c8:	fc 01       	movw	r30, r24
     4ca:	91 81       	ldd	r25, Z+1	; 0x01
     4cc:	98 7f       	andi	r25, 0xF8	; 248
     4ce:	69 2b       	or	r22, r25
     4d0:	61 83       	std	Z+1, r22	; 0x01
     4d2:	08 95       	ret

000004d4 <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
     4d4:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
     4d6:	96 81       	ldd	r25, Z+6	; 0x06
     4d8:	9c 7f       	andi	r25, 0xFC	; 252
     4da:	69 2b       	or	r22, r25
     4dc:	66 83       	std	Z+6, r22	; 0x06
     4de:	08 95       	ret

000004e0 <software_reset>:
 //----------------------------------------------
 // catch heap overflow
 //
 void vApplicationMallocFailedHook( void )
 {
	 error(ERR_LOW_HEAP_SPACE);
     4e0:	00 00       	nop
     4e2:	88 ed       	ldi	r24, 0xD8	; 216
     4e4:	84 bf       	out	0x34, r24	; 52
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <__TEXT_REGION_LENGTH__+0x7de079>
     4ec:	08 95       	ret

000004ee <error>:
     4ee:	0e 94 70 02 	call	0x4e0	; 0x4e0 <software_reset>
     4f2:	08 95       	ret

000004f4 <vApplicationStackOverflowHook>:
 {
	 /* Just to stop compiler warnings. */
	 (void) pxTask;
	 (void) pcTaskName;

	 error(ERR_STACK_OVERFLOW);
     4f4:	8b e2       	ldi	r24, 0x2B	; 43
     4f6:	0e 94 77 02 	call	0x4ee	; 0x4ee <error>
     4fa:	08 95       	ret

000004fc <prvTestWaitCondition>:
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
}
     4fc:	0f 93       	push	r16
     4fe:	01 11       	cpse	r16, r1
     500:	0c c0       	rjmp	.+24     	; 0x51a <prvTestWaitCondition+0x1e>
     502:	dc 01       	movw	r26, r24
     504:	cb 01       	movw	r24, r22
     506:	82 23       	and	r24, r18
     508:	93 23       	and	r25, r19
     50a:	a4 23       	and	r26, r20
     50c:	b5 23       	and	r27, r21
     50e:	89 2b       	or	r24, r25
     510:	8a 2b       	or	r24, r26
     512:	8b 2b       	or	r24, r27
     514:	79 f4       	brne	.+30     	; 0x534 <prvTestWaitCondition+0x38>
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	10 c0       	rjmp	.+32     	; 0x53a <prvTestWaitCondition+0x3e>
     51a:	dc 01       	movw	r26, r24
     51c:	cb 01       	movw	r24, r22
     51e:	82 23       	and	r24, r18
     520:	93 23       	and	r25, r19
     522:	a4 23       	and	r26, r20
     524:	b5 23       	and	r27, r21
     526:	28 17       	cp	r18, r24
     528:	39 07       	cpc	r19, r25
     52a:	4a 07       	cpc	r20, r26
     52c:	5b 07       	cpc	r21, r27
     52e:	21 f0       	breq	.+8      	; 0x538 <prvTestWaitCondition+0x3c>
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	03 c0       	rjmp	.+6      	; 0x53a <prvTestWaitCondition+0x3e>
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	01 c0       	rjmp	.+2      	; 0x53a <prvTestWaitCondition+0x3e>
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	0f 91       	pop	r16
     53c:	08 95       	ret

0000053e <xEventGroupCreate>:
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	80 e1       	ldi	r24, 0x10	; 16
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	0e 94 1a 04 	call	0x834	; 0x834 <pvPortMalloc>
     54a:	ec 01       	movw	r28, r24
     54c:	00 97       	sbiw	r24, 0x00	; 0
     54e:	41 f0       	breq	.+16     	; 0x560 <xEventGroupCreate+0x22>
     550:	fc 01       	movw	r30, r24
     552:	11 92       	st	Z+, r1
     554:	11 92       	st	Z+, r1
     556:	11 92       	st	Z+, r1
     558:	11 92       	st	Z+, r1
     55a:	cf 01       	movw	r24, r30
     55c:	0e 94 41 04 	call	0x882	; 0x882 <vListInitialise>
     560:	ce 01       	movw	r24, r28
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	08 95       	ret

00000568 <xEventGroupWaitBits>:
     568:	2f 92       	push	r2
     56a:	3f 92       	push	r3
     56c:	4f 92       	push	r4
     56e:	5f 92       	push	r5
     570:	6f 92       	push	r6
     572:	7f 92       	push	r7
     574:	8f 92       	push	r8
     576:	9f 92       	push	r9
     578:	af 92       	push	r10
     57a:	bf 92       	push	r11
     57c:	cf 92       	push	r12
     57e:	df 92       	push	r13
     580:	ef 92       	push	r14
     582:	ff 92       	push	r15
     584:	0f 93       	push	r16
     586:	1f 93       	push	r17
     588:	cf 93       	push	r28
     58a:	df 93       	push	r29
     58c:	ec 01       	movw	r28, r24
     58e:	4a 01       	movw	r8, r20
     590:	5b 01       	movw	r10, r22
     592:	62 2e       	mov	r6, r18
     594:	70 2e       	mov	r7, r16
     596:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <vTaskSuspendAll>
     59a:	28 80       	ld	r2, Y
     59c:	39 80       	ldd	r3, Y+1	; 0x01
     59e:	4a 80       	ldd	r4, Y+2	; 0x02
     5a0:	5b 80       	ldd	r5, Y+3	; 0x03
     5a2:	a5 01       	movw	r20, r10
     5a4:	94 01       	movw	r18, r8
     5a6:	c2 01       	movw	r24, r4
     5a8:	b1 01       	movw	r22, r2
     5aa:	0e 94 7e 02 	call	0x4fc	; 0x4fc <prvTestWaitCondition>
     5ae:	88 23       	and	r24, r24
     5b0:	a1 f0       	breq	.+40     	; 0x5da <xEventGroupWaitBits+0x72>
     5b2:	66 20       	and	r6, r6
     5b4:	89 f1       	breq	.+98     	; 0x618 <xEventGroupWaitBits+0xb0>
     5b6:	d5 01       	movw	r26, r10
     5b8:	c4 01       	movw	r24, r8
     5ba:	80 95       	com	r24
     5bc:	90 95       	com	r25
     5be:	a0 95       	com	r26
     5c0:	b0 95       	com	r27
     5c2:	82 21       	and	r24, r2
     5c4:	93 21       	and	r25, r3
     5c6:	a4 21       	and	r26, r4
     5c8:	b5 21       	and	r27, r5
     5ca:	88 83       	st	Y, r24
     5cc:	99 83       	std	Y+1, r25	; 0x01
     5ce:	aa 83       	std	Y+2, r26	; 0x02
     5d0:	bb 83       	std	Y+3, r27	; 0x03
     5d2:	c1 2c       	mov	r12, r1
     5d4:	d1 2c       	mov	r13, r1
     5d6:	76 01       	movw	r14, r12
     5d8:	22 c0       	rjmp	.+68     	; 0x61e <xEventGroupWaitBits+0xb6>
     5da:	c1 14       	cp	r12, r1
     5dc:	d1 04       	cpc	r13, r1
     5de:	e1 04       	cpc	r14, r1
     5e0:	f1 04       	cpc	r15, r1
     5e2:	e9 f0       	breq	.+58     	; 0x61e <xEventGroupWaitBits+0xb6>
     5e4:	61 10       	cpse	r6, r1
     5e6:	04 c0       	rjmp	.+8      	; 0x5f0 <xEventGroupWaitBits+0x88>
     5e8:	40 e0       	ldi	r20, 0x00	; 0
     5ea:	50 e0       	ldi	r21, 0x00	; 0
     5ec:	ba 01       	movw	r22, r20
     5ee:	04 c0       	rjmp	.+8      	; 0x5f8 <xEventGroupWaitBits+0x90>
     5f0:	40 e0       	ldi	r20, 0x00	; 0
     5f2:	50 e0       	ldi	r21, 0x00	; 0
     5f4:	60 e0       	ldi	r22, 0x00	; 0
     5f6:	71 e0       	ldi	r23, 0x01	; 1
     5f8:	71 10       	cpse	r7, r1
     5fa:	74 60       	ori	r23, 0x04	; 4
     5fc:	48 29       	or	r20, r8
     5fe:	59 29       	or	r21, r9
     600:	6a 29       	or	r22, r10
     602:	7b 29       	or	r23, r11
     604:	97 01       	movw	r18, r14
     606:	86 01       	movw	r16, r12
     608:	ce 01       	movw	r24, r28
     60a:	04 96       	adiw	r24, 0x04	; 4
     60c:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <vTaskPlaceOnUnorderedEventList>
     610:	21 2c       	mov	r2, r1
     612:	31 2c       	mov	r3, r1
     614:	21 01       	movw	r4, r2
     616:	03 c0       	rjmp	.+6      	; 0x61e <xEventGroupWaitBits+0xb6>
     618:	c1 2c       	mov	r12, r1
     61a:	d1 2c       	mov	r13, r1
     61c:	76 01       	movw	r14, r12
     61e:	0e 94 bc 0c 	call	0x1978	; 0x1978 <xTaskResumeAll>
     622:	cd 28       	or	r12, r13
     624:	ce 28       	or	r12, r14
     626:	cf 28       	or	r12, r15
     628:	89 f1       	breq	.+98     	; 0x68c <xEventGroupWaitBits+0x124>
     62a:	81 11       	cpse	r24, r1
     62c:	02 c0       	rjmp	.+4      	; 0x632 <xEventGroupWaitBits+0xca>
     62e:	0e 94 ac 05 	call	0xb58	; 0xb58 <vPortYield>
     632:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <uxTaskResetEventItemValue>
     636:	6b 01       	movw	r12, r22
     638:	7c 01       	movw	r14, r24
     63a:	91 fd       	sbrc	r25, 1
     63c:	24 c0       	rjmp	.+72     	; 0x686 <xEventGroupWaitBits+0x11e>
     63e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     642:	ff 93       	push	r31
     644:	f8 7f       	andi	r31, 0xF8	; 248
     646:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     64a:	c8 80       	ld	r12, Y
     64c:	d9 80       	ldd	r13, Y+1	; 0x01
     64e:	ea 80       	ldd	r14, Y+2	; 0x02
     650:	fb 80       	ldd	r15, Y+3	; 0x03
     652:	07 2d       	mov	r16, r7
     654:	a5 01       	movw	r20, r10
     656:	94 01       	movw	r18, r8
     658:	c7 01       	movw	r24, r14
     65a:	b6 01       	movw	r22, r12
     65c:	0e 94 7e 02 	call	0x4fc	; 0x4fc <prvTestWaitCondition>
     660:	88 23       	and	r24, r24
     662:	71 f0       	breq	.+28     	; 0x680 <xEventGroupWaitBits+0x118>
     664:	66 20       	and	r6, r6
     666:	61 f0       	breq	.+24     	; 0x680 <xEventGroupWaitBits+0x118>
     668:	80 94       	com	r8
     66a:	90 94       	com	r9
     66c:	a0 94       	com	r10
     66e:	b0 94       	com	r11
     670:	8c 20       	and	r8, r12
     672:	9d 20       	and	r9, r13
     674:	ae 20       	and	r10, r14
     676:	bf 20       	and	r11, r15
     678:	88 82       	st	Y, r8
     67a:	99 82       	std	Y+1, r9	; 0x01
     67c:	aa 82       	std	Y+2, r10	; 0x02
     67e:	bb 82       	std	Y+3, r11	; 0x03
     680:	ff 91       	pop	r31
     682:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     686:	16 01       	movw	r2, r12
     688:	27 01       	movw	r4, r14
     68a:	55 24       	eor	r5, r5
     68c:	c2 01       	movw	r24, r4
     68e:	b1 01       	movw	r22, r2
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	1f 91       	pop	r17
     696:	0f 91       	pop	r16
     698:	ff 90       	pop	r15
     69a:	ef 90       	pop	r14
     69c:	df 90       	pop	r13
     69e:	cf 90       	pop	r12
     6a0:	bf 90       	pop	r11
     6a2:	af 90       	pop	r10
     6a4:	9f 90       	pop	r9
     6a6:	8f 90       	pop	r8
     6a8:	7f 90       	pop	r7
     6aa:	6f 90       	pop	r6
     6ac:	5f 90       	pop	r5
     6ae:	4f 90       	pop	r4
     6b0:	3f 90       	pop	r3
     6b2:	2f 90       	pop	r2
     6b4:	08 95       	ret

000006b6 <xEventGroupClearBits>:
     6b6:	0f 93       	push	r16
     6b8:	1f 93       	push	r17
     6ba:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     6be:	ff 93       	push	r31
     6c0:	f8 7f       	andi	r31, 0xF8	; 248
     6c2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     6c6:	fc 01       	movw	r30, r24
     6c8:	00 81       	ld	r16, Z
     6ca:	11 81       	ldd	r17, Z+1	; 0x01
     6cc:	22 81       	ldd	r18, Z+2	; 0x02
     6ce:	33 81       	ldd	r19, Z+3	; 0x03
     6d0:	40 95       	com	r20
     6d2:	50 95       	com	r21
     6d4:	60 95       	com	r22
     6d6:	70 95       	com	r23
     6d8:	40 23       	and	r20, r16
     6da:	51 23       	and	r21, r17
     6dc:	62 23       	and	r22, r18
     6de:	73 23       	and	r23, r19
     6e0:	40 83       	st	Z, r20
     6e2:	51 83       	std	Z+1, r21	; 0x01
     6e4:	62 83       	std	Z+2, r22	; 0x02
     6e6:	73 83       	std	Z+3, r23	; 0x03
     6e8:	ff 91       	pop	r31
     6ea:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     6ee:	c9 01       	movw	r24, r18
     6f0:	b8 01       	movw	r22, r16
     6f2:	1f 91       	pop	r17
     6f4:	0f 91       	pop	r16
     6f6:	08 95       	ret

000006f8 <xEventGroupSetBits>:
     6f8:	4f 92       	push	r4
     6fa:	5f 92       	push	r5
     6fc:	6f 92       	push	r6
     6fe:	7f 92       	push	r7
     700:	af 92       	push	r10
     702:	bf 92       	push	r11
     704:	cf 92       	push	r12
     706:	df 92       	push	r13
     708:	ef 92       	push	r14
     70a:	ff 92       	push	r15
     70c:	0f 93       	push	r16
     70e:	1f 93       	push	r17
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
     714:	ec 01       	movw	r28, r24
     716:	6a 01       	movw	r12, r20
     718:	7b 01       	movw	r14, r22
     71a:	8c 01       	movw	r16, r24
     71c:	09 5f       	subi	r16, 0xF9	; 249
     71e:	1f 4f       	sbci	r17, 0xFF	; 255
     720:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <vTaskSuspendAll>
     724:	eb 85       	ldd	r30, Y+11	; 0x0b
     726:	fc 85       	ldd	r31, Y+12	; 0x0c
     728:	88 81       	ld	r24, Y
     72a:	99 81       	ldd	r25, Y+1	; 0x01
     72c:	aa 81       	ldd	r26, Y+2	; 0x02
     72e:	bb 81       	ldd	r27, Y+3	; 0x03
     730:	c8 2a       	or	r12, r24
     732:	d9 2a       	or	r13, r25
     734:	ea 2a       	or	r14, r26
     736:	fb 2a       	or	r15, r27
     738:	c8 82       	st	Y, r12
     73a:	d9 82       	std	Y+1, r13	; 0x01
     73c:	ea 82       	std	Y+2, r14	; 0x02
     73e:	fb 82       	std	Y+3, r15	; 0x03
     740:	c1 2c       	mov	r12, r1
     742:	d1 2c       	mov	r13, r1
     744:	76 01       	movw	r14, r12
     746:	3d c0       	rjmp	.+122    	; 0x7c2 <xEventGroupSetBits+0xca>
     748:	a4 80       	ldd	r10, Z+4	; 0x04
     74a:	b5 80       	ldd	r11, Z+5	; 0x05
     74c:	80 81       	ld	r24, Z
     74e:	91 81       	ldd	r25, Z+1	; 0x01
     750:	a2 81       	ldd	r26, Z+2	; 0x02
     752:	b3 81       	ldd	r27, Z+3	; 0x03
     754:	ac 01       	movw	r20, r24
     756:	bd 01       	movw	r22, r26
     758:	77 27       	eor	r23, r23
     75a:	b2 fd       	sbrc	r27, 2
     75c:	0e c0       	rjmp	.+28     	; 0x77a <xEventGroupSetBits+0x82>
     75e:	48 80       	ld	r4, Y
     760:	59 80       	ldd	r5, Y+1	; 0x01
     762:	6a 80       	ldd	r6, Y+2	; 0x02
     764:	7b 80       	ldd	r7, Y+3	; 0x03
     766:	44 22       	and	r4, r20
     768:	55 22       	and	r5, r21
     76a:	66 22       	and	r6, r22
     76c:	77 22       	and	r7, r23
     76e:	45 28       	or	r4, r5
     770:	46 28       	or	r4, r6
     772:	47 28       	or	r4, r7
     774:	89 f4       	brne	.+34     	; 0x798 <xEventGroupSetBits+0xa0>
     776:	20 e0       	ldi	r18, 0x00	; 0
     778:	12 c0       	rjmp	.+36     	; 0x79e <xEventGroupSetBits+0xa6>
     77a:	48 80       	ld	r4, Y
     77c:	59 80       	ldd	r5, Y+1	; 0x01
     77e:	6a 80       	ldd	r6, Y+2	; 0x02
     780:	7b 80       	ldd	r7, Y+3	; 0x03
     782:	44 22       	and	r4, r20
     784:	55 22       	and	r5, r21
     786:	66 22       	and	r6, r22
     788:	77 22       	and	r7, r23
     78a:	44 15       	cp	r20, r4
     78c:	55 05       	cpc	r21, r5
     78e:	66 05       	cpc	r22, r6
     790:	77 05       	cpc	r23, r7
     792:	21 f0       	breq	.+8      	; 0x79c <xEventGroupSetBits+0xa4>
     794:	20 e0       	ldi	r18, 0x00	; 0
     796:	03 c0       	rjmp	.+6      	; 0x79e <xEventGroupSetBits+0xa6>
     798:	21 e0       	ldi	r18, 0x01	; 1
     79a:	01 c0       	rjmp	.+2      	; 0x79e <xEventGroupSetBits+0xa6>
     79c:	21 e0       	ldi	r18, 0x01	; 1
     79e:	22 23       	and	r18, r18
     7a0:	71 f0       	breq	.+28     	; 0x7be <xEventGroupSetBits+0xc6>
     7a2:	b0 ff       	sbrs	r27, 0
     7a4:	04 c0       	rjmp	.+8      	; 0x7ae <xEventGroupSetBits+0xb6>
     7a6:	c4 2a       	or	r12, r20
     7a8:	d5 2a       	or	r13, r21
     7aa:	e6 2a       	or	r14, r22
     7ac:	f7 2a       	or	r15, r23
     7ae:	48 81       	ld	r20, Y
     7b0:	59 81       	ldd	r21, Y+1	; 0x01
     7b2:	6a 81       	ldd	r22, Y+2	; 0x02
     7b4:	7b 81       	ldd	r23, Y+3	; 0x03
     7b6:	72 60       	ori	r23, 0x02	; 2
     7b8:	cf 01       	movw	r24, r30
     7ba:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <vTaskRemoveFromUnorderedEventList>
     7be:	ea 2d       	mov	r30, r10
     7c0:	fb 2d       	mov	r31, r11
     7c2:	e0 17       	cp	r30, r16
     7c4:	f1 07       	cpc	r31, r17
     7c6:	09 f0       	breq	.+2      	; 0x7ca <xEventGroupSetBits+0xd2>
     7c8:	bf cf       	rjmp	.-130    	; 0x748 <xEventGroupSetBits+0x50>
     7ca:	c0 94       	com	r12
     7cc:	d0 94       	com	r13
     7ce:	e0 94       	com	r14
     7d0:	f0 94       	com	r15
     7d2:	88 81       	ld	r24, Y
     7d4:	99 81       	ldd	r25, Y+1	; 0x01
     7d6:	aa 81       	ldd	r26, Y+2	; 0x02
     7d8:	bb 81       	ldd	r27, Y+3	; 0x03
     7da:	c8 22       	and	r12, r24
     7dc:	d9 22       	and	r13, r25
     7de:	ea 22       	and	r14, r26
     7e0:	fb 22       	and	r15, r27
     7e2:	c8 82       	st	Y, r12
     7e4:	d9 82       	std	Y+1, r13	; 0x01
     7e6:	ea 82       	std	Y+2, r14	; 0x02
     7e8:	fb 82       	std	Y+3, r15	; 0x03
     7ea:	0e 94 bc 0c 	call	0x1978	; 0x1978 <xTaskResumeAll>
     7ee:	68 81       	ld	r22, Y
     7f0:	79 81       	ldd	r23, Y+1	; 0x01
     7f2:	8a 81       	ldd	r24, Y+2	; 0x02
     7f4:	9b 81       	ldd	r25, Y+3	; 0x03
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	1f 91       	pop	r17
     7fc:	0f 91       	pop	r16
     7fe:	ff 90       	pop	r15
     800:	ef 90       	pop	r14
     802:	df 90       	pop	r13
     804:	cf 90       	pop	r12
     806:	bf 90       	pop	r11
     808:	af 90       	pop	r10
     80a:	7f 90       	pop	r7
     80c:	6f 90       	pop	r6
     80e:	5f 90       	pop	r5
     810:	4f 90       	pop	r4
     812:	08 95       	ret

00000814 <vEventGroupSetBitsCallback>:
     814:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <xEventGroupSetBits>
     818:	08 95       	ret

0000081a <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
     81a:	0f 93       	push	r16
     81c:	1f 93       	push	r17
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
     81e:	89 01       	movw	r16, r18
     820:	9a 01       	movw	r18, r20
     822:	ab 01       	movw	r20, r22
     824:	bc 01       	movw	r22, r24
     826:	8a e0       	ldi	r24, 0x0A	; 10
     828:	94 e0       	ldi	r25, 0x04	; 4
     82a:	0e 94 be 12 	call	0x257c	; 0x257c <xTimerPendFunctionCallFromISR>

		return xReturn;
	}
     82e:	1f 91       	pop	r17
     830:	0f 91       	pop	r16
     832:	08 95       	ret

00000834 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     834:	cf 93       	push	r28
     836:	df 93       	push	r29
     838:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     83a:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     83e:	20 91 c2 20 	lds	r18, 0x20C2	; 0x8020c2 <xNextFreeByte>
     842:	30 91 c3 20 	lds	r19, 0x20C3	; 0x8020c3 <xNextFreeByte+0x1>
     846:	c9 01       	movw	r24, r18
     848:	8c 0f       	add	r24, r28
     84a:	9d 1f       	adc	r25, r29
     84c:	80 3a       	cpi	r24, 0xA0	; 160
     84e:	4f e0       	ldi	r20, 0x0F	; 15
     850:	94 07       	cpc	r25, r20
     852:	58 f4       	brcc	.+22     	; 0x86a <pvPortMalloc+0x36>
     854:	28 17       	cp	r18, r24
     856:	39 07       	cpc	r19, r25
     858:	58 f4       	brcc	.+22     	; 0x870 <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     85a:	e9 01       	movw	r28, r18
     85c:	cc 53       	subi	r28, 0x3C	; 60
     85e:	df 4d       	sbci	r29, 0xDF	; 223
			xNextFreeByte += xWantedSize;			
     860:	80 93 c2 20 	sts	0x20C2, r24	; 0x8020c2 <xNextFreeByte>
     864:	90 93 c3 20 	sts	0x20C3, r25	; 0x8020c3 <xNextFreeByte+0x1>
     868:	05 c0       	rjmp	.+10     	; 0x874 <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
     86a:	c0 e0       	ldi	r28, 0x00	; 0
     86c:	d0 e0       	ldi	r29, 0x00	; 0
     86e:	02 c0       	rjmp	.+4      	; 0x874 <pvPortMalloc+0x40>
     870:	c0 e0       	ldi	r28, 0x00	; 0
     872:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     874:	0e 94 bc 0c 	call	0x1978	; 0x1978 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     878:	ce 01       	movw	r24, r28
     87a:	df 91       	pop	r29
     87c:	cf 91       	pop	r28
     87e:	08 95       	ret

00000880 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     880:	08 95       	ret

00000882 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     882:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     884:	03 96       	adiw	r24, 0x03	; 3
     886:	81 83       	std	Z+1, r24	; 0x01
     888:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     88a:	4f ef       	ldi	r20, 0xFF	; 255
     88c:	5f ef       	ldi	r21, 0xFF	; 255
     88e:	ba 01       	movw	r22, r20
     890:	43 83       	std	Z+3, r20	; 0x03
     892:	54 83       	std	Z+4, r21	; 0x04
     894:	65 83       	std	Z+5, r22	; 0x05
     896:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     898:	87 83       	std	Z+7, r24	; 0x07
     89a:	90 87       	std	Z+8, r25	; 0x08
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     89c:	81 87       	std	Z+9, r24	; 0x09
     89e:	92 87       	std	Z+10, r25	; 0x0a

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     8a0:	10 82       	st	Z, r1
     8a2:	08 95       	ret

000008a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     8a4:	fc 01       	movw	r30, r24
     8a6:	12 86       	std	Z+10, r1	; 0x0a
     8a8:	13 86       	std	Z+11, r1	; 0x0b
     8aa:	08 95       	ret

000008ac <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
     8b0:	9c 01       	movw	r18, r24
     8b2:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     8b4:	dc 01       	movw	r26, r24
     8b6:	11 96       	adiw	r26, 0x01	; 1
     8b8:	cd 91       	ld	r28, X+
     8ba:	dc 91       	ld	r29, X
     8bc:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     8be:	c4 83       	std	Z+4, r28	; 0x04
     8c0:	d5 83       	std	Z+5, r29	; 0x05
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     8c2:	8e 81       	ldd	r24, Y+6	; 0x06
     8c4:	9f 81       	ldd	r25, Y+7	; 0x07
     8c6:	86 83       	std	Z+6, r24	; 0x06
     8c8:	97 83       	std	Z+7, r25	; 0x07

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	9f 81       	ldd	r25, Y+7	; 0x07
     8ce:	dc 01       	movw	r26, r24
     8d0:	14 96       	adiw	r26, 0x04	; 4
     8d2:	6d 93       	st	X+, r22
     8d4:	7c 93       	st	X, r23
     8d6:	15 97       	sbiw	r26, 0x05	; 5
	pxIndex->pxPrevious = pxNewListItem;
     8d8:	6e 83       	std	Y+6, r22	; 0x06
     8da:	7f 83       	std	Y+7, r23	; 0x07

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     8dc:	22 87       	std	Z+10, r18	; 0x0a
     8de:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
     8e0:	f9 01       	movw	r30, r18
     8e2:	80 81       	ld	r24, Z
     8e4:	8f 5f       	subi	r24, 0xFF	; 255
     8e6:	80 83       	st	Z, r24
}
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	08 95       	ret

000008ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     8ee:	0f 93       	push	r16
     8f0:	1f 93       	push	r17
     8f2:	cf 93       	push	r28
     8f4:	df 93       	push	r29
     8f6:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     8f8:	08 81       	ld	r16, Y
     8fa:	19 81       	ldd	r17, Y+1	; 0x01
     8fc:	2a 81       	ldd	r18, Y+2	; 0x02
     8fe:	3b 81       	ldd	r19, Y+3	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     900:	0f 3f       	cpi	r16, 0xFF	; 255
     902:	4f ef       	ldi	r20, 0xFF	; 255
     904:	14 07       	cpc	r17, r20
     906:	24 07       	cpc	r18, r20
     908:	34 07       	cpc	r19, r20
     90a:	21 f4       	brne	.+8      	; 0x914 <vListInsert+0x26>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     90c:	fc 01       	movw	r30, r24
     90e:	a1 85       	ldd	r26, Z+9	; 0x09
     910:	b2 85       	ldd	r27, Z+10	; 0x0a
     912:	11 c0       	rjmp	.+34     	; 0x936 <vListInsert+0x48>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     914:	dc 01       	movw	r26, r24
     916:	13 96       	adiw	r26, 0x03	; 3
     918:	01 c0       	rjmp	.+2      	; 0x91c <vListInsert+0x2e>
     91a:	df 01       	movw	r26, r30
     91c:	14 96       	adiw	r26, 0x04	; 4
     91e:	ed 91       	ld	r30, X+
     920:	fc 91       	ld	r31, X
     922:	15 97       	sbiw	r26, 0x05	; 5
     924:	40 81       	ld	r20, Z
     926:	51 81       	ldd	r21, Z+1	; 0x01
     928:	62 81       	ldd	r22, Z+2	; 0x02
     92a:	73 81       	ldd	r23, Z+3	; 0x03
     92c:	04 17       	cp	r16, r20
     92e:	15 07       	cpc	r17, r21
     930:	26 07       	cpc	r18, r22
     932:	37 07       	cpc	r19, r23
     934:	90 f7       	brcc	.-28     	; 0x91a <vListInsert+0x2c>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     936:	14 96       	adiw	r26, 0x04	; 4
     938:	ed 91       	ld	r30, X+
     93a:	fc 91       	ld	r31, X
     93c:	15 97       	sbiw	r26, 0x05	; 5
     93e:	ec 83       	std	Y+4, r30	; 0x04
     940:	fd 83       	std	Y+5, r31	; 0x05
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     942:	c6 83       	std	Z+6, r28	; 0x06
     944:	d7 83       	std	Z+7, r29	; 0x07
	pxNewListItem->pxPrevious = pxIterator;
     946:	ae 83       	std	Y+6, r26	; 0x06
     948:	bf 83       	std	Y+7, r27	; 0x07
	pxIterator->pxNext = pxNewListItem;
     94a:	14 96       	adiw	r26, 0x04	; 4
     94c:	cd 93       	st	X+, r28
     94e:	dc 93       	st	X, r29
     950:	15 97       	sbiw	r26, 0x05	; 5

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     952:	8a 87       	std	Y+10, r24	; 0x0a
     954:	9b 87       	std	Y+11, r25	; 0x0b

	( pxList->uxNumberOfItems )++;
     956:	fc 01       	movw	r30, r24
     958:	20 81       	ld	r18, Z
     95a:	2f 5f       	subi	r18, 0xFF	; 255
     95c:	20 83       	st	Z, r18
}
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	1f 91       	pop	r17
     964:	0f 91       	pop	r16
     966:	08 95       	ret

00000968 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
     96c:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     96e:	a2 85       	ldd	r26, Z+10	; 0x0a
     970:	b3 85       	ldd	r27, Z+11	; 0x0b

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     972:	c4 81       	ldd	r28, Z+4	; 0x04
     974:	d5 81       	ldd	r29, Z+5	; 0x05
     976:	86 81       	ldd	r24, Z+6	; 0x06
     978:	97 81       	ldd	r25, Z+7	; 0x07
     97a:	8e 83       	std	Y+6, r24	; 0x06
     97c:	9f 83       	std	Y+7, r25	; 0x07
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     97e:	c6 81       	ldd	r28, Z+6	; 0x06
     980:	d7 81       	ldd	r29, Z+7	; 0x07
     982:	84 81       	ldd	r24, Z+4	; 0x04
     984:	95 81       	ldd	r25, Z+5	; 0x05
     986:	8c 83       	std	Y+4, r24	; 0x04
     988:	9d 83       	std	Y+5, r25	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     98a:	11 96       	adiw	r26, 0x01	; 1
     98c:	8d 91       	ld	r24, X+
     98e:	9c 91       	ld	r25, X
     990:	12 97       	sbiw	r26, 0x02	; 2
     992:	e8 17       	cp	r30, r24
     994:	f9 07       	cpc	r31, r25
     996:	31 f4       	brne	.+12     	; 0x9a4 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     998:	86 81       	ldd	r24, Z+6	; 0x06
     99a:	97 81       	ldd	r25, Z+7	; 0x07
     99c:	11 96       	adiw	r26, 0x01	; 1
     99e:	8d 93       	st	X+, r24
     9a0:	9c 93       	st	X, r25
     9a2:	12 97       	sbiw	r26, 0x02	; 2
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     9a4:	12 86       	std	Z+10, r1	; 0x0a
     9a6:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
     9a8:	8c 91       	ld	r24, X
     9aa:	81 50       	subi	r24, 0x01	; 1
     9ac:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
     9ae:	8c 91       	ld	r24, X
}
     9b0:	df 91       	pop	r29
     9b2:	cf 91       	pop	r28
     9b4:	08 95       	ret

000009b6 <prvSetupTimerInterrupt>:
}

/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     9b6:	83 ef       	ldi	r24, 0xF3	; 243
     9b8:	91 e0       	ldi	r25, 0x01	; 1
     9ba:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x7de826>
     9be:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x7de827>
     9c2:	65 e0       	ldi	r22, 0x05	; 5
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	98 e0       	ldi	r25, 0x08	; 8
     9c8:	0e 94 5e 02 	call	0x4bc	; 0x4bc <TC0_ConfigClockSource>
     9cc:	61 e0       	ldi	r22, 0x01	; 1
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	98 e0       	ldi	r25, 0x08	; 8
     9d2:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <TC0_SetOverflowIntLevel>
     9d6:	08 95       	ret

000009d8 <_portSetInterruptMaskFromIsr>:
     9d8:	e0 ea       	ldi	r30, 0xA0	; 160
     9da:	f0 e0       	ldi	r31, 0x00	; 0
     9dc:	82 81       	ldd	r24, Z+2	; 0x02
     9de:	92 81       	ldd	r25, Z+2	; 0x02
     9e0:	98 7f       	andi	r25, 0xF8	; 248
     9e2:	92 83       	std	Z+2, r25	; 0x02
     9e4:	08 95       	ret

000009e6 <portTaskIncrementTick>:
     9e6:	cf 93       	push	r28
     9e8:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <_portSetInterruptMaskFromIsr>
     9ec:	c8 2f       	mov	r28, r24
     9ee:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <xTaskIncrementTick>
     9f2:	c0 93 a2 00 	sts	0x00A2, r28	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     9f6:	cf 91       	pop	r28
     9f8:	08 95       	ret

000009fa <pxPortInitialiseStack>:
     9fa:	cf 92       	push	r12
     9fc:	df 92       	push	r13
     9fe:	ef 92       	push	r14
     a00:	ff 92       	push	r15
     a02:	31 e1       	ldi	r19, 0x11	; 17
     a04:	fc 01       	movw	r30, r24
     a06:	30 83       	st	Z, r19
     a08:	31 97       	sbiw	r30, 0x01	; 1
     a0a:	22 e2       	ldi	r18, 0x22	; 34
     a0c:	20 83       	st	Z, r18
     a0e:	31 97       	sbiw	r30, 0x01	; 1
     a10:	a3 e3       	ldi	r26, 0x33	; 51
     a12:	a0 83       	st	Z, r26
     a14:	6b 01       	movw	r12, r22
     a16:	e1 2c       	mov	r14, r1
     a18:	f1 2c       	mov	r15, r1
     a1a:	31 97       	sbiw	r30, 0x01	; 1
     a1c:	60 83       	st	Z, r22
     a1e:	31 97       	sbiw	r30, 0x01	; 1
     a20:	d0 82       	st	Z, r13
     a22:	31 97       	sbiw	r30, 0x01	; 1
     a24:	e0 82       	st	Z, r14
     a26:	31 97       	sbiw	r30, 0x01	; 1
     a28:	61 e3       	ldi	r22, 0x31	; 49
     a2a:	60 83       	st	Z, r22
     a2c:	31 97       	sbiw	r30, 0x01	; 1
     a2e:	60 e8       	ldi	r22, 0x80	; 128
     a30:	60 83       	st	Z, r22
     a32:	31 97       	sbiw	r30, 0x01	; 1
     a34:	67 e8       	ldi	r22, 0x87	; 135
     a36:	60 83       	st	Z, r22
     a38:	31 97       	sbiw	r30, 0x01	; 1
     a3a:	10 82       	st	Z, r1
     a3c:	31 97       	sbiw	r30, 0x01	; 1
     a3e:	10 82       	st	Z, r1
     a40:	31 97       	sbiw	r30, 0x01	; 1
     a42:	62 e0       	ldi	r22, 0x02	; 2
     a44:	60 83       	st	Z, r22
     a46:	31 97       	sbiw	r30, 0x01	; 1
     a48:	63 e0       	ldi	r22, 0x03	; 3
     a4a:	60 83       	st	Z, r22
     a4c:	31 97       	sbiw	r30, 0x01	; 1
     a4e:	64 e0       	ldi	r22, 0x04	; 4
     a50:	60 83       	st	Z, r22
     a52:	31 97       	sbiw	r30, 0x01	; 1
     a54:	65 e0       	ldi	r22, 0x05	; 5
     a56:	60 83       	st	Z, r22
     a58:	31 97       	sbiw	r30, 0x01	; 1
     a5a:	66 e0       	ldi	r22, 0x06	; 6
     a5c:	60 83       	st	Z, r22
     a5e:	31 97       	sbiw	r30, 0x01	; 1
     a60:	67 e0       	ldi	r22, 0x07	; 7
     a62:	60 83       	st	Z, r22
     a64:	31 97       	sbiw	r30, 0x01	; 1
     a66:	68 e0       	ldi	r22, 0x08	; 8
     a68:	60 83       	st	Z, r22
     a6a:	31 97       	sbiw	r30, 0x01	; 1
     a6c:	69 e0       	ldi	r22, 0x09	; 9
     a6e:	60 83       	st	Z, r22
     a70:	31 97       	sbiw	r30, 0x01	; 1
     a72:	60 e1       	ldi	r22, 0x10	; 16
     a74:	60 83       	st	Z, r22
     a76:	31 97       	sbiw	r30, 0x01	; 1
     a78:	30 83       	st	Z, r19
     a7a:	31 97       	sbiw	r30, 0x01	; 1
     a7c:	32 e1       	ldi	r19, 0x12	; 18
     a7e:	30 83       	st	Z, r19
     a80:	31 97       	sbiw	r30, 0x01	; 1
     a82:	33 e1       	ldi	r19, 0x13	; 19
     a84:	30 83       	st	Z, r19
     a86:	31 97       	sbiw	r30, 0x01	; 1
     a88:	34 e1       	ldi	r19, 0x14	; 20
     a8a:	30 83       	st	Z, r19
     a8c:	31 97       	sbiw	r30, 0x01	; 1
     a8e:	35 e1       	ldi	r19, 0x15	; 21
     a90:	30 83       	st	Z, r19
     a92:	31 97       	sbiw	r30, 0x01	; 1
     a94:	36 e1       	ldi	r19, 0x16	; 22
     a96:	30 83       	st	Z, r19
     a98:	31 97       	sbiw	r30, 0x01	; 1
     a9a:	37 e1       	ldi	r19, 0x17	; 23
     a9c:	30 83       	st	Z, r19
     a9e:	31 97       	sbiw	r30, 0x01	; 1
     aa0:	38 e1       	ldi	r19, 0x18	; 24
     aa2:	30 83       	st	Z, r19
     aa4:	31 97       	sbiw	r30, 0x01	; 1
     aa6:	39 e1       	ldi	r19, 0x19	; 25
     aa8:	30 83       	st	Z, r19
     aaa:	31 97       	sbiw	r30, 0x01	; 1
     aac:	30 e2       	ldi	r19, 0x20	; 32
     aae:	30 83       	st	Z, r19
     ab0:	31 97       	sbiw	r30, 0x01	; 1
     ab2:	31 e2       	ldi	r19, 0x21	; 33
     ab4:	30 83       	st	Z, r19
     ab6:	31 97       	sbiw	r30, 0x01	; 1
     ab8:	20 83       	st	Z, r18
     aba:	31 97       	sbiw	r30, 0x01	; 1
     abc:	23 e2       	ldi	r18, 0x23	; 35
     abe:	20 83       	st	Z, r18
     ac0:	6a 01       	movw	r12, r20
     ac2:	31 97       	sbiw	r30, 0x01	; 1
     ac4:	40 83       	st	Z, r20
     ac6:	31 97       	sbiw	r30, 0x01	; 1
     ac8:	d0 82       	st	Z, r13
     aca:	31 97       	sbiw	r30, 0x01	; 1
     acc:	26 e2       	ldi	r18, 0x26	; 38
     ace:	20 83       	st	Z, r18
     ad0:	31 97       	sbiw	r30, 0x01	; 1
     ad2:	27 e2       	ldi	r18, 0x27	; 39
     ad4:	20 83       	st	Z, r18
     ad6:	31 97       	sbiw	r30, 0x01	; 1
     ad8:	28 e2       	ldi	r18, 0x28	; 40
     ada:	20 83       	st	Z, r18
     adc:	31 97       	sbiw	r30, 0x01	; 1
     ade:	29 e2       	ldi	r18, 0x29	; 41
     ae0:	20 83       	st	Z, r18
     ae2:	31 97       	sbiw	r30, 0x01	; 1
     ae4:	20 e3       	ldi	r18, 0x30	; 48
     ae6:	20 83       	st	Z, r18
     ae8:	88 97       	sbiw	r24, 0x28	; 40
     aea:	ff 90       	pop	r15
     aec:	ef 90       	pop	r14
     aee:	df 90       	pop	r13
     af0:	cf 90       	pop	r12
     af2:	08 95       	ret

00000af4 <xPortStartScheduler>:
     af4:	0e 94 db 04 	call	0x9b6	; 0x9b6 <prvSetupTimerInterrupt>
     af8:	a0 91 d2 30 	lds	r26, 0x30D2	; 0x8030d2 <pxCurrentTCB>
     afc:	b0 91 d3 30 	lds	r27, 0x30D3	; 0x8030d3 <pxCurrentTCB+0x1>
     b00:	0d 90       	ld	r0, X+
     b02:	0d be       	out	0x3d, r0	; 61
     b04:	0d 90       	ld	r0, X+
     b06:	0e be       	out	0x3e, r0	; 62
     b08:	ef 91       	pop	r30
     b0a:	df 91       	pop	r29
     b0c:	cf 91       	pop	r28
     b0e:	bf 91       	pop	r27
     b10:	af 91       	pop	r26
     b12:	9f 91       	pop	r25
     b14:	8f 91       	pop	r24
     b16:	7f 91       	pop	r23
     b18:	6f 91       	pop	r22
     b1a:	5f 91       	pop	r21
     b1c:	4f 91       	pop	r20
     b1e:	3f 91       	pop	r19
     b20:	2f 91       	pop	r18
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	ff 90       	pop	r15
     b28:	ef 90       	pop	r14
     b2a:	df 90       	pop	r13
     b2c:	cf 90       	pop	r12
     b2e:	bf 90       	pop	r11
     b30:	af 90       	pop	r10
     b32:	9f 90       	pop	r9
     b34:	8f 90       	pop	r8
     b36:	7f 90       	pop	r7
     b38:	6f 90       	pop	r6
     b3a:	5f 90       	pop	r5
     b3c:	4f 90       	pop	r4
     b3e:	3f 90       	pop	r3
     b40:	2f 90       	pop	r2
     b42:	1f 90       	pop	r1
     b44:	0f 90       	pop	r0
     b46:	ff 91       	pop	r31
     b48:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     b4c:	ff 91       	pop	r31
     b4e:	ff bf       	out	0x3f, r31	; 63
     b50:	ff 91       	pop	r31
     b52:	08 95       	ret
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	08 95       	ret

00000b58 <vPortYield>:
// 
//
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     b58:	ff 93       	push	r31
     b5a:	ff b7       	in	r31, 0x3f	; 63
     b5c:	ff 93       	push	r31
     b5e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     b62:	ff 93       	push	r31
     b64:	f8 7f       	andi	r31, 0xF8	; 248
     b66:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     b6a:	0f 92       	push	r0
     b6c:	1f 92       	push	r1
     b6e:	11 24       	eor	r1, r1
     b70:	2f 92       	push	r2
     b72:	3f 92       	push	r3
     b74:	4f 92       	push	r4
     b76:	5f 92       	push	r5
     b78:	6f 92       	push	r6
     b7a:	7f 92       	push	r7
     b7c:	8f 92       	push	r8
     b7e:	9f 92       	push	r9
     b80:	af 92       	push	r10
     b82:	bf 92       	push	r11
     b84:	cf 92       	push	r12
     b86:	df 92       	push	r13
     b88:	ef 92       	push	r14
     b8a:	ff 92       	push	r15
     b8c:	0f 93       	push	r16
     b8e:	1f 93       	push	r17
     b90:	2f 93       	push	r18
     b92:	3f 93       	push	r19
     b94:	4f 93       	push	r20
     b96:	5f 93       	push	r21
     b98:	6f 93       	push	r22
     b9a:	7f 93       	push	r23
     b9c:	8f 93       	push	r24
     b9e:	9f 93       	push	r25
     ba0:	af 93       	push	r26
     ba2:	bf 93       	push	r27
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	ef 93       	push	r30
     baa:	a0 91 d2 30 	lds	r26, 0x30D2	; 0x8030d2 <pxCurrentTCB>
     bae:	b0 91 d3 30 	lds	r27, 0x30D3	; 0x8030d3 <pxCurrentTCB+0x1>
     bb2:	0d b6       	in	r0, 0x3d	; 61
     bb4:	0d 92       	st	X+, r0
     bb6:	0e b6       	in	r0, 0x3e	; 62
     bb8:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     bba:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     bbe:	a0 91 d2 30 	lds	r26, 0x30D2	; 0x8030d2 <pxCurrentTCB>
     bc2:	b0 91 d3 30 	lds	r27, 0x30D3	; 0x8030d3 <pxCurrentTCB+0x1>
     bc6:	0d 90       	ld	r0, X+
     bc8:	0d be       	out	0x3d, r0	; 61
     bca:	0d 90       	ld	r0, X+
     bcc:	0e be       	out	0x3e, r0	; 62
     bce:	ef 91       	pop	r30
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	bf 91       	pop	r27
     bd6:	af 91       	pop	r26
     bd8:	9f 91       	pop	r25
     bda:	8f 91       	pop	r24
     bdc:	7f 91       	pop	r23
     bde:	6f 91       	pop	r22
     be0:	5f 91       	pop	r21
     be2:	4f 91       	pop	r20
     be4:	3f 91       	pop	r19
     be6:	2f 91       	pop	r18
     be8:	1f 91       	pop	r17
     bea:	0f 91       	pop	r16
     bec:	ff 90       	pop	r15
     bee:	ef 90       	pop	r14
     bf0:	df 90       	pop	r13
     bf2:	cf 90       	pop	r12
     bf4:	bf 90       	pop	r11
     bf6:	af 90       	pop	r10
     bf8:	9f 90       	pop	r9
     bfa:	8f 90       	pop	r8
     bfc:	7f 90       	pop	r7
     bfe:	6f 90       	pop	r6
     c00:	5f 90       	pop	r5
     c02:	4f 90       	pop	r4
     c04:	3f 90       	pop	r3
     c06:	2f 90       	pop	r2
     c08:	1f 90       	pop	r1
     c0a:	0f 90       	pop	r0
     c0c:	ff 91       	pop	r31
     c0e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     c12:	ff 91       	pop	r31
     c14:	ff bf       	out	0x3f, r31	; 63
     c16:	ff 91       	pop	r31
	asm volatile ( "ret" );
     c18:	08 95       	ret

00000c1a <portTaskSwitchContext>:
	//-----------------------------------------------------------
	//
	// The task switch is deferred until there is no more nesting.
	//
	void portTaskSwitchContext(signed portBASE_TYPE xSwitchRequired)
	{
     c1a:	cf 93       	push	r28
		intTaskSwitchPending |= xSwitchRequired;					
     c1c:	90 91 30 31 	lds	r25, 0x3130	; 0x803130 <intTaskSwitchPending>
     c20:	89 2b       	or	r24, r25
     c22:	80 93 30 31 	sts	0x3130, r24	; 0x803130 <intTaskSwitchPending>
																
		if(NOT_NESTING() && intTaskSwitchPending)					
     c26:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7de0a0>
     c2a:	91 30       	cpi	r25, 0x01	; 1
     c2c:	41 f0       	breq	.+16     	; 0xc3e <portTaskSwitchContext+0x24>
     c2e:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7de0a0>
     c32:	92 30       	cpi	r25, 0x02	; 2
     c34:	21 f0       	breq	.+8      	; 0xc3e <portTaskSwitchContext+0x24>
     c36:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7de0a0>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	59 f4       	brne	.+22     	; 0xc54 <portTaskSwitchContext+0x3a>
     c3e:	88 23       	and	r24, r24
     c40:	49 f0       	breq	.+18     	; 0xc54 <portTaskSwitchContext+0x3a>
		{															
			register unsigned portBASE_TYPE uxSavedPmicCtrlReg; 				
			extern void vTaskSwitchContext(void);   				
																
			// Critical section used, because vTaskSwitchContext handles FreeRTOS internal data structures.
 			uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR(); 
     c42:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <_portSetInterruptMaskFromIsr>
     c46:	c8 2f       	mov	r28, r24
			intTaskSwitchPending = 0;								
     c48:	10 92 30 31 	sts	0x3130, r1	; 0x803130 <intTaskSwitchPending>
			vTaskSwitchContext();                   				
     c4c:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <vTaskSwitchContext>
			portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedPmicCtrlReg);
     c50:	c0 93 a2 00 	sts	0x00A2, r28	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
		}                                          					
	}
     c54:	cf 91       	pop	r28
     c56:	08 95       	ret

00000c58 <__vector_14>:
	// the context is saved at the start of vPortYieldFromTick().  The tick
	// count is incremented after the context is saved.
	//
	ISR(TCC0_OVF_vect, ISR_NAKED)
	{
		portSTART_ISR();
     c58:	ff 93       	push	r31
     c5a:	ff b7       	in	r31, 0x3f	; 63
     c5c:	ff 93       	push	r31
     c5e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     c62:	ff 93       	push	r31
     c64:	f8 7f       	andi	r31, 0xF8	; 248
     c66:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     c6a:	0f 92       	push	r0
     c6c:	1f 92       	push	r1
     c6e:	11 24       	eor	r1, r1
     c70:	2f 92       	push	r2
     c72:	3f 92       	push	r3
     c74:	4f 92       	push	r4
     c76:	5f 92       	push	r5
     c78:	6f 92       	push	r6
     c7a:	7f 92       	push	r7
     c7c:	8f 92       	push	r8
     c7e:	9f 92       	push	r9
     c80:	af 92       	push	r10
     c82:	bf 92       	push	r11
     c84:	cf 92       	push	r12
     c86:	df 92       	push	r13
     c88:	ef 92       	push	r14
     c8a:	ff 92       	push	r15
     c8c:	0f 93       	push	r16
     c8e:	1f 93       	push	r17
     c90:	2f 93       	push	r18
     c92:	3f 93       	push	r19
     c94:	4f 93       	push	r20
     c96:	5f 93       	push	r21
     c98:	6f 93       	push	r22
     c9a:	7f 93       	push	r23
     c9c:	8f 93       	push	r24
     c9e:	9f 93       	push	r25
     ca0:	af 93       	push	r26
     ca2:	bf 93       	push	r27
     ca4:	cf 93       	push	r28
     ca6:	df 93       	push	r29
     ca8:	ef 93       	push	r30
     caa:	a0 91 d2 30 	lds	r26, 0x30D2	; 0x8030d2 <pxCurrentTCB>
     cae:	b0 91 d3 30 	lds	r27, 0x30D3	; 0x8030d3 <pxCurrentTCB+0x1>
     cb2:	0d b6       	in	r0, 0x3d	; 61
     cb4:	0d 92       	st	X+, r0
     cb6:	0e b6       	in	r0, 0x3e	; 62
     cb8:	0d 92       	st	X+, r0
		portTaskIncrementTick();
     cba:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <portTaskIncrementTick>
		//always try a task switch, but only if on kernel interrupt level
		portEND_SWITCHING_ISR(pdTRUE); 
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	0e 94 0d 06 	call	0xc1a	; 0xc1a <portTaskSwitchContext>
     cc4:	a0 91 d2 30 	lds	r26, 0x30D2	; 0x8030d2 <pxCurrentTCB>
     cc8:	b0 91 d3 30 	lds	r27, 0x30D3	; 0x8030d3 <pxCurrentTCB+0x1>
     ccc:	0d 90       	ld	r0, X+
     cce:	0d be       	out	0x3d, r0	; 61
     cd0:	0d 90       	ld	r0, X+
     cd2:	0e be       	out	0x3e, r0	; 62
     cd4:	ef 91       	pop	r30
     cd6:	df 91       	pop	r29
     cd8:	cf 91       	pop	r28
     cda:	bf 91       	pop	r27
     cdc:	af 91       	pop	r26
     cde:	9f 91       	pop	r25
     ce0:	8f 91       	pop	r24
     ce2:	7f 91       	pop	r23
     ce4:	6f 91       	pop	r22
     ce6:	5f 91       	pop	r21
     ce8:	4f 91       	pop	r20
     cea:	3f 91       	pop	r19
     cec:	2f 91       	pop	r18
     cee:	1f 91       	pop	r17
     cf0:	0f 91       	pop	r16
     cf2:	ff 90       	pop	r15
     cf4:	ef 90       	pop	r14
     cf6:	df 90       	pop	r13
     cf8:	cf 90       	pop	r12
     cfa:	bf 90       	pop	r11
     cfc:	af 90       	pop	r10
     cfe:	9f 90       	pop	r9
     d00:	8f 90       	pop	r8
     d02:	7f 90       	pop	r7
     d04:	6f 90       	pop	r6
     d06:	5f 90       	pop	r5
     d08:	4f 90       	pop	r4
     d0a:	3f 90       	pop	r3
     d0c:	2f 90       	pop	r2
     d0e:	1f 90       	pop	r1
     d10:	0f 90       	pop	r0
     d12:	ff 91       	pop	r31
     d14:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     d18:	ff 91       	pop	r31
     d1a:	ff bf       	out	0x3f, r31	; 63
     d1c:	ff 91       	pop	r31
     d1e:	18 95       	reti

00000d20 <prvIsQueueEmpty>:
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
     d20:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     d24:	ff 93       	push	r31
     d26:	f8 7f       	andi	r31, 0xF8	; 248
     d28:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     d2c:	fc 01       	movw	r30, r24
     d2e:	86 8d       	ldd	r24, Z+30	; 0x1e
     d30:	81 11       	cpse	r24, r1
     d32:	02 c0       	rjmp	.+4      	; 0xd38 <prvIsQueueEmpty+0x18>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	01 c0       	rjmp	.+2      	; 0xd3a <prvIsQueueEmpty+0x1a>
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	ff 91       	pop	r31
     d3c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     d40:	08 95       	ret

00000d42 <prvIsQueueFull>:
     d42:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     d46:	ff 93       	push	r31
     d48:	f8 7f       	andi	r31, 0xF8	; 248
     d4a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     d4e:	fc 01       	movw	r30, r24
     d50:	26 8d       	ldd	r18, Z+30	; 0x1e
     d52:	87 8d       	ldd	r24, Z+31	; 0x1f
     d54:	28 13       	cpse	r18, r24
     d56:	02 c0       	rjmp	.+4      	; 0xd5c <prvIsQueueFull+0x1a>
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	01 c0       	rjmp	.+2      	; 0xd5e <prvIsQueueFull+0x1c>
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	ff 91       	pop	r31
     d60:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     d64:	08 95       	ret

00000d66 <prvCopyDataToQueue>:
     d66:	0f 93       	push	r16
     d68:	1f 93       	push	r17
     d6a:	cf 93       	push	r28
     d6c:	df 93       	push	r29
     d6e:	ec 01       	movw	r28, r24
     d70:	04 2f       	mov	r16, r20
     d72:	1e 8d       	ldd	r17, Y+30	; 0x1e
     d74:	48 a1       	ldd	r20, Y+32	; 0x20
     d76:	44 23       	and	r20, r20
     d78:	b9 f1       	breq	.+110    	; 0xde8 <prvCopyDataToQueue+0x82>
     d7a:	01 11       	cpse	r16, r1
     d7c:	16 c0       	rjmp	.+44     	; 0xdaa <prvCopyDataToQueue+0x44>
     d7e:	50 e0       	ldi	r21, 0x00	; 0
     d80:	8c 81       	ldd	r24, Y+4	; 0x04
     d82:	9d 81       	ldd	r25, Y+5	; 0x05
     d84:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <memcpy>
     d88:	28 a1       	ldd	r18, Y+32	; 0x20
     d8a:	8c 81       	ldd	r24, Y+4	; 0x04
     d8c:	9d 81       	ldd	r25, Y+5	; 0x05
     d8e:	82 0f       	add	r24, r18
     d90:	91 1d       	adc	r25, r1
     d92:	8c 83       	std	Y+4, r24	; 0x04
     d94:	9d 83       	std	Y+5, r25	; 0x05
     d96:	2a 81       	ldd	r18, Y+2	; 0x02
     d98:	3b 81       	ldd	r19, Y+3	; 0x03
     d9a:	82 17       	cp	r24, r18
     d9c:	93 07       	cpc	r25, r19
     d9e:	20 f1       	brcs	.+72     	; 0xde8 <prvCopyDataToQueue+0x82>
     da0:	88 81       	ld	r24, Y
     da2:	99 81       	ldd	r25, Y+1	; 0x01
     da4:	8c 83       	std	Y+4, r24	; 0x04
     da6:	9d 83       	std	Y+5, r25	; 0x05
     da8:	1f c0       	rjmp	.+62     	; 0xde8 <prvCopyDataToQueue+0x82>
     daa:	50 e0       	ldi	r21, 0x00	; 0
     dac:	8e 81       	ldd	r24, Y+6	; 0x06
     dae:	9f 81       	ldd	r25, Y+7	; 0x07
     db0:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <memcpy>
     db4:	88 a1       	ldd	r24, Y+32	; 0x20
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	91 95       	neg	r25
     dba:	81 95       	neg	r24
     dbc:	91 09       	sbc	r25, r1
     dbe:	2e 81       	ldd	r18, Y+6	; 0x06
     dc0:	3f 81       	ldd	r19, Y+7	; 0x07
     dc2:	28 0f       	add	r18, r24
     dc4:	39 1f       	adc	r19, r25
     dc6:	2e 83       	std	Y+6, r18	; 0x06
     dc8:	3f 83       	std	Y+7, r19	; 0x07
     dca:	48 81       	ld	r20, Y
     dcc:	59 81       	ldd	r21, Y+1	; 0x01
     dce:	24 17       	cp	r18, r20
     dd0:	35 07       	cpc	r19, r21
     dd2:	30 f4       	brcc	.+12     	; 0xde0 <prvCopyDataToQueue+0x7a>
     dd4:	2a 81       	ldd	r18, Y+2	; 0x02
     dd6:	3b 81       	ldd	r19, Y+3	; 0x03
     dd8:	82 0f       	add	r24, r18
     dda:	93 1f       	adc	r25, r19
     ddc:	8e 83       	std	Y+6, r24	; 0x06
     dde:	9f 83       	std	Y+7, r25	; 0x07
     de0:	02 30       	cpi	r16, 0x02	; 2
     de2:	11 f4       	brne	.+4      	; 0xde8 <prvCopyDataToQueue+0x82>
     de4:	11 11       	cpse	r17, r1
     de6:	11 50       	subi	r17, 0x01	; 1
     de8:	1f 5f       	subi	r17, 0xFF	; 255
     dea:	1e 8f       	std	Y+30, r17	; 0x1e
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	1f 91       	pop	r17
     df4:	0f 91       	pop	r16
     df6:	08 95       	ret

00000df8 <prvCopyDataFromQueue>:
     df8:	fc 01       	movw	r30, r24
     dfa:	40 a1       	ldd	r20, Z+32	; 0x20
     dfc:	44 23       	and	r20, r20
     dfe:	a9 f0       	breq	.+42     	; 0xe2a <prvCopyDataFromQueue+0x32>
     e00:	50 e0       	ldi	r21, 0x00	; 0
     e02:	26 81       	ldd	r18, Z+6	; 0x06
     e04:	37 81       	ldd	r19, Z+7	; 0x07
     e06:	24 0f       	add	r18, r20
     e08:	35 1f       	adc	r19, r21
     e0a:	26 83       	std	Z+6, r18	; 0x06
     e0c:	37 83       	std	Z+7, r19	; 0x07
     e0e:	82 81       	ldd	r24, Z+2	; 0x02
     e10:	93 81       	ldd	r25, Z+3	; 0x03
     e12:	28 17       	cp	r18, r24
     e14:	39 07       	cpc	r19, r25
     e16:	20 f0       	brcs	.+8      	; 0xe20 <prvCopyDataFromQueue+0x28>
     e18:	80 81       	ld	r24, Z
     e1a:	91 81       	ldd	r25, Z+1	; 0x01
     e1c:	86 83       	std	Z+6, r24	; 0x06
     e1e:	97 83       	std	Z+7, r25	; 0x07
     e20:	cb 01       	movw	r24, r22
     e22:	66 81       	ldd	r22, Z+6	; 0x06
     e24:	77 81       	ldd	r23, Z+7	; 0x07
     e26:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <memcpy>
     e2a:	08 95       	ret

00000e2c <prvUnlockQueue>:
     e2c:	1f 93       	push	r17
     e2e:	cf 93       	push	r28
     e30:	df 93       	push	r29
     e32:	ec 01       	movw	r28, r24
     e34:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     e38:	ff 93       	push	r31
     e3a:	f8 7f       	andi	r31, 0xF8	; 248
     e3c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     e40:	1a a1       	ldd	r17, Y+34	; 0x22
     e42:	0b c0       	rjmp	.+22     	; 0xe5a <prvUnlockQueue+0x2e>
     e44:	8b 89       	ldd	r24, Y+19	; 0x13
     e46:	88 23       	and	r24, r24
     e48:	51 f0       	breq	.+20     	; 0xe5e <prvUnlockQueue+0x32>
     e4a:	ce 01       	movw	r24, r28
     e4c:	43 96       	adiw	r24, 0x13	; 19
     e4e:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <xTaskRemoveFromEventList>
     e52:	81 11       	cpse	r24, r1
     e54:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <vTaskMissedYield>
     e58:	11 50       	subi	r17, 0x01	; 1
     e5a:	11 16       	cp	r1, r17
     e5c:	9c f3       	brlt	.-26     	; 0xe44 <prvUnlockQueue+0x18>
     e5e:	8f ef       	ldi	r24, 0xFF	; 255
     e60:	8a a3       	std	Y+34, r24	; 0x22
     e62:	ff 91       	pop	r31
     e64:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     e68:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     e6c:	ff 93       	push	r31
     e6e:	f8 7f       	andi	r31, 0xF8	; 248
     e70:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     e74:	19 a1       	ldd	r17, Y+33	; 0x21
     e76:	0b c0       	rjmp	.+22     	; 0xe8e <prvUnlockQueue+0x62>
     e78:	88 85       	ldd	r24, Y+8	; 0x08
     e7a:	88 23       	and	r24, r24
     e7c:	51 f0       	breq	.+20     	; 0xe92 <prvUnlockQueue+0x66>
     e7e:	ce 01       	movw	r24, r28
     e80:	08 96       	adiw	r24, 0x08	; 8
     e82:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <xTaskRemoveFromEventList>
     e86:	81 11       	cpse	r24, r1
     e88:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <vTaskMissedYield>
     e8c:	11 50       	subi	r17, 0x01	; 1
     e8e:	11 16       	cp	r1, r17
     e90:	9c f3       	brlt	.-26     	; 0xe78 <prvUnlockQueue+0x4c>
     e92:	8f ef       	ldi	r24, 0xFF	; 255
     e94:	89 a3       	std	Y+33, r24	; 0x21
     e96:	ff 91       	pop	r31
     e98:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     e9c:	df 91       	pop	r29
     e9e:	cf 91       	pop	r28
     ea0:	1f 91       	pop	r17
     ea2:	08 95       	ret

00000ea4 <xQueueGenericReset>:
     ea4:	cf 93       	push	r28
     ea6:	df 93       	push	r29
     ea8:	ec 01       	movw	r28, r24
     eaa:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     eae:	ff 93       	push	r31
     eb0:	f8 7f       	andi	r31, 0xF8	; 248
     eb2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     eb6:	e8 81       	ld	r30, Y
     eb8:	f9 81       	ldd	r31, Y+1	; 0x01
     eba:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	28 a1       	ldd	r18, Y+32	; 0x20
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	82 9f       	mul	r24, r18
     ec4:	a0 01       	movw	r20, r0
     ec6:	83 9f       	mul	r24, r19
     ec8:	50 0d       	add	r21, r0
     eca:	92 9f       	mul	r25, r18
     ecc:	50 0d       	add	r21, r0
     ece:	11 24       	eor	r1, r1
     ed0:	4e 0f       	add	r20, r30
     ed2:	5f 1f       	adc	r21, r31
     ed4:	4a 83       	std	Y+2, r20	; 0x02
     ed6:	5b 83       	std	Y+3, r21	; 0x03
     ed8:	1e 8e       	std	Y+30, r1	; 0x1e
     eda:	ec 83       	std	Y+4, r30	; 0x04
     edc:	fd 83       	std	Y+5, r31	; 0x05
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	28 9f       	mul	r18, r24
     ee2:	a0 01       	movw	r20, r0
     ee4:	29 9f       	mul	r18, r25
     ee6:	50 0d       	add	r21, r0
     ee8:	38 9f       	mul	r19, r24
     eea:	50 0d       	add	r21, r0
     eec:	11 24       	eor	r1, r1
     eee:	cf 01       	movw	r24, r30
     ef0:	84 0f       	add	r24, r20
     ef2:	95 1f       	adc	r25, r21
     ef4:	8e 83       	std	Y+6, r24	; 0x06
     ef6:	9f 83       	std	Y+7, r25	; 0x07
     ef8:	8f ef       	ldi	r24, 0xFF	; 255
     efa:	89 a3       	std	Y+33, r24	; 0x21
     efc:	8a a3       	std	Y+34, r24	; 0x22
     efe:	61 11       	cpse	r22, r1
     f00:	0c c0       	rjmp	.+24     	; 0xf1a <xQueueGenericReset+0x76>
     f02:	88 85       	ldd	r24, Y+8	; 0x08
     f04:	88 23       	and	r24, r24
     f06:	89 f0       	breq	.+34     	; 0xf2a <xQueueGenericReset+0x86>
     f08:	ce 01       	movw	r24, r28
     f0a:	08 96       	adiw	r24, 0x08	; 8
     f0c:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <xTaskRemoveFromEventList>
     f10:	88 23       	and	r24, r24
     f12:	59 f0       	breq	.+22     	; 0xf2a <xQueueGenericReset+0x86>
     f14:	0e 94 ac 05 	call	0xb58	; 0xb58 <vPortYield>
     f18:	08 c0       	rjmp	.+16     	; 0xf2a <xQueueGenericReset+0x86>
     f1a:	ce 01       	movw	r24, r28
     f1c:	08 96       	adiw	r24, 0x08	; 8
     f1e:	0e 94 41 04 	call	0x882	; 0x882 <vListInitialise>
     f22:	ce 01       	movw	r24, r28
     f24:	43 96       	adiw	r24, 0x13	; 19
     f26:	0e 94 41 04 	call	0x882	; 0x882 <vListInitialise>
     f2a:	ff 91       	pop	r31
     f2c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	df 91       	pop	r29
     f34:	cf 91       	pop	r28
     f36:	08 95       	ret

00000f38 <prvInitialiseNewQueue>:
     f38:	ff 92       	push	r15
     f3a:	0f 93       	push	r16
     f3c:	1f 93       	push	r17
     f3e:	cf 93       	push	r28
     f40:	df 93       	push	r29
     f42:	f2 2e       	mov	r15, r18
     f44:	e8 01       	movw	r28, r16
     f46:	61 11       	cpse	r22, r1
     f48:	03 c0       	rjmp	.+6      	; 0xf50 <prvInitialiseNewQueue+0x18>
     f4a:	08 83       	st	Y, r16
     f4c:	19 83       	std	Y+1, r17	; 0x01
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <prvInitialiseNewQueue+0x1c>
     f50:	48 83       	st	Y, r20
     f52:	59 83       	std	Y+1, r21	; 0x01
     f54:	8f 8f       	std	Y+31, r24	; 0x1f
     f56:	68 a3       	std	Y+32, r22	; 0x20
     f58:	61 e0       	ldi	r22, 0x01	; 1
     f5a:	ce 01       	movw	r24, r28
     f5c:	0e 94 52 07 	call	0xea4	; 0xea4 <xQueueGenericReset>
     f60:	fc a2       	std	Y+36, r15	; 0x24
     f62:	df 91       	pop	r29
     f64:	cf 91       	pop	r28
     f66:	1f 91       	pop	r17
     f68:	0f 91       	pop	r16
     f6a:	ff 90       	pop	r15
     f6c:	08 95       	ret

00000f6e <xQueueGenericCreate>:
     f6e:	df 92       	push	r13
     f70:	ef 92       	push	r14
     f72:	ff 92       	push	r15
     f74:	0f 93       	push	r16
     f76:	1f 93       	push	r17
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
     f7c:	e8 2e       	mov	r14, r24
     f7e:	f6 2e       	mov	r15, r22
     f80:	d4 2e       	mov	r13, r20
     f82:	66 23       	and	r22, r22
     f84:	21 f0       	breq	.+8      	; 0xf8e <xQueueGenericCreate+0x20>
     f86:	86 9f       	mul	r24, r22
     f88:	c0 01       	movw	r24, r0
     f8a:	11 24       	eor	r1, r1
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <xQueueGenericCreate+0x24>
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	85 96       	adiw	r24, 0x25	; 37
     f94:	0e 94 1a 04 	call	0x834	; 0x834 <pvPortMalloc>
     f98:	ec 01       	movw	r28, r24
     f9a:	00 97       	sbiw	r24, 0x00	; 0
     f9c:	49 f0       	breq	.+18     	; 0xfb0 <xQueueGenericCreate+0x42>
     f9e:	8c 01       	movw	r16, r24
     fa0:	2d 2d       	mov	r18, r13
     fa2:	ac 01       	movw	r20, r24
     fa4:	4b 5d       	subi	r20, 0xDB	; 219
     fa6:	5f 4f       	sbci	r21, 0xFF	; 255
     fa8:	6f 2d       	mov	r22, r15
     faa:	8e 2d       	mov	r24, r14
     fac:	0e 94 9c 07 	call	0xf38	; 0xf38 <prvInitialiseNewQueue>
     fb0:	ce 01       	movw	r24, r28
     fb2:	df 91       	pop	r29
     fb4:	cf 91       	pop	r28
     fb6:	1f 91       	pop	r17
     fb8:	0f 91       	pop	r16
     fba:	ff 90       	pop	r15
     fbc:	ef 90       	pop	r14
     fbe:	df 90       	pop	r13
     fc0:	08 95       	ret

00000fc2 <xQueueGenericSend>:
     fc2:	cf 92       	push	r12
     fc4:	df 92       	push	r13
     fc6:	ef 92       	push	r14
     fc8:	ff 92       	push	r15
     fca:	0f 93       	push	r16
     fcc:	1f 93       	push	r17
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
     fd6:	29 97       	sbiw	r28, 0x09	; 9
     fd8:	cd bf       	out	0x3d, r28	; 61
     fda:	de bf       	out	0x3e, r29	; 62
     fdc:	7c 01       	movw	r14, r24
     fde:	6b 01       	movw	r12, r22
     fe0:	2e 83       	std	Y+6, r18	; 0x06
     fe2:	3f 83       	std	Y+7, r19	; 0x07
     fe4:	48 87       	std	Y+8, r20	; 0x08
     fe6:	59 87       	std	Y+9, r21	; 0x09
     fe8:	10 e0       	ldi	r17, 0x00	; 0
     fea:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     fee:	ff 93       	push	r31
     ff0:	f8 7f       	andi	r31, 0xF8	; 248
     ff2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     ff6:	f7 01       	movw	r30, r14
     ff8:	96 8d       	ldd	r25, Z+30	; 0x1e
     ffa:	87 8d       	ldd	r24, Z+31	; 0x1f
     ffc:	98 17       	cp	r25, r24
     ffe:	10 f0       	brcs	.+4      	; 0x1004 <xQueueGenericSend+0x42>
    1000:	02 30       	cpi	r16, 0x02	; 2
    1002:	d1 f4       	brne	.+52     	; 0x1038 <xQueueGenericSend+0x76>
    1004:	40 2f       	mov	r20, r16
    1006:	b6 01       	movw	r22, r12
    1008:	c7 01       	movw	r24, r14
    100a:	0e 94 b3 06 	call	0xd66	; 0xd66 <prvCopyDataToQueue>
    100e:	f7 01       	movw	r30, r14
    1010:	93 89       	ldd	r25, Z+19	; 0x13
    1012:	99 23       	and	r25, r25
    1014:	49 f0       	breq	.+18     	; 0x1028 <xQueueGenericSend+0x66>
    1016:	c7 01       	movw	r24, r14
    1018:	43 96       	adiw	r24, 0x13	; 19
    101a:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <xTaskRemoveFromEventList>
    101e:	88 23       	and	r24, r24
    1020:	31 f0       	breq	.+12     	; 0x102e <xQueueGenericSend+0x6c>
    1022:	0e 94 ac 05 	call	0xb58	; 0xb58 <vPortYield>
    1026:	03 c0       	rjmp	.+6      	; 0x102e <xQueueGenericSend+0x6c>
    1028:	81 11       	cpse	r24, r1
    102a:	0e 94 ac 05 	call	0xb58	; 0xb58 <vPortYield>
    102e:	ff 91       	pop	r31
    1030:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	58 c0       	rjmp	.+176    	; 0x10e8 <xQueueGenericSend+0x126>
    1038:	8e 81       	ldd	r24, Y+6	; 0x06
    103a:	9f 81       	ldd	r25, Y+7	; 0x07
    103c:	a8 85       	ldd	r26, Y+8	; 0x08
    103e:	b9 85       	ldd	r27, Y+9	; 0x09
    1040:	89 2b       	or	r24, r25
    1042:	8a 2b       	or	r24, r26
    1044:	8b 2b       	or	r24, r27
    1046:	29 f4       	brne	.+10     	; 0x1052 <xQueueGenericSend+0x90>
    1048:	ff 91       	pop	r31
    104a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	4b c0       	rjmp	.+150    	; 0x10e8 <xQueueGenericSend+0x126>
    1052:	11 11       	cpse	r17, r1
    1054:	05 c0       	rjmp	.+10     	; 0x1060 <xQueueGenericSend+0x9e>
    1056:	ce 01       	movw	r24, r28
    1058:	01 96       	adiw	r24, 0x01	; 1
    105a:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <vTaskInternalSetTimeOutState>
    105e:	11 e0       	ldi	r17, 0x01	; 1
    1060:	ff 91       	pop	r31
    1062:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1066:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <vTaskSuspendAll>
    106a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    106e:	ff 93       	push	r31
    1070:	f8 7f       	andi	r31, 0xF8	; 248
    1072:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1076:	f7 01       	movw	r30, r14
    1078:	81 a1       	ldd	r24, Z+33	; 0x21
    107a:	8f 3f       	cpi	r24, 0xFF	; 255
    107c:	09 f4       	brne	.+2      	; 0x1080 <xQueueGenericSend+0xbe>
    107e:	11 a2       	std	Z+33, r1	; 0x21
    1080:	f7 01       	movw	r30, r14
    1082:	82 a1       	ldd	r24, Z+34	; 0x22
    1084:	8f 3f       	cpi	r24, 0xFF	; 255
    1086:	09 f4       	brne	.+2      	; 0x108a <xQueueGenericSend+0xc8>
    1088:	12 a2       	std	Z+34, r1	; 0x22
    108a:	ff 91       	pop	r31
    108c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1090:	be 01       	movw	r22, r28
    1092:	6a 5f       	subi	r22, 0xFA	; 250
    1094:	7f 4f       	sbci	r23, 0xFF	; 255
    1096:	ce 01       	movw	r24, r28
    1098:	01 96       	adiw	r24, 0x01	; 1
    109a:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <xTaskCheckForTimeOut>
    109e:	81 11       	cpse	r24, r1
    10a0:	1d c0       	rjmp	.+58     	; 0x10dc <xQueueGenericSend+0x11a>
    10a2:	c7 01       	movw	r24, r14
    10a4:	0e 94 a1 06 	call	0xd42	; 0xd42 <prvIsQueueFull>
    10a8:	88 23       	and	r24, r24
    10aa:	91 f0       	breq	.+36     	; 0x10d0 <xQueueGenericSend+0x10e>
    10ac:	4e 81       	ldd	r20, Y+6	; 0x06
    10ae:	5f 81       	ldd	r21, Y+7	; 0x07
    10b0:	68 85       	ldd	r22, Y+8	; 0x08
    10b2:	79 85       	ldd	r23, Y+9	; 0x09
    10b4:	c7 01       	movw	r24, r14
    10b6:	08 96       	adiw	r24, 0x08	; 8
    10b8:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <vTaskPlaceOnEventList>
    10bc:	c7 01       	movw	r24, r14
    10be:	0e 94 16 07 	call	0xe2c	; 0xe2c <prvUnlockQueue>
    10c2:	0e 94 bc 0c 	call	0x1978	; 0x1978 <xTaskResumeAll>
    10c6:	81 11       	cpse	r24, r1
    10c8:	90 cf       	rjmp	.-224    	; 0xfea <xQueueGenericSend+0x28>
    10ca:	0e 94 ac 05 	call	0xb58	; 0xb58 <vPortYield>
    10ce:	8d cf       	rjmp	.-230    	; 0xfea <xQueueGenericSend+0x28>
    10d0:	c7 01       	movw	r24, r14
    10d2:	0e 94 16 07 	call	0xe2c	; 0xe2c <prvUnlockQueue>
    10d6:	0e 94 bc 0c 	call	0x1978	; 0x1978 <xTaskResumeAll>
    10da:	87 cf       	rjmp	.-242    	; 0xfea <xQueueGenericSend+0x28>
    10dc:	c7 01       	movw	r24, r14
    10de:	0e 94 16 07 	call	0xe2c	; 0xe2c <prvUnlockQueue>
    10e2:	0e 94 bc 0c 	call	0x1978	; 0x1978 <xTaskResumeAll>
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	29 96       	adiw	r28, 0x09	; 9
    10ea:	cd bf       	out	0x3d, r28	; 61
    10ec:	de bf       	out	0x3e, r29	; 62
    10ee:	df 91       	pop	r29
    10f0:	cf 91       	pop	r28
    10f2:	1f 91       	pop	r17
    10f4:	0f 91       	pop	r16
    10f6:	ff 90       	pop	r15
    10f8:	ef 90       	pop	r14
    10fa:	df 90       	pop	r13
    10fc:	cf 90       	pop	r12
    10fe:	08 95       	ret

00001100 <xQueueGenericSendFromISR>:
    1100:	af 92       	push	r10
    1102:	bf 92       	push	r11
    1104:	cf 92       	push	r12
    1106:	df 92       	push	r13
    1108:	ff 92       	push	r15
    110a:	0f 93       	push	r16
    110c:	1f 93       	push	r17
    110e:	cf 93       	push	r28
    1110:	df 93       	push	r29
    1112:	ec 01       	movw	r28, r24
    1114:	6b 01       	movw	r12, r22
    1116:	5a 01       	movw	r10, r20
    1118:	02 2f       	mov	r16, r18
    111a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <_portSetInterruptMaskFromIsr>
    111e:	f8 2e       	mov	r15, r24
    1120:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1122:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1124:	98 17       	cp	r25, r24
    1126:	10 f0       	brcs	.+4      	; 0x112c <xQueueGenericSendFromISR+0x2c>
    1128:	02 30       	cpi	r16, 0x02	; 2
    112a:	e1 f4       	brne	.+56     	; 0x1164 <xQueueGenericSendFromISR+0x64>
    112c:	1a a1       	ldd	r17, Y+34	; 0x22
    112e:	40 2f       	mov	r20, r16
    1130:	b6 01       	movw	r22, r12
    1132:	ce 01       	movw	r24, r28
    1134:	0e 94 b3 06 	call	0xd66	; 0xd66 <prvCopyDataToQueue>
    1138:	1f 3f       	cpi	r17, 0xFF	; 255
    113a:	81 f4       	brne	.+32     	; 0x115c <xQueueGenericSendFromISR+0x5c>
    113c:	8b 89       	ldd	r24, Y+19	; 0x13
    113e:	88 23       	and	r24, r24
    1140:	99 f0       	breq	.+38     	; 0x1168 <xQueueGenericSendFromISR+0x68>
    1142:	ce 01       	movw	r24, r28
    1144:	43 96       	adiw	r24, 0x13	; 19
    1146:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <xTaskRemoveFromEventList>
    114a:	88 23       	and	r24, r24
    114c:	79 f0       	breq	.+30     	; 0x116c <xQueueGenericSendFromISR+0x6c>
    114e:	a1 14       	cp	r10, r1
    1150:	b1 04       	cpc	r11, r1
    1152:	71 f0       	breq	.+28     	; 0x1170 <xQueueGenericSendFromISR+0x70>
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	f5 01       	movw	r30, r10
    1158:	80 83       	st	Z, r24
    115a:	0b c0       	rjmp	.+22     	; 0x1172 <xQueueGenericSendFromISR+0x72>
    115c:	1f 5f       	subi	r17, 0xFF	; 255
    115e:	1a a3       	std	Y+34, r17	; 0x22
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	07 c0       	rjmp	.+14     	; 0x1172 <xQueueGenericSendFromISR+0x72>
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	05 c0       	rjmp	.+10     	; 0x1172 <xQueueGenericSendFromISR+0x72>
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	03 c0       	rjmp	.+6      	; 0x1172 <xQueueGenericSendFromISR+0x72>
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	01 c0       	rjmp	.+2      	; 0x1172 <xQueueGenericSendFromISR+0x72>
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	f0 92 a2 00 	sts	0x00A2, r15	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1176:	df 91       	pop	r29
    1178:	cf 91       	pop	r28
    117a:	1f 91       	pop	r17
    117c:	0f 91       	pop	r16
    117e:	ff 90       	pop	r15
    1180:	df 90       	pop	r13
    1182:	cf 90       	pop	r12
    1184:	bf 90       	pop	r11
    1186:	af 90       	pop	r10
    1188:	08 95       	ret

0000118a <xQueueReceive>:
    118a:	cf 92       	push	r12
    118c:	df 92       	push	r13
    118e:	ef 92       	push	r14
    1190:	ff 92       	push	r15
    1192:	0f 93       	push	r16
    1194:	1f 93       	push	r17
    1196:	cf 93       	push	r28
    1198:	df 93       	push	r29
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
    119e:	29 97       	sbiw	r28, 0x09	; 9
    11a0:	cd bf       	out	0x3d, r28	; 61
    11a2:	de bf       	out	0x3e, r29	; 62
    11a4:	8c 01       	movw	r16, r24
    11a6:	6b 01       	movw	r12, r22
    11a8:	2e 83       	std	Y+6, r18	; 0x06
    11aa:	3f 83       	std	Y+7, r19	; 0x07
    11ac:	48 87       	std	Y+8, r20	; 0x08
    11ae:	59 87       	std	Y+9, r21	; 0x09
    11b0:	e1 2c       	mov	r14, r1
    11b2:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    11b6:	ff 93       	push	r31
    11b8:	f8 7f       	andi	r31, 0xF8	; 248
    11ba:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    11be:	f8 01       	movw	r30, r16
    11c0:	f6 8c       	ldd	r15, Z+30	; 0x1e
    11c2:	ff 20       	and	r15, r15
    11c4:	b1 f0       	breq	.+44     	; 0x11f2 <xQueueReceive+0x68>
    11c6:	b6 01       	movw	r22, r12
    11c8:	c8 01       	movw	r24, r16
    11ca:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <prvCopyDataFromQueue>
    11ce:	fa 94       	dec	r15
    11d0:	f8 01       	movw	r30, r16
    11d2:	f6 8e       	std	Z+30, r15	; 0x1e
    11d4:	80 85       	ldd	r24, Z+8	; 0x08
    11d6:	88 23       	and	r24, r24
    11d8:	39 f0       	breq	.+14     	; 0x11e8 <xQueueReceive+0x5e>
    11da:	c8 01       	movw	r24, r16
    11dc:	08 96       	adiw	r24, 0x08	; 8
    11de:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <xTaskRemoveFromEventList>
    11e2:	81 11       	cpse	r24, r1
    11e4:	0e 94 ac 05 	call	0xb58	; 0xb58 <vPortYield>
    11e8:	ff 91       	pop	r31
    11ea:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	5f c0       	rjmp	.+190    	; 0x12b0 <xQueueReceive+0x126>
    11f2:	8e 81       	ldd	r24, Y+6	; 0x06
    11f4:	9f 81       	ldd	r25, Y+7	; 0x07
    11f6:	a8 85       	ldd	r26, Y+8	; 0x08
    11f8:	b9 85       	ldd	r27, Y+9	; 0x09
    11fa:	89 2b       	or	r24, r25
    11fc:	8a 2b       	or	r24, r26
    11fe:	8b 2b       	or	r24, r27
    1200:	29 f4       	brne	.+10     	; 0x120c <xQueueReceive+0x82>
    1202:	ff 91       	pop	r31
    1204:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	52 c0       	rjmp	.+164    	; 0x12b0 <xQueueReceive+0x126>
    120c:	e1 10       	cpse	r14, r1
    120e:	06 c0       	rjmp	.+12     	; 0x121c <xQueueReceive+0x92>
    1210:	ce 01       	movw	r24, r28
    1212:	01 96       	adiw	r24, 0x01	; 1
    1214:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <vTaskInternalSetTimeOutState>
    1218:	ee 24       	eor	r14, r14
    121a:	e3 94       	inc	r14
    121c:	ff 91       	pop	r31
    121e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1222:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <vTaskSuspendAll>
    1226:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    122a:	ff 93       	push	r31
    122c:	f8 7f       	andi	r31, 0xF8	; 248
    122e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1232:	f8 01       	movw	r30, r16
    1234:	81 a1       	ldd	r24, Z+33	; 0x21
    1236:	8f 3f       	cpi	r24, 0xFF	; 255
    1238:	09 f4       	brne	.+2      	; 0x123c <xQueueReceive+0xb2>
    123a:	11 a2       	std	Z+33, r1	; 0x21
    123c:	f8 01       	movw	r30, r16
    123e:	82 a1       	ldd	r24, Z+34	; 0x22
    1240:	8f 3f       	cpi	r24, 0xFF	; 255
    1242:	09 f4       	brne	.+2      	; 0x1246 <xQueueReceive+0xbc>
    1244:	12 a2       	std	Z+34, r1	; 0x22
    1246:	ff 91       	pop	r31
    1248:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    124c:	be 01       	movw	r22, r28
    124e:	6a 5f       	subi	r22, 0xFA	; 250
    1250:	7f 4f       	sbci	r23, 0xFF	; 255
    1252:	ce 01       	movw	r24, r28
    1254:	01 96       	adiw	r24, 0x01	; 1
    1256:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <xTaskCheckForTimeOut>
    125a:	81 11       	cpse	r24, r1
    125c:	1d c0       	rjmp	.+58     	; 0x1298 <xQueueReceive+0x10e>
    125e:	c8 01       	movw	r24, r16
    1260:	0e 94 90 06 	call	0xd20	; 0xd20 <prvIsQueueEmpty>
    1264:	88 23       	and	r24, r24
    1266:	91 f0       	breq	.+36     	; 0x128c <xQueueReceive+0x102>
    1268:	4e 81       	ldd	r20, Y+6	; 0x06
    126a:	5f 81       	ldd	r21, Y+7	; 0x07
    126c:	68 85       	ldd	r22, Y+8	; 0x08
    126e:	79 85       	ldd	r23, Y+9	; 0x09
    1270:	c8 01       	movw	r24, r16
    1272:	43 96       	adiw	r24, 0x13	; 19
    1274:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <vTaskPlaceOnEventList>
    1278:	c8 01       	movw	r24, r16
    127a:	0e 94 16 07 	call	0xe2c	; 0xe2c <prvUnlockQueue>
    127e:	0e 94 bc 0c 	call	0x1978	; 0x1978 <xTaskResumeAll>
    1282:	81 11       	cpse	r24, r1
    1284:	96 cf       	rjmp	.-212    	; 0x11b2 <xQueueReceive+0x28>
    1286:	0e 94 ac 05 	call	0xb58	; 0xb58 <vPortYield>
    128a:	93 cf       	rjmp	.-218    	; 0x11b2 <xQueueReceive+0x28>
    128c:	c8 01       	movw	r24, r16
    128e:	0e 94 16 07 	call	0xe2c	; 0xe2c <prvUnlockQueue>
    1292:	0e 94 bc 0c 	call	0x1978	; 0x1978 <xTaskResumeAll>
    1296:	8d cf       	rjmp	.-230    	; 0x11b2 <xQueueReceive+0x28>
    1298:	c8 01       	movw	r24, r16
    129a:	0e 94 16 07 	call	0xe2c	; 0xe2c <prvUnlockQueue>
    129e:	0e 94 bc 0c 	call	0x1978	; 0x1978 <xTaskResumeAll>
    12a2:	c8 01       	movw	r24, r16
    12a4:	0e 94 90 06 	call	0xd20	; 0xd20 <prvIsQueueEmpty>
    12a8:	88 23       	and	r24, r24
    12aa:	09 f4       	brne	.+2      	; 0x12ae <xQueueReceive+0x124>
    12ac:	82 cf       	rjmp	.-252    	; 0x11b2 <xQueueReceive+0x28>
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	29 96       	adiw	r28, 0x09	; 9
    12b2:	cd bf       	out	0x3d, r28	; 61
    12b4:	de bf       	out	0x3e, r29	; 62
    12b6:	df 91       	pop	r29
    12b8:	cf 91       	pop	r28
    12ba:	1f 91       	pop	r17
    12bc:	0f 91       	pop	r16
    12be:	ff 90       	pop	r15
    12c0:	ef 90       	pop	r14
    12c2:	df 90       	pop	r13
    12c4:	cf 90       	pop	r12
    12c6:	08 95       	ret

000012c8 <uxQueueMessagesWaiting>:
    12c8:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    12cc:	ff 93       	push	r31
    12ce:	f8 7f       	andi	r31, 0xF8	; 248
    12d0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    12d4:	fc 01       	movw	r30, r24
    12d6:	86 8d       	ldd	r24, Z+30	; 0x1e
    12d8:	ff 91       	pop	r31
    12da:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    12de:	08 95       	ret

000012e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    12e0:	cf 93       	push	r28
    12e2:	df 93       	push	r29
    12e4:	ec 01       	movw	r28, r24
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    12e6:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    12ea:	ff 93       	push	r31
    12ec:	f8 7f       	andi	r31, 0xF8	; 248
    12ee:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    12f2:	89 a1       	ldd	r24, Y+33	; 0x21
    12f4:	8f 3f       	cpi	r24, 0xFF	; 255
    12f6:	09 f4       	brne	.+2      	; 0x12fa <vQueueWaitForMessageRestricted+0x1a>
    12f8:	19 a2       	std	Y+33, r1	; 0x21
    12fa:	8a a1       	ldd	r24, Y+34	; 0x22
    12fc:	8f 3f       	cpi	r24, 0xFF	; 255
    12fe:	09 f4       	brne	.+2      	; 0x1302 <vQueueWaitForMessageRestricted+0x22>
    1300:	1a a2       	std	Y+34, r1	; 0x22
    1302:	ff 91       	pop	r31
    1304:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1308:	8e 8d       	ldd	r24, Y+30	; 0x1e
    130a:	81 11       	cpse	r24, r1
    130c:	04 c0       	rjmp	.+8      	; 0x1316 <vQueueWaitForMessageRestricted+0x36>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    130e:	ce 01       	movw	r24, r28
    1310:	43 96       	adiw	r24, 0x13	; 19
    1312:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    1316:	ce 01       	movw	r24, r28
    1318:	0e 94 16 07 	call	0xe2c	; 0xe2c <prvUnlockQueue>
	}
    131c:	df 91       	pop	r29
    131e:	cf 91       	pop	r28
    1320:	08 95       	ret

00001322 <prvResetNextTaskUnblockTime>:
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;

		return xReturn;
	}
    1322:	e0 91 8e 30 	lds	r30, 0x308E	; 0x80308e <pxDelayedTaskList>
    1326:	f0 91 8f 30 	lds	r31, 0x308F	; 0x80308f <pxDelayedTaskList+0x1>
    132a:	80 81       	ld	r24, Z
    132c:	81 11       	cpse	r24, r1
    132e:	0c c0       	rjmp	.+24     	; 0x1348 <prvResetNextTaskUnblockTime+0x26>
    1330:	8f ef       	ldi	r24, 0xFF	; 255
    1332:	9f ef       	ldi	r25, 0xFF	; 255
    1334:	dc 01       	movw	r26, r24
    1336:	80 93 67 30 	sts	0x3067, r24	; 0x803067 <xNextTaskUnblockTime>
    133a:	90 93 68 30 	sts	0x3068, r25	; 0x803068 <xNextTaskUnblockTime+0x1>
    133e:	a0 93 69 30 	sts	0x3069, r26	; 0x803069 <xNextTaskUnblockTime+0x2>
    1342:	b0 93 6a 30 	sts	0x306A, r27	; 0x80306a <xNextTaskUnblockTime+0x3>
    1346:	08 95       	ret
    1348:	e0 91 8e 30 	lds	r30, 0x308E	; 0x80308e <pxDelayedTaskList>
    134c:	f0 91 8f 30 	lds	r31, 0x308F	; 0x80308f <pxDelayedTaskList+0x1>
    1350:	07 80       	ldd	r0, Z+7	; 0x07
    1352:	f0 85       	ldd	r31, Z+8	; 0x08
    1354:	e0 2d       	mov	r30, r0
    1356:	00 84       	ldd	r0, Z+8	; 0x08
    1358:	f1 85       	ldd	r31, Z+9	; 0x09
    135a:	e0 2d       	mov	r30, r0
    135c:	82 81       	ldd	r24, Z+2	; 0x02
    135e:	93 81       	ldd	r25, Z+3	; 0x03
    1360:	a4 81       	ldd	r26, Z+4	; 0x04
    1362:	b5 81       	ldd	r27, Z+5	; 0x05
    1364:	80 93 67 30 	sts	0x3067, r24	; 0x803067 <xNextTaskUnblockTime>
    1368:	90 93 68 30 	sts	0x3068, r25	; 0x803068 <xNextTaskUnblockTime+0x1>
    136c:	a0 93 69 30 	sts	0x3069, r26	; 0x803069 <xNextTaskUnblockTime+0x2>
    1370:	b0 93 6a 30 	sts	0x306A, r27	; 0x80306a <xNextTaskUnblockTime+0x3>
    1374:	08 95       	ret

00001376 <prvInitialiseNewTask>:
    1376:	2f 92       	push	r2
    1378:	3f 92       	push	r3
    137a:	4f 92       	push	r4
    137c:	5f 92       	push	r5
    137e:	6f 92       	push	r6
    1380:	7f 92       	push	r7
    1382:	8f 92       	push	r8
    1384:	9f 92       	push	r9
    1386:	af 92       	push	r10
    1388:	bf 92       	push	r11
    138a:	cf 92       	push	r12
    138c:	df 92       	push	r13
    138e:	ef 92       	push	r14
    1390:	0f 93       	push	r16
    1392:	1f 93       	push	r17
    1394:	cf 93       	push	r28
    1396:	df 93       	push	r29
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
    139c:	1c 01       	movw	r2, r24
    139e:	4b 01       	movw	r8, r22
    13a0:	29 01       	movw	r4, r18
    13a2:	3a 01       	movw	r6, r20
    13a4:	a9 01       	movw	r20, r18
    13a6:	65 ea       	ldi	r22, 0xA5	; 165
    13a8:	70 e0       	ldi	r23, 0x00	; 0
    13aa:	f5 01       	movw	r30, r10
    13ac:	83 8d       	ldd	r24, Z+27	; 0x1b
    13ae:	94 8d       	ldd	r25, Z+28	; 0x1c
    13b0:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <memset>
    13b4:	f5 01       	movw	r30, r10
    13b6:	83 8d       	ldd	r24, Z+27	; 0x1b
    13b8:	94 8d       	ldd	r25, Z+28	; 0x1c
    13ba:	f1 e0       	ldi	r31, 0x01	; 1
    13bc:	4f 1a       	sub	r4, r31
    13be:	51 08       	sbc	r5, r1
    13c0:	48 0e       	add	r4, r24
    13c2:	59 1e       	adc	r5, r25
    13c4:	20 e0       	ldi	r18, 0x00	; 0
    13c6:	0f c0       	rjmp	.+30     	; 0x13e6 <prvInitialiseNewTask+0x70>
    13c8:	82 2f       	mov	r24, r18
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	f4 01       	movw	r30, r8
    13ce:	e8 0f       	add	r30, r24
    13d0:	f9 1f       	adc	r31, r25
    13d2:	30 81       	ld	r19, Z
    13d4:	d5 01       	movw	r26, r10
    13d6:	a8 0f       	add	r26, r24
    13d8:	b9 1f       	adc	r27, r25
    13da:	5d 96       	adiw	r26, 0x1d	; 29
    13dc:	3c 93       	st	X, r19
    13de:	80 81       	ld	r24, Z
    13e0:	88 23       	and	r24, r24
    13e2:	19 f0       	breq	.+6      	; 0x13ea <prvInitialiseNewTask+0x74>
    13e4:	2f 5f       	subi	r18, 0xFF	; 255
    13e6:	28 30       	cpi	r18, 0x08	; 8
    13e8:	78 f3       	brcs	.-34     	; 0x13c8 <prvInitialiseNewTask+0x52>
    13ea:	f5 01       	movw	r30, r10
    13ec:	14 a2       	std	Z+36, r1	; 0x24
    13ee:	f3 e0       	ldi	r31, 0x03	; 3
    13f0:	fe 15       	cp	r31, r14
    13f2:	20 f4       	brcc	.+8      	; 0x13fc <prvInitialiseNewTask+0x86>
    13f4:	0f 2e       	mov	r0, r31
    13f6:	f3 e0       	ldi	r31, 0x03	; 3
    13f8:	ef 2e       	mov	r14, r31
    13fa:	f0 2d       	mov	r31, r0
    13fc:	f5 01       	movw	r30, r10
    13fe:	e2 8e       	std	Z+26, r14	; 0x1a
    1400:	c5 01       	movw	r24, r10
    1402:	02 96       	adiw	r24, 0x02	; 2
    1404:	0e 94 52 04 	call	0x8a4	; 0x8a4 <vListInitialiseItem>
    1408:	c5 01       	movw	r24, r10
    140a:	0e 96       	adiw	r24, 0x0e	; 14
    140c:	0e 94 52 04 	call	0x8a4	; 0x8a4 <vListInitialiseItem>
    1410:	f5 01       	movw	r30, r10
    1412:	a2 86       	std	Z+10, r10	; 0x0a
    1414:	b3 86       	std	Z+11, r11	; 0x0b
    1416:	84 e0       	ldi	r24, 0x04	; 4
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	a0 e0       	ldi	r26, 0x00	; 0
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	8e 19       	sub	r24, r14
    1420:	91 09       	sbc	r25, r1
    1422:	a1 09       	sbc	r26, r1
    1424:	b1 09       	sbc	r27, r1
    1426:	86 87       	std	Z+14, r24	; 0x0e
    1428:	97 87       	std	Z+15, r25	; 0x0f
    142a:	a0 8b       	std	Z+16, r26	; 0x10
    142c:	b1 8b       	std	Z+17, r27	; 0x11
    142e:	a6 8a       	std	Z+22, r10	; 0x16
    1430:	b7 8a       	std	Z+23, r11	; 0x17
    1432:	17 a2       	std	Z+39, r1	; 0x27
    1434:	10 a6       	std	Z+40, r1	; 0x28
    1436:	11 a6       	std	Z+41, r1	; 0x29
    1438:	12 a6       	std	Z+42, r1	; 0x2a
    143a:	13 a6       	std	Z+43, r1	; 0x2b
    143c:	a8 01       	movw	r20, r16
    143e:	b1 01       	movw	r22, r2
    1440:	c2 01       	movw	r24, r4
    1442:	0e 94 fd 04 	call	0x9fa	; 0x9fa <pxPortInitialiseStack>
    1446:	f5 01       	movw	r30, r10
    1448:	80 83       	st	Z, r24
    144a:	91 83       	std	Z+1, r25	; 0x01
    144c:	c1 14       	cp	r12, r1
    144e:	d1 04       	cpc	r13, r1
    1450:	19 f0       	breq	.+6      	; 0x1458 <prvInitialiseNewTask+0xe2>
    1452:	f6 01       	movw	r30, r12
    1454:	a0 82       	st	Z, r10
    1456:	b1 82       	std	Z+1, r11	; 0x01
    1458:	df 91       	pop	r29
    145a:	cf 91       	pop	r28
    145c:	1f 91       	pop	r17
    145e:	0f 91       	pop	r16
    1460:	ef 90       	pop	r14
    1462:	df 90       	pop	r13
    1464:	cf 90       	pop	r12
    1466:	bf 90       	pop	r11
    1468:	af 90       	pop	r10
    146a:	9f 90       	pop	r9
    146c:	8f 90       	pop	r8
    146e:	7f 90       	pop	r7
    1470:	6f 90       	pop	r6
    1472:	5f 90       	pop	r5
    1474:	4f 90       	pop	r4
    1476:	3f 90       	pop	r3
    1478:	2f 90       	pop	r2
    147a:	08 95       	ret

0000147c <prvInitialiseTaskLists>:
    147c:	cf 93       	push	r28
    147e:	c0 e0       	ldi	r28, 0x00	; 0
    1480:	09 c0       	rjmp	.+18     	; 0x1494 <prvInitialiseTaskLists+0x18>
    1482:	2b e0       	ldi	r18, 0x0B	; 11
    1484:	c2 9f       	mul	r28, r18
    1486:	c0 01       	movw	r24, r0
    1488:	11 24       	eor	r1, r1
    148a:	8a 55       	subi	r24, 0x5A	; 90
    148c:	9f 4c       	sbci	r25, 0xCF	; 207
    148e:	0e 94 41 04 	call	0x882	; 0x882 <vListInitialise>
    1492:	cf 5f       	subi	r28, 0xFF	; 255
    1494:	c4 30       	cpi	r28, 0x04	; 4
    1496:	a8 f3       	brcs	.-22     	; 0x1482 <prvInitialiseTaskLists+0x6>
    1498:	8b e9       	ldi	r24, 0x9B	; 155
    149a:	90 e3       	ldi	r25, 0x30	; 48
    149c:	0e 94 41 04 	call	0x882	; 0x882 <vListInitialise>
    14a0:	80 e9       	ldi	r24, 0x90	; 144
    14a2:	90 e3       	ldi	r25, 0x30	; 48
    14a4:	0e 94 41 04 	call	0x882	; 0x882 <vListInitialise>
    14a8:	81 e8       	ldi	r24, 0x81	; 129
    14aa:	90 e3       	ldi	r25, 0x30	; 48
    14ac:	0e 94 41 04 	call	0x882	; 0x882 <vListInitialise>
    14b0:	86 e7       	ldi	r24, 0x76	; 118
    14b2:	90 e3       	ldi	r25, 0x30	; 48
    14b4:	0e 94 41 04 	call	0x882	; 0x882 <vListInitialise>
    14b8:	8b e9       	ldi	r24, 0x9B	; 155
    14ba:	90 e3       	ldi	r25, 0x30	; 48
    14bc:	80 93 8e 30 	sts	0x308E, r24	; 0x80308e <pxDelayedTaskList>
    14c0:	90 93 8f 30 	sts	0x308F, r25	; 0x80308f <pxDelayedTaskList+0x1>
    14c4:	80 e9       	ldi	r24, 0x90	; 144
    14c6:	90 e3       	ldi	r25, 0x30	; 48
    14c8:	80 93 8c 30 	sts	0x308C, r24	; 0x80308c <pxOverflowDelayedTaskList>
    14cc:	90 93 8d 30 	sts	0x308D, r25	; 0x80308d <pxOverflowDelayedTaskList+0x1>
    14d0:	cf 91       	pop	r28
    14d2:	08 95       	ret

000014d4 <prvAddNewTaskToReadyList>:
    14d4:	cf 93       	push	r28
    14d6:	df 93       	push	r29
    14d8:	ec 01       	movw	r28, r24
    14da:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    14de:	ff 93       	push	r31
    14e0:	f8 7f       	andi	r31, 0xF8	; 248
    14e2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    14e6:	80 91 75 30 	lds	r24, 0x3075	; 0x803075 <uxCurrentNumberOfTasks>
    14ea:	8f 5f       	subi	r24, 0xFF	; 255
    14ec:	80 93 75 30 	sts	0x3075, r24	; 0x803075 <uxCurrentNumberOfTasks>
    14f0:	80 91 d2 30 	lds	r24, 0x30D2	; 0x8030d2 <pxCurrentTCB>
    14f4:	90 91 d3 30 	lds	r25, 0x30D3	; 0x8030d3 <pxCurrentTCB+0x1>
    14f8:	89 2b       	or	r24, r25
    14fa:	59 f4       	brne	.+22     	; 0x1512 <prvAddNewTaskToReadyList+0x3e>
    14fc:	c0 93 d2 30 	sts	0x30D2, r28	; 0x8030d2 <pxCurrentTCB>
    1500:	d0 93 d3 30 	sts	0x30D3, r29	; 0x8030d3 <pxCurrentTCB+0x1>
    1504:	80 91 75 30 	lds	r24, 0x3075	; 0x803075 <uxCurrentNumberOfTasks>
    1508:	81 30       	cpi	r24, 0x01	; 1
    150a:	99 f4       	brne	.+38     	; 0x1532 <prvAddNewTaskToReadyList+0x5e>
    150c:	0e 94 3e 0a 	call	0x147c	; 0x147c <prvInitialiseTaskLists>
    1510:	10 c0       	rjmp	.+32     	; 0x1532 <prvAddNewTaskToReadyList+0x5e>
    1512:	80 91 6f 30 	lds	r24, 0x306F	; 0x80306f <xSchedulerRunning>
    1516:	81 11       	cpse	r24, r1
    1518:	0c c0       	rjmp	.+24     	; 0x1532 <prvAddNewTaskToReadyList+0x5e>
    151a:	e0 91 d2 30 	lds	r30, 0x30D2	; 0x8030d2 <pxCurrentTCB>
    151e:	f0 91 d3 30 	lds	r31, 0x30D3	; 0x8030d3 <pxCurrentTCB+0x1>
    1522:	92 8d       	ldd	r25, Z+26	; 0x1a
    1524:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1526:	89 17       	cp	r24, r25
    1528:	20 f0       	brcs	.+8      	; 0x1532 <prvAddNewTaskToReadyList+0x5e>
    152a:	c0 93 d2 30 	sts	0x30D2, r28	; 0x8030d2 <pxCurrentTCB>
    152e:	d0 93 d3 30 	sts	0x30D3, r29	; 0x8030d3 <pxCurrentTCB+0x1>
    1532:	80 91 6b 30 	lds	r24, 0x306B	; 0x80306b <uxTaskNumber>
    1536:	8f 5f       	subi	r24, 0xFF	; 255
    1538:	80 93 6b 30 	sts	0x306B, r24	; 0x80306b <uxTaskNumber>
    153c:	8d a3       	std	Y+37, r24	; 0x25
    153e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1540:	90 91 70 30 	lds	r25, 0x3070	; 0x803070 <uxTopReadyPriority>
    1544:	98 17       	cp	r25, r24
    1546:	10 f4       	brcc	.+4      	; 0x154c <prvAddNewTaskToReadyList+0x78>
    1548:	80 93 70 30 	sts	0x3070, r24	; 0x803070 <uxTopReadyPriority>
    154c:	2b e0       	ldi	r18, 0x0B	; 11
    154e:	82 9f       	mul	r24, r18
    1550:	c0 01       	movw	r24, r0
    1552:	11 24       	eor	r1, r1
    1554:	be 01       	movw	r22, r28
    1556:	6e 5f       	subi	r22, 0xFE	; 254
    1558:	7f 4f       	sbci	r23, 0xFF	; 255
    155a:	8a 55       	subi	r24, 0x5A	; 90
    155c:	9f 4c       	sbci	r25, 0xCF	; 207
    155e:	0e 94 56 04 	call	0x8ac	; 0x8ac <vListInsertEnd>
    1562:	ff 91       	pop	r31
    1564:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1568:	80 91 6f 30 	lds	r24, 0x306F	; 0x80306f <xSchedulerRunning>
    156c:	88 23       	and	r24, r24
    156e:	51 f0       	breq	.+20     	; 0x1584 <prvAddNewTaskToReadyList+0xb0>
    1570:	e0 91 d2 30 	lds	r30, 0x30D2	; 0x8030d2 <pxCurrentTCB>
    1574:	f0 91 d3 30 	lds	r31, 0x30D3	; 0x8030d3 <pxCurrentTCB+0x1>
    1578:	92 8d       	ldd	r25, Z+26	; 0x1a
    157a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    157c:	98 17       	cp	r25, r24
    157e:	10 f4       	brcc	.+4      	; 0x1584 <prvAddNewTaskToReadyList+0xb0>
    1580:	0e 94 ac 05 	call	0xb58	; 0xb58 <vPortYield>
    1584:	df 91       	pop	r29
    1586:	cf 91       	pop	r28
    1588:	08 95       	ret

0000158a <prvAddCurrentTaskToDelayedList>:
    158a:	8f 92       	push	r8
    158c:	9f 92       	push	r9
    158e:	af 92       	push	r10
    1590:	bf 92       	push	r11
    1592:	cf 92       	push	r12
    1594:	df 92       	push	r13
    1596:	ef 92       	push	r14
    1598:	ff 92       	push	r15
    159a:	cf 93       	push	r28
    159c:	6b 01       	movw	r12, r22
    159e:	7c 01       	movw	r14, r24
    15a0:	c4 2f       	mov	r28, r20
    15a2:	80 90 71 30 	lds	r8, 0x3071	; 0x803071 <xTickCount>
    15a6:	90 90 72 30 	lds	r9, 0x3072	; 0x803072 <xTickCount+0x1>
    15aa:	a0 90 73 30 	lds	r10, 0x3073	; 0x803073 <xTickCount+0x2>
    15ae:	b0 90 74 30 	lds	r11, 0x3074	; 0x803074 <xTickCount+0x3>
    15b2:	80 91 d2 30 	lds	r24, 0x30D2	; 0x8030d2 <pxCurrentTCB>
    15b6:	90 91 d3 30 	lds	r25, 0x30D3	; 0x8030d3 <pxCurrentTCB+0x1>
    15ba:	02 96       	adiw	r24, 0x02	; 2
    15bc:	0e 94 b4 04 	call	0x968	; 0x968 <uxListRemove>
    15c0:	8f ef       	ldi	r24, 0xFF	; 255
    15c2:	c8 16       	cp	r12, r24
    15c4:	d8 06       	cpc	r13, r24
    15c6:	e8 06       	cpc	r14, r24
    15c8:	f8 06       	cpc	r15, r24
    15ca:	69 f4       	brne	.+26     	; 0x15e6 <prvAddCurrentTaskToDelayedList+0x5c>
    15cc:	cc 23       	and	r28, r28
    15ce:	59 f0       	breq	.+22     	; 0x15e6 <prvAddCurrentTaskToDelayedList+0x5c>
    15d0:	60 91 d2 30 	lds	r22, 0x30D2	; 0x8030d2 <pxCurrentTCB>
    15d4:	70 91 d3 30 	lds	r23, 0x30D3	; 0x8030d3 <pxCurrentTCB+0x1>
    15d8:	6e 5f       	subi	r22, 0xFE	; 254
    15da:	7f 4f       	sbci	r23, 0xFF	; 255
    15dc:	86 e7       	ldi	r24, 0x76	; 118
    15de:	90 e3       	ldi	r25, 0x30	; 48
    15e0:	0e 94 56 04 	call	0x8ac	; 0x8ac <vListInsertEnd>
    15e4:	3f c0       	rjmp	.+126    	; 0x1664 <prvAddCurrentTaskToDelayedList+0xda>
    15e6:	c8 0c       	add	r12, r8
    15e8:	d9 1c       	adc	r13, r9
    15ea:	ea 1c       	adc	r14, r10
    15ec:	fb 1c       	adc	r15, r11
    15ee:	e0 91 d2 30 	lds	r30, 0x30D2	; 0x8030d2 <pxCurrentTCB>
    15f2:	f0 91 d3 30 	lds	r31, 0x30D3	; 0x8030d3 <pxCurrentTCB+0x1>
    15f6:	c2 82       	std	Z+2, r12	; 0x02
    15f8:	d3 82       	std	Z+3, r13	; 0x03
    15fa:	e4 82       	std	Z+4, r14	; 0x04
    15fc:	f5 82       	std	Z+5, r15	; 0x05
    15fe:	c8 14       	cp	r12, r8
    1600:	d9 04       	cpc	r13, r9
    1602:	ea 04       	cpc	r14, r10
    1604:	fb 04       	cpc	r15, r11
    1606:	68 f4       	brcc	.+26     	; 0x1622 <prvAddCurrentTaskToDelayedList+0x98>
    1608:	60 91 d2 30 	lds	r22, 0x30D2	; 0x8030d2 <pxCurrentTCB>
    160c:	70 91 d3 30 	lds	r23, 0x30D3	; 0x8030d3 <pxCurrentTCB+0x1>
    1610:	80 91 8c 30 	lds	r24, 0x308C	; 0x80308c <pxOverflowDelayedTaskList>
    1614:	90 91 8d 30 	lds	r25, 0x308D	; 0x80308d <pxOverflowDelayedTaskList+0x1>
    1618:	6e 5f       	subi	r22, 0xFE	; 254
    161a:	7f 4f       	sbci	r23, 0xFF	; 255
    161c:	0e 94 77 04 	call	0x8ee	; 0x8ee <vListInsert>
    1620:	21 c0       	rjmp	.+66     	; 0x1664 <prvAddCurrentTaskToDelayedList+0xda>
    1622:	60 91 d2 30 	lds	r22, 0x30D2	; 0x8030d2 <pxCurrentTCB>
    1626:	70 91 d3 30 	lds	r23, 0x30D3	; 0x8030d3 <pxCurrentTCB+0x1>
    162a:	80 91 8e 30 	lds	r24, 0x308E	; 0x80308e <pxDelayedTaskList>
    162e:	90 91 8f 30 	lds	r25, 0x308F	; 0x80308f <pxDelayedTaskList+0x1>
    1632:	6e 5f       	subi	r22, 0xFE	; 254
    1634:	7f 4f       	sbci	r23, 0xFF	; 255
    1636:	0e 94 77 04 	call	0x8ee	; 0x8ee <vListInsert>
    163a:	80 91 67 30 	lds	r24, 0x3067	; 0x803067 <xNextTaskUnblockTime>
    163e:	90 91 68 30 	lds	r25, 0x3068	; 0x803068 <xNextTaskUnblockTime+0x1>
    1642:	a0 91 69 30 	lds	r26, 0x3069	; 0x803069 <xNextTaskUnblockTime+0x2>
    1646:	b0 91 6a 30 	lds	r27, 0x306A	; 0x80306a <xNextTaskUnblockTime+0x3>
    164a:	c8 16       	cp	r12, r24
    164c:	d9 06       	cpc	r13, r25
    164e:	ea 06       	cpc	r14, r26
    1650:	fb 06       	cpc	r15, r27
    1652:	40 f4       	brcc	.+16     	; 0x1664 <prvAddCurrentTaskToDelayedList+0xda>
    1654:	c0 92 67 30 	sts	0x3067, r12	; 0x803067 <xNextTaskUnblockTime>
    1658:	d0 92 68 30 	sts	0x3068, r13	; 0x803068 <xNextTaskUnblockTime+0x1>
    165c:	e0 92 69 30 	sts	0x3069, r14	; 0x803069 <xNextTaskUnblockTime+0x2>
    1660:	f0 92 6a 30 	sts	0x306A, r15	; 0x80306a <xNextTaskUnblockTime+0x3>
    1664:	cf 91       	pop	r28
    1666:	ff 90       	pop	r15
    1668:	ef 90       	pop	r14
    166a:	df 90       	pop	r13
    166c:	cf 90       	pop	r12
    166e:	bf 90       	pop	r11
    1670:	af 90       	pop	r10
    1672:	9f 90       	pop	r9
    1674:	8f 90       	pop	r8
    1676:	08 95       	ret

00001678 <prvIdleTask>:
    1678:	80 91 a6 30 	lds	r24, 0x30A6	; 0x8030a6 <pxReadyTasksLists>
    167c:	82 30       	cpi	r24, 0x02	; 2
    167e:	10 f0       	brcs	.+4      	; 0x1684 <prvIdleTask+0xc>
    1680:	0e 94 ac 05 	call	0xb58	; 0xb58 <vPortYield>
    1684:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <vApplicationIdleHook>
    1688:	f7 cf       	rjmp	.-18     	; 0x1678 <prvIdleTask>

0000168a <xTaskCreate>:
    168a:	2f 92       	push	r2
    168c:	3f 92       	push	r3
    168e:	4f 92       	push	r4
    1690:	5f 92       	push	r5
    1692:	6f 92       	push	r6
    1694:	7f 92       	push	r7
    1696:	8f 92       	push	r8
    1698:	9f 92       	push	r9
    169a:	af 92       	push	r10
    169c:	bf 92       	push	r11
    169e:	cf 92       	push	r12
    16a0:	df 92       	push	r13
    16a2:	ef 92       	push	r14
    16a4:	ff 92       	push	r15
    16a6:	0f 93       	push	r16
    16a8:	1f 93       	push	r17
    16aa:	cf 93       	push	r28
    16ac:	df 93       	push	r29
    16ae:	3c 01       	movw	r6, r24
    16b0:	1b 01       	movw	r2, r22
    16b2:	5a 01       	movw	r10, r20
    16b4:	29 01       	movw	r4, r18
    16b6:	ca 01       	movw	r24, r20
    16b8:	0e 94 1a 04 	call	0x834	; 0x834 <pvPortMalloc>
    16bc:	6c 01       	movw	r12, r24
    16be:	89 2b       	or	r24, r25
    16c0:	71 f0       	breq	.+28     	; 0x16de <xTaskCreate+0x54>
    16c2:	8c e2       	ldi	r24, 0x2C	; 44
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	0e 94 1a 04 	call	0x834	; 0x834 <pvPortMalloc>
    16ca:	ec 01       	movw	r28, r24
    16cc:	89 2b       	or	r24, r25
    16ce:	19 f0       	breq	.+6      	; 0x16d6 <xTaskCreate+0x4c>
    16d0:	cb 8e       	std	Y+27, r12	; 0x1b
    16d2:	dc 8e       	std	Y+28, r13	; 0x1c
    16d4:	06 c0       	rjmp	.+12     	; 0x16e2 <xTaskCreate+0x58>
    16d6:	c6 01       	movw	r24, r12
    16d8:	0e 94 40 04 	call	0x880	; 0x880 <vPortFree>
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <xTaskCreate+0x58>
    16de:	c0 e0       	ldi	r28, 0x00	; 0
    16e0:	d0 e0       	ldi	r29, 0x00	; 0
    16e2:	20 97       	sbiw	r28, 0x00	; 0
    16e4:	91 f0       	breq	.+36     	; 0x170a <xTaskCreate+0x80>
    16e6:	95 01       	movw	r18, r10
    16e8:	40 e0       	ldi	r20, 0x00	; 0
    16ea:	50 e0       	ldi	r21, 0x00	; 0
    16ec:	81 2c       	mov	r8, r1
    16ee:	91 2c       	mov	r9, r1
    16f0:	5e 01       	movw	r10, r28
    16f2:	67 01       	movw	r12, r14
    16f4:	e0 2e       	mov	r14, r16
    16f6:	82 01       	movw	r16, r4
    16f8:	b1 01       	movw	r22, r2
    16fa:	c3 01       	movw	r24, r6
    16fc:	0e 94 bb 09 	call	0x1376	; 0x1376 <prvInitialiseNewTask>
    1700:	ce 01       	movw	r24, r28
    1702:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <prvAddNewTaskToReadyList>
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	01 c0       	rjmp	.+2      	; 0x170c <xTaskCreate+0x82>
    170a:	8f ef       	ldi	r24, 0xFF	; 255
    170c:	df 91       	pop	r29
    170e:	cf 91       	pop	r28
    1710:	1f 91       	pop	r17
    1712:	0f 91       	pop	r16
    1714:	ff 90       	pop	r15
    1716:	ef 90       	pop	r14
    1718:	df 90       	pop	r13
    171a:	cf 90       	pop	r12
    171c:	bf 90       	pop	r11
    171e:	af 90       	pop	r10
    1720:	9f 90       	pop	r9
    1722:	8f 90       	pop	r8
    1724:	7f 90       	pop	r7
    1726:	6f 90       	pop	r6
    1728:	5f 90       	pop	r5
    172a:	4f 90       	pop	r4
    172c:	3f 90       	pop	r3
    172e:	2f 90       	pop	r2
    1730:	08 95       	ret

00001732 <vTaskStartScheduler>:
    1732:	ef 92       	push	r14
    1734:	ff 92       	push	r15
    1736:	0f 93       	push	r16
    1738:	0f 2e       	mov	r0, r31
    173a:	f5 e6       	ldi	r31, 0x65	; 101
    173c:	ef 2e       	mov	r14, r31
    173e:	f0 e3       	ldi	r31, 0x30	; 48
    1740:	ff 2e       	mov	r15, r31
    1742:	f0 2d       	mov	r31, r0
    1744:	00 e0       	ldi	r16, 0x00	; 0
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	48 ec       	ldi	r20, 0xC8	; 200
    174c:	50 e0       	ldi	r21, 0x00	; 0
    174e:	64 e0       	ldi	r22, 0x04	; 4
    1750:	70 e2       	ldi	r23, 0x20	; 32
    1752:	8c e3       	ldi	r24, 0x3C	; 60
    1754:	9b e0       	ldi	r25, 0x0B	; 11
    1756:	0e 94 45 0b 	call	0x168a	; 0x168a <xTaskCreate>
    175a:	81 30       	cpi	r24, 0x01	; 1
    175c:	11 f4       	brne	.+4      	; 0x1762 <vTaskStartScheduler+0x30>
    175e:	0e 94 41 10 	call	0x2082	; 0x2082 <xTimerCreateTimerTask>
    1762:	81 30       	cpi	r24, 0x01	; 1
    1764:	e9 f4       	brne	.+58     	; 0x17a0 <vTaskStartScheduler+0x6e>
    1766:	e0 ea       	ldi	r30, 0xA0	; 160
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	82 81       	ldd	r24, Z+2	; 0x02
    176c:	88 7f       	andi	r24, 0xF8	; 248
    176e:	82 83       	std	Z+2, r24	; 0x02
    1770:	8f ef       	ldi	r24, 0xFF	; 255
    1772:	9f ef       	ldi	r25, 0xFF	; 255
    1774:	dc 01       	movw	r26, r24
    1776:	80 93 67 30 	sts	0x3067, r24	; 0x803067 <xNextTaskUnblockTime>
    177a:	90 93 68 30 	sts	0x3068, r25	; 0x803068 <xNextTaskUnblockTime+0x1>
    177e:	a0 93 69 30 	sts	0x3069, r26	; 0x803069 <xNextTaskUnblockTime+0x2>
    1782:	b0 93 6a 30 	sts	0x306A, r27	; 0x80306a <xNextTaskUnblockTime+0x3>
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	80 93 6f 30 	sts	0x306F, r24	; 0x80306f <xSchedulerRunning>
    178c:	10 92 71 30 	sts	0x3071, r1	; 0x803071 <xTickCount>
    1790:	10 92 72 30 	sts	0x3072, r1	; 0x803072 <xTickCount+0x1>
    1794:	10 92 73 30 	sts	0x3073, r1	; 0x803073 <xTickCount+0x2>
    1798:	10 92 74 30 	sts	0x3074, r1	; 0x803074 <xTickCount+0x3>
    179c:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <xPortStartScheduler>
    17a0:	0f 91       	pop	r16
    17a2:	ff 90       	pop	r15
    17a4:	ef 90       	pop	r14
    17a6:	08 95       	ret

000017a8 <vTaskSuspendAll>:
    17a8:	80 91 64 30 	lds	r24, 0x3064	; 0x803064 <uxSchedulerSuspended>
    17ac:	8f 5f       	subi	r24, 0xFF	; 255
    17ae:	80 93 64 30 	sts	0x3064, r24	; 0x803064 <uxSchedulerSuspended>
    17b2:	08 95       	ret

000017b4 <xTaskGetTickCount>:
    17b4:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    17b8:	ff 93       	push	r31
    17ba:	f8 7f       	andi	r31, 0xF8	; 248
    17bc:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    17c0:	60 91 71 30 	lds	r22, 0x3071	; 0x803071 <xTickCount>
    17c4:	70 91 72 30 	lds	r23, 0x3072	; 0x803072 <xTickCount+0x1>
    17c8:	80 91 73 30 	lds	r24, 0x3073	; 0x803073 <xTickCount+0x2>
    17cc:	90 91 74 30 	lds	r25, 0x3074	; 0x803074 <xTickCount+0x3>
    17d0:	ff 91       	pop	r31
    17d2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    17d6:	08 95       	ret

000017d8 <xTaskIncrementTick>:
    17d8:	bf 92       	push	r11
    17da:	cf 92       	push	r12
    17dc:	df 92       	push	r13
    17de:	ef 92       	push	r14
    17e0:	ff 92       	push	r15
    17e2:	0f 93       	push	r16
    17e4:	1f 93       	push	r17
    17e6:	cf 93       	push	r28
    17e8:	df 93       	push	r29
    17ea:	80 91 64 30 	lds	r24, 0x3064	; 0x803064 <uxSchedulerSuspended>
    17ee:	81 11       	cpse	r24, r1
    17f0:	a9 c0       	rjmp	.+338    	; 0x1944 <xTaskIncrementTick+0x16c>
    17f2:	c0 90 71 30 	lds	r12, 0x3071	; 0x803071 <xTickCount>
    17f6:	d0 90 72 30 	lds	r13, 0x3072	; 0x803072 <xTickCount+0x1>
    17fa:	e0 90 73 30 	lds	r14, 0x3073	; 0x803073 <xTickCount+0x2>
    17fe:	f0 90 74 30 	lds	r15, 0x3074	; 0x803074 <xTickCount+0x3>
    1802:	2f ef       	ldi	r18, 0xFF	; 255
    1804:	c2 1a       	sub	r12, r18
    1806:	d2 0a       	sbc	r13, r18
    1808:	e2 0a       	sbc	r14, r18
    180a:	f2 0a       	sbc	r15, r18
    180c:	c0 92 71 30 	sts	0x3071, r12	; 0x803071 <xTickCount>
    1810:	d0 92 72 30 	sts	0x3072, r13	; 0x803072 <xTickCount+0x1>
    1814:	e0 92 73 30 	sts	0x3073, r14	; 0x803073 <xTickCount+0x2>
    1818:	f0 92 74 30 	sts	0x3074, r15	; 0x803074 <xTickCount+0x3>
    181c:	c1 14       	cp	r12, r1
    181e:	d1 04       	cpc	r13, r1
    1820:	e1 04       	cpc	r14, r1
    1822:	f1 04       	cpc	r15, r1
    1824:	b9 f4       	brne	.+46     	; 0x1854 <xTaskIncrementTick+0x7c>
    1826:	80 91 8e 30 	lds	r24, 0x308E	; 0x80308e <pxDelayedTaskList>
    182a:	90 91 8f 30 	lds	r25, 0x308F	; 0x80308f <pxDelayedTaskList+0x1>
    182e:	20 91 8c 30 	lds	r18, 0x308C	; 0x80308c <pxOverflowDelayedTaskList>
    1832:	30 91 8d 30 	lds	r19, 0x308D	; 0x80308d <pxOverflowDelayedTaskList+0x1>
    1836:	20 93 8e 30 	sts	0x308E, r18	; 0x80308e <pxDelayedTaskList>
    183a:	30 93 8f 30 	sts	0x308F, r19	; 0x80308f <pxDelayedTaskList+0x1>
    183e:	80 93 8c 30 	sts	0x308C, r24	; 0x80308c <pxOverflowDelayedTaskList>
    1842:	90 93 8d 30 	sts	0x308D, r25	; 0x80308d <pxOverflowDelayedTaskList+0x1>
    1846:	80 91 6c 30 	lds	r24, 0x306C	; 0x80306c <xNumOfOverflows>
    184a:	8f 5f       	subi	r24, 0xFF	; 255
    184c:	80 93 6c 30 	sts	0x306C, r24	; 0x80306c <xNumOfOverflows>
    1850:	0e 94 91 09 	call	0x1322	; 0x1322 <prvResetNextTaskUnblockTime>
    1854:	80 91 67 30 	lds	r24, 0x3067	; 0x803067 <xNextTaskUnblockTime>
    1858:	90 91 68 30 	lds	r25, 0x3068	; 0x803068 <xNextTaskUnblockTime+0x1>
    185c:	a0 91 69 30 	lds	r26, 0x3069	; 0x803069 <xNextTaskUnblockTime+0x2>
    1860:	b0 91 6a 30 	lds	r27, 0x306A	; 0x80306a <xNextTaskUnblockTime+0x3>
    1864:	c8 16       	cp	r12, r24
    1866:	d9 06       	cpc	r13, r25
    1868:	ea 06       	cpc	r14, r26
    186a:	fb 06       	cpc	r15, r27
    186c:	28 f4       	brcc	.+10     	; 0x1878 <xTaskIncrementTick+0xa0>
    186e:	b1 2c       	mov	r11, r1
    1870:	5a c0       	rjmp	.+180    	; 0x1926 <xTaskIncrementTick+0x14e>
    1872:	bb 24       	eor	r11, r11
    1874:	b3 94       	inc	r11
    1876:	01 c0       	rjmp	.+2      	; 0x187a <xTaskIncrementTick+0xa2>
    1878:	b1 2c       	mov	r11, r1
    187a:	e0 91 8e 30 	lds	r30, 0x308E	; 0x80308e <pxDelayedTaskList>
    187e:	f0 91 8f 30 	lds	r31, 0x308F	; 0x80308f <pxDelayedTaskList+0x1>
    1882:	80 81       	ld	r24, Z
    1884:	81 11       	cpse	r24, r1
    1886:	0c c0       	rjmp	.+24     	; 0x18a0 <xTaskIncrementTick+0xc8>
    1888:	8f ef       	ldi	r24, 0xFF	; 255
    188a:	9f ef       	ldi	r25, 0xFF	; 255
    188c:	dc 01       	movw	r26, r24
    188e:	80 93 67 30 	sts	0x3067, r24	; 0x803067 <xNextTaskUnblockTime>
    1892:	90 93 68 30 	sts	0x3068, r25	; 0x803068 <xNextTaskUnblockTime+0x1>
    1896:	a0 93 69 30 	sts	0x3069, r26	; 0x803069 <xNextTaskUnblockTime+0x2>
    189a:	b0 93 6a 30 	sts	0x306A, r27	; 0x80306a <xNextTaskUnblockTime+0x3>
    189e:	43 c0       	rjmp	.+134    	; 0x1926 <xTaskIncrementTick+0x14e>
    18a0:	e0 91 8e 30 	lds	r30, 0x308E	; 0x80308e <pxDelayedTaskList>
    18a4:	f0 91 8f 30 	lds	r31, 0x308F	; 0x80308f <pxDelayedTaskList+0x1>
    18a8:	07 80       	ldd	r0, Z+7	; 0x07
    18aa:	f0 85       	ldd	r31, Z+8	; 0x08
    18ac:	e0 2d       	mov	r30, r0
    18ae:	c0 85       	ldd	r28, Z+8	; 0x08
    18b0:	d1 85       	ldd	r29, Z+9	; 0x09
    18b2:	8a 81       	ldd	r24, Y+2	; 0x02
    18b4:	9b 81       	ldd	r25, Y+3	; 0x03
    18b6:	ac 81       	ldd	r26, Y+4	; 0x04
    18b8:	bd 81       	ldd	r27, Y+5	; 0x05
    18ba:	c8 16       	cp	r12, r24
    18bc:	d9 06       	cpc	r13, r25
    18be:	ea 06       	cpc	r14, r26
    18c0:	fb 06       	cpc	r15, r27
    18c2:	48 f4       	brcc	.+18     	; 0x18d6 <xTaskIncrementTick+0xfe>
    18c4:	80 93 67 30 	sts	0x3067, r24	; 0x803067 <xNextTaskUnblockTime>
    18c8:	90 93 68 30 	sts	0x3068, r25	; 0x803068 <xNextTaskUnblockTime+0x1>
    18cc:	a0 93 69 30 	sts	0x3069, r26	; 0x803069 <xNextTaskUnblockTime+0x2>
    18d0:	b0 93 6a 30 	sts	0x306A, r27	; 0x80306a <xNextTaskUnblockTime+0x3>
    18d4:	28 c0       	rjmp	.+80     	; 0x1926 <xTaskIncrementTick+0x14e>
    18d6:	8e 01       	movw	r16, r28
    18d8:	0e 5f       	subi	r16, 0xFE	; 254
    18da:	1f 4f       	sbci	r17, 0xFF	; 255
    18dc:	c8 01       	movw	r24, r16
    18de:	0e 94 b4 04 	call	0x968	; 0x968 <uxListRemove>
    18e2:	88 8d       	ldd	r24, Y+24	; 0x18
    18e4:	99 8d       	ldd	r25, Y+25	; 0x19
    18e6:	89 2b       	or	r24, r25
    18e8:	21 f0       	breq	.+8      	; 0x18f2 <xTaskIncrementTick+0x11a>
    18ea:	ce 01       	movw	r24, r28
    18ec:	0e 96       	adiw	r24, 0x0e	; 14
    18ee:	0e 94 b4 04 	call	0x968	; 0x968 <uxListRemove>
    18f2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18f4:	90 91 70 30 	lds	r25, 0x3070	; 0x803070 <uxTopReadyPriority>
    18f8:	98 17       	cp	r25, r24
    18fa:	10 f4       	brcc	.+4      	; 0x1900 <xTaskIncrementTick+0x128>
    18fc:	80 93 70 30 	sts	0x3070, r24	; 0x803070 <uxTopReadyPriority>
    1900:	2b e0       	ldi	r18, 0x0B	; 11
    1902:	82 9f       	mul	r24, r18
    1904:	c0 01       	movw	r24, r0
    1906:	11 24       	eor	r1, r1
    1908:	b8 01       	movw	r22, r16
    190a:	8a 55       	subi	r24, 0x5A	; 90
    190c:	9f 4c       	sbci	r25, 0xCF	; 207
    190e:	0e 94 56 04 	call	0x8ac	; 0x8ac <vListInsertEnd>
    1912:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1914:	e0 91 d2 30 	lds	r30, 0x30D2	; 0x8030d2 <pxCurrentTCB>
    1918:	f0 91 d3 30 	lds	r31, 0x30D3	; 0x8030d3 <pxCurrentTCB+0x1>
    191c:	82 8d       	ldd	r24, Z+26	; 0x1a
    191e:	98 17       	cp	r25, r24
    1920:	08 f0       	brcs	.+2      	; 0x1924 <xTaskIncrementTick+0x14c>
    1922:	a7 cf       	rjmp	.-178    	; 0x1872 <xTaskIncrementTick+0x9a>
    1924:	aa cf       	rjmp	.-172    	; 0x187a <xTaskIncrementTick+0xa2>
    1926:	e0 91 d2 30 	lds	r30, 0x30D2	; 0x8030d2 <pxCurrentTCB>
    192a:	f0 91 d3 30 	lds	r31, 0x30D3	; 0x8030d3 <pxCurrentTCB+0x1>
    192e:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1930:	8b e0       	ldi	r24, 0x0B	; 11
    1932:	e8 9f       	mul	r30, r24
    1934:	f0 01       	movw	r30, r0
    1936:	11 24       	eor	r1, r1
    1938:	ea 55       	subi	r30, 0x5A	; 90
    193a:	ff 4c       	sbci	r31, 0xCF	; 207
    193c:	80 81       	ld	r24, Z
    193e:	82 30       	cpi	r24, 0x02	; 2
    1940:	40 f4       	brcc	.+16     	; 0x1952 <xTaskIncrementTick+0x17a>
    1942:	09 c0       	rjmp	.+18     	; 0x1956 <xTaskIncrementTick+0x17e>
    1944:	80 91 6e 30 	lds	r24, 0x306E	; 0x80306e <uxPendedTicks>
    1948:	8f 5f       	subi	r24, 0xFF	; 255
    194a:	80 93 6e 30 	sts	0x306E, r24	; 0x80306e <uxPendedTicks>
    194e:	b1 2c       	mov	r11, r1
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <xTaskIncrementTick+0x17e>
    1952:	bb 24       	eor	r11, r11
    1954:	b3 94       	inc	r11
    1956:	80 91 6d 30 	lds	r24, 0x306D	; 0x80306d <xYieldPending>
    195a:	88 23       	and	r24, r24
    195c:	11 f0       	breq	.+4      	; 0x1962 <xTaskIncrementTick+0x18a>
    195e:	bb 24       	eor	r11, r11
    1960:	b3 94       	inc	r11
    1962:	8b 2d       	mov	r24, r11
    1964:	df 91       	pop	r29
    1966:	cf 91       	pop	r28
    1968:	1f 91       	pop	r17
    196a:	0f 91       	pop	r16
    196c:	ff 90       	pop	r15
    196e:	ef 90       	pop	r14
    1970:	df 90       	pop	r13
    1972:	cf 90       	pop	r12
    1974:	bf 90       	pop	r11
    1976:	08 95       	ret

00001978 <xTaskResumeAll>:
    1978:	0f 93       	push	r16
    197a:	1f 93       	push	r17
    197c:	cf 93       	push	r28
    197e:	df 93       	push	r29
    1980:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1984:	ff 93       	push	r31
    1986:	f8 7f       	andi	r31, 0xF8	; 248
    1988:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    198c:	80 91 64 30 	lds	r24, 0x3064	; 0x803064 <uxSchedulerSuspended>
    1990:	81 50       	subi	r24, 0x01	; 1
    1992:	80 93 64 30 	sts	0x3064, r24	; 0x803064 <uxSchedulerSuspended>
    1996:	80 91 64 30 	lds	r24, 0x3064	; 0x803064 <uxSchedulerSuspended>
    199a:	81 11       	cpse	r24, r1
    199c:	52 c0       	rjmp	.+164    	; 0x1a42 <xTaskResumeAll+0xca>
    199e:	80 91 75 30 	lds	r24, 0x3075	; 0x803075 <uxCurrentNumberOfTasks>
    19a2:	81 11       	cpse	r24, r1
    19a4:	2d c0       	rjmp	.+90     	; 0x1a00 <xTaskResumeAll+0x88>
    19a6:	50 c0       	rjmp	.+160    	; 0x1a48 <xTaskResumeAll+0xd0>
    19a8:	e0 91 88 30 	lds	r30, 0x3088	; 0x803088 <xPendingReadyList+0x7>
    19ac:	f0 91 89 30 	lds	r31, 0x3089	; 0x803089 <xPendingReadyList+0x8>
    19b0:	c0 85       	ldd	r28, Z+8	; 0x08
    19b2:	d1 85       	ldd	r29, Z+9	; 0x09
    19b4:	ce 01       	movw	r24, r28
    19b6:	0e 96       	adiw	r24, 0x0e	; 14
    19b8:	0e 94 b4 04 	call	0x968	; 0x968 <uxListRemove>
    19bc:	8e 01       	movw	r16, r28
    19be:	0e 5f       	subi	r16, 0xFE	; 254
    19c0:	1f 4f       	sbci	r17, 0xFF	; 255
    19c2:	c8 01       	movw	r24, r16
    19c4:	0e 94 b4 04 	call	0x968	; 0x968 <uxListRemove>
    19c8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    19ca:	90 91 70 30 	lds	r25, 0x3070	; 0x803070 <uxTopReadyPriority>
    19ce:	98 17       	cp	r25, r24
    19d0:	10 f4       	brcc	.+4      	; 0x19d6 <xTaskResumeAll+0x5e>
    19d2:	80 93 70 30 	sts	0x3070, r24	; 0x803070 <uxTopReadyPriority>
    19d6:	2b e0       	ldi	r18, 0x0B	; 11
    19d8:	82 9f       	mul	r24, r18
    19da:	c0 01       	movw	r24, r0
    19dc:	11 24       	eor	r1, r1
    19de:	b8 01       	movw	r22, r16
    19e0:	8a 55       	subi	r24, 0x5A	; 90
    19e2:	9f 4c       	sbci	r25, 0xCF	; 207
    19e4:	0e 94 56 04 	call	0x8ac	; 0x8ac <vListInsertEnd>
    19e8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    19ea:	e0 91 d2 30 	lds	r30, 0x30D2	; 0x8030d2 <pxCurrentTCB>
    19ee:	f0 91 d3 30 	lds	r31, 0x30D3	; 0x8030d3 <pxCurrentTCB+0x1>
    19f2:	82 8d       	ldd	r24, Z+26	; 0x1a
    19f4:	98 17       	cp	r25, r24
    19f6:	30 f0       	brcs	.+12     	; 0x1a04 <xTaskResumeAll+0x8c>
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	80 93 6d 30 	sts	0x306D, r24	; 0x80306d <xYieldPending>
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <xTaskResumeAll+0x8c>
    1a00:	c0 e0       	ldi	r28, 0x00	; 0
    1a02:	d0 e0       	ldi	r29, 0x00	; 0
    1a04:	80 91 81 30 	lds	r24, 0x3081	; 0x803081 <xPendingReadyList>
    1a08:	81 11       	cpse	r24, r1
    1a0a:	ce cf       	rjmp	.-100    	; 0x19a8 <xTaskResumeAll+0x30>
    1a0c:	cd 2b       	or	r28, r29
    1a0e:	11 f0       	breq	.+4      	; 0x1a14 <xTaskResumeAll+0x9c>
    1a10:	0e 94 91 09 	call	0x1322	; 0x1322 <prvResetNextTaskUnblockTime>
    1a14:	c0 91 6e 30 	lds	r28, 0x306E	; 0x80306e <uxPendedTicks>
    1a18:	cc 23       	and	r28, r28
    1a1a:	59 f0       	breq	.+22     	; 0x1a32 <xTaskResumeAll+0xba>
    1a1c:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <xTaskIncrementTick>
    1a20:	88 23       	and	r24, r24
    1a22:	19 f0       	breq	.+6      	; 0x1a2a <xTaskResumeAll+0xb2>
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	80 93 6d 30 	sts	0x306D, r24	; 0x80306d <xYieldPending>
    1a2a:	c1 50       	subi	r28, 0x01	; 1
    1a2c:	b9 f7       	brne	.-18     	; 0x1a1c <xTaskResumeAll+0xa4>
    1a2e:	10 92 6e 30 	sts	0x306E, r1	; 0x80306e <uxPendedTicks>
    1a32:	80 91 6d 30 	lds	r24, 0x306D	; 0x80306d <xYieldPending>
    1a36:	88 23       	and	r24, r24
    1a38:	31 f0       	breq	.+12     	; 0x1a46 <xTaskResumeAll+0xce>
    1a3a:	0e 94 ac 05 	call	0xb58	; 0xb58 <vPortYield>
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	03 c0       	rjmp	.+6      	; 0x1a48 <xTaskResumeAll+0xd0>
    1a42:	80 e0       	ldi	r24, 0x00	; 0
    1a44:	01 c0       	rjmp	.+2      	; 0x1a48 <xTaskResumeAll+0xd0>
    1a46:	80 e0       	ldi	r24, 0x00	; 0
    1a48:	ff 91       	pop	r31
    1a4a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1a4e:	df 91       	pop	r29
    1a50:	cf 91       	pop	r28
    1a52:	1f 91       	pop	r17
    1a54:	0f 91       	pop	r16
    1a56:	08 95       	ret

00001a58 <vTaskDelayUntil>:
    1a58:	cf 92       	push	r12
    1a5a:	df 92       	push	r13
    1a5c:	ef 92       	push	r14
    1a5e:	ff 92       	push	r15
    1a60:	0f 93       	push	r16
    1a62:	1f 93       	push	r17
    1a64:	cf 93       	push	r28
    1a66:	df 93       	push	r29
    1a68:	ec 01       	movw	r28, r24
    1a6a:	6a 01       	movw	r12, r20
    1a6c:	7b 01       	movw	r14, r22
    1a6e:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <vTaskSuspendAll>
    1a72:	00 91 71 30 	lds	r16, 0x3071	; 0x803071 <xTickCount>
    1a76:	10 91 72 30 	lds	r17, 0x3072	; 0x803072 <xTickCount+0x1>
    1a7a:	20 91 73 30 	lds	r18, 0x3073	; 0x803073 <xTickCount+0x2>
    1a7e:	30 91 74 30 	lds	r19, 0x3074	; 0x803074 <xTickCount+0x3>
    1a82:	88 81       	ld	r24, Y
    1a84:	99 81       	ldd	r25, Y+1	; 0x01
    1a86:	aa 81       	ldd	r26, Y+2	; 0x02
    1a88:	bb 81       	ldd	r27, Y+3	; 0x03
    1a8a:	ac 01       	movw	r20, r24
    1a8c:	bd 01       	movw	r22, r26
    1a8e:	4c 0d       	add	r20, r12
    1a90:	5d 1d       	adc	r21, r13
    1a92:	6e 1d       	adc	r22, r14
    1a94:	7f 1d       	adc	r23, r15
    1a96:	08 17       	cp	r16, r24
    1a98:	19 07       	cpc	r17, r25
    1a9a:	2a 07       	cpc	r18, r26
    1a9c:	3b 07       	cpc	r19, r27
    1a9e:	60 f4       	brcc	.+24     	; 0x1ab8 <vTaskDelayUntil+0x60>
    1aa0:	48 17       	cp	r20, r24
    1aa2:	59 07       	cpc	r21, r25
    1aa4:	6a 07       	cpc	r22, r26
    1aa6:	7b 07       	cpc	r23, r27
    1aa8:	98 f4       	brcc	.+38     	; 0x1ad0 <vTaskDelayUntil+0x78>
    1aaa:	04 17       	cp	r16, r20
    1aac:	15 07       	cpc	r17, r21
    1aae:	26 07       	cpc	r18, r22
    1ab0:	37 07       	cpc	r19, r23
    1ab2:	80 f0       	brcs	.+32     	; 0x1ad4 <vTaskDelayUntil+0x7c>
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
    1ab6:	13 c0       	rjmp	.+38     	; 0x1ade <vTaskDelayUntil+0x86>
    1ab8:	48 17       	cp	r20, r24
    1aba:	59 07       	cpc	r21, r25
    1abc:	6a 07       	cpc	r22, r26
    1abe:	7b 07       	cpc	r23, r27
    1ac0:	58 f0       	brcs	.+22     	; 0x1ad8 <vTaskDelayUntil+0x80>
    1ac2:	04 17       	cp	r16, r20
    1ac4:	15 07       	cpc	r17, r21
    1ac6:	26 07       	cpc	r18, r22
    1ac8:	37 07       	cpc	r19, r23
    1aca:	40 f0       	brcs	.+16     	; 0x1adc <vTaskDelayUntil+0x84>
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	07 c0       	rjmp	.+14     	; 0x1ade <vTaskDelayUntil+0x86>
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	05 c0       	rjmp	.+10     	; 0x1ade <vTaskDelayUntil+0x86>
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	03 c0       	rjmp	.+6      	; 0x1ade <vTaskDelayUntil+0x86>
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	01 c0       	rjmp	.+2      	; 0x1ade <vTaskDelayUntil+0x86>
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	48 83       	st	Y, r20
    1ae0:	59 83       	std	Y+1, r21	; 0x01
    1ae2:	6a 83       	std	Y+2, r22	; 0x02
    1ae4:	7b 83       	std	Y+3, r23	; 0x03
    1ae6:	88 23       	and	r24, r24
    1ae8:	49 f0       	breq	.+18     	; 0x1afc <vTaskDelayUntil+0xa4>
    1aea:	cb 01       	movw	r24, r22
    1aec:	ba 01       	movw	r22, r20
    1aee:	60 1b       	sub	r22, r16
    1af0:	71 0b       	sbc	r23, r17
    1af2:	82 0b       	sbc	r24, r18
    1af4:	93 0b       	sbc	r25, r19
    1af6:	40 e0       	ldi	r20, 0x00	; 0
    1af8:	0e 94 c5 0a 	call	0x158a	; 0x158a <prvAddCurrentTaskToDelayedList>
    1afc:	0e 94 bc 0c 	call	0x1978	; 0x1978 <xTaskResumeAll>
    1b00:	81 11       	cpse	r24, r1
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <vTaskDelayUntil+0xb0>
    1b04:	0e 94 ac 05 	call	0xb58	; 0xb58 <vPortYield>
    1b08:	df 91       	pop	r29
    1b0a:	cf 91       	pop	r28
    1b0c:	1f 91       	pop	r17
    1b0e:	0f 91       	pop	r16
    1b10:	ff 90       	pop	r15
    1b12:	ef 90       	pop	r14
    1b14:	df 90       	pop	r13
    1b16:	cf 90       	pop	r12
    1b18:	08 95       	ret

00001b1a <vTaskDelay>:
    1b1a:	cf 92       	push	r12
    1b1c:	df 92       	push	r13
    1b1e:	ef 92       	push	r14
    1b20:	ff 92       	push	r15
    1b22:	6b 01       	movw	r12, r22
    1b24:	7c 01       	movw	r14, r24
    1b26:	67 2b       	or	r22, r23
    1b28:	68 2b       	or	r22, r24
    1b2a:	69 2b       	or	r22, r25
    1b2c:	51 f0       	breq	.+20     	; 0x1b42 <vTaskDelay+0x28>
    1b2e:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <vTaskSuspendAll>
    1b32:	40 e0       	ldi	r20, 0x00	; 0
    1b34:	c7 01       	movw	r24, r14
    1b36:	b6 01       	movw	r22, r12
    1b38:	0e 94 c5 0a 	call	0x158a	; 0x158a <prvAddCurrentTaskToDelayedList>
    1b3c:	0e 94 bc 0c 	call	0x1978	; 0x1978 <xTaskResumeAll>
    1b40:	01 c0       	rjmp	.+2      	; 0x1b44 <vTaskDelay+0x2a>
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	81 11       	cpse	r24, r1
    1b46:	02 c0       	rjmp	.+4      	; 0x1b4c <vTaskDelay+0x32>
    1b48:	0e 94 ac 05 	call	0xb58	; 0xb58 <vPortYield>
    1b4c:	ff 90       	pop	r15
    1b4e:	ef 90       	pop	r14
    1b50:	df 90       	pop	r13
    1b52:	cf 90       	pop	r12
    1b54:	08 95       	ret

00001b56 <vTaskSwitchContext>:
    1b56:	80 91 64 30 	lds	r24, 0x3064	; 0x803064 <uxSchedulerSuspended>
    1b5a:	88 23       	and	r24, r24
    1b5c:	21 f0       	breq	.+8      	; 0x1b66 <vTaskSwitchContext+0x10>
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	80 93 6d 30 	sts	0x306D, r24	; 0x80306d <xYieldPending>
    1b64:	08 95       	ret
    1b66:	10 92 6d 30 	sts	0x306D, r1	; 0x80306d <xYieldPending>
    1b6a:	e0 91 d2 30 	lds	r30, 0x30D2	; 0x8030d2 <pxCurrentTCB>
    1b6e:	f0 91 d3 30 	lds	r31, 0x30D3	; 0x8030d3 <pxCurrentTCB+0x1>
    1b72:	03 8c       	ldd	r0, Z+27	; 0x1b
    1b74:	f4 8d       	ldd	r31, Z+28	; 0x1c
    1b76:	e0 2d       	mov	r30, r0
    1b78:	80 81       	ld	r24, Z
    1b7a:	91 81       	ldd	r25, Z+1	; 0x01
    1b7c:	a2 81       	ldd	r26, Z+2	; 0x02
    1b7e:	b3 81       	ldd	r27, Z+3	; 0x03
    1b80:	85 3a       	cpi	r24, 0xA5	; 165
    1b82:	95 4a       	sbci	r25, 0xA5	; 165
    1b84:	a5 4a       	sbci	r26, 0xA5	; 165
    1b86:	b5 4a       	sbci	r27, 0xA5	; 165
    1b88:	d9 f4       	brne	.+54     	; 0x1bc0 <vTaskSwitchContext+0x6a>
    1b8a:	84 81       	ldd	r24, Z+4	; 0x04
    1b8c:	95 81       	ldd	r25, Z+5	; 0x05
    1b8e:	a6 81       	ldd	r26, Z+6	; 0x06
    1b90:	b7 81       	ldd	r27, Z+7	; 0x07
    1b92:	85 3a       	cpi	r24, 0xA5	; 165
    1b94:	95 4a       	sbci	r25, 0xA5	; 165
    1b96:	a5 4a       	sbci	r26, 0xA5	; 165
    1b98:	b5 4a       	sbci	r27, 0xA5	; 165
    1b9a:	91 f4       	brne	.+36     	; 0x1bc0 <vTaskSwitchContext+0x6a>
    1b9c:	80 85       	ldd	r24, Z+8	; 0x08
    1b9e:	91 85       	ldd	r25, Z+9	; 0x09
    1ba0:	a2 85       	ldd	r26, Z+10	; 0x0a
    1ba2:	b3 85       	ldd	r27, Z+11	; 0x0b
    1ba4:	85 3a       	cpi	r24, 0xA5	; 165
    1ba6:	95 4a       	sbci	r25, 0xA5	; 165
    1ba8:	a5 4a       	sbci	r26, 0xA5	; 165
    1baa:	b5 4a       	sbci	r27, 0xA5	; 165
    1bac:	49 f4       	brne	.+18     	; 0x1bc0 <vTaskSwitchContext+0x6a>
    1bae:	84 85       	ldd	r24, Z+12	; 0x0c
    1bb0:	95 85       	ldd	r25, Z+13	; 0x0d
    1bb2:	a6 85       	ldd	r26, Z+14	; 0x0e
    1bb4:	b7 85       	ldd	r27, Z+15	; 0x0f
    1bb6:	85 3a       	cpi	r24, 0xA5	; 165
    1bb8:	95 4a       	sbci	r25, 0xA5	; 165
    1bba:	a5 4a       	sbci	r26, 0xA5	; 165
    1bbc:	b5 4a       	sbci	r27, 0xA5	; 165
    1bbe:	61 f0       	breq	.+24     	; 0x1bd8 <vTaskSwitchContext+0x82>
    1bc0:	60 91 d2 30 	lds	r22, 0x30D2	; 0x8030d2 <pxCurrentTCB>
    1bc4:	70 91 d3 30 	lds	r23, 0x30D3	; 0x8030d3 <pxCurrentTCB+0x1>
    1bc8:	63 5e       	subi	r22, 0xE3	; 227
    1bca:	7f 4f       	sbci	r23, 0xFF	; 255
    1bcc:	80 91 d2 30 	lds	r24, 0x30D2	; 0x8030d2 <pxCurrentTCB>
    1bd0:	90 91 d3 30 	lds	r25, 0x30D3	; 0x8030d3 <pxCurrentTCB+0x1>
    1bd4:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <vApplicationStackOverflowHook>
    1bd8:	80 91 70 30 	lds	r24, 0x3070	; 0x803070 <uxTopReadyPriority>
    1bdc:	01 c0       	rjmp	.+2      	; 0x1be0 <vTaskSwitchContext+0x8a>
    1bde:	81 50       	subi	r24, 0x01	; 1
    1be0:	28 2f       	mov	r18, r24
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	9b e0       	ldi	r25, 0x0B	; 11
    1be6:	92 9f       	mul	r25, r18
    1be8:	f0 01       	movw	r30, r0
    1bea:	93 9f       	mul	r25, r19
    1bec:	f0 0d       	add	r31, r0
    1bee:	11 24       	eor	r1, r1
    1bf0:	ea 55       	subi	r30, 0x5A	; 90
    1bf2:	ff 4c       	sbci	r31, 0xCF	; 207
    1bf4:	90 81       	ld	r25, Z
    1bf6:	99 23       	and	r25, r25
    1bf8:	91 f3       	breq	.-28     	; 0x1bde <vTaskSwitchContext+0x88>
    1bfa:	9b e0       	ldi	r25, 0x0B	; 11
    1bfc:	92 9f       	mul	r25, r18
    1bfe:	a0 01       	movw	r20, r0
    1c00:	93 9f       	mul	r25, r19
    1c02:	50 0d       	add	r21, r0
    1c04:	11 24       	eor	r1, r1
    1c06:	df 01       	movw	r26, r30
    1c08:	01 80       	ldd	r0, Z+1	; 0x01
    1c0a:	f2 81       	ldd	r31, Z+2	; 0x02
    1c0c:	e0 2d       	mov	r30, r0
    1c0e:	04 80       	ldd	r0, Z+4	; 0x04
    1c10:	f5 81       	ldd	r31, Z+5	; 0x05
    1c12:	e0 2d       	mov	r30, r0
    1c14:	11 96       	adiw	r26, 0x01	; 1
    1c16:	ed 93       	st	X+, r30
    1c18:	fc 93       	st	X, r31
    1c1a:	12 97       	sbiw	r26, 0x02	; 2
    1c1c:	47 55       	subi	r20, 0x57	; 87
    1c1e:	5f 4c       	sbci	r21, 0xCF	; 207
    1c20:	e4 17       	cp	r30, r20
    1c22:	f5 07       	cpc	r31, r21
    1c24:	29 f4       	brne	.+10     	; 0x1c30 <vTaskSwitchContext+0xda>
    1c26:	44 81       	ldd	r20, Z+4	; 0x04
    1c28:	55 81       	ldd	r21, Z+5	; 0x05
    1c2a:	fd 01       	movw	r30, r26
    1c2c:	41 83       	std	Z+1, r20	; 0x01
    1c2e:	52 83       	std	Z+2, r21	; 0x02
    1c30:	9b e0       	ldi	r25, 0x0B	; 11
    1c32:	92 9f       	mul	r25, r18
    1c34:	f0 01       	movw	r30, r0
    1c36:	93 9f       	mul	r25, r19
    1c38:	f0 0d       	add	r31, r0
    1c3a:	11 24       	eor	r1, r1
    1c3c:	ea 55       	subi	r30, 0x5A	; 90
    1c3e:	ff 4c       	sbci	r31, 0xCF	; 207
    1c40:	01 80       	ldd	r0, Z+1	; 0x01
    1c42:	f2 81       	ldd	r31, Z+2	; 0x02
    1c44:	e0 2d       	mov	r30, r0
    1c46:	20 85       	ldd	r18, Z+8	; 0x08
    1c48:	31 85       	ldd	r19, Z+9	; 0x09
    1c4a:	20 93 d2 30 	sts	0x30D2, r18	; 0x8030d2 <pxCurrentTCB>
    1c4e:	30 93 d3 30 	sts	0x30D3, r19	; 0x8030d3 <pxCurrentTCB+0x1>
    1c52:	80 93 70 30 	sts	0x3070, r24	; 0x803070 <uxTopReadyPriority>
    1c56:	08 95       	ret

00001c58 <vTaskPlaceOnEventList>:
    1c58:	cf 92       	push	r12
    1c5a:	df 92       	push	r13
    1c5c:	ef 92       	push	r14
    1c5e:	ff 92       	push	r15
    1c60:	6a 01       	movw	r12, r20
    1c62:	7b 01       	movw	r14, r22
    1c64:	60 91 d2 30 	lds	r22, 0x30D2	; 0x8030d2 <pxCurrentTCB>
    1c68:	70 91 d3 30 	lds	r23, 0x30D3	; 0x8030d3 <pxCurrentTCB+0x1>
    1c6c:	62 5f       	subi	r22, 0xF2	; 242
    1c6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c70:	0e 94 77 04 	call	0x8ee	; 0x8ee <vListInsert>
    1c74:	41 e0       	ldi	r20, 0x01	; 1
    1c76:	c7 01       	movw	r24, r14
    1c78:	b6 01       	movw	r22, r12
    1c7a:	0e 94 c5 0a 	call	0x158a	; 0x158a <prvAddCurrentTaskToDelayedList>
    1c7e:	ff 90       	pop	r15
    1c80:	ef 90       	pop	r14
    1c82:	df 90       	pop	r13
    1c84:	cf 90       	pop	r12
    1c86:	08 95       	ret

00001c88 <vTaskPlaceOnUnorderedEventList>:
    1c88:	cf 92       	push	r12
    1c8a:	df 92       	push	r13
    1c8c:	ef 92       	push	r14
    1c8e:	ff 92       	push	r15
    1c90:	0f 93       	push	r16
    1c92:	1f 93       	push	r17
    1c94:	68 01       	movw	r12, r16
    1c96:	79 01       	movw	r14, r18
    1c98:	e0 91 d2 30 	lds	r30, 0x30D2	; 0x8030d2 <pxCurrentTCB>
    1c9c:	f0 91 d3 30 	lds	r31, 0x30D3	; 0x8030d3 <pxCurrentTCB+0x1>
    1ca0:	70 68       	ori	r23, 0x80	; 128
    1ca2:	46 87       	std	Z+14, r20	; 0x0e
    1ca4:	57 87       	std	Z+15, r21	; 0x0f
    1ca6:	60 8b       	std	Z+16, r22	; 0x10
    1ca8:	71 8b       	std	Z+17, r23	; 0x11
    1caa:	60 91 d2 30 	lds	r22, 0x30D2	; 0x8030d2 <pxCurrentTCB>
    1cae:	70 91 d3 30 	lds	r23, 0x30D3	; 0x8030d3 <pxCurrentTCB+0x1>
    1cb2:	62 5f       	subi	r22, 0xF2	; 242
    1cb4:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb6:	0e 94 56 04 	call	0x8ac	; 0x8ac <vListInsertEnd>
    1cba:	41 e0       	ldi	r20, 0x01	; 1
    1cbc:	c7 01       	movw	r24, r14
    1cbe:	b6 01       	movw	r22, r12
    1cc0:	0e 94 c5 0a 	call	0x158a	; 0x158a <prvAddCurrentTaskToDelayedList>
    1cc4:	1f 91       	pop	r17
    1cc6:	0f 91       	pop	r16
    1cc8:	ff 90       	pop	r15
    1cca:	ef 90       	pop	r14
    1ccc:	df 90       	pop	r13
    1cce:	cf 90       	pop	r12
    1cd0:	08 95       	ret

00001cd2 <vTaskPlaceOnEventListRestricted>:
    1cd2:	cf 92       	push	r12
    1cd4:	df 92       	push	r13
    1cd6:	ef 92       	push	r14
    1cd8:	ff 92       	push	r15
    1cda:	cf 93       	push	r28
    1cdc:	6a 01       	movw	r12, r20
    1cde:	7b 01       	movw	r14, r22
    1ce0:	c2 2f       	mov	r28, r18
    1ce2:	60 91 d2 30 	lds	r22, 0x30D2	; 0x8030d2 <pxCurrentTCB>
    1ce6:	70 91 d3 30 	lds	r23, 0x30D3	; 0x8030d3 <pxCurrentTCB+0x1>
    1cea:	62 5f       	subi	r22, 0xF2	; 242
    1cec:	7f 4f       	sbci	r23, 0xFF	; 255
    1cee:	0e 94 56 04 	call	0x8ac	; 0x8ac <vListInsertEnd>
    1cf2:	cc 23       	and	r28, r28
    1cf4:	21 f0       	breq	.+8      	; 0x1cfe <vTaskPlaceOnEventListRestricted+0x2c>
    1cf6:	cc 24       	eor	r12, r12
    1cf8:	ca 94       	dec	r12
    1cfa:	dc 2c       	mov	r13, r12
    1cfc:	76 01       	movw	r14, r12
    1cfe:	4c 2f       	mov	r20, r28
    1d00:	c7 01       	movw	r24, r14
    1d02:	b6 01       	movw	r22, r12
    1d04:	0e 94 c5 0a 	call	0x158a	; 0x158a <prvAddCurrentTaskToDelayedList>
    1d08:	cf 91       	pop	r28
    1d0a:	ff 90       	pop	r15
    1d0c:	ef 90       	pop	r14
    1d0e:	df 90       	pop	r13
    1d10:	cf 90       	pop	r12
    1d12:	08 95       	ret

00001d14 <xTaskRemoveFromEventList>:
    1d14:	0f 93       	push	r16
    1d16:	1f 93       	push	r17
    1d18:	cf 93       	push	r28
    1d1a:	df 93       	push	r29
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	17 96       	adiw	r26, 0x07	; 7
    1d20:	ed 91       	ld	r30, X+
    1d22:	fc 91       	ld	r31, X
    1d24:	18 97       	sbiw	r26, 0x08	; 8
    1d26:	c0 85       	ldd	r28, Z+8	; 0x08
    1d28:	d1 85       	ldd	r29, Z+9	; 0x09
    1d2a:	8e 01       	movw	r16, r28
    1d2c:	02 5f       	subi	r16, 0xF2	; 242
    1d2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d30:	c8 01       	movw	r24, r16
    1d32:	0e 94 b4 04 	call	0x968	; 0x968 <uxListRemove>
    1d36:	80 91 64 30 	lds	r24, 0x3064	; 0x803064 <uxSchedulerSuspended>
    1d3a:	81 11       	cpse	r24, r1
    1d3c:	16 c0       	rjmp	.+44     	; 0x1d6a <xTaskRemoveFromEventList+0x56>
    1d3e:	0c 50       	subi	r16, 0x0C	; 12
    1d40:	11 09       	sbc	r17, r1
    1d42:	c8 01       	movw	r24, r16
    1d44:	0e 94 b4 04 	call	0x968	; 0x968 <uxListRemove>
    1d48:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d4a:	90 91 70 30 	lds	r25, 0x3070	; 0x803070 <uxTopReadyPriority>
    1d4e:	98 17       	cp	r25, r24
    1d50:	10 f4       	brcc	.+4      	; 0x1d56 <xTaskRemoveFromEventList+0x42>
    1d52:	80 93 70 30 	sts	0x3070, r24	; 0x803070 <uxTopReadyPriority>
    1d56:	bb e0       	ldi	r27, 0x0B	; 11
    1d58:	8b 9f       	mul	r24, r27
    1d5a:	c0 01       	movw	r24, r0
    1d5c:	11 24       	eor	r1, r1
    1d5e:	b8 01       	movw	r22, r16
    1d60:	8a 55       	subi	r24, 0x5A	; 90
    1d62:	9f 4c       	sbci	r25, 0xCF	; 207
    1d64:	0e 94 56 04 	call	0x8ac	; 0x8ac <vListInsertEnd>
    1d68:	05 c0       	rjmp	.+10     	; 0x1d74 <xTaskRemoveFromEventList+0x60>
    1d6a:	b8 01       	movw	r22, r16
    1d6c:	81 e8       	ldi	r24, 0x81	; 129
    1d6e:	90 e3       	ldi	r25, 0x30	; 48
    1d70:	0e 94 56 04 	call	0x8ac	; 0x8ac <vListInsertEnd>
    1d74:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1d76:	e0 91 d2 30 	lds	r30, 0x30D2	; 0x8030d2 <pxCurrentTCB>
    1d7a:	f0 91 d3 30 	lds	r31, 0x30D3	; 0x8030d3 <pxCurrentTCB+0x1>
    1d7e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d80:	89 17       	cp	r24, r25
    1d82:	20 f4       	brcc	.+8      	; 0x1d8c <xTaskRemoveFromEventList+0x78>
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	80 93 6d 30 	sts	0x306D, r24	; 0x80306d <xYieldPending>
    1d8a:	01 c0       	rjmp	.+2      	; 0x1d8e <xTaskRemoveFromEventList+0x7a>
    1d8c:	80 e0       	ldi	r24, 0x00	; 0
    1d8e:	df 91       	pop	r29
    1d90:	cf 91       	pop	r28
    1d92:	1f 91       	pop	r17
    1d94:	0f 91       	pop	r16
    1d96:	08 95       	ret

00001d98 <vTaskRemoveFromUnorderedEventList>:
    1d98:	0f 93       	push	r16
    1d9a:	1f 93       	push	r17
    1d9c:	cf 93       	push	r28
    1d9e:	df 93       	push	r29
    1da0:	70 68       	ori	r23, 0x80	; 128
    1da2:	fc 01       	movw	r30, r24
    1da4:	40 83       	st	Z, r20
    1da6:	51 83       	std	Z+1, r21	; 0x01
    1da8:	62 83       	std	Z+2, r22	; 0x02
    1daa:	73 83       	std	Z+3, r23	; 0x03
    1dac:	c0 85       	ldd	r28, Z+8	; 0x08
    1dae:	d1 85       	ldd	r29, Z+9	; 0x09
    1db0:	0e 94 b4 04 	call	0x968	; 0x968 <uxListRemove>
    1db4:	8e 01       	movw	r16, r28
    1db6:	0e 5f       	subi	r16, 0xFE	; 254
    1db8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dba:	c8 01       	movw	r24, r16
    1dbc:	0e 94 b4 04 	call	0x968	; 0x968 <uxListRemove>
    1dc0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1dc2:	90 91 70 30 	lds	r25, 0x3070	; 0x803070 <uxTopReadyPriority>
    1dc6:	98 17       	cp	r25, r24
    1dc8:	10 f4       	brcc	.+4      	; 0x1dce <vTaskRemoveFromUnorderedEventList+0x36>
    1dca:	80 93 70 30 	sts	0x3070, r24	; 0x803070 <uxTopReadyPriority>
    1dce:	fb e0       	ldi	r31, 0x0B	; 11
    1dd0:	8f 9f       	mul	r24, r31
    1dd2:	c0 01       	movw	r24, r0
    1dd4:	11 24       	eor	r1, r1
    1dd6:	b8 01       	movw	r22, r16
    1dd8:	8a 55       	subi	r24, 0x5A	; 90
    1dda:	9f 4c       	sbci	r25, 0xCF	; 207
    1ddc:	0e 94 56 04 	call	0x8ac	; 0x8ac <vListInsertEnd>
    1de0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1de2:	e0 91 d2 30 	lds	r30, 0x30D2	; 0x8030d2 <pxCurrentTCB>
    1de6:	f0 91 d3 30 	lds	r31, 0x30D3	; 0x8030d3 <pxCurrentTCB+0x1>
    1dea:	82 8d       	ldd	r24, Z+26	; 0x1a
    1dec:	89 17       	cp	r24, r25
    1dee:	18 f4       	brcc	.+6      	; 0x1df6 <vTaskRemoveFromUnorderedEventList+0x5e>
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	80 93 6d 30 	sts	0x306D, r24	; 0x80306d <xYieldPending>
    1df6:	df 91       	pop	r29
    1df8:	cf 91       	pop	r28
    1dfa:	1f 91       	pop	r17
    1dfc:	0f 91       	pop	r16
    1dfe:	08 95       	ret

00001e00 <vTaskInternalSetTimeOutState>:
    1e00:	20 91 6c 30 	lds	r18, 0x306C	; 0x80306c <xNumOfOverflows>
    1e04:	fc 01       	movw	r30, r24
    1e06:	20 83       	st	Z, r18
    1e08:	40 91 71 30 	lds	r20, 0x3071	; 0x803071 <xTickCount>
    1e0c:	50 91 72 30 	lds	r21, 0x3072	; 0x803072 <xTickCount+0x1>
    1e10:	60 91 73 30 	lds	r22, 0x3073	; 0x803073 <xTickCount+0x2>
    1e14:	70 91 74 30 	lds	r23, 0x3074	; 0x803074 <xTickCount+0x3>
    1e18:	41 83       	std	Z+1, r20	; 0x01
    1e1a:	52 83       	std	Z+2, r21	; 0x02
    1e1c:	63 83       	std	Z+3, r22	; 0x03
    1e1e:	74 83       	std	Z+4, r23	; 0x04
    1e20:	08 95       	ret

00001e22 <xTaskCheckForTimeOut>:
    1e22:	8f 92       	push	r8
    1e24:	9f 92       	push	r9
    1e26:	af 92       	push	r10
    1e28:	bf 92       	push	r11
    1e2a:	cf 92       	push	r12
    1e2c:	df 92       	push	r13
    1e2e:	ef 92       	push	r14
    1e30:	ff 92       	push	r15
    1e32:	0f 93       	push	r16
    1e34:	1f 93       	push	r17
    1e36:	cf 93       	push	r28
    1e38:	df 93       	push	r29
    1e3a:	db 01       	movw	r26, r22
    1e3c:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1e40:	ff 93       	push	r31
    1e42:	f8 7f       	andi	r31, 0xF8	; 248
    1e44:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1e48:	c0 90 71 30 	lds	r12, 0x3071	; 0x803071 <xTickCount>
    1e4c:	d0 90 72 30 	lds	r13, 0x3072	; 0x803072 <xTickCount+0x1>
    1e50:	e0 90 73 30 	lds	r14, 0x3073	; 0x803073 <xTickCount+0x2>
    1e54:	f0 90 74 30 	lds	r15, 0x3074	; 0x803074 <xTickCount+0x3>
    1e58:	ec 01       	movw	r28, r24
    1e5a:	09 81       	ldd	r16, Y+1	; 0x01
    1e5c:	1a 81       	ldd	r17, Y+2	; 0x02
    1e5e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e60:	3c 81       	ldd	r19, Y+4	; 0x04
    1e62:	46 01       	movw	r8, r12
    1e64:	57 01       	movw	r10, r14
    1e66:	80 1a       	sub	r8, r16
    1e68:	91 0a       	sbc	r9, r17
    1e6a:	a2 0a       	sbc	r10, r18
    1e6c:	b3 0a       	sbc	r11, r19
    1e6e:	4d 91       	ld	r20, X+
    1e70:	5d 91       	ld	r21, X+
    1e72:	6d 91       	ld	r22, X+
    1e74:	7c 91       	ld	r23, X
    1e76:	13 97       	sbiw	r26, 0x03	; 3
    1e78:	4f 3f       	cpi	r20, 0xFF	; 255
    1e7a:	df ef       	ldi	r29, 0xFF	; 255
    1e7c:	5d 07       	cpc	r21, r29
    1e7e:	6d 07       	cpc	r22, r29
    1e80:	7d 07       	cpc	r23, r29
    1e82:	21 f1       	breq	.+72     	; 0x1ecc <xTaskCheckForTimeOut+0xaa>
    1e84:	ec 01       	movw	r28, r24
    1e86:	f8 81       	ld	r31, Y
    1e88:	e0 91 6c 30 	lds	r30, 0x306C	; 0x80306c <xNumOfOverflows>
    1e8c:	fe 17       	cp	r31, r30
    1e8e:	29 f0       	breq	.+10     	; 0x1e9a <xTaskCheckForTimeOut+0x78>
    1e90:	c0 16       	cp	r12, r16
    1e92:	d1 06       	cpc	r13, r17
    1e94:	e2 06       	cpc	r14, r18
    1e96:	f3 06       	cpc	r15, r19
    1e98:	d8 f4       	brcc	.+54     	; 0x1ed0 <xTaskCheckForTimeOut+0xae>
    1e9a:	84 16       	cp	r8, r20
    1e9c:	95 06       	cpc	r9, r21
    1e9e:	a6 06       	cpc	r10, r22
    1ea0:	b7 06       	cpc	r11, r23
    1ea2:	68 f4       	brcc	.+26     	; 0x1ebe <xTaskCheckForTimeOut+0x9c>
    1ea4:	48 19       	sub	r20, r8
    1ea6:	59 09       	sbc	r21, r9
    1ea8:	6a 09       	sbc	r22, r10
    1eaa:	7b 09       	sbc	r23, r11
    1eac:	4d 93       	st	X+, r20
    1eae:	5d 93       	st	X+, r21
    1eb0:	6d 93       	st	X+, r22
    1eb2:	7c 93       	st	X, r23
    1eb4:	13 97       	sbiw	r26, 0x03	; 3
    1eb6:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <vTaskInternalSetTimeOutState>
    1eba:	80 e0       	ldi	r24, 0x00	; 0
    1ebc:	0a c0       	rjmp	.+20     	; 0x1ed2 <xTaskCheckForTimeOut+0xb0>
    1ebe:	1d 92       	st	X+, r1
    1ec0:	1d 92       	st	X+, r1
    1ec2:	1d 92       	st	X+, r1
    1ec4:	1c 92       	st	X, r1
    1ec6:	13 97       	sbiw	r26, 0x03	; 3
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	03 c0       	rjmp	.+6      	; 0x1ed2 <xTaskCheckForTimeOut+0xb0>
    1ecc:	80 e0       	ldi	r24, 0x00	; 0
    1ece:	01 c0       	rjmp	.+2      	; 0x1ed2 <xTaskCheckForTimeOut+0xb0>
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	ff 91       	pop	r31
    1ed4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1ed8:	df 91       	pop	r29
    1eda:	cf 91       	pop	r28
    1edc:	1f 91       	pop	r17
    1ede:	0f 91       	pop	r16
    1ee0:	ff 90       	pop	r15
    1ee2:	ef 90       	pop	r14
    1ee4:	df 90       	pop	r13
    1ee6:	cf 90       	pop	r12
    1ee8:	bf 90       	pop	r11
    1eea:	af 90       	pop	r10
    1eec:	9f 90       	pop	r9
    1eee:	8f 90       	pop	r8
    1ef0:	08 95       	ret

00001ef2 <vTaskMissedYield>:
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	80 93 6d 30 	sts	0x306D, r24	; 0x80306d <xYieldPending>
    1ef8:	08 95       	ret

00001efa <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    1efa:	80 91 6f 30 	lds	r24, 0x306F	; 0x80306f <xSchedulerRunning>
    1efe:	88 23       	and	r24, r24
    1f00:	31 f0       	breq	.+12     	; 0x1f0e <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1f02:	80 91 64 30 	lds	r24, 0x3064	; 0x803064 <uxSchedulerSuspended>
    1f06:	81 11       	cpse	r24, r1
    1f08:	04 c0       	rjmp	.+8      	; 0x1f12 <xTaskGetSchedulerState+0x18>
			{
				xReturn = taskSCHEDULER_RUNNING;
    1f0a:	82 e0       	ldi	r24, 0x02	; 2
    1f0c:	08 95       	ret
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	08 95       	ret
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    1f12:	80 e0       	ldi	r24, 0x00	; 0
			}
		}

		return xReturn;
	}
    1f14:	08 95       	ret

00001f16 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    1f16:	cf 92       	push	r12
    1f18:	df 92       	push	r13
    1f1a:	ef 92       	push	r14
    1f1c:	ff 92       	push	r15
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    1f1e:	e0 91 d2 30 	lds	r30, 0x30D2	; 0x8030d2 <pxCurrentTCB>
    1f22:	f0 91 d3 30 	lds	r31, 0x30D3	; 0x8030d3 <pxCurrentTCB+0x1>
    1f26:	66 85       	ldd	r22, Z+14	; 0x0e
    1f28:	77 85       	ldd	r23, Z+15	; 0x0f
    1f2a:	80 89       	ldd	r24, Z+16	; 0x10
    1f2c:	91 89       	ldd	r25, Z+17	; 0x11

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1f2e:	e0 91 d2 30 	lds	r30, 0x30D2	; 0x8030d2 <pxCurrentTCB>
    1f32:	f0 91 d3 30 	lds	r31, 0x30D3	; 0x8030d3 <pxCurrentTCB+0x1>
    1f36:	a0 91 d2 30 	lds	r26, 0x30D2	; 0x8030d2 <pxCurrentTCB>
    1f3a:	b0 91 d3 30 	lds	r27, 0x30D3	; 0x8030d3 <pxCurrentTCB+0x1>
    1f3e:	5a 96       	adiw	r26, 0x1a	; 26
    1f40:	2c 91       	ld	r18, X
    1f42:	c1 2c       	mov	r12, r1
    1f44:	d1 2c       	mov	r13, r1
    1f46:	76 01       	movw	r14, r12
    1f48:	68 94       	set
    1f4a:	c2 f8       	bld	r12, 2
    1f4c:	c2 1a       	sub	r12, r18
    1f4e:	d1 08       	sbc	r13, r1
    1f50:	e1 08       	sbc	r14, r1
    1f52:	f1 08       	sbc	r15, r1
    1f54:	c6 86       	std	Z+14, r12	; 0x0e
    1f56:	d7 86       	std	Z+15, r13	; 0x0f
    1f58:	e0 8a       	std	Z+16, r14	; 0x10
    1f5a:	f1 8a       	std	Z+17, r15	; 0x11

	return uxReturn;
}
    1f5c:	ff 90       	pop	r15
    1f5e:	ef 90       	pop	r14
    1f60:	df 90       	pop	r13
    1f62:	cf 90       	pop	r12
    1f64:	08 95       	ret

00001f66 <prvGetNextExpireTime>:

	taskENTER_CRITICAL();
	{
		pxTimer->pvTimerID = pvNewID;
	}
	taskEXIT_CRITICAL();
    1f66:	dc 01       	movw	r26, r24
    1f68:	e0 91 de 30 	lds	r30, 0x30DE	; 0x8030de <pxCurrentTimerList>
    1f6c:	f0 91 df 30 	lds	r31, 0x30DF	; 0x8030df <pxCurrentTimerList+0x1>
    1f70:	80 81       	ld	r24, Z
    1f72:	91 e0       	ldi	r25, 0x01	; 1
    1f74:	81 11       	cpse	r24, r1
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	9c 93       	st	X, r25
    1f7a:	91 11       	cpse	r25, r1
    1f7c:	08 c0       	rjmp	.+16     	; 0x1f8e <prvGetNextExpireTime+0x28>
    1f7e:	07 80       	ldd	r0, Z+7	; 0x07
    1f80:	f0 85       	ldd	r31, Z+8	; 0x08
    1f82:	e0 2d       	mov	r30, r0
    1f84:	60 81       	ld	r22, Z
    1f86:	71 81       	ldd	r23, Z+1	; 0x01
    1f88:	82 81       	ldd	r24, Z+2	; 0x02
    1f8a:	93 81       	ldd	r25, Z+3	; 0x03
    1f8c:	08 95       	ret
    1f8e:	60 e0       	ldi	r22, 0x00	; 0
    1f90:	70 e0       	ldi	r23, 0x00	; 0
    1f92:	cb 01       	movw	r24, r22
    1f94:	08 95       	ret

00001f96 <prvInsertTimerInActiveList>:
    1f96:	cf 92       	push	r12
    1f98:	df 92       	push	r13
    1f9a:	ef 92       	push	r14
    1f9c:	ff 92       	push	r15
    1f9e:	0f 93       	push	r16
    1fa0:	1f 93       	push	r17
    1fa2:	fc 01       	movw	r30, r24
    1fa4:	42 83       	std	Z+2, r20	; 0x02
    1fa6:	53 83       	std	Z+3, r21	; 0x03
    1fa8:	64 83       	std	Z+4, r22	; 0x04
    1faa:	75 83       	std	Z+5, r23	; 0x05
    1fac:	82 87       	std	Z+10, r24	; 0x0a
    1fae:	93 87       	std	Z+11, r25	; 0x0b
    1fb0:	04 17       	cp	r16, r20
    1fb2:	15 07       	cpc	r17, r21
    1fb4:	26 07       	cpc	r18, r22
    1fb6:	37 07       	cpc	r19, r23
    1fb8:	c0 f0       	brcs	.+48     	; 0x1fea <prvInsertTimerInActiveList+0x54>
    1fba:	0c 19       	sub	r16, r12
    1fbc:	1d 09       	sbc	r17, r13
    1fbe:	2e 09       	sbc	r18, r14
    1fc0:	3f 09       	sbc	r19, r15
    1fc2:	86 85       	ldd	r24, Z+14	; 0x0e
    1fc4:	97 85       	ldd	r25, Z+15	; 0x0f
    1fc6:	a0 89       	ldd	r26, Z+16	; 0x10
    1fc8:	b1 89       	ldd	r27, Z+17	; 0x11
    1fca:	08 17       	cp	r16, r24
    1fcc:	19 07       	cpc	r17, r25
    1fce:	2a 07       	cpc	r18, r26
    1fd0:	3b 07       	cpc	r19, r27
    1fd2:	00 f5       	brcc	.+64     	; 0x2014 <__DATA_REGION_LENGTH__+0x14>
    1fd4:	bf 01       	movw	r22, r30
    1fd6:	6e 5f       	subi	r22, 0xFE	; 254
    1fd8:	7f 4f       	sbci	r23, 0xFF	; 255
    1fda:	80 91 dc 30 	lds	r24, 0x30DC	; 0x8030dc <pxOverflowTimerList>
    1fde:	90 91 dd 30 	lds	r25, 0x30DD	; 0x8030dd <pxOverflowTimerList+0x1>
    1fe2:	0e 94 77 04 	call	0x8ee	; 0x8ee <vListInsert>
    1fe6:	80 e0       	ldi	r24, 0x00	; 0
    1fe8:	18 c0       	rjmp	.+48     	; 0x201a <__DATA_REGION_LENGTH__+0x1a>
    1fea:	0c 15       	cp	r16, r12
    1fec:	1d 05       	cpc	r17, r13
    1fee:	2e 05       	cpc	r18, r14
    1ff0:	3f 05       	cpc	r19, r15
    1ff2:	28 f4       	brcc	.+10     	; 0x1ffe <prvInsertTimerInActiveList+0x68>
    1ff4:	4c 15       	cp	r20, r12
    1ff6:	5d 05       	cpc	r21, r13
    1ff8:	6e 05       	cpc	r22, r14
    1ffa:	7f 05       	cpc	r23, r15
    1ffc:	68 f4       	brcc	.+26     	; 0x2018 <__DATA_REGION_LENGTH__+0x18>
    1ffe:	bf 01       	movw	r22, r30
    2000:	6e 5f       	subi	r22, 0xFE	; 254
    2002:	7f 4f       	sbci	r23, 0xFF	; 255
    2004:	80 91 de 30 	lds	r24, 0x30DE	; 0x8030de <pxCurrentTimerList>
    2008:	90 91 df 30 	lds	r25, 0x30DF	; 0x8030df <pxCurrentTimerList+0x1>
    200c:	0e 94 77 04 	call	0x8ee	; 0x8ee <vListInsert>
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	03 c0       	rjmp	.+6      	; 0x201a <__DATA_REGION_LENGTH__+0x1a>
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	01 c0       	rjmp	.+2      	; 0x201a <__DATA_REGION_LENGTH__+0x1a>
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	1f 91       	pop	r17
    201c:	0f 91       	pop	r16
    201e:	ff 90       	pop	r15
    2020:	ef 90       	pop	r14
    2022:	df 90       	pop	r13
    2024:	cf 90       	pop	r12
    2026:	08 95       	ret

00002028 <prvCheckForValidListAndQueue>:
    2028:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    202c:	ff 93       	push	r31
    202e:	f8 7f       	andi	r31, 0xF8	; 248
    2030:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2034:	80 91 da 30 	lds	r24, 0x30DA	; 0x8030da <xTimerQueue>
    2038:	90 91 db 30 	lds	r25, 0x30DB	; 0x8030db <xTimerQueue+0x1>
    203c:	89 2b       	or	r24, r25
    203e:	e9 f4       	brne	.+58     	; 0x207a <prvCheckForValidListAndQueue+0x52>
    2040:	8b ee       	ldi	r24, 0xEB	; 235
    2042:	90 e3       	ldi	r25, 0x30	; 48
    2044:	0e 94 41 04 	call	0x882	; 0x882 <vListInitialise>
    2048:	80 ee       	ldi	r24, 0xE0	; 224
    204a:	90 e3       	ldi	r25, 0x30	; 48
    204c:	0e 94 41 04 	call	0x882	; 0x882 <vListInitialise>
    2050:	8b ee       	ldi	r24, 0xEB	; 235
    2052:	90 e3       	ldi	r25, 0x30	; 48
    2054:	80 93 de 30 	sts	0x30DE, r24	; 0x8030de <pxCurrentTimerList>
    2058:	90 93 df 30 	sts	0x30DF, r25	; 0x8030df <pxCurrentTimerList+0x1>
    205c:	80 ee       	ldi	r24, 0xE0	; 224
    205e:	90 e3       	ldi	r25, 0x30	; 48
    2060:	80 93 dc 30 	sts	0x30DC, r24	; 0x8030dc <pxOverflowTimerList>
    2064:	90 93 dd 30 	sts	0x30DD, r25	; 0x8030dd <pxOverflowTimerList+0x1>
    2068:	40 e0       	ldi	r20, 0x00	; 0
    206a:	69 e0       	ldi	r22, 0x09	; 9
    206c:	85 e0       	ldi	r24, 0x05	; 5
    206e:	0e 94 b7 07 	call	0xf6e	; 0xf6e <xQueueGenericCreate>
    2072:	80 93 da 30 	sts	0x30DA, r24	; 0x8030da <xTimerQueue>
    2076:	90 93 db 30 	sts	0x30DB, r25	; 0x8030db <xTimerQueue+0x1>
    207a:	ff 91       	pop	r31
    207c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2080:	08 95       	ret

00002082 <xTimerCreateTimerTask>:
    2082:	ef 92       	push	r14
    2084:	ff 92       	push	r15
    2086:	0f 93       	push	r16
    2088:	0e 94 14 10 	call	0x2028	; 0x2028 <prvCheckForValidListAndQueue>
    208c:	80 91 da 30 	lds	r24, 0x30DA	; 0x8030da <xTimerQueue>
    2090:	90 91 db 30 	lds	r25, 0x30DB	; 0x8030db <xTimerQueue+0x1>
    2094:	89 2b       	or	r24, r25
    2096:	91 f0       	breq	.+36     	; 0x20bc <xTimerCreateTimerTask+0x3a>
    2098:	0f 2e       	mov	r0, r31
    209a:	f8 ed       	ldi	r31, 0xD8	; 216
    209c:	ef 2e       	mov	r14, r31
    209e:	f0 e3       	ldi	r31, 0x30	; 48
    20a0:	ff 2e       	mov	r15, r31
    20a2:	f0 2d       	mov	r31, r0
    20a4:	03 e0       	ldi	r16, 0x03	; 3
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	48 ec       	ldi	r20, 0xC8	; 200
    20ac:	50 e0       	ldi	r21, 0x00	; 0
    20ae:	69 e0       	ldi	r22, 0x09	; 9
    20b0:	70 e2       	ldi	r23, 0x20	; 32
    20b2:	8f ea       	ldi	r24, 0xAF	; 175
    20b4:	92 e1       	ldi	r25, 0x12	; 18
    20b6:	0e 94 45 0b 	call	0x168a	; 0x168a <xTaskCreate>
    20ba:	01 c0       	rjmp	.+2      	; 0x20be <xTimerCreateTimerTask+0x3c>
    20bc:	80 e0       	ldi	r24, 0x00	; 0
    20be:	0f 91       	pop	r16
    20c0:	ff 90       	pop	r15
    20c2:	ef 90       	pop	r14
    20c4:	08 95       	ret

000020c6 <xTimerGenericCommand>:
    20c6:	8f 92       	push	r8
    20c8:	9f 92       	push	r9
    20ca:	af 92       	push	r10
    20cc:	bf 92       	push	r11
    20ce:	cf 92       	push	r12
    20d0:	df 92       	push	r13
    20d2:	ef 92       	push	r14
    20d4:	ff 92       	push	r15
    20d6:	0f 93       	push	r16
    20d8:	1f 93       	push	r17
    20da:	cf 93       	push	r28
    20dc:	df 93       	push	r29
    20de:	cd b7       	in	r28, 0x3d	; 61
    20e0:	de b7       	in	r29, 0x3e	; 62
    20e2:	29 97       	sbiw	r28, 0x09	; 9
    20e4:	cd bf       	out	0x3d, r28	; 61
    20e6:	de bf       	out	0x3e, r29	; 62
    20e8:	e0 91 da 30 	lds	r30, 0x30DA	; 0x8030da <xTimerQueue>
    20ec:	f0 91 db 30 	lds	r31, 0x30DB	; 0x8030db <xTimerQueue+0x1>
    20f0:	30 97       	sbiw	r30, 0x00	; 0
    20f2:	89 f1       	breq	.+98     	; 0x2156 <xTimerGenericCommand+0x90>
    20f4:	69 83       	std	Y+1, r22	; 0x01
    20f6:	2a 83       	std	Y+2, r18	; 0x02
    20f8:	3b 83       	std	Y+3, r19	; 0x03
    20fa:	4c 83       	std	Y+4, r20	; 0x04
    20fc:	5d 83       	std	Y+5, r21	; 0x05
    20fe:	8e 83       	std	Y+6, r24	; 0x06
    2100:	9f 83       	std	Y+7, r25	; 0x07
    2102:	66 30       	cpi	r22, 0x06	; 6
    2104:	fc f4       	brge	.+62     	; 0x2144 <xTimerGenericCommand+0x7e>
    2106:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <xTaskGetSchedulerState>
    210a:	82 30       	cpi	r24, 0x02	; 2
    210c:	69 f4       	brne	.+26     	; 0x2128 <xTimerGenericCommand+0x62>
    210e:	00 e0       	ldi	r16, 0x00	; 0
    2110:	a7 01       	movw	r20, r14
    2112:	96 01       	movw	r18, r12
    2114:	be 01       	movw	r22, r28
    2116:	6f 5f       	subi	r22, 0xFF	; 255
    2118:	7f 4f       	sbci	r23, 0xFF	; 255
    211a:	80 91 da 30 	lds	r24, 0x30DA	; 0x8030da <xTimerQueue>
    211e:	90 91 db 30 	lds	r25, 0x30DB	; 0x8030db <xTimerQueue+0x1>
    2122:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <xQueueGenericSend>
    2126:	18 c0       	rjmp	.+48     	; 0x2158 <xTimerGenericCommand+0x92>
    2128:	00 e0       	ldi	r16, 0x00	; 0
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	a9 01       	movw	r20, r18
    2130:	be 01       	movw	r22, r28
    2132:	6f 5f       	subi	r22, 0xFF	; 255
    2134:	7f 4f       	sbci	r23, 0xFF	; 255
    2136:	80 91 da 30 	lds	r24, 0x30DA	; 0x8030da <xTimerQueue>
    213a:	90 91 db 30 	lds	r25, 0x30DB	; 0x8030db <xTimerQueue+0x1>
    213e:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <xQueueGenericSend>
    2142:	0a c0       	rjmp	.+20     	; 0x2158 <xTimerGenericCommand+0x92>
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	a8 01       	movw	r20, r16
    2148:	be 01       	movw	r22, r28
    214a:	6f 5f       	subi	r22, 0xFF	; 255
    214c:	7f 4f       	sbci	r23, 0xFF	; 255
    214e:	cf 01       	movw	r24, r30
    2150:	0e 94 80 08 	call	0x1100	; 0x1100 <xQueueGenericSendFromISR>
    2154:	01 c0       	rjmp	.+2      	; 0x2158 <xTimerGenericCommand+0x92>
    2156:	80 e0       	ldi	r24, 0x00	; 0
    2158:	29 96       	adiw	r28, 0x09	; 9
    215a:	cd bf       	out	0x3d, r28	; 61
    215c:	de bf       	out	0x3e, r29	; 62
    215e:	df 91       	pop	r29
    2160:	cf 91       	pop	r28
    2162:	1f 91       	pop	r17
    2164:	0f 91       	pop	r16
    2166:	ff 90       	pop	r15
    2168:	ef 90       	pop	r14
    216a:	df 90       	pop	r13
    216c:	cf 90       	pop	r12
    216e:	bf 90       	pop	r11
    2170:	af 90       	pop	r10
    2172:	9f 90       	pop	r9
    2174:	8f 90       	pop	r8
    2176:	08 95       	ret

00002178 <prvSwitchTimerLists>:
    2178:	8f 92       	push	r8
    217a:	9f 92       	push	r9
    217c:	af 92       	push	r10
    217e:	bf 92       	push	r11
    2180:	cf 92       	push	r12
    2182:	df 92       	push	r13
    2184:	ef 92       	push	r14
    2186:	ff 92       	push	r15
    2188:	0f 93       	push	r16
    218a:	1f 93       	push	r17
    218c:	cf 93       	push	r28
    218e:	df 93       	push	r29
    2190:	3c c0       	rjmp	.+120    	; 0x220a <prvSwitchTimerLists+0x92>
    2192:	07 80       	ldd	r0, Z+7	; 0x07
    2194:	f0 85       	ldd	r31, Z+8	; 0x08
    2196:	e0 2d       	mov	r30, r0
    2198:	80 80       	ld	r8, Z
    219a:	91 80       	ldd	r9, Z+1	; 0x01
    219c:	a2 80       	ldd	r10, Z+2	; 0x02
    219e:	b3 80       	ldd	r11, Z+3	; 0x03
    21a0:	c0 85       	ldd	r28, Z+8	; 0x08
    21a2:	d1 85       	ldd	r29, Z+9	; 0x09
    21a4:	8e 01       	movw	r16, r28
    21a6:	0e 5f       	subi	r16, 0xFE	; 254
    21a8:	1f 4f       	sbci	r17, 0xFF	; 255
    21aa:	c8 01       	movw	r24, r16
    21ac:	0e 94 b4 04 	call	0x968	; 0x968 <uxListRemove>
    21b0:	ed 89       	ldd	r30, Y+21	; 0x15
    21b2:	fe 89       	ldd	r31, Y+22	; 0x16
    21b4:	ce 01       	movw	r24, r28
    21b6:	19 95       	eicall
    21b8:	8a 89       	ldd	r24, Y+18	; 0x12
    21ba:	81 30       	cpi	r24, 0x01	; 1
    21bc:	31 f5       	brne	.+76     	; 0x220a <prvSwitchTimerLists+0x92>
    21be:	8e 85       	ldd	r24, Y+14	; 0x0e
    21c0:	9f 85       	ldd	r25, Y+15	; 0x0f
    21c2:	a8 89       	ldd	r26, Y+16	; 0x10
    21c4:	b9 89       	ldd	r27, Y+17	; 0x11
    21c6:	88 0d       	add	r24, r8
    21c8:	99 1d       	adc	r25, r9
    21ca:	aa 1d       	adc	r26, r10
    21cc:	bb 1d       	adc	r27, r11
    21ce:	88 16       	cp	r8, r24
    21d0:	99 06       	cpc	r9, r25
    21d2:	aa 06       	cpc	r10, r26
    21d4:	bb 06       	cpc	r11, r27
    21d6:	70 f4       	brcc	.+28     	; 0x21f4 <prvSwitchTimerLists+0x7c>
    21d8:	8a 83       	std	Y+2, r24	; 0x02
    21da:	9b 83       	std	Y+3, r25	; 0x03
    21dc:	ac 83       	std	Y+4, r26	; 0x04
    21de:	bd 83       	std	Y+5, r27	; 0x05
    21e0:	ca 87       	std	Y+10, r28	; 0x0a
    21e2:	db 87       	std	Y+11, r29	; 0x0b
    21e4:	b8 01       	movw	r22, r16
    21e6:	80 91 de 30 	lds	r24, 0x30DE	; 0x8030de <pxCurrentTimerList>
    21ea:	90 91 df 30 	lds	r25, 0x30DF	; 0x8030df <pxCurrentTimerList+0x1>
    21ee:	0e 94 77 04 	call	0x8ee	; 0x8ee <vListInsert>
    21f2:	0b c0       	rjmp	.+22     	; 0x220a <prvSwitchTimerLists+0x92>
    21f4:	c1 2c       	mov	r12, r1
    21f6:	d1 2c       	mov	r13, r1
    21f8:	76 01       	movw	r14, r12
    21fa:	00 e0       	ldi	r16, 0x00	; 0
    21fc:	10 e0       	ldi	r17, 0x00	; 0
    21fe:	a5 01       	movw	r20, r10
    2200:	94 01       	movw	r18, r8
    2202:	60 e0       	ldi	r22, 0x00	; 0
    2204:	ce 01       	movw	r24, r28
    2206:	0e 94 63 10 	call	0x20c6	; 0x20c6 <xTimerGenericCommand>
    220a:	e0 91 de 30 	lds	r30, 0x30DE	; 0x8030de <pxCurrentTimerList>
    220e:	f0 91 df 30 	lds	r31, 0x30DF	; 0x8030df <pxCurrentTimerList+0x1>
    2212:	80 81       	ld	r24, Z
    2214:	81 11       	cpse	r24, r1
    2216:	bd cf       	rjmp	.-134    	; 0x2192 <prvSwitchTimerLists+0x1a>
    2218:	80 91 dc 30 	lds	r24, 0x30DC	; 0x8030dc <pxOverflowTimerList>
    221c:	90 91 dd 30 	lds	r25, 0x30DD	; 0x8030dd <pxOverflowTimerList+0x1>
    2220:	80 93 de 30 	sts	0x30DE, r24	; 0x8030de <pxCurrentTimerList>
    2224:	90 93 df 30 	sts	0x30DF, r25	; 0x8030df <pxCurrentTimerList+0x1>
    2228:	e0 93 dc 30 	sts	0x30DC, r30	; 0x8030dc <pxOverflowTimerList>
    222c:	f0 93 dd 30 	sts	0x30DD, r31	; 0x8030dd <pxOverflowTimerList+0x1>
    2230:	df 91       	pop	r29
    2232:	cf 91       	pop	r28
    2234:	1f 91       	pop	r17
    2236:	0f 91       	pop	r16
    2238:	ff 90       	pop	r15
    223a:	ef 90       	pop	r14
    223c:	df 90       	pop	r13
    223e:	cf 90       	pop	r12
    2240:	bf 90       	pop	r11
    2242:	af 90       	pop	r10
    2244:	9f 90       	pop	r9
    2246:	8f 90       	pop	r8
    2248:	08 95       	ret

0000224a <prvSampleTimeNow>:
    224a:	cf 92       	push	r12
    224c:	df 92       	push	r13
    224e:	ef 92       	push	r14
    2250:	ff 92       	push	r15
    2252:	cf 93       	push	r28
    2254:	df 93       	push	r29
    2256:	ec 01       	movw	r28, r24
    2258:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <xTaskGetTickCount>
    225c:	6b 01       	movw	r12, r22
    225e:	7c 01       	movw	r14, r24
    2260:	80 91 d4 30 	lds	r24, 0x30D4	; 0x8030d4 <xLastTime.4745>
    2264:	90 91 d5 30 	lds	r25, 0x30D5	; 0x8030d5 <xLastTime.4745+0x1>
    2268:	a0 91 d6 30 	lds	r26, 0x30D6	; 0x8030d6 <xLastTime.4745+0x2>
    226c:	b0 91 d7 30 	lds	r27, 0x30D7	; 0x8030d7 <xLastTime.4745+0x3>
    2270:	c8 16       	cp	r12, r24
    2272:	d9 06       	cpc	r13, r25
    2274:	ea 06       	cpc	r14, r26
    2276:	fb 06       	cpc	r15, r27
    2278:	28 f4       	brcc	.+10     	; 0x2284 <prvSampleTimeNow+0x3a>
    227a:	0e 94 bc 10 	call	0x2178	; 0x2178 <prvSwitchTimerLists>
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	88 83       	st	Y, r24
    2282:	01 c0       	rjmp	.+2      	; 0x2286 <prvSampleTimeNow+0x3c>
    2284:	18 82       	st	Y, r1
    2286:	c0 92 d4 30 	sts	0x30D4, r12	; 0x8030d4 <xLastTime.4745>
    228a:	d0 92 d5 30 	sts	0x30D5, r13	; 0x8030d5 <xLastTime.4745+0x1>
    228e:	e0 92 d6 30 	sts	0x30D6, r14	; 0x8030d6 <xLastTime.4745+0x2>
    2292:	f0 92 d7 30 	sts	0x30D7, r15	; 0x8030d7 <xLastTime.4745+0x3>
    2296:	c7 01       	movw	r24, r14
    2298:	b6 01       	movw	r22, r12
    229a:	df 91       	pop	r29
    229c:	cf 91       	pop	r28
    229e:	ff 90       	pop	r15
    22a0:	ef 90       	pop	r14
    22a2:	df 90       	pop	r13
    22a4:	cf 90       	pop	r12
    22a6:	08 95       	ret

000022a8 <prvProcessExpiredTimer>:
    22a8:	4f 92       	push	r4
    22aa:	5f 92       	push	r5
    22ac:	6f 92       	push	r6
    22ae:	7f 92       	push	r7
    22b0:	8f 92       	push	r8
    22b2:	9f 92       	push	r9
    22b4:	af 92       	push	r10
    22b6:	bf 92       	push	r11
    22b8:	cf 92       	push	r12
    22ba:	df 92       	push	r13
    22bc:	ef 92       	push	r14
    22be:	ff 92       	push	r15
    22c0:	0f 93       	push	r16
    22c2:	1f 93       	push	r17
    22c4:	cf 93       	push	r28
    22c6:	df 93       	push	r29
    22c8:	4b 01       	movw	r8, r22
    22ca:	5c 01       	movw	r10, r24
    22cc:	29 01       	movw	r4, r18
    22ce:	3a 01       	movw	r6, r20
    22d0:	e0 91 de 30 	lds	r30, 0x30DE	; 0x8030de <pxCurrentTimerList>
    22d4:	f0 91 df 30 	lds	r31, 0x30DF	; 0x8030df <pxCurrentTimerList+0x1>
    22d8:	07 80       	ldd	r0, Z+7	; 0x07
    22da:	f0 85       	ldd	r31, Z+8	; 0x08
    22dc:	e0 2d       	mov	r30, r0
    22de:	c0 85       	ldd	r28, Z+8	; 0x08
    22e0:	d1 85       	ldd	r29, Z+9	; 0x09
    22e2:	ce 01       	movw	r24, r28
    22e4:	02 96       	adiw	r24, 0x02	; 2
    22e6:	0e 94 b4 04 	call	0x968	; 0x968 <uxListRemove>
    22ea:	8a 89       	ldd	r24, Y+18	; 0x12
    22ec:	81 30       	cpi	r24, 0x01	; 1
    22ee:	e1 f4       	brne	.+56     	; 0x2328 <prvProcessExpiredTimer+0x80>
    22f0:	4e 85       	ldd	r20, Y+14	; 0x0e
    22f2:	5f 85       	ldd	r21, Y+15	; 0x0f
    22f4:	68 89       	ldd	r22, Y+16	; 0x10
    22f6:	79 89       	ldd	r23, Y+17	; 0x11
    22f8:	48 0d       	add	r20, r8
    22fa:	59 1d       	adc	r21, r9
    22fc:	6a 1d       	adc	r22, r10
    22fe:	7b 1d       	adc	r23, r11
    2300:	75 01       	movw	r14, r10
    2302:	64 01       	movw	r12, r8
    2304:	93 01       	movw	r18, r6
    2306:	82 01       	movw	r16, r4
    2308:	ce 01       	movw	r24, r28
    230a:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <prvInsertTimerInActiveList>
    230e:	88 23       	and	r24, r24
    2310:	59 f0       	breq	.+22     	; 0x2328 <prvProcessExpiredTimer+0x80>
    2312:	c1 2c       	mov	r12, r1
    2314:	d1 2c       	mov	r13, r1
    2316:	76 01       	movw	r14, r12
    2318:	00 e0       	ldi	r16, 0x00	; 0
    231a:	10 e0       	ldi	r17, 0x00	; 0
    231c:	a5 01       	movw	r20, r10
    231e:	94 01       	movw	r18, r8
    2320:	60 e0       	ldi	r22, 0x00	; 0
    2322:	ce 01       	movw	r24, r28
    2324:	0e 94 63 10 	call	0x20c6	; 0x20c6 <xTimerGenericCommand>
    2328:	ed 89       	ldd	r30, Y+21	; 0x15
    232a:	fe 89       	ldd	r31, Y+22	; 0x16
    232c:	ce 01       	movw	r24, r28
    232e:	19 95       	eicall
    2330:	df 91       	pop	r29
    2332:	cf 91       	pop	r28
    2334:	1f 91       	pop	r17
    2336:	0f 91       	pop	r16
    2338:	ff 90       	pop	r15
    233a:	ef 90       	pop	r14
    233c:	df 90       	pop	r13
    233e:	cf 90       	pop	r12
    2340:	bf 90       	pop	r11
    2342:	af 90       	pop	r10
    2344:	9f 90       	pop	r9
    2346:	8f 90       	pop	r8
    2348:	7f 90       	pop	r7
    234a:	6f 90       	pop	r6
    234c:	5f 90       	pop	r5
    234e:	4f 90       	pop	r4
    2350:	08 95       	ret

00002352 <prvProcessTimerOrBlockTask>:
    2352:	8f 92       	push	r8
    2354:	9f 92       	push	r9
    2356:	af 92       	push	r10
    2358:	bf 92       	push	r11
    235a:	cf 92       	push	r12
    235c:	df 92       	push	r13
    235e:	ef 92       	push	r14
    2360:	ff 92       	push	r15
    2362:	1f 93       	push	r17
    2364:	cf 93       	push	r28
    2366:	df 93       	push	r29
    2368:	1f 92       	push	r1
    236a:	cd b7       	in	r28, 0x3d	; 61
    236c:	de b7       	in	r29, 0x3e	; 62
    236e:	6b 01       	movw	r12, r22
    2370:	7c 01       	movw	r14, r24
    2372:	14 2f       	mov	r17, r20
    2374:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <vTaskSuspendAll>
    2378:	ce 01       	movw	r24, r28
    237a:	01 96       	adiw	r24, 0x01	; 1
    237c:	0e 94 25 11 	call	0x224a	; 0x224a <prvSampleTimeNow>
    2380:	4b 01       	movw	r8, r22
    2382:	5c 01       	movw	r10, r24
    2384:	89 81       	ldd	r24, Y+1	; 0x01
    2386:	81 11       	cpse	r24, r1
    2388:	2e c0       	rjmp	.+92     	; 0x23e6 <prvProcessTimerOrBlockTask+0x94>
    238a:	11 11       	cpse	r17, r1
    238c:	0e c0       	rjmp	.+28     	; 0x23aa <prvProcessTimerOrBlockTask+0x58>
    238e:	8c 14       	cp	r8, r12
    2390:	9d 04       	cpc	r9, r13
    2392:	ae 04       	cpc	r10, r14
    2394:	bf 04       	cpc	r11, r15
    2396:	48 f0       	brcs	.+18     	; 0x23aa <prvProcessTimerOrBlockTask+0x58>
    2398:	0e 94 bc 0c 	call	0x1978	; 0x1978 <xTaskResumeAll>
    239c:	a5 01       	movw	r20, r10
    239e:	94 01       	movw	r18, r8
    23a0:	c7 01       	movw	r24, r14
    23a2:	b6 01       	movw	r22, r12
    23a4:	0e 94 54 11 	call	0x22a8	; 0x22a8 <prvProcessExpiredTimer>
    23a8:	20 c0       	rjmp	.+64     	; 0x23ea <prvProcessTimerOrBlockTask+0x98>
    23aa:	11 23       	and	r17, r17
    23ac:	41 f0       	breq	.+16     	; 0x23be <prvProcessTimerOrBlockTask+0x6c>
    23ae:	e0 91 dc 30 	lds	r30, 0x30DC	; 0x8030dc <pxOverflowTimerList>
    23b2:	f0 91 dd 30 	lds	r31, 0x30DD	; 0x8030dd <pxOverflowTimerList+0x1>
    23b6:	80 81       	ld	r24, Z
    23b8:	11 e0       	ldi	r17, 0x01	; 1
    23ba:	81 11       	cpse	r24, r1
    23bc:	10 e0       	ldi	r17, 0x00	; 0
    23be:	b7 01       	movw	r22, r14
    23c0:	a6 01       	movw	r20, r12
    23c2:	48 19       	sub	r20, r8
    23c4:	59 09       	sbc	r21, r9
    23c6:	6a 09       	sbc	r22, r10
    23c8:	7b 09       	sbc	r23, r11
    23ca:	21 2f       	mov	r18, r17
    23cc:	80 91 da 30 	lds	r24, 0x30DA	; 0x8030da <xTimerQueue>
    23d0:	90 91 db 30 	lds	r25, 0x30DB	; 0x8030db <xTimerQueue+0x1>
    23d4:	0e 94 70 09 	call	0x12e0	; 0x12e0 <vQueueWaitForMessageRestricted>
    23d8:	0e 94 bc 0c 	call	0x1978	; 0x1978 <xTaskResumeAll>
    23dc:	81 11       	cpse	r24, r1
    23de:	05 c0       	rjmp	.+10     	; 0x23ea <prvProcessTimerOrBlockTask+0x98>
    23e0:	0e 94 ac 05 	call	0xb58	; 0xb58 <vPortYield>
    23e4:	02 c0       	rjmp	.+4      	; 0x23ea <prvProcessTimerOrBlockTask+0x98>
    23e6:	0e 94 bc 0c 	call	0x1978	; 0x1978 <xTaskResumeAll>
    23ea:	0f 90       	pop	r0
    23ec:	df 91       	pop	r29
    23ee:	cf 91       	pop	r28
    23f0:	1f 91       	pop	r17
    23f2:	ff 90       	pop	r15
    23f4:	ef 90       	pop	r14
    23f6:	df 90       	pop	r13
    23f8:	cf 90       	pop	r12
    23fa:	bf 90       	pop	r11
    23fc:	af 90       	pop	r10
    23fe:	9f 90       	pop	r9
    2400:	8f 90       	pop	r8
    2402:	08 95       	ret

00002404 <prvProcessReceivedCommands>:
    2404:	af 92       	push	r10
    2406:	bf 92       	push	r11
    2408:	cf 92       	push	r12
    240a:	df 92       	push	r13
    240c:	ef 92       	push	r14
    240e:	ff 92       	push	r15
    2410:	0f 93       	push	r16
    2412:	1f 93       	push	r17
    2414:	cf 93       	push	r28
    2416:	df 93       	push	r29
    2418:	cd b7       	in	r28, 0x3d	; 61
    241a:	de b7       	in	r29, 0x3e	; 62
    241c:	2a 97       	sbiw	r28, 0x0a	; 10
    241e:	cd bf       	out	0x3d, r28	; 61
    2420:	de bf       	out	0x3e, r29	; 62
    2422:	81 c0       	rjmp	.+258    	; 0x2526 <prvProcessReceivedCommands+0x122>
    2424:	89 81       	ldd	r24, Y+1	; 0x01
    2426:	88 23       	and	r24, r24
    2428:	4c f4       	brge	.+18     	; 0x243c <prvProcessReceivedCommands+0x38>
    242a:	ea 81       	ldd	r30, Y+2	; 0x02
    242c:	fb 81       	ldd	r31, Y+3	; 0x03
    242e:	4e 81       	ldd	r20, Y+6	; 0x06
    2430:	5f 81       	ldd	r21, Y+7	; 0x07
    2432:	68 85       	ldd	r22, Y+8	; 0x08
    2434:	79 85       	ldd	r23, Y+9	; 0x09
    2436:	8c 81       	ldd	r24, Y+4	; 0x04
    2438:	9d 81       	ldd	r25, Y+5	; 0x05
    243a:	19 95       	eicall
    243c:	89 81       	ldd	r24, Y+1	; 0x01
    243e:	88 23       	and	r24, r24
    2440:	0c f4       	brge	.+2      	; 0x2444 <prvProcessReceivedCommands+0x40>
    2442:	71 c0       	rjmp	.+226    	; 0x2526 <prvProcessReceivedCommands+0x122>
    2444:	ae 80       	ldd	r10, Y+6	; 0x06
    2446:	bf 80       	ldd	r11, Y+7	; 0x07
    2448:	d5 01       	movw	r26, r10
    244a:	1c 96       	adiw	r26, 0x0c	; 12
    244c:	8d 91       	ld	r24, X+
    244e:	9c 91       	ld	r25, X
    2450:	1d 97       	sbiw	r26, 0x0d	; 13
    2452:	89 2b       	or	r24, r25
    2454:	21 f0       	breq	.+8      	; 0x245e <prvProcessReceivedCommands+0x5a>
    2456:	c5 01       	movw	r24, r10
    2458:	02 96       	adiw	r24, 0x02	; 2
    245a:	0e 94 b4 04 	call	0x968	; 0x968 <uxListRemove>
    245e:	ce 01       	movw	r24, r28
    2460:	0a 96       	adiw	r24, 0x0a	; 10
    2462:	0e 94 25 11 	call	0x224a	; 0x224a <prvSampleTimeNow>
    2466:	8b 01       	movw	r16, r22
    2468:	9c 01       	movw	r18, r24
    246a:	89 81       	ldd	r24, Y+1	; 0x01
    246c:	08 2e       	mov	r0, r24
    246e:	00 0c       	add	r0, r0
    2470:	99 0b       	sbc	r25, r25
    2472:	aa 0b       	sbc	r26, r26
    2474:	bb 0b       	sbc	r27, r27
    2476:	8a 30       	cpi	r24, 0x0A	; 10
    2478:	91 05       	cpc	r25, r1
    247a:	08 f0       	brcs	.+2      	; 0x247e <prvProcessReceivedCommands+0x7a>
    247c:	54 c0       	rjmp	.+168    	; 0x2526 <prvProcessReceivedCommands+0x122>
    247e:	fc 01       	movw	r30, r24
    2480:	88 27       	eor	r24, r24
    2482:	e2 50       	subi	r30, 0x02	; 2
    2484:	ff 4f       	sbci	r31, 0xFF	; 255
    2486:	8f 4f       	sbci	r24, 0xFF	; 255
    2488:	0c 94 dc 1e 	jmp	0x3db8	; 0x3db8 <__tablejump2__>
    248c:	ca 80       	ldd	r12, Y+2	; 0x02
    248e:	db 80       	ldd	r13, Y+3	; 0x03
    2490:	ec 80       	ldd	r14, Y+4	; 0x04
    2492:	fd 80       	ldd	r15, Y+5	; 0x05
    2494:	f5 01       	movw	r30, r10
    2496:	46 85       	ldd	r20, Z+14	; 0x0e
    2498:	57 85       	ldd	r21, Z+15	; 0x0f
    249a:	60 89       	ldd	r22, Z+16	; 0x10
    249c:	71 89       	ldd	r23, Z+17	; 0x11
    249e:	4c 0d       	add	r20, r12
    24a0:	5d 1d       	adc	r21, r13
    24a2:	6e 1d       	adc	r22, r14
    24a4:	7f 1d       	adc	r23, r15
    24a6:	c5 01       	movw	r24, r10
    24a8:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <prvInsertTimerInActiveList>
    24ac:	88 23       	and	r24, r24
    24ae:	d9 f1       	breq	.+118    	; 0x2526 <prvProcessReceivedCommands+0x122>
    24b0:	d5 01       	movw	r26, r10
    24b2:	55 96       	adiw	r26, 0x15	; 21
    24b4:	ed 91       	ld	r30, X+
    24b6:	fc 91       	ld	r31, X
    24b8:	56 97       	sbiw	r26, 0x16	; 22
    24ba:	c5 01       	movw	r24, r10
    24bc:	19 95       	eicall
    24be:	f5 01       	movw	r30, r10
    24c0:	82 89       	ldd	r24, Z+18	; 0x12
    24c2:	81 30       	cpi	r24, 0x01	; 1
    24c4:	81 f5       	brne	.+96     	; 0x2526 <prvProcessReceivedCommands+0x122>
    24c6:	4a 81       	ldd	r20, Y+2	; 0x02
    24c8:	5b 81       	ldd	r21, Y+3	; 0x03
    24ca:	6c 81       	ldd	r22, Y+4	; 0x04
    24cc:	7d 81       	ldd	r23, Y+5	; 0x05
    24ce:	86 85       	ldd	r24, Z+14	; 0x0e
    24d0:	97 85       	ldd	r25, Z+15	; 0x0f
    24d2:	a0 89       	ldd	r26, Z+16	; 0x10
    24d4:	b1 89       	ldd	r27, Z+17	; 0x11
    24d6:	9a 01       	movw	r18, r20
    24d8:	ab 01       	movw	r20, r22
    24da:	28 0f       	add	r18, r24
    24dc:	39 1f       	adc	r19, r25
    24de:	4a 1f       	adc	r20, r26
    24e0:	5b 1f       	adc	r21, r27
    24e2:	c1 2c       	mov	r12, r1
    24e4:	d1 2c       	mov	r13, r1
    24e6:	76 01       	movw	r14, r12
    24e8:	00 e0       	ldi	r16, 0x00	; 0
    24ea:	10 e0       	ldi	r17, 0x00	; 0
    24ec:	60 e0       	ldi	r22, 0x00	; 0
    24ee:	c5 01       	movw	r24, r10
    24f0:	0e 94 63 10 	call	0x20c6	; 0x20c6 <xTimerGenericCommand>
    24f4:	18 c0       	rjmp	.+48     	; 0x2526 <prvProcessReceivedCommands+0x122>
    24f6:	4a 81       	ldd	r20, Y+2	; 0x02
    24f8:	5b 81       	ldd	r21, Y+3	; 0x03
    24fa:	6c 81       	ldd	r22, Y+4	; 0x04
    24fc:	7d 81       	ldd	r23, Y+5	; 0x05
    24fe:	d5 01       	movw	r26, r10
    2500:	1e 96       	adiw	r26, 0x0e	; 14
    2502:	4d 93       	st	X+, r20
    2504:	5d 93       	st	X+, r21
    2506:	6d 93       	st	X+, r22
    2508:	7c 93       	st	X, r23
    250a:	51 97       	sbiw	r26, 0x11	; 17
    250c:	40 0f       	add	r20, r16
    250e:	51 1f       	adc	r21, r17
    2510:	62 1f       	adc	r22, r18
    2512:	73 1f       	adc	r23, r19
    2514:	68 01       	movw	r12, r16
    2516:	79 01       	movw	r14, r18
    2518:	c5 01       	movw	r24, r10
    251a:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <prvInsertTimerInActiveList>
    251e:	03 c0       	rjmp	.+6      	; 0x2526 <prvProcessReceivedCommands+0x122>
    2520:	c5 01       	movw	r24, r10
    2522:	0e 94 40 04 	call	0x880	; 0x880 <vPortFree>
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	a9 01       	movw	r20, r18
    252c:	be 01       	movw	r22, r28
    252e:	6f 5f       	subi	r22, 0xFF	; 255
    2530:	7f 4f       	sbci	r23, 0xFF	; 255
    2532:	80 91 da 30 	lds	r24, 0x30DA	; 0x8030da <xTimerQueue>
    2536:	90 91 db 30 	lds	r25, 0x30DB	; 0x8030db <xTimerQueue+0x1>
    253a:	0e 94 c5 08 	call	0x118a	; 0x118a <xQueueReceive>
    253e:	81 11       	cpse	r24, r1
    2540:	71 cf       	rjmp	.-286    	; 0x2424 <prvProcessReceivedCommands+0x20>
    2542:	2a 96       	adiw	r28, 0x0a	; 10
    2544:	cd bf       	out	0x3d, r28	; 61
    2546:	de bf       	out	0x3e, r29	; 62
    2548:	df 91       	pop	r29
    254a:	cf 91       	pop	r28
    254c:	1f 91       	pop	r17
    254e:	0f 91       	pop	r16
    2550:	ff 90       	pop	r15
    2552:	ef 90       	pop	r14
    2554:	df 90       	pop	r13
    2556:	cf 90       	pop	r12
    2558:	bf 90       	pop	r11
    255a:	af 90       	pop	r10
    255c:	08 95       	ret

0000255e <prvTimerTask>:
    255e:	cf 93       	push	r28
    2560:	df 93       	push	r29
    2562:	1f 92       	push	r1
    2564:	cd b7       	in	r28, 0x3d	; 61
    2566:	de b7       	in	r29, 0x3e	; 62
    2568:	ce 01       	movw	r24, r28
    256a:	01 96       	adiw	r24, 0x01	; 1
    256c:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <prvGetNextExpireTime>
    2570:	49 81       	ldd	r20, Y+1	; 0x01
    2572:	0e 94 a9 11 	call	0x2352	; 0x2352 <prvProcessTimerOrBlockTask>
    2576:	0e 94 02 12 	call	0x2404	; 0x2404 <prvProcessReceivedCommands>
    257a:	f6 cf       	rjmp	.-20     	; 0x2568 <prvTimerTask+0xa>

0000257c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
    257c:	0f 93       	push	r16
    257e:	1f 93       	push	r17
    2580:	cf 93       	push	r28
    2582:	df 93       	push	r29
    2584:	cd b7       	in	r28, 0x3d	; 61
    2586:	de b7       	in	r29, 0x3e	; 62
    2588:	29 97       	sbiw	r28, 0x09	; 9
    258a:	cd bf       	out	0x3d, r28	; 61
    258c:	de bf       	out	0x3e, r29	; 62
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
    258e:	ee ef       	ldi	r30, 0xFE	; 254
    2590:	e9 83       	std	Y+1, r30	; 0x01
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
    2592:	8a 83       	std	Y+2, r24	; 0x02
    2594:	9b 83       	std	Y+3, r25	; 0x03
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
    2596:	6c 83       	std	Y+4, r22	; 0x04
    2598:	7d 83       	std	Y+5, r23	; 0x05
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
    259a:	2e 83       	std	Y+6, r18	; 0x06
    259c:	3f 83       	std	Y+7, r19	; 0x07
    259e:	48 87       	std	Y+8, r20	; 0x08
    25a0:	59 87       	std	Y+9, r21	; 0x09

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	a8 01       	movw	r20, r16
    25a6:	be 01       	movw	r22, r28
    25a8:	6f 5f       	subi	r22, 0xFF	; 255
    25aa:	7f 4f       	sbci	r23, 0xFF	; 255
    25ac:	80 91 da 30 	lds	r24, 0x30DA	; 0x8030da <xTimerQueue>
    25b0:	90 91 db 30 	lds	r25, 0x30DB	; 0x8030db <xTimerQueue+0x1>
    25b4:	0e 94 80 08 	call	0x1100	; 0x1100 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
    25b8:	29 96       	adiw	r28, 0x09	; 9
    25ba:	cd bf       	out	0x3d, r28	; 61
    25bc:	de bf       	out	0x3e, r29	; 62
    25be:	df 91       	pop	r29
    25c0:	cf 91       	pop	r28
    25c2:	1f 91       	pop	r17
    25c4:	0f 91       	pop	r16
    25c6:	08 95       	ret

000025c8 <vInitClock>:
#include "clksys_driver.h"


void vInitClock(void)
{
	CLKSYS_Enable( OSC_RC2MEN_bm );
    25c8:	e0 e5       	ldi	r30, 0x50	; 80
    25ca:	f0 e0       	ldi	r31, 0x00	; 0
    25cc:	80 81       	ld	r24, Z
    25ce:	81 60       	ori	r24, 0x01	; 1
    25d0:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_RC2MRDY_bm ) == 0 );
    25d2:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
    25d6:	80 ff       	sbrs	r24, 0
    25d8:	fc cf       	rjmp	.-8      	; 0x25d2 <vInitClock+0xa>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC2M_gc );
    25da:	80 e0       	ldi	r24, 0x00	; 0
    25dc:	0e 94 49 02 	call	0x492	; 0x492 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC32KEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
    25e0:	8e e1       	ldi	r24, 0x1E	; 30
    25e2:	0e 94 39 02 	call	0x472	; 0x472 <CLKSYS_Disable>
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    25e6:	60 e0       	ldi	r22, 0x00	; 0
    25e8:	80 e0       	ldi	r24, 0x00	; 0
    25ea:	0e 94 43 02 	call	0x486	; 0x486 <CLKSYS_Prescalers_Config>
	CLKSYS_XOSC_Config( OSC_FRQRANGE_2TO9_gc,false,OSC_XOSCSEL_XTAL_256CLK_gc );
    25ee:	43 e0       	ldi	r20, 0x03	; 3
    25f0:	60 e0       	ldi	r22, 0x00	; 0
    25f2:	80 e4       	ldi	r24, 0x40	; 64
    25f4:	0e 94 2a 02 	call	0x454	; 0x454 <CLKSYS_XOSC_Config>
	CLKSYS_Enable( OSC_XOSCEN_bm );
    25f8:	e0 e5       	ldi	r30, 0x50	; 80
    25fa:	f0 e0       	ldi	r31, 0x00	; 0
    25fc:	80 81       	ld	r24, Z
    25fe:	88 60       	ori	r24, 0x08	; 8
    2600:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
    2602:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
    2606:	83 ff       	sbrs	r24, 3
    2608:	fc cf       	rjmp	.-8      	; 0x2602 <vInitClock+0x3a>
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 4 );
    260a:	64 e0       	ldi	r22, 0x04	; 4
    260c:	80 ec       	ldi	r24, 0xC0	; 192
    260e:	0e 94 34 02 	call	0x468	; 0x468 <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
    2612:	e0 e5       	ldi	r30, 0x50	; 80
    2614:	f0 e0       	ldi	r31, 0x00	; 0
    2616:	80 81       	ld	r24, Z
    2618:	80 61       	ori	r24, 0x10	; 16
    261a:	80 83       	st	Z, r24
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    261c:	60 e0       	ldi	r22, 0x00	; 0
    261e:	80 e0       	ldi	r24, 0x00	; 0
    2620:	0e 94 43 02 	call	0x486	; 0x486 <CLKSYS_Prescalers_Config>
	do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
    2624:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
    2628:	84 ff       	sbrs	r24, 4
    262a:	fc cf       	rjmp	.-8      	; 0x2624 <vInitClock+0x5c>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
    262c:	84 e0       	ldi	r24, 0x04	; 4
    262e:	0e 94 49 02 	call	0x492	; 0x492 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC2MEN_bm | OSC_RC32KEN_bm);
    2632:	87 e0       	ldi	r24, 0x07	; 7
    2634:	0e 94 39 02 	call	0x472	; 0x472 <CLKSYS_Disable>
    2638:	08 95       	ret

0000263a <vTimeMeasurement>:
/*********************************************************************************
Functions
*********************************************************************************/


void vTimeMeasurement(void* pvParameters){							//Time Function for measuring execution time
    263a:	cf 93       	push	r28
    263c:	df 93       	push	r29
    263e:	00 d0       	rcall	.+0      	; 0x2640 <vTimeMeasurement+0x6>
    2640:	1f 92       	push	r1
    2642:	cd b7       	in	r28, 0x3d	; 61
    2644:	de b7       	in	r29, 0x3e	; 62
TickType_t lasttime = xTaskGetTickCount();
    2646:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <xTaskGetTickCount>
    264a:	69 83       	std	Y+1, r22	; 0x01
    264c:	7a 83       	std	Y+2, r23	; 0x02
    264e:	8b 83       	std	Y+3, r24	; 0x03
    2650:	9c 83       	std	Y+4, r25	; 0x04
	for(;;) {
		if ((State == RunLeibniz) || (State == RunVieta))
    2652:	80 91 f6 30 	lds	r24, 0x30F6	; 0x8030f6 <State>
    2656:	82 30       	cpi	r24, 0x02	; 2
    2658:	21 f0       	breq	.+8      	; 0x2662 <vTimeMeasurement+0x28>
    265a:	80 91 f6 30 	lds	r24, 0x30F6	; 0x8030f6 <State>
    265e:	83 30       	cpi	r24, 0x03	; 3
    2660:	31 f5       	brne	.+76     	; 0x26ae <vTimeMeasurement+0x74>
		{
			GlobalSec++;
    2662:	80 91 fa 30 	lds	r24, 0x30FA	; 0x8030fa <GlobalSec>
    2666:	90 91 fb 30 	lds	r25, 0x30FB	; 0x8030fb <GlobalSec+0x1>
    266a:	01 96       	adiw	r24, 0x01	; 1
    266c:	80 93 fa 30 	sts	0x30FA, r24	; 0x8030fa <GlobalSec>
    2670:	90 93 fb 30 	sts	0x30FB, r25	; 0x8030fb <GlobalSec+0x1>
			if(GlobalSec >= 60) {
    2674:	80 91 fa 30 	lds	r24, 0x30FA	; 0x8030fa <GlobalSec>
    2678:	90 91 fb 30 	lds	r25, 0x30FB	; 0x8030fb <GlobalSec+0x1>
    267c:	cc 97       	sbiw	r24, 0x3c	; 60
    267e:	6c f0       	brlt	.+26     	; 0x269a <vTimeMeasurement+0x60>
				GlobalSec = 0;
    2680:	10 92 fa 30 	sts	0x30FA, r1	; 0x8030fa <GlobalSec>
    2684:	10 92 fb 30 	sts	0x30FB, r1	; 0x8030fb <GlobalSec+0x1>
				GlobalMin++;
    2688:	80 91 f8 30 	lds	r24, 0x30F8	; 0x8030f8 <GlobalMin>
    268c:	90 91 f9 30 	lds	r25, 0x30F9	; 0x8030f9 <GlobalMin+0x1>
    2690:	01 96       	adiw	r24, 0x01	; 1
    2692:	80 93 f8 30 	sts	0x30F8, r24	; 0x8030f8 <GlobalMin>
    2696:	90 93 f9 30 	sts	0x30F9, r25	; 0x8030f9 <GlobalMin+0x1>
			}
			if(GlobalMin >= 60) {
    269a:	80 91 f8 30 	lds	r24, 0x30F8	; 0x8030f8 <GlobalMin>
    269e:	90 91 f9 30 	lds	r25, 0x30F9	; 0x8030f9 <GlobalMin+0x1>
    26a2:	cc 97       	sbiw	r24, 0x3c	; 60
    26a4:	24 f0       	brlt	.+8      	; 0x26ae <vTimeMeasurement+0x74>
				GlobalMin = 0;
    26a6:	10 92 f8 30 	sts	0x30F8, r1	; 0x8030f8 <GlobalMin>
    26aa:	10 92 f9 30 	sts	0x30F9, r1	; 0x8030f9 <GlobalMin+0x1>
			}
		}
		if (Reset)
    26ae:	80 91 f7 30 	lds	r24, 0x30F7	; 0x8030f7 <Reset>
    26b2:	88 23       	and	r24, r24
    26b4:	51 f0       	breq	.+20     	; 0x26ca <vTimeMeasurement+0x90>
		{
			GlobalSec = 0;
    26b6:	10 92 fa 30 	sts	0x30FA, r1	; 0x8030fa <GlobalSec>
    26ba:	10 92 fb 30 	sts	0x30FB, r1	; 0x8030fb <GlobalSec+0x1>
			GlobalMin = 0;
    26be:	10 92 f8 30 	sts	0x30F8, r1	; 0x8030f8 <GlobalMin>
    26c2:	10 92 f9 30 	sts	0x30F9, r1	; 0x8030f9 <GlobalMin+0x1>
			Reset = 0;
    26c6:	10 92 f7 30 	sts	0x30F7, r1	; 0x8030f7 <Reset>
		}
		vTaskDelayUntil(&lasttime, 1000/portTICK_RATE_MS);
    26ca:	48 ee       	ldi	r20, 0xE8	; 232
    26cc:	53 e0       	ldi	r21, 0x03	; 3
    26ce:	60 e0       	ldi	r22, 0x00	; 0
    26d0:	70 e0       	ldi	r23, 0x00	; 0
    26d2:	ce 01       	movw	r24, r28
    26d4:	01 96       	adiw	r24, 0x01	; 1
    26d6:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <vTaskDelayUntil>
	}
    26da:	bb cf       	rjmp	.-138    	; 0x2652 <vTimeMeasurement+0x18>

000026dc <vPiLeibniz>:


void vPiLeibniz(void* pvParameters)												//Approximation of Pi by Leibniz Method
{
	uint32_t CurIterations = 0;
	float NextSign = 1.0;
    26dc:	0f 2e       	mov	r0, r31
    26de:	81 2c       	mov	r8, r1
    26e0:	91 2c       	mov	r9, r1
    26e2:	f0 e8       	ldi	r31, 0x80	; 128
    26e4:	af 2e       	mov	r10, r31
    26e6:	ff e3       	ldi	r31, 0x3F	; 63
    26e8:	bf 2e       	mov	r11, r31
    26ea:	f0 2d       	mov	r31, r0
}


void vPiLeibniz(void* pvParameters)												//Approximation of Pi by Leibniz Method
{
	uint32_t CurIterations = 0;
    26ec:	c1 2c       	mov	r12, r1
    26ee:	d1 2c       	mov	r13, r1
    26f0:	76 01       	movw	r14, r12
	float NextSign = 1.0;
		while (1)
		{
			if (State == RunLeibniz)
    26f2:	80 91 f6 30 	lds	r24, 0x30F6	; 0x8030f6 <State>
    26f6:	82 30       	cpi	r24, 0x02	; 2
    26f8:	a9 f5       	brne	.+106    	; 0x2764 <vPiLeibniz+0x88>
			{
				LeibnizPi = LeibnizPi + (NextSign / (2 * CurIterations + 1)) * 4;
    26fa:	d7 01       	movw	r26, r14
    26fc:	c6 01       	movw	r24, r12
    26fe:	88 0f       	add	r24, r24
    2700:	99 1f       	adc	r25, r25
    2702:	aa 1f       	adc	r26, r26
    2704:	bb 1f       	adc	r27, r27
    2706:	bc 01       	movw	r22, r24
    2708:	cd 01       	movw	r24, r26
    270a:	6f 5f       	subi	r22, 0xFF	; 255
    270c:	7f 4f       	sbci	r23, 0xFF	; 255
    270e:	8f 4f       	sbci	r24, 0xFF	; 255
    2710:	9f 4f       	sbci	r25, 0xFF	; 255
    2712:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <__floatunsisf>
    2716:	9b 01       	movw	r18, r22
    2718:	ac 01       	movw	r20, r24
    271a:	c5 01       	movw	r24, r10
    271c:	b4 01       	movw	r22, r8
    271e:	0e 94 b5 1c 	call	0x396a	; 0x396a <__divsf3>
    2722:	20 e0       	ldi	r18, 0x00	; 0
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	40 e8       	ldi	r20, 0x80	; 128
    2728:	50 e4       	ldi	r21, 0x40	; 64
    272a:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <__mulsf3>
    272e:	20 91 00 31 	lds	r18, 0x3100	; 0x803100 <LeibnizPi>
    2732:	30 91 01 31 	lds	r19, 0x3101	; 0x803101 <LeibnizPi+0x1>
    2736:	40 91 02 31 	lds	r20, 0x3102	; 0x803102 <LeibnizPi+0x2>
    273a:	50 91 03 31 	lds	r21, 0x3103	; 0x803103 <LeibnizPi+0x3>
    273e:	0e 94 44 1c 	call	0x3888	; 0x3888 <__addsf3>
    2742:	60 93 00 31 	sts	0x3100, r22	; 0x803100 <LeibnizPi>
    2746:	70 93 01 31 	sts	0x3101, r23	; 0x803101 <LeibnizPi+0x1>
    274a:	80 93 02 31 	sts	0x3102, r24	; 0x803102 <LeibnizPi+0x2>
    274e:	90 93 03 31 	sts	0x3103, r25	; 0x803103 <LeibnizPi+0x3>
				NextSign = - NextSign;
    2752:	b7 fa       	bst	r11, 7
    2754:	b0 94       	com	r11
    2756:	b7 f8       	bld	r11, 7
    2758:	b0 94       	com	r11
				CurIterations++;
    275a:	8f ef       	ldi	r24, 0xFF	; 255
    275c:	c8 1a       	sub	r12, r24
    275e:	d8 0a       	sbc	r13, r24
    2760:	e8 0a       	sbc	r14, r24
    2762:	f8 0a       	sbc	r15, r24
			}
			if (Reset)
    2764:	80 91 f7 30 	lds	r24, 0x30F7	; 0x8030f7 <Reset>
    2768:	88 23       	and	r24, r24
    276a:	99 f0       	breq	.+38     	; 0x2792 <vPiLeibniz+0xb6>
			{
				LeibnizPi = 0;
    276c:	10 92 00 31 	sts	0x3100, r1	; 0x803100 <LeibnizPi>
    2770:	10 92 01 31 	sts	0x3101, r1	; 0x803101 <LeibnizPi+0x1>
    2774:	10 92 02 31 	sts	0x3102, r1	; 0x803102 <LeibnizPi+0x2>
    2778:	10 92 03 31 	sts	0x3103, r1	; 0x803103 <LeibnizPi+0x3>
				CurIterations = 0;
				NextSign = 1.0;
    277c:	0f 2e       	mov	r0, r31
    277e:	81 2c       	mov	r8, r1
    2780:	91 2c       	mov	r9, r1
    2782:	f0 e8       	ldi	r31, 0x80	; 128
    2784:	af 2e       	mov	r10, r31
    2786:	ff e3       	ldi	r31, 0x3F	; 63
    2788:	bf 2e       	mov	r11, r31
    278a:	f0 2d       	mov	r31, r0
				CurIterations++;
			}
			if (Reset)
			{
				LeibnizPi = 0;
				CurIterations = 0;
    278c:	c1 2c       	mov	r12, r1
    278e:	d1 2c       	mov	r13, r1
    2790:	76 01       	movw	r14, r12
				NextSign = 1.0;
			}
			vTaskDelay(10/portTICK_RATE_MS);
    2792:	6a e0       	ldi	r22, 0x0A	; 10
    2794:	70 e0       	ldi	r23, 0x00	; 0
    2796:	80 e0       	ldi	r24, 0x00	; 0
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <vTaskDelay>
		}
    279e:	a9 cf       	rjmp	.-174    	; 0x26f2 <vPiLeibniz+0x16>

000027a0 <vCompare>:
	int32_t RoundVietaPi = 0;
	int32_t RoundLeibPi = 0;
	int32_t RoundRefPi = 0;
	while(1)
	{
		RoundVietaPi = (int32_t) VietaPi * 10e7;
    27a0:	80 91 fc 30 	lds	r24, 0x30FC	; 0x8030fc <VietaPi>
    27a4:	90 91 fd 30 	lds	r25, 0x30FD	; 0x8030fd <VietaPi+0x1>
    27a8:	a0 91 fe 30 	lds	r26, 0x30FE	; 0x8030fe <VietaPi+0x2>
    27ac:	b0 91 ff 30 	lds	r27, 0x30FF	; 0x8030ff <VietaPi+0x3>
		RoundLeibPi = (int32_t) LeibnizPi * 10e7;
    27b0:	80 91 00 31 	lds	r24, 0x3100	; 0x803100 <LeibnizPi>
    27b4:	90 91 01 31 	lds	r25, 0x3101	; 0x803101 <LeibnizPi+0x1>
    27b8:	a0 91 02 31 	lds	r26, 0x3102	; 0x803102 <LeibnizPi+0x2>
    27bc:	b0 91 03 31 	lds	r27, 0x3103	; 0x803103 <LeibnizPi+0x3>
		RoundRefPi = (int32_t) RefPi * 10e7;
    27c0:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    27c4:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    27c8:	a0 91 02 20 	lds	r26, 0x2002	; 0x802002 <__DATA_REGION_ORIGIN__+0x2>
    27cc:	b0 91 03 20 	lds	r27, 0x2003	; 0x802003 <__DATA_REGION_ORIGIN__+0x3>
		if (( RoundRefPi == RoundLeibPi) || ( RoundRefPi == RoundVietaPi))
		{
			
		}
		vTaskDelay(10/portTICK_RATE_MS);
    27d0:	6a e0       	ldi	r22, 0x0A	; 10
    27d2:	70 e0       	ldi	r23, 0x00	; 0
    27d4:	80 e0       	ldi	r24, 0x00	; 0
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <vTaskDelay>
    27dc:	e1 cf       	rjmp	.-62     	; 0x27a0 <vCompare>

000027de <vVietaPi>:

void vVietaPi(void* pvParameters)											//Approximation of Pi by Vieta Method
{

	double CurrentApprox = 1;
	double CurrentSqrt = 0;
    27de:	81 2c       	mov	r8, r1
    27e0:	91 2c       	mov	r9, r1
    27e2:	54 01       	movw	r10, r8
}

void vVietaPi(void* pvParameters)											//Approximation of Pi by Vieta Method
{

	double CurrentApprox = 1;
    27e4:	0f 2e       	mov	r0, r31
    27e6:	c1 2c       	mov	r12, r1
    27e8:	d1 2c       	mov	r13, r1
    27ea:	f0 e8       	ldi	r31, 0x80	; 128
    27ec:	ef 2e       	mov	r14, r31
    27ee:	ff e3       	ldi	r31, 0x3F	; 63
    27f0:	ff 2e       	mov	r15, r31
    27f2:	f0 2d       	mov	r31, r0
	double CurrentSqrt = 0;
	
	while(1)
	{
		
		if ( State == RunVieta)
    27f4:	80 91 f6 30 	lds	r24, 0x30F6	; 0x8030f6 <State>
    27f8:	83 30       	cpi	r24, 0x03	; 3
    27fa:	51 f5       	brne	.+84     	; 0x2850 <vVietaPi+0x72>
		{
			CurrentSqrt = sqrt(2 + CurrentSqrt); 
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	40 e0       	ldi	r20, 0x00	; 0
    2802:	50 e4       	ldi	r21, 0x40	; 64
    2804:	c5 01       	movw	r24, r10
    2806:	b4 01       	movw	r22, r8
    2808:	0e 94 44 1c 	call	0x3888	; 0x3888 <__addsf3>
    280c:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <sqrt>
    2810:	4b 01       	movw	r8, r22
    2812:	5c 01       	movw	r10, r24
			CurrentApprox = CurrentApprox * (CurrentSqrt / 2.0);
    2814:	20 e0       	ldi	r18, 0x00	; 0
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	40 e0       	ldi	r20, 0x00	; 0
    281a:	5f e3       	ldi	r21, 0x3F	; 63
    281c:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <__mulsf3>
    2820:	9b 01       	movw	r18, r22
    2822:	ac 01       	movw	r20, r24
    2824:	c7 01       	movw	r24, r14
    2826:	b6 01       	movw	r22, r12
    2828:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <__mulsf3>
    282c:	6b 01       	movw	r12, r22
    282e:	7c 01       	movw	r14, r24
			VietaPi = 2 / CurrentApprox;
    2830:	9b 01       	movw	r18, r22
    2832:	ac 01       	movw	r20, r24
    2834:	60 e0       	ldi	r22, 0x00	; 0
    2836:	70 e0       	ldi	r23, 0x00	; 0
    2838:	80 e0       	ldi	r24, 0x00	; 0
    283a:	90 e4       	ldi	r25, 0x40	; 64
    283c:	0e 94 b5 1c 	call	0x396a	; 0x396a <__divsf3>
    2840:	60 93 fc 30 	sts	0x30FC, r22	; 0x8030fc <VietaPi>
    2844:	70 93 fd 30 	sts	0x30FD, r23	; 0x8030fd <VietaPi+0x1>
    2848:	80 93 fe 30 	sts	0x30FE, r24	; 0x8030fe <VietaPi+0x2>
    284c:	90 93 ff 30 	sts	0x30FF, r25	; 0x8030ff <VietaPi+0x3>
		}
		if (Reset)
    2850:	80 91 f7 30 	lds	r24, 0x30F7	; 0x8030f7 <Reset>
    2854:	88 23       	and	r24, r24
    2856:	99 f0       	breq	.+38     	; 0x287e <vVietaPi+0xa0>
			{
				CurrentApprox = 1;
				CurrentSqrt = 0;
				VietaPi = 0;
    2858:	10 92 fc 30 	sts	0x30FC, r1	; 0x8030fc <VietaPi>
    285c:	10 92 fd 30 	sts	0x30FD, r1	; 0x8030fd <VietaPi+0x1>
    2860:	10 92 fe 30 	sts	0x30FE, r1	; 0x8030fe <VietaPi+0x2>
    2864:	10 92 ff 30 	sts	0x30FF, r1	; 0x8030ff <VietaPi+0x3>
			VietaPi = 2 / CurrentApprox;
		}
		if (Reset)
			{
				CurrentApprox = 1;
				CurrentSqrt = 0;
    2868:	81 2c       	mov	r8, r1
    286a:	91 2c       	mov	r9, r1
    286c:	54 01       	movw	r10, r8
			CurrentApprox = CurrentApprox * (CurrentSqrt / 2.0);
			VietaPi = 2 / CurrentApprox;
		}
		if (Reset)
			{
				CurrentApprox = 1;
    286e:	0f 2e       	mov	r0, r31
    2870:	c1 2c       	mov	r12, r1
    2872:	d1 2c       	mov	r13, r1
    2874:	f0 e8       	ldi	r31, 0x80	; 128
    2876:	ef 2e       	mov	r14, r31
    2878:	ff e3       	ldi	r31, 0x3F	; 63
    287a:	ff 2e       	mov	r15, r31
    287c:	f0 2d       	mov	r31, r0
				CurrentSqrt = 0;
				VietaPi = 0;
			}
		vTaskDelay(10/portTICK_RATE_MS);
    287e:	6a e0       	ldi	r22, 0x0A	; 10
    2880:	70 e0       	ldi	r23, 0x00	; 0
    2882:	80 e0       	ldi	r24, 0x00	; 0
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <vTaskDelay>
	}
    288a:	b4 cf       	rjmp	.-152    	; 0x27f4 <vVietaPi+0x16>

0000288c <vDisplaytask>:
}



void vDisplaytask(void* pvParameters)									//Display Task
{
    288c:	cf 93       	push	r28
    288e:	df 93       	push	r29
    2890:	cd b7       	in	r28, 0x3d	; 61
    2892:	de b7       	in	r29, 0x3e	; 62
    2894:	c4 55       	subi	r28, 0x54	; 84
    2896:	d1 09       	sbc	r29, r1
    2898:	cd bf       	out	0x3d, r28	; 61
    289a:	de bf       	out	0x3e, r29	; 62
	TickType_t lasttime = xTaskGetTickCount();
    289c:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <xTaskGetTickCount>
    28a0:	69 83       	std	Y+1, r22	; 0x01
    28a2:	7a 83       	std	Y+2, r23	; 0x02
    28a4:	8b 83       	std	Y+3, r24	; 0x03
    28a6:	9c 83       	std	Y+4, r25	; 0x04
	char TitleString[20];
	char TimeString[20];
	
	while(1)
	{
		switch(State)
    28a8:	80 91 f6 30 	lds	r24, 0x30F6	; 0x8030f6 <State>
    28ac:	81 30       	cpi	r24, 0x01	; 1
    28ae:	49 f1       	breq	.+82     	; 0x2902 <vDisplaytask+0x76>
    28b0:	30 f0       	brcs	.+12     	; 0x28be <vDisplaytask+0x32>
    28b2:	82 30       	cpi	r24, 0x02	; 2
    28b4:	21 f0       	breq	.+8      	; 0x28be <vDisplaytask+0x32>
    28b6:	83 30       	cpi	r24, 0x03	; 3
    28b8:	09 f0       	breq	.+2      	; 0x28bc <vDisplaytask+0x30>
    28ba:	45 c0       	rjmp	.+138    	; 0x2946 <vDisplaytask+0xba>
    28bc:	22 c0       	rjmp	.+68     	; 0x2902 <vDisplaytask+0x76>
		{
			
		case RunLeibniz:	
		case StopLeibniz:
			sprintf(&TitleString[0], "Leibniz Approx:");	
    28be:	80 e1       	ldi	r24, 0x10	; 16
    28c0:	e1 e1       	ldi	r30, 0x11	; 17
    28c2:	f0 e2       	ldi	r31, 0x20	; 32
    28c4:	de 01       	movw	r26, r28
    28c6:	9d 96       	adiw	r26, 0x2d	; 45
    28c8:	01 90       	ld	r0, Z+
    28ca:	0d 92       	st	X+, r0
    28cc:	8a 95       	dec	r24
    28ce:	e1 f7       	brne	.-8      	; 0x28c8 <vDisplaytask+0x3c>
			sprintf(&ApproxPiString[0], "ApproxPI: %.8f", LeibnizPi);
    28d0:	80 91 00 31 	lds	r24, 0x3100	; 0x803100 <LeibnizPi>
    28d4:	90 91 01 31 	lds	r25, 0x3101	; 0x803101 <LeibnizPi+0x1>
    28d8:	a0 91 02 31 	lds	r26, 0x3102	; 0x803102 <LeibnizPi+0x2>
    28dc:	b0 91 03 31 	lds	r27, 0x3103	; 0x803103 <LeibnizPi+0x3>
    28e0:	bf 93       	push	r27
    28e2:	af 93       	push	r26
    28e4:	9f 93       	push	r25
    28e6:	8f 93       	push	r24
    28e8:	81 e2       	ldi	r24, 0x21	; 33
    28ea:	90 e2       	ldi	r25, 0x20	; 32
    28ec:	9f 93       	push	r25
    28ee:	8f 93       	push	r24
    28f0:	ce 01       	movw	r24, r28
    28f2:	05 96       	adiw	r24, 0x05	; 5
    28f4:	9f 93       	push	r25
    28f6:	8f 93       	push	r24
    28f8:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <sprintf>
			break;
    28fc:	cd bf       	out	0x3d, r28	; 61
    28fe:	de bf       	out	0x3e, r29	; 62
    2900:	24 c0       	rjmp	.+72     	; 0x294a <vDisplaytask+0xbe>
		case RunVieta:
		case StopVieta:
			sprintf(&TitleString[0], "Vieta Approx:");
    2902:	8e e0       	ldi	r24, 0x0E	; 14
    2904:	e0 e3       	ldi	r30, 0x30	; 48
    2906:	f0 e2       	ldi	r31, 0x20	; 32
    2908:	de 01       	movw	r26, r28
    290a:	9d 96       	adiw	r26, 0x2d	; 45
    290c:	01 90       	ld	r0, Z+
    290e:	0d 92       	st	X+, r0
    2910:	8a 95       	dec	r24
    2912:	e1 f7       	brne	.-8      	; 0x290c <vDisplaytask+0x80>
			sprintf(&ApproxPiString[0], "ApproxPI: %.8f", VietaPi);
    2914:	80 91 fc 30 	lds	r24, 0x30FC	; 0x8030fc <VietaPi>
    2918:	90 91 fd 30 	lds	r25, 0x30FD	; 0x8030fd <VietaPi+0x1>
    291c:	a0 91 fe 30 	lds	r26, 0x30FE	; 0x8030fe <VietaPi+0x2>
    2920:	b0 91 ff 30 	lds	r27, 0x30FF	; 0x8030ff <VietaPi+0x3>
    2924:	bf 93       	push	r27
    2926:	af 93       	push	r26
    2928:	9f 93       	push	r25
    292a:	8f 93       	push	r24
    292c:	81 e2       	ldi	r24, 0x21	; 33
    292e:	90 e2       	ldi	r25, 0x20	; 32
    2930:	9f 93       	push	r25
    2932:	8f 93       	push	r24
    2934:	ce 01       	movw	r24, r28
    2936:	05 96       	adiw	r24, 0x05	; 5
    2938:	9f 93       	push	r25
    293a:	8f 93       	push	r24
    293c:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <sprintf>
			break;
    2940:	cd bf       	out	0x3d, r28	; 61
    2942:	de bf       	out	0x3e, r29	; 62
    2944:	02 c0       	rjmp	.+4      	; 0x294a <vDisplaytask+0xbe>
		default:
			State = StopLeibniz;
    2946:	10 92 f6 30 	sts	0x30F6, r1	; 0x8030f6 <State>
			break;
		}
	sprintf(&RefPiString[0], "Ref PI: %.8f", RefPi);
    294a:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    294e:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    2952:	a0 91 02 20 	lds	r26, 0x2002	; 0x802002 <__DATA_REGION_ORIGIN__+0x2>
    2956:	b0 91 03 20 	lds	r27, 0x2003	; 0x802003 <__DATA_REGION_ORIGIN__+0x3>
    295a:	bf 93       	push	r27
    295c:	af 93       	push	r26
    295e:	9f 93       	push	r25
    2960:	8f 93       	push	r24
    2962:	8e e3       	ldi	r24, 0x3E	; 62
    2964:	90 e2       	ldi	r25, 0x20	; 32
    2966:	9f 93       	push	r25
    2968:	8f 93       	push	r24
    296a:	ce 01       	movw	r24, r28
    296c:	49 96       	adiw	r24, 0x19	; 25
    296e:	9f 93       	push	r25
    2970:	8f 93       	push	r24
    2972:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <sprintf>
	sprintf(&TimeString[0], "Time: %.2i:%.2i", GlobalMin, GlobalSec);
    2976:	20 91 fa 30 	lds	r18, 0x30FA	; 0x8030fa <GlobalSec>
    297a:	30 91 fb 30 	lds	r19, 0x30FB	; 0x8030fb <GlobalSec+0x1>
    297e:	80 91 f8 30 	lds	r24, 0x30F8	; 0x8030f8 <GlobalMin>
    2982:	90 91 f9 30 	lds	r25, 0x30F9	; 0x8030f9 <GlobalMin+0x1>
    2986:	3f 93       	push	r19
    2988:	2f 93       	push	r18
    298a:	9f 93       	push	r25
    298c:	8f 93       	push	r24
    298e:	8b e4       	ldi	r24, 0x4B	; 75
    2990:	90 e2       	ldi	r25, 0x20	; 32
    2992:	9f 93       	push	r25
    2994:	8f 93       	push	r24
    2996:	7e 01       	movw	r14, r28
    2998:	91 e4       	ldi	r25, 0x41	; 65
    299a:	e9 0e       	add	r14, r25
    299c:	f1 1c       	adc	r15, r1
    299e:	ff 92       	push	r15
    29a0:	ef 92       	push	r14
    29a2:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <sprintf>
	vDisplayWriteStringAtPos(0,0, "%s", TitleString);	
    29a6:	ce 01       	movw	r24, r28
    29a8:	8d 96       	adiw	r24, 0x2d	; 45
    29aa:	9f 93       	push	r25
    29ac:	8f 93       	push	r24
    29ae:	0b e5       	ldi	r16, 0x5B	; 91
    29b0:	10 e2       	ldi	r17, 0x20	; 32
    29b2:	1f 93       	push	r17
    29b4:	0f 93       	push	r16
    29b6:	1f 92       	push	r1
    29b8:	1f 92       	push	r1
    29ba:	1f 92       	push	r1
    29bc:	1f 92       	push	r1
    29be:	0e 94 31 1c 	call	0x3862	; 0x3862 <vDisplayWriteStringAtPos>
	vDisplayWriteStringAtPos(1,0, "%s", ApproxPiString);	
    29c2:	ce 01       	movw	r24, r28
    29c4:	05 96       	adiw	r24, 0x05	; 5
    29c6:	9f 93       	push	r25
    29c8:	8f 93       	push	r24
    29ca:	1f 93       	push	r17
    29cc:	0f 93       	push	r16
    29ce:	1f 92       	push	r1
    29d0:	1f 92       	push	r1
    29d2:	1f 92       	push	r1
    29d4:	81 e0       	ldi	r24, 0x01	; 1
    29d6:	8f 93       	push	r24
    29d8:	0e 94 31 1c 	call	0x3862	; 0x3862 <vDisplayWriteStringAtPos>
	vDisplayWriteStringAtPos(2,0, "%s", RefPi);	
    29dc:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    29e0:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    29e4:	a0 91 02 20 	lds	r26, 0x2002	; 0x802002 <__DATA_REGION_ORIGIN__+0x2>
    29e8:	b0 91 03 20 	lds	r27, 0x2003	; 0x802003 <__DATA_REGION_ORIGIN__+0x3>
    29ec:	cd bf       	out	0x3d, r28	; 61
    29ee:	de bf       	out	0x3e, r29	; 62
    29f0:	bf 93       	push	r27
    29f2:	af 93       	push	r26
    29f4:	9f 93       	push	r25
    29f6:	8f 93       	push	r24
    29f8:	1f 93       	push	r17
    29fa:	0f 93       	push	r16
    29fc:	1f 92       	push	r1
    29fe:	1f 92       	push	r1
    2a00:	1f 92       	push	r1
    2a02:	82 e0       	ldi	r24, 0x02	; 2
    2a04:	8f 93       	push	r24
    2a06:	0e 94 31 1c 	call	0x3862	; 0x3862 <vDisplayWriteStringAtPos>
	vDisplayWriteStringAtPos(3,0, "%s", TimeString);
    2a0a:	ff 92       	push	r15
    2a0c:	ef 92       	push	r14
    2a0e:	1f 93       	push	r17
    2a10:	0f 93       	push	r16
    2a12:	1f 92       	push	r1
    2a14:	1f 92       	push	r1
    2a16:	1f 92       	push	r1
    2a18:	83 e0       	ldi	r24, 0x03	; 3
    2a1a:	8f 93       	push	r24
    2a1c:	0e 94 31 1c 	call	0x3862	; 0x3862 <vDisplayWriteStringAtPos>
	vTaskDelayUntil(&lasttime, 500/portTICK_RATE_MS);
    2a20:	44 ef       	ldi	r20, 0xF4	; 244
    2a22:	51 e0       	ldi	r21, 0x01	; 1
    2a24:	60 e0       	ldi	r22, 0x00	; 0
    2a26:	70 e0       	ldi	r23, 0x00	; 0
    2a28:	ce 01       	movw	r24, r28
    2a2a:	01 96       	adiw	r24, 0x01	; 1
    2a2c:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <vTaskDelayUntil>
	}
    2a30:	cd bf       	out	0x3d, r28	; 61
    2a32:	de bf       	out	0x3e, r29	; 62
    2a34:	39 cf       	rjmp	.-398    	; 0x28a8 <vDisplaytask+0x1c>

00002a36 <controllerTask>:

}


void controllerTask(void* pvParameters) {
	initButtons();
    2a36:	0e 94 4f 01 	call	0x29e	; 0x29e <initButtons>
	for(;;) {
		updateButtons();
    2a3a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <updateButtons>
		if(getButtonPress(BUTTON1) == SHORT_PRESSED) {
    2a3e:	80 e0       	ldi	r24, 0x00	; 0
    2a40:	0e 94 ff 01 	call	0x3fe	; 0x3fe <getButtonPress>
    2a44:	81 30       	cpi	r24, 0x01	; 1
    2a46:	79 f4       	brne	.+30     	; 0x2a66 <controllerTask+0x30>
			if (State == StopLeibniz)
    2a48:	80 91 f6 30 	lds	r24, 0x30F6	; 0x8030f6 <State>
    2a4c:	81 11       	cpse	r24, r1
    2a4e:	04 c0       	rjmp	.+8      	; 0x2a58 <controllerTask+0x22>
			{
				State = RunLeibniz;
    2a50:	82 e0       	ldi	r24, 0x02	; 2
    2a52:	80 93 f6 30 	sts	0x30F6, r24	; 0x8030f6 <State>
    2a56:	07 c0       	rjmp	.+14     	; 0x2a66 <controllerTask+0x30>
			}
			else if (State == StopVieta)
    2a58:	80 91 f6 30 	lds	r24, 0x30F6	; 0x8030f6 <State>
    2a5c:	81 30       	cpi	r24, 0x01	; 1
    2a5e:	19 f4       	brne	.+6      	; 0x2a66 <controllerTask+0x30>
			{
				State = RunVieta;
    2a60:	83 e0       	ldi	r24, 0x03	; 3
    2a62:	80 93 f6 30 	sts	0x30F6, r24	; 0x8030f6 <State>
			}
		}
		if(getButtonPress(BUTTON2) == SHORT_PRESSED) {
    2a66:	81 e0       	ldi	r24, 0x01	; 1
    2a68:	0e 94 ff 01 	call	0x3fe	; 0x3fe <getButtonPress>
    2a6c:	81 30       	cpi	r24, 0x01	; 1
    2a6e:	71 f4       	brne	.+28     	; 0x2a8c <controllerTask+0x56>
			if (State == RunLeibniz)
    2a70:	80 91 f6 30 	lds	r24, 0x30F6	; 0x8030f6 <State>
    2a74:	82 30       	cpi	r24, 0x02	; 2
    2a76:	19 f4       	brne	.+6      	; 0x2a7e <controllerTask+0x48>
			{
				State = StopLeibniz;
    2a78:	10 92 f6 30 	sts	0x30F6, r1	; 0x8030f6 <State>
    2a7c:	07 c0       	rjmp	.+14     	; 0x2a8c <controllerTask+0x56>
			}
			else if (State == RunVieta)
    2a7e:	80 91 f6 30 	lds	r24, 0x30F6	; 0x8030f6 <State>
    2a82:	83 30       	cpi	r24, 0x03	; 3
    2a84:	19 f4       	brne	.+6      	; 0x2a8c <controllerTask+0x56>
			{
				State = StopVieta;	
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	80 93 f6 30 	sts	0x30F6, r24	; 0x8030f6 <State>
			}
		}
		if(getButtonPress(BUTTON3) == SHORT_PRESSED) {
    2a8c:	82 e0       	ldi	r24, 0x02	; 2
    2a8e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <getButtonPress>
    2a92:	81 30       	cpi	r24, 0x01	; 1
    2a94:	81 f4       	brne	.+32     	; 0x2ab6 <controllerTask+0x80>
			Reset = 1;
    2a96:	80 93 f7 30 	sts	0x30F7, r24	; 0x8030f7 <Reset>
			if (State == RunLeibniz)
    2a9a:	80 91 f6 30 	lds	r24, 0x30F6	; 0x8030f6 <State>
    2a9e:	82 30       	cpi	r24, 0x02	; 2
    2aa0:	19 f4       	brne	.+6      	; 0x2aa8 <controllerTask+0x72>
			{
				State = StopLeibniz;
    2aa2:	10 92 f6 30 	sts	0x30F6, r1	; 0x8030f6 <State>
    2aa6:	07 c0       	rjmp	.+14     	; 0x2ab6 <controllerTask+0x80>
			}
			else if (State == RunVieta)
    2aa8:	80 91 f6 30 	lds	r24, 0x30F6	; 0x8030f6 <State>
    2aac:	83 30       	cpi	r24, 0x03	; 3
    2aae:	19 f4       	brne	.+6      	; 0x2ab6 <controllerTask+0x80>
			{
				State = StopVieta;	
    2ab0:	81 e0       	ldi	r24, 0x01	; 1
    2ab2:	80 93 f6 30 	sts	0x30F6, r24	; 0x8030f6 <State>
			}
		}
		if(getButtonPress(BUTTON4) == SHORT_PRESSED) {
    2ab6:	83 e0       	ldi	r24, 0x03	; 3
    2ab8:	0e 94 ff 01 	call	0x3fe	; 0x3fe <getButtonPress>
    2abc:	81 30       	cpi	r24, 0x01	; 1
    2abe:	f1 f4       	brne	.+60     	; 0x2afc <controllerTask+0xc6>
			if(State == StopLeibniz)
    2ac0:	80 91 f6 30 	lds	r24, 0x30F6	; 0x8030f6 <State>
    2ac4:	81 11       	cpse	r24, r1
    2ac6:	04 c0       	rjmp	.+8      	; 0x2ad0 <controllerTask+0x9a>
			{
				State = StopVieta;
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	80 93 f6 30 	sts	0x30F6, r24	; 0x8030f6 <State>
    2ace:	16 c0       	rjmp	.+44     	; 0x2afc <controllerTask+0xc6>
			}
			else if (State == StopVieta)
    2ad0:	80 91 f6 30 	lds	r24, 0x30F6	; 0x8030f6 <State>
    2ad4:	81 30       	cpi	r24, 0x01	; 1
    2ad6:	19 f4       	brne	.+6      	; 0x2ade <controllerTask+0xa8>
			{
				State = StopLeibniz;
    2ad8:	10 92 f6 30 	sts	0x30F6, r1	; 0x8030f6 <State>
    2adc:	0f c0       	rjmp	.+30     	; 0x2afc <controllerTask+0xc6>
			}
			else if(State == RunLeibniz)
    2ade:	80 91 f6 30 	lds	r24, 0x30F6	; 0x8030f6 <State>
    2ae2:	82 30       	cpi	r24, 0x02	; 2
    2ae4:	21 f4       	brne	.+8      	; 0x2aee <controllerTask+0xb8>
			{
				State = RunVieta;
    2ae6:	83 e0       	ldi	r24, 0x03	; 3
    2ae8:	80 93 f6 30 	sts	0x30F6, r24	; 0x8030f6 <State>
    2aec:	07 c0       	rjmp	.+14     	; 0x2afc <controllerTask+0xc6>
			}
			else if (State == RunVieta)
    2aee:	80 91 f6 30 	lds	r24, 0x30F6	; 0x8030f6 <State>
    2af2:	83 30       	cpi	r24, 0x03	; 3
    2af4:	19 f4       	brne	.+6      	; 0x2afc <controllerTask+0xc6>
			{
				State = RunLeibniz;
    2af6:	82 e0       	ldi	r24, 0x02	; 2
    2af8:	80 93 f6 30 	sts	0x30F6, r24	; 0x8030f6 <State>
			}	
		}
		vTaskDelay(10/portTICK_RATE_MS);
    2afc:	6a e0       	ldi	r22, 0x0A	; 10
    2afe:	70 e0       	ldi	r23, 0x00	; 0
    2b00:	80 e0       	ldi	r24, 0x00	; 0
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <vTaskDelay>
	}
    2b08:	98 cf       	rjmp	.-208    	; 0x2a3a <controllerTask+0x4>

00002b0a <vApplicationIdleHook>:
/*********************************************************************************
Idle Task
*********************************************************************************/

void vApplicationIdleHook( void )
{	
    2b0a:	08 95       	ret

00002b0c <main>:
/*********************************************************************************
Main
*********************************************************************************/

int main(void)
{
    2b0c:	ef 92       	push	r14
    2b0e:	ff 92       	push	r15
    2b10:	0f 93       	push	r16
	vInitClock();
    2b12:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <vInitClock>
	vInitDisplay();
    2b16:	0e 94 a5 1a 	call	0x354a	; 0x354a <vInitDisplay>
	
	xTaskCreate(controllerTask, (const char *) "vControl_tsk", configMINIMAL_STACK_SIZE+150, NULL, 3, NULL);
    2b1a:	e1 2c       	mov	r14, r1
    2b1c:	f1 2c       	mov	r15, r1
    2b1e:	03 e0       	ldi	r16, 0x03	; 3
    2b20:	20 e0       	ldi	r18, 0x00	; 0
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	4e e5       	ldi	r20, 0x5E	; 94
    2b26:	51 e0       	ldi	r21, 0x01	; 1
    2b28:	6e e5       	ldi	r22, 0x5E	; 94
    2b2a:	70 e2       	ldi	r23, 0x20	; 32
    2b2c:	8b e1       	ldi	r24, 0x1B	; 27
    2b2e:	95 e1       	ldi	r25, 0x15	; 21
    2b30:	0e 94 45 0b 	call	0x168a	; 0x168a <xTaskCreate>
	//xTaskCreate(vButtonTask, (const char *) "btTask", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
	xTaskCreate( vPiLeibniz, (const char *) "vLeibniz_tsk", configMINIMAL_STACK_SIZE+10, NULL, 2, NULL);
    2b34:	02 e0       	ldi	r16, 0x02	; 2
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	42 ed       	ldi	r20, 0xD2	; 210
    2b3c:	50 e0       	ldi	r21, 0x00	; 0
    2b3e:	6b e6       	ldi	r22, 0x6B	; 107
    2b40:	70 e2       	ldi	r23, 0x20	; 32
    2b42:	8e e6       	ldi	r24, 0x6E	; 110
    2b44:	93 e1       	ldi	r25, 0x13	; 19
    2b46:	0e 94 45 0b 	call	0x168a	; 0x168a <xTaskCreate>
	xTaskCreate( vVietaPi, (const char *) "vVietaPi_tsk", configMINIMAL_STACK_SIZE+10, NULL, 2, NULL);
    2b4a:	20 e0       	ldi	r18, 0x00	; 0
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	42 ed       	ldi	r20, 0xD2	; 210
    2b50:	50 e0       	ldi	r21, 0x00	; 0
    2b52:	68 e7       	ldi	r22, 0x78	; 120
    2b54:	70 e2       	ldi	r23, 0x20	; 32
    2b56:	8f ee       	ldi	r24, 0xEF	; 239
    2b58:	93 e1       	ldi	r25, 0x13	; 19
    2b5a:	0e 94 45 0b 	call	0x168a	; 0x168a <xTaskCreate>
	xTaskCreate( vCompare, (const char *) "vComp_tsk", configMINIMAL_STACK_SIZE+10, NULL, 3, NULL);
    2b5e:	03 e0       	ldi	r16, 0x03	; 3
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	42 ed       	ldi	r20, 0xD2	; 210
    2b66:	50 e0       	ldi	r21, 0x00	; 0
    2b68:	65 e8       	ldi	r22, 0x85	; 133
    2b6a:	70 e2       	ldi	r23, 0x20	; 32
    2b6c:	80 ed       	ldi	r24, 0xD0	; 208
    2b6e:	93 e1       	ldi	r25, 0x13	; 19
    2b70:	0e 94 45 0b 	call	0x168a	; 0x168a <xTaskCreate>
	xTaskCreate( vDisplaytask, (const char *) "vDisp_tsk", configMINIMAL_STACK_SIZE+150, NULL, 2, NULL);
    2b74:	02 e0       	ldi	r16, 0x02	; 2
    2b76:	20 e0       	ldi	r18, 0x00	; 0
    2b78:	30 e0       	ldi	r19, 0x00	; 0
    2b7a:	4e e5       	ldi	r20, 0x5E	; 94
    2b7c:	51 e0       	ldi	r21, 0x01	; 1
    2b7e:	6f e8       	ldi	r22, 0x8F	; 143
    2b80:	70 e2       	ldi	r23, 0x20	; 32
    2b82:	86 e4       	ldi	r24, 0x46	; 70
    2b84:	94 e1       	ldi	r25, 0x14	; 20
    2b86:	0e 94 45 0b 	call	0x168a	; 0x168a <xTaskCreate>
	xTaskCreate( vTimeMeasurement, (const char *) "vTimeMeasurement_tsk", configMINIMAL_STACK_SIZE+100, NULL, 3, NULL);
    2b8a:	03 e0       	ldi	r16, 0x03	; 3
    2b8c:	20 e0       	ldi	r18, 0x00	; 0
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	4c e2       	ldi	r20, 0x2C	; 44
    2b92:	51 e0       	ldi	r21, 0x01	; 1
    2b94:	69 e9       	ldi	r22, 0x99	; 153
    2b96:	70 e2       	ldi	r23, 0x20	; 32
    2b98:	8d e1       	ldi	r24, 0x1D	; 29
    2b9a:	93 e1       	ldi	r25, 0x13	; 19
    2b9c:	0e 94 45 0b 	call	0x168a	; 0x168a <xTaskCreate>
	
	vTaskStartScheduler();
    2ba0:	0e 94 99 0b 	call	0x1732	; 0x1732 <vTaskStartScheduler>
	
	return 0;
}
    2ba4:	80 e0       	ldi	r24, 0x00	; 0
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	0f 91       	pop	r16
    2baa:	ff 90       	pop	r15
    2bac:	ef 90       	pop	r14
    2bae:	08 95       	ret

00002bb0 <normalize>:
	 }
 }
 

void vDisplayClear() {
	xEventGroupSetBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    2bb0:	cf 92       	push	r12
    2bb2:	df 92       	push	r13
    2bb4:	ef 92       	push	r14
    2bb6:	ff 92       	push	r15
    2bb8:	0f 93       	push	r16
    2bba:	1f 93       	push	r17
    2bbc:	cf 93       	push	r28
    2bbe:	df 93       	push	r29
    2bc0:	8c 01       	movw	r16, r24
    2bc2:	fc 01       	movw	r30, r24
    2bc4:	c0 80       	ld	r12, Z
    2bc6:	d1 80       	ldd	r13, Z+1	; 0x01
    2bc8:	e2 80       	ldd	r14, Z+2	; 0x02
    2bca:	f3 80       	ldd	r15, Z+3	; 0x03
    2bcc:	c0 e0       	ldi	r28, 0x00	; 0
    2bce:	d0 e0       	ldi	r29, 0x00	; 0
    2bd0:	0b c0       	rjmp	.+22     	; 0x2be8 <normalize+0x38>
    2bd2:	20 e0       	ldi	r18, 0x00	; 0
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	40 e2       	ldi	r20, 0x20	; 32
    2bd8:	51 e4       	ldi	r21, 0x41	; 65
    2bda:	c7 01       	movw	r24, r14
    2bdc:	b6 01       	movw	r22, r12
    2bde:	0e 94 b5 1c 	call	0x396a	; 0x396a <__divsf3>
    2be2:	6b 01       	movw	r12, r22
    2be4:	7c 01       	movw	r14, r24
    2be6:	21 96       	adiw	r28, 0x01	; 1
    2be8:	20 e0       	ldi	r18, 0x00	; 0
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	40 e8       	ldi	r20, 0x80	; 128
    2bee:	5f e3       	ldi	r21, 0x3F	; 63
    2bf0:	c7 01       	movw	r24, r14
    2bf2:	b6 01       	movw	r22, r12
    2bf4:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__gesf2>
    2bf8:	88 23       	and	r24, r24
    2bfa:	5c f7       	brge	.-42     	; 0x2bd2 <normalize+0x22>
    2bfc:	0b c0       	rjmp	.+22     	; 0x2c14 <normalize+0x64>
    2bfe:	20 e0       	ldi	r18, 0x00	; 0
    2c00:	30 e0       	ldi	r19, 0x00	; 0
    2c02:	40 e2       	ldi	r20, 0x20	; 32
    2c04:	51 e4       	ldi	r21, 0x41	; 65
    2c06:	c7 01       	movw	r24, r14
    2c08:	b6 01       	movw	r22, r12
    2c0a:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <__mulsf3>
    2c0e:	6b 01       	movw	r12, r22
    2c10:	7c 01       	movw	r14, r24
    2c12:	21 97       	sbiw	r28, 0x01	; 1
    2c14:	2d ec       	ldi	r18, 0xCD	; 205
    2c16:	3c ec       	ldi	r19, 0xCC	; 204
    2c18:	4c ec       	ldi	r20, 0xCC	; 204
    2c1a:	5d e3       	ldi	r21, 0x3D	; 61
    2c1c:	c7 01       	movw	r24, r14
    2c1e:	b6 01       	movw	r22, r12
    2c20:	0e 94 b0 1c 	call	0x3960	; 0x3960 <__cmpsf2>
    2c24:	88 23       	and	r24, r24
    2c26:	5c f3       	brlt	.-42     	; 0x2bfe <normalize+0x4e>
    2c28:	f8 01       	movw	r30, r16
    2c2a:	c0 82       	st	Z, r12
    2c2c:	d1 82       	std	Z+1, r13	; 0x01
    2c2e:	e2 82       	std	Z+2, r14	; 0x02
    2c30:	f3 82       	std	Z+3, r15	; 0x03
    2c32:	ce 01       	movw	r24, r28
    2c34:	df 91       	pop	r29
    2c36:	cf 91       	pop	r28
    2c38:	1f 91       	pop	r17
    2c3a:	0f 91       	pop	r16
    2c3c:	ff 90       	pop	r15
    2c3e:	ef 90       	pop	r14
    2c40:	df 90       	pop	r13
    2c42:	cf 90       	pop	r12
    2c44:	08 95       	ret

00002c46 <ftoa_fixed>:
    2c46:	4f 92       	push	r4
    2c48:	5f 92       	push	r5
    2c4a:	6f 92       	push	r6
    2c4c:	7f 92       	push	r7
    2c4e:	8f 92       	push	r8
    2c50:	9f 92       	push	r9
    2c52:	af 92       	push	r10
    2c54:	bf 92       	push	r11
    2c56:	cf 92       	push	r12
    2c58:	df 92       	push	r13
    2c5a:	ef 92       	push	r14
    2c5c:	ff 92       	push	r15
    2c5e:	0f 93       	push	r16
    2c60:	1f 93       	push	r17
    2c62:	cf 93       	push	r28
    2c64:	df 93       	push	r29
    2c66:	00 d0       	rcall	.+0      	; 0x2c68 <ftoa_fixed+0x22>
    2c68:	1f 92       	push	r1
    2c6a:	cd b7       	in	r28, 0x3d	; 61
    2c6c:	de b7       	in	r29, 0x3e	; 62
    2c6e:	5c 01       	movw	r10, r24
    2c70:	e4 2e       	mov	r14, r20
    2c72:	f5 2e       	mov	r15, r21
    2c74:	06 2f       	mov	r16, r22
    2c76:	17 2f       	mov	r17, r23
    2c78:	49 83       	std	Y+1, r20	; 0x01
    2c7a:	5a 83       	std	Y+2, r21	; 0x02
    2c7c:	6b 83       	std	Y+3, r22	; 0x03
    2c7e:	7c 83       	std	Y+4, r23	; 0x04
    2c80:	20 e0       	ldi	r18, 0x00	; 0
    2c82:	30 e0       	ldi	r19, 0x00	; 0
    2c84:	a9 01       	movw	r20, r18
    2c86:	6e 2d       	mov	r22, r14
    2c88:	7f 2d       	mov	r23, r15
    2c8a:	80 2f       	mov	r24, r16
    2c8c:	91 2f       	mov	r25, r17
    2c8e:	0e 94 b0 1c 	call	0x3960	; 0x3960 <__cmpsf2>
    2c92:	81 11       	cpse	r24, r1
    2c94:	05 c0       	rjmp	.+10     	; 0x2ca0 <ftoa_fixed+0x5a>
    2c96:	80 e3       	ldi	r24, 0x30	; 48
    2c98:	f5 01       	movw	r30, r10
    2c9a:	80 83       	st	Z, r24
    2c9c:	11 82       	std	Z+1, r1	; 0x01
    2c9e:	b9 c0       	rjmp	.+370    	; 0x2e12 <ftoa_fixed+0x1cc>
    2ca0:	20 e0       	ldi	r18, 0x00	; 0
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	a9 01       	movw	r20, r18
    2ca6:	6e 2d       	mov	r22, r14
    2ca8:	7f 2d       	mov	r23, r15
    2caa:	80 2f       	mov	r24, r16
    2cac:	91 2f       	mov	r25, r17
    2cae:	0e 94 b0 1c 	call	0x3960	; 0x3960 <__cmpsf2>
    2cb2:	88 23       	and	r24, r24
    2cb4:	7c f4       	brge	.+30     	; 0x2cd4 <ftoa_fixed+0x8e>
    2cb6:	8d e2       	ldi	r24, 0x2D	; 45
    2cb8:	f5 01       	movw	r30, r10
    2cba:	80 83       	st	Z, r24
    2cbc:	89 81       	ldd	r24, Y+1	; 0x01
    2cbe:	9a 81       	ldd	r25, Y+2	; 0x02
    2cc0:	ab 81       	ldd	r26, Y+3	; 0x03
    2cc2:	bc 81       	ldd	r27, Y+4	; 0x04
    2cc4:	b0 58       	subi	r27, 0x80	; 128
    2cc6:	89 83       	std	Y+1, r24	; 0x01
    2cc8:	9a 83       	std	Y+2, r25	; 0x02
    2cca:	ab 83       	std	Y+3, r26	; 0x03
    2ccc:	bc 83       	std	Y+4, r27	; 0x04
    2cce:	c5 01       	movw	r24, r10
    2cd0:	01 96       	adiw	r24, 0x01	; 1
    2cd2:	5c 01       	movw	r10, r24
    2cd4:	ce 01       	movw	r24, r28
    2cd6:	01 96       	adiw	r24, 0x01	; 1
    2cd8:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <normalize>
    2cdc:	7c 01       	movw	r14, r24
    2cde:	00 e0       	ldi	r16, 0x00	; 0
    2ce0:	10 e0       	ldi	r17, 0x00	; 0
    2ce2:	38 c0       	rjmp	.+112    	; 0x2d54 <ftoa_fixed+0x10e>
    2ce4:	20 e0       	ldi	r18, 0x00	; 0
    2ce6:	30 e0       	ldi	r19, 0x00	; 0
    2ce8:	40 e2       	ldi	r20, 0x20	; 32
    2cea:	51 e4       	ldi	r21, 0x41	; 65
    2cec:	69 81       	ldd	r22, Y+1	; 0x01
    2cee:	7a 81       	ldd	r23, Y+2	; 0x02
    2cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf2:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf4:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <__mulsf3>
    2cf8:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__fixsfsi>
    2cfc:	2b 01       	movw	r4, r22
    2cfe:	3c 01       	movw	r6, r24
    2d00:	65 01       	movw	r12, r10
    2d02:	9f ef       	ldi	r25, 0xFF	; 255
    2d04:	c9 1a       	sub	r12, r25
    2d06:	d9 0a       	sbc	r13, r25
    2d08:	80 e3       	ldi	r24, 0x30	; 48
    2d0a:	84 0d       	add	r24, r4
    2d0c:	f5 01       	movw	r30, r10
    2d0e:	80 83       	st	Z, r24
    2d10:	20 e0       	ldi	r18, 0x00	; 0
    2d12:	30 e0       	ldi	r19, 0x00	; 0
    2d14:	40 e2       	ldi	r20, 0x20	; 32
    2d16:	51 e4       	ldi	r21, 0x41	; 65
    2d18:	69 81       	ldd	r22, Y+1	; 0x01
    2d1a:	7a 81       	ldd	r23, Y+2	; 0x02
    2d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d20:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <__mulsf3>
    2d24:	4b 01       	movw	r8, r22
    2d26:	5c 01       	movw	r10, r24
    2d28:	b2 01       	movw	r22, r4
    2d2a:	55 0c       	add	r5, r5
    2d2c:	88 0b       	sbc	r24, r24
    2d2e:	99 0b       	sbc	r25, r25
    2d30:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <__floatsisf>
    2d34:	9b 01       	movw	r18, r22
    2d36:	ac 01       	movw	r20, r24
    2d38:	c5 01       	movw	r24, r10
    2d3a:	b4 01       	movw	r22, r8
    2d3c:	0e 94 43 1c 	call	0x3886	; 0x3886 <__subsf3>
    2d40:	69 83       	std	Y+1, r22	; 0x01
    2d42:	7a 83       	std	Y+2, r23	; 0x02
    2d44:	8b 83       	std	Y+3, r24	; 0x03
    2d46:	9c 83       	std	Y+4, r25	; 0x04
    2d48:	0f 5f       	subi	r16, 0xFF	; 255
    2d4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d4c:	f1 e0       	ldi	r31, 0x01	; 1
    2d4e:	ef 1a       	sub	r14, r31
    2d50:	f1 08       	sbc	r15, r1
    2d52:	56 01       	movw	r10, r12
    2d54:	1e 14       	cp	r1, r14
    2d56:	1f 04       	cpc	r1, r15
    2d58:	2c f2       	brlt	.-118    	; 0x2ce4 <ftoa_fixed+0x9e>
    2d5a:	01 15       	cp	r16, r1
    2d5c:	11 05       	cpc	r17, r1
    2d5e:	31 f4       	brne	.+12     	; 0x2d6c <ftoa_fixed+0x126>
    2d60:	80 e3       	ldi	r24, 0x30	; 48
    2d62:	f5 01       	movw	r30, r10
    2d64:	80 83       	st	Z, r24
    2d66:	c5 01       	movw	r24, r10
    2d68:	01 96       	adiw	r24, 0x01	; 1
    2d6a:	5c 01       	movw	r10, r24
    2d6c:	65 01       	movw	r12, r10
    2d6e:	9f ef       	ldi	r25, 0xFF	; 255
    2d70:	c9 1a       	sub	r12, r25
    2d72:	d9 0a       	sbc	r13, r25
    2d74:	8e e2       	ldi	r24, 0x2E	; 46
    2d76:	f5 01       	movw	r30, r10
    2d78:	80 83       	st	Z, r24
    2d7a:	0b c0       	rjmp	.+22     	; 0x2d92 <ftoa_fixed+0x14c>
    2d7c:	80 e3       	ldi	r24, 0x30	; 48
    2d7e:	f6 01       	movw	r30, r12
    2d80:	80 83       	st	Z, r24
    2d82:	f1 e0       	ldi	r31, 0x01	; 1
    2d84:	ef 1a       	sub	r14, r31
    2d86:	f1 08       	sbc	r15, r1
    2d88:	0f 5f       	subi	r16, 0xFF	; 255
    2d8a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d8c:	c6 01       	movw	r24, r12
    2d8e:	01 96       	adiw	r24, 0x01	; 1
    2d90:	6c 01       	movw	r12, r24
    2d92:	ff 20       	and	r15, r15
    2d94:	cc f5       	brge	.+114    	; 0x2e08 <ftoa_fixed+0x1c2>
    2d96:	04 30       	cpi	r16, 0x04	; 4
    2d98:	11 05       	cpc	r17, r1
    2d9a:	84 f3       	brlt	.-32     	; 0x2d7c <ftoa_fixed+0x136>
    2d9c:	35 c0       	rjmp	.+106    	; 0x2e08 <ftoa_fixed+0x1c2>
    2d9e:	20 e0       	ldi	r18, 0x00	; 0
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	40 e2       	ldi	r20, 0x20	; 32
    2da4:	51 e4       	ldi	r21, 0x41	; 65
    2da6:	69 81       	ldd	r22, Y+1	; 0x01
    2da8:	7a 81       	ldd	r23, Y+2	; 0x02
    2daa:	8b 81       	ldd	r24, Y+3	; 0x03
    2dac:	9c 81       	ldd	r25, Y+4	; 0x04
    2dae:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <__mulsf3>
    2db2:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__fixsfsi>
    2db6:	4b 01       	movw	r8, r22
    2db8:	5c 01       	movw	r10, r24
    2dba:	76 01       	movw	r14, r12
    2dbc:	9f ef       	ldi	r25, 0xFF	; 255
    2dbe:	e9 1a       	sub	r14, r25
    2dc0:	f9 0a       	sbc	r15, r25
    2dc2:	80 e3       	ldi	r24, 0x30	; 48
    2dc4:	88 0d       	add	r24, r8
    2dc6:	f6 01       	movw	r30, r12
    2dc8:	80 83       	st	Z, r24
    2dca:	20 e0       	ldi	r18, 0x00	; 0
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	40 e2       	ldi	r20, 0x20	; 32
    2dd0:	51 e4       	ldi	r21, 0x41	; 65
    2dd2:	69 81       	ldd	r22, Y+1	; 0x01
    2dd4:	7a 81       	ldd	r23, Y+2	; 0x02
    2dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd8:	9c 81       	ldd	r25, Y+4	; 0x04
    2dda:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <__mulsf3>
    2dde:	2b 01       	movw	r4, r22
    2de0:	3c 01       	movw	r6, r24
    2de2:	b4 01       	movw	r22, r8
    2de4:	99 0c       	add	r9, r9
    2de6:	88 0b       	sbc	r24, r24
    2de8:	99 0b       	sbc	r25, r25
    2dea:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <__floatsisf>
    2dee:	9b 01       	movw	r18, r22
    2df0:	ac 01       	movw	r20, r24
    2df2:	c3 01       	movw	r24, r6
    2df4:	b2 01       	movw	r22, r4
    2df6:	0e 94 43 1c 	call	0x3886	; 0x3886 <__subsf3>
    2dfa:	69 83       	std	Y+1, r22	; 0x01
    2dfc:	7a 83       	std	Y+2, r23	; 0x02
    2dfe:	8b 83       	std	Y+3, r24	; 0x03
    2e00:	9c 83       	std	Y+4, r25	; 0x04
    2e02:	0f 5f       	subi	r16, 0xFF	; 255
    2e04:	1f 4f       	sbci	r17, 0xFF	; 255
    2e06:	67 01       	movw	r12, r14
    2e08:	04 30       	cpi	r16, 0x04	; 4
    2e0a:	11 05       	cpc	r17, r1
    2e0c:	44 f2       	brlt	.-112    	; 0x2d9e <ftoa_fixed+0x158>
    2e0e:	f6 01       	movw	r30, r12
    2e10:	10 82       	st	Z, r1
    2e12:	24 96       	adiw	r28, 0x04	; 4
    2e14:	cd bf       	out	0x3d, r28	; 61
    2e16:	de bf       	out	0x3e, r29	; 62
    2e18:	df 91       	pop	r29
    2e1a:	cf 91       	pop	r28
    2e1c:	1f 91       	pop	r17
    2e1e:	0f 91       	pop	r16
    2e20:	ff 90       	pop	r15
    2e22:	ef 90       	pop	r14
    2e24:	df 90       	pop	r13
    2e26:	cf 90       	pop	r12
    2e28:	bf 90       	pop	r11
    2e2a:	af 90       	pop	r10
    2e2c:	9f 90       	pop	r9
    2e2e:	8f 90       	pop	r8
    2e30:	7f 90       	pop	r7
    2e32:	6f 90       	pop	r6
    2e34:	5f 90       	pop	r5
    2e36:	4f 90       	pop	r4
    2e38:	08 95       	ret

00002e3a <ftoa_sci>:
    2e3a:	2f 92       	push	r2
    2e3c:	3f 92       	push	r3
    2e3e:	4f 92       	push	r4
    2e40:	5f 92       	push	r5
    2e42:	6f 92       	push	r6
    2e44:	7f 92       	push	r7
    2e46:	8f 92       	push	r8
    2e48:	9f 92       	push	r9
    2e4a:	af 92       	push	r10
    2e4c:	bf 92       	push	r11
    2e4e:	cf 92       	push	r12
    2e50:	df 92       	push	r13
    2e52:	ef 92       	push	r14
    2e54:	ff 92       	push	r15
    2e56:	0f 93       	push	r16
    2e58:	1f 93       	push	r17
    2e5a:	cf 93       	push	r28
    2e5c:	df 93       	push	r29
    2e5e:	cd b7       	in	r28, 0x3d	; 61
    2e60:	de b7       	in	r29, 0x3e	; 62
    2e62:	28 97       	sbiw	r28, 0x08	; 8
    2e64:	cd bf       	out	0x3d, r28	; 61
    2e66:	de bf       	out	0x3e, r29	; 62
    2e68:	7c 01       	movw	r14, r24
    2e6a:	c4 2e       	mov	r12, r20
    2e6c:	d5 2e       	mov	r13, r21
    2e6e:	06 2f       	mov	r16, r22
    2e70:	17 2f       	mov	r17, r23
    2e72:	49 83       	std	Y+1, r20	; 0x01
    2e74:	5a 83       	std	Y+2, r21	; 0x02
    2e76:	6b 83       	std	Y+3, r22	; 0x03
    2e78:	7c 83       	std	Y+4, r23	; 0x04
    2e7a:	20 e0       	ldi	r18, 0x00	; 0
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	a9 01       	movw	r20, r18
    2e80:	6c 2d       	mov	r22, r12
    2e82:	7d 2d       	mov	r23, r13
    2e84:	80 2f       	mov	r24, r16
    2e86:	91 2f       	mov	r25, r17
    2e88:	0e 94 b0 1c 	call	0x3960	; 0x3960 <__cmpsf2>
    2e8c:	81 11       	cpse	r24, r1
    2e8e:	05 c0       	rjmp	.+10     	; 0x2e9a <ftoa_sci+0x60>
    2e90:	80 e3       	ldi	r24, 0x30	; 48
    2e92:	f7 01       	movw	r30, r14
    2e94:	80 83       	st	Z, r24
    2e96:	11 82       	std	Z+1, r1	; 0x01
    2e98:	a2 c0       	rjmp	.+324    	; 0x2fde <ftoa_sci+0x1a4>
    2e9a:	20 e0       	ldi	r18, 0x00	; 0
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	a9 01       	movw	r20, r18
    2ea0:	6c 2d       	mov	r22, r12
    2ea2:	7d 2d       	mov	r23, r13
    2ea4:	80 2f       	mov	r24, r16
    2ea6:	91 2f       	mov	r25, r17
    2ea8:	0e 94 b0 1c 	call	0x3960	; 0x3960 <__cmpsf2>
    2eac:	88 23       	and	r24, r24
    2eae:	7c f4       	brge	.+30     	; 0x2ece <ftoa_sci+0x94>
    2eb0:	8d e2       	ldi	r24, 0x2D	; 45
    2eb2:	f7 01       	movw	r30, r14
    2eb4:	80 83       	st	Z, r24
    2eb6:	89 81       	ldd	r24, Y+1	; 0x01
    2eb8:	9a 81       	ldd	r25, Y+2	; 0x02
    2eba:	ab 81       	ldd	r26, Y+3	; 0x03
    2ebc:	bc 81       	ldd	r27, Y+4	; 0x04
    2ebe:	b0 58       	subi	r27, 0x80	; 128
    2ec0:	89 83       	std	Y+1, r24	; 0x01
    2ec2:	9a 83       	std	Y+2, r25	; 0x02
    2ec4:	ab 83       	std	Y+3, r26	; 0x03
    2ec6:	bc 83       	std	Y+4, r27	; 0x04
    2ec8:	c7 01       	movw	r24, r14
    2eca:	01 96       	adiw	r24, 0x01	; 1
    2ecc:	7c 01       	movw	r14, r24
    2ece:	ce 01       	movw	r24, r28
    2ed0:	01 96       	adiw	r24, 0x01	; 1
    2ed2:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <normalize>
    2ed6:	5c 01       	movw	r10, r24
    2ed8:	20 e0       	ldi	r18, 0x00	; 0
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	40 e2       	ldi	r20, 0x20	; 32
    2ede:	51 e4       	ldi	r21, 0x41	; 65
    2ee0:	69 81       	ldd	r22, Y+1	; 0x01
    2ee2:	7a 81       	ldd	r23, Y+2	; 0x02
    2ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee8:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <__mulsf3>
    2eec:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__fixsfsi>
    2ef0:	2b 01       	movw	r4, r22
    2ef2:	3c 01       	movw	r6, r24
    2ef4:	80 e3       	ldi	r24, 0x30	; 48
    2ef6:	84 0d       	add	r24, r4
    2ef8:	f7 01       	movw	r30, r14
    2efa:	80 83       	st	Z, r24
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	40 e2       	ldi	r20, 0x20	; 32
    2f02:	51 e4       	ldi	r21, 0x41	; 65
    2f04:	69 81       	ldd	r22, Y+1	; 0x01
    2f06:	7a 81       	ldd	r23, Y+2	; 0x02
    2f08:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f0c:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <__mulsf3>
    2f10:	6d 83       	std	Y+5, r22	; 0x05
    2f12:	7e 83       	std	Y+6, r23	; 0x06
    2f14:	8f 83       	std	Y+7, r24	; 0x07
    2f16:	98 87       	std	Y+8, r25	; 0x08
    2f18:	b2 01       	movw	r22, r4
    2f1a:	55 0c       	add	r5, r5
    2f1c:	88 0b       	sbc	r24, r24
    2f1e:	99 0b       	sbc	r25, r25
    2f20:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <__floatsisf>
    2f24:	9b 01       	movw	r18, r22
    2f26:	ac 01       	movw	r20, r24
    2f28:	6d 81       	ldd	r22, Y+5	; 0x05
    2f2a:	7e 81       	ldd	r23, Y+6	; 0x06
    2f2c:	8f 81       	ldd	r24, Y+7	; 0x07
    2f2e:	98 85       	ldd	r25, Y+8	; 0x08
    2f30:	0e 94 43 1c 	call	0x3886	; 0x3886 <__subsf3>
    2f34:	69 83       	std	Y+1, r22	; 0x01
    2f36:	7a 83       	std	Y+2, r23	; 0x02
    2f38:	8b 83       	std	Y+3, r24	; 0x03
    2f3a:	9c 83       	std	Y+4, r25	; 0x04
    2f3c:	15 01       	movw	r2, r10
    2f3e:	f1 e0       	ldi	r31, 0x01	; 1
    2f40:	2f 1a       	sub	r2, r31
    2f42:	31 08       	sbc	r3, r1
    2f44:	87 01       	movw	r16, r14
    2f46:	0e 5f       	subi	r16, 0xFE	; 254
    2f48:	1f 4f       	sbci	r17, 0xFF	; 255
    2f4a:	8e e2       	ldi	r24, 0x2E	; 46
    2f4c:	f7 01       	movw	r30, r14
    2f4e:	81 83       	std	Z+1, r24	; 0x01
    2f50:	e1 2c       	mov	r14, r1
    2f52:	f1 2c       	mov	r15, r1
    2f54:	36 c0       	rjmp	.+108    	; 0x2fc2 <ftoa_sci+0x188>
    2f56:	20 e0       	ldi	r18, 0x00	; 0
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	40 e2       	ldi	r20, 0x20	; 32
    2f5c:	51 e4       	ldi	r21, 0x41	; 65
    2f5e:	69 81       	ldd	r22, Y+1	; 0x01
    2f60:	7a 81       	ldd	r23, Y+2	; 0x02
    2f62:	8b 81       	ldd	r24, Y+3	; 0x03
    2f64:	9c 81       	ldd	r25, Y+4	; 0x04
    2f66:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <__mulsf3>
    2f6a:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__fixsfsi>
    2f6e:	2b 01       	movw	r4, r22
    2f70:	3c 01       	movw	r6, r24
    2f72:	68 01       	movw	r12, r16
    2f74:	ff ef       	ldi	r31, 0xFF	; 255
    2f76:	cf 1a       	sub	r12, r31
    2f78:	df 0a       	sbc	r13, r31
    2f7a:	80 e3       	ldi	r24, 0x30	; 48
    2f7c:	84 0d       	add	r24, r4
    2f7e:	f8 01       	movw	r30, r16
    2f80:	80 83       	st	Z, r24
    2f82:	20 e0       	ldi	r18, 0x00	; 0
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	40 e2       	ldi	r20, 0x20	; 32
    2f88:	51 e4       	ldi	r21, 0x41	; 65
    2f8a:	69 81       	ldd	r22, Y+1	; 0x01
    2f8c:	7a 81       	ldd	r23, Y+2	; 0x02
    2f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f90:	9c 81       	ldd	r25, Y+4	; 0x04
    2f92:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <__mulsf3>
    2f96:	4b 01       	movw	r8, r22
    2f98:	5c 01       	movw	r10, r24
    2f9a:	b2 01       	movw	r22, r4
    2f9c:	55 0c       	add	r5, r5
    2f9e:	88 0b       	sbc	r24, r24
    2fa0:	99 0b       	sbc	r25, r25
    2fa2:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <__floatsisf>
    2fa6:	9b 01       	movw	r18, r22
    2fa8:	ac 01       	movw	r20, r24
    2faa:	c5 01       	movw	r24, r10
    2fac:	b4 01       	movw	r22, r8
    2fae:	0e 94 43 1c 	call	0x3886	; 0x3886 <__subsf3>
    2fb2:	69 83       	std	Y+1, r22	; 0x01
    2fb4:	7a 83       	std	Y+2, r23	; 0x02
    2fb6:	8b 83       	std	Y+3, r24	; 0x03
    2fb8:	9c 83       	std	Y+4, r25	; 0x04
    2fba:	ff ef       	ldi	r31, 0xFF	; 255
    2fbc:	ef 1a       	sub	r14, r31
    2fbe:	ff 0a       	sbc	r15, r31
    2fc0:	86 01       	movw	r16, r12
    2fc2:	84 e0       	ldi	r24, 0x04	; 4
    2fc4:	e8 16       	cp	r14, r24
    2fc6:	f1 04       	cpc	r15, r1
    2fc8:	34 f2       	brlt	.-116    	; 0x2f56 <ftoa_sci+0x11c>
    2fca:	b8 01       	movw	r22, r16
    2fcc:	6f 5f       	subi	r22, 0xFF	; 255
    2fce:	7f 4f       	sbci	r23, 0xFF	; 255
    2fd0:	85 e6       	ldi	r24, 0x65	; 101
    2fd2:	f8 01       	movw	r30, r16
    2fd4:	80 83       	st	Z, r24
    2fd6:	4a e0       	ldi	r20, 0x0A	; 10
    2fd8:	c1 01       	movw	r24, r2
    2fda:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <__itoa_ncheck>
    2fde:	28 96       	adiw	r28, 0x08	; 8
    2fe0:	cd bf       	out	0x3d, r28	; 61
    2fe2:	de bf       	out	0x3e, r29	; 62
    2fe4:	df 91       	pop	r29
    2fe6:	cf 91       	pop	r28
    2fe8:	1f 91       	pop	r17
    2fea:	0f 91       	pop	r16
    2fec:	ff 90       	pop	r15
    2fee:	ef 90       	pop	r14
    2ff0:	df 90       	pop	r13
    2ff2:	cf 90       	pop	r12
    2ff4:	bf 90       	pop	r11
    2ff6:	af 90       	pop	r10
    2ff8:	9f 90       	pop	r9
    2ffa:	8f 90       	pop	r8
    2ffc:	7f 90       	pop	r7
    2ffe:	6f 90       	pop	r6
    3000:	5f 90       	pop	r5
    3002:	4f 90       	pop	r4
    3004:	3f 90       	pop	r3
    3006:	2f 90       	pop	r2
    3008:	08 95       	ret

0000300a <display_vprintf>:
    300a:	6f 92       	push	r6
    300c:	7f 92       	push	r7
    300e:	8f 92       	push	r8
    3010:	9f 92       	push	r9
    3012:	bf 92       	push	r11
    3014:	cf 92       	push	r12
    3016:	df 92       	push	r13
    3018:	ef 92       	push	r14
    301a:	ff 92       	push	r15
    301c:	0f 93       	push	r16
    301e:	1f 93       	push	r17
    3020:	cf 93       	push	r28
    3022:	df 93       	push	r29
    3024:	cd b7       	in	r28, 0x3d	; 61
    3026:	de b7       	in	r29, 0x3e	; 62
    3028:	66 97       	sbiw	r28, 0x16	; 22
    302a:	cd bf       	out	0x3d, r28	; 61
    302c:	de bf       	out	0x3e, r29	; 62
    302e:	b8 2e       	mov	r11, r24
    3030:	8b 01       	movw	r16, r22
    3032:	da 01       	movw	r26, r20
    3034:	39 01       	movw	r6, r18
    3036:	80 e0       	ldi	r24, 0x00	; 0
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	05 c0       	rjmp	.+10     	; 0x3046 <display_vprintf+0x3c>
    303c:	fc 01       	movw	r30, r24
    303e:	e8 5e       	subi	r30, 0xE8	; 232
    3040:	fe 4c       	sbci	r31, 0xCE	; 206
    3042:	10 82       	st	Z, r1
    3044:	01 96       	adiw	r24, 0x01	; 1
    3046:	84 31       	cpi	r24, 0x14	; 20
    3048:	91 05       	cpc	r25, r1
    304a:	c4 f3       	brlt	.-16     	; 0x303c <display_vprintf+0x32>
    304c:	80 e0       	ldi	r24, 0x00	; 0
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	05 c0       	rjmp	.+10     	; 0x305c <display_vprintf+0x52>
    3052:	fc 01       	movw	r30, r24
    3054:	ec 5f       	subi	r30, 0xFC	; 252
    3056:	fe 4c       	sbci	r31, 0xCE	; 206
    3058:	10 82       	st	Z, r1
    305a:	01 96       	adiw	r24, 0x01	; 1
    305c:	84 31       	cpi	r24, 0x14	; 20
    305e:	91 05       	cpc	r25, r1
    3060:	c4 f3       	brlt	.-16     	; 0x3052 <display_vprintf+0x48>
    3062:	e1 2c       	mov	r14, r1
    3064:	f1 2c       	mov	r15, r1
    3066:	14 c1       	rjmp	.+552    	; 0x3290 <display_vprintf+0x286>
    3068:	85 32       	cpi	r24, 0x25	; 37
    306a:	09 f0       	breq	.+2      	; 0x306e <display_vprintf+0x64>
    306c:	01 c1       	rjmp	.+514    	; 0x3270 <display_vprintf+0x266>
    306e:	6d 01       	movw	r12, r26
    3070:	82 e0       	ldi	r24, 0x02	; 2
    3072:	c8 0e       	add	r12, r24
    3074:	d1 1c       	adc	r13, r1
    3076:	11 96       	adiw	r26, 0x01	; 1
    3078:	8c 91       	ld	r24, X
    307a:	85 36       	cpi	r24, 0x65	; 101
    307c:	09 f4       	brne	.+2      	; 0x3080 <display_vprintf+0x76>
    307e:	cd c0       	rjmp	.+410    	; 0x321a <display_vprintf+0x210>
    3080:	38 f4       	brcc	.+14     	; 0x3090 <display_vprintf+0x86>
    3082:	83 36       	cpi	r24, 0x63	; 99
    3084:	c1 f0       	breq	.+48     	; 0x30b6 <display_vprintf+0xac>
    3086:	08 f0       	brcs	.+2      	; 0x308a <display_vprintf+0x80>
    3088:	49 c0       	rjmp	.+146    	; 0x311c <display_vprintf+0x112>
    308a:	85 32       	cpi	r24, 0x25	; 37
    308c:	51 f0       	breq	.+20     	; 0x30a2 <display_vprintf+0x98>
    308e:	ff c0       	rjmp	.+510    	; 0x328e <display_vprintf+0x284>
    3090:	83 37       	cpi	r24, 0x73	; 115
    3092:	f9 f0       	breq	.+62     	; 0x30d2 <display_vprintf+0xc8>
    3094:	88 37       	cpi	r24, 0x78	; 120
    3096:	09 f4       	brne	.+2      	; 0x309a <display_vprintf+0x90>
    3098:	6b c0       	rjmp	.+214    	; 0x3170 <display_vprintf+0x166>
    309a:	86 36       	cpi	r24, 0x66	; 102
    309c:	09 f0       	breq	.+2      	; 0x30a0 <display_vprintf+0x96>
    309e:	f7 c0       	rjmp	.+494    	; 0x328e <display_vprintf+0x284>
    30a0:	91 c0       	rjmp	.+290    	; 0x31c4 <display_vprintf+0x1ba>
    30a2:	d7 01       	movw	r26, r14
    30a4:	ac 5f       	subi	r26, 0xFC	; 252
    30a6:	be 4c       	sbci	r27, 0xCE	; 206
    30a8:	85 e2       	ldi	r24, 0x25	; 37
    30aa:	8c 93       	st	X, r24
    30ac:	9f ef       	ldi	r25, 0xFF	; 255
    30ae:	e9 1a       	sub	r14, r25
    30b0:	f9 0a       	sbc	r15, r25
    30b2:	d6 01       	movw	r26, r12
    30b4:	ed c0       	rjmp	.+474    	; 0x3290 <display_vprintf+0x286>
    30b6:	f3 01       	movw	r30, r6
    30b8:	80 81       	ld	r24, Z
    30ba:	d7 01       	movw	r26, r14
    30bc:	ac 5f       	subi	r26, 0xFC	; 252
    30be:	be 4c       	sbci	r27, 0xCE	; 206
    30c0:	8c 93       	st	X, r24
    30c2:	ff ef       	ldi	r31, 0xFF	; 255
    30c4:	ef 1a       	sub	r14, r31
    30c6:	ff 0a       	sbc	r15, r31
    30c8:	c3 01       	movw	r24, r6
    30ca:	02 96       	adiw	r24, 0x02	; 2
    30cc:	3c 01       	movw	r6, r24
    30ce:	d6 01       	movw	r26, r12
    30d0:	df c0       	rjmp	.+446    	; 0x3290 <display_vprintf+0x286>
    30d2:	93 01       	movw	r18, r6
    30d4:	2e 5f       	subi	r18, 0xFE	; 254
    30d6:	3f 4f       	sbci	r19, 0xFF	; 255
    30d8:	f3 01       	movw	r30, r6
    30da:	a0 81       	ld	r26, Z
    30dc:	b1 81       	ldd	r27, Z+1	; 0x01
    30de:	80 e0       	ldi	r24, 0x00	; 0
    30e0:	90 e0       	ldi	r25, 0x00	; 0
    30e2:	0d c0       	rjmp	.+26     	; 0x30fe <display_vprintf+0xf4>
    30e4:	b7 01       	movw	r22, r14
    30e6:	68 0f       	add	r22, r24
    30e8:	79 1f       	adc	r23, r25
    30ea:	ad 01       	movw	r20, r26
    30ec:	48 0f       	add	r20, r24
    30ee:	59 1f       	adc	r21, r25
    30f0:	fa 01       	movw	r30, r20
    30f2:	40 81       	ld	r20, Z
    30f4:	fb 01       	movw	r30, r22
    30f6:	ec 5f       	subi	r30, 0xFC	; 252
    30f8:	fe 4c       	sbci	r31, 0xCE	; 206
    30fa:	40 83       	st	Z, r20
    30fc:	01 96       	adiw	r24, 0x01	; 1
    30fe:	fd 01       	movw	r30, r26
    3100:	01 90       	ld	r0, Z+
    3102:	00 20       	and	r0, r0
    3104:	e9 f7       	brne	.-6      	; 0x3100 <display_vprintf+0xf6>
    3106:	31 97       	sbiw	r30, 0x01	; 1
    3108:	ea 1b       	sub	r30, r26
    310a:	fb 0b       	sbc	r31, r27
    310c:	8e 17       	cp	r24, r30
    310e:	9f 07       	cpc	r25, r31
    3110:	48 f3       	brcs	.-46     	; 0x30e4 <display_vprintf+0xda>
    3112:	ee 0e       	add	r14, r30
    3114:	ff 1e       	adc	r15, r31
    3116:	39 01       	movw	r6, r18
    3118:	d6 01       	movw	r26, r12
    311a:	ba c0       	rjmp	.+372    	; 0x3290 <display_vprintf+0x286>
    311c:	43 01       	movw	r8, r6
    311e:	f2 e0       	ldi	r31, 0x02	; 2
    3120:	8f 0e       	add	r8, r31
    3122:	91 1c       	adc	r9, r1
    3124:	4a e0       	ldi	r20, 0x0A	; 10
    3126:	68 e1       	ldi	r22, 0x18	; 24
    3128:	71 e3       	ldi	r23, 0x31	; 49
    312a:	f3 01       	movw	r30, r6
    312c:	80 81       	ld	r24, Z
    312e:	91 81       	ldd	r25, Z+1	; 0x01
    3130:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <__itoa_ncheck>
    3134:	80 e0       	ldi	r24, 0x00	; 0
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	0b c0       	rjmp	.+22     	; 0x3150 <display_vprintf+0x146>
    313a:	f7 01       	movw	r30, r14
    313c:	e8 0f       	add	r30, r24
    313e:	f9 1f       	adc	r31, r25
    3140:	dc 01       	movw	r26, r24
    3142:	a8 5e       	subi	r26, 0xE8	; 232
    3144:	be 4c       	sbci	r27, 0xCE	; 206
    3146:	2c 91       	ld	r18, X
    3148:	ec 5f       	subi	r30, 0xFC	; 252
    314a:	fe 4c       	sbci	r31, 0xCE	; 206
    314c:	20 83       	st	Z, r18
    314e:	01 96       	adiw	r24, 0x01	; 1
    3150:	e8 e1       	ldi	r30, 0x18	; 24
    3152:	f1 e3       	ldi	r31, 0x31	; 49
    3154:	01 90       	ld	r0, Z+
    3156:	00 20       	and	r0, r0
    3158:	e9 f7       	brne	.-6      	; 0x3154 <display_vprintf+0x14a>
    315a:	31 97       	sbiw	r30, 0x01	; 1
    315c:	e8 51       	subi	r30, 0x18	; 24
    315e:	f1 43       	sbci	r31, 0x31	; 49
    3160:	8e 17       	cp	r24, r30
    3162:	9f 07       	cpc	r25, r31
    3164:	50 f3       	brcs	.-44     	; 0x313a <display_vprintf+0x130>
    3166:	ee 0e       	add	r14, r30
    3168:	ff 1e       	adc	r15, r31
    316a:	34 01       	movw	r6, r8
    316c:	d6 01       	movw	r26, r12
    316e:	90 c0       	rjmp	.+288    	; 0x3290 <display_vprintf+0x286>
    3170:	43 01       	movw	r8, r6
    3172:	f2 e0       	ldi	r31, 0x02	; 2
    3174:	8f 0e       	add	r8, r31
    3176:	91 1c       	adc	r9, r1
    3178:	40 e1       	ldi	r20, 0x10	; 16
    317a:	68 e1       	ldi	r22, 0x18	; 24
    317c:	71 e3       	ldi	r23, 0x31	; 49
    317e:	f3 01       	movw	r30, r6
    3180:	80 81       	ld	r24, Z
    3182:	91 81       	ldd	r25, Z+1	; 0x01
    3184:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <__itoa_ncheck>
    3188:	80 e0       	ldi	r24, 0x00	; 0
    318a:	90 e0       	ldi	r25, 0x00	; 0
    318c:	0b c0       	rjmp	.+22     	; 0x31a4 <display_vprintf+0x19a>
    318e:	f7 01       	movw	r30, r14
    3190:	e8 0f       	add	r30, r24
    3192:	f9 1f       	adc	r31, r25
    3194:	dc 01       	movw	r26, r24
    3196:	a8 5e       	subi	r26, 0xE8	; 232
    3198:	be 4c       	sbci	r27, 0xCE	; 206
    319a:	2c 91       	ld	r18, X
    319c:	ec 5f       	subi	r30, 0xFC	; 252
    319e:	fe 4c       	sbci	r31, 0xCE	; 206
    31a0:	20 83       	st	Z, r18
    31a2:	01 96       	adiw	r24, 0x01	; 1
    31a4:	e8 e1       	ldi	r30, 0x18	; 24
    31a6:	f1 e3       	ldi	r31, 0x31	; 49
    31a8:	01 90       	ld	r0, Z+
    31aa:	00 20       	and	r0, r0
    31ac:	e9 f7       	brne	.-6      	; 0x31a8 <display_vprintf+0x19e>
    31ae:	31 97       	sbiw	r30, 0x01	; 1
    31b0:	e8 51       	subi	r30, 0x18	; 24
    31b2:	f1 43       	sbci	r31, 0x31	; 49
    31b4:	8e 17       	cp	r24, r30
    31b6:	9f 07       	cpc	r25, r31
    31b8:	50 f3       	brcs	.-44     	; 0x318e <display_vprintf+0x184>
    31ba:	ee 0e       	add	r14, r30
    31bc:	ff 1e       	adc	r15, r31
    31be:	34 01       	movw	r6, r8
    31c0:	d6 01       	movw	r26, r12
    31c2:	66 c0       	rjmp	.+204    	; 0x3290 <display_vprintf+0x286>
    31c4:	43 01       	movw	r8, r6
    31c6:	f4 e0       	ldi	r31, 0x04	; 4
    31c8:	8f 0e       	add	r8, r31
    31ca:	91 1c       	adc	r9, r1
    31cc:	f3 01       	movw	r30, r6
    31ce:	40 81       	ld	r20, Z
    31d0:	51 81       	ldd	r21, Z+1	; 0x01
    31d2:	62 81       	ldd	r22, Z+2	; 0x02
    31d4:	73 81       	ldd	r23, Z+3	; 0x03
    31d6:	88 e1       	ldi	r24, 0x18	; 24
    31d8:	91 e3       	ldi	r25, 0x31	; 49
    31da:	0e 94 23 16 	call	0x2c46	; 0x2c46 <ftoa_fixed>
    31de:	80 e0       	ldi	r24, 0x00	; 0
    31e0:	90 e0       	ldi	r25, 0x00	; 0
    31e2:	0b c0       	rjmp	.+22     	; 0x31fa <display_vprintf+0x1f0>
    31e4:	f7 01       	movw	r30, r14
    31e6:	e8 0f       	add	r30, r24
    31e8:	f9 1f       	adc	r31, r25
    31ea:	dc 01       	movw	r26, r24
    31ec:	a8 5e       	subi	r26, 0xE8	; 232
    31ee:	be 4c       	sbci	r27, 0xCE	; 206
    31f0:	2c 91       	ld	r18, X
    31f2:	ec 5f       	subi	r30, 0xFC	; 252
    31f4:	fe 4c       	sbci	r31, 0xCE	; 206
    31f6:	20 83       	st	Z, r18
    31f8:	01 96       	adiw	r24, 0x01	; 1
    31fa:	e8 e1       	ldi	r30, 0x18	; 24
    31fc:	f1 e3       	ldi	r31, 0x31	; 49
    31fe:	01 90       	ld	r0, Z+
    3200:	00 20       	and	r0, r0
    3202:	e9 f7       	brne	.-6      	; 0x31fe <display_vprintf+0x1f4>
    3204:	31 97       	sbiw	r30, 0x01	; 1
    3206:	e8 51       	subi	r30, 0x18	; 24
    3208:	f1 43       	sbci	r31, 0x31	; 49
    320a:	8e 17       	cp	r24, r30
    320c:	9f 07       	cpc	r25, r31
    320e:	50 f3       	brcs	.-44     	; 0x31e4 <display_vprintf+0x1da>
    3210:	ee 0e       	add	r14, r30
    3212:	ff 1e       	adc	r15, r31
    3214:	34 01       	movw	r6, r8
    3216:	d6 01       	movw	r26, r12
    3218:	3b c0       	rjmp	.+118    	; 0x3290 <display_vprintf+0x286>
    321a:	43 01       	movw	r8, r6
    321c:	f4 e0       	ldi	r31, 0x04	; 4
    321e:	8f 0e       	add	r8, r31
    3220:	91 1c       	adc	r9, r1
    3222:	f3 01       	movw	r30, r6
    3224:	40 81       	ld	r20, Z
    3226:	51 81       	ldd	r21, Z+1	; 0x01
    3228:	62 81       	ldd	r22, Z+2	; 0x02
    322a:	73 81       	ldd	r23, Z+3	; 0x03
    322c:	88 e1       	ldi	r24, 0x18	; 24
    322e:	91 e3       	ldi	r25, 0x31	; 49
    3230:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <ftoa_sci>
    3234:	80 e0       	ldi	r24, 0x00	; 0
    3236:	90 e0       	ldi	r25, 0x00	; 0
    3238:	0b c0       	rjmp	.+22     	; 0x3250 <display_vprintf+0x246>
    323a:	f7 01       	movw	r30, r14
    323c:	e8 0f       	add	r30, r24
    323e:	f9 1f       	adc	r31, r25
    3240:	dc 01       	movw	r26, r24
    3242:	a8 5e       	subi	r26, 0xE8	; 232
    3244:	be 4c       	sbci	r27, 0xCE	; 206
    3246:	2c 91       	ld	r18, X
    3248:	ec 5f       	subi	r30, 0xFC	; 252
    324a:	fe 4c       	sbci	r31, 0xCE	; 206
    324c:	20 83       	st	Z, r18
    324e:	01 96       	adiw	r24, 0x01	; 1
    3250:	e8 e1       	ldi	r30, 0x18	; 24
    3252:	f1 e3       	ldi	r31, 0x31	; 49
    3254:	01 90       	ld	r0, Z+
    3256:	00 20       	and	r0, r0
    3258:	e9 f7       	brne	.-6      	; 0x3254 <display_vprintf+0x24a>
    325a:	31 97       	sbiw	r30, 0x01	; 1
    325c:	e8 51       	subi	r30, 0x18	; 24
    325e:	f1 43       	sbci	r31, 0x31	; 49
    3260:	8e 17       	cp	r24, r30
    3262:	9f 07       	cpc	r25, r31
    3264:	50 f3       	brcs	.-44     	; 0x323a <display_vprintf+0x230>
    3266:	ee 0e       	add	r14, r30
    3268:	ff 1e       	adc	r15, r31
    326a:	34 01       	movw	r6, r8
    326c:	d6 01       	movw	r26, r12
    326e:	10 c0       	rjmp	.+32     	; 0x3290 <display_vprintf+0x286>
    3270:	d7 01       	movw	r26, r14
    3272:	ac 5f       	subi	r26, 0xFC	; 252
    3274:	be 4c       	sbci	r27, 0xCE	; 206
    3276:	8c 93       	st	X, r24
    3278:	8a 30       	cpi	r24, 0x0A	; 10
    327a:	21 f4       	brne	.+8      	; 0x3284 <display_vprintf+0x27a>
    327c:	d7 01       	movw	r26, r14
    327e:	ac 5f       	subi	r26, 0xFC	; 252
    3280:	be 4c       	sbci	r27, 0xCE	; 206
    3282:	1c 92       	st	X, r1
    3284:	ff ef       	ldi	r31, 0xFF	; 255
    3286:	ef 1a       	sub	r14, r31
    3288:	ff 0a       	sbc	r15, r31
    328a:	d9 01       	movw	r26, r18
    328c:	01 c0       	rjmp	.+2      	; 0x3290 <display_vprintf+0x286>
    328e:	d6 01       	movw	r26, r12
    3290:	9d 01       	movw	r18, r26
    3292:	2f 5f       	subi	r18, 0xFF	; 255
    3294:	3f 4f       	sbci	r19, 0xFF	; 255
    3296:	8c 91       	ld	r24, X
    3298:	81 11       	cpse	r24, r1
    329a:	e6 ce       	rjmp	.-564    	; 0x3068 <display_vprintf+0x5e>
    329c:	c7 01       	movw	r24, r14
    329e:	80 0f       	add	r24, r16
    32a0:	91 1f       	adc	r25, r17
    32a2:	44 97       	sbiw	r24, 0x14	; 20
    32a4:	2c f0       	brlt	.+10     	; 0x32b0 <display_vprintf+0x2a6>
    32a6:	84 e1       	ldi	r24, 0x14	; 20
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	7c 01       	movw	r14, r24
    32ac:	e0 1a       	sub	r14, r16
    32ae:	f1 0a       	sbc	r15, r17
    32b0:	80 e0       	ldi	r24, 0x00	; 0
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	08 c0       	rjmp	.+16     	; 0x32c6 <display_vprintf+0x2bc>
    32b6:	e3 e0       	ldi	r30, 0x03	; 3
    32b8:	f0 e0       	ldi	r31, 0x00	; 0
    32ba:	ec 0f       	add	r30, r28
    32bc:	fd 1f       	adc	r31, r29
    32be:	e8 0f       	add	r30, r24
    32c0:	f9 1f       	adc	r31, r25
    32c2:	10 82       	st	Z, r1
    32c4:	01 96       	adiw	r24, 0x01	; 1
    32c6:	84 31       	cpi	r24, 0x14	; 20
    32c8:	91 05       	cpc	r25, r1
    32ca:	ac f3       	brlt	.-22     	; 0x32b6 <display_vprintf+0x2ac>
    32cc:	b9 82       	std	Y+1, r11	; 0x01
    32ce:	0a 83       	std	Y+2, r16	; 0x02
    32d0:	80 e0       	ldi	r24, 0x00	; 0
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	0c c0       	rjmp	.+24     	; 0x32ee <display_vprintf+0x2e4>
    32d6:	fc 01       	movw	r30, r24
    32d8:	ec 5f       	subi	r30, 0xFC	; 252
    32da:	fe 4c       	sbci	r31, 0xCE	; 206
    32dc:	20 81       	ld	r18, Z
    32de:	e3 e0       	ldi	r30, 0x03	; 3
    32e0:	f0 e0       	ldi	r31, 0x00	; 0
    32e2:	ec 0f       	add	r30, r28
    32e4:	fd 1f       	adc	r31, r29
    32e6:	e8 0f       	add	r30, r24
    32e8:	f9 1f       	adc	r31, r25
    32ea:	20 83       	st	Z, r18
    32ec:	01 96       	adiw	r24, 0x01	; 1
    32ee:	8e 15       	cp	r24, r14
    32f0:	9f 05       	cpc	r25, r15
    32f2:	8c f3       	brlt	.-30     	; 0x32d6 <display_vprintf+0x2cc>
    32f4:	00 e0       	ldi	r16, 0x00	; 0
    32f6:	2f ef       	ldi	r18, 0xFF	; 255
    32f8:	3f ef       	ldi	r19, 0xFF	; 255
    32fa:	a9 01       	movw	r20, r18
    32fc:	be 01       	movw	r22, r28
    32fe:	6f 5f       	subi	r22, 0xFF	; 255
    3300:	7f 4f       	sbci	r23, 0xFF	; 255
    3302:	80 91 31 31 	lds	r24, 0x3131	; 0x803131 <displayLineQueue>
    3306:	90 91 32 31 	lds	r25, 0x3132	; 0x803132 <displayLineQueue+0x1>
    330a:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <xQueueGenericSend>
    330e:	c7 01       	movw	r24, r14
    3310:	66 96       	adiw	r28, 0x16	; 22
    3312:	cd bf       	out	0x3d, r28	; 61
    3314:	de bf       	out	0x3e, r29	; 62
    3316:	df 91       	pop	r29
    3318:	cf 91       	pop	r28
    331a:	1f 91       	pop	r17
    331c:	0f 91       	pop	r16
    331e:	ff 90       	pop	r15
    3320:	ef 90       	pop	r14
    3322:	df 90       	pop	r13
    3324:	cf 90       	pop	r12
    3326:	bf 90       	pop	r11
    3328:	9f 90       	pop	r9
    332a:	8f 90       	pop	r8
    332c:	7f 90       	pop	r7
    332e:	6f 90       	pop	r6
    3330:	08 95       	ret

00003332 <__vector_108>:
    3332:	1f 92       	push	r1
    3334:	0f 92       	push	r0
    3336:	0f b6       	in	r0, 0x3f	; 63
    3338:	0f 92       	push	r0
    333a:	11 24       	eor	r1, r1
    333c:	0b b6       	in	r0, 0x3b	; 59
    333e:	0f 92       	push	r0
    3340:	2f 93       	push	r18
    3342:	3f 93       	push	r19
    3344:	4f 93       	push	r20
    3346:	5f 93       	push	r21
    3348:	6f 93       	push	r22
    334a:	7f 93       	push	r23
    334c:	8f 93       	push	r24
    334e:	9f 93       	push	r25
    3350:	af 93       	push	r26
    3352:	bf 93       	push	r27
    3354:	ef 93       	push	r30
    3356:	ff 93       	push	r31
    3358:	cf 93       	push	r28
    335a:	df 93       	push	r29
    335c:	1f 92       	push	r1
    335e:	cd b7       	in	r28, 0x3d	; 61
    3360:	de b7       	in	r29, 0x3e	; 62
    3362:	19 82       	std	Y+1, r1	; 0x01
    3364:	9e 01       	movw	r18, r28
    3366:	2f 5f       	subi	r18, 0xFF	; 255
    3368:	3f 4f       	sbci	r19, 0xFF	; 255
    336a:	41 e0       	ldi	r20, 0x01	; 1
    336c:	50 e0       	ldi	r21, 0x00	; 0
    336e:	60 e0       	ldi	r22, 0x00	; 0
    3370:	70 e0       	ldi	r23, 0x00	; 0
    3372:	80 91 33 31 	lds	r24, 0x3133	; 0x803133 <egDisplayTiming>
    3376:	90 91 34 31 	lds	r25, 0x3134	; 0x803134 <egDisplayTiming+0x1>
    337a:	0e 94 0d 04 	call	0x81a	; 0x81a <xEventGroupSetBitsFromISR>
    337e:	60 e0       	ldi	r22, 0x00	; 0
    3380:	80 e0       	ldi	r24, 0x00	; 0
    3382:	9b e0       	ldi	r25, 0x0B	; 11
    3384:	0e 94 5e 02 	call	0x4bc	; 0x4bc <TC0_ConfigClockSource>
    3388:	10 92 06 0b 	sts	0x0B06, r1	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7deb06>
    338c:	0f 90       	pop	r0
    338e:	df 91       	pop	r29
    3390:	cf 91       	pop	r28
    3392:	ff 91       	pop	r31
    3394:	ef 91       	pop	r30
    3396:	bf 91       	pop	r27
    3398:	af 91       	pop	r26
    339a:	9f 91       	pop	r25
    339c:	8f 91       	pop	r24
    339e:	7f 91       	pop	r23
    33a0:	6f 91       	pop	r22
    33a2:	5f 91       	pop	r21
    33a4:	4f 91       	pop	r20
    33a6:	3f 91       	pop	r19
    33a8:	2f 91       	pop	r18
    33aa:	0f 90       	pop	r0
    33ac:	0b be       	out	0x3b, r0	; 59
    33ae:	0f 90       	pop	r0
    33b0:	0f be       	out	0x3f, r0	; 63
    33b2:	0f 90       	pop	r0
    33b4:	1f 90       	pop	r1
    33b6:	18 95       	reti

000033b8 <delayUS>:
    33b8:	cf 92       	push	r12
    33ba:	df 92       	push	r13
    33bc:	ef 92       	push	r14
    33be:	ff 92       	push	r15
    33c0:	0f 93       	push	r16
    33c2:	6b 01       	movw	r12, r22
    33c4:	7c 01       	movw	r14, r24
    33c6:	82 e0       	ldi	r24, 0x02	; 2
    33c8:	c8 16       	cp	r12, r24
    33ca:	d1 04       	cpc	r13, r1
    33cc:	e1 04       	cpc	r14, r1
    33ce:	f1 04       	cpc	r15, r1
    33d0:	28 f4       	brcc	.+10     	; 0x33dc <delayUS+0x24>
    33d2:	c1 2c       	mov	r12, r1
    33d4:	d1 2c       	mov	r13, r1
    33d6:	76 01       	movw	r14, r12
    33d8:	68 94       	set
    33da:	c1 f8       	bld	r12, 1
    33dc:	e0 e0       	ldi	r30, 0x00	; 0
    33de:	fb e0       	ldi	r31, 0x0B	; 11
    33e0:	81 e0       	ldi	r24, 0x01	; 1
    33e2:	86 83       	std	Z+6, r24	; 0x06
    33e4:	10 a2       	std	Z+32, r1	; 0x20
    33e6:	11 a2       	std	Z+33, r1	; 0x21
    33e8:	60 e0       	ldi	r22, 0x00	; 0
    33ea:	80 e0       	ldi	r24, 0x00	; 0
    33ec:	9b e0       	ldi	r25, 0x0B	; 11
    33ee:	0e 94 64 02 	call	0x4c8	; 0x4c8 <TC0_ConfigWGM>
    33f2:	8e ef       	ldi	r24, 0xFE	; 254
    33f4:	c8 16       	cp	r12, r24
    33f6:	8f ef       	ldi	r24, 0xFF	; 255
    33f8:	d8 06       	cpc	r13, r24
    33fa:	e1 04       	cpc	r14, r1
    33fc:	f1 04       	cpc	r15, r1
    33fe:	70 f4       	brcc	.+28     	; 0x341c <delayUS+0x64>
    3400:	f6 94       	lsr	r15
    3402:	e7 94       	ror	r14
    3404:	d7 94       	ror	r13
    3406:	c7 94       	ror	r12
    3408:	c0 92 26 0b 	sts	0x0B26, r12	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7deb26>
    340c:	d0 92 27 0b 	sts	0x0B27, r13	; 0x800b27 <__TEXT_REGION_LENGTH__+0x7deb27>
    3410:	65 e0       	ldi	r22, 0x05	; 5
    3412:	80 e0       	ldi	r24, 0x00	; 0
    3414:	9b e0       	ldi	r25, 0x0B	; 11
    3416:	0e 94 5e 02 	call	0x4bc	; 0x4bc <TC0_ConfigClockSource>
    341a:	19 c0       	rjmp	.+50     	; 0x344e <delayUS+0x96>
    341c:	80 e4       	ldi	r24, 0x40	; 64
    341e:	c8 16       	cp	r12, r24
    3420:	82 e4       	ldi	r24, 0x42	; 66
    3422:	d8 06       	cpc	r13, r24
    3424:	8f e0       	ldi	r24, 0x0F	; 15
    3426:	e8 06       	cpc	r14, r24
    3428:	f1 04       	cpc	r15, r1
    342a:	88 f4       	brcc	.+34     	; 0x344e <delayUS+0x96>
    342c:	68 94       	set
    342e:	14 f8       	bld	r1, 4
    3430:	f6 94       	lsr	r15
    3432:	e7 94       	ror	r14
    3434:	d7 94       	ror	r13
    3436:	c7 94       	ror	r12
    3438:	16 94       	lsr	r1
    343a:	d1 f7       	brne	.-12     	; 0x3430 <delayUS+0x78>
    343c:	c0 92 26 0b 	sts	0x0B26, r12	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7deb26>
    3440:	d0 92 27 0b 	sts	0x0B27, r13	; 0x800b27 <__TEXT_REGION_LENGTH__+0x7deb27>
    3444:	67 e0       	ldi	r22, 0x07	; 7
    3446:	80 e0       	ldi	r24, 0x00	; 0
    3448:	9b e0       	ldi	r25, 0x0B	; 11
    344a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <TC0_ConfigClockSource>
    344e:	0f 2e       	mov	r0, r31
    3450:	f4 ef       	ldi	r31, 0xF4	; 244
    3452:	cf 2e       	mov	r12, r31
    3454:	dd 24       	eor	r13, r13
    3456:	d3 94       	inc	r13
    3458:	e1 2c       	mov	r14, r1
    345a:	f1 2c       	mov	r15, r1
    345c:	f0 2d       	mov	r31, r0
    345e:	00 e0       	ldi	r16, 0x00	; 0
    3460:	21 e0       	ldi	r18, 0x01	; 1
    3462:	41 e0       	ldi	r20, 0x01	; 1
    3464:	50 e0       	ldi	r21, 0x00	; 0
    3466:	60 e0       	ldi	r22, 0x00	; 0
    3468:	70 e0       	ldi	r23, 0x00	; 0
    346a:	80 91 33 31 	lds	r24, 0x3133	; 0x803133 <egDisplayTiming>
    346e:	90 91 34 31 	lds	r25, 0x3134	; 0x803134 <egDisplayTiming+0x1>
    3472:	0e 94 b4 02 	call	0x568	; 0x568 <xEventGroupWaitBits>
    3476:	0f 91       	pop	r16
    3478:	ff 90       	pop	r15
    347a:	ef 90       	pop	r14
    347c:	df 90       	pop	r13
    347e:	cf 90       	pop	r12
    3480:	08 95       	ret

00003482 <setPort>:
    3482:	82 95       	swap	r24
    3484:	80 7f       	andi	r24, 0xF0	; 240
    3486:	e0 e0       	ldi	r30, 0x00	; 0
    3488:	f6 e0       	ldi	r31, 0x06	; 6
    348a:	94 81       	ldd	r25, Z+4	; 0x04
    348c:	28 2f       	mov	r18, r24
    348e:	2f 60       	ori	r18, 0x0F	; 15
    3490:	92 23       	and	r25, r18
    3492:	94 83       	std	Z+4, r25	; 0x04
    3494:	94 81       	ldd	r25, Z+4	; 0x04
    3496:	89 2b       	or	r24, r25
    3498:	84 83       	std	Z+4, r24	; 0x04
    349a:	08 95       	ret

0000349c <setRS>:
    349c:	88 23       	and	r24, r24
    349e:	21 f0       	breq	.+8      	; 0x34a8 <setRS+0xc>
    34a0:	81 e0       	ldi	r24, 0x01	; 1
    34a2:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x7de665>
    34a6:	08 95       	ret
    34a8:	81 e0       	ldi	r24, 0x01	; 1
    34aa:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7de666>
    34ae:	08 95       	ret

000034b0 <setRW>:
    34b0:	88 23       	and	r24, r24
    34b2:	21 f0       	breq	.+8      	; 0x34bc <setRW+0xc>
    34b4:	82 e0       	ldi	r24, 0x02	; 2
    34b6:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x7de665>
    34ba:	08 95       	ret
    34bc:	82 e0       	ldi	r24, 0x02	; 2
    34be:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7de666>
    34c2:	08 95       	ret

000034c4 <setE>:
    34c4:	88 23       	and	r24, r24
    34c6:	21 f0       	breq	.+8      	; 0x34d0 <setE+0xc>
    34c8:	84 e0       	ldi	r24, 0x04	; 4
    34ca:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x7de665>
    34ce:	08 95       	ret
    34d0:	84 e0       	ldi	r24, 0x04	; 4
    34d2:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7de666>
    34d6:	08 95       	ret

000034d8 <Nybble>:
    34d8:	81 e0       	ldi	r24, 0x01	; 1
    34da:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <setE>
    34de:	61 e0       	ldi	r22, 0x01	; 1
    34e0:	70 e0       	ldi	r23, 0x00	; 0
    34e2:	80 e0       	ldi	r24, 0x00	; 0
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <delayUS>
    34ea:	80 e0       	ldi	r24, 0x00	; 0
    34ec:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <setE>
    34f0:	08 95       	ret

000034f2 <command>:
    34f2:	cf 93       	push	r28
    34f4:	c8 2f       	mov	r28, r24
    34f6:	82 95       	swap	r24
    34f8:	8f 70       	andi	r24, 0x0F	; 15
    34fa:	0e 94 41 1a 	call	0x3482	; 0x3482 <setPort>
    34fe:	80 e0       	ldi	r24, 0x00	; 0
    3500:	0e 94 4e 1a 	call	0x349c	; 0x349c <setRS>
    3504:	80 e0       	ldi	r24, 0x00	; 0
    3506:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <setRW>
    350a:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <Nybble>
    350e:	8c 2f       	mov	r24, r28
    3510:	8f 70       	andi	r24, 0x0F	; 15
    3512:	0e 94 41 1a 	call	0x3482	; 0x3482 <setPort>
    3516:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <Nybble>
    351a:	cf 91       	pop	r28
    351c:	08 95       	ret

0000351e <write>:
    351e:	cf 93       	push	r28
    3520:	c8 2f       	mov	r28, r24
    3522:	82 95       	swap	r24
    3524:	8f 70       	andi	r24, 0x0F	; 15
    3526:	0e 94 41 1a 	call	0x3482	; 0x3482 <setPort>
    352a:	81 e0       	ldi	r24, 0x01	; 1
    352c:	0e 94 4e 1a 	call	0x349c	; 0x349c <setRS>
    3530:	80 e0       	ldi	r24, 0x00	; 0
    3532:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <setRW>
    3536:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <Nybble>
    353a:	8c 2f       	mov	r24, r28
    353c:	8f 70       	andi	r24, 0x0F	; 15
    353e:	0e 94 41 1a 	call	0x3482	; 0x3482 <setPort>
    3542:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <Nybble>
    3546:	cf 91       	pop	r28
    3548:	08 95       	ret

0000354a <vInitDisplay>:
    354a:	ef 92       	push	r14
    354c:	ff 92       	push	r15
    354e:	0f 93       	push	r16
    3550:	e0 e0       	ldi	r30, 0x00	; 0
    3552:	f6 e0       	ldi	r31, 0x06	; 6
    3554:	80 e1       	ldi	r24, 0x10	; 16
    3556:	81 83       	std	Z+1, r24	; 0x01
    3558:	80 e2       	ldi	r24, 0x20	; 32
    355a:	81 83       	std	Z+1, r24	; 0x01
    355c:	80 e4       	ldi	r24, 0x40	; 64
    355e:	81 83       	std	Z+1, r24	; 0x01
    3560:	80 e8       	ldi	r24, 0x80	; 128
    3562:	81 83       	std	Z+1, r24	; 0x01
    3564:	a0 e6       	ldi	r26, 0x60	; 96
    3566:	b6 e0       	ldi	r27, 0x06	; 6
    3568:	81 e0       	ldi	r24, 0x01	; 1
    356a:	11 96       	adiw	r26, 0x01	; 1
    356c:	8c 93       	st	X, r24
    356e:	11 97       	sbiw	r26, 0x01	; 1
    3570:	82 e0       	ldi	r24, 0x02	; 2
    3572:	11 96       	adiw	r26, 0x01	; 1
    3574:	8c 93       	st	X, r24
    3576:	11 97       	sbiw	r26, 0x01	; 1
    3578:	84 e0       	ldi	r24, 0x04	; 4
    357a:	11 96       	adiw	r26, 0x01	; 1
    357c:	8c 93       	st	X, r24
    357e:	11 97       	sbiw	r26, 0x01	; 1
    3580:	84 81       	ldd	r24, Z+4	; 0x04
    3582:	8f 70       	andi	r24, 0x0F	; 15
    3584:	84 83       	std	Z+4, r24	; 0x04
    3586:	14 96       	adiw	r26, 0x04	; 4
    3588:	8c 91       	ld	r24, X
    358a:	14 97       	sbiw	r26, 0x04	; 4
    358c:	88 7f       	andi	r24, 0xF8	; 248
    358e:	14 96       	adiw	r26, 0x04	; 4
    3590:	8c 93       	st	X, r24
    3592:	40 e0       	ldi	r20, 0x00	; 0
    3594:	66 e1       	ldi	r22, 0x16	; 22
    3596:	88 e0       	ldi	r24, 0x08	; 8
    3598:	0e 94 b7 07 	call	0xf6e	; 0xf6e <xQueueGenericCreate>
    359c:	80 93 31 31 	sts	0x3131, r24	; 0x803131 <displayLineQueue>
    35a0:	90 93 32 31 	sts	0x3132, r25	; 0x803132 <displayLineQueue+0x1>
    35a4:	0e 94 9f 02 	call	0x53e	; 0x53e <xEventGroupCreate>
    35a8:	80 93 33 31 	sts	0x3133, r24	; 0x803133 <egDisplayTiming>
    35ac:	90 93 34 31 	sts	0x3134, r25	; 0x803134 <egDisplayTiming+0x1>
    35b0:	e1 2c       	mov	r14, r1
    35b2:	f1 2c       	mov	r15, r1
    35b4:	01 e0       	ldi	r16, 0x01	; 1
    35b6:	20 e0       	ldi	r18, 0x00	; 0
    35b8:	30 e0       	ldi	r19, 0x00	; 0
    35ba:	4e e5       	ldi	r20, 0x5E	; 94
    35bc:	51 e0       	ldi	r21, 0x01	; 1
    35be:	6e ea       	ldi	r22, 0xAE	; 174
    35c0:	70 e2       	ldi	r23, 0x20	; 32
    35c2:	8d e3       	ldi	r24, 0x3D	; 61
    35c4:	9b e1       	ldi	r25, 0x1B	; 27
    35c6:	0e 94 45 0b 	call	0x168a	; 0x168a <xTaskCreate>
    35ca:	0f 91       	pop	r16
    35cc:	ff 90       	pop	r15
    35ce:	ef 90       	pop	r14
    35d0:	08 95       	ret

000035d2 <_displaySetPos>:
    35d2:	81 30       	cpi	r24, 0x01	; 1
    35d4:	91 05       	cpc	r25, r1
    35d6:	79 f0       	breq	.+30     	; 0x35f6 <_displaySetPos+0x24>
    35d8:	1c f4       	brge	.+6      	; 0x35e0 <_displaySetPos+0xe>
    35da:	89 2b       	or	r24, r25
    35dc:	39 f0       	breq	.+14     	; 0x35ec <_displaySetPos+0x1a>
    35de:	19 c0       	rjmp	.+50     	; 0x3612 <_displaySetPos+0x40>
    35e0:	82 30       	cpi	r24, 0x02	; 2
    35e2:	91 05       	cpc	r25, r1
    35e4:	69 f0       	breq	.+26     	; 0x3600 <_displaySetPos+0x2e>
    35e6:	03 97       	sbiw	r24, 0x03	; 3
    35e8:	81 f0       	breq	.+32     	; 0x360a <_displaySetPos+0x38>
    35ea:	13 c0       	rjmp	.+38     	; 0x3612 <_displaySetPos+0x40>
    35ec:	80 e8       	ldi	r24, 0x80	; 128
    35ee:	86 0f       	add	r24, r22
    35f0:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <command>
    35f4:	0e c0       	rjmp	.+28     	; 0x3612 <_displaySetPos+0x40>
    35f6:	80 ec       	ldi	r24, 0xC0	; 192
    35f8:	86 0f       	add	r24, r22
    35fa:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <command>
    35fe:	09 c0       	rjmp	.+18     	; 0x3612 <_displaySetPos+0x40>
    3600:	84 e9       	ldi	r24, 0x94	; 148
    3602:	86 0f       	add	r24, r22
    3604:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <command>
    3608:	04 c0       	rjmp	.+8      	; 0x3612 <_displaySetPos+0x40>
    360a:	84 ed       	ldi	r24, 0xD4	; 212
    360c:	86 0f       	add	r24, r22
    360e:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <command>
    3612:	67 e2       	ldi	r22, 0x27	; 39
    3614:	70 e0       	ldi	r23, 0x00	; 0
    3616:	80 e0       	ldi	r24, 0x00	; 0
    3618:	90 e0       	ldi	r25, 0x00	; 0
    361a:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <delayUS>
    361e:	08 95       	ret

00003620 <_displayWriteChar>:
    3620:	0e 94 8f 1a 	call	0x351e	; 0x351e <write>
    3624:	6b e2       	ldi	r22, 0x2B	; 43
    3626:	70 e0       	ldi	r23, 0x00	; 0
    3628:	80 e0       	ldi	r24, 0x00	; 0
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <delayUS>
    3630:	08 95       	ret

00003632 <_displayWriteString>:
    3632:	0f 93       	push	r16
    3634:	1f 93       	push	r17
    3636:	cf 93       	push	r28
    3638:	df 93       	push	r29
    363a:	8c 01       	movw	r16, r24
    363c:	c0 e0       	ldi	r28, 0x00	; 0
    363e:	d0 e0       	ldi	r29, 0x00	; 0
    3640:	09 c0       	rjmp	.+18     	; 0x3654 <_displayWriteString+0x22>
    3642:	f8 01       	movw	r30, r16
    3644:	ec 0f       	add	r30, r28
    3646:	fd 1f       	adc	r31, r29
    3648:	80 81       	ld	r24, Z
    364a:	88 23       	and	r24, r24
    364c:	31 f0       	breq	.+12     	; 0x365a <_displayWriteString+0x28>
    364e:	0e 94 10 1b 	call	0x3620	; 0x3620 <_displayWriteChar>
    3652:	21 96       	adiw	r28, 0x01	; 1
    3654:	c4 31       	cpi	r28, 0x14	; 20
    3656:	d1 05       	cpc	r29, r1
    3658:	a4 f3       	brlt	.-24     	; 0x3642 <_displayWriteString+0x10>
    365a:	df 91       	pop	r29
    365c:	cf 91       	pop	r28
    365e:	1f 91       	pop	r17
    3660:	0f 91       	pop	r16
    3662:	08 95       	ret

00003664 <_displayWriteStringAtPos>:
    3664:	cf 93       	push	r28
    3666:	df 93       	push	r29
    3668:	ea 01       	movw	r28, r20
    366a:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <_displaySetPos>
    366e:	ce 01       	movw	r24, r28
    3670:	0e 94 19 1b 	call	0x3632	; 0x3632 <_displayWriteString>
    3674:	df 91       	pop	r29
    3676:	cf 91       	pop	r28
    3678:	08 95       	ret

0000367a <vDisplayUpdateTask>:
    367a:	cf 93       	push	r28
    367c:	df 93       	push	r29
    367e:	cd b7       	in	r28, 0x3d	; 61
    3680:	de b7       	in	r29, 0x3e	; 62
    3682:	c6 56       	subi	r28, 0x66	; 102
    3684:	d1 09       	sbc	r29, r1
    3686:	cd bf       	out	0x3d, r28	; 61
    3688:	de bf       	out	0x3e, r29	; 62
    368a:	80 e0       	ldi	r24, 0x00	; 0
    368c:	90 e0       	ldi	r25, 0x00	; 0
    368e:	19 c0       	rjmp	.+50     	; 0x36c2 <vDisplayUpdateTask+0x48>
    3690:	44 e1       	ldi	r20, 0x14	; 20
    3692:	48 9f       	mul	r20, r24
    3694:	f0 01       	movw	r30, r0
    3696:	49 9f       	mul	r20, r25
    3698:	f0 0d       	add	r31, r0
    369a:	11 24       	eor	r1, r1
    369c:	41 e0       	ldi	r20, 0x01	; 1
    369e:	50 e0       	ldi	r21, 0x00	; 0
    36a0:	4c 0f       	add	r20, r28
    36a2:	5d 1f       	adc	r21, r29
    36a4:	e4 0f       	add	r30, r20
    36a6:	f5 1f       	adc	r31, r21
    36a8:	e2 0f       	add	r30, r18
    36aa:	f3 1f       	adc	r31, r19
    36ac:	40 e2       	ldi	r20, 0x20	; 32
    36ae:	40 83       	st	Z, r20
    36b0:	2f 5f       	subi	r18, 0xFF	; 255
    36b2:	3f 4f       	sbci	r19, 0xFF	; 255
    36b4:	02 c0       	rjmp	.+4      	; 0x36ba <vDisplayUpdateTask+0x40>
    36b6:	20 e0       	ldi	r18, 0x00	; 0
    36b8:	30 e0       	ldi	r19, 0x00	; 0
    36ba:	24 31       	cpi	r18, 0x14	; 20
    36bc:	31 05       	cpc	r19, r1
    36be:	44 f3       	brlt	.-48     	; 0x3690 <vDisplayUpdateTask+0x16>
    36c0:	01 96       	adiw	r24, 0x01	; 1
    36c2:	84 30       	cpi	r24, 0x04	; 4
    36c4:	91 05       	cpc	r25, r1
    36c6:	bc f3       	brlt	.-18     	; 0x36b6 <vDisplayUpdateTask+0x3c>
    36c8:	60 e4       	ldi	r22, 0x40	; 64
    36ca:	7c e9       	ldi	r23, 0x9C	; 156
    36cc:	80 e0       	ldi	r24, 0x00	; 0
    36ce:	90 e0       	ldi	r25, 0x00	; 0
    36d0:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <delayUS>
    36d4:	83 e0       	ldi	r24, 0x03	; 3
    36d6:	0e 94 41 1a 	call	0x3482	; 0x3482 <setPort>
    36da:	68 e8       	ldi	r22, 0x88	; 136
    36dc:	73 e1       	ldi	r23, 0x13	; 19
    36de:	80 e0       	ldi	r24, 0x00	; 0
    36e0:	90 e0       	ldi	r25, 0x00	; 0
    36e2:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <delayUS>
    36e6:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <Nybble>
    36ea:	60 ea       	ldi	r22, 0xA0	; 160
    36ec:	70 e0       	ldi	r23, 0x00	; 0
    36ee:	80 e0       	ldi	r24, 0x00	; 0
    36f0:	90 e0       	ldi	r25, 0x00	; 0
    36f2:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <delayUS>
    36f6:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <Nybble>
    36fa:	60 ea       	ldi	r22, 0xA0	; 160
    36fc:	70 e0       	ldi	r23, 0x00	; 0
    36fe:	80 e0       	ldi	r24, 0x00	; 0
    3700:	90 e0       	ldi	r25, 0x00	; 0
    3702:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <delayUS>
    3706:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <Nybble>
    370a:	60 ea       	ldi	r22, 0xA0	; 160
    370c:	70 e0       	ldi	r23, 0x00	; 0
    370e:	80 e0       	ldi	r24, 0x00	; 0
    3710:	90 e0       	ldi	r25, 0x00	; 0
    3712:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <delayUS>
    3716:	82 e0       	ldi	r24, 0x02	; 2
    3718:	0e 94 41 1a 	call	0x3482	; 0x3482 <setPort>
    371c:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <Nybble>
    3720:	88 e2       	ldi	r24, 0x28	; 40
    3722:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <command>
    3726:	80 e1       	ldi	r24, 0x10	; 16
    3728:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <command>
    372c:	8c e0       	ldi	r24, 0x0C	; 12
    372e:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <command>
    3732:	86 e0       	ldi	r24, 0x06	; 6
    3734:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <command>
    3738:	68 ec       	ldi	r22, 0xC8	; 200
    373a:	70 e0       	ldi	r23, 0x00	; 0
    373c:	80 e0       	ldi	r24, 0x00	; 0
    373e:	90 e0       	ldi	r25, 0x00	; 0
    3740:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <vTaskDelay>
    3744:	40 e0       	ldi	r20, 0x00	; 0
    3746:	50 e0       	ldi	r21, 0x00	; 0
    3748:	ba 01       	movw	r22, r20
    374a:	80 91 33 31 	lds	r24, 0x3133	; 0x803133 <egDisplayTiming>
    374e:	90 91 34 31 	lds	r25, 0x3134	; 0x803134 <egDisplayTiming+0x1>
    3752:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <xEventGroupClearBits>
    3756:	67 2b       	or	r22, r23
    3758:	68 2b       	or	r22, r24
    375a:	69 2b       	or	r22, r25
    375c:	09 f4       	brne	.+2      	; 0x3760 <vDisplayUpdateTask+0xe6>
    375e:	5f c0       	rjmp	.+190    	; 0x381e <vDisplayUpdateTask+0x1a4>
    3760:	42 e0       	ldi	r20, 0x02	; 2
    3762:	50 e0       	ldi	r21, 0x00	; 0
    3764:	60 e0       	ldi	r22, 0x00	; 0
    3766:	70 e0       	ldi	r23, 0x00	; 0
    3768:	80 91 33 31 	lds	r24, 0x3133	; 0x803133 <egDisplayTiming>
    376c:	90 91 34 31 	lds	r25, 0x3134	; 0x803134 <egDisplayTiming+0x1>
    3770:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <xEventGroupClearBits>
    3774:	40 e0       	ldi	r20, 0x00	; 0
    3776:	50 e0       	ldi	r21, 0x00	; 0
    3778:	19 c0       	rjmp	.+50     	; 0x37ac <vDisplayUpdateTask+0x132>
    377a:	24 e1       	ldi	r18, 0x14	; 20
    377c:	24 9f       	mul	r18, r20
    377e:	f0 01       	movw	r30, r0
    3780:	25 9f       	mul	r18, r21
    3782:	f0 0d       	add	r31, r0
    3784:	11 24       	eor	r1, r1
    3786:	21 e0       	ldi	r18, 0x01	; 1
    3788:	30 e0       	ldi	r19, 0x00	; 0
    378a:	2c 0f       	add	r18, r28
    378c:	3d 1f       	adc	r19, r29
    378e:	e2 0f       	add	r30, r18
    3790:	f3 1f       	adc	r31, r19
    3792:	e8 0f       	add	r30, r24
    3794:	f9 1f       	adc	r31, r25
    3796:	20 e2       	ldi	r18, 0x20	; 32
    3798:	20 83       	st	Z, r18
    379a:	01 96       	adiw	r24, 0x01	; 1
    379c:	02 c0       	rjmp	.+4      	; 0x37a2 <vDisplayUpdateTask+0x128>
    379e:	80 e0       	ldi	r24, 0x00	; 0
    37a0:	90 e0       	ldi	r25, 0x00	; 0
    37a2:	84 31       	cpi	r24, 0x14	; 20
    37a4:	91 05       	cpc	r25, r1
    37a6:	4c f3       	brlt	.-46     	; 0x377a <vDisplayUpdateTask+0x100>
    37a8:	4f 5f       	subi	r20, 0xFF	; 255
    37aa:	5f 4f       	sbci	r21, 0xFF	; 255
    37ac:	44 30       	cpi	r20, 0x04	; 4
    37ae:	51 05       	cpc	r21, r1
    37b0:	b4 f3       	brlt	.-20     	; 0x379e <vDisplayUpdateTask+0x124>
    37b2:	35 c0       	rjmp	.+106    	; 0x381e <vDisplayUpdateTask+0x1a4>
    37b4:	2f ef       	ldi	r18, 0xFF	; 255
    37b6:	3f ef       	ldi	r19, 0xFF	; 255
    37b8:	a9 01       	movw	r20, r18
    37ba:	be 01       	movw	r22, r28
    37bc:	6f 5a       	subi	r22, 0xAF	; 175
    37be:	7f 4f       	sbci	r23, 0xFF	; 255
    37c0:	80 91 31 31 	lds	r24, 0x3131	; 0x803131 <displayLineQueue>
    37c4:	90 91 32 31 	lds	r25, 0x3132	; 0x803132 <displayLineQueue+0x1>
    37c8:	0e 94 c5 08 	call	0x118a	; 0x118a <xQueueReceive>
    37cc:	88 23       	and	r24, r24
    37ce:	39 f1       	breq	.+78     	; 0x381e <vDisplayUpdateTask+0x1a4>
    37d0:	12 c0       	rjmp	.+36     	; 0x37f6 <vDisplayUpdateTask+0x17c>
    37d2:	62 96       	adiw	r28, 0x12	; 18
    37d4:	4f ad       	ldd	r20, Y+63	; 0x3f
    37d6:	62 97       	sbiw	r28, 0x12	; 18
    37d8:	e1 e0       	ldi	r30, 0x01	; 1
    37da:	f0 e0       	ldi	r31, 0x00	; 0
    37dc:	ec 0f       	add	r30, r28
    37de:	fd 1f       	adc	r31, r29
    37e0:	74 e1       	ldi	r23, 0x14	; 20
    37e2:	47 9f       	mul	r20, r23
    37e4:	e0 0d       	add	r30, r0
    37e6:	f1 1d       	adc	r31, r1
    37e8:	11 24       	eor	r1, r1
    37ea:	e8 0f       	add	r30, r24
    37ec:	f9 1f       	adc	r31, r25
    37ee:	60 83       	st	Z, r22
    37f0:	2f 5f       	subi	r18, 0xFF	; 255
    37f2:	3f 4f       	sbci	r19, 0xFF	; 255
    37f4:	02 c0       	rjmp	.+4      	; 0x37fa <vDisplayUpdateTask+0x180>
    37f6:	20 e0       	ldi	r18, 0x00	; 0
    37f8:	30 e0       	ldi	r19, 0x00	; 0
    37fa:	63 96       	adiw	r28, 0x13	; 19
    37fc:	8f ad       	ldd	r24, Y+63	; 0x3f
    37fe:	63 97       	sbiw	r28, 0x13	; 19
    3800:	f9 01       	movw	r30, r18
    3802:	e8 0f       	add	r30, r24
    3804:	f1 1d       	adc	r31, r1
    3806:	cf 01       	movw	r24, r30
    3808:	74 97       	sbiw	r30, 0x14	; 20
    380a:	4c f4       	brge	.+18     	; 0x381e <vDisplayUpdateTask+0x1a4>
    380c:	e1 e5       	ldi	r30, 0x51	; 81
    380e:	f0 e0       	ldi	r31, 0x00	; 0
    3810:	ec 0f       	add	r30, r28
    3812:	fd 1f       	adc	r31, r29
    3814:	e2 0f       	add	r30, r18
    3816:	f3 1f       	adc	r31, r19
    3818:	62 81       	ldd	r22, Z+2	; 0x02
    381a:	61 11       	cpse	r22, r1
    381c:	da cf       	rjmp	.-76     	; 0x37d2 <vDisplayUpdateTask+0x158>
    381e:	80 91 31 31 	lds	r24, 0x3131	; 0x803131 <displayLineQueue>
    3822:	90 91 32 31 	lds	r25, 0x3132	; 0x803132 <displayLineQueue+0x1>
    3826:	0e 94 64 09 	call	0x12c8	; 0x12c8 <uxQueueMessagesWaiting>
    382a:	81 11       	cpse	r24, r1
    382c:	c3 cf       	rjmp	.-122    	; 0x37b4 <vDisplayUpdateTask+0x13a>
    382e:	00 e0       	ldi	r16, 0x00	; 0
    3830:	10 e0       	ldi	r17, 0x00	; 0
    3832:	13 c0       	rjmp	.+38     	; 0x385a <vDisplayUpdateTask+0x1e0>
    3834:	84 e1       	ldi	r24, 0x14	; 20
    3836:	80 9f       	mul	r24, r16
    3838:	a0 01       	movw	r20, r0
    383a:	81 9f       	mul	r24, r17
    383c:	50 0d       	add	r21, r0
    383e:	11 24       	eor	r1, r1
    3840:	21 e0       	ldi	r18, 0x01	; 1
    3842:	30 e0       	ldi	r19, 0x00	; 0
    3844:	2c 0f       	add	r18, r28
    3846:	3d 1f       	adc	r19, r29
    3848:	42 0f       	add	r20, r18
    384a:	53 1f       	adc	r21, r19
    384c:	60 e0       	ldi	r22, 0x00	; 0
    384e:	70 e0       	ldi	r23, 0x00	; 0
    3850:	c8 01       	movw	r24, r16
    3852:	0e 94 32 1b 	call	0x3664	; 0x3664 <_displayWriteStringAtPos>
    3856:	0f 5f       	subi	r16, 0xFF	; 255
    3858:	1f 4f       	sbci	r17, 0xFF	; 255
    385a:	04 30       	cpi	r16, 0x04	; 4
    385c:	11 05       	cpc	r17, r1
    385e:	54 f3       	brlt	.-44     	; 0x3834 <vDisplayUpdateTask+0x1ba>
    3860:	6b cf       	rjmp	.-298    	; 0x3738 <vDisplayUpdateTask+0xbe>

00003862 <vDisplayWriteStringAtPos>:
}

void vDisplayWriteStringAtPos(int line, int pos, char const *fmt, ...) {
    3862:	cf 93       	push	r28
    3864:	df 93       	push	r29
    3866:	cd b7       	in	r28, 0x3d	; 61
    3868:	de b7       	in	r29, 0x3e	; 62
	va_list arg;	
	va_start(arg, fmt);
	display_vprintf(line, pos, fmt, arg);
    386a:	9e 01       	movw	r18, r28
    386c:	24 5f       	subi	r18, 0xF4	; 244
    386e:	3f 4f       	sbci	r19, 0xFF	; 255
    3870:	4a 85       	ldd	r20, Y+10	; 0x0a
    3872:	5b 85       	ldd	r21, Y+11	; 0x0b
    3874:	68 85       	ldd	r22, Y+8	; 0x08
    3876:	79 85       	ldd	r23, Y+9	; 0x09
    3878:	8e 81       	ldd	r24, Y+6	; 0x06
    387a:	9f 81       	ldd	r25, Y+7	; 0x07
    387c:	0e 94 05 18 	call	0x300a	; 0x300a <display_vprintf>
	va_end(arg);	
}
    3880:	df 91       	pop	r29
    3882:	cf 91       	pop	r28
    3884:	08 95       	ret

00003886 <__subsf3>:
    3886:	50 58       	subi	r21, 0x80	; 128

00003888 <__addsf3>:
    3888:	bb 27       	eor	r27, r27
    388a:	aa 27       	eor	r26, r26
    388c:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <__addsf3x>
    3890:	0c 94 d5 1d 	jmp	0x3baa	; 0x3baa <__fp_round>
    3894:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <__fp_pscA>
    3898:	38 f0       	brcs	.+14     	; 0x38a8 <__addsf3+0x20>
    389a:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <__fp_pscB>
    389e:	20 f0       	brcs	.+8      	; 0x38a8 <__addsf3+0x20>
    38a0:	39 f4       	brne	.+14     	; 0x38b0 <__addsf3+0x28>
    38a2:	9f 3f       	cpi	r25, 0xFF	; 255
    38a4:	19 f4       	brne	.+6      	; 0x38ac <__addsf3+0x24>
    38a6:	26 f4       	brtc	.+8      	; 0x38b0 <__addsf3+0x28>
    38a8:	0c 94 c4 1d 	jmp	0x3b88	; 0x3b88 <__fp_nan>
    38ac:	0e f4       	brtc	.+2      	; 0x38b0 <__addsf3+0x28>
    38ae:	e0 95       	com	r30
    38b0:	e7 fb       	bst	r30, 7
    38b2:	0c 94 be 1d 	jmp	0x3b7c	; 0x3b7c <__fp_inf>

000038b6 <__addsf3x>:
    38b6:	e9 2f       	mov	r30, r25
    38b8:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__fp_split3>
    38bc:	58 f3       	brcs	.-42     	; 0x3894 <__addsf3+0xc>
    38be:	ba 17       	cp	r27, r26
    38c0:	62 07       	cpc	r22, r18
    38c2:	73 07       	cpc	r23, r19
    38c4:	84 07       	cpc	r24, r20
    38c6:	95 07       	cpc	r25, r21
    38c8:	20 f0       	brcs	.+8      	; 0x38d2 <__addsf3x+0x1c>
    38ca:	79 f4       	brne	.+30     	; 0x38ea <__addsf3x+0x34>
    38cc:	a6 f5       	brtc	.+104    	; 0x3936 <__addsf3x+0x80>
    38ce:	0c 94 08 1e 	jmp	0x3c10	; 0x3c10 <__fp_zero>
    38d2:	0e f4       	brtc	.+2      	; 0x38d6 <__addsf3x+0x20>
    38d4:	e0 95       	com	r30
    38d6:	0b 2e       	mov	r0, r27
    38d8:	ba 2f       	mov	r27, r26
    38da:	a0 2d       	mov	r26, r0
    38dc:	0b 01       	movw	r0, r22
    38de:	b9 01       	movw	r22, r18
    38e0:	90 01       	movw	r18, r0
    38e2:	0c 01       	movw	r0, r24
    38e4:	ca 01       	movw	r24, r20
    38e6:	a0 01       	movw	r20, r0
    38e8:	11 24       	eor	r1, r1
    38ea:	ff 27       	eor	r31, r31
    38ec:	59 1b       	sub	r21, r25
    38ee:	99 f0       	breq	.+38     	; 0x3916 <__addsf3x+0x60>
    38f0:	59 3f       	cpi	r21, 0xF9	; 249
    38f2:	50 f4       	brcc	.+20     	; 0x3908 <__addsf3x+0x52>
    38f4:	50 3e       	cpi	r21, 0xE0	; 224
    38f6:	68 f1       	brcs	.+90     	; 0x3952 <__addsf3x+0x9c>
    38f8:	1a 16       	cp	r1, r26
    38fa:	f0 40       	sbci	r31, 0x00	; 0
    38fc:	a2 2f       	mov	r26, r18
    38fe:	23 2f       	mov	r18, r19
    3900:	34 2f       	mov	r19, r20
    3902:	44 27       	eor	r20, r20
    3904:	58 5f       	subi	r21, 0xF8	; 248
    3906:	f3 cf       	rjmp	.-26     	; 0x38ee <__addsf3x+0x38>
    3908:	46 95       	lsr	r20
    390a:	37 95       	ror	r19
    390c:	27 95       	ror	r18
    390e:	a7 95       	ror	r26
    3910:	f0 40       	sbci	r31, 0x00	; 0
    3912:	53 95       	inc	r21
    3914:	c9 f7       	brne	.-14     	; 0x3908 <__addsf3x+0x52>
    3916:	7e f4       	brtc	.+30     	; 0x3936 <__addsf3x+0x80>
    3918:	1f 16       	cp	r1, r31
    391a:	ba 0b       	sbc	r27, r26
    391c:	62 0b       	sbc	r22, r18
    391e:	73 0b       	sbc	r23, r19
    3920:	84 0b       	sbc	r24, r20
    3922:	ba f0       	brmi	.+46     	; 0x3952 <__addsf3x+0x9c>
    3924:	91 50       	subi	r25, 0x01	; 1
    3926:	a1 f0       	breq	.+40     	; 0x3950 <__addsf3x+0x9a>
    3928:	ff 0f       	add	r31, r31
    392a:	bb 1f       	adc	r27, r27
    392c:	66 1f       	adc	r22, r22
    392e:	77 1f       	adc	r23, r23
    3930:	88 1f       	adc	r24, r24
    3932:	c2 f7       	brpl	.-16     	; 0x3924 <__addsf3x+0x6e>
    3934:	0e c0       	rjmp	.+28     	; 0x3952 <__addsf3x+0x9c>
    3936:	ba 0f       	add	r27, r26
    3938:	62 1f       	adc	r22, r18
    393a:	73 1f       	adc	r23, r19
    393c:	84 1f       	adc	r24, r20
    393e:	48 f4       	brcc	.+18     	; 0x3952 <__addsf3x+0x9c>
    3940:	87 95       	ror	r24
    3942:	77 95       	ror	r23
    3944:	67 95       	ror	r22
    3946:	b7 95       	ror	r27
    3948:	f7 95       	ror	r31
    394a:	9e 3f       	cpi	r25, 0xFE	; 254
    394c:	08 f0       	brcs	.+2      	; 0x3950 <__addsf3x+0x9a>
    394e:	b0 cf       	rjmp	.-160    	; 0x38b0 <__addsf3+0x28>
    3950:	93 95       	inc	r25
    3952:	88 0f       	add	r24, r24
    3954:	08 f0       	brcs	.+2      	; 0x3958 <__addsf3x+0xa2>
    3956:	99 27       	eor	r25, r25
    3958:	ee 0f       	add	r30, r30
    395a:	97 95       	ror	r25
    395c:	87 95       	ror	r24
    395e:	08 95       	ret

00003960 <__cmpsf2>:
    3960:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <__fp_cmp>
    3964:	08 f4       	brcc	.+2      	; 0x3968 <__cmpsf2+0x8>
    3966:	81 e0       	ldi	r24, 0x01	; 1
    3968:	08 95       	ret

0000396a <__divsf3>:
    396a:	0e 94 c9 1c 	call	0x3992	; 0x3992 <__divsf3x>
    396e:	0c 94 d5 1d 	jmp	0x3baa	; 0x3baa <__fp_round>
    3972:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <__fp_pscB>
    3976:	58 f0       	brcs	.+22     	; 0x398e <__divsf3+0x24>
    3978:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <__fp_pscA>
    397c:	40 f0       	brcs	.+16     	; 0x398e <__divsf3+0x24>
    397e:	29 f4       	brne	.+10     	; 0x398a <__divsf3+0x20>
    3980:	5f 3f       	cpi	r21, 0xFF	; 255
    3982:	29 f0       	breq	.+10     	; 0x398e <__divsf3+0x24>
    3984:	0c 94 be 1d 	jmp	0x3b7c	; 0x3b7c <__fp_inf>
    3988:	51 11       	cpse	r21, r1
    398a:	0c 94 09 1e 	jmp	0x3c12	; 0x3c12 <__fp_szero>
    398e:	0c 94 c4 1d 	jmp	0x3b88	; 0x3b88 <__fp_nan>

00003992 <__divsf3x>:
    3992:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__fp_split3>
    3996:	68 f3       	brcs	.-38     	; 0x3972 <__divsf3+0x8>

00003998 <__divsf3_pse>:
    3998:	99 23       	and	r25, r25
    399a:	b1 f3       	breq	.-20     	; 0x3988 <__divsf3+0x1e>
    399c:	55 23       	and	r21, r21
    399e:	91 f3       	breq	.-28     	; 0x3984 <__divsf3+0x1a>
    39a0:	95 1b       	sub	r25, r21
    39a2:	55 0b       	sbc	r21, r21
    39a4:	bb 27       	eor	r27, r27
    39a6:	aa 27       	eor	r26, r26
    39a8:	62 17       	cp	r22, r18
    39aa:	73 07       	cpc	r23, r19
    39ac:	84 07       	cpc	r24, r20
    39ae:	38 f0       	brcs	.+14     	; 0x39be <__divsf3_pse+0x26>
    39b0:	9f 5f       	subi	r25, 0xFF	; 255
    39b2:	5f 4f       	sbci	r21, 0xFF	; 255
    39b4:	22 0f       	add	r18, r18
    39b6:	33 1f       	adc	r19, r19
    39b8:	44 1f       	adc	r20, r20
    39ba:	aa 1f       	adc	r26, r26
    39bc:	a9 f3       	breq	.-22     	; 0x39a8 <__divsf3_pse+0x10>
    39be:	35 d0       	rcall	.+106    	; 0x3a2a <__divsf3_pse+0x92>
    39c0:	0e 2e       	mov	r0, r30
    39c2:	3a f0       	brmi	.+14     	; 0x39d2 <__divsf3_pse+0x3a>
    39c4:	e0 e8       	ldi	r30, 0x80	; 128
    39c6:	32 d0       	rcall	.+100    	; 0x3a2c <__divsf3_pse+0x94>
    39c8:	91 50       	subi	r25, 0x01	; 1
    39ca:	50 40       	sbci	r21, 0x00	; 0
    39cc:	e6 95       	lsr	r30
    39ce:	00 1c       	adc	r0, r0
    39d0:	ca f7       	brpl	.-14     	; 0x39c4 <__divsf3_pse+0x2c>
    39d2:	2b d0       	rcall	.+86     	; 0x3a2a <__divsf3_pse+0x92>
    39d4:	fe 2f       	mov	r31, r30
    39d6:	29 d0       	rcall	.+82     	; 0x3a2a <__divsf3_pse+0x92>
    39d8:	66 0f       	add	r22, r22
    39da:	77 1f       	adc	r23, r23
    39dc:	88 1f       	adc	r24, r24
    39de:	bb 1f       	adc	r27, r27
    39e0:	26 17       	cp	r18, r22
    39e2:	37 07       	cpc	r19, r23
    39e4:	48 07       	cpc	r20, r24
    39e6:	ab 07       	cpc	r26, r27
    39e8:	b0 e8       	ldi	r27, 0x80	; 128
    39ea:	09 f0       	breq	.+2      	; 0x39ee <__divsf3_pse+0x56>
    39ec:	bb 0b       	sbc	r27, r27
    39ee:	80 2d       	mov	r24, r0
    39f0:	bf 01       	movw	r22, r30
    39f2:	ff 27       	eor	r31, r31
    39f4:	93 58       	subi	r25, 0x83	; 131
    39f6:	5f 4f       	sbci	r21, 0xFF	; 255
    39f8:	3a f0       	brmi	.+14     	; 0x3a08 <__divsf3_pse+0x70>
    39fa:	9e 3f       	cpi	r25, 0xFE	; 254
    39fc:	51 05       	cpc	r21, r1
    39fe:	78 f0       	brcs	.+30     	; 0x3a1e <__divsf3_pse+0x86>
    3a00:	0c 94 be 1d 	jmp	0x3b7c	; 0x3b7c <__fp_inf>
    3a04:	0c 94 09 1e 	jmp	0x3c12	; 0x3c12 <__fp_szero>
    3a08:	5f 3f       	cpi	r21, 0xFF	; 255
    3a0a:	e4 f3       	brlt	.-8      	; 0x3a04 <__divsf3_pse+0x6c>
    3a0c:	98 3e       	cpi	r25, 0xE8	; 232
    3a0e:	d4 f3       	brlt	.-12     	; 0x3a04 <__divsf3_pse+0x6c>
    3a10:	86 95       	lsr	r24
    3a12:	77 95       	ror	r23
    3a14:	67 95       	ror	r22
    3a16:	b7 95       	ror	r27
    3a18:	f7 95       	ror	r31
    3a1a:	9f 5f       	subi	r25, 0xFF	; 255
    3a1c:	c9 f7       	brne	.-14     	; 0x3a10 <__divsf3_pse+0x78>
    3a1e:	88 0f       	add	r24, r24
    3a20:	91 1d       	adc	r25, r1
    3a22:	96 95       	lsr	r25
    3a24:	87 95       	ror	r24
    3a26:	97 f9       	bld	r25, 7
    3a28:	08 95       	ret
    3a2a:	e1 e0       	ldi	r30, 0x01	; 1
    3a2c:	66 0f       	add	r22, r22
    3a2e:	77 1f       	adc	r23, r23
    3a30:	88 1f       	adc	r24, r24
    3a32:	bb 1f       	adc	r27, r27
    3a34:	62 17       	cp	r22, r18
    3a36:	73 07       	cpc	r23, r19
    3a38:	84 07       	cpc	r24, r20
    3a3a:	ba 07       	cpc	r27, r26
    3a3c:	20 f0       	brcs	.+8      	; 0x3a46 <__divsf3_pse+0xae>
    3a3e:	62 1b       	sub	r22, r18
    3a40:	73 0b       	sbc	r23, r19
    3a42:	84 0b       	sbc	r24, r20
    3a44:	ba 0b       	sbc	r27, r26
    3a46:	ee 1f       	adc	r30, r30
    3a48:	88 f7       	brcc	.-30     	; 0x3a2c <__divsf3_pse+0x94>
    3a4a:	e0 95       	com	r30
    3a4c:	08 95       	ret

00003a4e <__fixsfsi>:
    3a4e:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <__fixunssfsi>
    3a52:	68 94       	set
    3a54:	b1 11       	cpse	r27, r1
    3a56:	0c 94 09 1e 	jmp	0x3c12	; 0x3c12 <__fp_szero>
    3a5a:	08 95       	ret

00003a5c <__fixunssfsi>:
    3a5c:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <__fp_splitA>
    3a60:	88 f0       	brcs	.+34     	; 0x3a84 <__fixunssfsi+0x28>
    3a62:	9f 57       	subi	r25, 0x7F	; 127
    3a64:	98 f0       	brcs	.+38     	; 0x3a8c <__fixunssfsi+0x30>
    3a66:	b9 2f       	mov	r27, r25
    3a68:	99 27       	eor	r25, r25
    3a6a:	b7 51       	subi	r27, 0x17	; 23
    3a6c:	b0 f0       	brcs	.+44     	; 0x3a9a <__fixunssfsi+0x3e>
    3a6e:	e1 f0       	breq	.+56     	; 0x3aa8 <__fixunssfsi+0x4c>
    3a70:	66 0f       	add	r22, r22
    3a72:	77 1f       	adc	r23, r23
    3a74:	88 1f       	adc	r24, r24
    3a76:	99 1f       	adc	r25, r25
    3a78:	1a f0       	brmi	.+6      	; 0x3a80 <__fixunssfsi+0x24>
    3a7a:	ba 95       	dec	r27
    3a7c:	c9 f7       	brne	.-14     	; 0x3a70 <__fixunssfsi+0x14>
    3a7e:	14 c0       	rjmp	.+40     	; 0x3aa8 <__fixunssfsi+0x4c>
    3a80:	b1 30       	cpi	r27, 0x01	; 1
    3a82:	91 f0       	breq	.+36     	; 0x3aa8 <__fixunssfsi+0x4c>
    3a84:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__fp_zero>
    3a88:	b1 e0       	ldi	r27, 0x01	; 1
    3a8a:	08 95       	ret
    3a8c:	0c 94 08 1e 	jmp	0x3c10	; 0x3c10 <__fp_zero>
    3a90:	67 2f       	mov	r22, r23
    3a92:	78 2f       	mov	r23, r24
    3a94:	88 27       	eor	r24, r24
    3a96:	b8 5f       	subi	r27, 0xF8	; 248
    3a98:	39 f0       	breq	.+14     	; 0x3aa8 <__fixunssfsi+0x4c>
    3a9a:	b9 3f       	cpi	r27, 0xF9	; 249
    3a9c:	cc f3       	brlt	.-14     	; 0x3a90 <__fixunssfsi+0x34>
    3a9e:	86 95       	lsr	r24
    3aa0:	77 95       	ror	r23
    3aa2:	67 95       	ror	r22
    3aa4:	b3 95       	inc	r27
    3aa6:	d9 f7       	brne	.-10     	; 0x3a9e <__fixunssfsi+0x42>
    3aa8:	3e f4       	brtc	.+14     	; 0x3ab8 <__fixunssfsi+0x5c>
    3aaa:	90 95       	com	r25
    3aac:	80 95       	com	r24
    3aae:	70 95       	com	r23
    3ab0:	61 95       	neg	r22
    3ab2:	7f 4f       	sbci	r23, 0xFF	; 255
    3ab4:	8f 4f       	sbci	r24, 0xFF	; 255
    3ab6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ab8:	08 95       	ret

00003aba <__floatunsisf>:
    3aba:	e8 94       	clt
    3abc:	09 c0       	rjmp	.+18     	; 0x3ad0 <__floatsisf+0x12>

00003abe <__floatsisf>:
    3abe:	97 fb       	bst	r25, 7
    3ac0:	3e f4       	brtc	.+14     	; 0x3ad0 <__floatsisf+0x12>
    3ac2:	90 95       	com	r25
    3ac4:	80 95       	com	r24
    3ac6:	70 95       	com	r23
    3ac8:	61 95       	neg	r22
    3aca:	7f 4f       	sbci	r23, 0xFF	; 255
    3acc:	8f 4f       	sbci	r24, 0xFF	; 255
    3ace:	9f 4f       	sbci	r25, 0xFF	; 255
    3ad0:	99 23       	and	r25, r25
    3ad2:	a9 f0       	breq	.+42     	; 0x3afe <__floatsisf+0x40>
    3ad4:	f9 2f       	mov	r31, r25
    3ad6:	96 e9       	ldi	r25, 0x96	; 150
    3ad8:	bb 27       	eor	r27, r27
    3ada:	93 95       	inc	r25
    3adc:	f6 95       	lsr	r31
    3ade:	87 95       	ror	r24
    3ae0:	77 95       	ror	r23
    3ae2:	67 95       	ror	r22
    3ae4:	b7 95       	ror	r27
    3ae6:	f1 11       	cpse	r31, r1
    3ae8:	f8 cf       	rjmp	.-16     	; 0x3ada <__floatsisf+0x1c>
    3aea:	fa f4       	brpl	.+62     	; 0x3b2a <__floatsisf+0x6c>
    3aec:	bb 0f       	add	r27, r27
    3aee:	11 f4       	brne	.+4      	; 0x3af4 <__floatsisf+0x36>
    3af0:	60 ff       	sbrs	r22, 0
    3af2:	1b c0       	rjmp	.+54     	; 0x3b2a <__floatsisf+0x6c>
    3af4:	6f 5f       	subi	r22, 0xFF	; 255
    3af6:	7f 4f       	sbci	r23, 0xFF	; 255
    3af8:	8f 4f       	sbci	r24, 0xFF	; 255
    3afa:	9f 4f       	sbci	r25, 0xFF	; 255
    3afc:	16 c0       	rjmp	.+44     	; 0x3b2a <__floatsisf+0x6c>
    3afe:	88 23       	and	r24, r24
    3b00:	11 f0       	breq	.+4      	; 0x3b06 <__floatsisf+0x48>
    3b02:	96 e9       	ldi	r25, 0x96	; 150
    3b04:	11 c0       	rjmp	.+34     	; 0x3b28 <__floatsisf+0x6a>
    3b06:	77 23       	and	r23, r23
    3b08:	21 f0       	breq	.+8      	; 0x3b12 <__floatsisf+0x54>
    3b0a:	9e e8       	ldi	r25, 0x8E	; 142
    3b0c:	87 2f       	mov	r24, r23
    3b0e:	76 2f       	mov	r23, r22
    3b10:	05 c0       	rjmp	.+10     	; 0x3b1c <__floatsisf+0x5e>
    3b12:	66 23       	and	r22, r22
    3b14:	71 f0       	breq	.+28     	; 0x3b32 <__floatsisf+0x74>
    3b16:	96 e8       	ldi	r25, 0x86	; 134
    3b18:	86 2f       	mov	r24, r22
    3b1a:	70 e0       	ldi	r23, 0x00	; 0
    3b1c:	60 e0       	ldi	r22, 0x00	; 0
    3b1e:	2a f0       	brmi	.+10     	; 0x3b2a <__floatsisf+0x6c>
    3b20:	9a 95       	dec	r25
    3b22:	66 0f       	add	r22, r22
    3b24:	77 1f       	adc	r23, r23
    3b26:	88 1f       	adc	r24, r24
    3b28:	da f7       	brpl	.-10     	; 0x3b20 <__floatsisf+0x62>
    3b2a:	88 0f       	add	r24, r24
    3b2c:	96 95       	lsr	r25
    3b2e:	87 95       	ror	r24
    3b30:	97 f9       	bld	r25, 7
    3b32:	08 95       	ret

00003b34 <__fp_cmp>:
    3b34:	99 0f       	add	r25, r25
    3b36:	00 08       	sbc	r0, r0
    3b38:	55 0f       	add	r21, r21
    3b3a:	aa 0b       	sbc	r26, r26
    3b3c:	e0 e8       	ldi	r30, 0x80	; 128
    3b3e:	fe ef       	ldi	r31, 0xFE	; 254
    3b40:	16 16       	cp	r1, r22
    3b42:	17 06       	cpc	r1, r23
    3b44:	e8 07       	cpc	r30, r24
    3b46:	f9 07       	cpc	r31, r25
    3b48:	c0 f0       	brcs	.+48     	; 0x3b7a <__fp_cmp+0x46>
    3b4a:	12 16       	cp	r1, r18
    3b4c:	13 06       	cpc	r1, r19
    3b4e:	e4 07       	cpc	r30, r20
    3b50:	f5 07       	cpc	r31, r21
    3b52:	98 f0       	brcs	.+38     	; 0x3b7a <__fp_cmp+0x46>
    3b54:	62 1b       	sub	r22, r18
    3b56:	73 0b       	sbc	r23, r19
    3b58:	84 0b       	sbc	r24, r20
    3b5a:	95 0b       	sbc	r25, r21
    3b5c:	39 f4       	brne	.+14     	; 0x3b6c <__fp_cmp+0x38>
    3b5e:	0a 26       	eor	r0, r26
    3b60:	61 f0       	breq	.+24     	; 0x3b7a <__fp_cmp+0x46>
    3b62:	23 2b       	or	r18, r19
    3b64:	24 2b       	or	r18, r20
    3b66:	25 2b       	or	r18, r21
    3b68:	21 f4       	brne	.+8      	; 0x3b72 <__fp_cmp+0x3e>
    3b6a:	08 95       	ret
    3b6c:	0a 26       	eor	r0, r26
    3b6e:	09 f4       	brne	.+2      	; 0x3b72 <__fp_cmp+0x3e>
    3b70:	a1 40       	sbci	r26, 0x01	; 1
    3b72:	a6 95       	lsr	r26
    3b74:	8f ef       	ldi	r24, 0xFF	; 255
    3b76:	81 1d       	adc	r24, r1
    3b78:	81 1d       	adc	r24, r1
    3b7a:	08 95       	ret

00003b7c <__fp_inf>:
    3b7c:	97 f9       	bld	r25, 7
    3b7e:	9f 67       	ori	r25, 0x7F	; 127
    3b80:	80 e8       	ldi	r24, 0x80	; 128
    3b82:	70 e0       	ldi	r23, 0x00	; 0
    3b84:	60 e0       	ldi	r22, 0x00	; 0
    3b86:	08 95       	ret

00003b88 <__fp_nan>:
    3b88:	9f ef       	ldi	r25, 0xFF	; 255
    3b8a:	80 ec       	ldi	r24, 0xC0	; 192
    3b8c:	08 95       	ret

00003b8e <__fp_pscA>:
    3b8e:	00 24       	eor	r0, r0
    3b90:	0a 94       	dec	r0
    3b92:	16 16       	cp	r1, r22
    3b94:	17 06       	cpc	r1, r23
    3b96:	18 06       	cpc	r1, r24
    3b98:	09 06       	cpc	r0, r25
    3b9a:	08 95       	ret

00003b9c <__fp_pscB>:
    3b9c:	00 24       	eor	r0, r0
    3b9e:	0a 94       	dec	r0
    3ba0:	12 16       	cp	r1, r18
    3ba2:	13 06       	cpc	r1, r19
    3ba4:	14 06       	cpc	r1, r20
    3ba6:	05 06       	cpc	r0, r21
    3ba8:	08 95       	ret

00003baa <__fp_round>:
    3baa:	09 2e       	mov	r0, r25
    3bac:	03 94       	inc	r0
    3bae:	00 0c       	add	r0, r0
    3bb0:	11 f4       	brne	.+4      	; 0x3bb6 <__fp_round+0xc>
    3bb2:	88 23       	and	r24, r24
    3bb4:	52 f0       	brmi	.+20     	; 0x3bca <__fp_round+0x20>
    3bb6:	bb 0f       	add	r27, r27
    3bb8:	40 f4       	brcc	.+16     	; 0x3bca <__fp_round+0x20>
    3bba:	bf 2b       	or	r27, r31
    3bbc:	11 f4       	brne	.+4      	; 0x3bc2 <__fp_round+0x18>
    3bbe:	60 ff       	sbrs	r22, 0
    3bc0:	04 c0       	rjmp	.+8      	; 0x3bca <__fp_round+0x20>
    3bc2:	6f 5f       	subi	r22, 0xFF	; 255
    3bc4:	7f 4f       	sbci	r23, 0xFF	; 255
    3bc6:	8f 4f       	sbci	r24, 0xFF	; 255
    3bc8:	9f 4f       	sbci	r25, 0xFF	; 255
    3bca:	08 95       	ret

00003bcc <__fp_split3>:
    3bcc:	57 fd       	sbrc	r21, 7
    3bce:	90 58       	subi	r25, 0x80	; 128
    3bd0:	44 0f       	add	r20, r20
    3bd2:	55 1f       	adc	r21, r21
    3bd4:	59 f0       	breq	.+22     	; 0x3bec <__fp_splitA+0x10>
    3bd6:	5f 3f       	cpi	r21, 0xFF	; 255
    3bd8:	71 f0       	breq	.+28     	; 0x3bf6 <__fp_splitA+0x1a>
    3bda:	47 95       	ror	r20

00003bdc <__fp_splitA>:
    3bdc:	88 0f       	add	r24, r24
    3bde:	97 fb       	bst	r25, 7
    3be0:	99 1f       	adc	r25, r25
    3be2:	61 f0       	breq	.+24     	; 0x3bfc <__fp_splitA+0x20>
    3be4:	9f 3f       	cpi	r25, 0xFF	; 255
    3be6:	79 f0       	breq	.+30     	; 0x3c06 <__fp_splitA+0x2a>
    3be8:	87 95       	ror	r24
    3bea:	08 95       	ret
    3bec:	12 16       	cp	r1, r18
    3bee:	13 06       	cpc	r1, r19
    3bf0:	14 06       	cpc	r1, r20
    3bf2:	55 1f       	adc	r21, r21
    3bf4:	f2 cf       	rjmp	.-28     	; 0x3bda <__fp_split3+0xe>
    3bf6:	46 95       	lsr	r20
    3bf8:	f1 df       	rcall	.-30     	; 0x3bdc <__fp_splitA>
    3bfa:	08 c0       	rjmp	.+16     	; 0x3c0c <__fp_splitA+0x30>
    3bfc:	16 16       	cp	r1, r22
    3bfe:	17 06       	cpc	r1, r23
    3c00:	18 06       	cpc	r1, r24
    3c02:	99 1f       	adc	r25, r25
    3c04:	f1 cf       	rjmp	.-30     	; 0x3be8 <__fp_splitA+0xc>
    3c06:	86 95       	lsr	r24
    3c08:	71 05       	cpc	r23, r1
    3c0a:	61 05       	cpc	r22, r1
    3c0c:	08 94       	sec
    3c0e:	08 95       	ret

00003c10 <__fp_zero>:
    3c10:	e8 94       	clt

00003c12 <__fp_szero>:
    3c12:	bb 27       	eor	r27, r27
    3c14:	66 27       	eor	r22, r22
    3c16:	77 27       	eor	r23, r23
    3c18:	cb 01       	movw	r24, r22
    3c1a:	97 f9       	bld	r25, 7
    3c1c:	08 95       	ret

00003c1e <__gesf2>:
    3c1e:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <__fp_cmp>
    3c22:	08 f4       	brcc	.+2      	; 0x3c26 <__gesf2+0x8>
    3c24:	8f ef       	ldi	r24, 0xFF	; 255
    3c26:	08 95       	ret

00003c28 <__mulsf3>:
    3c28:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <__mulsf3x>
    3c2c:	0c 94 d5 1d 	jmp	0x3baa	; 0x3baa <__fp_round>
    3c30:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <__fp_pscA>
    3c34:	38 f0       	brcs	.+14     	; 0x3c44 <__mulsf3+0x1c>
    3c36:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <__fp_pscB>
    3c3a:	20 f0       	brcs	.+8      	; 0x3c44 <__mulsf3+0x1c>
    3c3c:	95 23       	and	r25, r21
    3c3e:	11 f0       	breq	.+4      	; 0x3c44 <__mulsf3+0x1c>
    3c40:	0c 94 be 1d 	jmp	0x3b7c	; 0x3b7c <__fp_inf>
    3c44:	0c 94 c4 1d 	jmp	0x3b88	; 0x3b88 <__fp_nan>
    3c48:	11 24       	eor	r1, r1
    3c4a:	0c 94 09 1e 	jmp	0x3c12	; 0x3c12 <__fp_szero>

00003c4e <__mulsf3x>:
    3c4e:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__fp_split3>
    3c52:	70 f3       	brcs	.-36     	; 0x3c30 <__mulsf3+0x8>

00003c54 <__mulsf3_pse>:
    3c54:	95 9f       	mul	r25, r21
    3c56:	c1 f3       	breq	.-16     	; 0x3c48 <__mulsf3+0x20>
    3c58:	95 0f       	add	r25, r21
    3c5a:	50 e0       	ldi	r21, 0x00	; 0
    3c5c:	55 1f       	adc	r21, r21
    3c5e:	62 9f       	mul	r22, r18
    3c60:	f0 01       	movw	r30, r0
    3c62:	72 9f       	mul	r23, r18
    3c64:	bb 27       	eor	r27, r27
    3c66:	f0 0d       	add	r31, r0
    3c68:	b1 1d       	adc	r27, r1
    3c6a:	63 9f       	mul	r22, r19
    3c6c:	aa 27       	eor	r26, r26
    3c6e:	f0 0d       	add	r31, r0
    3c70:	b1 1d       	adc	r27, r1
    3c72:	aa 1f       	adc	r26, r26
    3c74:	64 9f       	mul	r22, r20
    3c76:	66 27       	eor	r22, r22
    3c78:	b0 0d       	add	r27, r0
    3c7a:	a1 1d       	adc	r26, r1
    3c7c:	66 1f       	adc	r22, r22
    3c7e:	82 9f       	mul	r24, r18
    3c80:	22 27       	eor	r18, r18
    3c82:	b0 0d       	add	r27, r0
    3c84:	a1 1d       	adc	r26, r1
    3c86:	62 1f       	adc	r22, r18
    3c88:	73 9f       	mul	r23, r19
    3c8a:	b0 0d       	add	r27, r0
    3c8c:	a1 1d       	adc	r26, r1
    3c8e:	62 1f       	adc	r22, r18
    3c90:	83 9f       	mul	r24, r19
    3c92:	a0 0d       	add	r26, r0
    3c94:	61 1d       	adc	r22, r1
    3c96:	22 1f       	adc	r18, r18
    3c98:	74 9f       	mul	r23, r20
    3c9a:	33 27       	eor	r19, r19
    3c9c:	a0 0d       	add	r26, r0
    3c9e:	61 1d       	adc	r22, r1
    3ca0:	23 1f       	adc	r18, r19
    3ca2:	84 9f       	mul	r24, r20
    3ca4:	60 0d       	add	r22, r0
    3ca6:	21 1d       	adc	r18, r1
    3ca8:	82 2f       	mov	r24, r18
    3caa:	76 2f       	mov	r23, r22
    3cac:	6a 2f       	mov	r22, r26
    3cae:	11 24       	eor	r1, r1
    3cb0:	9f 57       	subi	r25, 0x7F	; 127
    3cb2:	50 40       	sbci	r21, 0x00	; 0
    3cb4:	9a f0       	brmi	.+38     	; 0x3cdc <__mulsf3_pse+0x88>
    3cb6:	f1 f0       	breq	.+60     	; 0x3cf4 <__mulsf3_pse+0xa0>
    3cb8:	88 23       	and	r24, r24
    3cba:	4a f0       	brmi	.+18     	; 0x3cce <__mulsf3_pse+0x7a>
    3cbc:	ee 0f       	add	r30, r30
    3cbe:	ff 1f       	adc	r31, r31
    3cc0:	bb 1f       	adc	r27, r27
    3cc2:	66 1f       	adc	r22, r22
    3cc4:	77 1f       	adc	r23, r23
    3cc6:	88 1f       	adc	r24, r24
    3cc8:	91 50       	subi	r25, 0x01	; 1
    3cca:	50 40       	sbci	r21, 0x00	; 0
    3ccc:	a9 f7       	brne	.-22     	; 0x3cb8 <__mulsf3_pse+0x64>
    3cce:	9e 3f       	cpi	r25, 0xFE	; 254
    3cd0:	51 05       	cpc	r21, r1
    3cd2:	80 f0       	brcs	.+32     	; 0x3cf4 <__mulsf3_pse+0xa0>
    3cd4:	0c 94 be 1d 	jmp	0x3b7c	; 0x3b7c <__fp_inf>
    3cd8:	0c 94 09 1e 	jmp	0x3c12	; 0x3c12 <__fp_szero>
    3cdc:	5f 3f       	cpi	r21, 0xFF	; 255
    3cde:	e4 f3       	brlt	.-8      	; 0x3cd8 <__mulsf3_pse+0x84>
    3ce0:	98 3e       	cpi	r25, 0xE8	; 232
    3ce2:	d4 f3       	brlt	.-12     	; 0x3cd8 <__mulsf3_pse+0x84>
    3ce4:	86 95       	lsr	r24
    3ce6:	77 95       	ror	r23
    3ce8:	67 95       	ror	r22
    3cea:	b7 95       	ror	r27
    3cec:	f7 95       	ror	r31
    3cee:	e7 95       	ror	r30
    3cf0:	9f 5f       	subi	r25, 0xFF	; 255
    3cf2:	c1 f7       	brne	.-16     	; 0x3ce4 <__mulsf3_pse+0x90>
    3cf4:	fe 2b       	or	r31, r30
    3cf6:	88 0f       	add	r24, r24
    3cf8:	91 1d       	adc	r25, r1
    3cfa:	96 95       	lsr	r25
    3cfc:	87 95       	ror	r24
    3cfe:	97 f9       	bld	r25, 7
    3d00:	08 95       	ret
    3d02:	19 f4       	brne	.+6      	; 0x3d0a <__mulsf3_pse+0xb6>
    3d04:	16 f4       	brtc	.+4      	; 0x3d0a <__mulsf3_pse+0xb6>
    3d06:	0c 94 c4 1d 	jmp	0x3b88	; 0x3b88 <__fp_nan>
    3d0a:	0c 94 c7 1e 	jmp	0x3d8e	; 0x3d8e <__fp_mpack>

00003d0e <sqrt>:
    3d0e:	0e 94 ee 1d 	call	0x3bdc	; 0x3bdc <__fp_splitA>
    3d12:	b8 f3       	brcs	.-18     	; 0x3d02 <__mulsf3_pse+0xae>
    3d14:	99 23       	and	r25, r25
    3d16:	c9 f3       	breq	.-14     	; 0x3d0a <__mulsf3_pse+0xb6>
    3d18:	b6 f3       	brts	.-20     	; 0x3d06 <__mulsf3_pse+0xb2>
    3d1a:	9f 57       	subi	r25, 0x7F	; 127
    3d1c:	55 0b       	sbc	r21, r21
    3d1e:	87 ff       	sbrs	r24, 7
    3d20:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <__fp_norm2>
    3d24:	00 24       	eor	r0, r0
    3d26:	a0 e6       	ldi	r26, 0x60	; 96
    3d28:	40 ea       	ldi	r20, 0xA0	; 160
    3d2a:	90 01       	movw	r18, r0
    3d2c:	80 58       	subi	r24, 0x80	; 128
    3d2e:	56 95       	lsr	r21
    3d30:	97 95       	ror	r25
    3d32:	28 f4       	brcc	.+10     	; 0x3d3e <sqrt+0x30>
    3d34:	80 5c       	subi	r24, 0xC0	; 192
    3d36:	66 0f       	add	r22, r22
    3d38:	77 1f       	adc	r23, r23
    3d3a:	88 1f       	adc	r24, r24
    3d3c:	20 f0       	brcs	.+8      	; 0x3d46 <sqrt+0x38>
    3d3e:	26 17       	cp	r18, r22
    3d40:	37 07       	cpc	r19, r23
    3d42:	48 07       	cpc	r20, r24
    3d44:	30 f4       	brcc	.+12     	; 0x3d52 <sqrt+0x44>
    3d46:	62 1b       	sub	r22, r18
    3d48:	73 0b       	sbc	r23, r19
    3d4a:	84 0b       	sbc	r24, r20
    3d4c:	20 29       	or	r18, r0
    3d4e:	31 29       	or	r19, r1
    3d50:	4a 2b       	or	r20, r26
    3d52:	a6 95       	lsr	r26
    3d54:	17 94       	ror	r1
    3d56:	07 94       	ror	r0
    3d58:	20 25       	eor	r18, r0
    3d5a:	31 25       	eor	r19, r1
    3d5c:	4a 27       	eor	r20, r26
    3d5e:	58 f7       	brcc	.-42     	; 0x3d36 <sqrt+0x28>
    3d60:	66 0f       	add	r22, r22
    3d62:	77 1f       	adc	r23, r23
    3d64:	88 1f       	adc	r24, r24
    3d66:	20 f0       	brcs	.+8      	; 0x3d70 <sqrt+0x62>
    3d68:	26 17       	cp	r18, r22
    3d6a:	37 07       	cpc	r19, r23
    3d6c:	48 07       	cpc	r20, r24
    3d6e:	30 f4       	brcc	.+12     	; 0x3d7c <sqrt+0x6e>
    3d70:	62 0b       	sbc	r22, r18
    3d72:	73 0b       	sbc	r23, r19
    3d74:	84 0b       	sbc	r24, r20
    3d76:	20 0d       	add	r18, r0
    3d78:	31 1d       	adc	r19, r1
    3d7a:	41 1d       	adc	r20, r1
    3d7c:	a0 95       	com	r26
    3d7e:	81 f7       	brne	.-32     	; 0x3d60 <sqrt+0x52>
    3d80:	b9 01       	movw	r22, r18
    3d82:	84 2f       	mov	r24, r20
    3d84:	91 58       	subi	r25, 0x81	; 129
    3d86:	88 0f       	add	r24, r24
    3d88:	96 95       	lsr	r25
    3d8a:	87 95       	ror	r24
    3d8c:	08 95       	ret

00003d8e <__fp_mpack>:
    3d8e:	9f 3f       	cpi	r25, 0xFF	; 255
    3d90:	31 f0       	breq	.+12     	; 0x3d9e <__fp_mpack_finite+0xc>

00003d92 <__fp_mpack_finite>:
    3d92:	91 50       	subi	r25, 0x01	; 1
    3d94:	20 f4       	brcc	.+8      	; 0x3d9e <__fp_mpack_finite+0xc>
    3d96:	87 95       	ror	r24
    3d98:	77 95       	ror	r23
    3d9a:	67 95       	ror	r22
    3d9c:	b7 95       	ror	r27
    3d9e:	88 0f       	add	r24, r24
    3da0:	91 1d       	adc	r25, r1
    3da2:	96 95       	lsr	r25
    3da4:	87 95       	ror	r24
    3da6:	97 f9       	bld	r25, 7
    3da8:	08 95       	ret

00003daa <__fp_norm2>:
    3daa:	91 50       	subi	r25, 0x01	; 1
    3dac:	50 40       	sbci	r21, 0x00	; 0
    3dae:	66 0f       	add	r22, r22
    3db0:	77 1f       	adc	r23, r23
    3db2:	88 1f       	adc	r24, r24
    3db4:	d2 f7       	brpl	.-12     	; 0x3daa <__fp_norm2>
    3db6:	08 95       	ret

00003db8 <__tablejump2__>:
    3db8:	ee 0f       	add	r30, r30
    3dba:	ff 1f       	adc	r31, r31
    3dbc:	88 1f       	adc	r24, r24
    3dbe:	8b bf       	out	0x3b, r24	; 59
    3dc0:	07 90       	elpm	r0, Z+
    3dc2:	f6 91       	elpm	r31, Z
    3dc4:	e0 2d       	mov	r30, r0
    3dc6:	19 94       	eijmp

00003dc8 <memcpy>:
    3dc8:	fb 01       	movw	r30, r22
    3dca:	dc 01       	movw	r26, r24
    3dcc:	02 c0       	rjmp	.+4      	; 0x3dd2 <memcpy+0xa>
    3dce:	01 90       	ld	r0, Z+
    3dd0:	0d 92       	st	X+, r0
    3dd2:	41 50       	subi	r20, 0x01	; 1
    3dd4:	50 40       	sbci	r21, 0x00	; 0
    3dd6:	d8 f7       	brcc	.-10     	; 0x3dce <memcpy+0x6>
    3dd8:	08 95       	ret

00003dda <memset>:
    3dda:	dc 01       	movw	r26, r24
    3ddc:	01 c0       	rjmp	.+2      	; 0x3de0 <memset+0x6>
    3dde:	6d 93       	st	X+, r22
    3de0:	41 50       	subi	r20, 0x01	; 1
    3de2:	50 40       	sbci	r21, 0x00	; 0
    3de4:	e0 f7       	brcc	.-8      	; 0x3dde <memset+0x4>
    3de6:	08 95       	ret

00003de8 <__itoa_ncheck>:
    3de8:	bb 27       	eor	r27, r27
    3dea:	4a 30       	cpi	r20, 0x0A	; 10
    3dec:	31 f4       	brne	.+12     	; 0x3dfa <__itoa_ncheck+0x12>
    3dee:	99 23       	and	r25, r25
    3df0:	22 f4       	brpl	.+8      	; 0x3dfa <__itoa_ncheck+0x12>
    3df2:	bd e2       	ldi	r27, 0x2D	; 45
    3df4:	90 95       	com	r25
    3df6:	81 95       	neg	r24
    3df8:	9f 4f       	sbci	r25, 0xFF	; 255
    3dfa:	0c 94 00 1f 	jmp	0x3e00	; 0x3e00 <__utoa_common>

00003dfe <__utoa_ncheck>:
    3dfe:	bb 27       	eor	r27, r27

00003e00 <__utoa_common>:
    3e00:	fb 01       	movw	r30, r22
    3e02:	55 27       	eor	r21, r21
    3e04:	aa 27       	eor	r26, r26
    3e06:	88 0f       	add	r24, r24
    3e08:	99 1f       	adc	r25, r25
    3e0a:	aa 1f       	adc	r26, r26
    3e0c:	a4 17       	cp	r26, r20
    3e0e:	10 f0       	brcs	.+4      	; 0x3e14 <__utoa_common+0x14>
    3e10:	a4 1b       	sub	r26, r20
    3e12:	83 95       	inc	r24
    3e14:	50 51       	subi	r21, 0x10	; 16
    3e16:	b9 f7       	brne	.-18     	; 0x3e06 <__utoa_common+0x6>
    3e18:	a0 5d       	subi	r26, 0xD0	; 208
    3e1a:	aa 33       	cpi	r26, 0x3A	; 58
    3e1c:	08 f0       	brcs	.+2      	; 0x3e20 <__utoa_common+0x20>
    3e1e:	a9 5d       	subi	r26, 0xD9	; 217
    3e20:	a1 93       	st	Z+, r26
    3e22:	00 97       	sbiw	r24, 0x00	; 0
    3e24:	79 f7       	brne	.-34     	; 0x3e04 <__utoa_common+0x4>
    3e26:	b1 11       	cpse	r27, r1
    3e28:	b1 93       	st	Z+, r27
    3e2a:	11 92       	st	Z+, r1
    3e2c:	cb 01       	movw	r24, r22
    3e2e:	0c 94 5c 21 	jmp	0x42b8	; 0x42b8 <strrev>

00003e32 <sprintf>:
    3e32:	0f 93       	push	r16
    3e34:	1f 93       	push	r17
    3e36:	cf 93       	push	r28
    3e38:	df 93       	push	r29
    3e3a:	cd b7       	in	r28, 0x3d	; 61
    3e3c:	de b7       	in	r29, 0x3e	; 62
    3e3e:	2e 97       	sbiw	r28, 0x0e	; 14
    3e40:	cd bf       	out	0x3d, r28	; 61
    3e42:	de bf       	out	0x3e, r29	; 62
    3e44:	0e 89       	ldd	r16, Y+22	; 0x16
    3e46:	1f 89       	ldd	r17, Y+23	; 0x17
    3e48:	86 e0       	ldi	r24, 0x06	; 6
    3e4a:	8c 83       	std	Y+4, r24	; 0x04
    3e4c:	09 83       	std	Y+1, r16	; 0x01
    3e4e:	1a 83       	std	Y+2, r17	; 0x02
    3e50:	8f ef       	ldi	r24, 0xFF	; 255
    3e52:	9f e7       	ldi	r25, 0x7F	; 127
    3e54:	8d 83       	std	Y+5, r24	; 0x05
    3e56:	9e 83       	std	Y+6, r25	; 0x06
    3e58:	ae 01       	movw	r20, r28
    3e5a:	46 5e       	subi	r20, 0xE6	; 230
    3e5c:	5f 4f       	sbci	r21, 0xFF	; 255
    3e5e:	68 8d       	ldd	r22, Y+24	; 0x18
    3e60:	79 8d       	ldd	r23, Y+25	; 0x19
    3e62:	ce 01       	movw	r24, r28
    3e64:	01 96       	adiw	r24, 0x01	; 1
    3e66:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <vfprintf>
    3e6a:	ef 81       	ldd	r30, Y+7	; 0x07
    3e6c:	f8 85       	ldd	r31, Y+8	; 0x08
    3e6e:	e0 0f       	add	r30, r16
    3e70:	f1 1f       	adc	r31, r17
    3e72:	10 82       	st	Z, r1
    3e74:	2e 96       	adiw	r28, 0x0e	; 14
    3e76:	cd bf       	out	0x3d, r28	; 61
    3e78:	de bf       	out	0x3e, r29	; 62
    3e7a:	df 91       	pop	r29
    3e7c:	cf 91       	pop	r28
    3e7e:	1f 91       	pop	r17
    3e80:	0f 91       	pop	r16
    3e82:	08 95       	ret

00003e84 <vfprintf>:
    3e84:	2f 92       	push	r2
    3e86:	3f 92       	push	r3
    3e88:	4f 92       	push	r4
    3e8a:	5f 92       	push	r5
    3e8c:	6f 92       	push	r6
    3e8e:	7f 92       	push	r7
    3e90:	8f 92       	push	r8
    3e92:	9f 92       	push	r9
    3e94:	af 92       	push	r10
    3e96:	bf 92       	push	r11
    3e98:	cf 92       	push	r12
    3e9a:	df 92       	push	r13
    3e9c:	ef 92       	push	r14
    3e9e:	ff 92       	push	r15
    3ea0:	0f 93       	push	r16
    3ea2:	1f 93       	push	r17
    3ea4:	cf 93       	push	r28
    3ea6:	df 93       	push	r29
    3ea8:	cd b7       	in	r28, 0x3d	; 61
    3eaa:	de b7       	in	r29, 0x3e	; 62
    3eac:	2b 97       	sbiw	r28, 0x0b	; 11
    3eae:	cd bf       	out	0x3d, r28	; 61
    3eb0:	de bf       	out	0x3e, r29	; 62
    3eb2:	6c 01       	movw	r12, r24
    3eb4:	7b 01       	movw	r14, r22
    3eb6:	8a 01       	movw	r16, r20
    3eb8:	fc 01       	movw	r30, r24
    3eba:	16 82       	std	Z+6, r1	; 0x06
    3ebc:	17 82       	std	Z+7, r1	; 0x07
    3ebe:	83 81       	ldd	r24, Z+3	; 0x03
    3ec0:	81 ff       	sbrs	r24, 1
    3ec2:	cc c1       	rjmp	.+920    	; 0x425c <__stack+0x25d>
    3ec4:	ce 01       	movw	r24, r28
    3ec6:	01 96       	adiw	r24, 0x01	; 1
    3ec8:	3c 01       	movw	r6, r24
    3eca:	f6 01       	movw	r30, r12
    3ecc:	93 81       	ldd	r25, Z+3	; 0x03
    3ece:	f7 01       	movw	r30, r14
    3ed0:	93 fd       	sbrc	r25, 3
    3ed2:	85 91       	lpm	r24, Z+
    3ed4:	93 ff       	sbrs	r25, 3
    3ed6:	81 91       	ld	r24, Z+
    3ed8:	7f 01       	movw	r14, r30
    3eda:	88 23       	and	r24, r24
    3edc:	09 f4       	brne	.+2      	; 0x3ee0 <vfprintf+0x5c>
    3ede:	ba c1       	rjmp	.+884    	; 0x4254 <__stack+0x255>
    3ee0:	85 32       	cpi	r24, 0x25	; 37
    3ee2:	39 f4       	brne	.+14     	; 0x3ef2 <vfprintf+0x6e>
    3ee4:	93 fd       	sbrc	r25, 3
    3ee6:	85 91       	lpm	r24, Z+
    3ee8:	93 ff       	sbrs	r25, 3
    3eea:	81 91       	ld	r24, Z+
    3eec:	7f 01       	movw	r14, r30
    3eee:	85 32       	cpi	r24, 0x25	; 37
    3ef0:	29 f4       	brne	.+10     	; 0x3efc <vfprintf+0x78>
    3ef2:	b6 01       	movw	r22, r12
    3ef4:	90 e0       	ldi	r25, 0x00	; 0
    3ef6:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <fputc>
    3efa:	e7 cf       	rjmp	.-50     	; 0x3eca <vfprintf+0x46>
    3efc:	91 2c       	mov	r9, r1
    3efe:	21 2c       	mov	r2, r1
    3f00:	31 2c       	mov	r3, r1
    3f02:	ff e1       	ldi	r31, 0x1F	; 31
    3f04:	f3 15       	cp	r31, r3
    3f06:	d8 f0       	brcs	.+54     	; 0x3f3e <vfprintf+0xba>
    3f08:	8b 32       	cpi	r24, 0x2B	; 43
    3f0a:	79 f0       	breq	.+30     	; 0x3f2a <vfprintf+0xa6>
    3f0c:	38 f4       	brcc	.+14     	; 0x3f1c <vfprintf+0x98>
    3f0e:	80 32       	cpi	r24, 0x20	; 32
    3f10:	79 f0       	breq	.+30     	; 0x3f30 <vfprintf+0xac>
    3f12:	83 32       	cpi	r24, 0x23	; 35
    3f14:	a1 f4       	brne	.+40     	; 0x3f3e <vfprintf+0xba>
    3f16:	23 2d       	mov	r18, r3
    3f18:	20 61       	ori	r18, 0x10	; 16
    3f1a:	1d c0       	rjmp	.+58     	; 0x3f56 <vfprintf+0xd2>
    3f1c:	8d 32       	cpi	r24, 0x2D	; 45
    3f1e:	61 f0       	breq	.+24     	; 0x3f38 <vfprintf+0xb4>
    3f20:	80 33       	cpi	r24, 0x30	; 48
    3f22:	69 f4       	brne	.+26     	; 0x3f3e <vfprintf+0xba>
    3f24:	23 2d       	mov	r18, r3
    3f26:	21 60       	ori	r18, 0x01	; 1
    3f28:	16 c0       	rjmp	.+44     	; 0x3f56 <vfprintf+0xd2>
    3f2a:	83 2d       	mov	r24, r3
    3f2c:	82 60       	ori	r24, 0x02	; 2
    3f2e:	38 2e       	mov	r3, r24
    3f30:	e3 2d       	mov	r30, r3
    3f32:	e4 60       	ori	r30, 0x04	; 4
    3f34:	3e 2e       	mov	r3, r30
    3f36:	2a c0       	rjmp	.+84     	; 0x3f8c <vfprintf+0x108>
    3f38:	f3 2d       	mov	r31, r3
    3f3a:	f8 60       	ori	r31, 0x08	; 8
    3f3c:	1d c0       	rjmp	.+58     	; 0x3f78 <vfprintf+0xf4>
    3f3e:	37 fc       	sbrc	r3, 7
    3f40:	2d c0       	rjmp	.+90     	; 0x3f9c <vfprintf+0x118>
    3f42:	20 ed       	ldi	r18, 0xD0	; 208
    3f44:	28 0f       	add	r18, r24
    3f46:	2a 30       	cpi	r18, 0x0A	; 10
    3f48:	40 f0       	brcs	.+16     	; 0x3f5a <vfprintf+0xd6>
    3f4a:	8e 32       	cpi	r24, 0x2E	; 46
    3f4c:	b9 f4       	brne	.+46     	; 0x3f7c <vfprintf+0xf8>
    3f4e:	36 fc       	sbrc	r3, 6
    3f50:	81 c1       	rjmp	.+770    	; 0x4254 <__stack+0x255>
    3f52:	23 2d       	mov	r18, r3
    3f54:	20 64       	ori	r18, 0x40	; 64
    3f56:	32 2e       	mov	r3, r18
    3f58:	19 c0       	rjmp	.+50     	; 0x3f8c <vfprintf+0x108>
    3f5a:	36 fe       	sbrs	r3, 6
    3f5c:	06 c0       	rjmp	.+12     	; 0x3f6a <vfprintf+0xe6>
    3f5e:	8a e0       	ldi	r24, 0x0A	; 10
    3f60:	98 9e       	mul	r9, r24
    3f62:	20 0d       	add	r18, r0
    3f64:	11 24       	eor	r1, r1
    3f66:	92 2e       	mov	r9, r18
    3f68:	11 c0       	rjmp	.+34     	; 0x3f8c <vfprintf+0x108>
    3f6a:	ea e0       	ldi	r30, 0x0A	; 10
    3f6c:	2e 9e       	mul	r2, r30
    3f6e:	20 0d       	add	r18, r0
    3f70:	11 24       	eor	r1, r1
    3f72:	22 2e       	mov	r2, r18
    3f74:	f3 2d       	mov	r31, r3
    3f76:	f0 62       	ori	r31, 0x20	; 32
    3f78:	3f 2e       	mov	r3, r31
    3f7a:	08 c0       	rjmp	.+16     	; 0x3f8c <vfprintf+0x108>
    3f7c:	8c 36       	cpi	r24, 0x6C	; 108
    3f7e:	21 f4       	brne	.+8      	; 0x3f88 <vfprintf+0x104>
    3f80:	83 2d       	mov	r24, r3
    3f82:	80 68       	ori	r24, 0x80	; 128
    3f84:	38 2e       	mov	r3, r24
    3f86:	02 c0       	rjmp	.+4      	; 0x3f8c <vfprintf+0x108>
    3f88:	88 36       	cpi	r24, 0x68	; 104
    3f8a:	41 f4       	brne	.+16     	; 0x3f9c <vfprintf+0x118>
    3f8c:	f7 01       	movw	r30, r14
    3f8e:	93 fd       	sbrc	r25, 3
    3f90:	85 91       	lpm	r24, Z+
    3f92:	93 ff       	sbrs	r25, 3
    3f94:	81 91       	ld	r24, Z+
    3f96:	7f 01       	movw	r14, r30
    3f98:	81 11       	cpse	r24, r1
    3f9a:	b3 cf       	rjmp	.-154    	; 0x3f02 <vfprintf+0x7e>
    3f9c:	98 2f       	mov	r25, r24
    3f9e:	9f 7d       	andi	r25, 0xDF	; 223
    3fa0:	95 54       	subi	r25, 0x45	; 69
    3fa2:	93 30       	cpi	r25, 0x03	; 3
    3fa4:	28 f4       	brcc	.+10     	; 0x3fb0 <vfprintf+0x12c>
    3fa6:	0c 5f       	subi	r16, 0xFC	; 252
    3fa8:	1f 4f       	sbci	r17, 0xFF	; 255
    3faa:	9f e3       	ldi	r25, 0x3F	; 63
    3fac:	99 83       	std	Y+1, r25	; 0x01
    3fae:	0d c0       	rjmp	.+26     	; 0x3fca <vfprintf+0x146>
    3fb0:	83 36       	cpi	r24, 0x63	; 99
    3fb2:	31 f0       	breq	.+12     	; 0x3fc0 <vfprintf+0x13c>
    3fb4:	83 37       	cpi	r24, 0x73	; 115
    3fb6:	71 f0       	breq	.+28     	; 0x3fd4 <vfprintf+0x150>
    3fb8:	83 35       	cpi	r24, 0x53	; 83
    3fba:	09 f0       	breq	.+2      	; 0x3fbe <vfprintf+0x13a>
    3fbc:	59 c0       	rjmp	.+178    	; 0x4070 <__stack+0x71>
    3fbe:	21 c0       	rjmp	.+66     	; 0x4002 <__stack+0x3>
    3fc0:	f8 01       	movw	r30, r16
    3fc2:	80 81       	ld	r24, Z
    3fc4:	89 83       	std	Y+1, r24	; 0x01
    3fc6:	0e 5f       	subi	r16, 0xFE	; 254
    3fc8:	1f 4f       	sbci	r17, 0xFF	; 255
    3fca:	88 24       	eor	r8, r8
    3fcc:	83 94       	inc	r8
    3fce:	91 2c       	mov	r9, r1
    3fd0:	53 01       	movw	r10, r6
    3fd2:	13 c0       	rjmp	.+38     	; 0x3ffa <vfprintf+0x176>
    3fd4:	28 01       	movw	r4, r16
    3fd6:	f2 e0       	ldi	r31, 0x02	; 2
    3fd8:	4f 0e       	add	r4, r31
    3fda:	51 1c       	adc	r5, r1
    3fdc:	f8 01       	movw	r30, r16
    3fde:	a0 80       	ld	r10, Z
    3fe0:	b1 80       	ldd	r11, Z+1	; 0x01
    3fe2:	36 fe       	sbrs	r3, 6
    3fe4:	03 c0       	rjmp	.+6      	; 0x3fec <vfprintf+0x168>
    3fe6:	69 2d       	mov	r22, r9
    3fe8:	70 e0       	ldi	r23, 0x00	; 0
    3fea:	02 c0       	rjmp	.+4      	; 0x3ff0 <vfprintf+0x16c>
    3fec:	6f ef       	ldi	r22, 0xFF	; 255
    3fee:	7f ef       	ldi	r23, 0xFF	; 255
    3ff0:	c5 01       	movw	r24, r10
    3ff2:	0e 94 51 21 	call	0x42a2	; 0x42a2 <strnlen>
    3ff6:	4c 01       	movw	r8, r24
    3ff8:	82 01       	movw	r16, r4
    3ffa:	f3 2d       	mov	r31, r3
    3ffc:	ff 77       	andi	r31, 0x7F	; 127
    3ffe:	3f 2e       	mov	r3, r31
    4000:	16 c0       	rjmp	.+44     	; 0x402e <__stack+0x2f>
    4002:	28 01       	movw	r4, r16
    4004:	22 e0       	ldi	r18, 0x02	; 2
    4006:	42 0e       	add	r4, r18
    4008:	51 1c       	adc	r5, r1
    400a:	f8 01       	movw	r30, r16
    400c:	a0 80       	ld	r10, Z
    400e:	b1 80       	ldd	r11, Z+1	; 0x01
    4010:	36 fe       	sbrs	r3, 6
    4012:	03 c0       	rjmp	.+6      	; 0x401a <__stack+0x1b>
    4014:	69 2d       	mov	r22, r9
    4016:	70 e0       	ldi	r23, 0x00	; 0
    4018:	02 c0       	rjmp	.+4      	; 0x401e <__stack+0x1f>
    401a:	6f ef       	ldi	r22, 0xFF	; 255
    401c:	7f ef       	ldi	r23, 0xFF	; 255
    401e:	c5 01       	movw	r24, r10
    4020:	0e 94 46 21 	call	0x428c	; 0x428c <strnlen_P>
    4024:	4c 01       	movw	r8, r24
    4026:	f3 2d       	mov	r31, r3
    4028:	f0 68       	ori	r31, 0x80	; 128
    402a:	3f 2e       	mov	r3, r31
    402c:	82 01       	movw	r16, r4
    402e:	33 fc       	sbrc	r3, 3
    4030:	1b c0       	rjmp	.+54     	; 0x4068 <__stack+0x69>
    4032:	82 2d       	mov	r24, r2
    4034:	90 e0       	ldi	r25, 0x00	; 0
    4036:	88 16       	cp	r8, r24
    4038:	99 06       	cpc	r9, r25
    403a:	b0 f4       	brcc	.+44     	; 0x4068 <__stack+0x69>
    403c:	b6 01       	movw	r22, r12
    403e:	80 e2       	ldi	r24, 0x20	; 32
    4040:	90 e0       	ldi	r25, 0x00	; 0
    4042:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <fputc>
    4046:	2a 94       	dec	r2
    4048:	f4 cf       	rjmp	.-24     	; 0x4032 <__stack+0x33>
    404a:	f5 01       	movw	r30, r10
    404c:	37 fc       	sbrc	r3, 7
    404e:	85 91       	lpm	r24, Z+
    4050:	37 fe       	sbrs	r3, 7
    4052:	81 91       	ld	r24, Z+
    4054:	5f 01       	movw	r10, r30
    4056:	b6 01       	movw	r22, r12
    4058:	90 e0       	ldi	r25, 0x00	; 0
    405a:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <fputc>
    405e:	21 10       	cpse	r2, r1
    4060:	2a 94       	dec	r2
    4062:	21 e0       	ldi	r18, 0x01	; 1
    4064:	82 1a       	sub	r8, r18
    4066:	91 08       	sbc	r9, r1
    4068:	81 14       	cp	r8, r1
    406a:	91 04       	cpc	r9, r1
    406c:	71 f7       	brne	.-36     	; 0x404a <__stack+0x4b>
    406e:	e8 c0       	rjmp	.+464    	; 0x4240 <__stack+0x241>
    4070:	84 36       	cpi	r24, 0x64	; 100
    4072:	11 f0       	breq	.+4      	; 0x4078 <__stack+0x79>
    4074:	89 36       	cpi	r24, 0x69	; 105
    4076:	41 f5       	brne	.+80     	; 0x40c8 <__stack+0xc9>
    4078:	f8 01       	movw	r30, r16
    407a:	37 fe       	sbrs	r3, 7
    407c:	07 c0       	rjmp	.+14     	; 0x408c <__stack+0x8d>
    407e:	60 81       	ld	r22, Z
    4080:	71 81       	ldd	r23, Z+1	; 0x01
    4082:	82 81       	ldd	r24, Z+2	; 0x02
    4084:	93 81       	ldd	r25, Z+3	; 0x03
    4086:	0c 5f       	subi	r16, 0xFC	; 252
    4088:	1f 4f       	sbci	r17, 0xFF	; 255
    408a:	08 c0       	rjmp	.+16     	; 0x409c <__stack+0x9d>
    408c:	60 81       	ld	r22, Z
    408e:	71 81       	ldd	r23, Z+1	; 0x01
    4090:	07 2e       	mov	r0, r23
    4092:	00 0c       	add	r0, r0
    4094:	88 0b       	sbc	r24, r24
    4096:	99 0b       	sbc	r25, r25
    4098:	0e 5f       	subi	r16, 0xFE	; 254
    409a:	1f 4f       	sbci	r17, 0xFF	; 255
    409c:	f3 2d       	mov	r31, r3
    409e:	ff 76       	andi	r31, 0x6F	; 111
    40a0:	3f 2e       	mov	r3, r31
    40a2:	97 ff       	sbrs	r25, 7
    40a4:	09 c0       	rjmp	.+18     	; 0x40b8 <__stack+0xb9>
    40a6:	90 95       	com	r25
    40a8:	80 95       	com	r24
    40aa:	70 95       	com	r23
    40ac:	61 95       	neg	r22
    40ae:	7f 4f       	sbci	r23, 0xFF	; 255
    40b0:	8f 4f       	sbci	r24, 0xFF	; 255
    40b2:	9f 4f       	sbci	r25, 0xFF	; 255
    40b4:	f0 68       	ori	r31, 0x80	; 128
    40b6:	3f 2e       	mov	r3, r31
    40b8:	2a e0       	ldi	r18, 0x0A	; 10
    40ba:	30 e0       	ldi	r19, 0x00	; 0
    40bc:	a3 01       	movw	r20, r6
    40be:	0e 94 a8 21 	call	0x4350	; 0x4350 <__ultoa_invert>
    40c2:	88 2e       	mov	r8, r24
    40c4:	86 18       	sub	r8, r6
    40c6:	45 c0       	rjmp	.+138    	; 0x4152 <__stack+0x153>
    40c8:	85 37       	cpi	r24, 0x75	; 117
    40ca:	31 f4       	brne	.+12     	; 0x40d8 <__stack+0xd9>
    40cc:	23 2d       	mov	r18, r3
    40ce:	2f 7e       	andi	r18, 0xEF	; 239
    40d0:	b2 2e       	mov	r11, r18
    40d2:	2a e0       	ldi	r18, 0x0A	; 10
    40d4:	30 e0       	ldi	r19, 0x00	; 0
    40d6:	25 c0       	rjmp	.+74     	; 0x4122 <__stack+0x123>
    40d8:	93 2d       	mov	r25, r3
    40da:	99 7f       	andi	r25, 0xF9	; 249
    40dc:	b9 2e       	mov	r11, r25
    40de:	8f 36       	cpi	r24, 0x6F	; 111
    40e0:	c1 f0       	breq	.+48     	; 0x4112 <__stack+0x113>
    40e2:	18 f4       	brcc	.+6      	; 0x40ea <__stack+0xeb>
    40e4:	88 35       	cpi	r24, 0x58	; 88
    40e6:	79 f0       	breq	.+30     	; 0x4106 <__stack+0x107>
    40e8:	b5 c0       	rjmp	.+362    	; 0x4254 <__stack+0x255>
    40ea:	80 37       	cpi	r24, 0x70	; 112
    40ec:	19 f0       	breq	.+6      	; 0x40f4 <__stack+0xf5>
    40ee:	88 37       	cpi	r24, 0x78	; 120
    40f0:	21 f0       	breq	.+8      	; 0x40fa <__stack+0xfb>
    40f2:	b0 c0       	rjmp	.+352    	; 0x4254 <__stack+0x255>
    40f4:	e9 2f       	mov	r30, r25
    40f6:	e0 61       	ori	r30, 0x10	; 16
    40f8:	be 2e       	mov	r11, r30
    40fa:	b4 fe       	sbrs	r11, 4
    40fc:	0d c0       	rjmp	.+26     	; 0x4118 <__stack+0x119>
    40fe:	fb 2d       	mov	r31, r11
    4100:	f4 60       	ori	r31, 0x04	; 4
    4102:	bf 2e       	mov	r11, r31
    4104:	09 c0       	rjmp	.+18     	; 0x4118 <__stack+0x119>
    4106:	34 fe       	sbrs	r3, 4
    4108:	0a c0       	rjmp	.+20     	; 0x411e <__stack+0x11f>
    410a:	29 2f       	mov	r18, r25
    410c:	26 60       	ori	r18, 0x06	; 6
    410e:	b2 2e       	mov	r11, r18
    4110:	06 c0       	rjmp	.+12     	; 0x411e <__stack+0x11f>
    4112:	28 e0       	ldi	r18, 0x08	; 8
    4114:	30 e0       	ldi	r19, 0x00	; 0
    4116:	05 c0       	rjmp	.+10     	; 0x4122 <__stack+0x123>
    4118:	20 e1       	ldi	r18, 0x10	; 16
    411a:	30 e0       	ldi	r19, 0x00	; 0
    411c:	02 c0       	rjmp	.+4      	; 0x4122 <__stack+0x123>
    411e:	20 e1       	ldi	r18, 0x10	; 16
    4120:	32 e0       	ldi	r19, 0x02	; 2
    4122:	f8 01       	movw	r30, r16
    4124:	b7 fe       	sbrs	r11, 7
    4126:	07 c0       	rjmp	.+14     	; 0x4136 <__stack+0x137>
    4128:	60 81       	ld	r22, Z
    412a:	71 81       	ldd	r23, Z+1	; 0x01
    412c:	82 81       	ldd	r24, Z+2	; 0x02
    412e:	93 81       	ldd	r25, Z+3	; 0x03
    4130:	0c 5f       	subi	r16, 0xFC	; 252
    4132:	1f 4f       	sbci	r17, 0xFF	; 255
    4134:	06 c0       	rjmp	.+12     	; 0x4142 <__stack+0x143>
    4136:	60 81       	ld	r22, Z
    4138:	71 81       	ldd	r23, Z+1	; 0x01
    413a:	80 e0       	ldi	r24, 0x00	; 0
    413c:	90 e0       	ldi	r25, 0x00	; 0
    413e:	0e 5f       	subi	r16, 0xFE	; 254
    4140:	1f 4f       	sbci	r17, 0xFF	; 255
    4142:	a3 01       	movw	r20, r6
    4144:	0e 94 a8 21 	call	0x4350	; 0x4350 <__ultoa_invert>
    4148:	88 2e       	mov	r8, r24
    414a:	86 18       	sub	r8, r6
    414c:	fb 2d       	mov	r31, r11
    414e:	ff 77       	andi	r31, 0x7F	; 127
    4150:	3f 2e       	mov	r3, r31
    4152:	36 fe       	sbrs	r3, 6
    4154:	0d c0       	rjmp	.+26     	; 0x4170 <__stack+0x171>
    4156:	23 2d       	mov	r18, r3
    4158:	2e 7f       	andi	r18, 0xFE	; 254
    415a:	a2 2e       	mov	r10, r18
    415c:	89 14       	cp	r8, r9
    415e:	58 f4       	brcc	.+22     	; 0x4176 <__stack+0x177>
    4160:	34 fe       	sbrs	r3, 4
    4162:	0b c0       	rjmp	.+22     	; 0x417a <__stack+0x17b>
    4164:	32 fc       	sbrc	r3, 2
    4166:	09 c0       	rjmp	.+18     	; 0x417a <__stack+0x17b>
    4168:	83 2d       	mov	r24, r3
    416a:	8e 7e       	andi	r24, 0xEE	; 238
    416c:	a8 2e       	mov	r10, r24
    416e:	05 c0       	rjmp	.+10     	; 0x417a <__stack+0x17b>
    4170:	b8 2c       	mov	r11, r8
    4172:	a3 2c       	mov	r10, r3
    4174:	03 c0       	rjmp	.+6      	; 0x417c <__stack+0x17d>
    4176:	b8 2c       	mov	r11, r8
    4178:	01 c0       	rjmp	.+2      	; 0x417c <__stack+0x17d>
    417a:	b9 2c       	mov	r11, r9
    417c:	a4 fe       	sbrs	r10, 4
    417e:	0f c0       	rjmp	.+30     	; 0x419e <__stack+0x19f>
    4180:	fe 01       	movw	r30, r28
    4182:	e8 0d       	add	r30, r8
    4184:	f1 1d       	adc	r31, r1
    4186:	80 81       	ld	r24, Z
    4188:	80 33       	cpi	r24, 0x30	; 48
    418a:	21 f4       	brne	.+8      	; 0x4194 <__stack+0x195>
    418c:	9a 2d       	mov	r25, r10
    418e:	99 7e       	andi	r25, 0xE9	; 233
    4190:	a9 2e       	mov	r10, r25
    4192:	09 c0       	rjmp	.+18     	; 0x41a6 <__stack+0x1a7>
    4194:	a2 fe       	sbrs	r10, 2
    4196:	06 c0       	rjmp	.+12     	; 0x41a4 <__stack+0x1a5>
    4198:	b3 94       	inc	r11
    419a:	b3 94       	inc	r11
    419c:	04 c0       	rjmp	.+8      	; 0x41a6 <__stack+0x1a7>
    419e:	8a 2d       	mov	r24, r10
    41a0:	86 78       	andi	r24, 0x86	; 134
    41a2:	09 f0       	breq	.+2      	; 0x41a6 <__stack+0x1a7>
    41a4:	b3 94       	inc	r11
    41a6:	a3 fc       	sbrc	r10, 3
    41a8:	11 c0       	rjmp	.+34     	; 0x41cc <__stack+0x1cd>
    41aa:	a0 fe       	sbrs	r10, 0
    41ac:	06 c0       	rjmp	.+12     	; 0x41ba <__stack+0x1bb>
    41ae:	b2 14       	cp	r11, r2
    41b0:	88 f4       	brcc	.+34     	; 0x41d4 <__stack+0x1d5>
    41b2:	28 0c       	add	r2, r8
    41b4:	92 2c       	mov	r9, r2
    41b6:	9b 18       	sub	r9, r11
    41b8:	0e c0       	rjmp	.+28     	; 0x41d6 <__stack+0x1d7>
    41ba:	b2 14       	cp	r11, r2
    41bc:	60 f4       	brcc	.+24     	; 0x41d6 <__stack+0x1d7>
    41be:	b6 01       	movw	r22, r12
    41c0:	80 e2       	ldi	r24, 0x20	; 32
    41c2:	90 e0       	ldi	r25, 0x00	; 0
    41c4:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <fputc>
    41c8:	b3 94       	inc	r11
    41ca:	f7 cf       	rjmp	.-18     	; 0x41ba <__stack+0x1bb>
    41cc:	b2 14       	cp	r11, r2
    41ce:	18 f4       	brcc	.+6      	; 0x41d6 <__stack+0x1d7>
    41d0:	2b 18       	sub	r2, r11
    41d2:	02 c0       	rjmp	.+4      	; 0x41d8 <__stack+0x1d9>
    41d4:	98 2c       	mov	r9, r8
    41d6:	21 2c       	mov	r2, r1
    41d8:	a4 fe       	sbrs	r10, 4
    41da:	10 c0       	rjmp	.+32     	; 0x41fc <__stack+0x1fd>
    41dc:	b6 01       	movw	r22, r12
    41de:	80 e3       	ldi	r24, 0x30	; 48
    41e0:	90 e0       	ldi	r25, 0x00	; 0
    41e2:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <fputc>
    41e6:	a2 fe       	sbrs	r10, 2
    41e8:	17 c0       	rjmp	.+46     	; 0x4218 <__stack+0x219>
    41ea:	a1 fc       	sbrc	r10, 1
    41ec:	03 c0       	rjmp	.+6      	; 0x41f4 <__stack+0x1f5>
    41ee:	88 e7       	ldi	r24, 0x78	; 120
    41f0:	90 e0       	ldi	r25, 0x00	; 0
    41f2:	02 c0       	rjmp	.+4      	; 0x41f8 <__stack+0x1f9>
    41f4:	88 e5       	ldi	r24, 0x58	; 88
    41f6:	90 e0       	ldi	r25, 0x00	; 0
    41f8:	b6 01       	movw	r22, r12
    41fa:	0c c0       	rjmp	.+24     	; 0x4214 <__stack+0x215>
    41fc:	8a 2d       	mov	r24, r10
    41fe:	86 78       	andi	r24, 0x86	; 134
    4200:	59 f0       	breq	.+22     	; 0x4218 <__stack+0x219>
    4202:	a1 fe       	sbrs	r10, 1
    4204:	02 c0       	rjmp	.+4      	; 0x420a <__stack+0x20b>
    4206:	8b e2       	ldi	r24, 0x2B	; 43
    4208:	01 c0       	rjmp	.+2      	; 0x420c <__stack+0x20d>
    420a:	80 e2       	ldi	r24, 0x20	; 32
    420c:	a7 fc       	sbrc	r10, 7
    420e:	8d e2       	ldi	r24, 0x2D	; 45
    4210:	b6 01       	movw	r22, r12
    4212:	90 e0       	ldi	r25, 0x00	; 0
    4214:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <fputc>
    4218:	89 14       	cp	r8, r9
    421a:	38 f4       	brcc	.+14     	; 0x422a <__stack+0x22b>
    421c:	b6 01       	movw	r22, r12
    421e:	80 e3       	ldi	r24, 0x30	; 48
    4220:	90 e0       	ldi	r25, 0x00	; 0
    4222:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <fputc>
    4226:	9a 94       	dec	r9
    4228:	f7 cf       	rjmp	.-18     	; 0x4218 <__stack+0x219>
    422a:	8a 94       	dec	r8
    422c:	f3 01       	movw	r30, r6
    422e:	e8 0d       	add	r30, r8
    4230:	f1 1d       	adc	r31, r1
    4232:	80 81       	ld	r24, Z
    4234:	b6 01       	movw	r22, r12
    4236:	90 e0       	ldi	r25, 0x00	; 0
    4238:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <fputc>
    423c:	81 10       	cpse	r8, r1
    423e:	f5 cf       	rjmp	.-22     	; 0x422a <__stack+0x22b>
    4240:	22 20       	and	r2, r2
    4242:	09 f4       	brne	.+2      	; 0x4246 <__stack+0x247>
    4244:	42 ce       	rjmp	.-892    	; 0x3eca <vfprintf+0x46>
    4246:	b6 01       	movw	r22, r12
    4248:	80 e2       	ldi	r24, 0x20	; 32
    424a:	90 e0       	ldi	r25, 0x00	; 0
    424c:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <fputc>
    4250:	2a 94       	dec	r2
    4252:	f6 cf       	rjmp	.-20     	; 0x4240 <__stack+0x241>
    4254:	f6 01       	movw	r30, r12
    4256:	86 81       	ldd	r24, Z+6	; 0x06
    4258:	97 81       	ldd	r25, Z+7	; 0x07
    425a:	02 c0       	rjmp	.+4      	; 0x4260 <__stack+0x261>
    425c:	8f ef       	ldi	r24, 0xFF	; 255
    425e:	9f ef       	ldi	r25, 0xFF	; 255
    4260:	2b 96       	adiw	r28, 0x0b	; 11
    4262:	cd bf       	out	0x3d, r28	; 61
    4264:	de bf       	out	0x3e, r29	; 62
    4266:	df 91       	pop	r29
    4268:	cf 91       	pop	r28
    426a:	1f 91       	pop	r17
    426c:	0f 91       	pop	r16
    426e:	ff 90       	pop	r15
    4270:	ef 90       	pop	r14
    4272:	df 90       	pop	r13
    4274:	cf 90       	pop	r12
    4276:	bf 90       	pop	r11
    4278:	af 90       	pop	r10
    427a:	9f 90       	pop	r9
    427c:	8f 90       	pop	r8
    427e:	7f 90       	pop	r7
    4280:	6f 90       	pop	r6
    4282:	5f 90       	pop	r5
    4284:	4f 90       	pop	r4
    4286:	3f 90       	pop	r3
    4288:	2f 90       	pop	r2
    428a:	08 95       	ret

0000428c <strnlen_P>:
    428c:	fc 01       	movw	r30, r24
    428e:	05 90       	lpm	r0, Z+
    4290:	61 50       	subi	r22, 0x01	; 1
    4292:	70 40       	sbci	r23, 0x00	; 0
    4294:	01 10       	cpse	r0, r1
    4296:	d8 f7       	brcc	.-10     	; 0x428e <strnlen_P+0x2>
    4298:	80 95       	com	r24
    429a:	90 95       	com	r25
    429c:	8e 0f       	add	r24, r30
    429e:	9f 1f       	adc	r25, r31
    42a0:	08 95       	ret

000042a2 <strnlen>:
    42a2:	fc 01       	movw	r30, r24
    42a4:	61 50       	subi	r22, 0x01	; 1
    42a6:	70 40       	sbci	r23, 0x00	; 0
    42a8:	01 90       	ld	r0, Z+
    42aa:	01 10       	cpse	r0, r1
    42ac:	d8 f7       	brcc	.-10     	; 0x42a4 <strnlen+0x2>
    42ae:	80 95       	com	r24
    42b0:	90 95       	com	r25
    42b2:	8e 0f       	add	r24, r30
    42b4:	9f 1f       	adc	r25, r31
    42b6:	08 95       	ret

000042b8 <strrev>:
    42b8:	dc 01       	movw	r26, r24
    42ba:	fc 01       	movw	r30, r24
    42bc:	67 2f       	mov	r22, r23
    42be:	71 91       	ld	r23, Z+
    42c0:	77 23       	and	r23, r23
    42c2:	e1 f7       	brne	.-8      	; 0x42bc <strrev+0x4>
    42c4:	32 97       	sbiw	r30, 0x02	; 2
    42c6:	04 c0       	rjmp	.+8      	; 0x42d0 <strrev+0x18>
    42c8:	7c 91       	ld	r23, X
    42ca:	6d 93       	st	X+, r22
    42cc:	70 83       	st	Z, r23
    42ce:	62 91       	ld	r22, -Z
    42d0:	ae 17       	cp	r26, r30
    42d2:	bf 07       	cpc	r27, r31
    42d4:	c8 f3       	brcs	.-14     	; 0x42c8 <strrev+0x10>
    42d6:	08 95       	ret

000042d8 <fputc>:
    42d8:	0f 93       	push	r16
    42da:	1f 93       	push	r17
    42dc:	cf 93       	push	r28
    42de:	df 93       	push	r29
    42e0:	fb 01       	movw	r30, r22
    42e2:	23 81       	ldd	r18, Z+3	; 0x03
    42e4:	21 fd       	sbrc	r18, 1
    42e6:	03 c0       	rjmp	.+6      	; 0x42ee <fputc+0x16>
    42e8:	8f ef       	ldi	r24, 0xFF	; 255
    42ea:	9f ef       	ldi	r25, 0xFF	; 255
    42ec:	2c c0       	rjmp	.+88     	; 0x4346 <fputc+0x6e>
    42ee:	22 ff       	sbrs	r18, 2
    42f0:	16 c0       	rjmp	.+44     	; 0x431e <fputc+0x46>
    42f2:	46 81       	ldd	r20, Z+6	; 0x06
    42f4:	57 81       	ldd	r21, Z+7	; 0x07
    42f6:	24 81       	ldd	r18, Z+4	; 0x04
    42f8:	35 81       	ldd	r19, Z+5	; 0x05
    42fa:	42 17       	cp	r20, r18
    42fc:	53 07       	cpc	r21, r19
    42fe:	44 f4       	brge	.+16     	; 0x4310 <fputc+0x38>
    4300:	a0 81       	ld	r26, Z
    4302:	b1 81       	ldd	r27, Z+1	; 0x01
    4304:	9d 01       	movw	r18, r26
    4306:	2f 5f       	subi	r18, 0xFF	; 255
    4308:	3f 4f       	sbci	r19, 0xFF	; 255
    430a:	20 83       	st	Z, r18
    430c:	31 83       	std	Z+1, r19	; 0x01
    430e:	8c 93       	st	X, r24
    4310:	26 81       	ldd	r18, Z+6	; 0x06
    4312:	37 81       	ldd	r19, Z+7	; 0x07
    4314:	2f 5f       	subi	r18, 0xFF	; 255
    4316:	3f 4f       	sbci	r19, 0xFF	; 255
    4318:	26 83       	std	Z+6, r18	; 0x06
    431a:	37 83       	std	Z+7, r19	; 0x07
    431c:	14 c0       	rjmp	.+40     	; 0x4346 <fputc+0x6e>
    431e:	8b 01       	movw	r16, r22
    4320:	ec 01       	movw	r28, r24
    4322:	fb 01       	movw	r30, r22
    4324:	00 84       	ldd	r0, Z+8	; 0x08
    4326:	f1 85       	ldd	r31, Z+9	; 0x09
    4328:	e0 2d       	mov	r30, r0
    432a:	19 95       	eicall
    432c:	89 2b       	or	r24, r25
    432e:	e1 f6       	brne	.-72     	; 0x42e8 <fputc+0x10>
    4330:	d8 01       	movw	r26, r16
    4332:	16 96       	adiw	r26, 0x06	; 6
    4334:	8d 91       	ld	r24, X+
    4336:	9c 91       	ld	r25, X
    4338:	17 97       	sbiw	r26, 0x07	; 7
    433a:	01 96       	adiw	r24, 0x01	; 1
    433c:	16 96       	adiw	r26, 0x06	; 6
    433e:	8d 93       	st	X+, r24
    4340:	9c 93       	st	X, r25
    4342:	17 97       	sbiw	r26, 0x07	; 7
    4344:	ce 01       	movw	r24, r28
    4346:	df 91       	pop	r29
    4348:	cf 91       	pop	r28
    434a:	1f 91       	pop	r17
    434c:	0f 91       	pop	r16
    434e:	08 95       	ret

00004350 <__ultoa_invert>:
    4350:	fa 01       	movw	r30, r20
    4352:	aa 27       	eor	r26, r26
    4354:	28 30       	cpi	r18, 0x08	; 8
    4356:	51 f1       	breq	.+84     	; 0x43ac <__ultoa_invert+0x5c>
    4358:	20 31       	cpi	r18, 0x10	; 16
    435a:	81 f1       	breq	.+96     	; 0x43bc <__ultoa_invert+0x6c>
    435c:	e8 94       	clt
    435e:	6f 93       	push	r22
    4360:	6e 7f       	andi	r22, 0xFE	; 254
    4362:	6e 5f       	subi	r22, 0xFE	; 254
    4364:	7f 4f       	sbci	r23, 0xFF	; 255
    4366:	8f 4f       	sbci	r24, 0xFF	; 255
    4368:	9f 4f       	sbci	r25, 0xFF	; 255
    436a:	af 4f       	sbci	r26, 0xFF	; 255
    436c:	b1 e0       	ldi	r27, 0x01	; 1
    436e:	3e d0       	rcall	.+124    	; 0x43ec <__ultoa_invert+0x9c>
    4370:	b4 e0       	ldi	r27, 0x04	; 4
    4372:	3c d0       	rcall	.+120    	; 0x43ec <__ultoa_invert+0x9c>
    4374:	67 0f       	add	r22, r23
    4376:	78 1f       	adc	r23, r24
    4378:	89 1f       	adc	r24, r25
    437a:	9a 1f       	adc	r25, r26
    437c:	a1 1d       	adc	r26, r1
    437e:	68 0f       	add	r22, r24
    4380:	79 1f       	adc	r23, r25
    4382:	8a 1f       	adc	r24, r26
    4384:	91 1d       	adc	r25, r1
    4386:	a1 1d       	adc	r26, r1
    4388:	6a 0f       	add	r22, r26
    438a:	71 1d       	adc	r23, r1
    438c:	81 1d       	adc	r24, r1
    438e:	91 1d       	adc	r25, r1
    4390:	a1 1d       	adc	r26, r1
    4392:	20 d0       	rcall	.+64     	; 0x43d4 <__ultoa_invert+0x84>
    4394:	09 f4       	brne	.+2      	; 0x4398 <__ultoa_invert+0x48>
    4396:	68 94       	set
    4398:	3f 91       	pop	r19
    439a:	2a e0       	ldi	r18, 0x0A	; 10
    439c:	26 9f       	mul	r18, r22
    439e:	11 24       	eor	r1, r1
    43a0:	30 19       	sub	r19, r0
    43a2:	30 5d       	subi	r19, 0xD0	; 208
    43a4:	31 93       	st	Z+, r19
    43a6:	de f6       	brtc	.-74     	; 0x435e <__ultoa_invert+0xe>
    43a8:	cf 01       	movw	r24, r30
    43aa:	08 95       	ret
    43ac:	46 2f       	mov	r20, r22
    43ae:	47 70       	andi	r20, 0x07	; 7
    43b0:	40 5d       	subi	r20, 0xD0	; 208
    43b2:	41 93       	st	Z+, r20
    43b4:	b3 e0       	ldi	r27, 0x03	; 3
    43b6:	0f d0       	rcall	.+30     	; 0x43d6 <__ultoa_invert+0x86>
    43b8:	c9 f7       	brne	.-14     	; 0x43ac <__ultoa_invert+0x5c>
    43ba:	f6 cf       	rjmp	.-20     	; 0x43a8 <__ultoa_invert+0x58>
    43bc:	46 2f       	mov	r20, r22
    43be:	4f 70       	andi	r20, 0x0F	; 15
    43c0:	40 5d       	subi	r20, 0xD0	; 208
    43c2:	4a 33       	cpi	r20, 0x3A	; 58
    43c4:	18 f0       	brcs	.+6      	; 0x43cc <__ultoa_invert+0x7c>
    43c6:	49 5d       	subi	r20, 0xD9	; 217
    43c8:	31 fd       	sbrc	r19, 1
    43ca:	40 52       	subi	r20, 0x20	; 32
    43cc:	41 93       	st	Z+, r20
    43ce:	02 d0       	rcall	.+4      	; 0x43d4 <__ultoa_invert+0x84>
    43d0:	a9 f7       	brne	.-22     	; 0x43bc <__ultoa_invert+0x6c>
    43d2:	ea cf       	rjmp	.-44     	; 0x43a8 <__ultoa_invert+0x58>
    43d4:	b4 e0       	ldi	r27, 0x04	; 4
    43d6:	a6 95       	lsr	r26
    43d8:	97 95       	ror	r25
    43da:	87 95       	ror	r24
    43dc:	77 95       	ror	r23
    43de:	67 95       	ror	r22
    43e0:	ba 95       	dec	r27
    43e2:	c9 f7       	brne	.-14     	; 0x43d6 <__ultoa_invert+0x86>
    43e4:	00 97       	sbiw	r24, 0x00	; 0
    43e6:	61 05       	cpc	r22, r1
    43e8:	71 05       	cpc	r23, r1
    43ea:	08 95       	ret
    43ec:	9b 01       	movw	r18, r22
    43ee:	ac 01       	movw	r20, r24
    43f0:	0a 2e       	mov	r0, r26
    43f2:	06 94       	lsr	r0
    43f4:	57 95       	ror	r21
    43f6:	47 95       	ror	r20
    43f8:	37 95       	ror	r19
    43fa:	27 95       	ror	r18
    43fc:	ba 95       	dec	r27
    43fe:	c9 f7       	brne	.-14     	; 0x43f2 <__ultoa_invert+0xa2>
    4400:	62 0f       	add	r22, r18
    4402:	73 1f       	adc	r23, r19
    4404:	84 1f       	adc	r24, r20
    4406:	95 1f       	adc	r25, r21
    4408:	a0 1d       	adc	r26, r0
    440a:	08 95       	ret

0000440c <_exit>:
    440c:	f8 94       	cli

0000440e <__stop_program>:
    440e:	ff cf       	rjmp	.-2      	; 0x440e <__stop_program>
