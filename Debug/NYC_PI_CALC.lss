
NYC_PI_CALC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00802000  00002f48  00002fdc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000c61  00802028  00802028  00003004  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003004  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003034  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007d8  00000000  00000000  00003074  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000dcd1  00000000  00000000  0000384c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004bf8  00000000  00000000  0001151d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004eeb  00000000  00000000  00016115  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001ac0  00000000  00000000  0001b000  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005582  00000000  00000000  0001cac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000089ab  00000000  00000000  00022042  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007b8  00000000  00000000  0002a9ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__ctors_end>
       4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
       8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
       c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      10:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      14:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      18:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      1c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      20:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      24:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      28:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      2c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      30:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      34:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      38:	0c 94 0e 06 	jmp	0xc1c	; 0xc1c <__vector_14>
      3c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      40:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      44:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      48:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      4c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      50:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      54:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      58:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      5c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      60:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      64:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      68:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      6c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      70:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      74:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      78:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      7c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      80:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      84:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      88:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      8c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      90:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      94:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      98:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      9c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      a0:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      a4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      a8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      ac:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      b0:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      b4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      b8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      bc:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      c0:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      c4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      c8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      cc:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      d0:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      d4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      d8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      dc:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      e0:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      e4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      e8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      ec:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      f0:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      f4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      f8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      fc:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     100:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     104:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     108:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     10c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     110:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     114:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     118:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     11c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     120:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     124:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     128:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     12c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     130:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     134:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     138:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     13c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     140:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     144:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     148:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     14c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     150:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     154:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     158:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     15c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     160:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     164:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     168:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     16c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     170:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     174:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     178:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     17c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     180:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     184:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     188:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     18c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     190:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     194:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     198:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     19c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1a0:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1a4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1a8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1ac:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1b0:	0c 94 18 13 	jmp	0x2630	; 0x2630 <__vector_108>
     1b4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1b8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1bc:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1c0:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1c4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1c8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1cc:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1d0:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1d4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1d8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1dc:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1e0:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1e4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1e8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1ec:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1f0:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1f4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1f8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1fc:	c7 11       	cpse	r28, r7
     1fe:	c7 11       	cpse	r28, r7
     200:	c7 11       	cpse	r28, r7
     202:	14 12       	cpse	r1, r20
     204:	fc 11       	cpse	r31, r12
     206:	11 12       	cpse	r1, r17
     208:	c7 11       	cpse	r28, r7
     20a:	c7 11       	cpse	r28, r7
     20c:	14 12       	cpse	r1, r20
     20e:	fc 11       	cpse	r31, r12

00000210 <__trampolines_start>:
     210:	0c 94 df 12 	jmp	0x25be	; 0x25be <vButtonTask>
     214:	0c 94 bc 14 	jmp	0x2978	; 0x2978 <vDisplayUpdateTask>
     218:	0c 94 1e 0b 	jmp	0x163c	; 0x163c <prvIdleTask>
     21c:	0c 94 fc 11 	jmp	0x23f8	; 0x23f8 <prvProcessReceivedCommands+0xf2>
     220:	0c 94 14 12 	jmp	0x2428	; 0x2428 <prvProcessReceivedCommands+0x122>
     224:	0c 94 30 12 	jmp	0x2460	; 0x2460 <prvTimerTask>
     228:	0c 94 9e 12 	jmp	0x253c	; 0x253c <vPiLeibniz>
     22c:	0c 94 c7 11 	jmp	0x238e	; 0x238e <prvProcessReceivedCommands+0x88>
     230:	0c 94 11 12 	jmp	0x2422	; 0x2422 <prvProcessReceivedCommands+0x11c>
     234:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <vEventGroupSetBitsCallback>

00000238 <__ctors_end>:
     238:	11 24       	eor	r1, r1
     23a:	1f be       	out	0x3f, r1	; 63
     23c:	cf ef       	ldi	r28, 0xFF	; 255
     23e:	cd bf       	out	0x3d, r28	; 61
     240:	df e3       	ldi	r29, 0x3F	; 63
     242:	de bf       	out	0x3e, r29	; 62
     244:	00 e0       	ldi	r16, 0x00	; 0
     246:	0c bf       	out	0x3c, r16	; 60

00000248 <init_mem>:
// !!! Never call this function, it is part of .init-Code
void __attribute__ ((naked, section(".init3"))) init_mem (void);
void init_mem (void)
{
   //  Use inline assembler so it works even with optimization turned off
   __asm volatile (
     248:	e9 e8       	ldi	r30, 0x89	; 137
     24a:	fc e2       	ldi	r31, 0x2C	; 44
     24c:	8a ea       	ldi	r24, 0xAA	; 170
     24e:	90 e4       	ldi	r25, 0x40	; 64
     250:	81 93       	st	Z+, r24
     252:	e0 30       	cpi	r30, 0x00	; 0
     254:	f9 07       	cpc	r31, r25
     256:	e0 f3       	brcs	.-8      	; 0x250 <init_mem+0x8>

00000258 <__do_copy_data>:
     258:	10 e2       	ldi	r17, 0x20	; 32
     25a:	a0 e0       	ldi	r26, 0x00	; 0
     25c:	b0 e2       	ldi	r27, 0x20	; 32
     25e:	e8 e4       	ldi	r30, 0x48	; 72
     260:	ff e2       	ldi	r31, 0x2F	; 47
     262:	00 e0       	ldi	r16, 0x00	; 0
     264:	0b bf       	out	0x3b, r16	; 59
     266:	02 c0       	rjmp	.+4      	; 0x26c <__do_copy_data+0x14>
     268:	07 90       	elpm	r0, Z+
     26a:	0d 92       	st	X+, r0
     26c:	a8 32       	cpi	r26, 0x28	; 40
     26e:	b1 07       	cpc	r27, r17
     270:	d9 f7       	brne	.-10     	; 0x268 <__do_copy_data+0x10>

00000272 <__do_clear_bss>:
     272:	2c e2       	ldi	r18, 0x2C	; 44
     274:	a8 e2       	ldi	r26, 0x28	; 40
     276:	b0 e2       	ldi	r27, 0x20	; 32
     278:	01 c0       	rjmp	.+2      	; 0x27c <.do_clear_bss_start>

0000027a <.do_clear_bss_loop>:
     27a:	1d 92       	st	X+, r1

0000027c <.do_clear_bss_start>:
     27c:	a9 38       	cpi	r26, 0x89	; 137
     27e:	b2 07       	cpc	r27, r18
     280:	e1 f7       	brne	.-8      	; 0x27a <.do_clear_bss_loop>
     282:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <main>
     286:	0c 94 a2 17 	jmp	0x2f44	; 0x2f44 <_exit>

0000028a <__bad_interrupt>:
     28a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000028e <initButtons>:
 #define BUTTON_PRESS_LONG			500

 

 void initButtons(void) {
	PORTF.DIRCLR = PIN4_bm; //SW1
     28e:	e0 ea       	ldi	r30, 0xA0	; 160
     290:	f6 e0       	ldi	r31, 0x06	; 6
     292:	80 e1       	ldi	r24, 0x10	; 16
     294:	82 83       	std	Z+2, r24	; 0x02
	PORTF.DIRCLR = PIN5_bm; //SW2
     296:	80 e2       	ldi	r24, 0x20	; 32
     298:	82 83       	std	Z+2, r24	; 0x02
	PORTF.DIRCLR = PIN6_bm; //SW3
     29a:	80 e4       	ldi	r24, 0x40	; 64
     29c:	82 83       	std	Z+2, r24	; 0x02
	PORTF.DIRCLR = PIN7_bm; //SW4
     29e:	80 e8       	ldi	r24, 0x80	; 128
     2a0:	82 83       	std	Z+2, r24	; 0x02
     2a2:	08 95       	ret

000002a4 <updateButtons>:
 void updateButtons(void) {
	static uint16_t b1Count = 0;
	static uint16_t b2Count = 0;
	static uint16_t b3Count = 0;
	static uint16_t b4Count = 0;
	if(Button1_Value == 0) {
     2a4:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7de6a8>
     2a8:	84 fd       	sbrc	r24, 4
     2aa:	0e c0       	rjmp	.+28     	; 0x2c8 <updateButtons+0x24>
		if(b1Count < 60000) {
     2ac:	80 91 2e 20 	lds	r24, 0x202E	; 0x80202e <b1Count.3829>
     2b0:	90 91 2f 20 	lds	r25, 0x202F	; 0x80202f <b1Count.3829+0x1>
     2b4:	80 36       	cpi	r24, 0x60	; 96
     2b6:	2a ee       	ldi	r18, 0xEA	; 234
     2b8:	92 07       	cpc	r25, r18
     2ba:	e8 f4       	brcc	.+58     	; 0x2f6 <updateButtons+0x52>
			b1Count++;
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	80 93 2e 20 	sts	0x202E, r24	; 0x80202e <b1Count.3829>
     2c2:	90 93 2f 20 	sts	0x202F, r25	; 0x80202f <b1Count.3829+0x1>
     2c6:	17 c0       	rjmp	.+46     	; 0x2f6 <updateButtons+0x52>
		}
	} else {
		if(b1Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     2c8:	80 91 2e 20 	lds	r24, 0x202E	; 0x80202e <b1Count.3829>
     2cc:	90 91 2f 20 	lds	r25, 0x202F	; 0x80202f <b1Count.3829+0x1>
     2d0:	8b 30       	cpi	r24, 0x0B	; 11
     2d2:	91 05       	cpc	r25, r1
     2d4:	48 f0       	brcs	.+18     	; 0x2e8 <updateButtons+0x44>
			if(b1Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     2d6:	c3 97       	sbiw	r24, 0x33	; 51
     2d8:	18 f0       	brcs	.+6      	; 0x2e0 <updateButtons+0x3c>
				//Button was pressed Long
				b1Status = LONG_PRESSED;
     2da:	10 92 80 2c 	sts	0x2C80, r1	; 0x802c80 <b1Status>
     2de:	07 c0       	rjmp	.+14     	; 0x2ee <updateButtons+0x4a>
			} else {
				//Button was pressed Short	
				b1Status = SHORT_PRESSED;
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	80 93 80 2c 	sts	0x2C80, r24	; 0x802c80 <b1Status>
     2e6:	03 c0       	rjmp	.+6      	; 0x2ee <updateButtons+0x4a>
			}
		} else {
			b1Status = NOT_PRESSED;
     2e8:	82 e0       	ldi	r24, 0x02	; 2
     2ea:	80 93 80 2c 	sts	0x2C80, r24	; 0x802c80 <b1Status>
		}
		b1Count = 0;
     2ee:	10 92 2e 20 	sts	0x202E, r1	; 0x80202e <b1Count.3829>
     2f2:	10 92 2f 20 	sts	0x202F, r1	; 0x80202f <b1Count.3829+0x1>
	}
	if(Button2_Value == 0) {
     2f6:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7de6a8>
     2fa:	85 fd       	sbrc	r24, 5
     2fc:	0e c0       	rjmp	.+28     	; 0x31a <updateButtons+0x76>
		if(b2Count < 60000) {
     2fe:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <b2Count.3830>
     302:	90 91 2d 20 	lds	r25, 0x202D	; 0x80202d <b2Count.3830+0x1>
     306:	80 36       	cpi	r24, 0x60	; 96
     308:	2a ee       	ldi	r18, 0xEA	; 234
     30a:	92 07       	cpc	r25, r18
     30c:	e8 f4       	brcc	.+58     	; 0x348 <updateButtons+0xa4>
			b2Count++;
     30e:	01 96       	adiw	r24, 0x01	; 1
     310:	80 93 2c 20 	sts	0x202C, r24	; 0x80202c <b2Count.3830>
     314:	90 93 2d 20 	sts	0x202D, r25	; 0x80202d <b2Count.3830+0x1>
     318:	17 c0       	rjmp	.+46     	; 0x348 <updateButtons+0xa4>
		}
	} else {
		if(b2Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     31a:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <b2Count.3830>
     31e:	90 91 2d 20 	lds	r25, 0x202D	; 0x80202d <b2Count.3830+0x1>
     322:	8b 30       	cpi	r24, 0x0B	; 11
     324:	91 05       	cpc	r25, r1
     326:	48 f0       	brcs	.+18     	; 0x33a <updateButtons+0x96>
			if(b2Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     328:	c3 97       	sbiw	r24, 0x33	; 51
     32a:	18 f0       	brcs	.+6      	; 0x332 <updateButtons+0x8e>
				//Button was pressed Long
				b2Status = LONG_PRESSED;
     32c:	10 92 81 2c 	sts	0x2C81, r1	; 0x802c81 <b2Status>
     330:	07 c0       	rjmp	.+14     	; 0x340 <updateButtons+0x9c>
				} else {
				//Button was pressed Short
				b2Status = SHORT_PRESSED;
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	80 93 81 2c 	sts	0x2C81, r24	; 0x802c81 <b2Status>
     338:	03 c0       	rjmp	.+6      	; 0x340 <updateButtons+0x9c>
			}
		} else {
			b2Status = NOT_PRESSED;			
     33a:	82 e0       	ldi	r24, 0x02	; 2
     33c:	80 93 81 2c 	sts	0x2C81, r24	; 0x802c81 <b2Status>
		}
		b2Count = 0;
     340:	10 92 2c 20 	sts	0x202C, r1	; 0x80202c <b2Count.3830>
     344:	10 92 2d 20 	sts	0x202D, r1	; 0x80202d <b2Count.3830+0x1>
	}
	if(Button3_Value == 0) {
     348:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7de6a8>
     34c:	86 fd       	sbrc	r24, 6
     34e:	0e c0       	rjmp	.+28     	; 0x36c <updateButtons+0xc8>
		if(b3Count < 60000) {
     350:	80 91 2a 20 	lds	r24, 0x202A	; 0x80202a <b3Count.3831>
     354:	90 91 2b 20 	lds	r25, 0x202B	; 0x80202b <b3Count.3831+0x1>
     358:	80 36       	cpi	r24, 0x60	; 96
     35a:	2a ee       	ldi	r18, 0xEA	; 234
     35c:	92 07       	cpc	r25, r18
     35e:	e8 f4       	brcc	.+58     	; 0x39a <updateButtons+0xf6>
			b3Count++;
     360:	01 96       	adiw	r24, 0x01	; 1
     362:	80 93 2a 20 	sts	0x202A, r24	; 0x80202a <b3Count.3831>
     366:	90 93 2b 20 	sts	0x202B, r25	; 0x80202b <b3Count.3831+0x1>
     36a:	17 c0       	rjmp	.+46     	; 0x39a <updateButtons+0xf6>
		}
	} else {
		if(b3Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     36c:	80 91 2a 20 	lds	r24, 0x202A	; 0x80202a <b3Count.3831>
     370:	90 91 2b 20 	lds	r25, 0x202B	; 0x80202b <b3Count.3831+0x1>
     374:	8b 30       	cpi	r24, 0x0B	; 11
     376:	91 05       	cpc	r25, r1
     378:	48 f0       	brcs	.+18     	; 0x38c <updateButtons+0xe8>
			if(b3Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     37a:	c3 97       	sbiw	r24, 0x33	; 51
     37c:	18 f0       	brcs	.+6      	; 0x384 <updateButtons+0xe0>
				//Button was pressed Long
				b3Status = LONG_PRESSED;
     37e:	10 92 82 2c 	sts	0x2C82, r1	; 0x802c82 <b3Status>
     382:	07 c0       	rjmp	.+14     	; 0x392 <updateButtons+0xee>
				} else {
				//Button was pressed Short
				b3Status = SHORT_PRESSED;
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	80 93 82 2c 	sts	0x2C82, r24	; 0x802c82 <b3Status>
     38a:	03 c0       	rjmp	.+6      	; 0x392 <updateButtons+0xee>
			}
		} else {
			b3Status = NOT_PRESSED;
     38c:	82 e0       	ldi	r24, 0x02	; 2
     38e:	80 93 82 2c 	sts	0x2C82, r24	; 0x802c82 <b3Status>
		}
		b3Count = 0;
     392:	10 92 2a 20 	sts	0x202A, r1	; 0x80202a <b3Count.3831>
     396:	10 92 2b 20 	sts	0x202B, r1	; 0x80202b <b3Count.3831+0x1>
	}
	if(Button4_Value == 0) {
     39a:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7de6a8>
     39e:	88 23       	and	r24, r24
     3a0:	74 f0       	brlt	.+28     	; 0x3be <updateButtons+0x11a>
		if(b4Count < 60000) {
     3a2:	80 91 28 20 	lds	r24, 0x2028	; 0x802028 <__data_end>
     3a6:	90 91 29 20 	lds	r25, 0x2029	; 0x802029 <__data_end+0x1>
     3aa:	80 36       	cpi	r24, 0x60	; 96
     3ac:	2a ee       	ldi	r18, 0xEA	; 234
     3ae:	92 07       	cpc	r25, r18
     3b0:	e8 f4       	brcc	.+58     	; 0x3ec <updateButtons+0x148>
			b4Count++;
     3b2:	01 96       	adiw	r24, 0x01	; 1
     3b4:	80 93 28 20 	sts	0x2028, r24	; 0x802028 <__data_end>
     3b8:	90 93 29 20 	sts	0x2029, r25	; 0x802029 <__data_end+0x1>
     3bc:	08 95       	ret
		}
	} else {
		if(b4Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     3be:	80 91 28 20 	lds	r24, 0x2028	; 0x802028 <__data_end>
     3c2:	90 91 29 20 	lds	r25, 0x2029	; 0x802029 <__data_end+0x1>
     3c6:	8b 30       	cpi	r24, 0x0B	; 11
     3c8:	91 05       	cpc	r25, r1
     3ca:	48 f0       	brcs	.+18     	; 0x3de <updateButtons+0x13a>
			if(b4Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     3cc:	c3 97       	sbiw	r24, 0x33	; 51
     3ce:	18 f0       	brcs	.+6      	; 0x3d6 <updateButtons+0x132>
				//Button was pressed Long
				b4Status = LONG_PRESSED;
     3d0:	10 92 83 2c 	sts	0x2C83, r1	; 0x802c83 <b4Status>
     3d4:	07 c0       	rjmp	.+14     	; 0x3e4 <updateButtons+0x140>
				} else {
				//Button was pressed Short
				b4Status = SHORT_PRESSED;
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	80 93 83 2c 	sts	0x2C83, r24	; 0x802c83 <b4Status>
     3dc:	03 c0       	rjmp	.+6      	; 0x3e4 <updateButtons+0x140>
			}
		} else {
			b4Status = NOT_PRESSED;
     3de:	82 e0       	ldi	r24, 0x02	; 2
     3e0:	80 93 83 2c 	sts	0x2C83, r24	; 0x802c83 <b4Status>
		}
		b4Count = 0;
     3e4:	10 92 28 20 	sts	0x2028, r1	; 0x802028 <__data_end>
     3e8:	10 92 29 20 	sts	0x2029, r1	; 0x802029 <__data_end+0x1>
     3ec:	08 95       	ret

000003ee <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
     3ee:	0f 93       	push	r16
     3f0:	cf 93       	push	r28
     3f2:	df 93       	push	r29
     3f4:	1f 92       	push	r1
     3f6:	cd b7       	in	r28, 0x3d	; 61
     3f8:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
     3fa:	2f b7       	in	r18, 0x3f	; 63
     3fc:	29 83       	std	Y+1, r18	; 0x01
     3fe:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
     400:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
     402:	fc 01       	movw	r30, r24
     404:	08 ed       	ldi	r16, 0xD8	; 216
     406:	04 bf       	out	0x34, r16	; 52
     408:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
     40a:	89 81       	ldd	r24, Y+1	; 0x01
     40c:	8f bf       	out	0x3f, r24	; 63
#endif
}
     40e:	0f 90       	pop	r0
     410:	df 91       	pop	r29
     412:	cf 91       	pop	r28
     414:	0f 91       	pop	r16
     416:	08 95       	ret

00000418 <CLKSYS_XOSC_Config>:
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
	OSC.XOSCCTRL = (uint8_t) freqRange |
     418:	66 23       	and	r22, r22
     41a:	11 f0       	breq	.+4      	; 0x420 <CLKSYS_XOSC_Config+0x8>
     41c:	90 e2       	ldi	r25, 0x20	; 32
     41e:	01 c0       	rjmp	.+2      	; 0x422 <CLKSYS_XOSC_Config+0xa>
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	89 2b       	or	r24, r25
     424:	48 2b       	or	r20, r24
     426:	40 93 52 00 	sts	0x0052, r20	; 0x800052 <__TEXT_REGION_LENGTH__+0x7de052>
     42a:	08 95       	ret

0000042c <CLKSYS_PLL_Config>:
 *  \param  factor      PLL multiplication factor, must be
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
	factor &= OSC_PLLFAC_gm;
     42c:	6f 71       	andi	r22, 0x1F	; 31
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
     42e:	86 2b       	or	r24, r22
     430:	80 93 55 00 	sts	0x0055, r24	; 0x800055 <__TEXT_REGION_LENGTH__+0x7de055>
     434:	08 95       	ret

00000436 <CLKSYS_Disable>:
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
     436:	e0 e5       	ldi	r30, 0x50	; 80
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	90 81       	ld	r25, Z
     43c:	28 2f       	mov	r18, r24
     43e:	20 95       	com	r18
     440:	92 23       	and	r25, r18
     442:	90 83       	st	Z, r25
	uint8_t clkEnabled = OSC.CTRL & oscSel;
     444:	90 81       	ld	r25, Z
	return clkEnabled;
}
     446:	89 23       	and	r24, r25
     448:	08 95       	ret

0000044a <CLKSYS_Prescalers_Config>:
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
     44a:	68 2b       	or	r22, r24
	CCPWrite( &CLK.PSCTRL, PSconfig );
     44c:	81 e4       	ldi	r24, 0x41	; 65
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	0e 94 f7 01 	call	0x3ee	; 0x3ee <CCPWrite>
     454:	08 95       	ret

00000456 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     456:	0f 93       	push	r16
     458:	1f 93       	push	r17
     45a:	cf 93       	push	r28
     45c:	c8 2f       	mov	r28, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     45e:	00 e4       	ldi	r16, 0x40	; 64
     460:	10 e0       	ldi	r17, 0x00	; 0
     462:	f8 01       	movw	r30, r16
     464:	60 81       	ld	r22, Z
     466:	68 7f       	andi	r22, 0xF8	; 248
     468:	68 2b       	or	r22, r24
	CCPWrite( &CLK.CTRL, clkCtrl );
     46a:	80 e4       	ldi	r24, 0x40	; 64
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	0e 94 f7 01 	call	0x3ee	; 0x3ee <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
     472:	f8 01       	movw	r30, r16
     474:	80 81       	ld	r24, Z
	return clkCtrl;
}
     476:	8c 23       	and	r24, r28
     478:	cf 91       	pop	r28
     47a:	1f 91       	pop	r17
     47c:	0f 91       	pop	r16
     47e:	08 95       	ret

00000480 <TC0_ConfigClockSource>:
{
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
     480:	fc 01       	movw	r30, r24
     482:	90 81       	ld	r25, Z
     484:	90 7f       	andi	r25, 0xF0	; 240
     486:	69 2b       	or	r22, r25
     488:	60 83       	st	Z, r22
     48a:	08 95       	ret

0000048c <TC0_ConfigWGM>:
     48c:	fc 01       	movw	r30, r24
     48e:	91 81       	ldd	r25, Z+1	; 0x01
     490:	98 7f       	andi	r25, 0xF8	; 248
     492:	69 2b       	or	r22, r25
     494:	61 83       	std	Z+1, r22	; 0x01
     496:	08 95       	ret

00000498 <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
     498:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
     49a:	96 81       	ldd	r25, Z+6	; 0x06
     49c:	9c 7f       	andi	r25, 0xFC	; 252
     49e:	69 2b       	or	r22, r25
     4a0:	66 83       	std	Z+6, r22	; 0x06
     4a2:	08 95       	ret

000004a4 <software_reset>:
 //----------------------------------------------
 // catch heap overflow
 //
 void vApplicationMallocFailedHook( void )
 {
	 error(ERR_LOW_HEAP_SPACE);
     4a4:	00 00       	nop
     4a6:	88 ed       	ldi	r24, 0xD8	; 216
     4a8:	84 bf       	out	0x34, r24	; 52
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <__TEXT_REGION_LENGTH__+0x7de079>
     4b0:	08 95       	ret

000004b2 <error>:
     4b2:	0e 94 52 02 	call	0x4a4	; 0x4a4 <software_reset>
     4b6:	08 95       	ret

000004b8 <vApplicationStackOverflowHook>:
 {
	 /* Just to stop compiler warnings. */
	 (void) pxTask;
	 (void) pcTaskName;

	 error(ERR_STACK_OVERFLOW);
     4b8:	8b e2       	ldi	r24, 0x2B	; 43
     4ba:	0e 94 59 02 	call	0x4b2	; 0x4b2 <error>
     4be:	08 95       	ret

000004c0 <prvTestWaitCondition>:
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
}
     4c0:	0f 93       	push	r16
     4c2:	01 11       	cpse	r16, r1
     4c4:	0c c0       	rjmp	.+24     	; 0x4de <prvTestWaitCondition+0x1e>
     4c6:	dc 01       	movw	r26, r24
     4c8:	cb 01       	movw	r24, r22
     4ca:	82 23       	and	r24, r18
     4cc:	93 23       	and	r25, r19
     4ce:	a4 23       	and	r26, r20
     4d0:	b5 23       	and	r27, r21
     4d2:	89 2b       	or	r24, r25
     4d4:	8a 2b       	or	r24, r26
     4d6:	8b 2b       	or	r24, r27
     4d8:	79 f4       	brne	.+30     	; 0x4f8 <prvTestWaitCondition+0x38>
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	10 c0       	rjmp	.+32     	; 0x4fe <prvTestWaitCondition+0x3e>
     4de:	dc 01       	movw	r26, r24
     4e0:	cb 01       	movw	r24, r22
     4e2:	82 23       	and	r24, r18
     4e4:	93 23       	and	r25, r19
     4e6:	a4 23       	and	r26, r20
     4e8:	b5 23       	and	r27, r21
     4ea:	28 17       	cp	r18, r24
     4ec:	39 07       	cpc	r19, r25
     4ee:	4a 07       	cpc	r20, r26
     4f0:	5b 07       	cpc	r21, r27
     4f2:	21 f0       	breq	.+8      	; 0x4fc <prvTestWaitCondition+0x3c>
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	03 c0       	rjmp	.+6      	; 0x4fe <prvTestWaitCondition+0x3e>
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	01 c0       	rjmp	.+2      	; 0x4fe <prvTestWaitCondition+0x3e>
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	0f 91       	pop	r16
     500:	08 95       	ret

00000502 <xEventGroupCreate>:
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
     506:	80 e1       	ldi	r24, 0x10	; 16
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <pvPortMalloc>
     50e:	ec 01       	movw	r28, r24
     510:	00 97       	sbiw	r24, 0x00	; 0
     512:	41 f0       	breq	.+16     	; 0x524 <xEventGroupCreate+0x22>
     514:	fc 01       	movw	r30, r24
     516:	11 92       	st	Z+, r1
     518:	11 92       	st	Z+, r1
     51a:	11 92       	st	Z+, r1
     51c:	11 92       	st	Z+, r1
     51e:	cf 01       	movw	r24, r30
     520:	0e 94 23 04 	call	0x846	; 0x846 <vListInitialise>
     524:	ce 01       	movw	r24, r28
     526:	df 91       	pop	r29
     528:	cf 91       	pop	r28
     52a:	08 95       	ret

0000052c <xEventGroupWaitBits>:
     52c:	2f 92       	push	r2
     52e:	3f 92       	push	r3
     530:	4f 92       	push	r4
     532:	5f 92       	push	r5
     534:	6f 92       	push	r6
     536:	7f 92       	push	r7
     538:	8f 92       	push	r8
     53a:	9f 92       	push	r9
     53c:	af 92       	push	r10
     53e:	bf 92       	push	r11
     540:	cf 92       	push	r12
     542:	df 92       	push	r13
     544:	ef 92       	push	r14
     546:	ff 92       	push	r15
     548:	0f 93       	push	r16
     54a:	1f 93       	push	r17
     54c:	cf 93       	push	r28
     54e:	df 93       	push	r29
     550:	ec 01       	movw	r28, r24
     552:	4a 01       	movw	r8, r20
     554:	5b 01       	movw	r10, r22
     556:	62 2e       	mov	r6, r18
     558:	70 2e       	mov	r7, r16
     55a:	0e 94 b6 0b 	call	0x176c	; 0x176c <vTaskSuspendAll>
     55e:	28 80       	ld	r2, Y
     560:	39 80       	ldd	r3, Y+1	; 0x01
     562:	4a 80       	ldd	r4, Y+2	; 0x02
     564:	5b 80       	ldd	r5, Y+3	; 0x03
     566:	a5 01       	movw	r20, r10
     568:	94 01       	movw	r18, r8
     56a:	c2 01       	movw	r24, r4
     56c:	b1 01       	movw	r22, r2
     56e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <prvTestWaitCondition>
     572:	88 23       	and	r24, r24
     574:	a1 f0       	breq	.+40     	; 0x59e <xEventGroupWaitBits+0x72>
     576:	66 20       	and	r6, r6
     578:	89 f1       	breq	.+98     	; 0x5dc <xEventGroupWaitBits+0xb0>
     57a:	d5 01       	movw	r26, r10
     57c:	c4 01       	movw	r24, r8
     57e:	80 95       	com	r24
     580:	90 95       	com	r25
     582:	a0 95       	com	r26
     584:	b0 95       	com	r27
     586:	82 21       	and	r24, r2
     588:	93 21       	and	r25, r3
     58a:	a4 21       	and	r26, r4
     58c:	b5 21       	and	r27, r5
     58e:	88 83       	st	Y, r24
     590:	99 83       	std	Y+1, r25	; 0x01
     592:	aa 83       	std	Y+2, r26	; 0x02
     594:	bb 83       	std	Y+3, r27	; 0x03
     596:	c1 2c       	mov	r12, r1
     598:	d1 2c       	mov	r13, r1
     59a:	76 01       	movw	r14, r12
     59c:	22 c0       	rjmp	.+68     	; 0x5e2 <xEventGroupWaitBits+0xb6>
     59e:	c1 14       	cp	r12, r1
     5a0:	d1 04       	cpc	r13, r1
     5a2:	e1 04       	cpc	r14, r1
     5a4:	f1 04       	cpc	r15, r1
     5a6:	e9 f0       	breq	.+58     	; 0x5e2 <xEventGroupWaitBits+0xb6>
     5a8:	61 10       	cpse	r6, r1
     5aa:	04 c0       	rjmp	.+8      	; 0x5b4 <xEventGroupWaitBits+0x88>
     5ac:	40 e0       	ldi	r20, 0x00	; 0
     5ae:	50 e0       	ldi	r21, 0x00	; 0
     5b0:	ba 01       	movw	r22, r20
     5b2:	04 c0       	rjmp	.+8      	; 0x5bc <xEventGroupWaitBits+0x90>
     5b4:	40 e0       	ldi	r20, 0x00	; 0
     5b6:	50 e0       	ldi	r21, 0x00	; 0
     5b8:	60 e0       	ldi	r22, 0x00	; 0
     5ba:	71 e0       	ldi	r23, 0x01	; 1
     5bc:	71 10       	cpse	r7, r1
     5be:	74 60       	ori	r23, 0x04	; 4
     5c0:	48 29       	or	r20, r8
     5c2:	59 29       	or	r21, r9
     5c4:	6a 29       	or	r22, r10
     5c6:	7b 29       	or	r23, r11
     5c8:	97 01       	movw	r18, r14
     5ca:	86 01       	movw	r16, r12
     5cc:	ce 01       	movw	r24, r28
     5ce:	04 96       	adiw	r24, 0x04	; 4
     5d0:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <vTaskPlaceOnUnorderedEventList>
     5d4:	21 2c       	mov	r2, r1
     5d6:	31 2c       	mov	r3, r1
     5d8:	21 01       	movw	r4, r2
     5da:	03 c0       	rjmp	.+6      	; 0x5e2 <xEventGroupWaitBits+0xb6>
     5dc:	c1 2c       	mov	r12, r1
     5de:	d1 2c       	mov	r13, r1
     5e0:	76 01       	movw	r14, r12
     5e2:	0e 94 9e 0c 	call	0x193c	; 0x193c <xTaskResumeAll>
     5e6:	cd 28       	or	r12, r13
     5e8:	ce 28       	or	r12, r14
     5ea:	cf 28       	or	r12, r15
     5ec:	89 f1       	breq	.+98     	; 0x650 <xEventGroupWaitBits+0x124>
     5ee:	81 11       	cpse	r24, r1
     5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <xEventGroupWaitBits+0xca>
     5f2:	0e 94 8e 05 	call	0xb1c	; 0xb1c <vPortYield>
     5f6:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <uxTaskResetEventItemValue>
     5fa:	6b 01       	movw	r12, r22
     5fc:	7c 01       	movw	r14, r24
     5fe:	91 fd       	sbrc	r25, 1
     600:	24 c0       	rjmp	.+72     	; 0x64a <xEventGroupWaitBits+0x11e>
     602:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     606:	ff 93       	push	r31
     608:	f8 7f       	andi	r31, 0xF8	; 248
     60a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     60e:	c8 80       	ld	r12, Y
     610:	d9 80       	ldd	r13, Y+1	; 0x01
     612:	ea 80       	ldd	r14, Y+2	; 0x02
     614:	fb 80       	ldd	r15, Y+3	; 0x03
     616:	07 2d       	mov	r16, r7
     618:	a5 01       	movw	r20, r10
     61a:	94 01       	movw	r18, r8
     61c:	c7 01       	movw	r24, r14
     61e:	b6 01       	movw	r22, r12
     620:	0e 94 60 02 	call	0x4c0	; 0x4c0 <prvTestWaitCondition>
     624:	88 23       	and	r24, r24
     626:	71 f0       	breq	.+28     	; 0x644 <xEventGroupWaitBits+0x118>
     628:	66 20       	and	r6, r6
     62a:	61 f0       	breq	.+24     	; 0x644 <xEventGroupWaitBits+0x118>
     62c:	80 94       	com	r8
     62e:	90 94       	com	r9
     630:	a0 94       	com	r10
     632:	b0 94       	com	r11
     634:	8c 20       	and	r8, r12
     636:	9d 20       	and	r9, r13
     638:	ae 20       	and	r10, r14
     63a:	bf 20       	and	r11, r15
     63c:	88 82       	st	Y, r8
     63e:	99 82       	std	Y+1, r9	; 0x01
     640:	aa 82       	std	Y+2, r10	; 0x02
     642:	bb 82       	std	Y+3, r11	; 0x03
     644:	ff 91       	pop	r31
     646:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     64a:	16 01       	movw	r2, r12
     64c:	27 01       	movw	r4, r14
     64e:	55 24       	eor	r5, r5
     650:	c2 01       	movw	r24, r4
     652:	b1 01       	movw	r22, r2
     654:	df 91       	pop	r29
     656:	cf 91       	pop	r28
     658:	1f 91       	pop	r17
     65a:	0f 91       	pop	r16
     65c:	ff 90       	pop	r15
     65e:	ef 90       	pop	r14
     660:	df 90       	pop	r13
     662:	cf 90       	pop	r12
     664:	bf 90       	pop	r11
     666:	af 90       	pop	r10
     668:	9f 90       	pop	r9
     66a:	8f 90       	pop	r8
     66c:	7f 90       	pop	r7
     66e:	6f 90       	pop	r6
     670:	5f 90       	pop	r5
     672:	4f 90       	pop	r4
     674:	3f 90       	pop	r3
     676:	2f 90       	pop	r2
     678:	08 95       	ret

0000067a <xEventGroupClearBits>:
     67a:	0f 93       	push	r16
     67c:	1f 93       	push	r17
     67e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     682:	ff 93       	push	r31
     684:	f8 7f       	andi	r31, 0xF8	; 248
     686:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     68a:	fc 01       	movw	r30, r24
     68c:	00 81       	ld	r16, Z
     68e:	11 81       	ldd	r17, Z+1	; 0x01
     690:	22 81       	ldd	r18, Z+2	; 0x02
     692:	33 81       	ldd	r19, Z+3	; 0x03
     694:	40 95       	com	r20
     696:	50 95       	com	r21
     698:	60 95       	com	r22
     69a:	70 95       	com	r23
     69c:	40 23       	and	r20, r16
     69e:	51 23       	and	r21, r17
     6a0:	62 23       	and	r22, r18
     6a2:	73 23       	and	r23, r19
     6a4:	40 83       	st	Z, r20
     6a6:	51 83       	std	Z+1, r21	; 0x01
     6a8:	62 83       	std	Z+2, r22	; 0x02
     6aa:	73 83       	std	Z+3, r23	; 0x03
     6ac:	ff 91       	pop	r31
     6ae:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     6b2:	c9 01       	movw	r24, r18
     6b4:	b8 01       	movw	r22, r16
     6b6:	1f 91       	pop	r17
     6b8:	0f 91       	pop	r16
     6ba:	08 95       	ret

000006bc <xEventGroupSetBits>:
     6bc:	4f 92       	push	r4
     6be:	5f 92       	push	r5
     6c0:	6f 92       	push	r6
     6c2:	7f 92       	push	r7
     6c4:	af 92       	push	r10
     6c6:	bf 92       	push	r11
     6c8:	cf 92       	push	r12
     6ca:	df 92       	push	r13
     6cc:	ef 92       	push	r14
     6ce:	ff 92       	push	r15
     6d0:	0f 93       	push	r16
     6d2:	1f 93       	push	r17
     6d4:	cf 93       	push	r28
     6d6:	df 93       	push	r29
     6d8:	ec 01       	movw	r28, r24
     6da:	6a 01       	movw	r12, r20
     6dc:	7b 01       	movw	r14, r22
     6de:	8c 01       	movw	r16, r24
     6e0:	09 5f       	subi	r16, 0xF9	; 249
     6e2:	1f 4f       	sbci	r17, 0xFF	; 255
     6e4:	0e 94 b6 0b 	call	0x176c	; 0x176c <vTaskSuspendAll>
     6e8:	eb 85       	ldd	r30, Y+11	; 0x0b
     6ea:	fc 85       	ldd	r31, Y+12	; 0x0c
     6ec:	88 81       	ld	r24, Y
     6ee:	99 81       	ldd	r25, Y+1	; 0x01
     6f0:	aa 81       	ldd	r26, Y+2	; 0x02
     6f2:	bb 81       	ldd	r27, Y+3	; 0x03
     6f4:	c8 2a       	or	r12, r24
     6f6:	d9 2a       	or	r13, r25
     6f8:	ea 2a       	or	r14, r26
     6fa:	fb 2a       	or	r15, r27
     6fc:	c8 82       	st	Y, r12
     6fe:	d9 82       	std	Y+1, r13	; 0x01
     700:	ea 82       	std	Y+2, r14	; 0x02
     702:	fb 82       	std	Y+3, r15	; 0x03
     704:	c1 2c       	mov	r12, r1
     706:	d1 2c       	mov	r13, r1
     708:	76 01       	movw	r14, r12
     70a:	3d c0       	rjmp	.+122    	; 0x786 <xEventGroupSetBits+0xca>
     70c:	a4 80       	ldd	r10, Z+4	; 0x04
     70e:	b5 80       	ldd	r11, Z+5	; 0x05
     710:	80 81       	ld	r24, Z
     712:	91 81       	ldd	r25, Z+1	; 0x01
     714:	a2 81       	ldd	r26, Z+2	; 0x02
     716:	b3 81       	ldd	r27, Z+3	; 0x03
     718:	ac 01       	movw	r20, r24
     71a:	bd 01       	movw	r22, r26
     71c:	77 27       	eor	r23, r23
     71e:	b2 fd       	sbrc	r27, 2
     720:	0e c0       	rjmp	.+28     	; 0x73e <xEventGroupSetBits+0x82>
     722:	48 80       	ld	r4, Y
     724:	59 80       	ldd	r5, Y+1	; 0x01
     726:	6a 80       	ldd	r6, Y+2	; 0x02
     728:	7b 80       	ldd	r7, Y+3	; 0x03
     72a:	44 22       	and	r4, r20
     72c:	55 22       	and	r5, r21
     72e:	66 22       	and	r6, r22
     730:	77 22       	and	r7, r23
     732:	45 28       	or	r4, r5
     734:	46 28       	or	r4, r6
     736:	47 28       	or	r4, r7
     738:	89 f4       	brne	.+34     	; 0x75c <xEventGroupSetBits+0xa0>
     73a:	20 e0       	ldi	r18, 0x00	; 0
     73c:	12 c0       	rjmp	.+36     	; 0x762 <xEventGroupSetBits+0xa6>
     73e:	48 80       	ld	r4, Y
     740:	59 80       	ldd	r5, Y+1	; 0x01
     742:	6a 80       	ldd	r6, Y+2	; 0x02
     744:	7b 80       	ldd	r7, Y+3	; 0x03
     746:	44 22       	and	r4, r20
     748:	55 22       	and	r5, r21
     74a:	66 22       	and	r6, r22
     74c:	77 22       	and	r7, r23
     74e:	44 15       	cp	r20, r4
     750:	55 05       	cpc	r21, r5
     752:	66 05       	cpc	r22, r6
     754:	77 05       	cpc	r23, r7
     756:	21 f0       	breq	.+8      	; 0x760 <xEventGroupSetBits+0xa4>
     758:	20 e0       	ldi	r18, 0x00	; 0
     75a:	03 c0       	rjmp	.+6      	; 0x762 <xEventGroupSetBits+0xa6>
     75c:	21 e0       	ldi	r18, 0x01	; 1
     75e:	01 c0       	rjmp	.+2      	; 0x762 <xEventGroupSetBits+0xa6>
     760:	21 e0       	ldi	r18, 0x01	; 1
     762:	22 23       	and	r18, r18
     764:	71 f0       	breq	.+28     	; 0x782 <xEventGroupSetBits+0xc6>
     766:	b0 ff       	sbrs	r27, 0
     768:	04 c0       	rjmp	.+8      	; 0x772 <xEventGroupSetBits+0xb6>
     76a:	c4 2a       	or	r12, r20
     76c:	d5 2a       	or	r13, r21
     76e:	e6 2a       	or	r14, r22
     770:	f7 2a       	or	r15, r23
     772:	48 81       	ld	r20, Y
     774:	59 81       	ldd	r21, Y+1	; 0x01
     776:	6a 81       	ldd	r22, Y+2	; 0x02
     778:	7b 81       	ldd	r23, Y+3	; 0x03
     77a:	72 60       	ori	r23, 0x02	; 2
     77c:	cf 01       	movw	r24, r30
     77e:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <vTaskRemoveFromUnorderedEventList>
     782:	ea 2d       	mov	r30, r10
     784:	fb 2d       	mov	r31, r11
     786:	e0 17       	cp	r30, r16
     788:	f1 07       	cpc	r31, r17
     78a:	09 f0       	breq	.+2      	; 0x78e <xEventGroupSetBits+0xd2>
     78c:	bf cf       	rjmp	.-130    	; 0x70c <xEventGroupSetBits+0x50>
     78e:	c0 94       	com	r12
     790:	d0 94       	com	r13
     792:	e0 94       	com	r14
     794:	f0 94       	com	r15
     796:	88 81       	ld	r24, Y
     798:	99 81       	ldd	r25, Y+1	; 0x01
     79a:	aa 81       	ldd	r26, Y+2	; 0x02
     79c:	bb 81       	ldd	r27, Y+3	; 0x03
     79e:	c8 22       	and	r12, r24
     7a0:	d9 22       	and	r13, r25
     7a2:	ea 22       	and	r14, r26
     7a4:	fb 22       	and	r15, r27
     7a6:	c8 82       	st	Y, r12
     7a8:	d9 82       	std	Y+1, r13	; 0x01
     7aa:	ea 82       	std	Y+2, r14	; 0x02
     7ac:	fb 82       	std	Y+3, r15	; 0x03
     7ae:	0e 94 9e 0c 	call	0x193c	; 0x193c <xTaskResumeAll>
     7b2:	68 81       	ld	r22, Y
     7b4:	79 81       	ldd	r23, Y+1	; 0x01
     7b6:	8a 81       	ldd	r24, Y+2	; 0x02
     7b8:	9b 81       	ldd	r25, Y+3	; 0x03
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	1f 91       	pop	r17
     7c0:	0f 91       	pop	r16
     7c2:	ff 90       	pop	r15
     7c4:	ef 90       	pop	r14
     7c6:	df 90       	pop	r13
     7c8:	cf 90       	pop	r12
     7ca:	bf 90       	pop	r11
     7cc:	af 90       	pop	r10
     7ce:	7f 90       	pop	r7
     7d0:	6f 90       	pop	r6
     7d2:	5f 90       	pop	r5
     7d4:	4f 90       	pop	r4
     7d6:	08 95       	ret

000007d8 <vEventGroupSetBitsCallback>:
     7d8:	0e 94 5e 03 	call	0x6bc	; 0x6bc <xEventGroupSetBits>
     7dc:	08 95       	ret

000007de <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
     7de:	0f 93       	push	r16
     7e0:	1f 93       	push	r17
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
     7e2:	89 01       	movw	r16, r18
     7e4:	9a 01       	movw	r18, r20
     7e6:	ab 01       	movw	r20, r22
     7e8:	bc 01       	movw	r22, r24
     7ea:	8c ee       	ldi	r24, 0xEC	; 236
     7ec:	93 e0       	ldi	r25, 0x03	; 3
     7ee:	0e 94 3f 12 	call	0x247e	; 0x247e <xTimerPendFunctionCallFromISR>

		return xReturn;
	}
     7f2:	1f 91       	pop	r17
     7f4:	0f 91       	pop	r16
     7f6:	08 95       	ret

000007f8 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     7fe:	0e 94 b6 0b 	call	0x176c	; 0x176c <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     802:	20 91 30 20 	lds	r18, 0x2030	; 0x802030 <xNextFreeByte>
     806:	30 91 31 20 	lds	r19, 0x2031	; 0x802031 <xNextFreeByte+0x1>
     80a:	c9 01       	movw	r24, r18
     80c:	8c 0f       	add	r24, r28
     80e:	9d 1f       	adc	r25, r29
     810:	88 3b       	cpi	r24, 0xB8	; 184
     812:	4b e0       	ldi	r20, 0x0B	; 11
     814:	94 07       	cpc	r25, r20
     816:	58 f4       	brcc	.+22     	; 0x82e <__EEPROM_REGION_LENGTH__+0x2e>
     818:	28 17       	cp	r18, r24
     81a:	39 07       	cpc	r19, r25
     81c:	58 f4       	brcc	.+22     	; 0x834 <__EEPROM_REGION_LENGTH__+0x34>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     81e:	e9 01       	movw	r28, r18
     820:	ce 5c       	subi	r28, 0xCE	; 206
     822:	df 4d       	sbci	r29, 0xDF	; 223
			xNextFreeByte += xWantedSize;			
     824:	80 93 30 20 	sts	0x2030, r24	; 0x802030 <xNextFreeByte>
     828:	90 93 31 20 	sts	0x2031, r25	; 0x802031 <xNextFreeByte+0x1>
     82c:	05 c0       	rjmp	.+10     	; 0x838 <__EEPROM_REGION_LENGTH__+0x38>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
     82e:	c0 e0       	ldi	r28, 0x00	; 0
     830:	d0 e0       	ldi	r29, 0x00	; 0
     832:	02 c0       	rjmp	.+4      	; 0x838 <__EEPROM_REGION_LENGTH__+0x38>
     834:	c0 e0       	ldi	r28, 0x00	; 0
     836:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     838:	0e 94 9e 0c 	call	0x193c	; 0x193c <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     83c:	ce 01       	movw	r24, r28
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	08 95       	ret

00000844 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     844:	08 95       	ret

00000846 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     846:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     848:	03 96       	adiw	r24, 0x03	; 3
     84a:	81 83       	std	Z+1, r24	; 0x01
     84c:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     84e:	4f ef       	ldi	r20, 0xFF	; 255
     850:	5f ef       	ldi	r21, 0xFF	; 255
     852:	ba 01       	movw	r22, r20
     854:	43 83       	std	Z+3, r20	; 0x03
     856:	54 83       	std	Z+4, r21	; 0x04
     858:	65 83       	std	Z+5, r22	; 0x05
     85a:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     85c:	87 83       	std	Z+7, r24	; 0x07
     85e:	90 87       	std	Z+8, r25	; 0x08
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     860:	81 87       	std	Z+9, r24	; 0x09
     862:	92 87       	std	Z+10, r25	; 0x0a

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     864:	10 82       	st	Z, r1
     866:	08 95       	ret

00000868 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     868:	fc 01       	movw	r30, r24
     86a:	12 86       	std	Z+10, r1	; 0x0a
     86c:	13 86       	std	Z+11, r1	; 0x0b
     86e:	08 95       	ret

00000870 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
     874:	9c 01       	movw	r18, r24
     876:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     878:	dc 01       	movw	r26, r24
     87a:	11 96       	adiw	r26, 0x01	; 1
     87c:	cd 91       	ld	r28, X+
     87e:	dc 91       	ld	r29, X
     880:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     882:	c4 83       	std	Z+4, r28	; 0x04
     884:	d5 83       	std	Z+5, r29	; 0x05
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     886:	8e 81       	ldd	r24, Y+6	; 0x06
     888:	9f 81       	ldd	r25, Y+7	; 0x07
     88a:	86 83       	std	Z+6, r24	; 0x06
     88c:	97 83       	std	Z+7, r25	; 0x07

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     88e:	8e 81       	ldd	r24, Y+6	; 0x06
     890:	9f 81       	ldd	r25, Y+7	; 0x07
     892:	dc 01       	movw	r26, r24
     894:	14 96       	adiw	r26, 0x04	; 4
     896:	6d 93       	st	X+, r22
     898:	7c 93       	st	X, r23
     89a:	15 97       	sbiw	r26, 0x05	; 5
	pxIndex->pxPrevious = pxNewListItem;
     89c:	6e 83       	std	Y+6, r22	; 0x06
     89e:	7f 83       	std	Y+7, r23	; 0x07

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     8a0:	22 87       	std	Z+10, r18	; 0x0a
     8a2:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
     8a4:	f9 01       	movw	r30, r18
     8a6:	80 81       	ld	r24, Z
     8a8:	8f 5f       	subi	r24, 0xFF	; 255
     8aa:	80 83       	st	Z, r24
}
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	08 95       	ret

000008b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     8b2:	0f 93       	push	r16
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     8bc:	08 81       	ld	r16, Y
     8be:	19 81       	ldd	r17, Y+1	; 0x01
     8c0:	2a 81       	ldd	r18, Y+2	; 0x02
     8c2:	3b 81       	ldd	r19, Y+3	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     8c4:	0f 3f       	cpi	r16, 0xFF	; 255
     8c6:	4f ef       	ldi	r20, 0xFF	; 255
     8c8:	14 07       	cpc	r17, r20
     8ca:	24 07       	cpc	r18, r20
     8cc:	34 07       	cpc	r19, r20
     8ce:	21 f4       	brne	.+8      	; 0x8d8 <vListInsert+0x26>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     8d0:	fc 01       	movw	r30, r24
     8d2:	a1 85       	ldd	r26, Z+9	; 0x09
     8d4:	b2 85       	ldd	r27, Z+10	; 0x0a
     8d6:	11 c0       	rjmp	.+34     	; 0x8fa <vListInsert+0x48>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     8d8:	dc 01       	movw	r26, r24
     8da:	13 96       	adiw	r26, 0x03	; 3
     8dc:	01 c0       	rjmp	.+2      	; 0x8e0 <vListInsert+0x2e>
     8de:	df 01       	movw	r26, r30
     8e0:	14 96       	adiw	r26, 0x04	; 4
     8e2:	ed 91       	ld	r30, X+
     8e4:	fc 91       	ld	r31, X
     8e6:	15 97       	sbiw	r26, 0x05	; 5
     8e8:	40 81       	ld	r20, Z
     8ea:	51 81       	ldd	r21, Z+1	; 0x01
     8ec:	62 81       	ldd	r22, Z+2	; 0x02
     8ee:	73 81       	ldd	r23, Z+3	; 0x03
     8f0:	04 17       	cp	r16, r20
     8f2:	15 07       	cpc	r17, r21
     8f4:	26 07       	cpc	r18, r22
     8f6:	37 07       	cpc	r19, r23
     8f8:	90 f7       	brcc	.-28     	; 0x8de <vListInsert+0x2c>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     8fa:	14 96       	adiw	r26, 0x04	; 4
     8fc:	ed 91       	ld	r30, X+
     8fe:	fc 91       	ld	r31, X
     900:	15 97       	sbiw	r26, 0x05	; 5
     902:	ec 83       	std	Y+4, r30	; 0x04
     904:	fd 83       	std	Y+5, r31	; 0x05
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     906:	c6 83       	std	Z+6, r28	; 0x06
     908:	d7 83       	std	Z+7, r29	; 0x07
	pxNewListItem->pxPrevious = pxIterator;
     90a:	ae 83       	std	Y+6, r26	; 0x06
     90c:	bf 83       	std	Y+7, r27	; 0x07
	pxIterator->pxNext = pxNewListItem;
     90e:	14 96       	adiw	r26, 0x04	; 4
     910:	cd 93       	st	X+, r28
     912:	dc 93       	st	X, r29
     914:	15 97       	sbiw	r26, 0x05	; 5

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     916:	8a 87       	std	Y+10, r24	; 0x0a
     918:	9b 87       	std	Y+11, r25	; 0x0b

	( pxList->uxNumberOfItems )++;
     91a:	fc 01       	movw	r30, r24
     91c:	20 81       	ld	r18, Z
     91e:	2f 5f       	subi	r18, 0xFF	; 255
     920:	20 83       	st	Z, r18
}
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	1f 91       	pop	r17
     928:	0f 91       	pop	r16
     92a:	08 95       	ret

0000092c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     932:	a2 85       	ldd	r26, Z+10	; 0x0a
     934:	b3 85       	ldd	r27, Z+11	; 0x0b

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     936:	c4 81       	ldd	r28, Z+4	; 0x04
     938:	d5 81       	ldd	r29, Z+5	; 0x05
     93a:	86 81       	ldd	r24, Z+6	; 0x06
     93c:	97 81       	ldd	r25, Z+7	; 0x07
     93e:	8e 83       	std	Y+6, r24	; 0x06
     940:	9f 83       	std	Y+7, r25	; 0x07
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     942:	c6 81       	ldd	r28, Z+6	; 0x06
     944:	d7 81       	ldd	r29, Z+7	; 0x07
     946:	84 81       	ldd	r24, Z+4	; 0x04
     948:	95 81       	ldd	r25, Z+5	; 0x05
     94a:	8c 83       	std	Y+4, r24	; 0x04
     94c:	9d 83       	std	Y+5, r25	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     94e:	11 96       	adiw	r26, 0x01	; 1
     950:	8d 91       	ld	r24, X+
     952:	9c 91       	ld	r25, X
     954:	12 97       	sbiw	r26, 0x02	; 2
     956:	e8 17       	cp	r30, r24
     958:	f9 07       	cpc	r31, r25
     95a:	31 f4       	brne	.+12     	; 0x968 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     95c:	86 81       	ldd	r24, Z+6	; 0x06
     95e:	97 81       	ldd	r25, Z+7	; 0x07
     960:	11 96       	adiw	r26, 0x01	; 1
     962:	8d 93       	st	X+, r24
     964:	9c 93       	st	X, r25
     966:	12 97       	sbiw	r26, 0x02	; 2
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     968:	12 86       	std	Z+10, r1	; 0x0a
     96a:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
     96c:	8c 91       	ld	r24, X
     96e:	81 50       	subi	r24, 0x01	; 1
     970:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
     972:	8c 91       	ld	r24, X
}
     974:	df 91       	pop	r29
     976:	cf 91       	pop	r28
     978:	08 95       	ret

0000097a <prvSetupTimerInterrupt>:
}

/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     97a:	83 ef       	ldi	r24, 0xF3	; 243
     97c:	91 e0       	ldi	r25, 0x01	; 1
     97e:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x7de826>
     982:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x7de827>
     986:	65 e0       	ldi	r22, 0x05	; 5
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	98 e0       	ldi	r25, 0x08	; 8
     98c:	0e 94 40 02 	call	0x480	; 0x480 <TC0_ConfigClockSource>
     990:	61 e0       	ldi	r22, 0x01	; 1
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	98 e0       	ldi	r25, 0x08	; 8
     996:	0e 94 4c 02 	call	0x498	; 0x498 <TC0_SetOverflowIntLevel>
     99a:	08 95       	ret

0000099c <_portSetInterruptMaskFromIsr>:
     99c:	e0 ea       	ldi	r30, 0xA0	; 160
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	82 81       	ldd	r24, Z+2	; 0x02
     9a2:	92 81       	ldd	r25, Z+2	; 0x02
     9a4:	98 7f       	andi	r25, 0xF8	; 248
     9a6:	92 83       	std	Z+2, r25	; 0x02
     9a8:	08 95       	ret

000009aa <portTaskIncrementTick>:
     9aa:	cf 93       	push	r28
     9ac:	0e 94 ce 04 	call	0x99c	; 0x99c <_portSetInterruptMaskFromIsr>
     9b0:	c8 2f       	mov	r28, r24
     9b2:	0e 94 ce 0b 	call	0x179c	; 0x179c <xTaskIncrementTick>
     9b6:	c0 93 a2 00 	sts	0x00A2, r28	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     9ba:	cf 91       	pop	r28
     9bc:	08 95       	ret

000009be <pxPortInitialiseStack>:
     9be:	cf 92       	push	r12
     9c0:	df 92       	push	r13
     9c2:	ef 92       	push	r14
     9c4:	ff 92       	push	r15
     9c6:	31 e1       	ldi	r19, 0x11	; 17
     9c8:	fc 01       	movw	r30, r24
     9ca:	30 83       	st	Z, r19
     9cc:	31 97       	sbiw	r30, 0x01	; 1
     9ce:	22 e2       	ldi	r18, 0x22	; 34
     9d0:	20 83       	st	Z, r18
     9d2:	31 97       	sbiw	r30, 0x01	; 1
     9d4:	a3 e3       	ldi	r26, 0x33	; 51
     9d6:	a0 83       	st	Z, r26
     9d8:	6b 01       	movw	r12, r22
     9da:	e1 2c       	mov	r14, r1
     9dc:	f1 2c       	mov	r15, r1
     9de:	31 97       	sbiw	r30, 0x01	; 1
     9e0:	60 83       	st	Z, r22
     9e2:	31 97       	sbiw	r30, 0x01	; 1
     9e4:	d0 82       	st	Z, r13
     9e6:	31 97       	sbiw	r30, 0x01	; 1
     9e8:	e0 82       	st	Z, r14
     9ea:	31 97       	sbiw	r30, 0x01	; 1
     9ec:	61 e3       	ldi	r22, 0x31	; 49
     9ee:	60 83       	st	Z, r22
     9f0:	31 97       	sbiw	r30, 0x01	; 1
     9f2:	60 e8       	ldi	r22, 0x80	; 128
     9f4:	60 83       	st	Z, r22
     9f6:	31 97       	sbiw	r30, 0x01	; 1
     9f8:	67 e8       	ldi	r22, 0x87	; 135
     9fa:	60 83       	st	Z, r22
     9fc:	31 97       	sbiw	r30, 0x01	; 1
     9fe:	10 82       	st	Z, r1
     a00:	31 97       	sbiw	r30, 0x01	; 1
     a02:	10 82       	st	Z, r1
     a04:	31 97       	sbiw	r30, 0x01	; 1
     a06:	62 e0       	ldi	r22, 0x02	; 2
     a08:	60 83       	st	Z, r22
     a0a:	31 97       	sbiw	r30, 0x01	; 1
     a0c:	63 e0       	ldi	r22, 0x03	; 3
     a0e:	60 83       	st	Z, r22
     a10:	31 97       	sbiw	r30, 0x01	; 1
     a12:	64 e0       	ldi	r22, 0x04	; 4
     a14:	60 83       	st	Z, r22
     a16:	31 97       	sbiw	r30, 0x01	; 1
     a18:	65 e0       	ldi	r22, 0x05	; 5
     a1a:	60 83       	st	Z, r22
     a1c:	31 97       	sbiw	r30, 0x01	; 1
     a1e:	66 e0       	ldi	r22, 0x06	; 6
     a20:	60 83       	st	Z, r22
     a22:	31 97       	sbiw	r30, 0x01	; 1
     a24:	67 e0       	ldi	r22, 0x07	; 7
     a26:	60 83       	st	Z, r22
     a28:	31 97       	sbiw	r30, 0x01	; 1
     a2a:	68 e0       	ldi	r22, 0x08	; 8
     a2c:	60 83       	st	Z, r22
     a2e:	31 97       	sbiw	r30, 0x01	; 1
     a30:	69 e0       	ldi	r22, 0x09	; 9
     a32:	60 83       	st	Z, r22
     a34:	31 97       	sbiw	r30, 0x01	; 1
     a36:	60 e1       	ldi	r22, 0x10	; 16
     a38:	60 83       	st	Z, r22
     a3a:	31 97       	sbiw	r30, 0x01	; 1
     a3c:	30 83       	st	Z, r19
     a3e:	31 97       	sbiw	r30, 0x01	; 1
     a40:	32 e1       	ldi	r19, 0x12	; 18
     a42:	30 83       	st	Z, r19
     a44:	31 97       	sbiw	r30, 0x01	; 1
     a46:	33 e1       	ldi	r19, 0x13	; 19
     a48:	30 83       	st	Z, r19
     a4a:	31 97       	sbiw	r30, 0x01	; 1
     a4c:	34 e1       	ldi	r19, 0x14	; 20
     a4e:	30 83       	st	Z, r19
     a50:	31 97       	sbiw	r30, 0x01	; 1
     a52:	35 e1       	ldi	r19, 0x15	; 21
     a54:	30 83       	st	Z, r19
     a56:	31 97       	sbiw	r30, 0x01	; 1
     a58:	36 e1       	ldi	r19, 0x16	; 22
     a5a:	30 83       	st	Z, r19
     a5c:	31 97       	sbiw	r30, 0x01	; 1
     a5e:	37 e1       	ldi	r19, 0x17	; 23
     a60:	30 83       	st	Z, r19
     a62:	31 97       	sbiw	r30, 0x01	; 1
     a64:	38 e1       	ldi	r19, 0x18	; 24
     a66:	30 83       	st	Z, r19
     a68:	31 97       	sbiw	r30, 0x01	; 1
     a6a:	39 e1       	ldi	r19, 0x19	; 25
     a6c:	30 83       	st	Z, r19
     a6e:	31 97       	sbiw	r30, 0x01	; 1
     a70:	30 e2       	ldi	r19, 0x20	; 32
     a72:	30 83       	st	Z, r19
     a74:	31 97       	sbiw	r30, 0x01	; 1
     a76:	31 e2       	ldi	r19, 0x21	; 33
     a78:	30 83       	st	Z, r19
     a7a:	31 97       	sbiw	r30, 0x01	; 1
     a7c:	20 83       	st	Z, r18
     a7e:	31 97       	sbiw	r30, 0x01	; 1
     a80:	23 e2       	ldi	r18, 0x23	; 35
     a82:	20 83       	st	Z, r18
     a84:	6a 01       	movw	r12, r20
     a86:	31 97       	sbiw	r30, 0x01	; 1
     a88:	40 83       	st	Z, r20
     a8a:	31 97       	sbiw	r30, 0x01	; 1
     a8c:	d0 82       	st	Z, r13
     a8e:	31 97       	sbiw	r30, 0x01	; 1
     a90:	26 e2       	ldi	r18, 0x26	; 38
     a92:	20 83       	st	Z, r18
     a94:	31 97       	sbiw	r30, 0x01	; 1
     a96:	27 e2       	ldi	r18, 0x27	; 39
     a98:	20 83       	st	Z, r18
     a9a:	31 97       	sbiw	r30, 0x01	; 1
     a9c:	28 e2       	ldi	r18, 0x28	; 40
     a9e:	20 83       	st	Z, r18
     aa0:	31 97       	sbiw	r30, 0x01	; 1
     aa2:	29 e2       	ldi	r18, 0x29	; 41
     aa4:	20 83       	st	Z, r18
     aa6:	31 97       	sbiw	r30, 0x01	; 1
     aa8:	20 e3       	ldi	r18, 0x30	; 48
     aaa:	20 83       	st	Z, r18
     aac:	88 97       	sbiw	r24, 0x28	; 40
     aae:	ff 90       	pop	r15
     ab0:	ef 90       	pop	r14
     ab2:	df 90       	pop	r13
     ab4:	cf 90       	pop	r12
     ab6:	08 95       	ret

00000ab8 <xPortStartScheduler>:
     ab8:	0e 94 bd 04 	call	0x97a	; 0x97a <prvSetupTimerInterrupt>
     abc:	a0 91 58 2c 	lds	r26, 0x2C58	; 0x802c58 <pxCurrentTCB>
     ac0:	b0 91 59 2c 	lds	r27, 0x2C59	; 0x802c59 <pxCurrentTCB+0x1>
     ac4:	0d 90       	ld	r0, X+
     ac6:	0d be       	out	0x3d, r0	; 61
     ac8:	0d 90       	ld	r0, X+
     aca:	0e be       	out	0x3e, r0	; 62
     acc:	ef 91       	pop	r30
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	bf 91       	pop	r27
     ad4:	af 91       	pop	r26
     ad6:	9f 91       	pop	r25
     ad8:	8f 91       	pop	r24
     ada:	7f 91       	pop	r23
     adc:	6f 91       	pop	r22
     ade:	5f 91       	pop	r21
     ae0:	4f 91       	pop	r20
     ae2:	3f 91       	pop	r19
     ae4:	2f 91       	pop	r18
     ae6:	1f 91       	pop	r17
     ae8:	0f 91       	pop	r16
     aea:	ff 90       	pop	r15
     aec:	ef 90       	pop	r14
     aee:	df 90       	pop	r13
     af0:	cf 90       	pop	r12
     af2:	bf 90       	pop	r11
     af4:	af 90       	pop	r10
     af6:	9f 90       	pop	r9
     af8:	8f 90       	pop	r8
     afa:	7f 90       	pop	r7
     afc:	6f 90       	pop	r6
     afe:	5f 90       	pop	r5
     b00:	4f 90       	pop	r4
     b02:	3f 90       	pop	r3
     b04:	2f 90       	pop	r2
     b06:	1f 90       	pop	r1
     b08:	0f 90       	pop	r0
     b0a:	ff 91       	pop	r31
     b0c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     b10:	ff 91       	pop	r31
     b12:	ff bf       	out	0x3f, r31	; 63
     b14:	ff 91       	pop	r31
     b16:	08 95       	ret
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	08 95       	ret

00000b1c <vPortYield>:
// 
//
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     b1c:	ff 93       	push	r31
     b1e:	ff b7       	in	r31, 0x3f	; 63
     b20:	ff 93       	push	r31
     b22:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     b26:	ff 93       	push	r31
     b28:	f8 7f       	andi	r31, 0xF8	; 248
     b2a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     b2e:	0f 92       	push	r0
     b30:	1f 92       	push	r1
     b32:	11 24       	eor	r1, r1
     b34:	2f 92       	push	r2
     b36:	3f 92       	push	r3
     b38:	4f 92       	push	r4
     b3a:	5f 92       	push	r5
     b3c:	6f 92       	push	r6
     b3e:	7f 92       	push	r7
     b40:	8f 92       	push	r8
     b42:	9f 92       	push	r9
     b44:	af 92       	push	r10
     b46:	bf 92       	push	r11
     b48:	cf 92       	push	r12
     b4a:	df 92       	push	r13
     b4c:	ef 92       	push	r14
     b4e:	ff 92       	push	r15
     b50:	0f 93       	push	r16
     b52:	1f 93       	push	r17
     b54:	2f 93       	push	r18
     b56:	3f 93       	push	r19
     b58:	4f 93       	push	r20
     b5a:	5f 93       	push	r21
     b5c:	6f 93       	push	r22
     b5e:	7f 93       	push	r23
     b60:	8f 93       	push	r24
     b62:	9f 93       	push	r25
     b64:	af 93       	push	r26
     b66:	bf 93       	push	r27
     b68:	cf 93       	push	r28
     b6a:	df 93       	push	r29
     b6c:	ef 93       	push	r30
     b6e:	a0 91 58 2c 	lds	r26, 0x2C58	; 0x802c58 <pxCurrentTCB>
     b72:	b0 91 59 2c 	lds	r27, 0x2C59	; 0x802c59 <pxCurrentTCB+0x1>
     b76:	0d b6       	in	r0, 0x3d	; 61
     b78:	0d 92       	st	X+, r0
     b7a:	0e b6       	in	r0, 0x3e	; 62
     b7c:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     b7e:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     b82:	a0 91 58 2c 	lds	r26, 0x2C58	; 0x802c58 <pxCurrentTCB>
     b86:	b0 91 59 2c 	lds	r27, 0x2C59	; 0x802c59 <pxCurrentTCB+0x1>
     b8a:	0d 90       	ld	r0, X+
     b8c:	0d be       	out	0x3d, r0	; 61
     b8e:	0d 90       	ld	r0, X+
     b90:	0e be       	out	0x3e, r0	; 62
     b92:	ef 91       	pop	r30
     b94:	df 91       	pop	r29
     b96:	cf 91       	pop	r28
     b98:	bf 91       	pop	r27
     b9a:	af 91       	pop	r26
     b9c:	9f 91       	pop	r25
     b9e:	8f 91       	pop	r24
     ba0:	7f 91       	pop	r23
     ba2:	6f 91       	pop	r22
     ba4:	5f 91       	pop	r21
     ba6:	4f 91       	pop	r20
     ba8:	3f 91       	pop	r19
     baa:	2f 91       	pop	r18
     bac:	1f 91       	pop	r17
     bae:	0f 91       	pop	r16
     bb0:	ff 90       	pop	r15
     bb2:	ef 90       	pop	r14
     bb4:	df 90       	pop	r13
     bb6:	cf 90       	pop	r12
     bb8:	bf 90       	pop	r11
     bba:	af 90       	pop	r10
     bbc:	9f 90       	pop	r9
     bbe:	8f 90       	pop	r8
     bc0:	7f 90       	pop	r7
     bc2:	6f 90       	pop	r6
     bc4:	5f 90       	pop	r5
     bc6:	4f 90       	pop	r4
     bc8:	3f 90       	pop	r3
     bca:	2f 90       	pop	r2
     bcc:	1f 90       	pop	r1
     bce:	0f 90       	pop	r0
     bd0:	ff 91       	pop	r31
     bd2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     bd6:	ff 91       	pop	r31
     bd8:	ff bf       	out	0x3f, r31	; 63
     bda:	ff 91       	pop	r31
	asm volatile ( "ret" );
     bdc:	08 95       	ret

00000bde <portTaskSwitchContext>:
	//-----------------------------------------------------------
	//
	// The task switch is deferred until there is no more nesting.
	//
	void portTaskSwitchContext(signed portBASE_TYPE xSwitchRequired)
	{
     bde:	cf 93       	push	r28
		intTaskSwitchPending |= xSwitchRequired;					
     be0:	90 91 84 2c 	lds	r25, 0x2C84	; 0x802c84 <intTaskSwitchPending>
     be4:	89 2b       	or	r24, r25
     be6:	80 93 84 2c 	sts	0x2C84, r24	; 0x802c84 <intTaskSwitchPending>
																
		if(NOT_NESTING() && intTaskSwitchPending)					
     bea:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7de0a0>
     bee:	91 30       	cpi	r25, 0x01	; 1
     bf0:	41 f0       	breq	.+16     	; 0xc02 <portTaskSwitchContext+0x24>
     bf2:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7de0a0>
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	21 f0       	breq	.+8      	; 0xc02 <portTaskSwitchContext+0x24>
     bfa:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7de0a0>
     bfe:	94 30       	cpi	r25, 0x04	; 4
     c00:	59 f4       	brne	.+22     	; 0xc18 <portTaskSwitchContext+0x3a>
     c02:	88 23       	and	r24, r24
     c04:	49 f0       	breq	.+18     	; 0xc18 <portTaskSwitchContext+0x3a>
		{															
			register unsigned portBASE_TYPE uxSavedPmicCtrlReg; 				
			extern void vTaskSwitchContext(void);   				
																
			// Critical section used, because vTaskSwitchContext handles FreeRTOS internal data structures.
 			uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR(); 
     c06:	0e 94 ce 04 	call	0x99c	; 0x99c <_portSetInterruptMaskFromIsr>
     c0a:	c8 2f       	mov	r28, r24
			intTaskSwitchPending = 0;								
     c0c:	10 92 84 2c 	sts	0x2C84, r1	; 0x802c84 <intTaskSwitchPending>
			vTaskSwitchContext();                   				
     c10:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <vTaskSwitchContext>
			portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedPmicCtrlReg);
     c14:	c0 93 a2 00 	sts	0x00A2, r28	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
		}                                          					
	}
     c18:	cf 91       	pop	r28
     c1a:	08 95       	ret

00000c1c <__vector_14>:
	// the context is saved at the start of vPortYieldFromTick().  The tick
	// count is incremented after the context is saved.
	//
	ISR(TCC0_OVF_vect, ISR_NAKED)
	{
		portSTART_ISR();
     c1c:	ff 93       	push	r31
     c1e:	ff b7       	in	r31, 0x3f	; 63
     c20:	ff 93       	push	r31
     c22:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     c26:	ff 93       	push	r31
     c28:	f8 7f       	andi	r31, 0xF8	; 248
     c2a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     c2e:	0f 92       	push	r0
     c30:	1f 92       	push	r1
     c32:	11 24       	eor	r1, r1
     c34:	2f 92       	push	r2
     c36:	3f 92       	push	r3
     c38:	4f 92       	push	r4
     c3a:	5f 92       	push	r5
     c3c:	6f 92       	push	r6
     c3e:	7f 92       	push	r7
     c40:	8f 92       	push	r8
     c42:	9f 92       	push	r9
     c44:	af 92       	push	r10
     c46:	bf 92       	push	r11
     c48:	cf 92       	push	r12
     c4a:	df 92       	push	r13
     c4c:	ef 92       	push	r14
     c4e:	ff 92       	push	r15
     c50:	0f 93       	push	r16
     c52:	1f 93       	push	r17
     c54:	2f 93       	push	r18
     c56:	3f 93       	push	r19
     c58:	4f 93       	push	r20
     c5a:	5f 93       	push	r21
     c5c:	6f 93       	push	r22
     c5e:	7f 93       	push	r23
     c60:	8f 93       	push	r24
     c62:	9f 93       	push	r25
     c64:	af 93       	push	r26
     c66:	bf 93       	push	r27
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	ef 93       	push	r30
     c6e:	a0 91 58 2c 	lds	r26, 0x2C58	; 0x802c58 <pxCurrentTCB>
     c72:	b0 91 59 2c 	lds	r27, 0x2C59	; 0x802c59 <pxCurrentTCB+0x1>
     c76:	0d b6       	in	r0, 0x3d	; 61
     c78:	0d 92       	st	X+, r0
     c7a:	0e b6       	in	r0, 0x3e	; 62
     c7c:	0d 92       	st	X+, r0
		portTaskIncrementTick();
     c7e:	0e 94 d5 04 	call	0x9aa	; 0x9aa <portTaskIncrementTick>
		//always try a task switch, but only if on kernel interrupt level
		portEND_SWITCHING_ISR(pdTRUE); 
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	0e 94 ef 05 	call	0xbde	; 0xbde <portTaskSwitchContext>
     c88:	a0 91 58 2c 	lds	r26, 0x2C58	; 0x802c58 <pxCurrentTCB>
     c8c:	b0 91 59 2c 	lds	r27, 0x2C59	; 0x802c59 <pxCurrentTCB+0x1>
     c90:	0d 90       	ld	r0, X+
     c92:	0d be       	out	0x3d, r0	; 61
     c94:	0d 90       	ld	r0, X+
     c96:	0e be       	out	0x3e, r0	; 62
     c98:	ef 91       	pop	r30
     c9a:	df 91       	pop	r29
     c9c:	cf 91       	pop	r28
     c9e:	bf 91       	pop	r27
     ca0:	af 91       	pop	r26
     ca2:	9f 91       	pop	r25
     ca4:	8f 91       	pop	r24
     ca6:	7f 91       	pop	r23
     ca8:	6f 91       	pop	r22
     caa:	5f 91       	pop	r21
     cac:	4f 91       	pop	r20
     cae:	3f 91       	pop	r19
     cb0:	2f 91       	pop	r18
     cb2:	1f 91       	pop	r17
     cb4:	0f 91       	pop	r16
     cb6:	ff 90       	pop	r15
     cb8:	ef 90       	pop	r14
     cba:	df 90       	pop	r13
     cbc:	cf 90       	pop	r12
     cbe:	bf 90       	pop	r11
     cc0:	af 90       	pop	r10
     cc2:	9f 90       	pop	r9
     cc4:	8f 90       	pop	r8
     cc6:	7f 90       	pop	r7
     cc8:	6f 90       	pop	r6
     cca:	5f 90       	pop	r5
     ccc:	4f 90       	pop	r4
     cce:	3f 90       	pop	r3
     cd0:	2f 90       	pop	r2
     cd2:	1f 90       	pop	r1
     cd4:	0f 90       	pop	r0
     cd6:	ff 91       	pop	r31
     cd8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     cdc:	ff 91       	pop	r31
     cde:	ff bf       	out	0x3f, r31	; 63
     ce0:	ff 91       	pop	r31
     ce2:	18 95       	reti

00000ce4 <prvIsQueueEmpty>:
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
     ce4:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     ce8:	ff 93       	push	r31
     cea:	f8 7f       	andi	r31, 0xF8	; 248
     cec:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     cf0:	fc 01       	movw	r30, r24
     cf2:	86 8d       	ldd	r24, Z+30	; 0x1e
     cf4:	81 11       	cpse	r24, r1
     cf6:	02 c0       	rjmp	.+4      	; 0xcfc <prvIsQueueEmpty+0x18>
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	01 c0       	rjmp	.+2      	; 0xcfe <prvIsQueueEmpty+0x1a>
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	ff 91       	pop	r31
     d00:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     d04:	08 95       	ret

00000d06 <prvIsQueueFull>:
     d06:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     d0a:	ff 93       	push	r31
     d0c:	f8 7f       	andi	r31, 0xF8	; 248
     d0e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     d12:	fc 01       	movw	r30, r24
     d14:	26 8d       	ldd	r18, Z+30	; 0x1e
     d16:	87 8d       	ldd	r24, Z+31	; 0x1f
     d18:	28 13       	cpse	r18, r24
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <prvIsQueueFull+0x1a>
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	01 c0       	rjmp	.+2      	; 0xd22 <prvIsQueueFull+0x1c>
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	ff 91       	pop	r31
     d24:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     d28:	08 95       	ret

00000d2a <prvCopyDataToQueue>:
     d2a:	0f 93       	push	r16
     d2c:	1f 93       	push	r17
     d2e:	cf 93       	push	r28
     d30:	df 93       	push	r29
     d32:	ec 01       	movw	r28, r24
     d34:	04 2f       	mov	r16, r20
     d36:	1e 8d       	ldd	r17, Y+30	; 0x1e
     d38:	48 a1       	ldd	r20, Y+32	; 0x20
     d3a:	44 23       	and	r20, r20
     d3c:	b9 f1       	breq	.+110    	; 0xdac <prvCopyDataToQueue+0x82>
     d3e:	01 11       	cpse	r16, r1
     d40:	16 c0       	rjmp	.+44     	; 0xd6e <prvCopyDataToQueue+0x44>
     d42:	50 e0       	ldi	r21, 0x00	; 0
     d44:	8c 81       	ldd	r24, Y+4	; 0x04
     d46:	9d 81       	ldd	r25, Y+5	; 0x05
     d48:	0e 94 92 17 	call	0x2f24	; 0x2f24 <memcpy>
     d4c:	28 a1       	ldd	r18, Y+32	; 0x20
     d4e:	8c 81       	ldd	r24, Y+4	; 0x04
     d50:	9d 81       	ldd	r25, Y+5	; 0x05
     d52:	82 0f       	add	r24, r18
     d54:	91 1d       	adc	r25, r1
     d56:	8c 83       	std	Y+4, r24	; 0x04
     d58:	9d 83       	std	Y+5, r25	; 0x05
     d5a:	2a 81       	ldd	r18, Y+2	; 0x02
     d5c:	3b 81       	ldd	r19, Y+3	; 0x03
     d5e:	82 17       	cp	r24, r18
     d60:	93 07       	cpc	r25, r19
     d62:	20 f1       	brcs	.+72     	; 0xdac <prvCopyDataToQueue+0x82>
     d64:	88 81       	ld	r24, Y
     d66:	99 81       	ldd	r25, Y+1	; 0x01
     d68:	8c 83       	std	Y+4, r24	; 0x04
     d6a:	9d 83       	std	Y+5, r25	; 0x05
     d6c:	1f c0       	rjmp	.+62     	; 0xdac <prvCopyDataToQueue+0x82>
     d6e:	50 e0       	ldi	r21, 0x00	; 0
     d70:	8e 81       	ldd	r24, Y+6	; 0x06
     d72:	9f 81       	ldd	r25, Y+7	; 0x07
     d74:	0e 94 92 17 	call	0x2f24	; 0x2f24 <memcpy>
     d78:	88 a1       	ldd	r24, Y+32	; 0x20
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	91 95       	neg	r25
     d7e:	81 95       	neg	r24
     d80:	91 09       	sbc	r25, r1
     d82:	2e 81       	ldd	r18, Y+6	; 0x06
     d84:	3f 81       	ldd	r19, Y+7	; 0x07
     d86:	28 0f       	add	r18, r24
     d88:	39 1f       	adc	r19, r25
     d8a:	2e 83       	std	Y+6, r18	; 0x06
     d8c:	3f 83       	std	Y+7, r19	; 0x07
     d8e:	48 81       	ld	r20, Y
     d90:	59 81       	ldd	r21, Y+1	; 0x01
     d92:	24 17       	cp	r18, r20
     d94:	35 07       	cpc	r19, r21
     d96:	30 f4       	brcc	.+12     	; 0xda4 <prvCopyDataToQueue+0x7a>
     d98:	2a 81       	ldd	r18, Y+2	; 0x02
     d9a:	3b 81       	ldd	r19, Y+3	; 0x03
     d9c:	82 0f       	add	r24, r18
     d9e:	93 1f       	adc	r25, r19
     da0:	8e 83       	std	Y+6, r24	; 0x06
     da2:	9f 83       	std	Y+7, r25	; 0x07
     da4:	02 30       	cpi	r16, 0x02	; 2
     da6:	11 f4       	brne	.+4      	; 0xdac <prvCopyDataToQueue+0x82>
     da8:	11 11       	cpse	r17, r1
     daa:	11 50       	subi	r17, 0x01	; 1
     dac:	1f 5f       	subi	r17, 0xFF	; 255
     dae:	1e 8f       	std	Y+30, r17	; 0x1e
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	df 91       	pop	r29
     db4:	cf 91       	pop	r28
     db6:	1f 91       	pop	r17
     db8:	0f 91       	pop	r16
     dba:	08 95       	ret

00000dbc <prvCopyDataFromQueue>:
     dbc:	fc 01       	movw	r30, r24
     dbe:	40 a1       	ldd	r20, Z+32	; 0x20
     dc0:	44 23       	and	r20, r20
     dc2:	a9 f0       	breq	.+42     	; 0xdee <prvCopyDataFromQueue+0x32>
     dc4:	50 e0       	ldi	r21, 0x00	; 0
     dc6:	26 81       	ldd	r18, Z+6	; 0x06
     dc8:	37 81       	ldd	r19, Z+7	; 0x07
     dca:	24 0f       	add	r18, r20
     dcc:	35 1f       	adc	r19, r21
     dce:	26 83       	std	Z+6, r18	; 0x06
     dd0:	37 83       	std	Z+7, r19	; 0x07
     dd2:	82 81       	ldd	r24, Z+2	; 0x02
     dd4:	93 81       	ldd	r25, Z+3	; 0x03
     dd6:	28 17       	cp	r18, r24
     dd8:	39 07       	cpc	r19, r25
     dda:	20 f0       	brcs	.+8      	; 0xde4 <prvCopyDataFromQueue+0x28>
     ddc:	80 81       	ld	r24, Z
     dde:	91 81       	ldd	r25, Z+1	; 0x01
     de0:	86 83       	std	Z+6, r24	; 0x06
     de2:	97 83       	std	Z+7, r25	; 0x07
     de4:	cb 01       	movw	r24, r22
     de6:	66 81       	ldd	r22, Z+6	; 0x06
     de8:	77 81       	ldd	r23, Z+7	; 0x07
     dea:	0e 94 92 17 	call	0x2f24	; 0x2f24 <memcpy>
     dee:	08 95       	ret

00000df0 <prvUnlockQueue>:
     df0:	1f 93       	push	r17
     df2:	cf 93       	push	r28
     df4:	df 93       	push	r29
     df6:	ec 01       	movw	r28, r24
     df8:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     dfc:	ff 93       	push	r31
     dfe:	f8 7f       	andi	r31, 0xF8	; 248
     e00:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     e04:	1a a1       	ldd	r17, Y+34	; 0x22
     e06:	0b c0       	rjmp	.+22     	; 0xe1e <prvUnlockQueue+0x2e>
     e08:	8b 89       	ldd	r24, Y+19	; 0x13
     e0a:	88 23       	and	r24, r24
     e0c:	51 f0       	breq	.+20     	; 0xe22 <prvUnlockQueue+0x32>
     e0e:	ce 01       	movw	r24, r28
     e10:	43 96       	adiw	r24, 0x13	; 19
     e12:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <xTaskRemoveFromEventList>
     e16:	81 11       	cpse	r24, r1
     e18:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <vTaskMissedYield>
     e1c:	11 50       	subi	r17, 0x01	; 1
     e1e:	11 16       	cp	r1, r17
     e20:	9c f3       	brlt	.-26     	; 0xe08 <prvUnlockQueue+0x18>
     e22:	8f ef       	ldi	r24, 0xFF	; 255
     e24:	8a a3       	std	Y+34, r24	; 0x22
     e26:	ff 91       	pop	r31
     e28:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     e2c:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     e30:	ff 93       	push	r31
     e32:	f8 7f       	andi	r31, 0xF8	; 248
     e34:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     e38:	19 a1       	ldd	r17, Y+33	; 0x21
     e3a:	0b c0       	rjmp	.+22     	; 0xe52 <prvUnlockQueue+0x62>
     e3c:	88 85       	ldd	r24, Y+8	; 0x08
     e3e:	88 23       	and	r24, r24
     e40:	51 f0       	breq	.+20     	; 0xe56 <prvUnlockQueue+0x66>
     e42:	ce 01       	movw	r24, r28
     e44:	08 96       	adiw	r24, 0x08	; 8
     e46:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <xTaskRemoveFromEventList>
     e4a:	81 11       	cpse	r24, r1
     e4c:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <vTaskMissedYield>
     e50:	11 50       	subi	r17, 0x01	; 1
     e52:	11 16       	cp	r1, r17
     e54:	9c f3       	brlt	.-26     	; 0xe3c <prvUnlockQueue+0x4c>
     e56:	8f ef       	ldi	r24, 0xFF	; 255
     e58:	89 a3       	std	Y+33, r24	; 0x21
     e5a:	ff 91       	pop	r31
     e5c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     e60:	df 91       	pop	r29
     e62:	cf 91       	pop	r28
     e64:	1f 91       	pop	r17
     e66:	08 95       	ret

00000e68 <xQueueGenericReset>:
     e68:	cf 93       	push	r28
     e6a:	df 93       	push	r29
     e6c:	ec 01       	movw	r28, r24
     e6e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     e72:	ff 93       	push	r31
     e74:	f8 7f       	andi	r31, 0xF8	; 248
     e76:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     e7a:	e8 81       	ld	r30, Y
     e7c:	f9 81       	ldd	r31, Y+1	; 0x01
     e7e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	28 a1       	ldd	r18, Y+32	; 0x20
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	82 9f       	mul	r24, r18
     e88:	a0 01       	movw	r20, r0
     e8a:	83 9f       	mul	r24, r19
     e8c:	50 0d       	add	r21, r0
     e8e:	92 9f       	mul	r25, r18
     e90:	50 0d       	add	r21, r0
     e92:	11 24       	eor	r1, r1
     e94:	4e 0f       	add	r20, r30
     e96:	5f 1f       	adc	r21, r31
     e98:	4a 83       	std	Y+2, r20	; 0x02
     e9a:	5b 83       	std	Y+3, r21	; 0x03
     e9c:	1e 8e       	std	Y+30, r1	; 0x1e
     e9e:	ec 83       	std	Y+4, r30	; 0x04
     ea0:	fd 83       	std	Y+5, r31	; 0x05
     ea2:	01 97       	sbiw	r24, 0x01	; 1
     ea4:	28 9f       	mul	r18, r24
     ea6:	a0 01       	movw	r20, r0
     ea8:	29 9f       	mul	r18, r25
     eaa:	50 0d       	add	r21, r0
     eac:	38 9f       	mul	r19, r24
     eae:	50 0d       	add	r21, r0
     eb0:	11 24       	eor	r1, r1
     eb2:	cf 01       	movw	r24, r30
     eb4:	84 0f       	add	r24, r20
     eb6:	95 1f       	adc	r25, r21
     eb8:	8e 83       	std	Y+6, r24	; 0x06
     eba:	9f 83       	std	Y+7, r25	; 0x07
     ebc:	8f ef       	ldi	r24, 0xFF	; 255
     ebe:	89 a3       	std	Y+33, r24	; 0x21
     ec0:	8a a3       	std	Y+34, r24	; 0x22
     ec2:	61 11       	cpse	r22, r1
     ec4:	0c c0       	rjmp	.+24     	; 0xede <xQueueGenericReset+0x76>
     ec6:	88 85       	ldd	r24, Y+8	; 0x08
     ec8:	88 23       	and	r24, r24
     eca:	89 f0       	breq	.+34     	; 0xeee <xQueueGenericReset+0x86>
     ecc:	ce 01       	movw	r24, r28
     ece:	08 96       	adiw	r24, 0x08	; 8
     ed0:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <xTaskRemoveFromEventList>
     ed4:	88 23       	and	r24, r24
     ed6:	59 f0       	breq	.+22     	; 0xeee <xQueueGenericReset+0x86>
     ed8:	0e 94 8e 05 	call	0xb1c	; 0xb1c <vPortYield>
     edc:	08 c0       	rjmp	.+16     	; 0xeee <xQueueGenericReset+0x86>
     ede:	ce 01       	movw	r24, r28
     ee0:	08 96       	adiw	r24, 0x08	; 8
     ee2:	0e 94 23 04 	call	0x846	; 0x846 <vListInitialise>
     ee6:	ce 01       	movw	r24, r28
     ee8:	43 96       	adiw	r24, 0x13	; 19
     eea:	0e 94 23 04 	call	0x846	; 0x846 <vListInitialise>
     eee:	ff 91       	pop	r31
     ef0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	08 95       	ret

00000efc <prvInitialiseNewQueue>:
     efc:	ff 92       	push	r15
     efe:	0f 93       	push	r16
     f00:	1f 93       	push	r17
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	f2 2e       	mov	r15, r18
     f08:	e8 01       	movw	r28, r16
     f0a:	61 11       	cpse	r22, r1
     f0c:	03 c0       	rjmp	.+6      	; 0xf14 <prvInitialiseNewQueue+0x18>
     f0e:	08 83       	st	Y, r16
     f10:	19 83       	std	Y+1, r17	; 0x01
     f12:	02 c0       	rjmp	.+4      	; 0xf18 <prvInitialiseNewQueue+0x1c>
     f14:	48 83       	st	Y, r20
     f16:	59 83       	std	Y+1, r21	; 0x01
     f18:	8f 8f       	std	Y+31, r24	; 0x1f
     f1a:	68 a3       	std	Y+32, r22	; 0x20
     f1c:	61 e0       	ldi	r22, 0x01	; 1
     f1e:	ce 01       	movw	r24, r28
     f20:	0e 94 34 07 	call	0xe68	; 0xe68 <xQueueGenericReset>
     f24:	fc a2       	std	Y+36, r15	; 0x24
     f26:	df 91       	pop	r29
     f28:	cf 91       	pop	r28
     f2a:	1f 91       	pop	r17
     f2c:	0f 91       	pop	r16
     f2e:	ff 90       	pop	r15
     f30:	08 95       	ret

00000f32 <xQueueGenericCreate>:
     f32:	df 92       	push	r13
     f34:	ef 92       	push	r14
     f36:	ff 92       	push	r15
     f38:	0f 93       	push	r16
     f3a:	1f 93       	push	r17
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	e8 2e       	mov	r14, r24
     f42:	f6 2e       	mov	r15, r22
     f44:	d4 2e       	mov	r13, r20
     f46:	66 23       	and	r22, r22
     f48:	21 f0       	breq	.+8      	; 0xf52 <xQueueGenericCreate+0x20>
     f4a:	86 9f       	mul	r24, r22
     f4c:	c0 01       	movw	r24, r0
     f4e:	11 24       	eor	r1, r1
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <xQueueGenericCreate+0x24>
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	85 96       	adiw	r24, 0x25	; 37
     f58:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <pvPortMalloc>
     f5c:	ec 01       	movw	r28, r24
     f5e:	00 97       	sbiw	r24, 0x00	; 0
     f60:	49 f0       	breq	.+18     	; 0xf74 <xQueueGenericCreate+0x42>
     f62:	8c 01       	movw	r16, r24
     f64:	2d 2d       	mov	r18, r13
     f66:	ac 01       	movw	r20, r24
     f68:	4b 5d       	subi	r20, 0xDB	; 219
     f6a:	5f 4f       	sbci	r21, 0xFF	; 255
     f6c:	6f 2d       	mov	r22, r15
     f6e:	8e 2d       	mov	r24, r14
     f70:	0e 94 7e 07 	call	0xefc	; 0xefc <prvInitialiseNewQueue>
     f74:	ce 01       	movw	r24, r28
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	1f 91       	pop	r17
     f7c:	0f 91       	pop	r16
     f7e:	ff 90       	pop	r15
     f80:	ef 90       	pop	r14
     f82:	df 90       	pop	r13
     f84:	08 95       	ret

00000f86 <xQueueGenericSend>:
     f86:	cf 92       	push	r12
     f88:	df 92       	push	r13
     f8a:	ef 92       	push	r14
     f8c:	ff 92       	push	r15
     f8e:	0f 93       	push	r16
     f90:	1f 93       	push	r17
     f92:	cf 93       	push	r28
     f94:	df 93       	push	r29
     f96:	cd b7       	in	r28, 0x3d	; 61
     f98:	de b7       	in	r29, 0x3e	; 62
     f9a:	29 97       	sbiw	r28, 0x09	; 9
     f9c:	cd bf       	out	0x3d, r28	; 61
     f9e:	de bf       	out	0x3e, r29	; 62
     fa0:	7c 01       	movw	r14, r24
     fa2:	6b 01       	movw	r12, r22
     fa4:	2e 83       	std	Y+6, r18	; 0x06
     fa6:	3f 83       	std	Y+7, r19	; 0x07
     fa8:	48 87       	std	Y+8, r20	; 0x08
     faa:	59 87       	std	Y+9, r21	; 0x09
     fac:	10 e0       	ldi	r17, 0x00	; 0
     fae:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     fb2:	ff 93       	push	r31
     fb4:	f8 7f       	andi	r31, 0xF8	; 248
     fb6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     fba:	f7 01       	movw	r30, r14
     fbc:	96 8d       	ldd	r25, Z+30	; 0x1e
     fbe:	87 8d       	ldd	r24, Z+31	; 0x1f
     fc0:	98 17       	cp	r25, r24
     fc2:	10 f0       	brcs	.+4      	; 0xfc8 <xQueueGenericSend+0x42>
     fc4:	02 30       	cpi	r16, 0x02	; 2
     fc6:	d1 f4       	brne	.+52     	; 0xffc <xQueueGenericSend+0x76>
     fc8:	40 2f       	mov	r20, r16
     fca:	b6 01       	movw	r22, r12
     fcc:	c7 01       	movw	r24, r14
     fce:	0e 94 95 06 	call	0xd2a	; 0xd2a <prvCopyDataToQueue>
     fd2:	f7 01       	movw	r30, r14
     fd4:	93 89       	ldd	r25, Z+19	; 0x13
     fd6:	99 23       	and	r25, r25
     fd8:	49 f0       	breq	.+18     	; 0xfec <xQueueGenericSend+0x66>
     fda:	c7 01       	movw	r24, r14
     fdc:	43 96       	adiw	r24, 0x13	; 19
     fde:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <xTaskRemoveFromEventList>
     fe2:	88 23       	and	r24, r24
     fe4:	31 f0       	breq	.+12     	; 0xff2 <xQueueGenericSend+0x6c>
     fe6:	0e 94 8e 05 	call	0xb1c	; 0xb1c <vPortYield>
     fea:	03 c0       	rjmp	.+6      	; 0xff2 <xQueueGenericSend+0x6c>
     fec:	81 11       	cpse	r24, r1
     fee:	0e 94 8e 05 	call	0xb1c	; 0xb1c <vPortYield>
     ff2:	ff 91       	pop	r31
     ff4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	58 c0       	rjmp	.+176    	; 0x10ac <xQueueGenericSend+0x126>
     ffc:	8e 81       	ldd	r24, Y+6	; 0x06
     ffe:	9f 81       	ldd	r25, Y+7	; 0x07
    1000:	a8 85       	ldd	r26, Y+8	; 0x08
    1002:	b9 85       	ldd	r27, Y+9	; 0x09
    1004:	89 2b       	or	r24, r25
    1006:	8a 2b       	or	r24, r26
    1008:	8b 2b       	or	r24, r27
    100a:	29 f4       	brne	.+10     	; 0x1016 <xQueueGenericSend+0x90>
    100c:	ff 91       	pop	r31
    100e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	4b c0       	rjmp	.+150    	; 0x10ac <xQueueGenericSend+0x126>
    1016:	11 11       	cpse	r17, r1
    1018:	05 c0       	rjmp	.+10     	; 0x1024 <xQueueGenericSend+0x9e>
    101a:	ce 01       	movw	r24, r28
    101c:	01 96       	adiw	r24, 0x01	; 1
    101e:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <vTaskInternalSetTimeOutState>
    1022:	11 e0       	ldi	r17, 0x01	; 1
    1024:	ff 91       	pop	r31
    1026:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    102a:	0e 94 b6 0b 	call	0x176c	; 0x176c <vTaskSuspendAll>
    102e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1032:	ff 93       	push	r31
    1034:	f8 7f       	andi	r31, 0xF8	; 248
    1036:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    103a:	f7 01       	movw	r30, r14
    103c:	81 a1       	ldd	r24, Z+33	; 0x21
    103e:	8f 3f       	cpi	r24, 0xFF	; 255
    1040:	09 f4       	brne	.+2      	; 0x1044 <xQueueGenericSend+0xbe>
    1042:	11 a2       	std	Z+33, r1	; 0x21
    1044:	f7 01       	movw	r30, r14
    1046:	82 a1       	ldd	r24, Z+34	; 0x22
    1048:	8f 3f       	cpi	r24, 0xFF	; 255
    104a:	09 f4       	brne	.+2      	; 0x104e <xQueueGenericSend+0xc8>
    104c:	12 a2       	std	Z+34, r1	; 0x22
    104e:	ff 91       	pop	r31
    1050:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1054:	be 01       	movw	r22, r28
    1056:	6a 5f       	subi	r22, 0xFA	; 250
    1058:	7f 4f       	sbci	r23, 0xFF	; 255
    105a:	ce 01       	movw	r24, r28
    105c:	01 96       	adiw	r24, 0x01	; 1
    105e:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <xTaskCheckForTimeOut>
    1062:	81 11       	cpse	r24, r1
    1064:	1d c0       	rjmp	.+58     	; 0x10a0 <xQueueGenericSend+0x11a>
    1066:	c7 01       	movw	r24, r14
    1068:	0e 94 83 06 	call	0xd06	; 0xd06 <prvIsQueueFull>
    106c:	88 23       	and	r24, r24
    106e:	91 f0       	breq	.+36     	; 0x1094 <xQueueGenericSend+0x10e>
    1070:	4e 81       	ldd	r20, Y+6	; 0x06
    1072:	5f 81       	ldd	r21, Y+7	; 0x07
    1074:	68 85       	ldd	r22, Y+8	; 0x08
    1076:	79 85       	ldd	r23, Y+9	; 0x09
    1078:	c7 01       	movw	r24, r14
    107a:	08 96       	adiw	r24, 0x08	; 8
    107c:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <vTaskPlaceOnEventList>
    1080:	c7 01       	movw	r24, r14
    1082:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <prvUnlockQueue>
    1086:	0e 94 9e 0c 	call	0x193c	; 0x193c <xTaskResumeAll>
    108a:	81 11       	cpse	r24, r1
    108c:	90 cf       	rjmp	.-224    	; 0xfae <xQueueGenericSend+0x28>
    108e:	0e 94 8e 05 	call	0xb1c	; 0xb1c <vPortYield>
    1092:	8d cf       	rjmp	.-230    	; 0xfae <xQueueGenericSend+0x28>
    1094:	c7 01       	movw	r24, r14
    1096:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <prvUnlockQueue>
    109a:	0e 94 9e 0c 	call	0x193c	; 0x193c <xTaskResumeAll>
    109e:	87 cf       	rjmp	.-242    	; 0xfae <xQueueGenericSend+0x28>
    10a0:	c7 01       	movw	r24, r14
    10a2:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <prvUnlockQueue>
    10a6:	0e 94 9e 0c 	call	0x193c	; 0x193c <xTaskResumeAll>
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	29 96       	adiw	r28, 0x09	; 9
    10ae:	cd bf       	out	0x3d, r28	; 61
    10b0:	de bf       	out	0x3e, r29	; 62
    10b2:	df 91       	pop	r29
    10b4:	cf 91       	pop	r28
    10b6:	1f 91       	pop	r17
    10b8:	0f 91       	pop	r16
    10ba:	ff 90       	pop	r15
    10bc:	ef 90       	pop	r14
    10be:	df 90       	pop	r13
    10c0:	cf 90       	pop	r12
    10c2:	08 95       	ret

000010c4 <xQueueGenericSendFromISR>:
    10c4:	af 92       	push	r10
    10c6:	bf 92       	push	r11
    10c8:	cf 92       	push	r12
    10ca:	df 92       	push	r13
    10cc:	ff 92       	push	r15
    10ce:	0f 93       	push	r16
    10d0:	1f 93       	push	r17
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
    10d6:	ec 01       	movw	r28, r24
    10d8:	6b 01       	movw	r12, r22
    10da:	5a 01       	movw	r10, r20
    10dc:	02 2f       	mov	r16, r18
    10de:	0e 94 ce 04 	call	0x99c	; 0x99c <_portSetInterruptMaskFromIsr>
    10e2:	f8 2e       	mov	r15, r24
    10e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10e8:	98 17       	cp	r25, r24
    10ea:	10 f0       	brcs	.+4      	; 0x10f0 <xQueueGenericSendFromISR+0x2c>
    10ec:	02 30       	cpi	r16, 0x02	; 2
    10ee:	e1 f4       	brne	.+56     	; 0x1128 <xQueueGenericSendFromISR+0x64>
    10f0:	1a a1       	ldd	r17, Y+34	; 0x22
    10f2:	40 2f       	mov	r20, r16
    10f4:	b6 01       	movw	r22, r12
    10f6:	ce 01       	movw	r24, r28
    10f8:	0e 94 95 06 	call	0xd2a	; 0xd2a <prvCopyDataToQueue>
    10fc:	1f 3f       	cpi	r17, 0xFF	; 255
    10fe:	81 f4       	brne	.+32     	; 0x1120 <xQueueGenericSendFromISR+0x5c>
    1100:	8b 89       	ldd	r24, Y+19	; 0x13
    1102:	88 23       	and	r24, r24
    1104:	99 f0       	breq	.+38     	; 0x112c <xQueueGenericSendFromISR+0x68>
    1106:	ce 01       	movw	r24, r28
    1108:	43 96       	adiw	r24, 0x13	; 19
    110a:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <xTaskRemoveFromEventList>
    110e:	88 23       	and	r24, r24
    1110:	79 f0       	breq	.+30     	; 0x1130 <xQueueGenericSendFromISR+0x6c>
    1112:	a1 14       	cp	r10, r1
    1114:	b1 04       	cpc	r11, r1
    1116:	71 f0       	breq	.+28     	; 0x1134 <xQueueGenericSendFromISR+0x70>
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	f5 01       	movw	r30, r10
    111c:	80 83       	st	Z, r24
    111e:	0b c0       	rjmp	.+22     	; 0x1136 <xQueueGenericSendFromISR+0x72>
    1120:	1f 5f       	subi	r17, 0xFF	; 255
    1122:	1a a3       	std	Y+34, r17	; 0x22
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	07 c0       	rjmp	.+14     	; 0x1136 <xQueueGenericSendFromISR+0x72>
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	05 c0       	rjmp	.+10     	; 0x1136 <xQueueGenericSendFromISR+0x72>
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	03 c0       	rjmp	.+6      	; 0x1136 <xQueueGenericSendFromISR+0x72>
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	01 c0       	rjmp	.+2      	; 0x1136 <xQueueGenericSendFromISR+0x72>
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	f0 92 a2 00 	sts	0x00A2, r15	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	1f 91       	pop	r17
    1140:	0f 91       	pop	r16
    1142:	ff 90       	pop	r15
    1144:	df 90       	pop	r13
    1146:	cf 90       	pop	r12
    1148:	bf 90       	pop	r11
    114a:	af 90       	pop	r10
    114c:	08 95       	ret

0000114e <xQueueReceive>:
    114e:	cf 92       	push	r12
    1150:	df 92       	push	r13
    1152:	ef 92       	push	r14
    1154:	ff 92       	push	r15
    1156:	0f 93       	push	r16
    1158:	1f 93       	push	r17
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
    1162:	29 97       	sbiw	r28, 0x09	; 9
    1164:	cd bf       	out	0x3d, r28	; 61
    1166:	de bf       	out	0x3e, r29	; 62
    1168:	8c 01       	movw	r16, r24
    116a:	6b 01       	movw	r12, r22
    116c:	2e 83       	std	Y+6, r18	; 0x06
    116e:	3f 83       	std	Y+7, r19	; 0x07
    1170:	48 87       	std	Y+8, r20	; 0x08
    1172:	59 87       	std	Y+9, r21	; 0x09
    1174:	e1 2c       	mov	r14, r1
    1176:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    117a:	ff 93       	push	r31
    117c:	f8 7f       	andi	r31, 0xF8	; 248
    117e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1182:	f8 01       	movw	r30, r16
    1184:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1186:	ff 20       	and	r15, r15
    1188:	b1 f0       	breq	.+44     	; 0x11b6 <xQueueReceive+0x68>
    118a:	b6 01       	movw	r22, r12
    118c:	c8 01       	movw	r24, r16
    118e:	0e 94 de 06 	call	0xdbc	; 0xdbc <prvCopyDataFromQueue>
    1192:	fa 94       	dec	r15
    1194:	f8 01       	movw	r30, r16
    1196:	f6 8e       	std	Z+30, r15	; 0x1e
    1198:	80 85       	ldd	r24, Z+8	; 0x08
    119a:	88 23       	and	r24, r24
    119c:	39 f0       	breq	.+14     	; 0x11ac <xQueueReceive+0x5e>
    119e:	c8 01       	movw	r24, r16
    11a0:	08 96       	adiw	r24, 0x08	; 8
    11a2:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <xTaskRemoveFromEventList>
    11a6:	81 11       	cpse	r24, r1
    11a8:	0e 94 8e 05 	call	0xb1c	; 0xb1c <vPortYield>
    11ac:	ff 91       	pop	r31
    11ae:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	5f c0       	rjmp	.+190    	; 0x1274 <xQueueReceive+0x126>
    11b6:	8e 81       	ldd	r24, Y+6	; 0x06
    11b8:	9f 81       	ldd	r25, Y+7	; 0x07
    11ba:	a8 85       	ldd	r26, Y+8	; 0x08
    11bc:	b9 85       	ldd	r27, Y+9	; 0x09
    11be:	89 2b       	or	r24, r25
    11c0:	8a 2b       	or	r24, r26
    11c2:	8b 2b       	or	r24, r27
    11c4:	29 f4       	brne	.+10     	; 0x11d0 <xQueueReceive+0x82>
    11c6:	ff 91       	pop	r31
    11c8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	52 c0       	rjmp	.+164    	; 0x1274 <xQueueReceive+0x126>
    11d0:	e1 10       	cpse	r14, r1
    11d2:	06 c0       	rjmp	.+12     	; 0x11e0 <xQueueReceive+0x92>
    11d4:	ce 01       	movw	r24, r28
    11d6:	01 96       	adiw	r24, 0x01	; 1
    11d8:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <vTaskInternalSetTimeOutState>
    11dc:	ee 24       	eor	r14, r14
    11de:	e3 94       	inc	r14
    11e0:	ff 91       	pop	r31
    11e2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    11e6:	0e 94 b6 0b 	call	0x176c	; 0x176c <vTaskSuspendAll>
    11ea:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    11ee:	ff 93       	push	r31
    11f0:	f8 7f       	andi	r31, 0xF8	; 248
    11f2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    11f6:	f8 01       	movw	r30, r16
    11f8:	81 a1       	ldd	r24, Z+33	; 0x21
    11fa:	8f 3f       	cpi	r24, 0xFF	; 255
    11fc:	09 f4       	brne	.+2      	; 0x1200 <xQueueReceive+0xb2>
    11fe:	11 a2       	std	Z+33, r1	; 0x21
    1200:	f8 01       	movw	r30, r16
    1202:	82 a1       	ldd	r24, Z+34	; 0x22
    1204:	8f 3f       	cpi	r24, 0xFF	; 255
    1206:	09 f4       	brne	.+2      	; 0x120a <xQueueReceive+0xbc>
    1208:	12 a2       	std	Z+34, r1	; 0x22
    120a:	ff 91       	pop	r31
    120c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1210:	be 01       	movw	r22, r28
    1212:	6a 5f       	subi	r22, 0xFA	; 250
    1214:	7f 4f       	sbci	r23, 0xFF	; 255
    1216:	ce 01       	movw	r24, r28
    1218:	01 96       	adiw	r24, 0x01	; 1
    121a:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <xTaskCheckForTimeOut>
    121e:	81 11       	cpse	r24, r1
    1220:	1d c0       	rjmp	.+58     	; 0x125c <xQueueReceive+0x10e>
    1222:	c8 01       	movw	r24, r16
    1224:	0e 94 72 06 	call	0xce4	; 0xce4 <prvIsQueueEmpty>
    1228:	88 23       	and	r24, r24
    122a:	91 f0       	breq	.+36     	; 0x1250 <xQueueReceive+0x102>
    122c:	4e 81       	ldd	r20, Y+6	; 0x06
    122e:	5f 81       	ldd	r21, Y+7	; 0x07
    1230:	68 85       	ldd	r22, Y+8	; 0x08
    1232:	79 85       	ldd	r23, Y+9	; 0x09
    1234:	c8 01       	movw	r24, r16
    1236:	43 96       	adiw	r24, 0x13	; 19
    1238:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <vTaskPlaceOnEventList>
    123c:	c8 01       	movw	r24, r16
    123e:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <prvUnlockQueue>
    1242:	0e 94 9e 0c 	call	0x193c	; 0x193c <xTaskResumeAll>
    1246:	81 11       	cpse	r24, r1
    1248:	96 cf       	rjmp	.-212    	; 0x1176 <xQueueReceive+0x28>
    124a:	0e 94 8e 05 	call	0xb1c	; 0xb1c <vPortYield>
    124e:	93 cf       	rjmp	.-218    	; 0x1176 <xQueueReceive+0x28>
    1250:	c8 01       	movw	r24, r16
    1252:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <prvUnlockQueue>
    1256:	0e 94 9e 0c 	call	0x193c	; 0x193c <xTaskResumeAll>
    125a:	8d cf       	rjmp	.-230    	; 0x1176 <xQueueReceive+0x28>
    125c:	c8 01       	movw	r24, r16
    125e:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <prvUnlockQueue>
    1262:	0e 94 9e 0c 	call	0x193c	; 0x193c <xTaskResumeAll>
    1266:	c8 01       	movw	r24, r16
    1268:	0e 94 72 06 	call	0xce4	; 0xce4 <prvIsQueueEmpty>
    126c:	88 23       	and	r24, r24
    126e:	09 f4       	brne	.+2      	; 0x1272 <xQueueReceive+0x124>
    1270:	82 cf       	rjmp	.-252    	; 0x1176 <xQueueReceive+0x28>
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	29 96       	adiw	r28, 0x09	; 9
    1276:	cd bf       	out	0x3d, r28	; 61
    1278:	de bf       	out	0x3e, r29	; 62
    127a:	df 91       	pop	r29
    127c:	cf 91       	pop	r28
    127e:	1f 91       	pop	r17
    1280:	0f 91       	pop	r16
    1282:	ff 90       	pop	r15
    1284:	ef 90       	pop	r14
    1286:	df 90       	pop	r13
    1288:	cf 90       	pop	r12
    128a:	08 95       	ret

0000128c <uxQueueMessagesWaiting>:
    128c:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1290:	ff 93       	push	r31
    1292:	f8 7f       	andi	r31, 0xF8	; 248
    1294:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1298:	fc 01       	movw	r30, r24
    129a:	86 8d       	ldd	r24, Z+30	; 0x1e
    129c:	ff 91       	pop	r31
    129e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    12a2:	08 95       	ret

000012a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    12a4:	cf 93       	push	r28
    12a6:	df 93       	push	r29
    12a8:	ec 01       	movw	r28, r24
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    12aa:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    12ae:	ff 93       	push	r31
    12b0:	f8 7f       	andi	r31, 0xF8	; 248
    12b2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    12b6:	89 a1       	ldd	r24, Y+33	; 0x21
    12b8:	8f 3f       	cpi	r24, 0xFF	; 255
    12ba:	09 f4       	brne	.+2      	; 0x12be <vQueueWaitForMessageRestricted+0x1a>
    12bc:	19 a2       	std	Y+33, r1	; 0x21
    12be:	8a a1       	ldd	r24, Y+34	; 0x22
    12c0:	8f 3f       	cpi	r24, 0xFF	; 255
    12c2:	09 f4       	brne	.+2      	; 0x12c6 <vQueueWaitForMessageRestricted+0x22>
    12c4:	1a a2       	std	Y+34, r1	; 0x22
    12c6:	ff 91       	pop	r31
    12c8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    12cc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12ce:	81 11       	cpse	r24, r1
    12d0:	04 c0       	rjmp	.+8      	; 0x12da <vQueueWaitForMessageRestricted+0x36>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    12d2:	ce 01       	movw	r24, r28
    12d4:	43 96       	adiw	r24, 0x13	; 19
    12d6:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    12da:	ce 01       	movw	r24, r28
    12dc:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <prvUnlockQueue>
	}
    12e0:	df 91       	pop	r29
    12e2:	cf 91       	pop	r28
    12e4:	08 95       	ret

000012e6 <prvResetNextTaskUnblockTime>:
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;

		return xReturn;
	}
    12e6:	e0 91 14 2c 	lds	r30, 0x2C14	; 0x802c14 <pxDelayedTaskList>
    12ea:	f0 91 15 2c 	lds	r31, 0x2C15	; 0x802c15 <pxDelayedTaskList+0x1>
    12ee:	80 81       	ld	r24, Z
    12f0:	81 11       	cpse	r24, r1
    12f2:	0c c0       	rjmp	.+24     	; 0x130c <prvResetNextTaskUnblockTime+0x26>
    12f4:	8f ef       	ldi	r24, 0xFF	; 255
    12f6:	9f ef       	ldi	r25, 0xFF	; 255
    12f8:	dc 01       	movw	r26, r24
    12fa:	80 93 ed 2b 	sts	0x2BED, r24	; 0x802bed <xNextTaskUnblockTime>
    12fe:	90 93 ee 2b 	sts	0x2BEE, r25	; 0x802bee <xNextTaskUnblockTime+0x1>
    1302:	a0 93 ef 2b 	sts	0x2BEF, r26	; 0x802bef <xNextTaskUnblockTime+0x2>
    1306:	b0 93 f0 2b 	sts	0x2BF0, r27	; 0x802bf0 <xNextTaskUnblockTime+0x3>
    130a:	08 95       	ret
    130c:	e0 91 14 2c 	lds	r30, 0x2C14	; 0x802c14 <pxDelayedTaskList>
    1310:	f0 91 15 2c 	lds	r31, 0x2C15	; 0x802c15 <pxDelayedTaskList+0x1>
    1314:	07 80       	ldd	r0, Z+7	; 0x07
    1316:	f0 85       	ldd	r31, Z+8	; 0x08
    1318:	e0 2d       	mov	r30, r0
    131a:	00 84       	ldd	r0, Z+8	; 0x08
    131c:	f1 85       	ldd	r31, Z+9	; 0x09
    131e:	e0 2d       	mov	r30, r0
    1320:	82 81       	ldd	r24, Z+2	; 0x02
    1322:	93 81       	ldd	r25, Z+3	; 0x03
    1324:	a4 81       	ldd	r26, Z+4	; 0x04
    1326:	b5 81       	ldd	r27, Z+5	; 0x05
    1328:	80 93 ed 2b 	sts	0x2BED, r24	; 0x802bed <xNextTaskUnblockTime>
    132c:	90 93 ee 2b 	sts	0x2BEE, r25	; 0x802bee <xNextTaskUnblockTime+0x1>
    1330:	a0 93 ef 2b 	sts	0x2BEF, r26	; 0x802bef <xNextTaskUnblockTime+0x2>
    1334:	b0 93 f0 2b 	sts	0x2BF0, r27	; 0x802bf0 <xNextTaskUnblockTime+0x3>
    1338:	08 95       	ret

0000133a <prvInitialiseNewTask>:
    133a:	2f 92       	push	r2
    133c:	3f 92       	push	r3
    133e:	4f 92       	push	r4
    1340:	5f 92       	push	r5
    1342:	6f 92       	push	r6
    1344:	7f 92       	push	r7
    1346:	8f 92       	push	r8
    1348:	9f 92       	push	r9
    134a:	af 92       	push	r10
    134c:	bf 92       	push	r11
    134e:	cf 92       	push	r12
    1350:	df 92       	push	r13
    1352:	ef 92       	push	r14
    1354:	0f 93       	push	r16
    1356:	1f 93       	push	r17
    1358:	cf 93       	push	r28
    135a:	df 93       	push	r29
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
    1360:	1c 01       	movw	r2, r24
    1362:	4b 01       	movw	r8, r22
    1364:	29 01       	movw	r4, r18
    1366:	3a 01       	movw	r6, r20
    1368:	a9 01       	movw	r20, r18
    136a:	65 ea       	ldi	r22, 0xA5	; 165
    136c:	70 e0       	ldi	r23, 0x00	; 0
    136e:	f5 01       	movw	r30, r10
    1370:	83 8d       	ldd	r24, Z+27	; 0x1b
    1372:	94 8d       	ldd	r25, Z+28	; 0x1c
    1374:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <memset>
    1378:	f5 01       	movw	r30, r10
    137a:	83 8d       	ldd	r24, Z+27	; 0x1b
    137c:	94 8d       	ldd	r25, Z+28	; 0x1c
    137e:	f1 e0       	ldi	r31, 0x01	; 1
    1380:	4f 1a       	sub	r4, r31
    1382:	51 08       	sbc	r5, r1
    1384:	48 0e       	add	r4, r24
    1386:	59 1e       	adc	r5, r25
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	0f c0       	rjmp	.+30     	; 0x13aa <prvInitialiseNewTask+0x70>
    138c:	82 2f       	mov	r24, r18
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	f4 01       	movw	r30, r8
    1392:	e8 0f       	add	r30, r24
    1394:	f9 1f       	adc	r31, r25
    1396:	30 81       	ld	r19, Z
    1398:	d5 01       	movw	r26, r10
    139a:	a8 0f       	add	r26, r24
    139c:	b9 1f       	adc	r27, r25
    139e:	5d 96       	adiw	r26, 0x1d	; 29
    13a0:	3c 93       	st	X, r19
    13a2:	80 81       	ld	r24, Z
    13a4:	88 23       	and	r24, r24
    13a6:	19 f0       	breq	.+6      	; 0x13ae <prvInitialiseNewTask+0x74>
    13a8:	2f 5f       	subi	r18, 0xFF	; 255
    13aa:	28 30       	cpi	r18, 0x08	; 8
    13ac:	78 f3       	brcs	.-34     	; 0x138c <prvInitialiseNewTask+0x52>
    13ae:	f5 01       	movw	r30, r10
    13b0:	14 a2       	std	Z+36, r1	; 0x24
    13b2:	f3 e0       	ldi	r31, 0x03	; 3
    13b4:	fe 15       	cp	r31, r14
    13b6:	20 f4       	brcc	.+8      	; 0x13c0 <prvInitialiseNewTask+0x86>
    13b8:	0f 2e       	mov	r0, r31
    13ba:	f3 e0       	ldi	r31, 0x03	; 3
    13bc:	ef 2e       	mov	r14, r31
    13be:	f0 2d       	mov	r31, r0
    13c0:	f5 01       	movw	r30, r10
    13c2:	e2 8e       	std	Z+26, r14	; 0x1a
    13c4:	c5 01       	movw	r24, r10
    13c6:	02 96       	adiw	r24, 0x02	; 2
    13c8:	0e 94 34 04 	call	0x868	; 0x868 <vListInitialiseItem>
    13cc:	c5 01       	movw	r24, r10
    13ce:	0e 96       	adiw	r24, 0x0e	; 14
    13d0:	0e 94 34 04 	call	0x868	; 0x868 <vListInitialiseItem>
    13d4:	f5 01       	movw	r30, r10
    13d6:	a2 86       	std	Z+10, r10	; 0x0a
    13d8:	b3 86       	std	Z+11, r11	; 0x0b
    13da:	84 e0       	ldi	r24, 0x04	; 4
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	a0 e0       	ldi	r26, 0x00	; 0
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	8e 19       	sub	r24, r14
    13e4:	91 09       	sbc	r25, r1
    13e6:	a1 09       	sbc	r26, r1
    13e8:	b1 09       	sbc	r27, r1
    13ea:	86 87       	std	Z+14, r24	; 0x0e
    13ec:	97 87       	std	Z+15, r25	; 0x0f
    13ee:	a0 8b       	std	Z+16, r26	; 0x10
    13f0:	b1 8b       	std	Z+17, r27	; 0x11
    13f2:	a6 8a       	std	Z+22, r10	; 0x16
    13f4:	b7 8a       	std	Z+23, r11	; 0x17
    13f6:	17 a2       	std	Z+39, r1	; 0x27
    13f8:	10 a6       	std	Z+40, r1	; 0x28
    13fa:	11 a6       	std	Z+41, r1	; 0x29
    13fc:	12 a6       	std	Z+42, r1	; 0x2a
    13fe:	13 a6       	std	Z+43, r1	; 0x2b
    1400:	a8 01       	movw	r20, r16
    1402:	b1 01       	movw	r22, r2
    1404:	c2 01       	movw	r24, r4
    1406:	0e 94 df 04 	call	0x9be	; 0x9be <pxPortInitialiseStack>
    140a:	f5 01       	movw	r30, r10
    140c:	80 83       	st	Z, r24
    140e:	91 83       	std	Z+1, r25	; 0x01
    1410:	c1 14       	cp	r12, r1
    1412:	d1 04       	cpc	r13, r1
    1414:	19 f0       	breq	.+6      	; 0x141c <prvInitialiseNewTask+0xe2>
    1416:	f6 01       	movw	r30, r12
    1418:	a0 82       	st	Z, r10
    141a:	b1 82       	std	Z+1, r11	; 0x01
    141c:	df 91       	pop	r29
    141e:	cf 91       	pop	r28
    1420:	1f 91       	pop	r17
    1422:	0f 91       	pop	r16
    1424:	ef 90       	pop	r14
    1426:	df 90       	pop	r13
    1428:	cf 90       	pop	r12
    142a:	bf 90       	pop	r11
    142c:	af 90       	pop	r10
    142e:	9f 90       	pop	r9
    1430:	8f 90       	pop	r8
    1432:	7f 90       	pop	r7
    1434:	6f 90       	pop	r6
    1436:	5f 90       	pop	r5
    1438:	4f 90       	pop	r4
    143a:	3f 90       	pop	r3
    143c:	2f 90       	pop	r2
    143e:	08 95       	ret

00001440 <prvInitialiseTaskLists>:
    1440:	cf 93       	push	r28
    1442:	c0 e0       	ldi	r28, 0x00	; 0
    1444:	09 c0       	rjmp	.+18     	; 0x1458 <prvInitialiseTaskLists+0x18>
    1446:	2b e0       	ldi	r18, 0x0B	; 11
    1448:	c2 9f       	mul	r28, r18
    144a:	c0 01       	movw	r24, r0
    144c:	11 24       	eor	r1, r1
    144e:	84 5d       	subi	r24, 0xD4	; 212
    1450:	93 4d       	sbci	r25, 0xD3	; 211
    1452:	0e 94 23 04 	call	0x846	; 0x846 <vListInitialise>
    1456:	cf 5f       	subi	r28, 0xFF	; 255
    1458:	c4 30       	cpi	r28, 0x04	; 4
    145a:	a8 f3       	brcs	.-22     	; 0x1446 <prvInitialiseTaskLists+0x6>
    145c:	81 e2       	ldi	r24, 0x21	; 33
    145e:	9c e2       	ldi	r25, 0x2C	; 44
    1460:	0e 94 23 04 	call	0x846	; 0x846 <vListInitialise>
    1464:	86 e1       	ldi	r24, 0x16	; 22
    1466:	9c e2       	ldi	r25, 0x2C	; 44
    1468:	0e 94 23 04 	call	0x846	; 0x846 <vListInitialise>
    146c:	87 e0       	ldi	r24, 0x07	; 7
    146e:	9c e2       	ldi	r25, 0x2C	; 44
    1470:	0e 94 23 04 	call	0x846	; 0x846 <vListInitialise>
    1474:	8c ef       	ldi	r24, 0xFC	; 252
    1476:	9b e2       	ldi	r25, 0x2B	; 43
    1478:	0e 94 23 04 	call	0x846	; 0x846 <vListInitialise>
    147c:	81 e2       	ldi	r24, 0x21	; 33
    147e:	9c e2       	ldi	r25, 0x2C	; 44
    1480:	80 93 14 2c 	sts	0x2C14, r24	; 0x802c14 <pxDelayedTaskList>
    1484:	90 93 15 2c 	sts	0x2C15, r25	; 0x802c15 <pxDelayedTaskList+0x1>
    1488:	86 e1       	ldi	r24, 0x16	; 22
    148a:	9c e2       	ldi	r25, 0x2C	; 44
    148c:	80 93 12 2c 	sts	0x2C12, r24	; 0x802c12 <pxOverflowDelayedTaskList>
    1490:	90 93 13 2c 	sts	0x2C13, r25	; 0x802c13 <pxOverflowDelayedTaskList+0x1>
    1494:	cf 91       	pop	r28
    1496:	08 95       	ret

00001498 <prvAddNewTaskToReadyList>:
    1498:	cf 93       	push	r28
    149a:	df 93       	push	r29
    149c:	ec 01       	movw	r28, r24
    149e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    14a2:	ff 93       	push	r31
    14a4:	f8 7f       	andi	r31, 0xF8	; 248
    14a6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    14aa:	80 91 fb 2b 	lds	r24, 0x2BFB	; 0x802bfb <uxCurrentNumberOfTasks>
    14ae:	8f 5f       	subi	r24, 0xFF	; 255
    14b0:	80 93 fb 2b 	sts	0x2BFB, r24	; 0x802bfb <uxCurrentNumberOfTasks>
    14b4:	80 91 58 2c 	lds	r24, 0x2C58	; 0x802c58 <pxCurrentTCB>
    14b8:	90 91 59 2c 	lds	r25, 0x2C59	; 0x802c59 <pxCurrentTCB+0x1>
    14bc:	89 2b       	or	r24, r25
    14be:	59 f4       	brne	.+22     	; 0x14d6 <prvAddNewTaskToReadyList+0x3e>
    14c0:	c0 93 58 2c 	sts	0x2C58, r28	; 0x802c58 <pxCurrentTCB>
    14c4:	d0 93 59 2c 	sts	0x2C59, r29	; 0x802c59 <pxCurrentTCB+0x1>
    14c8:	80 91 fb 2b 	lds	r24, 0x2BFB	; 0x802bfb <uxCurrentNumberOfTasks>
    14cc:	81 30       	cpi	r24, 0x01	; 1
    14ce:	99 f4       	brne	.+38     	; 0x14f6 <prvAddNewTaskToReadyList+0x5e>
    14d0:	0e 94 20 0a 	call	0x1440	; 0x1440 <prvInitialiseTaskLists>
    14d4:	10 c0       	rjmp	.+32     	; 0x14f6 <prvAddNewTaskToReadyList+0x5e>
    14d6:	80 91 f5 2b 	lds	r24, 0x2BF5	; 0x802bf5 <xSchedulerRunning>
    14da:	81 11       	cpse	r24, r1
    14dc:	0c c0       	rjmp	.+24     	; 0x14f6 <prvAddNewTaskToReadyList+0x5e>
    14de:	e0 91 58 2c 	lds	r30, 0x2C58	; 0x802c58 <pxCurrentTCB>
    14e2:	f0 91 59 2c 	lds	r31, 0x2C59	; 0x802c59 <pxCurrentTCB+0x1>
    14e6:	92 8d       	ldd	r25, Z+26	; 0x1a
    14e8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    14ea:	89 17       	cp	r24, r25
    14ec:	20 f0       	brcs	.+8      	; 0x14f6 <prvAddNewTaskToReadyList+0x5e>
    14ee:	c0 93 58 2c 	sts	0x2C58, r28	; 0x802c58 <pxCurrentTCB>
    14f2:	d0 93 59 2c 	sts	0x2C59, r29	; 0x802c59 <pxCurrentTCB+0x1>
    14f6:	80 91 f1 2b 	lds	r24, 0x2BF1	; 0x802bf1 <uxTaskNumber>
    14fa:	8f 5f       	subi	r24, 0xFF	; 255
    14fc:	80 93 f1 2b 	sts	0x2BF1, r24	; 0x802bf1 <uxTaskNumber>
    1500:	8d a3       	std	Y+37, r24	; 0x25
    1502:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1504:	90 91 f6 2b 	lds	r25, 0x2BF6	; 0x802bf6 <uxTopReadyPriority>
    1508:	98 17       	cp	r25, r24
    150a:	10 f4       	brcc	.+4      	; 0x1510 <prvAddNewTaskToReadyList+0x78>
    150c:	80 93 f6 2b 	sts	0x2BF6, r24	; 0x802bf6 <uxTopReadyPriority>
    1510:	2b e0       	ldi	r18, 0x0B	; 11
    1512:	82 9f       	mul	r24, r18
    1514:	c0 01       	movw	r24, r0
    1516:	11 24       	eor	r1, r1
    1518:	be 01       	movw	r22, r28
    151a:	6e 5f       	subi	r22, 0xFE	; 254
    151c:	7f 4f       	sbci	r23, 0xFF	; 255
    151e:	84 5d       	subi	r24, 0xD4	; 212
    1520:	93 4d       	sbci	r25, 0xD3	; 211
    1522:	0e 94 38 04 	call	0x870	; 0x870 <vListInsertEnd>
    1526:	ff 91       	pop	r31
    1528:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    152c:	80 91 f5 2b 	lds	r24, 0x2BF5	; 0x802bf5 <xSchedulerRunning>
    1530:	88 23       	and	r24, r24
    1532:	51 f0       	breq	.+20     	; 0x1548 <prvAddNewTaskToReadyList+0xb0>
    1534:	e0 91 58 2c 	lds	r30, 0x2C58	; 0x802c58 <pxCurrentTCB>
    1538:	f0 91 59 2c 	lds	r31, 0x2C59	; 0x802c59 <pxCurrentTCB+0x1>
    153c:	92 8d       	ldd	r25, Z+26	; 0x1a
    153e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1540:	98 17       	cp	r25, r24
    1542:	10 f4       	brcc	.+4      	; 0x1548 <prvAddNewTaskToReadyList+0xb0>
    1544:	0e 94 8e 05 	call	0xb1c	; 0xb1c <vPortYield>
    1548:	df 91       	pop	r29
    154a:	cf 91       	pop	r28
    154c:	08 95       	ret

0000154e <prvAddCurrentTaskToDelayedList>:
    154e:	8f 92       	push	r8
    1550:	9f 92       	push	r9
    1552:	af 92       	push	r10
    1554:	bf 92       	push	r11
    1556:	cf 92       	push	r12
    1558:	df 92       	push	r13
    155a:	ef 92       	push	r14
    155c:	ff 92       	push	r15
    155e:	cf 93       	push	r28
    1560:	6b 01       	movw	r12, r22
    1562:	7c 01       	movw	r14, r24
    1564:	c4 2f       	mov	r28, r20
    1566:	80 90 f7 2b 	lds	r8, 0x2BF7	; 0x802bf7 <xTickCount>
    156a:	90 90 f8 2b 	lds	r9, 0x2BF8	; 0x802bf8 <xTickCount+0x1>
    156e:	a0 90 f9 2b 	lds	r10, 0x2BF9	; 0x802bf9 <xTickCount+0x2>
    1572:	b0 90 fa 2b 	lds	r11, 0x2BFA	; 0x802bfa <xTickCount+0x3>
    1576:	80 91 58 2c 	lds	r24, 0x2C58	; 0x802c58 <pxCurrentTCB>
    157a:	90 91 59 2c 	lds	r25, 0x2C59	; 0x802c59 <pxCurrentTCB+0x1>
    157e:	02 96       	adiw	r24, 0x02	; 2
    1580:	0e 94 96 04 	call	0x92c	; 0x92c <uxListRemove>
    1584:	8f ef       	ldi	r24, 0xFF	; 255
    1586:	c8 16       	cp	r12, r24
    1588:	d8 06       	cpc	r13, r24
    158a:	e8 06       	cpc	r14, r24
    158c:	f8 06       	cpc	r15, r24
    158e:	69 f4       	brne	.+26     	; 0x15aa <prvAddCurrentTaskToDelayedList+0x5c>
    1590:	cc 23       	and	r28, r28
    1592:	59 f0       	breq	.+22     	; 0x15aa <prvAddCurrentTaskToDelayedList+0x5c>
    1594:	60 91 58 2c 	lds	r22, 0x2C58	; 0x802c58 <pxCurrentTCB>
    1598:	70 91 59 2c 	lds	r23, 0x2C59	; 0x802c59 <pxCurrentTCB+0x1>
    159c:	6e 5f       	subi	r22, 0xFE	; 254
    159e:	7f 4f       	sbci	r23, 0xFF	; 255
    15a0:	8c ef       	ldi	r24, 0xFC	; 252
    15a2:	9b e2       	ldi	r25, 0x2B	; 43
    15a4:	0e 94 38 04 	call	0x870	; 0x870 <vListInsertEnd>
    15a8:	3f c0       	rjmp	.+126    	; 0x1628 <prvAddCurrentTaskToDelayedList+0xda>
    15aa:	c8 0c       	add	r12, r8
    15ac:	d9 1c       	adc	r13, r9
    15ae:	ea 1c       	adc	r14, r10
    15b0:	fb 1c       	adc	r15, r11
    15b2:	e0 91 58 2c 	lds	r30, 0x2C58	; 0x802c58 <pxCurrentTCB>
    15b6:	f0 91 59 2c 	lds	r31, 0x2C59	; 0x802c59 <pxCurrentTCB+0x1>
    15ba:	c2 82       	std	Z+2, r12	; 0x02
    15bc:	d3 82       	std	Z+3, r13	; 0x03
    15be:	e4 82       	std	Z+4, r14	; 0x04
    15c0:	f5 82       	std	Z+5, r15	; 0x05
    15c2:	c8 14       	cp	r12, r8
    15c4:	d9 04       	cpc	r13, r9
    15c6:	ea 04       	cpc	r14, r10
    15c8:	fb 04       	cpc	r15, r11
    15ca:	68 f4       	brcc	.+26     	; 0x15e6 <prvAddCurrentTaskToDelayedList+0x98>
    15cc:	60 91 58 2c 	lds	r22, 0x2C58	; 0x802c58 <pxCurrentTCB>
    15d0:	70 91 59 2c 	lds	r23, 0x2C59	; 0x802c59 <pxCurrentTCB+0x1>
    15d4:	80 91 12 2c 	lds	r24, 0x2C12	; 0x802c12 <pxOverflowDelayedTaskList>
    15d8:	90 91 13 2c 	lds	r25, 0x2C13	; 0x802c13 <pxOverflowDelayedTaskList+0x1>
    15dc:	6e 5f       	subi	r22, 0xFE	; 254
    15de:	7f 4f       	sbci	r23, 0xFF	; 255
    15e0:	0e 94 59 04 	call	0x8b2	; 0x8b2 <vListInsert>
    15e4:	21 c0       	rjmp	.+66     	; 0x1628 <prvAddCurrentTaskToDelayedList+0xda>
    15e6:	60 91 58 2c 	lds	r22, 0x2C58	; 0x802c58 <pxCurrentTCB>
    15ea:	70 91 59 2c 	lds	r23, 0x2C59	; 0x802c59 <pxCurrentTCB+0x1>
    15ee:	80 91 14 2c 	lds	r24, 0x2C14	; 0x802c14 <pxDelayedTaskList>
    15f2:	90 91 15 2c 	lds	r25, 0x2C15	; 0x802c15 <pxDelayedTaskList+0x1>
    15f6:	6e 5f       	subi	r22, 0xFE	; 254
    15f8:	7f 4f       	sbci	r23, 0xFF	; 255
    15fa:	0e 94 59 04 	call	0x8b2	; 0x8b2 <vListInsert>
    15fe:	80 91 ed 2b 	lds	r24, 0x2BED	; 0x802bed <xNextTaskUnblockTime>
    1602:	90 91 ee 2b 	lds	r25, 0x2BEE	; 0x802bee <xNextTaskUnblockTime+0x1>
    1606:	a0 91 ef 2b 	lds	r26, 0x2BEF	; 0x802bef <xNextTaskUnblockTime+0x2>
    160a:	b0 91 f0 2b 	lds	r27, 0x2BF0	; 0x802bf0 <xNextTaskUnblockTime+0x3>
    160e:	c8 16       	cp	r12, r24
    1610:	d9 06       	cpc	r13, r25
    1612:	ea 06       	cpc	r14, r26
    1614:	fb 06       	cpc	r15, r27
    1616:	40 f4       	brcc	.+16     	; 0x1628 <prvAddCurrentTaskToDelayedList+0xda>
    1618:	c0 92 ed 2b 	sts	0x2BED, r12	; 0x802bed <xNextTaskUnblockTime>
    161c:	d0 92 ee 2b 	sts	0x2BEE, r13	; 0x802bee <xNextTaskUnblockTime+0x1>
    1620:	e0 92 ef 2b 	sts	0x2BEF, r14	; 0x802bef <xNextTaskUnblockTime+0x2>
    1624:	f0 92 f0 2b 	sts	0x2BF0, r15	; 0x802bf0 <xNextTaskUnblockTime+0x3>
    1628:	cf 91       	pop	r28
    162a:	ff 90       	pop	r15
    162c:	ef 90       	pop	r14
    162e:	df 90       	pop	r13
    1630:	cf 90       	pop	r12
    1632:	bf 90       	pop	r11
    1634:	af 90       	pop	r10
    1636:	9f 90       	pop	r9
    1638:	8f 90       	pop	r8
    163a:	08 95       	ret

0000163c <prvIdleTask>:
    163c:	80 91 2c 2c 	lds	r24, 0x2C2C	; 0x802c2c <pxReadyTasksLists>
    1640:	82 30       	cpi	r24, 0x02	; 2
    1642:	10 f0       	brcs	.+4      	; 0x1648 <prvIdleTask+0xc>
    1644:	0e 94 8e 05 	call	0xb1c	; 0xb1c <vPortYield>
    1648:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <vApplicationIdleHook>
    164c:	f7 cf       	rjmp	.-18     	; 0x163c <prvIdleTask>

0000164e <xTaskCreate>:
    164e:	2f 92       	push	r2
    1650:	3f 92       	push	r3
    1652:	4f 92       	push	r4
    1654:	5f 92       	push	r5
    1656:	6f 92       	push	r6
    1658:	7f 92       	push	r7
    165a:	8f 92       	push	r8
    165c:	9f 92       	push	r9
    165e:	af 92       	push	r10
    1660:	bf 92       	push	r11
    1662:	cf 92       	push	r12
    1664:	df 92       	push	r13
    1666:	ef 92       	push	r14
    1668:	ff 92       	push	r15
    166a:	0f 93       	push	r16
    166c:	1f 93       	push	r17
    166e:	cf 93       	push	r28
    1670:	df 93       	push	r29
    1672:	3c 01       	movw	r6, r24
    1674:	1b 01       	movw	r2, r22
    1676:	5a 01       	movw	r10, r20
    1678:	29 01       	movw	r4, r18
    167a:	ca 01       	movw	r24, r20
    167c:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <pvPortMalloc>
    1680:	6c 01       	movw	r12, r24
    1682:	89 2b       	or	r24, r25
    1684:	71 f0       	breq	.+28     	; 0x16a2 <xTaskCreate+0x54>
    1686:	8c e2       	ldi	r24, 0x2C	; 44
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <pvPortMalloc>
    168e:	ec 01       	movw	r28, r24
    1690:	89 2b       	or	r24, r25
    1692:	19 f0       	breq	.+6      	; 0x169a <xTaskCreate+0x4c>
    1694:	cb 8e       	std	Y+27, r12	; 0x1b
    1696:	dc 8e       	std	Y+28, r13	; 0x1c
    1698:	06 c0       	rjmp	.+12     	; 0x16a6 <xTaskCreate+0x58>
    169a:	c6 01       	movw	r24, r12
    169c:	0e 94 22 04 	call	0x844	; 0x844 <vPortFree>
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <xTaskCreate+0x58>
    16a2:	c0 e0       	ldi	r28, 0x00	; 0
    16a4:	d0 e0       	ldi	r29, 0x00	; 0
    16a6:	20 97       	sbiw	r28, 0x00	; 0
    16a8:	91 f0       	breq	.+36     	; 0x16ce <xTaskCreate+0x80>
    16aa:	95 01       	movw	r18, r10
    16ac:	40 e0       	ldi	r20, 0x00	; 0
    16ae:	50 e0       	ldi	r21, 0x00	; 0
    16b0:	81 2c       	mov	r8, r1
    16b2:	91 2c       	mov	r9, r1
    16b4:	5e 01       	movw	r10, r28
    16b6:	67 01       	movw	r12, r14
    16b8:	e0 2e       	mov	r14, r16
    16ba:	82 01       	movw	r16, r4
    16bc:	b1 01       	movw	r22, r2
    16be:	c3 01       	movw	r24, r6
    16c0:	0e 94 9d 09 	call	0x133a	; 0x133a <prvInitialiseNewTask>
    16c4:	ce 01       	movw	r24, r28
    16c6:	0e 94 4c 0a 	call	0x1498	; 0x1498 <prvAddNewTaskToReadyList>
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	01 c0       	rjmp	.+2      	; 0x16d0 <xTaskCreate+0x82>
    16ce:	8f ef       	ldi	r24, 0xFF	; 255
    16d0:	df 91       	pop	r29
    16d2:	cf 91       	pop	r28
    16d4:	1f 91       	pop	r17
    16d6:	0f 91       	pop	r16
    16d8:	ff 90       	pop	r15
    16da:	ef 90       	pop	r14
    16dc:	df 90       	pop	r13
    16de:	cf 90       	pop	r12
    16e0:	bf 90       	pop	r11
    16e2:	af 90       	pop	r10
    16e4:	9f 90       	pop	r9
    16e6:	8f 90       	pop	r8
    16e8:	7f 90       	pop	r7
    16ea:	6f 90       	pop	r6
    16ec:	5f 90       	pop	r5
    16ee:	4f 90       	pop	r4
    16f0:	3f 90       	pop	r3
    16f2:	2f 90       	pop	r2
    16f4:	08 95       	ret

000016f6 <vTaskStartScheduler>:
    16f6:	ef 92       	push	r14
    16f8:	ff 92       	push	r15
    16fa:	0f 93       	push	r16
    16fc:	0f 2e       	mov	r0, r31
    16fe:	fb ee       	ldi	r31, 0xEB	; 235
    1700:	ef 2e       	mov	r14, r31
    1702:	fb e2       	ldi	r31, 0x2B	; 43
    1704:	ff 2e       	mov	r15, r31
    1706:	f0 2d       	mov	r31, r0
    1708:	00 e0       	ldi	r16, 0x00	; 0
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	48 ec       	ldi	r20, 0xC8	; 200
    1710:	50 e0       	ldi	r21, 0x00	; 0
    1712:	60 e0       	ldi	r22, 0x00	; 0
    1714:	70 e2       	ldi	r23, 0x20	; 32
    1716:	8e e1       	ldi	r24, 0x1E	; 30
    1718:	9b e0       	ldi	r25, 0x0B	; 11
    171a:	0e 94 27 0b 	call	0x164e	; 0x164e <xTaskCreate>
    171e:	81 30       	cpi	r24, 0x01	; 1
    1720:	11 f4       	brne	.+4      	; 0x1726 <vTaskStartScheduler+0x30>
    1722:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <xTimerCreateTimerTask>
    1726:	81 30       	cpi	r24, 0x01	; 1
    1728:	e9 f4       	brne	.+58     	; 0x1764 <vTaskStartScheduler+0x6e>
    172a:	e0 ea       	ldi	r30, 0xA0	; 160
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	82 81       	ldd	r24, Z+2	; 0x02
    1730:	88 7f       	andi	r24, 0xF8	; 248
    1732:	82 83       	std	Z+2, r24	; 0x02
    1734:	8f ef       	ldi	r24, 0xFF	; 255
    1736:	9f ef       	ldi	r25, 0xFF	; 255
    1738:	dc 01       	movw	r26, r24
    173a:	80 93 ed 2b 	sts	0x2BED, r24	; 0x802bed <xNextTaskUnblockTime>
    173e:	90 93 ee 2b 	sts	0x2BEE, r25	; 0x802bee <xNextTaskUnblockTime+0x1>
    1742:	a0 93 ef 2b 	sts	0x2BEF, r26	; 0x802bef <xNextTaskUnblockTime+0x2>
    1746:	b0 93 f0 2b 	sts	0x2BF0, r27	; 0x802bf0 <xNextTaskUnblockTime+0x3>
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	80 93 f5 2b 	sts	0x2BF5, r24	; 0x802bf5 <xSchedulerRunning>
    1750:	10 92 f7 2b 	sts	0x2BF7, r1	; 0x802bf7 <xTickCount>
    1754:	10 92 f8 2b 	sts	0x2BF8, r1	; 0x802bf8 <xTickCount+0x1>
    1758:	10 92 f9 2b 	sts	0x2BF9, r1	; 0x802bf9 <xTickCount+0x2>
    175c:	10 92 fa 2b 	sts	0x2BFA, r1	; 0x802bfa <xTickCount+0x3>
    1760:	0e 94 5c 05 	call	0xab8	; 0xab8 <xPortStartScheduler>
    1764:	0f 91       	pop	r16
    1766:	ff 90       	pop	r15
    1768:	ef 90       	pop	r14
    176a:	08 95       	ret

0000176c <vTaskSuspendAll>:
    176c:	80 91 ea 2b 	lds	r24, 0x2BEA	; 0x802bea <uxSchedulerSuspended>
    1770:	8f 5f       	subi	r24, 0xFF	; 255
    1772:	80 93 ea 2b 	sts	0x2BEA, r24	; 0x802bea <uxSchedulerSuspended>
    1776:	08 95       	ret

00001778 <xTaskGetTickCount>:
    1778:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    177c:	ff 93       	push	r31
    177e:	f8 7f       	andi	r31, 0xF8	; 248
    1780:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1784:	60 91 f7 2b 	lds	r22, 0x2BF7	; 0x802bf7 <xTickCount>
    1788:	70 91 f8 2b 	lds	r23, 0x2BF8	; 0x802bf8 <xTickCount+0x1>
    178c:	80 91 f9 2b 	lds	r24, 0x2BF9	; 0x802bf9 <xTickCount+0x2>
    1790:	90 91 fa 2b 	lds	r25, 0x2BFA	; 0x802bfa <xTickCount+0x3>
    1794:	ff 91       	pop	r31
    1796:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    179a:	08 95       	ret

0000179c <xTaskIncrementTick>:
    179c:	bf 92       	push	r11
    179e:	cf 92       	push	r12
    17a0:	df 92       	push	r13
    17a2:	ef 92       	push	r14
    17a4:	ff 92       	push	r15
    17a6:	0f 93       	push	r16
    17a8:	1f 93       	push	r17
    17aa:	cf 93       	push	r28
    17ac:	df 93       	push	r29
    17ae:	80 91 ea 2b 	lds	r24, 0x2BEA	; 0x802bea <uxSchedulerSuspended>
    17b2:	81 11       	cpse	r24, r1
    17b4:	a9 c0       	rjmp	.+338    	; 0x1908 <xTaskIncrementTick+0x16c>
    17b6:	c0 90 f7 2b 	lds	r12, 0x2BF7	; 0x802bf7 <xTickCount>
    17ba:	d0 90 f8 2b 	lds	r13, 0x2BF8	; 0x802bf8 <xTickCount+0x1>
    17be:	e0 90 f9 2b 	lds	r14, 0x2BF9	; 0x802bf9 <xTickCount+0x2>
    17c2:	f0 90 fa 2b 	lds	r15, 0x2BFA	; 0x802bfa <xTickCount+0x3>
    17c6:	2f ef       	ldi	r18, 0xFF	; 255
    17c8:	c2 1a       	sub	r12, r18
    17ca:	d2 0a       	sbc	r13, r18
    17cc:	e2 0a       	sbc	r14, r18
    17ce:	f2 0a       	sbc	r15, r18
    17d0:	c0 92 f7 2b 	sts	0x2BF7, r12	; 0x802bf7 <xTickCount>
    17d4:	d0 92 f8 2b 	sts	0x2BF8, r13	; 0x802bf8 <xTickCount+0x1>
    17d8:	e0 92 f9 2b 	sts	0x2BF9, r14	; 0x802bf9 <xTickCount+0x2>
    17dc:	f0 92 fa 2b 	sts	0x2BFA, r15	; 0x802bfa <xTickCount+0x3>
    17e0:	c1 14       	cp	r12, r1
    17e2:	d1 04       	cpc	r13, r1
    17e4:	e1 04       	cpc	r14, r1
    17e6:	f1 04       	cpc	r15, r1
    17e8:	b9 f4       	brne	.+46     	; 0x1818 <xTaskIncrementTick+0x7c>
    17ea:	80 91 14 2c 	lds	r24, 0x2C14	; 0x802c14 <pxDelayedTaskList>
    17ee:	90 91 15 2c 	lds	r25, 0x2C15	; 0x802c15 <pxDelayedTaskList+0x1>
    17f2:	20 91 12 2c 	lds	r18, 0x2C12	; 0x802c12 <pxOverflowDelayedTaskList>
    17f6:	30 91 13 2c 	lds	r19, 0x2C13	; 0x802c13 <pxOverflowDelayedTaskList+0x1>
    17fa:	20 93 14 2c 	sts	0x2C14, r18	; 0x802c14 <pxDelayedTaskList>
    17fe:	30 93 15 2c 	sts	0x2C15, r19	; 0x802c15 <pxDelayedTaskList+0x1>
    1802:	80 93 12 2c 	sts	0x2C12, r24	; 0x802c12 <pxOverflowDelayedTaskList>
    1806:	90 93 13 2c 	sts	0x2C13, r25	; 0x802c13 <pxOverflowDelayedTaskList+0x1>
    180a:	80 91 f2 2b 	lds	r24, 0x2BF2	; 0x802bf2 <xNumOfOverflows>
    180e:	8f 5f       	subi	r24, 0xFF	; 255
    1810:	80 93 f2 2b 	sts	0x2BF2, r24	; 0x802bf2 <xNumOfOverflows>
    1814:	0e 94 73 09 	call	0x12e6	; 0x12e6 <prvResetNextTaskUnblockTime>
    1818:	80 91 ed 2b 	lds	r24, 0x2BED	; 0x802bed <xNextTaskUnblockTime>
    181c:	90 91 ee 2b 	lds	r25, 0x2BEE	; 0x802bee <xNextTaskUnblockTime+0x1>
    1820:	a0 91 ef 2b 	lds	r26, 0x2BEF	; 0x802bef <xNextTaskUnblockTime+0x2>
    1824:	b0 91 f0 2b 	lds	r27, 0x2BF0	; 0x802bf0 <xNextTaskUnblockTime+0x3>
    1828:	c8 16       	cp	r12, r24
    182a:	d9 06       	cpc	r13, r25
    182c:	ea 06       	cpc	r14, r26
    182e:	fb 06       	cpc	r15, r27
    1830:	28 f4       	brcc	.+10     	; 0x183c <xTaskIncrementTick+0xa0>
    1832:	b1 2c       	mov	r11, r1
    1834:	5a c0       	rjmp	.+180    	; 0x18ea <xTaskIncrementTick+0x14e>
    1836:	bb 24       	eor	r11, r11
    1838:	b3 94       	inc	r11
    183a:	01 c0       	rjmp	.+2      	; 0x183e <xTaskIncrementTick+0xa2>
    183c:	b1 2c       	mov	r11, r1
    183e:	e0 91 14 2c 	lds	r30, 0x2C14	; 0x802c14 <pxDelayedTaskList>
    1842:	f0 91 15 2c 	lds	r31, 0x2C15	; 0x802c15 <pxDelayedTaskList+0x1>
    1846:	80 81       	ld	r24, Z
    1848:	81 11       	cpse	r24, r1
    184a:	0c c0       	rjmp	.+24     	; 0x1864 <xTaskIncrementTick+0xc8>
    184c:	8f ef       	ldi	r24, 0xFF	; 255
    184e:	9f ef       	ldi	r25, 0xFF	; 255
    1850:	dc 01       	movw	r26, r24
    1852:	80 93 ed 2b 	sts	0x2BED, r24	; 0x802bed <xNextTaskUnblockTime>
    1856:	90 93 ee 2b 	sts	0x2BEE, r25	; 0x802bee <xNextTaskUnblockTime+0x1>
    185a:	a0 93 ef 2b 	sts	0x2BEF, r26	; 0x802bef <xNextTaskUnblockTime+0x2>
    185e:	b0 93 f0 2b 	sts	0x2BF0, r27	; 0x802bf0 <xNextTaskUnblockTime+0x3>
    1862:	43 c0       	rjmp	.+134    	; 0x18ea <xTaskIncrementTick+0x14e>
    1864:	e0 91 14 2c 	lds	r30, 0x2C14	; 0x802c14 <pxDelayedTaskList>
    1868:	f0 91 15 2c 	lds	r31, 0x2C15	; 0x802c15 <pxDelayedTaskList+0x1>
    186c:	07 80       	ldd	r0, Z+7	; 0x07
    186e:	f0 85       	ldd	r31, Z+8	; 0x08
    1870:	e0 2d       	mov	r30, r0
    1872:	c0 85       	ldd	r28, Z+8	; 0x08
    1874:	d1 85       	ldd	r29, Z+9	; 0x09
    1876:	8a 81       	ldd	r24, Y+2	; 0x02
    1878:	9b 81       	ldd	r25, Y+3	; 0x03
    187a:	ac 81       	ldd	r26, Y+4	; 0x04
    187c:	bd 81       	ldd	r27, Y+5	; 0x05
    187e:	c8 16       	cp	r12, r24
    1880:	d9 06       	cpc	r13, r25
    1882:	ea 06       	cpc	r14, r26
    1884:	fb 06       	cpc	r15, r27
    1886:	48 f4       	brcc	.+18     	; 0x189a <xTaskIncrementTick+0xfe>
    1888:	80 93 ed 2b 	sts	0x2BED, r24	; 0x802bed <xNextTaskUnblockTime>
    188c:	90 93 ee 2b 	sts	0x2BEE, r25	; 0x802bee <xNextTaskUnblockTime+0x1>
    1890:	a0 93 ef 2b 	sts	0x2BEF, r26	; 0x802bef <xNextTaskUnblockTime+0x2>
    1894:	b0 93 f0 2b 	sts	0x2BF0, r27	; 0x802bf0 <xNextTaskUnblockTime+0x3>
    1898:	28 c0       	rjmp	.+80     	; 0x18ea <xTaskIncrementTick+0x14e>
    189a:	8e 01       	movw	r16, r28
    189c:	0e 5f       	subi	r16, 0xFE	; 254
    189e:	1f 4f       	sbci	r17, 0xFF	; 255
    18a0:	c8 01       	movw	r24, r16
    18a2:	0e 94 96 04 	call	0x92c	; 0x92c <uxListRemove>
    18a6:	88 8d       	ldd	r24, Y+24	; 0x18
    18a8:	99 8d       	ldd	r25, Y+25	; 0x19
    18aa:	89 2b       	or	r24, r25
    18ac:	21 f0       	breq	.+8      	; 0x18b6 <xTaskIncrementTick+0x11a>
    18ae:	ce 01       	movw	r24, r28
    18b0:	0e 96       	adiw	r24, 0x0e	; 14
    18b2:	0e 94 96 04 	call	0x92c	; 0x92c <uxListRemove>
    18b6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18b8:	90 91 f6 2b 	lds	r25, 0x2BF6	; 0x802bf6 <uxTopReadyPriority>
    18bc:	98 17       	cp	r25, r24
    18be:	10 f4       	brcc	.+4      	; 0x18c4 <xTaskIncrementTick+0x128>
    18c0:	80 93 f6 2b 	sts	0x2BF6, r24	; 0x802bf6 <uxTopReadyPriority>
    18c4:	2b e0       	ldi	r18, 0x0B	; 11
    18c6:	82 9f       	mul	r24, r18
    18c8:	c0 01       	movw	r24, r0
    18ca:	11 24       	eor	r1, r1
    18cc:	b8 01       	movw	r22, r16
    18ce:	84 5d       	subi	r24, 0xD4	; 212
    18d0:	93 4d       	sbci	r25, 0xD3	; 211
    18d2:	0e 94 38 04 	call	0x870	; 0x870 <vListInsertEnd>
    18d6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    18d8:	e0 91 58 2c 	lds	r30, 0x2C58	; 0x802c58 <pxCurrentTCB>
    18dc:	f0 91 59 2c 	lds	r31, 0x2C59	; 0x802c59 <pxCurrentTCB+0x1>
    18e0:	82 8d       	ldd	r24, Z+26	; 0x1a
    18e2:	98 17       	cp	r25, r24
    18e4:	08 f0       	brcs	.+2      	; 0x18e8 <xTaskIncrementTick+0x14c>
    18e6:	a7 cf       	rjmp	.-178    	; 0x1836 <xTaskIncrementTick+0x9a>
    18e8:	aa cf       	rjmp	.-172    	; 0x183e <xTaskIncrementTick+0xa2>
    18ea:	e0 91 58 2c 	lds	r30, 0x2C58	; 0x802c58 <pxCurrentTCB>
    18ee:	f0 91 59 2c 	lds	r31, 0x2C59	; 0x802c59 <pxCurrentTCB+0x1>
    18f2:	e2 8d       	ldd	r30, Z+26	; 0x1a
    18f4:	8b e0       	ldi	r24, 0x0B	; 11
    18f6:	e8 9f       	mul	r30, r24
    18f8:	f0 01       	movw	r30, r0
    18fa:	11 24       	eor	r1, r1
    18fc:	e4 5d       	subi	r30, 0xD4	; 212
    18fe:	f3 4d       	sbci	r31, 0xD3	; 211
    1900:	80 81       	ld	r24, Z
    1902:	82 30       	cpi	r24, 0x02	; 2
    1904:	40 f4       	brcc	.+16     	; 0x1916 <xTaskIncrementTick+0x17a>
    1906:	09 c0       	rjmp	.+18     	; 0x191a <xTaskIncrementTick+0x17e>
    1908:	80 91 f4 2b 	lds	r24, 0x2BF4	; 0x802bf4 <uxPendedTicks>
    190c:	8f 5f       	subi	r24, 0xFF	; 255
    190e:	80 93 f4 2b 	sts	0x2BF4, r24	; 0x802bf4 <uxPendedTicks>
    1912:	b1 2c       	mov	r11, r1
    1914:	02 c0       	rjmp	.+4      	; 0x191a <xTaskIncrementTick+0x17e>
    1916:	bb 24       	eor	r11, r11
    1918:	b3 94       	inc	r11
    191a:	80 91 f3 2b 	lds	r24, 0x2BF3	; 0x802bf3 <xYieldPending>
    191e:	88 23       	and	r24, r24
    1920:	11 f0       	breq	.+4      	; 0x1926 <xTaskIncrementTick+0x18a>
    1922:	bb 24       	eor	r11, r11
    1924:	b3 94       	inc	r11
    1926:	8b 2d       	mov	r24, r11
    1928:	df 91       	pop	r29
    192a:	cf 91       	pop	r28
    192c:	1f 91       	pop	r17
    192e:	0f 91       	pop	r16
    1930:	ff 90       	pop	r15
    1932:	ef 90       	pop	r14
    1934:	df 90       	pop	r13
    1936:	cf 90       	pop	r12
    1938:	bf 90       	pop	r11
    193a:	08 95       	ret

0000193c <xTaskResumeAll>:
    193c:	0f 93       	push	r16
    193e:	1f 93       	push	r17
    1940:	cf 93       	push	r28
    1942:	df 93       	push	r29
    1944:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1948:	ff 93       	push	r31
    194a:	f8 7f       	andi	r31, 0xF8	; 248
    194c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1950:	80 91 ea 2b 	lds	r24, 0x2BEA	; 0x802bea <uxSchedulerSuspended>
    1954:	81 50       	subi	r24, 0x01	; 1
    1956:	80 93 ea 2b 	sts	0x2BEA, r24	; 0x802bea <uxSchedulerSuspended>
    195a:	80 91 ea 2b 	lds	r24, 0x2BEA	; 0x802bea <uxSchedulerSuspended>
    195e:	81 11       	cpse	r24, r1
    1960:	52 c0       	rjmp	.+164    	; 0x1a06 <xTaskResumeAll+0xca>
    1962:	80 91 fb 2b 	lds	r24, 0x2BFB	; 0x802bfb <uxCurrentNumberOfTasks>
    1966:	81 11       	cpse	r24, r1
    1968:	2d c0       	rjmp	.+90     	; 0x19c4 <xTaskResumeAll+0x88>
    196a:	50 c0       	rjmp	.+160    	; 0x1a0c <xTaskResumeAll+0xd0>
    196c:	e0 91 0e 2c 	lds	r30, 0x2C0E	; 0x802c0e <xPendingReadyList+0x7>
    1970:	f0 91 0f 2c 	lds	r31, 0x2C0F	; 0x802c0f <xPendingReadyList+0x8>
    1974:	c0 85       	ldd	r28, Z+8	; 0x08
    1976:	d1 85       	ldd	r29, Z+9	; 0x09
    1978:	ce 01       	movw	r24, r28
    197a:	0e 96       	adiw	r24, 0x0e	; 14
    197c:	0e 94 96 04 	call	0x92c	; 0x92c <uxListRemove>
    1980:	8e 01       	movw	r16, r28
    1982:	0e 5f       	subi	r16, 0xFE	; 254
    1984:	1f 4f       	sbci	r17, 0xFF	; 255
    1986:	c8 01       	movw	r24, r16
    1988:	0e 94 96 04 	call	0x92c	; 0x92c <uxListRemove>
    198c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    198e:	90 91 f6 2b 	lds	r25, 0x2BF6	; 0x802bf6 <uxTopReadyPriority>
    1992:	98 17       	cp	r25, r24
    1994:	10 f4       	brcc	.+4      	; 0x199a <xTaskResumeAll+0x5e>
    1996:	80 93 f6 2b 	sts	0x2BF6, r24	; 0x802bf6 <uxTopReadyPriority>
    199a:	2b e0       	ldi	r18, 0x0B	; 11
    199c:	82 9f       	mul	r24, r18
    199e:	c0 01       	movw	r24, r0
    19a0:	11 24       	eor	r1, r1
    19a2:	b8 01       	movw	r22, r16
    19a4:	84 5d       	subi	r24, 0xD4	; 212
    19a6:	93 4d       	sbci	r25, 0xD3	; 211
    19a8:	0e 94 38 04 	call	0x870	; 0x870 <vListInsertEnd>
    19ac:	9a 8d       	ldd	r25, Y+26	; 0x1a
    19ae:	e0 91 58 2c 	lds	r30, 0x2C58	; 0x802c58 <pxCurrentTCB>
    19b2:	f0 91 59 2c 	lds	r31, 0x2C59	; 0x802c59 <pxCurrentTCB+0x1>
    19b6:	82 8d       	ldd	r24, Z+26	; 0x1a
    19b8:	98 17       	cp	r25, r24
    19ba:	30 f0       	brcs	.+12     	; 0x19c8 <xTaskResumeAll+0x8c>
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	80 93 f3 2b 	sts	0x2BF3, r24	; 0x802bf3 <xYieldPending>
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <xTaskResumeAll+0x8c>
    19c4:	c0 e0       	ldi	r28, 0x00	; 0
    19c6:	d0 e0       	ldi	r29, 0x00	; 0
    19c8:	80 91 07 2c 	lds	r24, 0x2C07	; 0x802c07 <xPendingReadyList>
    19cc:	81 11       	cpse	r24, r1
    19ce:	ce cf       	rjmp	.-100    	; 0x196c <xTaskResumeAll+0x30>
    19d0:	cd 2b       	or	r28, r29
    19d2:	11 f0       	breq	.+4      	; 0x19d8 <xTaskResumeAll+0x9c>
    19d4:	0e 94 73 09 	call	0x12e6	; 0x12e6 <prvResetNextTaskUnblockTime>
    19d8:	c0 91 f4 2b 	lds	r28, 0x2BF4	; 0x802bf4 <uxPendedTicks>
    19dc:	cc 23       	and	r28, r28
    19de:	59 f0       	breq	.+22     	; 0x19f6 <xTaskResumeAll+0xba>
    19e0:	0e 94 ce 0b 	call	0x179c	; 0x179c <xTaskIncrementTick>
    19e4:	88 23       	and	r24, r24
    19e6:	19 f0       	breq	.+6      	; 0x19ee <xTaskResumeAll+0xb2>
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	80 93 f3 2b 	sts	0x2BF3, r24	; 0x802bf3 <xYieldPending>
    19ee:	c1 50       	subi	r28, 0x01	; 1
    19f0:	b9 f7       	brne	.-18     	; 0x19e0 <xTaskResumeAll+0xa4>
    19f2:	10 92 f4 2b 	sts	0x2BF4, r1	; 0x802bf4 <uxPendedTicks>
    19f6:	80 91 f3 2b 	lds	r24, 0x2BF3	; 0x802bf3 <xYieldPending>
    19fa:	88 23       	and	r24, r24
    19fc:	31 f0       	breq	.+12     	; 0x1a0a <xTaskResumeAll+0xce>
    19fe:	0e 94 8e 05 	call	0xb1c	; 0xb1c <vPortYield>
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	03 c0       	rjmp	.+6      	; 0x1a0c <xTaskResumeAll+0xd0>
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	01 c0       	rjmp	.+2      	; 0x1a0c <xTaskResumeAll+0xd0>
    1a0a:	80 e0       	ldi	r24, 0x00	; 0
    1a0c:	ff 91       	pop	r31
    1a0e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1a12:	df 91       	pop	r29
    1a14:	cf 91       	pop	r28
    1a16:	1f 91       	pop	r17
    1a18:	0f 91       	pop	r16
    1a1a:	08 95       	ret

00001a1c <vTaskDelay>:
    1a1c:	cf 92       	push	r12
    1a1e:	df 92       	push	r13
    1a20:	ef 92       	push	r14
    1a22:	ff 92       	push	r15
    1a24:	6b 01       	movw	r12, r22
    1a26:	7c 01       	movw	r14, r24
    1a28:	67 2b       	or	r22, r23
    1a2a:	68 2b       	or	r22, r24
    1a2c:	69 2b       	or	r22, r25
    1a2e:	51 f0       	breq	.+20     	; 0x1a44 <vTaskDelay+0x28>
    1a30:	0e 94 b6 0b 	call	0x176c	; 0x176c <vTaskSuspendAll>
    1a34:	40 e0       	ldi	r20, 0x00	; 0
    1a36:	c7 01       	movw	r24, r14
    1a38:	b6 01       	movw	r22, r12
    1a3a:	0e 94 a7 0a 	call	0x154e	; 0x154e <prvAddCurrentTaskToDelayedList>
    1a3e:	0e 94 9e 0c 	call	0x193c	; 0x193c <xTaskResumeAll>
    1a42:	01 c0       	rjmp	.+2      	; 0x1a46 <vTaskDelay+0x2a>
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	81 11       	cpse	r24, r1
    1a48:	02 c0       	rjmp	.+4      	; 0x1a4e <vTaskDelay+0x32>
    1a4a:	0e 94 8e 05 	call	0xb1c	; 0xb1c <vPortYield>
    1a4e:	ff 90       	pop	r15
    1a50:	ef 90       	pop	r14
    1a52:	df 90       	pop	r13
    1a54:	cf 90       	pop	r12
    1a56:	08 95       	ret

00001a58 <vTaskSwitchContext>:
    1a58:	80 91 ea 2b 	lds	r24, 0x2BEA	; 0x802bea <uxSchedulerSuspended>
    1a5c:	88 23       	and	r24, r24
    1a5e:	21 f0       	breq	.+8      	; 0x1a68 <vTaskSwitchContext+0x10>
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	80 93 f3 2b 	sts	0x2BF3, r24	; 0x802bf3 <xYieldPending>
    1a66:	08 95       	ret
    1a68:	10 92 f3 2b 	sts	0x2BF3, r1	; 0x802bf3 <xYieldPending>
    1a6c:	e0 91 58 2c 	lds	r30, 0x2C58	; 0x802c58 <pxCurrentTCB>
    1a70:	f0 91 59 2c 	lds	r31, 0x2C59	; 0x802c59 <pxCurrentTCB+0x1>
    1a74:	03 8c       	ldd	r0, Z+27	; 0x1b
    1a76:	f4 8d       	ldd	r31, Z+28	; 0x1c
    1a78:	e0 2d       	mov	r30, r0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	91 81       	ldd	r25, Z+1	; 0x01
    1a7e:	a2 81       	ldd	r26, Z+2	; 0x02
    1a80:	b3 81       	ldd	r27, Z+3	; 0x03
    1a82:	85 3a       	cpi	r24, 0xA5	; 165
    1a84:	95 4a       	sbci	r25, 0xA5	; 165
    1a86:	a5 4a       	sbci	r26, 0xA5	; 165
    1a88:	b5 4a       	sbci	r27, 0xA5	; 165
    1a8a:	d9 f4       	brne	.+54     	; 0x1ac2 <vTaskSwitchContext+0x6a>
    1a8c:	84 81       	ldd	r24, Z+4	; 0x04
    1a8e:	95 81       	ldd	r25, Z+5	; 0x05
    1a90:	a6 81       	ldd	r26, Z+6	; 0x06
    1a92:	b7 81       	ldd	r27, Z+7	; 0x07
    1a94:	85 3a       	cpi	r24, 0xA5	; 165
    1a96:	95 4a       	sbci	r25, 0xA5	; 165
    1a98:	a5 4a       	sbci	r26, 0xA5	; 165
    1a9a:	b5 4a       	sbci	r27, 0xA5	; 165
    1a9c:	91 f4       	brne	.+36     	; 0x1ac2 <vTaskSwitchContext+0x6a>
    1a9e:	80 85       	ldd	r24, Z+8	; 0x08
    1aa0:	91 85       	ldd	r25, Z+9	; 0x09
    1aa2:	a2 85       	ldd	r26, Z+10	; 0x0a
    1aa4:	b3 85       	ldd	r27, Z+11	; 0x0b
    1aa6:	85 3a       	cpi	r24, 0xA5	; 165
    1aa8:	95 4a       	sbci	r25, 0xA5	; 165
    1aaa:	a5 4a       	sbci	r26, 0xA5	; 165
    1aac:	b5 4a       	sbci	r27, 0xA5	; 165
    1aae:	49 f4       	brne	.+18     	; 0x1ac2 <vTaskSwitchContext+0x6a>
    1ab0:	84 85       	ldd	r24, Z+12	; 0x0c
    1ab2:	95 85       	ldd	r25, Z+13	; 0x0d
    1ab4:	a6 85       	ldd	r26, Z+14	; 0x0e
    1ab6:	b7 85       	ldd	r27, Z+15	; 0x0f
    1ab8:	85 3a       	cpi	r24, 0xA5	; 165
    1aba:	95 4a       	sbci	r25, 0xA5	; 165
    1abc:	a5 4a       	sbci	r26, 0xA5	; 165
    1abe:	b5 4a       	sbci	r27, 0xA5	; 165
    1ac0:	61 f0       	breq	.+24     	; 0x1ada <vTaskSwitchContext+0x82>
    1ac2:	60 91 58 2c 	lds	r22, 0x2C58	; 0x802c58 <pxCurrentTCB>
    1ac6:	70 91 59 2c 	lds	r23, 0x2C59	; 0x802c59 <pxCurrentTCB+0x1>
    1aca:	63 5e       	subi	r22, 0xE3	; 227
    1acc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ace:	80 91 58 2c 	lds	r24, 0x2C58	; 0x802c58 <pxCurrentTCB>
    1ad2:	90 91 59 2c 	lds	r25, 0x2C59	; 0x802c59 <pxCurrentTCB+0x1>
    1ad6:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <vApplicationStackOverflowHook>
    1ada:	80 91 f6 2b 	lds	r24, 0x2BF6	; 0x802bf6 <uxTopReadyPriority>
    1ade:	01 c0       	rjmp	.+2      	; 0x1ae2 <vTaskSwitchContext+0x8a>
    1ae0:	81 50       	subi	r24, 0x01	; 1
    1ae2:	28 2f       	mov	r18, r24
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	9b e0       	ldi	r25, 0x0B	; 11
    1ae8:	92 9f       	mul	r25, r18
    1aea:	f0 01       	movw	r30, r0
    1aec:	93 9f       	mul	r25, r19
    1aee:	f0 0d       	add	r31, r0
    1af0:	11 24       	eor	r1, r1
    1af2:	e4 5d       	subi	r30, 0xD4	; 212
    1af4:	f3 4d       	sbci	r31, 0xD3	; 211
    1af6:	90 81       	ld	r25, Z
    1af8:	99 23       	and	r25, r25
    1afa:	91 f3       	breq	.-28     	; 0x1ae0 <vTaskSwitchContext+0x88>
    1afc:	9b e0       	ldi	r25, 0x0B	; 11
    1afe:	92 9f       	mul	r25, r18
    1b00:	a0 01       	movw	r20, r0
    1b02:	93 9f       	mul	r25, r19
    1b04:	50 0d       	add	r21, r0
    1b06:	11 24       	eor	r1, r1
    1b08:	df 01       	movw	r26, r30
    1b0a:	01 80       	ldd	r0, Z+1	; 0x01
    1b0c:	f2 81       	ldd	r31, Z+2	; 0x02
    1b0e:	e0 2d       	mov	r30, r0
    1b10:	04 80       	ldd	r0, Z+4	; 0x04
    1b12:	f5 81       	ldd	r31, Z+5	; 0x05
    1b14:	e0 2d       	mov	r30, r0
    1b16:	11 96       	adiw	r26, 0x01	; 1
    1b18:	ed 93       	st	X+, r30
    1b1a:	fc 93       	st	X, r31
    1b1c:	12 97       	sbiw	r26, 0x02	; 2
    1b1e:	41 5d       	subi	r20, 0xD1	; 209
    1b20:	53 4d       	sbci	r21, 0xD3	; 211
    1b22:	e4 17       	cp	r30, r20
    1b24:	f5 07       	cpc	r31, r21
    1b26:	29 f4       	brne	.+10     	; 0x1b32 <vTaskSwitchContext+0xda>
    1b28:	44 81       	ldd	r20, Z+4	; 0x04
    1b2a:	55 81       	ldd	r21, Z+5	; 0x05
    1b2c:	fd 01       	movw	r30, r26
    1b2e:	41 83       	std	Z+1, r20	; 0x01
    1b30:	52 83       	std	Z+2, r21	; 0x02
    1b32:	9b e0       	ldi	r25, 0x0B	; 11
    1b34:	92 9f       	mul	r25, r18
    1b36:	f0 01       	movw	r30, r0
    1b38:	93 9f       	mul	r25, r19
    1b3a:	f0 0d       	add	r31, r0
    1b3c:	11 24       	eor	r1, r1
    1b3e:	e4 5d       	subi	r30, 0xD4	; 212
    1b40:	f3 4d       	sbci	r31, 0xD3	; 211
    1b42:	01 80       	ldd	r0, Z+1	; 0x01
    1b44:	f2 81       	ldd	r31, Z+2	; 0x02
    1b46:	e0 2d       	mov	r30, r0
    1b48:	20 85       	ldd	r18, Z+8	; 0x08
    1b4a:	31 85       	ldd	r19, Z+9	; 0x09
    1b4c:	20 93 58 2c 	sts	0x2C58, r18	; 0x802c58 <pxCurrentTCB>
    1b50:	30 93 59 2c 	sts	0x2C59, r19	; 0x802c59 <pxCurrentTCB+0x1>
    1b54:	80 93 f6 2b 	sts	0x2BF6, r24	; 0x802bf6 <uxTopReadyPriority>
    1b58:	08 95       	ret

00001b5a <vTaskPlaceOnEventList>:
    1b5a:	cf 92       	push	r12
    1b5c:	df 92       	push	r13
    1b5e:	ef 92       	push	r14
    1b60:	ff 92       	push	r15
    1b62:	6a 01       	movw	r12, r20
    1b64:	7b 01       	movw	r14, r22
    1b66:	60 91 58 2c 	lds	r22, 0x2C58	; 0x802c58 <pxCurrentTCB>
    1b6a:	70 91 59 2c 	lds	r23, 0x2C59	; 0x802c59 <pxCurrentTCB+0x1>
    1b6e:	62 5f       	subi	r22, 0xF2	; 242
    1b70:	7f 4f       	sbci	r23, 0xFF	; 255
    1b72:	0e 94 59 04 	call	0x8b2	; 0x8b2 <vListInsert>
    1b76:	41 e0       	ldi	r20, 0x01	; 1
    1b78:	c7 01       	movw	r24, r14
    1b7a:	b6 01       	movw	r22, r12
    1b7c:	0e 94 a7 0a 	call	0x154e	; 0x154e <prvAddCurrentTaskToDelayedList>
    1b80:	ff 90       	pop	r15
    1b82:	ef 90       	pop	r14
    1b84:	df 90       	pop	r13
    1b86:	cf 90       	pop	r12
    1b88:	08 95       	ret

00001b8a <vTaskPlaceOnUnorderedEventList>:
    1b8a:	cf 92       	push	r12
    1b8c:	df 92       	push	r13
    1b8e:	ef 92       	push	r14
    1b90:	ff 92       	push	r15
    1b92:	0f 93       	push	r16
    1b94:	1f 93       	push	r17
    1b96:	68 01       	movw	r12, r16
    1b98:	79 01       	movw	r14, r18
    1b9a:	e0 91 58 2c 	lds	r30, 0x2C58	; 0x802c58 <pxCurrentTCB>
    1b9e:	f0 91 59 2c 	lds	r31, 0x2C59	; 0x802c59 <pxCurrentTCB+0x1>
    1ba2:	70 68       	ori	r23, 0x80	; 128
    1ba4:	46 87       	std	Z+14, r20	; 0x0e
    1ba6:	57 87       	std	Z+15, r21	; 0x0f
    1ba8:	60 8b       	std	Z+16, r22	; 0x10
    1baa:	71 8b       	std	Z+17, r23	; 0x11
    1bac:	60 91 58 2c 	lds	r22, 0x2C58	; 0x802c58 <pxCurrentTCB>
    1bb0:	70 91 59 2c 	lds	r23, 0x2C59	; 0x802c59 <pxCurrentTCB+0x1>
    1bb4:	62 5f       	subi	r22, 0xF2	; 242
    1bb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb8:	0e 94 38 04 	call	0x870	; 0x870 <vListInsertEnd>
    1bbc:	41 e0       	ldi	r20, 0x01	; 1
    1bbe:	c7 01       	movw	r24, r14
    1bc0:	b6 01       	movw	r22, r12
    1bc2:	0e 94 a7 0a 	call	0x154e	; 0x154e <prvAddCurrentTaskToDelayedList>
    1bc6:	1f 91       	pop	r17
    1bc8:	0f 91       	pop	r16
    1bca:	ff 90       	pop	r15
    1bcc:	ef 90       	pop	r14
    1bce:	df 90       	pop	r13
    1bd0:	cf 90       	pop	r12
    1bd2:	08 95       	ret

00001bd4 <vTaskPlaceOnEventListRestricted>:
    1bd4:	cf 92       	push	r12
    1bd6:	df 92       	push	r13
    1bd8:	ef 92       	push	r14
    1bda:	ff 92       	push	r15
    1bdc:	cf 93       	push	r28
    1bde:	6a 01       	movw	r12, r20
    1be0:	7b 01       	movw	r14, r22
    1be2:	c2 2f       	mov	r28, r18
    1be4:	60 91 58 2c 	lds	r22, 0x2C58	; 0x802c58 <pxCurrentTCB>
    1be8:	70 91 59 2c 	lds	r23, 0x2C59	; 0x802c59 <pxCurrentTCB+0x1>
    1bec:	62 5f       	subi	r22, 0xF2	; 242
    1bee:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf0:	0e 94 38 04 	call	0x870	; 0x870 <vListInsertEnd>
    1bf4:	cc 23       	and	r28, r28
    1bf6:	21 f0       	breq	.+8      	; 0x1c00 <vTaskPlaceOnEventListRestricted+0x2c>
    1bf8:	cc 24       	eor	r12, r12
    1bfa:	ca 94       	dec	r12
    1bfc:	dc 2c       	mov	r13, r12
    1bfe:	76 01       	movw	r14, r12
    1c00:	4c 2f       	mov	r20, r28
    1c02:	c7 01       	movw	r24, r14
    1c04:	b6 01       	movw	r22, r12
    1c06:	0e 94 a7 0a 	call	0x154e	; 0x154e <prvAddCurrentTaskToDelayedList>
    1c0a:	cf 91       	pop	r28
    1c0c:	ff 90       	pop	r15
    1c0e:	ef 90       	pop	r14
    1c10:	df 90       	pop	r13
    1c12:	cf 90       	pop	r12
    1c14:	08 95       	ret

00001c16 <xTaskRemoveFromEventList>:
    1c16:	0f 93       	push	r16
    1c18:	1f 93       	push	r17
    1c1a:	cf 93       	push	r28
    1c1c:	df 93       	push	r29
    1c1e:	dc 01       	movw	r26, r24
    1c20:	17 96       	adiw	r26, 0x07	; 7
    1c22:	ed 91       	ld	r30, X+
    1c24:	fc 91       	ld	r31, X
    1c26:	18 97       	sbiw	r26, 0x08	; 8
    1c28:	c0 85       	ldd	r28, Z+8	; 0x08
    1c2a:	d1 85       	ldd	r29, Z+9	; 0x09
    1c2c:	8e 01       	movw	r16, r28
    1c2e:	02 5f       	subi	r16, 0xF2	; 242
    1c30:	1f 4f       	sbci	r17, 0xFF	; 255
    1c32:	c8 01       	movw	r24, r16
    1c34:	0e 94 96 04 	call	0x92c	; 0x92c <uxListRemove>
    1c38:	80 91 ea 2b 	lds	r24, 0x2BEA	; 0x802bea <uxSchedulerSuspended>
    1c3c:	81 11       	cpse	r24, r1
    1c3e:	16 c0       	rjmp	.+44     	; 0x1c6c <xTaskRemoveFromEventList+0x56>
    1c40:	0c 50       	subi	r16, 0x0C	; 12
    1c42:	11 09       	sbc	r17, r1
    1c44:	c8 01       	movw	r24, r16
    1c46:	0e 94 96 04 	call	0x92c	; 0x92c <uxListRemove>
    1c4a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c4c:	90 91 f6 2b 	lds	r25, 0x2BF6	; 0x802bf6 <uxTopReadyPriority>
    1c50:	98 17       	cp	r25, r24
    1c52:	10 f4       	brcc	.+4      	; 0x1c58 <xTaskRemoveFromEventList+0x42>
    1c54:	80 93 f6 2b 	sts	0x2BF6, r24	; 0x802bf6 <uxTopReadyPriority>
    1c58:	bb e0       	ldi	r27, 0x0B	; 11
    1c5a:	8b 9f       	mul	r24, r27
    1c5c:	c0 01       	movw	r24, r0
    1c5e:	11 24       	eor	r1, r1
    1c60:	b8 01       	movw	r22, r16
    1c62:	84 5d       	subi	r24, 0xD4	; 212
    1c64:	93 4d       	sbci	r25, 0xD3	; 211
    1c66:	0e 94 38 04 	call	0x870	; 0x870 <vListInsertEnd>
    1c6a:	05 c0       	rjmp	.+10     	; 0x1c76 <xTaskRemoveFromEventList+0x60>
    1c6c:	b8 01       	movw	r22, r16
    1c6e:	87 e0       	ldi	r24, 0x07	; 7
    1c70:	9c e2       	ldi	r25, 0x2C	; 44
    1c72:	0e 94 38 04 	call	0x870	; 0x870 <vListInsertEnd>
    1c76:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1c78:	e0 91 58 2c 	lds	r30, 0x2C58	; 0x802c58 <pxCurrentTCB>
    1c7c:	f0 91 59 2c 	lds	r31, 0x2C59	; 0x802c59 <pxCurrentTCB+0x1>
    1c80:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c82:	89 17       	cp	r24, r25
    1c84:	20 f4       	brcc	.+8      	; 0x1c8e <xTaskRemoveFromEventList+0x78>
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	80 93 f3 2b 	sts	0x2BF3, r24	; 0x802bf3 <xYieldPending>
    1c8c:	01 c0       	rjmp	.+2      	; 0x1c90 <xTaskRemoveFromEventList+0x7a>
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	df 91       	pop	r29
    1c92:	cf 91       	pop	r28
    1c94:	1f 91       	pop	r17
    1c96:	0f 91       	pop	r16
    1c98:	08 95       	ret

00001c9a <vTaskRemoveFromUnorderedEventList>:
    1c9a:	0f 93       	push	r16
    1c9c:	1f 93       	push	r17
    1c9e:	cf 93       	push	r28
    1ca0:	df 93       	push	r29
    1ca2:	70 68       	ori	r23, 0x80	; 128
    1ca4:	fc 01       	movw	r30, r24
    1ca6:	40 83       	st	Z, r20
    1ca8:	51 83       	std	Z+1, r21	; 0x01
    1caa:	62 83       	std	Z+2, r22	; 0x02
    1cac:	73 83       	std	Z+3, r23	; 0x03
    1cae:	c0 85       	ldd	r28, Z+8	; 0x08
    1cb0:	d1 85       	ldd	r29, Z+9	; 0x09
    1cb2:	0e 94 96 04 	call	0x92c	; 0x92c <uxListRemove>
    1cb6:	8e 01       	movw	r16, r28
    1cb8:	0e 5f       	subi	r16, 0xFE	; 254
    1cba:	1f 4f       	sbci	r17, 0xFF	; 255
    1cbc:	c8 01       	movw	r24, r16
    1cbe:	0e 94 96 04 	call	0x92c	; 0x92c <uxListRemove>
    1cc2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1cc4:	90 91 f6 2b 	lds	r25, 0x2BF6	; 0x802bf6 <uxTopReadyPriority>
    1cc8:	98 17       	cp	r25, r24
    1cca:	10 f4       	brcc	.+4      	; 0x1cd0 <vTaskRemoveFromUnorderedEventList+0x36>
    1ccc:	80 93 f6 2b 	sts	0x2BF6, r24	; 0x802bf6 <uxTopReadyPriority>
    1cd0:	fb e0       	ldi	r31, 0x0B	; 11
    1cd2:	8f 9f       	mul	r24, r31
    1cd4:	c0 01       	movw	r24, r0
    1cd6:	11 24       	eor	r1, r1
    1cd8:	b8 01       	movw	r22, r16
    1cda:	84 5d       	subi	r24, 0xD4	; 212
    1cdc:	93 4d       	sbci	r25, 0xD3	; 211
    1cde:	0e 94 38 04 	call	0x870	; 0x870 <vListInsertEnd>
    1ce2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1ce4:	e0 91 58 2c 	lds	r30, 0x2C58	; 0x802c58 <pxCurrentTCB>
    1ce8:	f0 91 59 2c 	lds	r31, 0x2C59	; 0x802c59 <pxCurrentTCB+0x1>
    1cec:	82 8d       	ldd	r24, Z+26	; 0x1a
    1cee:	89 17       	cp	r24, r25
    1cf0:	18 f4       	brcc	.+6      	; 0x1cf8 <vTaskRemoveFromUnorderedEventList+0x5e>
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	80 93 f3 2b 	sts	0x2BF3, r24	; 0x802bf3 <xYieldPending>
    1cf8:	df 91       	pop	r29
    1cfa:	cf 91       	pop	r28
    1cfc:	1f 91       	pop	r17
    1cfe:	0f 91       	pop	r16
    1d00:	08 95       	ret

00001d02 <vTaskInternalSetTimeOutState>:
    1d02:	20 91 f2 2b 	lds	r18, 0x2BF2	; 0x802bf2 <xNumOfOverflows>
    1d06:	fc 01       	movw	r30, r24
    1d08:	20 83       	st	Z, r18
    1d0a:	40 91 f7 2b 	lds	r20, 0x2BF7	; 0x802bf7 <xTickCount>
    1d0e:	50 91 f8 2b 	lds	r21, 0x2BF8	; 0x802bf8 <xTickCount+0x1>
    1d12:	60 91 f9 2b 	lds	r22, 0x2BF9	; 0x802bf9 <xTickCount+0x2>
    1d16:	70 91 fa 2b 	lds	r23, 0x2BFA	; 0x802bfa <xTickCount+0x3>
    1d1a:	41 83       	std	Z+1, r20	; 0x01
    1d1c:	52 83       	std	Z+2, r21	; 0x02
    1d1e:	63 83       	std	Z+3, r22	; 0x03
    1d20:	74 83       	std	Z+4, r23	; 0x04
    1d22:	08 95       	ret

00001d24 <xTaskCheckForTimeOut>:
    1d24:	8f 92       	push	r8
    1d26:	9f 92       	push	r9
    1d28:	af 92       	push	r10
    1d2a:	bf 92       	push	r11
    1d2c:	cf 92       	push	r12
    1d2e:	df 92       	push	r13
    1d30:	ef 92       	push	r14
    1d32:	ff 92       	push	r15
    1d34:	0f 93       	push	r16
    1d36:	1f 93       	push	r17
    1d38:	cf 93       	push	r28
    1d3a:	df 93       	push	r29
    1d3c:	db 01       	movw	r26, r22
    1d3e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1d42:	ff 93       	push	r31
    1d44:	f8 7f       	andi	r31, 0xF8	; 248
    1d46:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1d4a:	c0 90 f7 2b 	lds	r12, 0x2BF7	; 0x802bf7 <xTickCount>
    1d4e:	d0 90 f8 2b 	lds	r13, 0x2BF8	; 0x802bf8 <xTickCount+0x1>
    1d52:	e0 90 f9 2b 	lds	r14, 0x2BF9	; 0x802bf9 <xTickCount+0x2>
    1d56:	f0 90 fa 2b 	lds	r15, 0x2BFA	; 0x802bfa <xTickCount+0x3>
    1d5a:	ec 01       	movw	r28, r24
    1d5c:	09 81       	ldd	r16, Y+1	; 0x01
    1d5e:	1a 81       	ldd	r17, Y+2	; 0x02
    1d60:	2b 81       	ldd	r18, Y+3	; 0x03
    1d62:	3c 81       	ldd	r19, Y+4	; 0x04
    1d64:	46 01       	movw	r8, r12
    1d66:	57 01       	movw	r10, r14
    1d68:	80 1a       	sub	r8, r16
    1d6a:	91 0a       	sbc	r9, r17
    1d6c:	a2 0a       	sbc	r10, r18
    1d6e:	b3 0a       	sbc	r11, r19
    1d70:	4d 91       	ld	r20, X+
    1d72:	5d 91       	ld	r21, X+
    1d74:	6d 91       	ld	r22, X+
    1d76:	7c 91       	ld	r23, X
    1d78:	13 97       	sbiw	r26, 0x03	; 3
    1d7a:	4f 3f       	cpi	r20, 0xFF	; 255
    1d7c:	df ef       	ldi	r29, 0xFF	; 255
    1d7e:	5d 07       	cpc	r21, r29
    1d80:	6d 07       	cpc	r22, r29
    1d82:	7d 07       	cpc	r23, r29
    1d84:	21 f1       	breq	.+72     	; 0x1dce <xTaskCheckForTimeOut+0xaa>
    1d86:	ec 01       	movw	r28, r24
    1d88:	f8 81       	ld	r31, Y
    1d8a:	e0 91 f2 2b 	lds	r30, 0x2BF2	; 0x802bf2 <xNumOfOverflows>
    1d8e:	fe 17       	cp	r31, r30
    1d90:	29 f0       	breq	.+10     	; 0x1d9c <xTaskCheckForTimeOut+0x78>
    1d92:	c0 16       	cp	r12, r16
    1d94:	d1 06       	cpc	r13, r17
    1d96:	e2 06       	cpc	r14, r18
    1d98:	f3 06       	cpc	r15, r19
    1d9a:	d8 f4       	brcc	.+54     	; 0x1dd2 <xTaskCheckForTimeOut+0xae>
    1d9c:	84 16       	cp	r8, r20
    1d9e:	95 06       	cpc	r9, r21
    1da0:	a6 06       	cpc	r10, r22
    1da2:	b7 06       	cpc	r11, r23
    1da4:	68 f4       	brcc	.+26     	; 0x1dc0 <xTaskCheckForTimeOut+0x9c>
    1da6:	48 19       	sub	r20, r8
    1da8:	59 09       	sbc	r21, r9
    1daa:	6a 09       	sbc	r22, r10
    1dac:	7b 09       	sbc	r23, r11
    1dae:	4d 93       	st	X+, r20
    1db0:	5d 93       	st	X+, r21
    1db2:	6d 93       	st	X+, r22
    1db4:	7c 93       	st	X, r23
    1db6:	13 97       	sbiw	r26, 0x03	; 3
    1db8:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <vTaskInternalSetTimeOutState>
    1dbc:	80 e0       	ldi	r24, 0x00	; 0
    1dbe:	0a c0       	rjmp	.+20     	; 0x1dd4 <xTaskCheckForTimeOut+0xb0>
    1dc0:	1d 92       	st	X+, r1
    1dc2:	1d 92       	st	X+, r1
    1dc4:	1d 92       	st	X+, r1
    1dc6:	1c 92       	st	X, r1
    1dc8:	13 97       	sbiw	r26, 0x03	; 3
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	03 c0       	rjmp	.+6      	; 0x1dd4 <xTaskCheckForTimeOut+0xb0>
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	01 c0       	rjmp	.+2      	; 0x1dd4 <xTaskCheckForTimeOut+0xb0>
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	ff 91       	pop	r31
    1dd6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1dda:	df 91       	pop	r29
    1ddc:	cf 91       	pop	r28
    1dde:	1f 91       	pop	r17
    1de0:	0f 91       	pop	r16
    1de2:	ff 90       	pop	r15
    1de4:	ef 90       	pop	r14
    1de6:	df 90       	pop	r13
    1de8:	cf 90       	pop	r12
    1dea:	bf 90       	pop	r11
    1dec:	af 90       	pop	r10
    1dee:	9f 90       	pop	r9
    1df0:	8f 90       	pop	r8
    1df2:	08 95       	ret

00001df4 <vTaskMissedYield>:
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	80 93 f3 2b 	sts	0x2BF3, r24	; 0x802bf3 <xYieldPending>
    1dfa:	08 95       	ret

00001dfc <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    1dfc:	80 91 f5 2b 	lds	r24, 0x2BF5	; 0x802bf5 <xSchedulerRunning>
    1e00:	88 23       	and	r24, r24
    1e02:	31 f0       	breq	.+12     	; 0x1e10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1e04:	80 91 ea 2b 	lds	r24, 0x2BEA	; 0x802bea <uxSchedulerSuspended>
    1e08:	81 11       	cpse	r24, r1
    1e0a:	04 c0       	rjmp	.+8      	; 0x1e14 <xTaskGetSchedulerState+0x18>
			{
				xReturn = taskSCHEDULER_RUNNING;
    1e0c:	82 e0       	ldi	r24, 0x02	; 2
    1e0e:	08 95       	ret
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	08 95       	ret
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    1e14:	80 e0       	ldi	r24, 0x00	; 0
			}
		}

		return xReturn;
	}
    1e16:	08 95       	ret

00001e18 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    1e18:	cf 92       	push	r12
    1e1a:	df 92       	push	r13
    1e1c:	ef 92       	push	r14
    1e1e:	ff 92       	push	r15
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    1e20:	e0 91 58 2c 	lds	r30, 0x2C58	; 0x802c58 <pxCurrentTCB>
    1e24:	f0 91 59 2c 	lds	r31, 0x2C59	; 0x802c59 <pxCurrentTCB+0x1>
    1e28:	66 85       	ldd	r22, Z+14	; 0x0e
    1e2a:	77 85       	ldd	r23, Z+15	; 0x0f
    1e2c:	80 89       	ldd	r24, Z+16	; 0x10
    1e2e:	91 89       	ldd	r25, Z+17	; 0x11

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1e30:	e0 91 58 2c 	lds	r30, 0x2C58	; 0x802c58 <pxCurrentTCB>
    1e34:	f0 91 59 2c 	lds	r31, 0x2C59	; 0x802c59 <pxCurrentTCB+0x1>
    1e38:	a0 91 58 2c 	lds	r26, 0x2C58	; 0x802c58 <pxCurrentTCB>
    1e3c:	b0 91 59 2c 	lds	r27, 0x2C59	; 0x802c59 <pxCurrentTCB+0x1>
    1e40:	5a 96       	adiw	r26, 0x1a	; 26
    1e42:	2c 91       	ld	r18, X
    1e44:	c1 2c       	mov	r12, r1
    1e46:	d1 2c       	mov	r13, r1
    1e48:	76 01       	movw	r14, r12
    1e4a:	68 94       	set
    1e4c:	c2 f8       	bld	r12, 2
    1e4e:	c2 1a       	sub	r12, r18
    1e50:	d1 08       	sbc	r13, r1
    1e52:	e1 08       	sbc	r14, r1
    1e54:	f1 08       	sbc	r15, r1
    1e56:	c6 86       	std	Z+14, r12	; 0x0e
    1e58:	d7 86       	std	Z+15, r13	; 0x0f
    1e5a:	e0 8a       	std	Z+16, r14	; 0x10
    1e5c:	f1 8a       	std	Z+17, r15	; 0x11

	return uxReturn;
}
    1e5e:	ff 90       	pop	r15
    1e60:	ef 90       	pop	r14
    1e62:	df 90       	pop	r13
    1e64:	cf 90       	pop	r12
    1e66:	08 95       	ret

00001e68 <prvGetNextExpireTime>:

	taskENTER_CRITICAL();
	{
		pxTimer->pvTimerID = pvNewID;
	}
	taskEXIT_CRITICAL();
    1e68:	dc 01       	movw	r26, r24
    1e6a:	e0 91 64 2c 	lds	r30, 0x2C64	; 0x802c64 <pxCurrentTimerList>
    1e6e:	f0 91 65 2c 	lds	r31, 0x2C65	; 0x802c65 <pxCurrentTimerList+0x1>
    1e72:	80 81       	ld	r24, Z
    1e74:	91 e0       	ldi	r25, 0x01	; 1
    1e76:	81 11       	cpse	r24, r1
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	9c 93       	st	X, r25
    1e7c:	91 11       	cpse	r25, r1
    1e7e:	08 c0       	rjmp	.+16     	; 0x1e90 <prvGetNextExpireTime+0x28>
    1e80:	07 80       	ldd	r0, Z+7	; 0x07
    1e82:	f0 85       	ldd	r31, Z+8	; 0x08
    1e84:	e0 2d       	mov	r30, r0
    1e86:	60 81       	ld	r22, Z
    1e88:	71 81       	ldd	r23, Z+1	; 0x01
    1e8a:	82 81       	ldd	r24, Z+2	; 0x02
    1e8c:	93 81       	ldd	r25, Z+3	; 0x03
    1e8e:	08 95       	ret
    1e90:	60 e0       	ldi	r22, 0x00	; 0
    1e92:	70 e0       	ldi	r23, 0x00	; 0
    1e94:	cb 01       	movw	r24, r22
    1e96:	08 95       	ret

00001e98 <prvInsertTimerInActiveList>:
    1e98:	cf 92       	push	r12
    1e9a:	df 92       	push	r13
    1e9c:	ef 92       	push	r14
    1e9e:	ff 92       	push	r15
    1ea0:	0f 93       	push	r16
    1ea2:	1f 93       	push	r17
    1ea4:	fc 01       	movw	r30, r24
    1ea6:	42 83       	std	Z+2, r20	; 0x02
    1ea8:	53 83       	std	Z+3, r21	; 0x03
    1eaa:	64 83       	std	Z+4, r22	; 0x04
    1eac:	75 83       	std	Z+5, r23	; 0x05
    1eae:	82 87       	std	Z+10, r24	; 0x0a
    1eb0:	93 87       	std	Z+11, r25	; 0x0b
    1eb2:	04 17       	cp	r16, r20
    1eb4:	15 07       	cpc	r17, r21
    1eb6:	26 07       	cpc	r18, r22
    1eb8:	37 07       	cpc	r19, r23
    1eba:	c0 f0       	brcs	.+48     	; 0x1eec <prvInsertTimerInActiveList+0x54>
    1ebc:	0c 19       	sub	r16, r12
    1ebe:	1d 09       	sbc	r17, r13
    1ec0:	2e 09       	sbc	r18, r14
    1ec2:	3f 09       	sbc	r19, r15
    1ec4:	86 85       	ldd	r24, Z+14	; 0x0e
    1ec6:	97 85       	ldd	r25, Z+15	; 0x0f
    1ec8:	a0 89       	ldd	r26, Z+16	; 0x10
    1eca:	b1 89       	ldd	r27, Z+17	; 0x11
    1ecc:	08 17       	cp	r16, r24
    1ece:	19 07       	cpc	r17, r25
    1ed0:	2a 07       	cpc	r18, r26
    1ed2:	3b 07       	cpc	r19, r27
    1ed4:	00 f5       	brcc	.+64     	; 0x1f16 <prvInsertTimerInActiveList+0x7e>
    1ed6:	bf 01       	movw	r22, r30
    1ed8:	6e 5f       	subi	r22, 0xFE	; 254
    1eda:	7f 4f       	sbci	r23, 0xFF	; 255
    1edc:	80 91 62 2c 	lds	r24, 0x2C62	; 0x802c62 <pxOverflowTimerList>
    1ee0:	90 91 63 2c 	lds	r25, 0x2C63	; 0x802c63 <pxOverflowTimerList+0x1>
    1ee4:	0e 94 59 04 	call	0x8b2	; 0x8b2 <vListInsert>
    1ee8:	80 e0       	ldi	r24, 0x00	; 0
    1eea:	18 c0       	rjmp	.+48     	; 0x1f1c <prvInsertTimerInActiveList+0x84>
    1eec:	0c 15       	cp	r16, r12
    1eee:	1d 05       	cpc	r17, r13
    1ef0:	2e 05       	cpc	r18, r14
    1ef2:	3f 05       	cpc	r19, r15
    1ef4:	28 f4       	brcc	.+10     	; 0x1f00 <prvInsertTimerInActiveList+0x68>
    1ef6:	4c 15       	cp	r20, r12
    1ef8:	5d 05       	cpc	r21, r13
    1efa:	6e 05       	cpc	r22, r14
    1efc:	7f 05       	cpc	r23, r15
    1efe:	68 f4       	brcc	.+26     	; 0x1f1a <prvInsertTimerInActiveList+0x82>
    1f00:	bf 01       	movw	r22, r30
    1f02:	6e 5f       	subi	r22, 0xFE	; 254
    1f04:	7f 4f       	sbci	r23, 0xFF	; 255
    1f06:	80 91 64 2c 	lds	r24, 0x2C64	; 0x802c64 <pxCurrentTimerList>
    1f0a:	90 91 65 2c 	lds	r25, 0x2C65	; 0x802c65 <pxCurrentTimerList+0x1>
    1f0e:	0e 94 59 04 	call	0x8b2	; 0x8b2 <vListInsert>
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	03 c0       	rjmp	.+6      	; 0x1f1c <prvInsertTimerInActiveList+0x84>
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	01 c0       	rjmp	.+2      	; 0x1f1c <prvInsertTimerInActiveList+0x84>
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	1f 91       	pop	r17
    1f1e:	0f 91       	pop	r16
    1f20:	ff 90       	pop	r15
    1f22:	ef 90       	pop	r14
    1f24:	df 90       	pop	r13
    1f26:	cf 90       	pop	r12
    1f28:	08 95       	ret

00001f2a <prvCheckForValidListAndQueue>:
    1f2a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1f2e:	ff 93       	push	r31
    1f30:	f8 7f       	andi	r31, 0xF8	; 248
    1f32:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1f36:	80 91 60 2c 	lds	r24, 0x2C60	; 0x802c60 <xTimerQueue>
    1f3a:	90 91 61 2c 	lds	r25, 0x2C61	; 0x802c61 <xTimerQueue+0x1>
    1f3e:	89 2b       	or	r24, r25
    1f40:	e9 f4       	brne	.+58     	; 0x1f7c <prvCheckForValidListAndQueue+0x52>
    1f42:	81 e7       	ldi	r24, 0x71	; 113
    1f44:	9c e2       	ldi	r25, 0x2C	; 44
    1f46:	0e 94 23 04 	call	0x846	; 0x846 <vListInitialise>
    1f4a:	86 e6       	ldi	r24, 0x66	; 102
    1f4c:	9c e2       	ldi	r25, 0x2C	; 44
    1f4e:	0e 94 23 04 	call	0x846	; 0x846 <vListInitialise>
    1f52:	81 e7       	ldi	r24, 0x71	; 113
    1f54:	9c e2       	ldi	r25, 0x2C	; 44
    1f56:	80 93 64 2c 	sts	0x2C64, r24	; 0x802c64 <pxCurrentTimerList>
    1f5a:	90 93 65 2c 	sts	0x2C65, r25	; 0x802c65 <pxCurrentTimerList+0x1>
    1f5e:	86 e6       	ldi	r24, 0x66	; 102
    1f60:	9c e2       	ldi	r25, 0x2C	; 44
    1f62:	80 93 62 2c 	sts	0x2C62, r24	; 0x802c62 <pxOverflowTimerList>
    1f66:	90 93 63 2c 	sts	0x2C63, r25	; 0x802c63 <pxOverflowTimerList+0x1>
    1f6a:	40 e0       	ldi	r20, 0x00	; 0
    1f6c:	69 e0       	ldi	r22, 0x09	; 9
    1f6e:	85 e0       	ldi	r24, 0x05	; 5
    1f70:	0e 94 99 07 	call	0xf32	; 0xf32 <xQueueGenericCreate>
    1f74:	80 93 60 2c 	sts	0x2C60, r24	; 0x802c60 <xTimerQueue>
    1f78:	90 93 61 2c 	sts	0x2C61, r25	; 0x802c61 <xTimerQueue+0x1>
    1f7c:	ff 91       	pop	r31
    1f7e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1f82:	08 95       	ret

00001f84 <xTimerCreateTimerTask>:
    1f84:	ef 92       	push	r14
    1f86:	ff 92       	push	r15
    1f88:	0f 93       	push	r16
    1f8a:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <prvCheckForValidListAndQueue>
    1f8e:	80 91 60 2c 	lds	r24, 0x2C60	; 0x802c60 <xTimerQueue>
    1f92:	90 91 61 2c 	lds	r25, 0x2C61	; 0x802c61 <xTimerQueue+0x1>
    1f96:	89 2b       	or	r24, r25
    1f98:	91 f0       	breq	.+36     	; 0x1fbe <xTimerCreateTimerTask+0x3a>
    1f9a:	0f 2e       	mov	r0, r31
    1f9c:	fe e5       	ldi	r31, 0x5E	; 94
    1f9e:	ef 2e       	mov	r14, r31
    1fa0:	fc e2       	ldi	r31, 0x2C	; 44
    1fa2:	ff 2e       	mov	r15, r31
    1fa4:	f0 2d       	mov	r31, r0
    1fa6:	03 e0       	ldi	r16, 0x03	; 3
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	48 ec       	ldi	r20, 0xC8	; 200
    1fae:	50 e0       	ldi	r21, 0x00	; 0
    1fb0:	65 e0       	ldi	r22, 0x05	; 5
    1fb2:	70 e2       	ldi	r23, 0x20	; 32
    1fb4:	80 e3       	ldi	r24, 0x30	; 48
    1fb6:	92 e1       	ldi	r25, 0x12	; 18
    1fb8:	0e 94 27 0b 	call	0x164e	; 0x164e <xTaskCreate>
    1fbc:	01 c0       	rjmp	.+2      	; 0x1fc0 <xTimerCreateTimerTask+0x3c>
    1fbe:	80 e0       	ldi	r24, 0x00	; 0
    1fc0:	0f 91       	pop	r16
    1fc2:	ff 90       	pop	r15
    1fc4:	ef 90       	pop	r14
    1fc6:	08 95       	ret

00001fc8 <xTimerGenericCommand>:
    1fc8:	8f 92       	push	r8
    1fca:	9f 92       	push	r9
    1fcc:	af 92       	push	r10
    1fce:	bf 92       	push	r11
    1fd0:	cf 92       	push	r12
    1fd2:	df 92       	push	r13
    1fd4:	ef 92       	push	r14
    1fd6:	ff 92       	push	r15
    1fd8:	0f 93       	push	r16
    1fda:	1f 93       	push	r17
    1fdc:	cf 93       	push	r28
    1fde:	df 93       	push	r29
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
    1fe4:	29 97       	sbiw	r28, 0x09	; 9
    1fe6:	cd bf       	out	0x3d, r28	; 61
    1fe8:	de bf       	out	0x3e, r29	; 62
    1fea:	e0 91 60 2c 	lds	r30, 0x2C60	; 0x802c60 <xTimerQueue>
    1fee:	f0 91 61 2c 	lds	r31, 0x2C61	; 0x802c61 <xTimerQueue+0x1>
    1ff2:	30 97       	sbiw	r30, 0x00	; 0
    1ff4:	89 f1       	breq	.+98     	; 0x2058 <__DATA_REGION_LENGTH__+0x58>
    1ff6:	69 83       	std	Y+1, r22	; 0x01
    1ff8:	2a 83       	std	Y+2, r18	; 0x02
    1ffa:	3b 83       	std	Y+3, r19	; 0x03
    1ffc:	4c 83       	std	Y+4, r20	; 0x04
    1ffe:	5d 83       	std	Y+5, r21	; 0x05
    2000:	8e 83       	std	Y+6, r24	; 0x06
    2002:	9f 83       	std	Y+7, r25	; 0x07
    2004:	66 30       	cpi	r22, 0x06	; 6
    2006:	fc f4       	brge	.+62     	; 0x2046 <__DATA_REGION_LENGTH__+0x46>
    2008:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <xTaskGetSchedulerState>
    200c:	82 30       	cpi	r24, 0x02	; 2
    200e:	69 f4       	brne	.+26     	; 0x202a <__DATA_REGION_LENGTH__+0x2a>
    2010:	00 e0       	ldi	r16, 0x00	; 0
    2012:	a7 01       	movw	r20, r14
    2014:	96 01       	movw	r18, r12
    2016:	be 01       	movw	r22, r28
    2018:	6f 5f       	subi	r22, 0xFF	; 255
    201a:	7f 4f       	sbci	r23, 0xFF	; 255
    201c:	80 91 60 2c 	lds	r24, 0x2C60	; 0x802c60 <xTimerQueue>
    2020:	90 91 61 2c 	lds	r25, 0x2C61	; 0x802c61 <xTimerQueue+0x1>
    2024:	0e 94 c3 07 	call	0xf86	; 0xf86 <xQueueGenericSend>
    2028:	18 c0       	rjmp	.+48     	; 0x205a <__DATA_REGION_LENGTH__+0x5a>
    202a:	00 e0       	ldi	r16, 0x00	; 0
    202c:	20 e0       	ldi	r18, 0x00	; 0
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	a9 01       	movw	r20, r18
    2032:	be 01       	movw	r22, r28
    2034:	6f 5f       	subi	r22, 0xFF	; 255
    2036:	7f 4f       	sbci	r23, 0xFF	; 255
    2038:	80 91 60 2c 	lds	r24, 0x2C60	; 0x802c60 <xTimerQueue>
    203c:	90 91 61 2c 	lds	r25, 0x2C61	; 0x802c61 <xTimerQueue+0x1>
    2040:	0e 94 c3 07 	call	0xf86	; 0xf86 <xQueueGenericSend>
    2044:	0a c0       	rjmp	.+20     	; 0x205a <__DATA_REGION_LENGTH__+0x5a>
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	a8 01       	movw	r20, r16
    204a:	be 01       	movw	r22, r28
    204c:	6f 5f       	subi	r22, 0xFF	; 255
    204e:	7f 4f       	sbci	r23, 0xFF	; 255
    2050:	cf 01       	movw	r24, r30
    2052:	0e 94 62 08 	call	0x10c4	; 0x10c4 <xQueueGenericSendFromISR>
    2056:	01 c0       	rjmp	.+2      	; 0x205a <__DATA_REGION_LENGTH__+0x5a>
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	29 96       	adiw	r28, 0x09	; 9
    205c:	cd bf       	out	0x3d, r28	; 61
    205e:	de bf       	out	0x3e, r29	; 62
    2060:	df 91       	pop	r29
    2062:	cf 91       	pop	r28
    2064:	1f 91       	pop	r17
    2066:	0f 91       	pop	r16
    2068:	ff 90       	pop	r15
    206a:	ef 90       	pop	r14
    206c:	df 90       	pop	r13
    206e:	cf 90       	pop	r12
    2070:	bf 90       	pop	r11
    2072:	af 90       	pop	r10
    2074:	9f 90       	pop	r9
    2076:	8f 90       	pop	r8
    2078:	08 95       	ret

0000207a <prvSwitchTimerLists>:
    207a:	8f 92       	push	r8
    207c:	9f 92       	push	r9
    207e:	af 92       	push	r10
    2080:	bf 92       	push	r11
    2082:	cf 92       	push	r12
    2084:	df 92       	push	r13
    2086:	ef 92       	push	r14
    2088:	ff 92       	push	r15
    208a:	0f 93       	push	r16
    208c:	1f 93       	push	r17
    208e:	cf 93       	push	r28
    2090:	df 93       	push	r29
    2092:	3c c0       	rjmp	.+120    	; 0x210c <prvSwitchTimerLists+0x92>
    2094:	07 80       	ldd	r0, Z+7	; 0x07
    2096:	f0 85       	ldd	r31, Z+8	; 0x08
    2098:	e0 2d       	mov	r30, r0
    209a:	80 80       	ld	r8, Z
    209c:	91 80       	ldd	r9, Z+1	; 0x01
    209e:	a2 80       	ldd	r10, Z+2	; 0x02
    20a0:	b3 80       	ldd	r11, Z+3	; 0x03
    20a2:	c0 85       	ldd	r28, Z+8	; 0x08
    20a4:	d1 85       	ldd	r29, Z+9	; 0x09
    20a6:	8e 01       	movw	r16, r28
    20a8:	0e 5f       	subi	r16, 0xFE	; 254
    20aa:	1f 4f       	sbci	r17, 0xFF	; 255
    20ac:	c8 01       	movw	r24, r16
    20ae:	0e 94 96 04 	call	0x92c	; 0x92c <uxListRemove>
    20b2:	ed 89       	ldd	r30, Y+21	; 0x15
    20b4:	fe 89       	ldd	r31, Y+22	; 0x16
    20b6:	ce 01       	movw	r24, r28
    20b8:	19 95       	eicall
    20ba:	8a 89       	ldd	r24, Y+18	; 0x12
    20bc:	81 30       	cpi	r24, 0x01	; 1
    20be:	31 f5       	brne	.+76     	; 0x210c <prvSwitchTimerLists+0x92>
    20c0:	8e 85       	ldd	r24, Y+14	; 0x0e
    20c2:	9f 85       	ldd	r25, Y+15	; 0x0f
    20c4:	a8 89       	ldd	r26, Y+16	; 0x10
    20c6:	b9 89       	ldd	r27, Y+17	; 0x11
    20c8:	88 0d       	add	r24, r8
    20ca:	99 1d       	adc	r25, r9
    20cc:	aa 1d       	adc	r26, r10
    20ce:	bb 1d       	adc	r27, r11
    20d0:	88 16       	cp	r8, r24
    20d2:	99 06       	cpc	r9, r25
    20d4:	aa 06       	cpc	r10, r26
    20d6:	bb 06       	cpc	r11, r27
    20d8:	70 f4       	brcc	.+28     	; 0x20f6 <prvSwitchTimerLists+0x7c>
    20da:	8a 83       	std	Y+2, r24	; 0x02
    20dc:	9b 83       	std	Y+3, r25	; 0x03
    20de:	ac 83       	std	Y+4, r26	; 0x04
    20e0:	bd 83       	std	Y+5, r27	; 0x05
    20e2:	ca 87       	std	Y+10, r28	; 0x0a
    20e4:	db 87       	std	Y+11, r29	; 0x0b
    20e6:	b8 01       	movw	r22, r16
    20e8:	80 91 64 2c 	lds	r24, 0x2C64	; 0x802c64 <pxCurrentTimerList>
    20ec:	90 91 65 2c 	lds	r25, 0x2C65	; 0x802c65 <pxCurrentTimerList+0x1>
    20f0:	0e 94 59 04 	call	0x8b2	; 0x8b2 <vListInsert>
    20f4:	0b c0       	rjmp	.+22     	; 0x210c <prvSwitchTimerLists+0x92>
    20f6:	c1 2c       	mov	r12, r1
    20f8:	d1 2c       	mov	r13, r1
    20fa:	76 01       	movw	r14, r12
    20fc:	00 e0       	ldi	r16, 0x00	; 0
    20fe:	10 e0       	ldi	r17, 0x00	; 0
    2100:	a5 01       	movw	r20, r10
    2102:	94 01       	movw	r18, r8
    2104:	60 e0       	ldi	r22, 0x00	; 0
    2106:	ce 01       	movw	r24, r28
    2108:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <xTimerGenericCommand>
    210c:	e0 91 64 2c 	lds	r30, 0x2C64	; 0x802c64 <pxCurrentTimerList>
    2110:	f0 91 65 2c 	lds	r31, 0x2C65	; 0x802c65 <pxCurrentTimerList+0x1>
    2114:	80 81       	ld	r24, Z
    2116:	81 11       	cpse	r24, r1
    2118:	bd cf       	rjmp	.-134    	; 0x2094 <prvSwitchTimerLists+0x1a>
    211a:	80 91 62 2c 	lds	r24, 0x2C62	; 0x802c62 <pxOverflowTimerList>
    211e:	90 91 63 2c 	lds	r25, 0x2C63	; 0x802c63 <pxOverflowTimerList+0x1>
    2122:	80 93 64 2c 	sts	0x2C64, r24	; 0x802c64 <pxCurrentTimerList>
    2126:	90 93 65 2c 	sts	0x2C65, r25	; 0x802c65 <pxCurrentTimerList+0x1>
    212a:	e0 93 62 2c 	sts	0x2C62, r30	; 0x802c62 <pxOverflowTimerList>
    212e:	f0 93 63 2c 	sts	0x2C63, r31	; 0x802c63 <pxOverflowTimerList+0x1>
    2132:	df 91       	pop	r29
    2134:	cf 91       	pop	r28
    2136:	1f 91       	pop	r17
    2138:	0f 91       	pop	r16
    213a:	ff 90       	pop	r15
    213c:	ef 90       	pop	r14
    213e:	df 90       	pop	r13
    2140:	cf 90       	pop	r12
    2142:	bf 90       	pop	r11
    2144:	af 90       	pop	r10
    2146:	9f 90       	pop	r9
    2148:	8f 90       	pop	r8
    214a:	08 95       	ret

0000214c <prvSampleTimeNow>:
    214c:	cf 92       	push	r12
    214e:	df 92       	push	r13
    2150:	ef 92       	push	r14
    2152:	ff 92       	push	r15
    2154:	cf 93       	push	r28
    2156:	df 93       	push	r29
    2158:	ec 01       	movw	r28, r24
    215a:	0e 94 bc 0b 	call	0x1778	; 0x1778 <xTaskGetTickCount>
    215e:	6b 01       	movw	r12, r22
    2160:	7c 01       	movw	r14, r24
    2162:	80 91 5a 2c 	lds	r24, 0x2C5A	; 0x802c5a <xLastTime.4745>
    2166:	90 91 5b 2c 	lds	r25, 0x2C5B	; 0x802c5b <xLastTime.4745+0x1>
    216a:	a0 91 5c 2c 	lds	r26, 0x2C5C	; 0x802c5c <xLastTime.4745+0x2>
    216e:	b0 91 5d 2c 	lds	r27, 0x2C5D	; 0x802c5d <xLastTime.4745+0x3>
    2172:	c8 16       	cp	r12, r24
    2174:	d9 06       	cpc	r13, r25
    2176:	ea 06       	cpc	r14, r26
    2178:	fb 06       	cpc	r15, r27
    217a:	28 f4       	brcc	.+10     	; 0x2186 <prvSampleTimeNow+0x3a>
    217c:	0e 94 3d 10 	call	0x207a	; 0x207a <prvSwitchTimerLists>
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	88 83       	st	Y, r24
    2184:	01 c0       	rjmp	.+2      	; 0x2188 <prvSampleTimeNow+0x3c>
    2186:	18 82       	st	Y, r1
    2188:	c0 92 5a 2c 	sts	0x2C5A, r12	; 0x802c5a <xLastTime.4745>
    218c:	d0 92 5b 2c 	sts	0x2C5B, r13	; 0x802c5b <xLastTime.4745+0x1>
    2190:	e0 92 5c 2c 	sts	0x2C5C, r14	; 0x802c5c <xLastTime.4745+0x2>
    2194:	f0 92 5d 2c 	sts	0x2C5D, r15	; 0x802c5d <xLastTime.4745+0x3>
    2198:	c7 01       	movw	r24, r14
    219a:	b6 01       	movw	r22, r12
    219c:	df 91       	pop	r29
    219e:	cf 91       	pop	r28
    21a0:	ff 90       	pop	r15
    21a2:	ef 90       	pop	r14
    21a4:	df 90       	pop	r13
    21a6:	cf 90       	pop	r12
    21a8:	08 95       	ret

000021aa <prvProcessExpiredTimer>:
    21aa:	4f 92       	push	r4
    21ac:	5f 92       	push	r5
    21ae:	6f 92       	push	r6
    21b0:	7f 92       	push	r7
    21b2:	8f 92       	push	r8
    21b4:	9f 92       	push	r9
    21b6:	af 92       	push	r10
    21b8:	bf 92       	push	r11
    21ba:	cf 92       	push	r12
    21bc:	df 92       	push	r13
    21be:	ef 92       	push	r14
    21c0:	ff 92       	push	r15
    21c2:	0f 93       	push	r16
    21c4:	1f 93       	push	r17
    21c6:	cf 93       	push	r28
    21c8:	df 93       	push	r29
    21ca:	4b 01       	movw	r8, r22
    21cc:	5c 01       	movw	r10, r24
    21ce:	29 01       	movw	r4, r18
    21d0:	3a 01       	movw	r6, r20
    21d2:	e0 91 64 2c 	lds	r30, 0x2C64	; 0x802c64 <pxCurrentTimerList>
    21d6:	f0 91 65 2c 	lds	r31, 0x2C65	; 0x802c65 <pxCurrentTimerList+0x1>
    21da:	07 80       	ldd	r0, Z+7	; 0x07
    21dc:	f0 85       	ldd	r31, Z+8	; 0x08
    21de:	e0 2d       	mov	r30, r0
    21e0:	c0 85       	ldd	r28, Z+8	; 0x08
    21e2:	d1 85       	ldd	r29, Z+9	; 0x09
    21e4:	ce 01       	movw	r24, r28
    21e6:	02 96       	adiw	r24, 0x02	; 2
    21e8:	0e 94 96 04 	call	0x92c	; 0x92c <uxListRemove>
    21ec:	8a 89       	ldd	r24, Y+18	; 0x12
    21ee:	81 30       	cpi	r24, 0x01	; 1
    21f0:	e1 f4       	brne	.+56     	; 0x222a <prvProcessExpiredTimer+0x80>
    21f2:	4e 85       	ldd	r20, Y+14	; 0x0e
    21f4:	5f 85       	ldd	r21, Y+15	; 0x0f
    21f6:	68 89       	ldd	r22, Y+16	; 0x10
    21f8:	79 89       	ldd	r23, Y+17	; 0x11
    21fa:	48 0d       	add	r20, r8
    21fc:	59 1d       	adc	r21, r9
    21fe:	6a 1d       	adc	r22, r10
    2200:	7b 1d       	adc	r23, r11
    2202:	75 01       	movw	r14, r10
    2204:	64 01       	movw	r12, r8
    2206:	93 01       	movw	r18, r6
    2208:	82 01       	movw	r16, r4
    220a:	ce 01       	movw	r24, r28
    220c:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <prvInsertTimerInActiveList>
    2210:	88 23       	and	r24, r24
    2212:	59 f0       	breq	.+22     	; 0x222a <prvProcessExpiredTimer+0x80>
    2214:	c1 2c       	mov	r12, r1
    2216:	d1 2c       	mov	r13, r1
    2218:	76 01       	movw	r14, r12
    221a:	00 e0       	ldi	r16, 0x00	; 0
    221c:	10 e0       	ldi	r17, 0x00	; 0
    221e:	a5 01       	movw	r20, r10
    2220:	94 01       	movw	r18, r8
    2222:	60 e0       	ldi	r22, 0x00	; 0
    2224:	ce 01       	movw	r24, r28
    2226:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <xTimerGenericCommand>
    222a:	ed 89       	ldd	r30, Y+21	; 0x15
    222c:	fe 89       	ldd	r31, Y+22	; 0x16
    222e:	ce 01       	movw	r24, r28
    2230:	19 95       	eicall
    2232:	df 91       	pop	r29
    2234:	cf 91       	pop	r28
    2236:	1f 91       	pop	r17
    2238:	0f 91       	pop	r16
    223a:	ff 90       	pop	r15
    223c:	ef 90       	pop	r14
    223e:	df 90       	pop	r13
    2240:	cf 90       	pop	r12
    2242:	bf 90       	pop	r11
    2244:	af 90       	pop	r10
    2246:	9f 90       	pop	r9
    2248:	8f 90       	pop	r8
    224a:	7f 90       	pop	r7
    224c:	6f 90       	pop	r6
    224e:	5f 90       	pop	r5
    2250:	4f 90       	pop	r4
    2252:	08 95       	ret

00002254 <prvProcessTimerOrBlockTask>:
    2254:	8f 92       	push	r8
    2256:	9f 92       	push	r9
    2258:	af 92       	push	r10
    225a:	bf 92       	push	r11
    225c:	cf 92       	push	r12
    225e:	df 92       	push	r13
    2260:	ef 92       	push	r14
    2262:	ff 92       	push	r15
    2264:	1f 93       	push	r17
    2266:	cf 93       	push	r28
    2268:	df 93       	push	r29
    226a:	1f 92       	push	r1
    226c:	cd b7       	in	r28, 0x3d	; 61
    226e:	de b7       	in	r29, 0x3e	; 62
    2270:	6b 01       	movw	r12, r22
    2272:	7c 01       	movw	r14, r24
    2274:	14 2f       	mov	r17, r20
    2276:	0e 94 b6 0b 	call	0x176c	; 0x176c <vTaskSuspendAll>
    227a:	ce 01       	movw	r24, r28
    227c:	01 96       	adiw	r24, 0x01	; 1
    227e:	0e 94 a6 10 	call	0x214c	; 0x214c <prvSampleTimeNow>
    2282:	4b 01       	movw	r8, r22
    2284:	5c 01       	movw	r10, r24
    2286:	89 81       	ldd	r24, Y+1	; 0x01
    2288:	81 11       	cpse	r24, r1
    228a:	2e c0       	rjmp	.+92     	; 0x22e8 <prvProcessTimerOrBlockTask+0x94>
    228c:	11 11       	cpse	r17, r1
    228e:	0e c0       	rjmp	.+28     	; 0x22ac <prvProcessTimerOrBlockTask+0x58>
    2290:	8c 14       	cp	r8, r12
    2292:	9d 04       	cpc	r9, r13
    2294:	ae 04       	cpc	r10, r14
    2296:	bf 04       	cpc	r11, r15
    2298:	48 f0       	brcs	.+18     	; 0x22ac <prvProcessTimerOrBlockTask+0x58>
    229a:	0e 94 9e 0c 	call	0x193c	; 0x193c <xTaskResumeAll>
    229e:	a5 01       	movw	r20, r10
    22a0:	94 01       	movw	r18, r8
    22a2:	c7 01       	movw	r24, r14
    22a4:	b6 01       	movw	r22, r12
    22a6:	0e 94 d5 10 	call	0x21aa	; 0x21aa <prvProcessExpiredTimer>
    22aa:	20 c0       	rjmp	.+64     	; 0x22ec <prvProcessTimerOrBlockTask+0x98>
    22ac:	11 23       	and	r17, r17
    22ae:	41 f0       	breq	.+16     	; 0x22c0 <prvProcessTimerOrBlockTask+0x6c>
    22b0:	e0 91 62 2c 	lds	r30, 0x2C62	; 0x802c62 <pxOverflowTimerList>
    22b4:	f0 91 63 2c 	lds	r31, 0x2C63	; 0x802c63 <pxOverflowTimerList+0x1>
    22b8:	80 81       	ld	r24, Z
    22ba:	11 e0       	ldi	r17, 0x01	; 1
    22bc:	81 11       	cpse	r24, r1
    22be:	10 e0       	ldi	r17, 0x00	; 0
    22c0:	b7 01       	movw	r22, r14
    22c2:	a6 01       	movw	r20, r12
    22c4:	48 19       	sub	r20, r8
    22c6:	59 09       	sbc	r21, r9
    22c8:	6a 09       	sbc	r22, r10
    22ca:	7b 09       	sbc	r23, r11
    22cc:	21 2f       	mov	r18, r17
    22ce:	80 91 60 2c 	lds	r24, 0x2C60	; 0x802c60 <xTimerQueue>
    22d2:	90 91 61 2c 	lds	r25, 0x2C61	; 0x802c61 <xTimerQueue+0x1>
    22d6:	0e 94 52 09 	call	0x12a4	; 0x12a4 <vQueueWaitForMessageRestricted>
    22da:	0e 94 9e 0c 	call	0x193c	; 0x193c <xTaskResumeAll>
    22de:	81 11       	cpse	r24, r1
    22e0:	05 c0       	rjmp	.+10     	; 0x22ec <prvProcessTimerOrBlockTask+0x98>
    22e2:	0e 94 8e 05 	call	0xb1c	; 0xb1c <vPortYield>
    22e6:	02 c0       	rjmp	.+4      	; 0x22ec <prvProcessTimerOrBlockTask+0x98>
    22e8:	0e 94 9e 0c 	call	0x193c	; 0x193c <xTaskResumeAll>
    22ec:	0f 90       	pop	r0
    22ee:	df 91       	pop	r29
    22f0:	cf 91       	pop	r28
    22f2:	1f 91       	pop	r17
    22f4:	ff 90       	pop	r15
    22f6:	ef 90       	pop	r14
    22f8:	df 90       	pop	r13
    22fa:	cf 90       	pop	r12
    22fc:	bf 90       	pop	r11
    22fe:	af 90       	pop	r10
    2300:	9f 90       	pop	r9
    2302:	8f 90       	pop	r8
    2304:	08 95       	ret

00002306 <prvProcessReceivedCommands>:
    2306:	af 92       	push	r10
    2308:	bf 92       	push	r11
    230a:	cf 92       	push	r12
    230c:	df 92       	push	r13
    230e:	ef 92       	push	r14
    2310:	ff 92       	push	r15
    2312:	0f 93       	push	r16
    2314:	1f 93       	push	r17
    2316:	cf 93       	push	r28
    2318:	df 93       	push	r29
    231a:	cd b7       	in	r28, 0x3d	; 61
    231c:	de b7       	in	r29, 0x3e	; 62
    231e:	2a 97       	sbiw	r28, 0x0a	; 10
    2320:	cd bf       	out	0x3d, r28	; 61
    2322:	de bf       	out	0x3e, r29	; 62
    2324:	81 c0       	rjmp	.+258    	; 0x2428 <prvProcessReceivedCommands+0x122>
    2326:	89 81       	ldd	r24, Y+1	; 0x01
    2328:	88 23       	and	r24, r24
    232a:	4c f4       	brge	.+18     	; 0x233e <prvProcessReceivedCommands+0x38>
    232c:	ea 81       	ldd	r30, Y+2	; 0x02
    232e:	fb 81       	ldd	r31, Y+3	; 0x03
    2330:	4e 81       	ldd	r20, Y+6	; 0x06
    2332:	5f 81       	ldd	r21, Y+7	; 0x07
    2334:	68 85       	ldd	r22, Y+8	; 0x08
    2336:	79 85       	ldd	r23, Y+9	; 0x09
    2338:	8c 81       	ldd	r24, Y+4	; 0x04
    233a:	9d 81       	ldd	r25, Y+5	; 0x05
    233c:	19 95       	eicall
    233e:	89 81       	ldd	r24, Y+1	; 0x01
    2340:	88 23       	and	r24, r24
    2342:	0c f4       	brge	.+2      	; 0x2346 <prvProcessReceivedCommands+0x40>
    2344:	71 c0       	rjmp	.+226    	; 0x2428 <prvProcessReceivedCommands+0x122>
    2346:	ae 80       	ldd	r10, Y+6	; 0x06
    2348:	bf 80       	ldd	r11, Y+7	; 0x07
    234a:	d5 01       	movw	r26, r10
    234c:	1c 96       	adiw	r26, 0x0c	; 12
    234e:	8d 91       	ld	r24, X+
    2350:	9c 91       	ld	r25, X
    2352:	1d 97       	sbiw	r26, 0x0d	; 13
    2354:	89 2b       	or	r24, r25
    2356:	21 f0       	breq	.+8      	; 0x2360 <prvProcessReceivedCommands+0x5a>
    2358:	c5 01       	movw	r24, r10
    235a:	02 96       	adiw	r24, 0x02	; 2
    235c:	0e 94 96 04 	call	0x92c	; 0x92c <uxListRemove>
    2360:	ce 01       	movw	r24, r28
    2362:	0a 96       	adiw	r24, 0x0a	; 10
    2364:	0e 94 a6 10 	call	0x214c	; 0x214c <prvSampleTimeNow>
    2368:	8b 01       	movw	r16, r22
    236a:	9c 01       	movw	r18, r24
    236c:	89 81       	ldd	r24, Y+1	; 0x01
    236e:	08 2e       	mov	r0, r24
    2370:	00 0c       	add	r0, r0
    2372:	99 0b       	sbc	r25, r25
    2374:	aa 0b       	sbc	r26, r26
    2376:	bb 0b       	sbc	r27, r27
    2378:	8a 30       	cpi	r24, 0x0A	; 10
    237a:	91 05       	cpc	r25, r1
    237c:	08 f0       	brcs	.+2      	; 0x2380 <prvProcessReceivedCommands+0x7a>
    237e:	54 c0       	rjmp	.+168    	; 0x2428 <prvProcessReceivedCommands+0x122>
    2380:	fc 01       	movw	r30, r24
    2382:	88 27       	eor	r24, r24
    2384:	e2 50       	subi	r30, 0x02	; 2
    2386:	ff 4f       	sbci	r31, 0xFF	; 255
    2388:	8f 4f       	sbci	r24, 0xFF	; 255
    238a:	0c 94 8a 17 	jmp	0x2f14	; 0x2f14 <__tablejump2__>
    238e:	ca 80       	ldd	r12, Y+2	; 0x02
    2390:	db 80       	ldd	r13, Y+3	; 0x03
    2392:	ec 80       	ldd	r14, Y+4	; 0x04
    2394:	fd 80       	ldd	r15, Y+5	; 0x05
    2396:	f5 01       	movw	r30, r10
    2398:	46 85       	ldd	r20, Z+14	; 0x0e
    239a:	57 85       	ldd	r21, Z+15	; 0x0f
    239c:	60 89       	ldd	r22, Z+16	; 0x10
    239e:	71 89       	ldd	r23, Z+17	; 0x11
    23a0:	4c 0d       	add	r20, r12
    23a2:	5d 1d       	adc	r21, r13
    23a4:	6e 1d       	adc	r22, r14
    23a6:	7f 1d       	adc	r23, r15
    23a8:	c5 01       	movw	r24, r10
    23aa:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <prvInsertTimerInActiveList>
    23ae:	88 23       	and	r24, r24
    23b0:	d9 f1       	breq	.+118    	; 0x2428 <prvProcessReceivedCommands+0x122>
    23b2:	d5 01       	movw	r26, r10
    23b4:	55 96       	adiw	r26, 0x15	; 21
    23b6:	ed 91       	ld	r30, X+
    23b8:	fc 91       	ld	r31, X
    23ba:	56 97       	sbiw	r26, 0x16	; 22
    23bc:	c5 01       	movw	r24, r10
    23be:	19 95       	eicall
    23c0:	f5 01       	movw	r30, r10
    23c2:	82 89       	ldd	r24, Z+18	; 0x12
    23c4:	81 30       	cpi	r24, 0x01	; 1
    23c6:	81 f5       	brne	.+96     	; 0x2428 <prvProcessReceivedCommands+0x122>
    23c8:	4a 81       	ldd	r20, Y+2	; 0x02
    23ca:	5b 81       	ldd	r21, Y+3	; 0x03
    23cc:	6c 81       	ldd	r22, Y+4	; 0x04
    23ce:	7d 81       	ldd	r23, Y+5	; 0x05
    23d0:	86 85       	ldd	r24, Z+14	; 0x0e
    23d2:	97 85       	ldd	r25, Z+15	; 0x0f
    23d4:	a0 89       	ldd	r26, Z+16	; 0x10
    23d6:	b1 89       	ldd	r27, Z+17	; 0x11
    23d8:	9a 01       	movw	r18, r20
    23da:	ab 01       	movw	r20, r22
    23dc:	28 0f       	add	r18, r24
    23de:	39 1f       	adc	r19, r25
    23e0:	4a 1f       	adc	r20, r26
    23e2:	5b 1f       	adc	r21, r27
    23e4:	c1 2c       	mov	r12, r1
    23e6:	d1 2c       	mov	r13, r1
    23e8:	76 01       	movw	r14, r12
    23ea:	00 e0       	ldi	r16, 0x00	; 0
    23ec:	10 e0       	ldi	r17, 0x00	; 0
    23ee:	60 e0       	ldi	r22, 0x00	; 0
    23f0:	c5 01       	movw	r24, r10
    23f2:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <xTimerGenericCommand>
    23f6:	18 c0       	rjmp	.+48     	; 0x2428 <prvProcessReceivedCommands+0x122>
    23f8:	4a 81       	ldd	r20, Y+2	; 0x02
    23fa:	5b 81       	ldd	r21, Y+3	; 0x03
    23fc:	6c 81       	ldd	r22, Y+4	; 0x04
    23fe:	7d 81       	ldd	r23, Y+5	; 0x05
    2400:	d5 01       	movw	r26, r10
    2402:	1e 96       	adiw	r26, 0x0e	; 14
    2404:	4d 93       	st	X+, r20
    2406:	5d 93       	st	X+, r21
    2408:	6d 93       	st	X+, r22
    240a:	7c 93       	st	X, r23
    240c:	51 97       	sbiw	r26, 0x11	; 17
    240e:	40 0f       	add	r20, r16
    2410:	51 1f       	adc	r21, r17
    2412:	62 1f       	adc	r22, r18
    2414:	73 1f       	adc	r23, r19
    2416:	68 01       	movw	r12, r16
    2418:	79 01       	movw	r14, r18
    241a:	c5 01       	movw	r24, r10
    241c:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <prvInsertTimerInActiveList>
    2420:	03 c0       	rjmp	.+6      	; 0x2428 <prvProcessReceivedCommands+0x122>
    2422:	c5 01       	movw	r24, r10
    2424:	0e 94 22 04 	call	0x844	; 0x844 <vPortFree>
    2428:	20 e0       	ldi	r18, 0x00	; 0
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	a9 01       	movw	r20, r18
    242e:	be 01       	movw	r22, r28
    2430:	6f 5f       	subi	r22, 0xFF	; 255
    2432:	7f 4f       	sbci	r23, 0xFF	; 255
    2434:	80 91 60 2c 	lds	r24, 0x2C60	; 0x802c60 <xTimerQueue>
    2438:	90 91 61 2c 	lds	r25, 0x2C61	; 0x802c61 <xTimerQueue+0x1>
    243c:	0e 94 a7 08 	call	0x114e	; 0x114e <xQueueReceive>
    2440:	81 11       	cpse	r24, r1
    2442:	71 cf       	rjmp	.-286    	; 0x2326 <prvProcessReceivedCommands+0x20>
    2444:	2a 96       	adiw	r28, 0x0a	; 10
    2446:	cd bf       	out	0x3d, r28	; 61
    2448:	de bf       	out	0x3e, r29	; 62
    244a:	df 91       	pop	r29
    244c:	cf 91       	pop	r28
    244e:	1f 91       	pop	r17
    2450:	0f 91       	pop	r16
    2452:	ff 90       	pop	r15
    2454:	ef 90       	pop	r14
    2456:	df 90       	pop	r13
    2458:	cf 90       	pop	r12
    245a:	bf 90       	pop	r11
    245c:	af 90       	pop	r10
    245e:	08 95       	ret

00002460 <prvTimerTask>:
    2460:	cf 93       	push	r28
    2462:	df 93       	push	r29
    2464:	1f 92       	push	r1
    2466:	cd b7       	in	r28, 0x3d	; 61
    2468:	de b7       	in	r29, 0x3e	; 62
    246a:	ce 01       	movw	r24, r28
    246c:	01 96       	adiw	r24, 0x01	; 1
    246e:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <prvGetNextExpireTime>
    2472:	49 81       	ldd	r20, Y+1	; 0x01
    2474:	0e 94 2a 11 	call	0x2254	; 0x2254 <prvProcessTimerOrBlockTask>
    2478:	0e 94 83 11 	call	0x2306	; 0x2306 <prvProcessReceivedCommands>
    247c:	f6 cf       	rjmp	.-20     	; 0x246a <prvTimerTask+0xa>

0000247e <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
    247e:	0f 93       	push	r16
    2480:	1f 93       	push	r17
    2482:	cf 93       	push	r28
    2484:	df 93       	push	r29
    2486:	cd b7       	in	r28, 0x3d	; 61
    2488:	de b7       	in	r29, 0x3e	; 62
    248a:	29 97       	sbiw	r28, 0x09	; 9
    248c:	cd bf       	out	0x3d, r28	; 61
    248e:	de bf       	out	0x3e, r29	; 62
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
    2490:	ee ef       	ldi	r30, 0xFE	; 254
    2492:	e9 83       	std	Y+1, r30	; 0x01
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
    2494:	8a 83       	std	Y+2, r24	; 0x02
    2496:	9b 83       	std	Y+3, r25	; 0x03
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
    2498:	6c 83       	std	Y+4, r22	; 0x04
    249a:	7d 83       	std	Y+5, r23	; 0x05
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
    249c:	2e 83       	std	Y+6, r18	; 0x06
    249e:	3f 83       	std	Y+7, r19	; 0x07
    24a0:	48 87       	std	Y+8, r20	; 0x08
    24a2:	59 87       	std	Y+9, r21	; 0x09

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	a8 01       	movw	r20, r16
    24a8:	be 01       	movw	r22, r28
    24aa:	6f 5f       	subi	r22, 0xFF	; 255
    24ac:	7f 4f       	sbci	r23, 0xFF	; 255
    24ae:	80 91 60 2c 	lds	r24, 0x2C60	; 0x802c60 <xTimerQueue>
    24b2:	90 91 61 2c 	lds	r25, 0x2C61	; 0x802c61 <xTimerQueue+0x1>
    24b6:	0e 94 62 08 	call	0x10c4	; 0x10c4 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
    24ba:	29 96       	adiw	r28, 0x09	; 9
    24bc:	cd bf       	out	0x3d, r28	; 61
    24be:	de bf       	out	0x3e, r29	; 62
    24c0:	df 91       	pop	r29
    24c2:	cf 91       	pop	r28
    24c4:	1f 91       	pop	r17
    24c6:	0f 91       	pop	r16
    24c8:	08 95       	ret

000024ca <vInitClock>:
#include "clksys_driver.h"


void vInitClock(void)
{
	CLKSYS_Enable( OSC_RC2MEN_bm );
    24ca:	e0 e5       	ldi	r30, 0x50	; 80
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	80 81       	ld	r24, Z
    24d0:	81 60       	ori	r24, 0x01	; 1
    24d2:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_RC2MRDY_bm ) == 0 );
    24d4:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
    24d8:	80 ff       	sbrs	r24, 0
    24da:	fc cf       	rjmp	.-8      	; 0x24d4 <vInitClock+0xa>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC2M_gc );
    24dc:	80 e0       	ldi	r24, 0x00	; 0
    24de:	0e 94 2b 02 	call	0x456	; 0x456 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC32KEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
    24e2:	8e e1       	ldi	r24, 0x1E	; 30
    24e4:	0e 94 1b 02 	call	0x436	; 0x436 <CLKSYS_Disable>
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    24e8:	60 e0       	ldi	r22, 0x00	; 0
    24ea:	80 e0       	ldi	r24, 0x00	; 0
    24ec:	0e 94 25 02 	call	0x44a	; 0x44a <CLKSYS_Prescalers_Config>
	CLKSYS_XOSC_Config( OSC_FRQRANGE_2TO9_gc,false,OSC_XOSCSEL_XTAL_256CLK_gc );
    24f0:	43 e0       	ldi	r20, 0x03	; 3
    24f2:	60 e0       	ldi	r22, 0x00	; 0
    24f4:	80 e4       	ldi	r24, 0x40	; 64
    24f6:	0e 94 0c 02 	call	0x418	; 0x418 <CLKSYS_XOSC_Config>
	CLKSYS_Enable( OSC_XOSCEN_bm );
    24fa:	e0 e5       	ldi	r30, 0x50	; 80
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	80 81       	ld	r24, Z
    2500:	88 60       	ori	r24, 0x08	; 8
    2502:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
    2504:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
    2508:	83 ff       	sbrs	r24, 3
    250a:	fc cf       	rjmp	.-8      	; 0x2504 <vInitClock+0x3a>
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 4 );
    250c:	64 e0       	ldi	r22, 0x04	; 4
    250e:	80 ec       	ldi	r24, 0xC0	; 192
    2510:	0e 94 16 02 	call	0x42c	; 0x42c <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
    2514:	e0 e5       	ldi	r30, 0x50	; 80
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	80 81       	ld	r24, Z
    251a:	80 61       	ori	r24, 0x10	; 16
    251c:	80 83       	st	Z, r24
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    251e:	60 e0       	ldi	r22, 0x00	; 0
    2520:	80 e0       	ldi	r24, 0x00	; 0
    2522:	0e 94 25 02 	call	0x44a	; 0x44a <CLKSYS_Prescalers_Config>
	do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
    2526:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
    252a:	84 ff       	sbrs	r24, 4
    252c:	fc cf       	rjmp	.-8      	; 0x2526 <vInitClock+0x5c>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
    252e:	84 e0       	ldi	r24, 0x04	; 4
    2530:	0e 94 2b 02 	call	0x456	; 0x456 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC2MEN_bm | OSC_RC32KEN_bm);
    2534:	87 e0       	ldi	r24, 0x07	; 7
    2536:	0e 94 1b 02 	call	0x436	; 0x436 <CLKSYS_Disable>
    253a:	08 95       	ret

0000253c <vPiLeibniz>:
}

void vPiLeibniz(void* pvParameters)
{
	uint32_t CurIterations = 0;
	float NextSign = 1.0;
    253c:	0f 2e       	mov	r0, r31
    253e:	81 2c       	mov	r8, r1
    2540:	91 2c       	mov	r9, r1
    2542:	f0 e8       	ldi	r31, 0x80	; 128
    2544:	af 2e       	mov	r10, r31
    2546:	ff e3       	ldi	r31, 0x3F	; 63
    2548:	bf 2e       	mov	r11, r31
    254a:	f0 2d       	mov	r31, r0
	return 0;
}

void vPiLeibniz(void* pvParameters)
{
	uint32_t CurIterations = 0;
    254c:	c1 2c       	mov	r12, r1
    254e:	d1 2c       	mov	r13, r1
    2550:	76 01       	movw	r14, r12
	float NextSign = 1.0;
		while (1)
		{
			
			LeibnizPi = LeibnizPi + (NextSign / (2 * CurIterations + 1)) * 4;
    2552:	d7 01       	movw	r26, r14
    2554:	c6 01       	movw	r24, r12
    2556:	88 0f       	add	r24, r24
    2558:	99 1f       	adc	r25, r25
    255a:	aa 1f       	adc	r26, r26
    255c:	bb 1f       	adc	r27, r27
    255e:	bc 01       	movw	r22, r24
    2560:	cd 01       	movw	r24, r26
    2562:	6f 5f       	subi	r22, 0xFF	; 255
    2564:	7f 4f       	sbci	r23, 0xFF	; 255
    2566:	8f 4f       	sbci	r24, 0xFF	; 255
    2568:	9f 4f       	sbci	r25, 0xFF	; 255
    256a:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__floatunsisf>
    256e:	9b 01       	movw	r18, r22
    2570:	ac 01       	movw	r20, r24
    2572:	c5 01       	movw	r24, r10
    2574:	b4 01       	movw	r22, r8
    2576:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <__divsf3>
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	40 e8       	ldi	r20, 0x80	; 128
    2580:	50 e4       	ldi	r21, 0x40	; 64
    2582:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
    2586:	20 91 7c 2c 	lds	r18, 0x2C7C	; 0x802c7c <LeibnizPi>
    258a:	30 91 7d 2c 	lds	r19, 0x2C7D	; 0x802c7d <LeibnizPi+0x1>
    258e:	40 91 7e 2c 	lds	r20, 0x2C7E	; 0x802c7e <LeibnizPi+0x2>
    2592:	50 91 7f 2c 	lds	r21, 0x2C7F	; 0x802c7f <LeibnizPi+0x3>
    2596:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <__addsf3>
    259a:	60 93 7c 2c 	sts	0x2C7C, r22	; 0x802c7c <LeibnizPi>
    259e:	70 93 7d 2c 	sts	0x2C7D, r23	; 0x802c7d <LeibnizPi+0x1>
    25a2:	80 93 7e 2c 	sts	0x2C7E, r24	; 0x802c7e <LeibnizPi+0x2>
    25a6:	90 93 7f 2c 	sts	0x2C7F, r25	; 0x802c7f <LeibnizPi+0x3>
			NextSign = -NextSign;
    25aa:	b7 fa       	bst	r11, 7
    25ac:	b0 94       	com	r11
    25ae:	b7 f8       	bld	r11, 7
    25b0:	b0 94       	com	r11
			CurIterations++;
    25b2:	8f ef       	ldi	r24, 0xFF	; 255
    25b4:	c8 1a       	sub	r12, r24
    25b6:	d8 0a       	sbc	r13, r24
    25b8:	e8 0a       	sbc	r14, r24
    25ba:	f8 0a       	sbc	r15, r24
    25bc:	ca cf       	rjmp	.-108    	; 0x2552 <vPiLeibniz+0x16>

000025be <vButtonTask>:
		}
}


void vButtonTask(void *pvParameters) {
	initButtons();
    25be:	0e 94 47 01 	call	0x28e	; 0x28e <initButtons>
	vTaskDelay(3000);
    25c2:	68 eb       	ldi	r22, 0xB8	; 184
    25c4:	7b e0       	ldi	r23, 0x0B	; 11
    25c6:	80 e0       	ldi	r24, 0x00	; 0
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <vTaskDelay>
	for(;;) {
		updateButtons();
    25ce:	0e 94 52 01 	call	0x2a4	; 0x2a4 <updateButtons>
		vTaskDelay((100/BUTTON_UPDATE_FREQUENCY_HZ)/portTICK_RATE_MS);
    25d2:	61 e0       	ldi	r22, 0x01	; 1
    25d4:	70 e0       	ldi	r23, 0x00	; 0
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <vTaskDelay>
    25de:	f7 cf       	rjmp	.-18     	; 0x25ce <vButtonTask+0x10>

000025e0 <vApplicationIdleHook>:
void vButtonTask(void *pvParameters);

TaskHandle_t ledTask;

void vApplicationIdleHook( void )
{	
    25e0:	08 95       	ret

000025e2 <main>:
	
}

int main(void)
{
    25e2:	ef 92       	push	r14
    25e4:	ff 92       	push	r15
    25e6:	0f 93       	push	r16
	vInitClock();
    25e8:	0e 94 65 12 	call	0x24ca	; 0x24ca <vInitClock>
	vInitDisplay();
    25ec:	0e 94 24 14 	call	0x2848	; 0x2848 <vInitDisplay>
	
	xTaskCreate(vButtonTask, (const char *) "btTask", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
    25f0:	e1 2c       	mov	r14, r1
    25f2:	f1 2c       	mov	r15, r1
    25f4:	02 e0       	ldi	r16, 0x02	; 2
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	48 ec       	ldi	r20, 0xC8	; 200
    25fc:	50 e0       	ldi	r21, 0x00	; 0
    25fe:	6d e0       	ldi	r22, 0x0D	; 13
    2600:	70 e2       	ldi	r23, 0x20	; 32
    2602:	8f ed       	ldi	r24, 0xDF	; 223
    2604:	92 e1       	ldi	r25, 0x12	; 18
    2606:	0e 94 27 0b 	call	0x164e	; 0x164e <xTaskCreate>
	//xTaskCreate( vTimeMeasurement, (const char *) "TimeMeasurement", configMINIMAL_STACK_SIZE+10, NULL, 1, &TimeMeasurement);
	xTaskCreate( vPiLeibniz, (const char *) "Leibniz", configMINIMAL_STACK_SIZE+10, NULL, 1, NULL);
    260a:	01 e0       	ldi	r16, 0x01	; 1
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	42 ed       	ldi	r20, 0xD2	; 210
    2612:	50 e0       	ldi	r21, 0x00	; 0
    2614:	64 e1       	ldi	r22, 0x14	; 20
    2616:	70 e2       	ldi	r23, 0x20	; 32
    2618:	8e e9       	ldi	r24, 0x9E	; 158
    261a:	92 e1       	ldi	r25, 0x12	; 18
    261c:	0e 94 27 0b 	call	0x164e	; 0x164e <xTaskCreate>
	
	vTaskStartScheduler();
    2620:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <vTaskStartScheduler>
	return 0;
}
    2624:	80 e0       	ldi	r24, 0x00	; 0
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	0f 91       	pop	r16
    262a:	ff 90       	pop	r15
    262c:	ef 90       	pop	r14
    262e:	08 95       	ret

00002630 <__vector_108>:
 void displayHome() {
	 command(0x02);
 }
 void _displayClear() {
	 command(0x01);
	 delayUS(2000);
    2630:	1f 92       	push	r1
    2632:	0f 92       	push	r0
    2634:	0f b6       	in	r0, 0x3f	; 63
    2636:	0f 92       	push	r0
    2638:	11 24       	eor	r1, r1
    263a:	0b b6       	in	r0, 0x3b	; 59
    263c:	0f 92       	push	r0
    263e:	2f 93       	push	r18
    2640:	3f 93       	push	r19
    2642:	4f 93       	push	r20
    2644:	5f 93       	push	r21
    2646:	6f 93       	push	r22
    2648:	7f 93       	push	r23
    264a:	8f 93       	push	r24
    264c:	9f 93       	push	r25
    264e:	af 93       	push	r26
    2650:	bf 93       	push	r27
    2652:	ef 93       	push	r30
    2654:	ff 93       	push	r31
    2656:	cf 93       	push	r28
    2658:	df 93       	push	r29
    265a:	1f 92       	push	r1
    265c:	cd b7       	in	r28, 0x3d	; 61
    265e:	de b7       	in	r29, 0x3e	; 62
    2660:	19 82       	std	Y+1, r1	; 0x01
    2662:	9e 01       	movw	r18, r28
    2664:	2f 5f       	subi	r18, 0xFF	; 255
    2666:	3f 4f       	sbci	r19, 0xFF	; 255
    2668:	41 e0       	ldi	r20, 0x01	; 1
    266a:	50 e0       	ldi	r21, 0x00	; 0
    266c:	60 e0       	ldi	r22, 0x00	; 0
    266e:	70 e0       	ldi	r23, 0x00	; 0
    2670:	80 91 87 2c 	lds	r24, 0x2C87	; 0x802c87 <egDisplayTiming>
    2674:	90 91 88 2c 	lds	r25, 0x2C88	; 0x802c88 <egDisplayTiming+0x1>
    2678:	0e 94 ef 03 	call	0x7de	; 0x7de <xEventGroupSetBitsFromISR>
    267c:	60 e0       	ldi	r22, 0x00	; 0
    267e:	80 e0       	ldi	r24, 0x00	; 0
    2680:	9b e0       	ldi	r25, 0x0B	; 11
    2682:	0e 94 40 02 	call	0x480	; 0x480 <TC0_ConfigClockSource>
    2686:	10 92 06 0b 	sts	0x0B06, r1	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7deb06>
    268a:	0f 90       	pop	r0
    268c:	df 91       	pop	r29
    268e:	cf 91       	pop	r28
    2690:	ff 91       	pop	r31
    2692:	ef 91       	pop	r30
    2694:	bf 91       	pop	r27
    2696:	af 91       	pop	r26
    2698:	9f 91       	pop	r25
    269a:	8f 91       	pop	r24
    269c:	7f 91       	pop	r23
    269e:	6f 91       	pop	r22
    26a0:	5f 91       	pop	r21
    26a2:	4f 91       	pop	r20
    26a4:	3f 91       	pop	r19
    26a6:	2f 91       	pop	r18
    26a8:	0f 90       	pop	r0
    26aa:	0b be       	out	0x3b, r0	; 59
    26ac:	0f 90       	pop	r0
    26ae:	0f be       	out	0x3f, r0	; 63
    26b0:	0f 90       	pop	r0
    26b2:	1f 90       	pop	r1
    26b4:	18 95       	reti

000026b6 <delayUS>:
    26b6:	cf 92       	push	r12
    26b8:	df 92       	push	r13
    26ba:	ef 92       	push	r14
    26bc:	ff 92       	push	r15
    26be:	0f 93       	push	r16
    26c0:	6b 01       	movw	r12, r22
    26c2:	7c 01       	movw	r14, r24
    26c4:	82 e0       	ldi	r24, 0x02	; 2
    26c6:	c8 16       	cp	r12, r24
    26c8:	d1 04       	cpc	r13, r1
    26ca:	e1 04       	cpc	r14, r1
    26cc:	f1 04       	cpc	r15, r1
    26ce:	28 f4       	brcc	.+10     	; 0x26da <delayUS+0x24>
    26d0:	c1 2c       	mov	r12, r1
    26d2:	d1 2c       	mov	r13, r1
    26d4:	76 01       	movw	r14, r12
    26d6:	68 94       	set
    26d8:	c1 f8       	bld	r12, 1
    26da:	e0 e0       	ldi	r30, 0x00	; 0
    26dc:	fb e0       	ldi	r31, 0x0B	; 11
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	86 83       	std	Z+6, r24	; 0x06
    26e2:	10 a2       	std	Z+32, r1	; 0x20
    26e4:	11 a2       	std	Z+33, r1	; 0x21
    26e6:	60 e0       	ldi	r22, 0x00	; 0
    26e8:	80 e0       	ldi	r24, 0x00	; 0
    26ea:	9b e0       	ldi	r25, 0x0B	; 11
    26ec:	0e 94 46 02 	call	0x48c	; 0x48c <TC0_ConfigWGM>
    26f0:	8e ef       	ldi	r24, 0xFE	; 254
    26f2:	c8 16       	cp	r12, r24
    26f4:	8f ef       	ldi	r24, 0xFF	; 255
    26f6:	d8 06       	cpc	r13, r24
    26f8:	e1 04       	cpc	r14, r1
    26fa:	f1 04       	cpc	r15, r1
    26fc:	70 f4       	brcc	.+28     	; 0x271a <delayUS+0x64>
    26fe:	f6 94       	lsr	r15
    2700:	e7 94       	ror	r14
    2702:	d7 94       	ror	r13
    2704:	c7 94       	ror	r12
    2706:	c0 92 26 0b 	sts	0x0B26, r12	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7deb26>
    270a:	d0 92 27 0b 	sts	0x0B27, r13	; 0x800b27 <__TEXT_REGION_LENGTH__+0x7deb27>
    270e:	65 e0       	ldi	r22, 0x05	; 5
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	9b e0       	ldi	r25, 0x0B	; 11
    2714:	0e 94 40 02 	call	0x480	; 0x480 <TC0_ConfigClockSource>
    2718:	19 c0       	rjmp	.+50     	; 0x274c <delayUS+0x96>
    271a:	80 e4       	ldi	r24, 0x40	; 64
    271c:	c8 16       	cp	r12, r24
    271e:	82 e4       	ldi	r24, 0x42	; 66
    2720:	d8 06       	cpc	r13, r24
    2722:	8f e0       	ldi	r24, 0x0F	; 15
    2724:	e8 06       	cpc	r14, r24
    2726:	f1 04       	cpc	r15, r1
    2728:	88 f4       	brcc	.+34     	; 0x274c <delayUS+0x96>
    272a:	68 94       	set
    272c:	14 f8       	bld	r1, 4
    272e:	f6 94       	lsr	r15
    2730:	e7 94       	ror	r14
    2732:	d7 94       	ror	r13
    2734:	c7 94       	ror	r12
    2736:	16 94       	lsr	r1
    2738:	d1 f7       	brne	.-12     	; 0x272e <delayUS+0x78>
    273a:	c0 92 26 0b 	sts	0x0B26, r12	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7deb26>
    273e:	d0 92 27 0b 	sts	0x0B27, r13	; 0x800b27 <__TEXT_REGION_LENGTH__+0x7deb27>
    2742:	67 e0       	ldi	r22, 0x07	; 7
    2744:	80 e0       	ldi	r24, 0x00	; 0
    2746:	9b e0       	ldi	r25, 0x0B	; 11
    2748:	0e 94 40 02 	call	0x480	; 0x480 <TC0_ConfigClockSource>
    274c:	0f 2e       	mov	r0, r31
    274e:	f4 ef       	ldi	r31, 0xF4	; 244
    2750:	cf 2e       	mov	r12, r31
    2752:	dd 24       	eor	r13, r13
    2754:	d3 94       	inc	r13
    2756:	e1 2c       	mov	r14, r1
    2758:	f1 2c       	mov	r15, r1
    275a:	f0 2d       	mov	r31, r0
    275c:	00 e0       	ldi	r16, 0x00	; 0
    275e:	21 e0       	ldi	r18, 0x01	; 1
    2760:	41 e0       	ldi	r20, 0x01	; 1
    2762:	50 e0       	ldi	r21, 0x00	; 0
    2764:	60 e0       	ldi	r22, 0x00	; 0
    2766:	70 e0       	ldi	r23, 0x00	; 0
    2768:	80 91 87 2c 	lds	r24, 0x2C87	; 0x802c87 <egDisplayTiming>
    276c:	90 91 88 2c 	lds	r25, 0x2C88	; 0x802c88 <egDisplayTiming+0x1>
    2770:	0e 94 96 02 	call	0x52c	; 0x52c <xEventGroupWaitBits>
    2774:	0f 91       	pop	r16
    2776:	ff 90       	pop	r15
    2778:	ef 90       	pop	r14
    277a:	df 90       	pop	r13
    277c:	cf 90       	pop	r12
    277e:	08 95       	ret

00002780 <setPort>:
    2780:	82 95       	swap	r24
    2782:	80 7f       	andi	r24, 0xF0	; 240
    2784:	e0 e0       	ldi	r30, 0x00	; 0
    2786:	f6 e0       	ldi	r31, 0x06	; 6
    2788:	94 81       	ldd	r25, Z+4	; 0x04
    278a:	28 2f       	mov	r18, r24
    278c:	2f 60       	ori	r18, 0x0F	; 15
    278e:	92 23       	and	r25, r18
    2790:	94 83       	std	Z+4, r25	; 0x04
    2792:	94 81       	ldd	r25, Z+4	; 0x04
    2794:	89 2b       	or	r24, r25
    2796:	84 83       	std	Z+4, r24	; 0x04
    2798:	08 95       	ret

0000279a <setRS>:
    279a:	88 23       	and	r24, r24
    279c:	21 f0       	breq	.+8      	; 0x27a6 <setRS+0xc>
    279e:	81 e0       	ldi	r24, 0x01	; 1
    27a0:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x7de665>
    27a4:	08 95       	ret
    27a6:	81 e0       	ldi	r24, 0x01	; 1
    27a8:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7de666>
    27ac:	08 95       	ret

000027ae <setRW>:
    27ae:	88 23       	and	r24, r24
    27b0:	21 f0       	breq	.+8      	; 0x27ba <setRW+0xc>
    27b2:	82 e0       	ldi	r24, 0x02	; 2
    27b4:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x7de665>
    27b8:	08 95       	ret
    27ba:	82 e0       	ldi	r24, 0x02	; 2
    27bc:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7de666>
    27c0:	08 95       	ret

000027c2 <setE>:
    27c2:	88 23       	and	r24, r24
    27c4:	21 f0       	breq	.+8      	; 0x27ce <setE+0xc>
    27c6:	84 e0       	ldi	r24, 0x04	; 4
    27c8:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x7de665>
    27cc:	08 95       	ret
    27ce:	84 e0       	ldi	r24, 0x04	; 4
    27d0:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7de666>
    27d4:	08 95       	ret

000027d6 <Nybble>:
    27d6:	81 e0       	ldi	r24, 0x01	; 1
    27d8:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <setE>
    27dc:	61 e0       	ldi	r22, 0x01	; 1
    27de:	70 e0       	ldi	r23, 0x00	; 0
    27e0:	80 e0       	ldi	r24, 0x00	; 0
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <delayUS>
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <setE>
    27ee:	08 95       	ret

000027f0 <command>:
    27f0:	cf 93       	push	r28
    27f2:	c8 2f       	mov	r28, r24
    27f4:	82 95       	swap	r24
    27f6:	8f 70       	andi	r24, 0x0F	; 15
    27f8:	0e 94 c0 13 	call	0x2780	; 0x2780 <setPort>
    27fc:	80 e0       	ldi	r24, 0x00	; 0
    27fe:	0e 94 cd 13 	call	0x279a	; 0x279a <setRS>
    2802:	80 e0       	ldi	r24, 0x00	; 0
    2804:	0e 94 d7 13 	call	0x27ae	; 0x27ae <setRW>
    2808:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <Nybble>
    280c:	8c 2f       	mov	r24, r28
    280e:	8f 70       	andi	r24, 0x0F	; 15
    2810:	0e 94 c0 13 	call	0x2780	; 0x2780 <setPort>
    2814:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <Nybble>
    2818:	cf 91       	pop	r28
    281a:	08 95       	ret

0000281c <write>:
    281c:	cf 93       	push	r28
    281e:	c8 2f       	mov	r28, r24
    2820:	82 95       	swap	r24
    2822:	8f 70       	andi	r24, 0x0F	; 15
    2824:	0e 94 c0 13 	call	0x2780	; 0x2780 <setPort>
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	0e 94 cd 13 	call	0x279a	; 0x279a <setRS>
    282e:	80 e0       	ldi	r24, 0x00	; 0
    2830:	0e 94 d7 13 	call	0x27ae	; 0x27ae <setRW>
    2834:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <Nybble>
    2838:	8c 2f       	mov	r24, r28
    283a:	8f 70       	andi	r24, 0x0F	; 15
    283c:	0e 94 c0 13 	call	0x2780	; 0x2780 <setPort>
    2840:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <Nybble>
    2844:	cf 91       	pop	r28
    2846:	08 95       	ret

00002848 <vInitDisplay>:
 }
 
 void vInitDisplay() {
    2848:	ef 92       	push	r14
    284a:	ff 92       	push	r15
    284c:	0f 93       	push	r16
	PORTA.DIRSET = PIN4_bm;
    284e:	e0 e0       	ldi	r30, 0x00	; 0
    2850:	f6 e0       	ldi	r31, 0x06	; 6
    2852:	80 e1       	ldi	r24, 0x10	; 16
    2854:	81 83       	std	Z+1, r24	; 0x01
	PORTA.DIRSET = PIN5_bm;
    2856:	80 e2       	ldi	r24, 0x20	; 32
    2858:	81 83       	std	Z+1, r24	; 0x01
	PORTA.DIRSET = PIN6_bm;
    285a:	80 e4       	ldi	r24, 0x40	; 64
    285c:	81 83       	std	Z+1, r24	; 0x01
	PORTA.DIRSET = PIN7_bm;
    285e:	80 e8       	ldi	r24, 0x80	; 128
    2860:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRSET = PIN0_bm;
    2862:	a0 e6       	ldi	r26, 0x60	; 96
    2864:	b6 e0       	ldi	r27, 0x06	; 6
    2866:	81 e0       	ldi	r24, 0x01	; 1
    2868:	11 96       	adiw	r26, 0x01	; 1
    286a:	8c 93       	st	X, r24
    286c:	11 97       	sbiw	r26, 0x01	; 1
	PORTD.DIRSET = PIN1_bm;
    286e:	82 e0       	ldi	r24, 0x02	; 2
    2870:	11 96       	adiw	r26, 0x01	; 1
    2872:	8c 93       	st	X, r24
    2874:	11 97       	sbiw	r26, 0x01	; 1
	PORTD.DIRSET = PIN2_bm;
    2876:	84 e0       	ldi	r24, 0x04	; 4
    2878:	11 96       	adiw	r26, 0x01	; 1
    287a:	8c 93       	st	X, r24
    287c:	11 97       	sbiw	r26, 0x01	; 1
	PORTA.OUT &= 0x0F;
    287e:	84 81       	ldd	r24, Z+4	; 0x04
    2880:	8f 70       	andi	r24, 0x0F	; 15
    2882:	84 83       	std	Z+4, r24	; 0x04
	PORTD.OUT &= 0xF8;
    2884:	14 96       	adiw	r26, 0x04	; 4
    2886:	8c 91       	ld	r24, X
    2888:	14 97       	sbiw	r26, 0x04	; 4
    288a:	88 7f       	andi	r24, 0xF8	; 248
    288c:	14 96       	adiw	r26, 0x04	; 4
    288e:	8c 93       	st	X, r24

	if((displayLineQueue = xQueueCreate(DISPLAY_QUEUE_DEPTH, sizeof(displayLine_t))) == NULL)
    2890:	40 e0       	ldi	r20, 0x00	; 0
    2892:	66 e1       	ldi	r22, 0x16	; 22
    2894:	88 e0       	ldi	r24, 0x08	; 8
    2896:	0e 94 99 07 	call	0xf32	; 0xf32 <xQueueGenericCreate>
    289a:	80 93 85 2c 	sts	0x2C85, r24	; 0x802c85 <displayLineQueue>
    289e:	90 93 86 2c 	sts	0x2C86, r25	; 0x802c86 <displayLineQueue+0x1>
	{
		//error(ERR_QUEUE_CREATE_HANDLE_NULL);
	}
	
	egDisplayTiming = xEventGroupCreate();
    28a2:	0e 94 81 02 	call	0x502	; 0x502 <xEventGroupCreate>
    28a6:	80 93 87 2c 	sts	0x2C87, r24	; 0x802c87 <egDisplayTiming>
    28aa:	90 93 88 2c 	sts	0x2C88, r25	; 0x802c88 <egDisplayTiming+0x1>
	

	xTaskCreate(vDisplayUpdateTask, (const char*) "dispUpdate", configMINIMAL_STACK_SIZE+150, NULL, 1, NULL);	
    28ae:	e1 2c       	mov	r14, r1
    28b0:	f1 2c       	mov	r15, r1
    28b2:	01 e0       	ldi	r16, 0x01	; 1
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	4e e5       	ldi	r20, 0x5E	; 94
    28ba:	51 e0       	ldi	r21, 0x01	; 1
    28bc:	6c e1       	ldi	r22, 0x1C	; 28
    28be:	70 e2       	ldi	r23, 0x20	; 32
    28c0:	8c eb       	ldi	r24, 0xBC	; 188
    28c2:	94 e1       	ldi	r25, 0x14	; 20
    28c4:	0e 94 27 0b 	call	0x164e	; 0x164e <xTaskCreate>
 }
    28c8:	0f 91       	pop	r16
    28ca:	ff 90       	pop	r15
    28cc:	ef 90       	pop	r14
    28ce:	08 95       	ret

000028d0 <_displaySetPos>:
 
 void _displaySetPos(int line, int pos) {
	 switch(line) {
    28d0:	81 30       	cpi	r24, 0x01	; 1
    28d2:	91 05       	cpc	r25, r1
    28d4:	79 f0       	breq	.+30     	; 0x28f4 <_displaySetPos+0x24>
    28d6:	1c f4       	brge	.+6      	; 0x28de <_displaySetPos+0xe>
    28d8:	89 2b       	or	r24, r25
    28da:	39 f0       	breq	.+14     	; 0x28ea <_displaySetPos+0x1a>
    28dc:	19 c0       	rjmp	.+50     	; 0x2910 <_displaySetPos+0x40>
    28de:	82 30       	cpi	r24, 0x02	; 2
    28e0:	91 05       	cpc	r25, r1
    28e2:	69 f0       	breq	.+26     	; 0x28fe <_displaySetPos+0x2e>
    28e4:	03 97       	sbiw	r24, 0x03	; 3
    28e6:	81 f0       	breq	.+32     	; 0x2908 <_displaySetPos+0x38>
    28e8:	13 c0       	rjmp	.+38     	; 0x2910 <_displaySetPos+0x40>
		 case 0:
		 command(0x80 + 0x00 + pos);
    28ea:	80 e8       	ldi	r24, 0x80	; 128
    28ec:	86 0f       	add	r24, r22
    28ee:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <command>
		 break;
    28f2:	0e c0       	rjmp	.+28     	; 0x2910 <_displaySetPos+0x40>
		 case 1:
		 command(0x80 + 0x40 + pos);
    28f4:	80 ec       	ldi	r24, 0xC0	; 192
    28f6:	86 0f       	add	r24, r22
    28f8:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <command>
		 break;
    28fc:	09 c0       	rjmp	.+18     	; 0x2910 <_displaySetPos+0x40>
		 case 2:
		 command(0x80 + 0x14 + pos);
    28fe:	84 e9       	ldi	r24, 0x94	; 148
    2900:	86 0f       	add	r24, r22
    2902:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <command>
		 break;
    2906:	04 c0       	rjmp	.+8      	; 0x2910 <_displaySetPos+0x40>
		 case 3:
		 command(0x80 + 0x54 + pos);
    2908:	84 ed       	ldi	r24, 0xD4	; 212
    290a:	86 0f       	add	r24, r22
    290c:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <command>
		 break;
	 }
	 delayUS(39);
    2910:	67 e2       	ldi	r22, 0x27	; 39
    2912:	70 e0       	ldi	r23, 0x00	; 0
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <delayUS>
    291c:	08 95       	ret

0000291e <_displayWriteChar>:
 }

 void _displayWriteChar(char c) {
	 write(c);
    291e:	0e 94 0e 14 	call	0x281c	; 0x281c <write>
	 delayUS(43);
    2922:	6b e2       	ldi	r22, 0x2B	; 43
    2924:	70 e0       	ldi	r23, 0x00	; 0
    2926:	80 e0       	ldi	r24, 0x00	; 0
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <delayUS>
    292e:	08 95       	ret

00002930 <_displayWriteString>:
 }
 
 void _displayWriteString(char* s) {
    2930:	0f 93       	push	r16
    2932:	1f 93       	push	r17
    2934:	cf 93       	push	r28
    2936:	df 93       	push	r29
    2938:	8c 01       	movw	r16, r24
	 for(int i = 0; i < 20; i++) {
    293a:	c0 e0       	ldi	r28, 0x00	; 0
    293c:	d0 e0       	ldi	r29, 0x00	; 0
    293e:	09 c0       	rjmp	.+18     	; 0x2952 <_displayWriteString+0x22>
		 if(s[i] == '\0') {
    2940:	f8 01       	movw	r30, r16
    2942:	ec 0f       	add	r30, r28
    2944:	fd 1f       	adc	r31, r29
    2946:	80 81       	ld	r24, Z
    2948:	88 23       	and	r24, r24
    294a:	31 f0       	breq	.+12     	; 0x2958 <_displayWriteString+0x28>
			 break;
		 }
		 _displayWriteChar(s[i]);
    294c:	0e 94 8f 14 	call	0x291e	; 0x291e <_displayWriteChar>
	 write(c);
	 delayUS(43);
 }
 
 void _displayWriteString(char* s) {
	 for(int i = 0; i < 20; i++) {
    2950:	21 96       	adiw	r28, 0x01	; 1
    2952:	c4 31       	cpi	r28, 0x14	; 20
    2954:	d1 05       	cpc	r29, r1
    2956:	a4 f3       	brlt	.-24     	; 0x2940 <_displayWriteString+0x10>
		 if(s[i] == '\0') {
			 break;
		 }
		 _displayWriteChar(s[i]);
	 }
 }
    2958:	df 91       	pop	r29
    295a:	cf 91       	pop	r28
    295c:	1f 91       	pop	r17
    295e:	0f 91       	pop	r16
    2960:	08 95       	ret

00002962 <_displayWriteStringAtPos>:

 void _displayWriteStringAtPos(int line, int pos, char* s) {
    2962:	cf 93       	push	r28
    2964:	df 93       	push	r29
    2966:	ea 01       	movw	r28, r20
	 _displaySetPos(line, pos);
    2968:	0e 94 68 14 	call	0x28d0	; 0x28d0 <_displaySetPos>
	 _displayWriteString(s);
    296c:	ce 01       	movw	r24, r28
    296e:	0e 94 98 14 	call	0x2930	; 0x2930 <_displayWriteString>
 }
    2972:	df 91       	pop	r29
    2974:	cf 91       	pop	r28
    2976:	08 95       	ret

00002978 <vDisplayUpdateTask>:

 void vDisplayUpdateTask(void *pvParameters) {
    2978:	cf 93       	push	r28
    297a:	df 93       	push	r29
    297c:	cd b7       	in	r28, 0x3d	; 61
    297e:	de b7       	in	r29, 0x3e	; 62
    2980:	c6 56       	subi	r28, 0x66	; 102
    2982:	d1 09       	sbc	r29, r1
    2984:	cd bf       	out	0x3d, r28	; 61
    2986:	de bf       	out	0x3e, r29	; 62
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
    2988:	80 e0       	ldi	r24, 0x00	; 0
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	19 c0       	rjmp	.+50     	; 0x29c0 <vDisplayUpdateTask+0x48>
		for(int j = 0; j < 20; j ++) {
			displayLines[i][j] = 0x20;
    298e:	44 e1       	ldi	r20, 0x14	; 20
    2990:	48 9f       	mul	r20, r24
    2992:	f0 01       	movw	r30, r0
    2994:	49 9f       	mul	r20, r25
    2996:	f0 0d       	add	r31, r0
    2998:	11 24       	eor	r1, r1
    299a:	41 e0       	ldi	r20, 0x01	; 1
    299c:	50 e0       	ldi	r21, 0x00	; 0
    299e:	4c 0f       	add	r20, r28
    29a0:	5d 1f       	adc	r21, r29
    29a2:	e4 0f       	add	r30, r20
    29a4:	f5 1f       	adc	r31, r21
    29a6:	e2 0f       	add	r30, r18
    29a8:	f3 1f       	adc	r31, r19
    29aa:	40 e2       	ldi	r20, 0x20	; 32
    29ac:	40 83       	st	Z, r20
 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
		for(int j = 0; j < 20; j ++) {
    29ae:	2f 5f       	subi	r18, 0xFF	; 255
    29b0:	3f 4f       	sbci	r19, 0xFF	; 255
    29b2:	02 c0       	rjmp	.+4      	; 0x29b8 <vDisplayUpdateTask+0x40>
    29b4:	20 e0       	ldi	r18, 0x00	; 0
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	24 31       	cpi	r18, 0x14	; 20
    29ba:	31 05       	cpc	r19, r1
    29bc:	44 f3       	brlt	.-48     	; 0x298e <vDisplayUpdateTask+0x16>

 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
    29be:	01 96       	adiw	r24, 0x01	; 1
    29c0:	84 30       	cpi	r24, 0x04	; 4
    29c2:	91 05       	cpc	r25, r1
    29c4:	bc f3       	brlt	.-18     	; 0x29b4 <vDisplayUpdateTask+0x3c>
			displayLines[i][j] = 0x20;
		}
	 }
	 displayLine_t newLine;

	 delayUS(40000);
    29c6:	60 e4       	ldi	r22, 0x40	; 64
    29c8:	7c e9       	ldi	r23, 0x9C	; 156
    29ca:	80 e0       	ldi	r24, 0x00	; 0
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <delayUS>
	 setPort(0x03);
    29d2:	83 e0       	ldi	r24, 0x03	; 3
    29d4:	0e 94 c0 13 	call	0x2780	; 0x2780 <setPort>
	 delayUS(5000);
    29d8:	68 e8       	ldi	r22, 0x88	; 136
    29da:	73 e1       	ldi	r23, 0x13	; 19
    29dc:	80 e0       	ldi	r24, 0x00	; 0
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <delayUS>
	 Nybble();
    29e4:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <Nybble>
	 delayUS(160);
    29e8:	60 ea       	ldi	r22, 0xA0	; 160
    29ea:	70 e0       	ldi	r23, 0x00	; 0
    29ec:	80 e0       	ldi	r24, 0x00	; 0
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <delayUS>
	 Nybble();
    29f4:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <Nybble>
	 delayUS(160);
    29f8:	60 ea       	ldi	r22, 0xA0	; 160
    29fa:	70 e0       	ldi	r23, 0x00	; 0
    29fc:	80 e0       	ldi	r24, 0x00	; 0
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <delayUS>
	 Nybble();
    2a04:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <Nybble>
	 delayUS(160);
    2a08:	60 ea       	ldi	r22, 0xA0	; 160
    2a0a:	70 e0       	ldi	r23, 0x00	; 0
    2a0c:	80 e0       	ldi	r24, 0x00	; 0
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <delayUS>
	 setPort(0x02);
    2a14:	82 e0       	ldi	r24, 0x02	; 2
    2a16:	0e 94 c0 13 	call	0x2780	; 0x2780 <setPort>
	 Nybble();
    2a1a:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <Nybble>
	 command(0x28);
    2a1e:	88 e2       	ldi	r24, 0x28	; 40
    2a20:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <command>
	 command(0x10);
    2a24:	80 e1       	ldi	r24, 0x10	; 16
    2a26:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <command>
	 command(0x0C); //Cursor and Blinking off
    2a2a:	8c e0       	ldi	r24, 0x0C	; 12
    2a2c:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <command>
	 command(0x06);
    2a30:	86 e0       	ldi	r24, 0x06	; 6
    2a32:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <command>
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
    2a36:	68 ec       	ldi	r22, 0xC8	; 200
    2a38:	70 e0       	ldi	r23, 0x00	; 0
    2a3a:	80 e0       	ldi	r24, 0x00	; 0
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <vTaskDelay>
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
    2a42:	40 e0       	ldi	r20, 0x00	; 0
    2a44:	50 e0       	ldi	r21, 0x00	; 0
    2a46:	ba 01       	movw	r22, r20
    2a48:	80 91 87 2c 	lds	r24, 0x2C87	; 0x802c87 <egDisplayTiming>
    2a4c:	90 91 88 2c 	lds	r25, 0x2C88	; 0x802c88 <egDisplayTiming+0x1>
    2a50:	0e 94 3d 03 	call	0x67a	; 0x67a <xEventGroupClearBits>
    2a54:	67 2b       	or	r22, r23
    2a56:	68 2b       	or	r22, r24
    2a58:	69 2b       	or	r22, r25
    2a5a:	09 f4       	brne	.+2      	; 0x2a5e <vDisplayUpdateTask+0xe6>
    2a5c:	5f c0       	rjmp	.+190    	; 0x2b1c <vDisplayUpdateTask+0x1a4>
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    2a5e:	42 e0       	ldi	r20, 0x02	; 2
    2a60:	50 e0       	ldi	r21, 0x00	; 0
    2a62:	60 e0       	ldi	r22, 0x00	; 0
    2a64:	70 e0       	ldi	r23, 0x00	; 0
    2a66:	80 91 87 2c 	lds	r24, 0x2C87	; 0x802c87 <egDisplayTiming>
    2a6a:	90 91 88 2c 	lds	r25, 0x2C88	; 0x802c88 <egDisplayTiming+0x1>
    2a6e:	0e 94 3d 03 	call	0x67a	; 0x67a <xEventGroupClearBits>
			for(i = 0; i < 4;i++) {
    2a72:	40 e0       	ldi	r20, 0x00	; 0
    2a74:	50 e0       	ldi	r21, 0x00	; 0
    2a76:	19 c0       	rjmp	.+50     	; 0x2aaa <vDisplayUpdateTask+0x132>
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
    2a78:	24 e1       	ldi	r18, 0x14	; 20
    2a7a:	24 9f       	mul	r18, r20
    2a7c:	f0 01       	movw	r30, r0
    2a7e:	25 9f       	mul	r18, r21
    2a80:	f0 0d       	add	r31, r0
    2a82:	11 24       	eor	r1, r1
    2a84:	21 e0       	ldi	r18, 0x01	; 1
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	2c 0f       	add	r18, r28
    2a8a:	3d 1f       	adc	r19, r29
    2a8c:	e2 0f       	add	r30, r18
    2a8e:	f3 1f       	adc	r31, r19
    2a90:	e8 0f       	add	r30, r24
    2a92:	f9 1f       	adc	r31, r25
    2a94:	20 e2       	ldi	r18, 0x20	; 32
    2a96:	20 83       	st	Z, r18
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
				for(j = 0; j < 20; j ++) {
    2a98:	01 96       	adiw	r24, 0x01	; 1
    2a9a:	02 c0       	rjmp	.+4      	; 0x2aa0 <vDisplayUpdateTask+0x128>
    2a9c:	80 e0       	ldi	r24, 0x00	; 0
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	84 31       	cpi	r24, 0x14	; 20
    2aa2:	91 05       	cpc	r25, r1
    2aa4:	4c f3       	brlt	.-46     	; 0x2a78 <vDisplayUpdateTask+0x100>
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
    2aa6:	4f 5f       	subi	r20, 0xFF	; 255
    2aa8:	5f 4f       	sbci	r21, 0xFF	; 255
    2aaa:	44 30       	cpi	r20, 0x04	; 4
    2aac:	51 05       	cpc	r21, r1
    2aae:	b4 f3       	brlt	.-20     	; 0x2a9c <vDisplayUpdateTask+0x124>
    2ab0:	35 c0       	rjmp	.+106    	; 0x2b1c <vDisplayUpdateTask+0x1a4>
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
    2ab2:	2f ef       	ldi	r18, 0xFF	; 255
    2ab4:	3f ef       	ldi	r19, 0xFF	; 255
    2ab6:	a9 01       	movw	r20, r18
    2ab8:	be 01       	movw	r22, r28
    2aba:	6f 5a       	subi	r22, 0xAF	; 175
    2abc:	7f 4f       	sbci	r23, 0xFF	; 255
    2abe:	80 91 85 2c 	lds	r24, 0x2C85	; 0x802c85 <displayLineQueue>
    2ac2:	90 91 86 2c 	lds	r25, 0x2C86	; 0x802c86 <displayLineQueue+0x1>
    2ac6:	0e 94 a7 08 	call	0x114e	; 0x114e <xQueueReceive>
    2aca:	88 23       	and	r24, r24
    2acc:	39 f1       	breq	.+78     	; 0x2b1c <vDisplayUpdateTask+0x1a4>
    2ace:	12 c0       	rjmp	.+36     	; 0x2af4 <vDisplayUpdateTask+0x17c>
				i=0;			
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
    2ad0:	62 96       	adiw	r28, 0x12	; 18
    2ad2:	4f ad       	ldd	r20, Y+63	; 0x3f
    2ad4:	62 97       	sbiw	r28, 0x12	; 18
    2ad6:	e1 e0       	ldi	r30, 0x01	; 1
    2ad8:	f0 e0       	ldi	r31, 0x00	; 0
    2ada:	ec 0f       	add	r30, r28
    2adc:	fd 1f       	adc	r31, r29
    2ade:	74 e1       	ldi	r23, 0x14	; 20
    2ae0:	47 9f       	mul	r20, r23
    2ae2:	e0 0d       	add	r30, r0
    2ae4:	f1 1d       	adc	r31, r1
    2ae6:	11 24       	eor	r1, r1
    2ae8:	e8 0f       	add	r30, r24
    2aea:	f9 1f       	adc	r31, r25
    2aec:	60 83       	st	Z, r22
					i++;
    2aee:	2f 5f       	subi	r18, 0xFF	; 255
    2af0:	3f 4f       	sbci	r19, 0xFF	; 255
    2af2:	02 c0       	rjmp	.+4      	; 0x2af8 <vDisplayUpdateTask+0x180>
    2af4:	20 e0       	ldi	r18, 0x00	; 0
    2af6:	30 e0       	ldi	r19, 0x00	; 0
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
				i=0;			
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    2af8:	63 96       	adiw	r28, 0x13	; 19
    2afa:	8f ad       	ldd	r24, Y+63	; 0x3f
    2afc:	63 97       	sbiw	r28, 0x13	; 19
    2afe:	f9 01       	movw	r30, r18
    2b00:	e8 0f       	add	r30, r24
    2b02:	f1 1d       	adc	r31, r1
    2b04:	cf 01       	movw	r24, r30
    2b06:	74 97       	sbiw	r30, 0x14	; 20
    2b08:	4c f4       	brge	.+18     	; 0x2b1c <vDisplayUpdateTask+0x1a4>
    2b0a:	e1 e5       	ldi	r30, 0x51	; 81
    2b0c:	f0 e0       	ldi	r31, 0x00	; 0
    2b0e:	ec 0f       	add	r30, r28
    2b10:	fd 1f       	adc	r31, r29
    2b12:	e2 0f       	add	r30, r18
    2b14:	f3 1f       	adc	r31, r19
    2b16:	62 81       	ldd	r22, Z+2	; 0x02
    2b18:	61 11       	cpse	r22, r1
    2b1a:	da cf       	rjmp	.-76     	; 0x2ad0 <vDisplayUpdateTask+0x158>
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
    2b1c:	80 91 85 2c 	lds	r24, 0x2C85	; 0x802c85 <displayLineQueue>
    2b20:	90 91 86 2c 	lds	r25, 0x2C86	; 0x802c86 <displayLineQueue+0x1>
    2b24:	0e 94 46 09 	call	0x128c	; 0x128c <uxQueueMessagesWaiting>
    2b28:	81 11       	cpse	r24, r1
    2b2a:	c3 cf       	rjmp	.-122    	; 0x2ab2 <vDisplayUpdateTask+0x13a>
    2b2c:	00 e0       	ldi	r16, 0x00	; 0
    2b2e:	10 e0       	ldi	r17, 0x00	; 0
    2b30:	13 c0       	rjmp	.+38     	; 0x2b58 <vDisplayUpdateTask+0x1e0>
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
			 _displayWriteStringAtPos(i,0,&displayLines[i][0]);
    2b32:	84 e1       	ldi	r24, 0x14	; 20
    2b34:	80 9f       	mul	r24, r16
    2b36:	a0 01       	movw	r20, r0
    2b38:	81 9f       	mul	r24, r17
    2b3a:	50 0d       	add	r21, r0
    2b3c:	11 24       	eor	r1, r1
    2b3e:	21 e0       	ldi	r18, 0x01	; 1
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	2c 0f       	add	r18, r28
    2b44:	3d 1f       	adc	r19, r29
    2b46:	42 0f       	add	r20, r18
    2b48:	53 1f       	adc	r21, r19
    2b4a:	60 e0       	ldi	r22, 0x00	; 0
    2b4c:	70 e0       	ldi	r23, 0x00	; 0
    2b4e:	c8 01       	movw	r24, r16
    2b50:	0e 94 b1 14 	call	0x2962	; 0x2962 <_displayWriteStringAtPos>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
    2b54:	0f 5f       	subi	r16, 0xFF	; 255
    2b56:	1f 4f       	sbci	r17, 0xFF	; 255
    2b58:	04 30       	cpi	r16, 0x04	; 4
    2b5a:	11 05       	cpc	r17, r1
    2b5c:	54 f3       	brlt	.-44     	; 0x2b32 <vDisplayUpdateTask+0x1ba>
    2b5e:	6b cf       	rjmp	.-298    	; 0x2a36 <vDisplayUpdateTask+0xbe>

00002b60 <__subsf3>:
    2b60:	50 58       	subi	r21, 0x80	; 128

00002b62 <__addsf3>:
    2b62:	bb 27       	eor	r27, r27
    2b64:	aa 27       	eor	r26, r26
    2b66:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <__addsf3x>
    2b6a:	0c 94 e3 16 	jmp	0x2dc6	; 0x2dc6 <__fp_round>
    2b6e:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fp_pscA>
    2b72:	38 f0       	brcs	.+14     	; 0x2b82 <__addsf3+0x20>
    2b74:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <__fp_pscB>
    2b78:	20 f0       	brcs	.+8      	; 0x2b82 <__addsf3+0x20>
    2b7a:	39 f4       	brne	.+14     	; 0x2b8a <__addsf3+0x28>
    2b7c:	9f 3f       	cpi	r25, 0xFF	; 255
    2b7e:	19 f4       	brne	.+6      	; 0x2b86 <__addsf3+0x24>
    2b80:	26 f4       	brtc	.+8      	; 0x2b8a <__addsf3+0x28>
    2b82:	0c 94 d2 16 	jmp	0x2da4	; 0x2da4 <__fp_nan>
    2b86:	0e f4       	brtc	.+2      	; 0x2b8a <__addsf3+0x28>
    2b88:	e0 95       	com	r30
    2b8a:	e7 fb       	bst	r30, 7
    2b8c:	0c 94 cc 16 	jmp	0x2d98	; 0x2d98 <__fp_inf>

00002b90 <__addsf3x>:
    2b90:	e9 2f       	mov	r30, r25
    2b92:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <__fp_split3>
    2b96:	58 f3       	brcs	.-42     	; 0x2b6e <__addsf3+0xc>
    2b98:	ba 17       	cp	r27, r26
    2b9a:	62 07       	cpc	r22, r18
    2b9c:	73 07       	cpc	r23, r19
    2b9e:	84 07       	cpc	r24, r20
    2ba0:	95 07       	cpc	r25, r21
    2ba2:	20 f0       	brcs	.+8      	; 0x2bac <__addsf3x+0x1c>
    2ba4:	79 f4       	brne	.+30     	; 0x2bc4 <__addsf3x+0x34>
    2ba6:	a6 f5       	brtc	.+104    	; 0x2c10 <__addsf3x+0x80>
    2ba8:	0c 94 16 17 	jmp	0x2e2c	; 0x2e2c <__fp_zero>
    2bac:	0e f4       	brtc	.+2      	; 0x2bb0 <__addsf3x+0x20>
    2bae:	e0 95       	com	r30
    2bb0:	0b 2e       	mov	r0, r27
    2bb2:	ba 2f       	mov	r27, r26
    2bb4:	a0 2d       	mov	r26, r0
    2bb6:	0b 01       	movw	r0, r22
    2bb8:	b9 01       	movw	r22, r18
    2bba:	90 01       	movw	r18, r0
    2bbc:	0c 01       	movw	r0, r24
    2bbe:	ca 01       	movw	r24, r20
    2bc0:	a0 01       	movw	r20, r0
    2bc2:	11 24       	eor	r1, r1
    2bc4:	ff 27       	eor	r31, r31
    2bc6:	59 1b       	sub	r21, r25
    2bc8:	99 f0       	breq	.+38     	; 0x2bf0 <__addsf3x+0x60>
    2bca:	59 3f       	cpi	r21, 0xF9	; 249
    2bcc:	50 f4       	brcc	.+20     	; 0x2be2 <__addsf3x+0x52>
    2bce:	50 3e       	cpi	r21, 0xE0	; 224
    2bd0:	68 f1       	brcs	.+90     	; 0x2c2c <__addsf3x+0x9c>
    2bd2:	1a 16       	cp	r1, r26
    2bd4:	f0 40       	sbci	r31, 0x00	; 0
    2bd6:	a2 2f       	mov	r26, r18
    2bd8:	23 2f       	mov	r18, r19
    2bda:	34 2f       	mov	r19, r20
    2bdc:	44 27       	eor	r20, r20
    2bde:	58 5f       	subi	r21, 0xF8	; 248
    2be0:	f3 cf       	rjmp	.-26     	; 0x2bc8 <__addsf3x+0x38>
    2be2:	46 95       	lsr	r20
    2be4:	37 95       	ror	r19
    2be6:	27 95       	ror	r18
    2be8:	a7 95       	ror	r26
    2bea:	f0 40       	sbci	r31, 0x00	; 0
    2bec:	53 95       	inc	r21
    2bee:	c9 f7       	brne	.-14     	; 0x2be2 <__addsf3x+0x52>
    2bf0:	7e f4       	brtc	.+30     	; 0x2c10 <__addsf3x+0x80>
    2bf2:	1f 16       	cp	r1, r31
    2bf4:	ba 0b       	sbc	r27, r26
    2bf6:	62 0b       	sbc	r22, r18
    2bf8:	73 0b       	sbc	r23, r19
    2bfa:	84 0b       	sbc	r24, r20
    2bfc:	ba f0       	brmi	.+46     	; 0x2c2c <__addsf3x+0x9c>
    2bfe:	91 50       	subi	r25, 0x01	; 1
    2c00:	a1 f0       	breq	.+40     	; 0x2c2a <__addsf3x+0x9a>
    2c02:	ff 0f       	add	r31, r31
    2c04:	bb 1f       	adc	r27, r27
    2c06:	66 1f       	adc	r22, r22
    2c08:	77 1f       	adc	r23, r23
    2c0a:	88 1f       	adc	r24, r24
    2c0c:	c2 f7       	brpl	.-16     	; 0x2bfe <__addsf3x+0x6e>
    2c0e:	0e c0       	rjmp	.+28     	; 0x2c2c <__addsf3x+0x9c>
    2c10:	ba 0f       	add	r27, r26
    2c12:	62 1f       	adc	r22, r18
    2c14:	73 1f       	adc	r23, r19
    2c16:	84 1f       	adc	r24, r20
    2c18:	48 f4       	brcc	.+18     	; 0x2c2c <__addsf3x+0x9c>
    2c1a:	87 95       	ror	r24
    2c1c:	77 95       	ror	r23
    2c1e:	67 95       	ror	r22
    2c20:	b7 95       	ror	r27
    2c22:	f7 95       	ror	r31
    2c24:	9e 3f       	cpi	r25, 0xFE	; 254
    2c26:	08 f0       	brcs	.+2      	; 0x2c2a <__addsf3x+0x9a>
    2c28:	b0 cf       	rjmp	.-160    	; 0x2b8a <__addsf3+0x28>
    2c2a:	93 95       	inc	r25
    2c2c:	88 0f       	add	r24, r24
    2c2e:	08 f0       	brcs	.+2      	; 0x2c32 <__addsf3x+0xa2>
    2c30:	99 27       	eor	r25, r25
    2c32:	ee 0f       	add	r30, r30
    2c34:	97 95       	ror	r25
    2c36:	87 95       	ror	r24
    2c38:	08 95       	ret

00002c3a <__divsf3>:
    2c3a:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__divsf3x>
    2c3e:	0c 94 e3 16 	jmp	0x2dc6	; 0x2dc6 <__fp_round>
    2c42:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <__fp_pscB>
    2c46:	58 f0       	brcs	.+22     	; 0x2c5e <__divsf3+0x24>
    2c48:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fp_pscA>
    2c4c:	40 f0       	brcs	.+16     	; 0x2c5e <__divsf3+0x24>
    2c4e:	29 f4       	brne	.+10     	; 0x2c5a <__divsf3+0x20>
    2c50:	5f 3f       	cpi	r21, 0xFF	; 255
    2c52:	29 f0       	breq	.+10     	; 0x2c5e <__divsf3+0x24>
    2c54:	0c 94 cc 16 	jmp	0x2d98	; 0x2d98 <__fp_inf>
    2c58:	51 11       	cpse	r21, r1
    2c5a:	0c 94 17 17 	jmp	0x2e2e	; 0x2e2e <__fp_szero>
    2c5e:	0c 94 d2 16 	jmp	0x2da4	; 0x2da4 <__fp_nan>

00002c62 <__divsf3x>:
    2c62:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <__fp_split3>
    2c66:	68 f3       	brcs	.-38     	; 0x2c42 <__divsf3+0x8>

00002c68 <__divsf3_pse>:
    2c68:	99 23       	and	r25, r25
    2c6a:	b1 f3       	breq	.-20     	; 0x2c58 <__divsf3+0x1e>
    2c6c:	55 23       	and	r21, r21
    2c6e:	91 f3       	breq	.-28     	; 0x2c54 <__divsf3+0x1a>
    2c70:	95 1b       	sub	r25, r21
    2c72:	55 0b       	sbc	r21, r21
    2c74:	bb 27       	eor	r27, r27
    2c76:	aa 27       	eor	r26, r26
    2c78:	62 17       	cp	r22, r18
    2c7a:	73 07       	cpc	r23, r19
    2c7c:	84 07       	cpc	r24, r20
    2c7e:	38 f0       	brcs	.+14     	; 0x2c8e <__divsf3_pse+0x26>
    2c80:	9f 5f       	subi	r25, 0xFF	; 255
    2c82:	5f 4f       	sbci	r21, 0xFF	; 255
    2c84:	22 0f       	add	r18, r18
    2c86:	33 1f       	adc	r19, r19
    2c88:	44 1f       	adc	r20, r20
    2c8a:	aa 1f       	adc	r26, r26
    2c8c:	a9 f3       	breq	.-22     	; 0x2c78 <__divsf3_pse+0x10>
    2c8e:	35 d0       	rcall	.+106    	; 0x2cfa <__divsf3_pse+0x92>
    2c90:	0e 2e       	mov	r0, r30
    2c92:	3a f0       	brmi	.+14     	; 0x2ca2 <__divsf3_pse+0x3a>
    2c94:	e0 e8       	ldi	r30, 0x80	; 128
    2c96:	32 d0       	rcall	.+100    	; 0x2cfc <__divsf3_pse+0x94>
    2c98:	91 50       	subi	r25, 0x01	; 1
    2c9a:	50 40       	sbci	r21, 0x00	; 0
    2c9c:	e6 95       	lsr	r30
    2c9e:	00 1c       	adc	r0, r0
    2ca0:	ca f7       	brpl	.-14     	; 0x2c94 <__divsf3_pse+0x2c>
    2ca2:	2b d0       	rcall	.+86     	; 0x2cfa <__divsf3_pse+0x92>
    2ca4:	fe 2f       	mov	r31, r30
    2ca6:	29 d0       	rcall	.+82     	; 0x2cfa <__divsf3_pse+0x92>
    2ca8:	66 0f       	add	r22, r22
    2caa:	77 1f       	adc	r23, r23
    2cac:	88 1f       	adc	r24, r24
    2cae:	bb 1f       	adc	r27, r27
    2cb0:	26 17       	cp	r18, r22
    2cb2:	37 07       	cpc	r19, r23
    2cb4:	48 07       	cpc	r20, r24
    2cb6:	ab 07       	cpc	r26, r27
    2cb8:	b0 e8       	ldi	r27, 0x80	; 128
    2cba:	09 f0       	breq	.+2      	; 0x2cbe <__divsf3_pse+0x56>
    2cbc:	bb 0b       	sbc	r27, r27
    2cbe:	80 2d       	mov	r24, r0
    2cc0:	bf 01       	movw	r22, r30
    2cc2:	ff 27       	eor	r31, r31
    2cc4:	93 58       	subi	r25, 0x83	; 131
    2cc6:	5f 4f       	sbci	r21, 0xFF	; 255
    2cc8:	3a f0       	brmi	.+14     	; 0x2cd8 <__divsf3_pse+0x70>
    2cca:	9e 3f       	cpi	r25, 0xFE	; 254
    2ccc:	51 05       	cpc	r21, r1
    2cce:	78 f0       	brcs	.+30     	; 0x2cee <__divsf3_pse+0x86>
    2cd0:	0c 94 cc 16 	jmp	0x2d98	; 0x2d98 <__fp_inf>
    2cd4:	0c 94 17 17 	jmp	0x2e2e	; 0x2e2e <__fp_szero>
    2cd8:	5f 3f       	cpi	r21, 0xFF	; 255
    2cda:	e4 f3       	brlt	.-8      	; 0x2cd4 <__divsf3_pse+0x6c>
    2cdc:	98 3e       	cpi	r25, 0xE8	; 232
    2cde:	d4 f3       	brlt	.-12     	; 0x2cd4 <__divsf3_pse+0x6c>
    2ce0:	86 95       	lsr	r24
    2ce2:	77 95       	ror	r23
    2ce4:	67 95       	ror	r22
    2ce6:	b7 95       	ror	r27
    2ce8:	f7 95       	ror	r31
    2cea:	9f 5f       	subi	r25, 0xFF	; 255
    2cec:	c9 f7       	brne	.-14     	; 0x2ce0 <__divsf3_pse+0x78>
    2cee:	88 0f       	add	r24, r24
    2cf0:	91 1d       	adc	r25, r1
    2cf2:	96 95       	lsr	r25
    2cf4:	87 95       	ror	r24
    2cf6:	97 f9       	bld	r25, 7
    2cf8:	08 95       	ret
    2cfa:	e1 e0       	ldi	r30, 0x01	; 1
    2cfc:	66 0f       	add	r22, r22
    2cfe:	77 1f       	adc	r23, r23
    2d00:	88 1f       	adc	r24, r24
    2d02:	bb 1f       	adc	r27, r27
    2d04:	62 17       	cp	r22, r18
    2d06:	73 07       	cpc	r23, r19
    2d08:	84 07       	cpc	r24, r20
    2d0a:	ba 07       	cpc	r27, r26
    2d0c:	20 f0       	brcs	.+8      	; 0x2d16 <__divsf3_pse+0xae>
    2d0e:	62 1b       	sub	r22, r18
    2d10:	73 0b       	sbc	r23, r19
    2d12:	84 0b       	sbc	r24, r20
    2d14:	ba 0b       	sbc	r27, r26
    2d16:	ee 1f       	adc	r30, r30
    2d18:	88 f7       	brcc	.-30     	; 0x2cfc <__divsf3_pse+0x94>
    2d1a:	e0 95       	com	r30
    2d1c:	08 95       	ret

00002d1e <__floatunsisf>:
    2d1e:	e8 94       	clt
    2d20:	09 c0       	rjmp	.+18     	; 0x2d34 <__floatsisf+0x12>

00002d22 <__floatsisf>:
    2d22:	97 fb       	bst	r25, 7
    2d24:	3e f4       	brtc	.+14     	; 0x2d34 <__floatsisf+0x12>
    2d26:	90 95       	com	r25
    2d28:	80 95       	com	r24
    2d2a:	70 95       	com	r23
    2d2c:	61 95       	neg	r22
    2d2e:	7f 4f       	sbci	r23, 0xFF	; 255
    2d30:	8f 4f       	sbci	r24, 0xFF	; 255
    2d32:	9f 4f       	sbci	r25, 0xFF	; 255
    2d34:	99 23       	and	r25, r25
    2d36:	a9 f0       	breq	.+42     	; 0x2d62 <__floatsisf+0x40>
    2d38:	f9 2f       	mov	r31, r25
    2d3a:	96 e9       	ldi	r25, 0x96	; 150
    2d3c:	bb 27       	eor	r27, r27
    2d3e:	93 95       	inc	r25
    2d40:	f6 95       	lsr	r31
    2d42:	87 95       	ror	r24
    2d44:	77 95       	ror	r23
    2d46:	67 95       	ror	r22
    2d48:	b7 95       	ror	r27
    2d4a:	f1 11       	cpse	r31, r1
    2d4c:	f8 cf       	rjmp	.-16     	; 0x2d3e <__floatsisf+0x1c>
    2d4e:	fa f4       	brpl	.+62     	; 0x2d8e <__floatsisf+0x6c>
    2d50:	bb 0f       	add	r27, r27
    2d52:	11 f4       	brne	.+4      	; 0x2d58 <__floatsisf+0x36>
    2d54:	60 ff       	sbrs	r22, 0
    2d56:	1b c0       	rjmp	.+54     	; 0x2d8e <__floatsisf+0x6c>
    2d58:	6f 5f       	subi	r22, 0xFF	; 255
    2d5a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d5c:	8f 4f       	sbci	r24, 0xFF	; 255
    2d5e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d60:	16 c0       	rjmp	.+44     	; 0x2d8e <__floatsisf+0x6c>
    2d62:	88 23       	and	r24, r24
    2d64:	11 f0       	breq	.+4      	; 0x2d6a <__floatsisf+0x48>
    2d66:	96 e9       	ldi	r25, 0x96	; 150
    2d68:	11 c0       	rjmp	.+34     	; 0x2d8c <__floatsisf+0x6a>
    2d6a:	77 23       	and	r23, r23
    2d6c:	21 f0       	breq	.+8      	; 0x2d76 <__floatsisf+0x54>
    2d6e:	9e e8       	ldi	r25, 0x8E	; 142
    2d70:	87 2f       	mov	r24, r23
    2d72:	76 2f       	mov	r23, r22
    2d74:	05 c0       	rjmp	.+10     	; 0x2d80 <__floatsisf+0x5e>
    2d76:	66 23       	and	r22, r22
    2d78:	71 f0       	breq	.+28     	; 0x2d96 <__floatsisf+0x74>
    2d7a:	96 e8       	ldi	r25, 0x86	; 134
    2d7c:	86 2f       	mov	r24, r22
    2d7e:	70 e0       	ldi	r23, 0x00	; 0
    2d80:	60 e0       	ldi	r22, 0x00	; 0
    2d82:	2a f0       	brmi	.+10     	; 0x2d8e <__floatsisf+0x6c>
    2d84:	9a 95       	dec	r25
    2d86:	66 0f       	add	r22, r22
    2d88:	77 1f       	adc	r23, r23
    2d8a:	88 1f       	adc	r24, r24
    2d8c:	da f7       	brpl	.-10     	; 0x2d84 <__floatsisf+0x62>
    2d8e:	88 0f       	add	r24, r24
    2d90:	96 95       	lsr	r25
    2d92:	87 95       	ror	r24
    2d94:	97 f9       	bld	r25, 7
    2d96:	08 95       	ret

00002d98 <__fp_inf>:
    2d98:	97 f9       	bld	r25, 7
    2d9a:	9f 67       	ori	r25, 0x7F	; 127
    2d9c:	80 e8       	ldi	r24, 0x80	; 128
    2d9e:	70 e0       	ldi	r23, 0x00	; 0
    2da0:	60 e0       	ldi	r22, 0x00	; 0
    2da2:	08 95       	ret

00002da4 <__fp_nan>:
    2da4:	9f ef       	ldi	r25, 0xFF	; 255
    2da6:	80 ec       	ldi	r24, 0xC0	; 192
    2da8:	08 95       	ret

00002daa <__fp_pscA>:
    2daa:	00 24       	eor	r0, r0
    2dac:	0a 94       	dec	r0
    2dae:	16 16       	cp	r1, r22
    2db0:	17 06       	cpc	r1, r23
    2db2:	18 06       	cpc	r1, r24
    2db4:	09 06       	cpc	r0, r25
    2db6:	08 95       	ret

00002db8 <__fp_pscB>:
    2db8:	00 24       	eor	r0, r0
    2dba:	0a 94       	dec	r0
    2dbc:	12 16       	cp	r1, r18
    2dbe:	13 06       	cpc	r1, r19
    2dc0:	14 06       	cpc	r1, r20
    2dc2:	05 06       	cpc	r0, r21
    2dc4:	08 95       	ret

00002dc6 <__fp_round>:
    2dc6:	09 2e       	mov	r0, r25
    2dc8:	03 94       	inc	r0
    2dca:	00 0c       	add	r0, r0
    2dcc:	11 f4       	brne	.+4      	; 0x2dd2 <__fp_round+0xc>
    2dce:	88 23       	and	r24, r24
    2dd0:	52 f0       	brmi	.+20     	; 0x2de6 <__fp_round+0x20>
    2dd2:	bb 0f       	add	r27, r27
    2dd4:	40 f4       	brcc	.+16     	; 0x2de6 <__fp_round+0x20>
    2dd6:	bf 2b       	or	r27, r31
    2dd8:	11 f4       	brne	.+4      	; 0x2dde <__fp_round+0x18>
    2dda:	60 ff       	sbrs	r22, 0
    2ddc:	04 c0       	rjmp	.+8      	; 0x2de6 <__fp_round+0x20>
    2dde:	6f 5f       	subi	r22, 0xFF	; 255
    2de0:	7f 4f       	sbci	r23, 0xFF	; 255
    2de2:	8f 4f       	sbci	r24, 0xFF	; 255
    2de4:	9f 4f       	sbci	r25, 0xFF	; 255
    2de6:	08 95       	ret

00002de8 <__fp_split3>:
    2de8:	57 fd       	sbrc	r21, 7
    2dea:	90 58       	subi	r25, 0x80	; 128
    2dec:	44 0f       	add	r20, r20
    2dee:	55 1f       	adc	r21, r21
    2df0:	59 f0       	breq	.+22     	; 0x2e08 <__fp_splitA+0x10>
    2df2:	5f 3f       	cpi	r21, 0xFF	; 255
    2df4:	71 f0       	breq	.+28     	; 0x2e12 <__fp_splitA+0x1a>
    2df6:	47 95       	ror	r20

00002df8 <__fp_splitA>:
    2df8:	88 0f       	add	r24, r24
    2dfa:	97 fb       	bst	r25, 7
    2dfc:	99 1f       	adc	r25, r25
    2dfe:	61 f0       	breq	.+24     	; 0x2e18 <__fp_splitA+0x20>
    2e00:	9f 3f       	cpi	r25, 0xFF	; 255
    2e02:	79 f0       	breq	.+30     	; 0x2e22 <__fp_splitA+0x2a>
    2e04:	87 95       	ror	r24
    2e06:	08 95       	ret
    2e08:	12 16       	cp	r1, r18
    2e0a:	13 06       	cpc	r1, r19
    2e0c:	14 06       	cpc	r1, r20
    2e0e:	55 1f       	adc	r21, r21
    2e10:	f2 cf       	rjmp	.-28     	; 0x2df6 <__fp_split3+0xe>
    2e12:	46 95       	lsr	r20
    2e14:	f1 df       	rcall	.-30     	; 0x2df8 <__fp_splitA>
    2e16:	08 c0       	rjmp	.+16     	; 0x2e28 <__fp_splitA+0x30>
    2e18:	16 16       	cp	r1, r22
    2e1a:	17 06       	cpc	r1, r23
    2e1c:	18 06       	cpc	r1, r24
    2e1e:	99 1f       	adc	r25, r25
    2e20:	f1 cf       	rjmp	.-30     	; 0x2e04 <__fp_splitA+0xc>
    2e22:	86 95       	lsr	r24
    2e24:	71 05       	cpc	r23, r1
    2e26:	61 05       	cpc	r22, r1
    2e28:	08 94       	sec
    2e2a:	08 95       	ret

00002e2c <__fp_zero>:
    2e2c:	e8 94       	clt

00002e2e <__fp_szero>:
    2e2e:	bb 27       	eor	r27, r27
    2e30:	66 27       	eor	r22, r22
    2e32:	77 27       	eor	r23, r23
    2e34:	cb 01       	movw	r24, r22
    2e36:	97 f9       	bld	r25, 7
    2e38:	08 95       	ret

00002e3a <__mulsf3>:
    2e3a:	0e 94 30 17 	call	0x2e60	; 0x2e60 <__mulsf3x>
    2e3e:	0c 94 e3 16 	jmp	0x2dc6	; 0x2dc6 <__fp_round>
    2e42:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__fp_pscA>
    2e46:	38 f0       	brcs	.+14     	; 0x2e56 <__mulsf3+0x1c>
    2e48:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <__fp_pscB>
    2e4c:	20 f0       	brcs	.+8      	; 0x2e56 <__mulsf3+0x1c>
    2e4e:	95 23       	and	r25, r21
    2e50:	11 f0       	breq	.+4      	; 0x2e56 <__mulsf3+0x1c>
    2e52:	0c 94 cc 16 	jmp	0x2d98	; 0x2d98 <__fp_inf>
    2e56:	0c 94 d2 16 	jmp	0x2da4	; 0x2da4 <__fp_nan>
    2e5a:	11 24       	eor	r1, r1
    2e5c:	0c 94 17 17 	jmp	0x2e2e	; 0x2e2e <__fp_szero>

00002e60 <__mulsf3x>:
    2e60:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <__fp_split3>
    2e64:	70 f3       	brcs	.-36     	; 0x2e42 <__mulsf3+0x8>

00002e66 <__mulsf3_pse>:
    2e66:	95 9f       	mul	r25, r21
    2e68:	c1 f3       	breq	.-16     	; 0x2e5a <__mulsf3+0x20>
    2e6a:	95 0f       	add	r25, r21
    2e6c:	50 e0       	ldi	r21, 0x00	; 0
    2e6e:	55 1f       	adc	r21, r21
    2e70:	62 9f       	mul	r22, r18
    2e72:	f0 01       	movw	r30, r0
    2e74:	72 9f       	mul	r23, r18
    2e76:	bb 27       	eor	r27, r27
    2e78:	f0 0d       	add	r31, r0
    2e7a:	b1 1d       	adc	r27, r1
    2e7c:	63 9f       	mul	r22, r19
    2e7e:	aa 27       	eor	r26, r26
    2e80:	f0 0d       	add	r31, r0
    2e82:	b1 1d       	adc	r27, r1
    2e84:	aa 1f       	adc	r26, r26
    2e86:	64 9f       	mul	r22, r20
    2e88:	66 27       	eor	r22, r22
    2e8a:	b0 0d       	add	r27, r0
    2e8c:	a1 1d       	adc	r26, r1
    2e8e:	66 1f       	adc	r22, r22
    2e90:	82 9f       	mul	r24, r18
    2e92:	22 27       	eor	r18, r18
    2e94:	b0 0d       	add	r27, r0
    2e96:	a1 1d       	adc	r26, r1
    2e98:	62 1f       	adc	r22, r18
    2e9a:	73 9f       	mul	r23, r19
    2e9c:	b0 0d       	add	r27, r0
    2e9e:	a1 1d       	adc	r26, r1
    2ea0:	62 1f       	adc	r22, r18
    2ea2:	83 9f       	mul	r24, r19
    2ea4:	a0 0d       	add	r26, r0
    2ea6:	61 1d       	adc	r22, r1
    2ea8:	22 1f       	adc	r18, r18
    2eaa:	74 9f       	mul	r23, r20
    2eac:	33 27       	eor	r19, r19
    2eae:	a0 0d       	add	r26, r0
    2eb0:	61 1d       	adc	r22, r1
    2eb2:	23 1f       	adc	r18, r19
    2eb4:	84 9f       	mul	r24, r20
    2eb6:	60 0d       	add	r22, r0
    2eb8:	21 1d       	adc	r18, r1
    2eba:	82 2f       	mov	r24, r18
    2ebc:	76 2f       	mov	r23, r22
    2ebe:	6a 2f       	mov	r22, r26
    2ec0:	11 24       	eor	r1, r1
    2ec2:	9f 57       	subi	r25, 0x7F	; 127
    2ec4:	50 40       	sbci	r21, 0x00	; 0
    2ec6:	9a f0       	brmi	.+38     	; 0x2eee <__mulsf3_pse+0x88>
    2ec8:	f1 f0       	breq	.+60     	; 0x2f06 <__mulsf3_pse+0xa0>
    2eca:	88 23       	and	r24, r24
    2ecc:	4a f0       	brmi	.+18     	; 0x2ee0 <__mulsf3_pse+0x7a>
    2ece:	ee 0f       	add	r30, r30
    2ed0:	ff 1f       	adc	r31, r31
    2ed2:	bb 1f       	adc	r27, r27
    2ed4:	66 1f       	adc	r22, r22
    2ed6:	77 1f       	adc	r23, r23
    2ed8:	88 1f       	adc	r24, r24
    2eda:	91 50       	subi	r25, 0x01	; 1
    2edc:	50 40       	sbci	r21, 0x00	; 0
    2ede:	a9 f7       	brne	.-22     	; 0x2eca <__mulsf3_pse+0x64>
    2ee0:	9e 3f       	cpi	r25, 0xFE	; 254
    2ee2:	51 05       	cpc	r21, r1
    2ee4:	80 f0       	brcs	.+32     	; 0x2f06 <__mulsf3_pse+0xa0>
    2ee6:	0c 94 cc 16 	jmp	0x2d98	; 0x2d98 <__fp_inf>
    2eea:	0c 94 17 17 	jmp	0x2e2e	; 0x2e2e <__fp_szero>
    2eee:	5f 3f       	cpi	r21, 0xFF	; 255
    2ef0:	e4 f3       	brlt	.-8      	; 0x2eea <__mulsf3_pse+0x84>
    2ef2:	98 3e       	cpi	r25, 0xE8	; 232
    2ef4:	d4 f3       	brlt	.-12     	; 0x2eea <__mulsf3_pse+0x84>
    2ef6:	86 95       	lsr	r24
    2ef8:	77 95       	ror	r23
    2efa:	67 95       	ror	r22
    2efc:	b7 95       	ror	r27
    2efe:	f7 95       	ror	r31
    2f00:	e7 95       	ror	r30
    2f02:	9f 5f       	subi	r25, 0xFF	; 255
    2f04:	c1 f7       	brne	.-16     	; 0x2ef6 <__mulsf3_pse+0x90>
    2f06:	fe 2b       	or	r31, r30
    2f08:	88 0f       	add	r24, r24
    2f0a:	91 1d       	adc	r25, r1
    2f0c:	96 95       	lsr	r25
    2f0e:	87 95       	ror	r24
    2f10:	97 f9       	bld	r25, 7
    2f12:	08 95       	ret

00002f14 <__tablejump2__>:
    2f14:	ee 0f       	add	r30, r30
    2f16:	ff 1f       	adc	r31, r31
    2f18:	88 1f       	adc	r24, r24
    2f1a:	8b bf       	out	0x3b, r24	; 59
    2f1c:	07 90       	elpm	r0, Z+
    2f1e:	f6 91       	elpm	r31, Z
    2f20:	e0 2d       	mov	r30, r0
    2f22:	19 94       	eijmp

00002f24 <memcpy>:
    2f24:	fb 01       	movw	r30, r22
    2f26:	dc 01       	movw	r26, r24
    2f28:	02 c0       	rjmp	.+4      	; 0x2f2e <memcpy+0xa>
    2f2a:	01 90       	ld	r0, Z+
    2f2c:	0d 92       	st	X+, r0
    2f2e:	41 50       	subi	r20, 0x01	; 1
    2f30:	50 40       	sbci	r21, 0x00	; 0
    2f32:	d8 f7       	brcc	.-10     	; 0x2f2a <memcpy+0x6>
    2f34:	08 95       	ret

00002f36 <memset>:
    2f36:	dc 01       	movw	r26, r24
    2f38:	01 c0       	rjmp	.+2      	; 0x2f3c <memset+0x6>
    2f3a:	6d 93       	st	X+, r22
    2f3c:	41 50       	subi	r20, 0x01	; 1
    2f3e:	50 40       	sbci	r21, 0x00	; 0
    2f40:	e0 f7       	brcc	.-8      	; 0x2f3a <memset+0x4>
    2f42:	08 95       	ret

00002f44 <_exit>:
    2f44:	f8 94       	cli

00002f46 <__stop_program>:
    2f46:	ff cf       	rjmp	.-2      	; 0x2f46 <__stop_program>
