
NYC_PI_CALC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003fd2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00802000  00003fd2  00004066  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000c8d  00802048  00802048  000040ae  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000040ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000410c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007e0  00000000  00000000  0000414c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000df4d  00000000  00000000  0000492c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004c6f  00000000  00000000  00012879  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004f8f  00000000  00000000  000174e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001ae0  00000000  00000000  0001c478  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000055ce  00000000  00000000  0001df58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008a88  00000000  00000000  00023526  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007c0  00000000  00000000  0002bfae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__ctors_end>
       4:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
       8:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
       c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      10:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      14:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      18:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      1c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      20:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      24:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      28:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      2c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      30:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      34:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      38:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__vector_14>
      3c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      40:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      44:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      48:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      4c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      50:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      54:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      58:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      5c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      60:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      64:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      68:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      6c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      70:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      74:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      78:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      7c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      80:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      84:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      88:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      8c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      90:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      94:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      98:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      9c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      a0:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      a4:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      a8:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      ac:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      b0:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      b4:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      b8:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      bc:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      c0:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      c4:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      c8:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      cc:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      d0:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      d4:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      d8:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      dc:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      e0:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      e4:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      e8:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      ec:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      f0:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      f4:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      f8:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      fc:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     100:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     104:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     108:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     10c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     110:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     114:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     118:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     11c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     120:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     124:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     128:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     12c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     130:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     134:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     138:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     13c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     140:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     144:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     148:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     14c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     150:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     154:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     158:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     15c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     160:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     164:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     168:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     16c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     170:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     174:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     178:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     17c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     180:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     184:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     188:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     18c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     190:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     194:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     198:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     19c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1a0:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1a4:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1a8:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1ac:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1b0:	0c 94 7a 17 	jmp	0x2ef4	; 0x2ef4 <__vector_108>
     1b4:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1b8:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1bc:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1c0:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1c4:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1c8:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1cc:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1d0:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1d4:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1d8:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1dc:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1e0:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1e4:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1e8:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1ec:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1f0:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1f4:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1f8:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
     1fc:	df 11       	cpse	r29, r15
     1fe:	df 11       	cpse	r29, r15
     200:	df 11       	cpse	r29, r15
     202:	2c 12       	cpse	r2, r28
     204:	14 12       	cpse	r1, r20
     206:	29 12       	cpse	r2, r25
     208:	df 11       	cpse	r29, r15
     20a:	df 11       	cpse	r29, r15
     20c:	2c 12       	cpse	r2, r28
     20e:	14 12       	cpse	r1, r20

00000210 <__trampolines_start>:
     210:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <vAreaPi>
     214:	0c 94 36 0b 	jmp	0x166c	; 0x166c <prvIdleTask>
     218:	0c 94 14 12 	jmp	0x2428	; 0x2428 <prvProcessReceivedCommands+0xf2>
     21c:	0c 94 2c 12 	jmp	0x2458	; 0x2458 <prvProcessReceivedCommands+0x122>
     220:	0c 94 39 13 	jmp	0x2672	; 0x2672 <controllerTask>
     224:	0c 94 48 12 	jmp	0x2490	; 0x2490 <prvTimerTask>
     228:	0c 94 b6 12 	jmp	0x256c	; 0x256c <vPiLeibniz>
     22c:	0c 94 df 11 	jmp	0x23be	; 0x23be <prvProcessReceivedCommands+0x88>
     230:	0c 94 29 12 	jmp	0x2452	; 0x2452 <prvProcessReceivedCommands+0x11c>
     234:	0c 94 04 04 	jmp	0x808	; 0x808 <vEventGroupSetBitsCallback>
     238:	0c 94 1e 19 	jmp	0x323c	; 0x323c <vDisplayUpdateTask>

0000023c <__ctors_end>:
     23c:	11 24       	eor	r1, r1
     23e:	1f be       	out	0x3f, r1	; 63
     240:	cf ef       	ldi	r28, 0xFF	; 255
     242:	cd bf       	out	0x3d, r28	; 61
     244:	df e3       	ldi	r29, 0x3F	; 63
     246:	de bf       	out	0x3e, r29	; 62
     248:	00 e0       	ldi	r16, 0x00	; 0
     24a:	0c bf       	out	0x3c, r16	; 60

0000024c <init_mem>:
// !!! Never call this function, it is part of .init-Code
void __attribute__ ((naked, section(".init3"))) init_mem (void);
void init_mem (void)
{
   //  Use inline assembler so it works even with optimization turned off
   __asm volatile (
     24c:	e5 ed       	ldi	r30, 0xD5	; 213
     24e:	fc e2       	ldi	r31, 0x2C	; 44
     250:	8a ea       	ldi	r24, 0xAA	; 170
     252:	90 e4       	ldi	r25, 0x40	; 64
     254:	81 93       	st	Z+, r24
     256:	e0 30       	cpi	r30, 0x00	; 0
     258:	f9 07       	cpc	r31, r25
     25a:	e0 f3       	brcs	.-8      	; 0x254 <init_mem+0x8>

0000025c <__do_copy_data>:
     25c:	10 e2       	ldi	r17, 0x20	; 32
     25e:	a0 e0       	ldi	r26, 0x00	; 0
     260:	b0 e2       	ldi	r27, 0x20	; 32
     262:	e2 ed       	ldi	r30, 0xD2	; 210
     264:	ff e3       	ldi	r31, 0x3F	; 63
     266:	00 e0       	ldi	r16, 0x00	; 0
     268:	0b bf       	out	0x3b, r16	; 59
     26a:	02 c0       	rjmp	.+4      	; 0x270 <__do_copy_data+0x14>
     26c:	07 90       	elpm	r0, Z+
     26e:	0d 92       	st	X+, r0
     270:	a8 34       	cpi	r26, 0x48	; 72
     272:	b1 07       	cpc	r27, r17
     274:	d9 f7       	brne	.-10     	; 0x26c <__do_copy_data+0x10>

00000276 <__do_clear_bss>:
     276:	2c e2       	ldi	r18, 0x2C	; 44
     278:	a8 e4       	ldi	r26, 0x48	; 72
     27a:	b0 e2       	ldi	r27, 0x20	; 32
     27c:	01 c0       	rjmp	.+2      	; 0x280 <.do_clear_bss_start>

0000027e <.do_clear_bss_loop>:
     27e:	1d 92       	st	X+, r1

00000280 <.do_clear_bss_start>:
     280:	a5 3d       	cpi	r26, 0xD5	; 213
     282:	b2 07       	cpc	r27, r18
     284:	e1 f7       	brne	.-8      	; 0x27e <.do_clear_bss_loop>
     286:	0e 94 88 13 	call	0x2710	; 0x2710 <main>
     28a:	0c 94 e7 1f 	jmp	0x3fce	; 0x3fce <_exit>

0000028e <__bad_interrupt>:
     28e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000292 <initButtons>:
 #define BUTTON_PRESS_LONG			500

 

 void initButtons(void) {
	PORTF.DIRCLR = PIN4_bm; //SW1
     292:	e0 ea       	ldi	r30, 0xA0	; 160
     294:	f6 e0       	ldi	r31, 0x06	; 6
     296:	80 e1       	ldi	r24, 0x10	; 16
     298:	82 83       	std	Z+2, r24	; 0x02
	PORTF.DIRCLR = PIN5_bm; //SW2
     29a:	80 e2       	ldi	r24, 0x20	; 32
     29c:	82 83       	std	Z+2, r24	; 0x02
	PORTF.DIRCLR = PIN6_bm; //SW3
     29e:	80 e4       	ldi	r24, 0x40	; 64
     2a0:	82 83       	std	Z+2, r24	; 0x02
	PORTF.DIRCLR = PIN7_bm; //SW4
     2a2:	80 e8       	ldi	r24, 0x80	; 128
     2a4:	82 83       	std	Z+2, r24	; 0x02
     2a6:	08 95       	ret

000002a8 <updateButtons>:
 void updateButtons(void) {
	static uint16_t b1Count = 0;
	static uint16_t b2Count = 0;
	static uint16_t b3Count = 0;
	static uint16_t b4Count = 0;
	if(Button1_Value == 0) {
     2a8:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7de6a8>
     2ac:	84 fd       	sbrc	r24, 4
     2ae:	0e c0       	rjmp	.+28     	; 0x2cc <updateButtons+0x24>
		if(b1Count < 60000) {
     2b0:	80 91 4e 20 	lds	r24, 0x204E	; 0x80204e <b1Count.3829>
     2b4:	90 91 4f 20 	lds	r25, 0x204F	; 0x80204f <b1Count.3829+0x1>
     2b8:	80 36       	cpi	r24, 0x60	; 96
     2ba:	2a ee       	ldi	r18, 0xEA	; 234
     2bc:	92 07       	cpc	r25, r18
     2be:	e8 f4       	brcc	.+58     	; 0x2fa <updateButtons+0x52>
			b1Count++;
     2c0:	01 96       	adiw	r24, 0x01	; 1
     2c2:	80 93 4e 20 	sts	0x204E, r24	; 0x80204e <b1Count.3829>
     2c6:	90 93 4f 20 	sts	0x204F, r25	; 0x80204f <b1Count.3829+0x1>
     2ca:	17 c0       	rjmp	.+46     	; 0x2fa <updateButtons+0x52>
		}
	} else {
		if(b1Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     2cc:	80 91 4e 20 	lds	r24, 0x204E	; 0x80204e <b1Count.3829>
     2d0:	90 91 4f 20 	lds	r25, 0x204F	; 0x80204f <b1Count.3829+0x1>
     2d4:	8b 30       	cpi	r24, 0x0B	; 11
     2d6:	91 05       	cpc	r25, r1
     2d8:	48 f0       	brcs	.+18     	; 0x2ec <updateButtons+0x44>
			if(b1Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     2da:	c3 97       	sbiw	r24, 0x33	; 51
     2dc:	18 f0       	brcs	.+6      	; 0x2e4 <updateButtons+0x3c>
				//Button was pressed Long
				b1Status = LONG_PRESSED;
     2de:	10 92 cc 2c 	sts	0x2CCC, r1	; 0x802ccc <b1Status>
     2e2:	07 c0       	rjmp	.+14     	; 0x2f2 <updateButtons+0x4a>
			} else {
				//Button was pressed Short	
				b1Status = SHORT_PRESSED;
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	80 93 cc 2c 	sts	0x2CCC, r24	; 0x802ccc <b1Status>
     2ea:	03 c0       	rjmp	.+6      	; 0x2f2 <updateButtons+0x4a>
			}
		} else {
			b1Status = NOT_PRESSED;
     2ec:	82 e0       	ldi	r24, 0x02	; 2
     2ee:	80 93 cc 2c 	sts	0x2CCC, r24	; 0x802ccc <b1Status>
		}
		b1Count = 0;
     2f2:	10 92 4e 20 	sts	0x204E, r1	; 0x80204e <b1Count.3829>
     2f6:	10 92 4f 20 	sts	0x204F, r1	; 0x80204f <b1Count.3829+0x1>
	}
	if(Button2_Value == 0) {
     2fa:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7de6a8>
     2fe:	85 fd       	sbrc	r24, 5
     300:	0e c0       	rjmp	.+28     	; 0x31e <updateButtons+0x76>
		if(b2Count < 60000) {
     302:	80 91 4c 20 	lds	r24, 0x204C	; 0x80204c <b2Count.3830>
     306:	90 91 4d 20 	lds	r25, 0x204D	; 0x80204d <b2Count.3830+0x1>
     30a:	80 36       	cpi	r24, 0x60	; 96
     30c:	2a ee       	ldi	r18, 0xEA	; 234
     30e:	92 07       	cpc	r25, r18
     310:	e8 f4       	brcc	.+58     	; 0x34c <updateButtons+0xa4>
			b2Count++;
     312:	01 96       	adiw	r24, 0x01	; 1
     314:	80 93 4c 20 	sts	0x204C, r24	; 0x80204c <b2Count.3830>
     318:	90 93 4d 20 	sts	0x204D, r25	; 0x80204d <b2Count.3830+0x1>
     31c:	17 c0       	rjmp	.+46     	; 0x34c <updateButtons+0xa4>
		}
	} else {
		if(b2Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     31e:	80 91 4c 20 	lds	r24, 0x204C	; 0x80204c <b2Count.3830>
     322:	90 91 4d 20 	lds	r25, 0x204D	; 0x80204d <b2Count.3830+0x1>
     326:	8b 30       	cpi	r24, 0x0B	; 11
     328:	91 05       	cpc	r25, r1
     32a:	48 f0       	brcs	.+18     	; 0x33e <updateButtons+0x96>
			if(b2Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     32c:	c3 97       	sbiw	r24, 0x33	; 51
     32e:	18 f0       	brcs	.+6      	; 0x336 <updateButtons+0x8e>
				//Button was pressed Long
				b2Status = LONG_PRESSED;
     330:	10 92 cd 2c 	sts	0x2CCD, r1	; 0x802ccd <b2Status>
     334:	07 c0       	rjmp	.+14     	; 0x344 <updateButtons+0x9c>
				} else {
				//Button was pressed Short
				b2Status = SHORT_PRESSED;
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	80 93 cd 2c 	sts	0x2CCD, r24	; 0x802ccd <b2Status>
     33c:	03 c0       	rjmp	.+6      	; 0x344 <updateButtons+0x9c>
			}
		} else {
			b2Status = NOT_PRESSED;			
     33e:	82 e0       	ldi	r24, 0x02	; 2
     340:	80 93 cd 2c 	sts	0x2CCD, r24	; 0x802ccd <b2Status>
		}
		b2Count = 0;
     344:	10 92 4c 20 	sts	0x204C, r1	; 0x80204c <b2Count.3830>
     348:	10 92 4d 20 	sts	0x204D, r1	; 0x80204d <b2Count.3830+0x1>
	}
	if(Button3_Value == 0) {
     34c:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7de6a8>
     350:	86 fd       	sbrc	r24, 6
     352:	0e c0       	rjmp	.+28     	; 0x370 <updateButtons+0xc8>
		if(b3Count < 60000) {
     354:	80 91 4a 20 	lds	r24, 0x204A	; 0x80204a <b3Count.3831>
     358:	90 91 4b 20 	lds	r25, 0x204B	; 0x80204b <b3Count.3831+0x1>
     35c:	80 36       	cpi	r24, 0x60	; 96
     35e:	2a ee       	ldi	r18, 0xEA	; 234
     360:	92 07       	cpc	r25, r18
     362:	e8 f4       	brcc	.+58     	; 0x39e <updateButtons+0xf6>
			b3Count++;
     364:	01 96       	adiw	r24, 0x01	; 1
     366:	80 93 4a 20 	sts	0x204A, r24	; 0x80204a <b3Count.3831>
     36a:	90 93 4b 20 	sts	0x204B, r25	; 0x80204b <b3Count.3831+0x1>
     36e:	17 c0       	rjmp	.+46     	; 0x39e <updateButtons+0xf6>
		}
	} else {
		if(b3Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     370:	80 91 4a 20 	lds	r24, 0x204A	; 0x80204a <b3Count.3831>
     374:	90 91 4b 20 	lds	r25, 0x204B	; 0x80204b <b3Count.3831+0x1>
     378:	8b 30       	cpi	r24, 0x0B	; 11
     37a:	91 05       	cpc	r25, r1
     37c:	48 f0       	brcs	.+18     	; 0x390 <updateButtons+0xe8>
			if(b3Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     37e:	c3 97       	sbiw	r24, 0x33	; 51
     380:	18 f0       	brcs	.+6      	; 0x388 <updateButtons+0xe0>
				//Button was pressed Long
				b3Status = LONG_PRESSED;
     382:	10 92 ce 2c 	sts	0x2CCE, r1	; 0x802cce <b3Status>
     386:	07 c0       	rjmp	.+14     	; 0x396 <updateButtons+0xee>
				} else {
				//Button was pressed Short
				b3Status = SHORT_PRESSED;
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	80 93 ce 2c 	sts	0x2CCE, r24	; 0x802cce <b3Status>
     38e:	03 c0       	rjmp	.+6      	; 0x396 <updateButtons+0xee>
			}
		} else {
			b3Status = NOT_PRESSED;
     390:	82 e0       	ldi	r24, 0x02	; 2
     392:	80 93 ce 2c 	sts	0x2CCE, r24	; 0x802cce <b3Status>
		}
		b3Count = 0;
     396:	10 92 4a 20 	sts	0x204A, r1	; 0x80204a <b3Count.3831>
     39a:	10 92 4b 20 	sts	0x204B, r1	; 0x80204b <b3Count.3831+0x1>
	}
	if(Button4_Value == 0) {
     39e:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7de6a8>
     3a2:	88 23       	and	r24, r24
     3a4:	74 f0       	brlt	.+28     	; 0x3c2 <updateButtons+0x11a>
		if(b4Count < 60000) {
     3a6:	80 91 48 20 	lds	r24, 0x2048	; 0x802048 <__data_end>
     3aa:	90 91 49 20 	lds	r25, 0x2049	; 0x802049 <__data_end+0x1>
     3ae:	80 36       	cpi	r24, 0x60	; 96
     3b0:	2a ee       	ldi	r18, 0xEA	; 234
     3b2:	92 07       	cpc	r25, r18
     3b4:	e8 f4       	brcc	.+58     	; 0x3f0 <updateButtons+0x148>
			b4Count++;
     3b6:	01 96       	adiw	r24, 0x01	; 1
     3b8:	80 93 48 20 	sts	0x2048, r24	; 0x802048 <__data_end>
     3bc:	90 93 49 20 	sts	0x2049, r25	; 0x802049 <__data_end+0x1>
     3c0:	08 95       	ret
		}
	} else {
		if(b4Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     3c2:	80 91 48 20 	lds	r24, 0x2048	; 0x802048 <__data_end>
     3c6:	90 91 49 20 	lds	r25, 0x2049	; 0x802049 <__data_end+0x1>
     3ca:	8b 30       	cpi	r24, 0x0B	; 11
     3cc:	91 05       	cpc	r25, r1
     3ce:	48 f0       	brcs	.+18     	; 0x3e2 <updateButtons+0x13a>
			if(b4Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     3d0:	c3 97       	sbiw	r24, 0x33	; 51
     3d2:	18 f0       	brcs	.+6      	; 0x3da <updateButtons+0x132>
				//Button was pressed Long
				b4Status = LONG_PRESSED;
     3d4:	10 92 cf 2c 	sts	0x2CCF, r1	; 0x802ccf <b4Status>
     3d8:	07 c0       	rjmp	.+14     	; 0x3e8 <updateButtons+0x140>
				} else {
				//Button was pressed Short
				b4Status = SHORT_PRESSED;
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	80 93 cf 2c 	sts	0x2CCF, r24	; 0x802ccf <b4Status>
     3e0:	03 c0       	rjmp	.+6      	; 0x3e8 <updateButtons+0x140>
			}
		} else {
			b4Status = NOT_PRESSED;
     3e2:	82 e0       	ldi	r24, 0x02	; 2
     3e4:	80 93 cf 2c 	sts	0x2CCF, r24	; 0x802ccf <b4Status>
		}
		b4Count = 0;
     3e8:	10 92 48 20 	sts	0x2048, r1	; 0x802048 <__data_end>
     3ec:	10 92 49 20 	sts	0x2049, r1	; 0x802049 <__data_end+0x1>
     3f0:	08 95       	ret

000003f2 <getButtonPress>:
	}
 }

 button_press_t getButtonPress(button_t button) {
	switch(button) {
     3f2:	81 30       	cpi	r24, 0x01	; 1
     3f4:	49 f0       	breq	.+18     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3f6:	28 f0       	brcs	.+10     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3f8:	82 30       	cpi	r24, 0x02	; 2
     3fa:	49 f0       	breq	.+18     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     3fc:	83 30       	cpi	r24, 0x03	; 3
     3fe:	51 f0       	breq	.+20     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     400:	0c c0       	rjmp	.+24     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		case BUTTON1:
			return b1Status;
     402:	80 91 cc 2c 	lds	r24, 0x2CCC	; 0x802ccc <b1Status>
     406:	08 95       	ret
		break;
		case BUTTON2:
			return b2Status;
     408:	80 91 cd 2c 	lds	r24, 0x2CCD	; 0x802ccd <b2Status>
     40c:	08 95       	ret
		break;
		case BUTTON3:
			return b3Status;
     40e:	80 91 ce 2c 	lds	r24, 0x2CCE	; 0x802cce <b3Status>
     412:	08 95       	ret
		break;
		case BUTTON4:
			return b4Status;
     414:	80 91 cf 2c 	lds	r24, 0x2CCF	; 0x802ccf <b4Status>
     418:	08 95       	ret
		break;
	}
	return NOT_PRESSED;
     41a:	82 e0       	ldi	r24, 0x02	; 2
     41c:	08 95       	ret

0000041e <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
     41e:	0f 93       	push	r16
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
     424:	1f 92       	push	r1
     426:	cd b7       	in	r28, 0x3d	; 61
     428:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
     42a:	2f b7       	in	r18, 0x3f	; 63
     42c:	29 83       	std	Y+1, r18	; 0x01
     42e:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
     430:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
     432:	fc 01       	movw	r30, r24
     434:	08 ed       	ldi	r16, 0xD8	; 216
     436:	04 bf       	out	0x34, r16	; 52
     438:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
     43a:	89 81       	ldd	r24, Y+1	; 0x01
     43c:	8f bf       	out	0x3f, r24	; 63
#endif
}
     43e:	0f 90       	pop	r0
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	0f 91       	pop	r16
     446:	08 95       	ret

00000448 <CLKSYS_XOSC_Config>:
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
	OSC.XOSCCTRL = (uint8_t) freqRange |
     448:	66 23       	and	r22, r22
     44a:	11 f0       	breq	.+4      	; 0x450 <CLKSYS_XOSC_Config+0x8>
     44c:	90 e2       	ldi	r25, 0x20	; 32
     44e:	01 c0       	rjmp	.+2      	; 0x452 <CLKSYS_XOSC_Config+0xa>
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	89 2b       	or	r24, r25
     454:	48 2b       	or	r20, r24
     456:	40 93 52 00 	sts	0x0052, r20	; 0x800052 <__TEXT_REGION_LENGTH__+0x7de052>
     45a:	08 95       	ret

0000045c <CLKSYS_PLL_Config>:
 *  \param  factor      PLL multiplication factor, must be
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
	factor &= OSC_PLLFAC_gm;
     45c:	6f 71       	andi	r22, 0x1F	; 31
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
     45e:	86 2b       	or	r24, r22
     460:	80 93 55 00 	sts	0x0055, r24	; 0x800055 <__TEXT_REGION_LENGTH__+0x7de055>
     464:	08 95       	ret

00000466 <CLKSYS_Disable>:
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
     466:	e0 e5       	ldi	r30, 0x50	; 80
     468:	f0 e0       	ldi	r31, 0x00	; 0
     46a:	90 81       	ld	r25, Z
     46c:	28 2f       	mov	r18, r24
     46e:	20 95       	com	r18
     470:	92 23       	and	r25, r18
     472:	90 83       	st	Z, r25
	uint8_t clkEnabled = OSC.CTRL & oscSel;
     474:	90 81       	ld	r25, Z
	return clkEnabled;
}
     476:	89 23       	and	r24, r25
     478:	08 95       	ret

0000047a <CLKSYS_Prescalers_Config>:
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
     47a:	68 2b       	or	r22, r24
	CCPWrite( &CLK.PSCTRL, PSconfig );
     47c:	81 e4       	ldi	r24, 0x41	; 65
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	0e 94 0f 02 	call	0x41e	; 0x41e <CCPWrite>
     484:	08 95       	ret

00000486 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     486:	0f 93       	push	r16
     488:	1f 93       	push	r17
     48a:	cf 93       	push	r28
     48c:	c8 2f       	mov	r28, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     48e:	00 e4       	ldi	r16, 0x40	; 64
     490:	10 e0       	ldi	r17, 0x00	; 0
     492:	f8 01       	movw	r30, r16
     494:	60 81       	ld	r22, Z
     496:	68 7f       	andi	r22, 0xF8	; 248
     498:	68 2b       	or	r22, r24
	CCPWrite( &CLK.CTRL, clkCtrl );
     49a:	80 e4       	ldi	r24, 0x40	; 64
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	0e 94 0f 02 	call	0x41e	; 0x41e <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
     4a2:	f8 01       	movw	r30, r16
     4a4:	80 81       	ld	r24, Z
	return clkCtrl;
}
     4a6:	8c 23       	and	r24, r28
     4a8:	cf 91       	pop	r28
     4aa:	1f 91       	pop	r17
     4ac:	0f 91       	pop	r16
     4ae:	08 95       	ret

000004b0 <TC0_ConfigClockSource>:
{
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
     4b0:	fc 01       	movw	r30, r24
     4b2:	90 81       	ld	r25, Z
     4b4:	90 7f       	andi	r25, 0xF0	; 240
     4b6:	69 2b       	or	r22, r25
     4b8:	60 83       	st	Z, r22
     4ba:	08 95       	ret

000004bc <TC0_ConfigWGM>:
     4bc:	fc 01       	movw	r30, r24
     4be:	91 81       	ldd	r25, Z+1	; 0x01
     4c0:	98 7f       	andi	r25, 0xF8	; 248
     4c2:	69 2b       	or	r22, r25
     4c4:	61 83       	std	Z+1, r22	; 0x01
     4c6:	08 95       	ret

000004c8 <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
     4c8:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
     4ca:	96 81       	ldd	r25, Z+6	; 0x06
     4cc:	9c 7f       	andi	r25, 0xFC	; 252
     4ce:	69 2b       	or	r22, r25
     4d0:	66 83       	std	Z+6, r22	; 0x06
     4d2:	08 95       	ret

000004d4 <software_reset>:
 //----------------------------------------------
 // catch heap overflow
 //
 void vApplicationMallocFailedHook( void )
 {
	 error(ERR_LOW_HEAP_SPACE);
     4d4:	00 00       	nop
     4d6:	88 ed       	ldi	r24, 0xD8	; 216
     4d8:	84 bf       	out	0x34, r24	; 52
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <__TEXT_REGION_LENGTH__+0x7de079>
     4e0:	08 95       	ret

000004e2 <error>:
     4e2:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <software_reset>
     4e6:	08 95       	ret

000004e8 <vApplicationStackOverflowHook>:
 {
	 /* Just to stop compiler warnings. */
	 (void) pxTask;
	 (void) pcTaskName;

	 error(ERR_STACK_OVERFLOW);
     4e8:	8b e2       	ldi	r24, 0x2B	; 43
     4ea:	0e 94 71 02 	call	0x4e2	; 0x4e2 <error>
     4ee:	08 95       	ret

000004f0 <prvTestWaitCondition>:
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
}
     4f0:	0f 93       	push	r16
     4f2:	01 11       	cpse	r16, r1
     4f4:	0c c0       	rjmp	.+24     	; 0x50e <prvTestWaitCondition+0x1e>
     4f6:	dc 01       	movw	r26, r24
     4f8:	cb 01       	movw	r24, r22
     4fa:	82 23       	and	r24, r18
     4fc:	93 23       	and	r25, r19
     4fe:	a4 23       	and	r26, r20
     500:	b5 23       	and	r27, r21
     502:	89 2b       	or	r24, r25
     504:	8a 2b       	or	r24, r26
     506:	8b 2b       	or	r24, r27
     508:	79 f4       	brne	.+30     	; 0x528 <prvTestWaitCondition+0x38>
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	10 c0       	rjmp	.+32     	; 0x52e <prvTestWaitCondition+0x3e>
     50e:	dc 01       	movw	r26, r24
     510:	cb 01       	movw	r24, r22
     512:	82 23       	and	r24, r18
     514:	93 23       	and	r25, r19
     516:	a4 23       	and	r26, r20
     518:	b5 23       	and	r27, r21
     51a:	28 17       	cp	r18, r24
     51c:	39 07       	cpc	r19, r25
     51e:	4a 07       	cpc	r20, r26
     520:	5b 07       	cpc	r21, r27
     522:	21 f0       	breq	.+8      	; 0x52c <prvTestWaitCondition+0x3c>
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	03 c0       	rjmp	.+6      	; 0x52e <prvTestWaitCondition+0x3e>
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	01 c0       	rjmp	.+2      	; 0x52e <prvTestWaitCondition+0x3e>
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	0f 91       	pop	r16
     530:	08 95       	ret

00000532 <xEventGroupCreate>:
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
     536:	80 e1       	ldi	r24, 0x10	; 16
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	0e 94 14 04 	call	0x828	; 0x828 <pvPortMalloc>
     53e:	ec 01       	movw	r28, r24
     540:	00 97       	sbiw	r24, 0x00	; 0
     542:	41 f0       	breq	.+16     	; 0x554 <xEventGroupCreate+0x22>
     544:	fc 01       	movw	r30, r24
     546:	11 92       	st	Z+, r1
     548:	11 92       	st	Z+, r1
     54a:	11 92       	st	Z+, r1
     54c:	11 92       	st	Z+, r1
     54e:	cf 01       	movw	r24, r30
     550:	0e 94 3b 04 	call	0x876	; 0x876 <vListInitialise>
     554:	ce 01       	movw	r24, r28
     556:	df 91       	pop	r29
     558:	cf 91       	pop	r28
     55a:	08 95       	ret

0000055c <xEventGroupWaitBits>:
     55c:	2f 92       	push	r2
     55e:	3f 92       	push	r3
     560:	4f 92       	push	r4
     562:	5f 92       	push	r5
     564:	6f 92       	push	r6
     566:	7f 92       	push	r7
     568:	8f 92       	push	r8
     56a:	9f 92       	push	r9
     56c:	af 92       	push	r10
     56e:	bf 92       	push	r11
     570:	cf 92       	push	r12
     572:	df 92       	push	r13
     574:	ef 92       	push	r14
     576:	ff 92       	push	r15
     578:	0f 93       	push	r16
     57a:	1f 93       	push	r17
     57c:	cf 93       	push	r28
     57e:	df 93       	push	r29
     580:	ec 01       	movw	r28, r24
     582:	4a 01       	movw	r8, r20
     584:	5b 01       	movw	r10, r22
     586:	62 2e       	mov	r6, r18
     588:	70 2e       	mov	r7, r16
     58a:	0e 94 ce 0b 	call	0x179c	; 0x179c <vTaskSuspendAll>
     58e:	28 80       	ld	r2, Y
     590:	39 80       	ldd	r3, Y+1	; 0x01
     592:	4a 80       	ldd	r4, Y+2	; 0x02
     594:	5b 80       	ldd	r5, Y+3	; 0x03
     596:	a5 01       	movw	r20, r10
     598:	94 01       	movw	r18, r8
     59a:	c2 01       	movw	r24, r4
     59c:	b1 01       	movw	r22, r2
     59e:	0e 94 78 02 	call	0x4f0	; 0x4f0 <prvTestWaitCondition>
     5a2:	88 23       	and	r24, r24
     5a4:	a1 f0       	breq	.+40     	; 0x5ce <xEventGroupWaitBits+0x72>
     5a6:	66 20       	and	r6, r6
     5a8:	89 f1       	breq	.+98     	; 0x60c <xEventGroupWaitBits+0xb0>
     5aa:	d5 01       	movw	r26, r10
     5ac:	c4 01       	movw	r24, r8
     5ae:	80 95       	com	r24
     5b0:	90 95       	com	r25
     5b2:	a0 95       	com	r26
     5b4:	b0 95       	com	r27
     5b6:	82 21       	and	r24, r2
     5b8:	93 21       	and	r25, r3
     5ba:	a4 21       	and	r26, r4
     5bc:	b5 21       	and	r27, r5
     5be:	88 83       	st	Y, r24
     5c0:	99 83       	std	Y+1, r25	; 0x01
     5c2:	aa 83       	std	Y+2, r26	; 0x02
     5c4:	bb 83       	std	Y+3, r27	; 0x03
     5c6:	c1 2c       	mov	r12, r1
     5c8:	d1 2c       	mov	r13, r1
     5ca:	76 01       	movw	r14, r12
     5cc:	22 c0       	rjmp	.+68     	; 0x612 <xEventGroupWaitBits+0xb6>
     5ce:	c1 14       	cp	r12, r1
     5d0:	d1 04       	cpc	r13, r1
     5d2:	e1 04       	cpc	r14, r1
     5d4:	f1 04       	cpc	r15, r1
     5d6:	e9 f0       	breq	.+58     	; 0x612 <xEventGroupWaitBits+0xb6>
     5d8:	61 10       	cpse	r6, r1
     5da:	04 c0       	rjmp	.+8      	; 0x5e4 <xEventGroupWaitBits+0x88>
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	ba 01       	movw	r22, r20
     5e2:	04 c0       	rjmp	.+8      	; 0x5ec <xEventGroupWaitBits+0x90>
     5e4:	40 e0       	ldi	r20, 0x00	; 0
     5e6:	50 e0       	ldi	r21, 0x00	; 0
     5e8:	60 e0       	ldi	r22, 0x00	; 0
     5ea:	71 e0       	ldi	r23, 0x01	; 1
     5ec:	71 10       	cpse	r7, r1
     5ee:	74 60       	ori	r23, 0x04	; 4
     5f0:	48 29       	or	r20, r8
     5f2:	59 29       	or	r21, r9
     5f4:	6a 29       	or	r22, r10
     5f6:	7b 29       	or	r23, r11
     5f8:	97 01       	movw	r18, r14
     5fa:	86 01       	movw	r16, r12
     5fc:	ce 01       	movw	r24, r28
     5fe:	04 96       	adiw	r24, 0x04	; 4
     600:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <vTaskPlaceOnUnorderedEventList>
     604:	21 2c       	mov	r2, r1
     606:	31 2c       	mov	r3, r1
     608:	21 01       	movw	r4, r2
     60a:	03 c0       	rjmp	.+6      	; 0x612 <xEventGroupWaitBits+0xb6>
     60c:	c1 2c       	mov	r12, r1
     60e:	d1 2c       	mov	r13, r1
     610:	76 01       	movw	r14, r12
     612:	0e 94 b6 0c 	call	0x196c	; 0x196c <xTaskResumeAll>
     616:	cd 28       	or	r12, r13
     618:	ce 28       	or	r12, r14
     61a:	cf 28       	or	r12, r15
     61c:	89 f1       	breq	.+98     	; 0x680 <xEventGroupWaitBits+0x124>
     61e:	81 11       	cpse	r24, r1
     620:	02 c0       	rjmp	.+4      	; 0x626 <xEventGroupWaitBits+0xca>
     622:	0e 94 a6 05 	call	0xb4c	; 0xb4c <vPortYield>
     626:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <uxTaskResetEventItemValue>
     62a:	6b 01       	movw	r12, r22
     62c:	7c 01       	movw	r14, r24
     62e:	91 fd       	sbrc	r25, 1
     630:	24 c0       	rjmp	.+72     	; 0x67a <xEventGroupWaitBits+0x11e>
     632:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     636:	ff 93       	push	r31
     638:	f8 7f       	andi	r31, 0xF8	; 248
     63a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     63e:	c8 80       	ld	r12, Y
     640:	d9 80       	ldd	r13, Y+1	; 0x01
     642:	ea 80       	ldd	r14, Y+2	; 0x02
     644:	fb 80       	ldd	r15, Y+3	; 0x03
     646:	07 2d       	mov	r16, r7
     648:	a5 01       	movw	r20, r10
     64a:	94 01       	movw	r18, r8
     64c:	c7 01       	movw	r24, r14
     64e:	b6 01       	movw	r22, r12
     650:	0e 94 78 02 	call	0x4f0	; 0x4f0 <prvTestWaitCondition>
     654:	88 23       	and	r24, r24
     656:	71 f0       	breq	.+28     	; 0x674 <xEventGroupWaitBits+0x118>
     658:	66 20       	and	r6, r6
     65a:	61 f0       	breq	.+24     	; 0x674 <xEventGroupWaitBits+0x118>
     65c:	80 94       	com	r8
     65e:	90 94       	com	r9
     660:	a0 94       	com	r10
     662:	b0 94       	com	r11
     664:	8c 20       	and	r8, r12
     666:	9d 20       	and	r9, r13
     668:	ae 20       	and	r10, r14
     66a:	bf 20       	and	r11, r15
     66c:	88 82       	st	Y, r8
     66e:	99 82       	std	Y+1, r9	; 0x01
     670:	aa 82       	std	Y+2, r10	; 0x02
     672:	bb 82       	std	Y+3, r11	; 0x03
     674:	ff 91       	pop	r31
     676:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     67a:	16 01       	movw	r2, r12
     67c:	27 01       	movw	r4, r14
     67e:	55 24       	eor	r5, r5
     680:	c2 01       	movw	r24, r4
     682:	b1 01       	movw	r22, r2
     684:	df 91       	pop	r29
     686:	cf 91       	pop	r28
     688:	1f 91       	pop	r17
     68a:	0f 91       	pop	r16
     68c:	ff 90       	pop	r15
     68e:	ef 90       	pop	r14
     690:	df 90       	pop	r13
     692:	cf 90       	pop	r12
     694:	bf 90       	pop	r11
     696:	af 90       	pop	r10
     698:	9f 90       	pop	r9
     69a:	8f 90       	pop	r8
     69c:	7f 90       	pop	r7
     69e:	6f 90       	pop	r6
     6a0:	5f 90       	pop	r5
     6a2:	4f 90       	pop	r4
     6a4:	3f 90       	pop	r3
     6a6:	2f 90       	pop	r2
     6a8:	08 95       	ret

000006aa <xEventGroupClearBits>:
     6aa:	0f 93       	push	r16
     6ac:	1f 93       	push	r17
     6ae:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     6b2:	ff 93       	push	r31
     6b4:	f8 7f       	andi	r31, 0xF8	; 248
     6b6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     6ba:	fc 01       	movw	r30, r24
     6bc:	00 81       	ld	r16, Z
     6be:	11 81       	ldd	r17, Z+1	; 0x01
     6c0:	22 81       	ldd	r18, Z+2	; 0x02
     6c2:	33 81       	ldd	r19, Z+3	; 0x03
     6c4:	40 95       	com	r20
     6c6:	50 95       	com	r21
     6c8:	60 95       	com	r22
     6ca:	70 95       	com	r23
     6cc:	40 23       	and	r20, r16
     6ce:	51 23       	and	r21, r17
     6d0:	62 23       	and	r22, r18
     6d2:	73 23       	and	r23, r19
     6d4:	40 83       	st	Z, r20
     6d6:	51 83       	std	Z+1, r21	; 0x01
     6d8:	62 83       	std	Z+2, r22	; 0x02
     6da:	73 83       	std	Z+3, r23	; 0x03
     6dc:	ff 91       	pop	r31
     6de:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     6e2:	c9 01       	movw	r24, r18
     6e4:	b8 01       	movw	r22, r16
     6e6:	1f 91       	pop	r17
     6e8:	0f 91       	pop	r16
     6ea:	08 95       	ret

000006ec <xEventGroupSetBits>:
     6ec:	4f 92       	push	r4
     6ee:	5f 92       	push	r5
     6f0:	6f 92       	push	r6
     6f2:	7f 92       	push	r7
     6f4:	af 92       	push	r10
     6f6:	bf 92       	push	r11
     6f8:	cf 92       	push	r12
     6fa:	df 92       	push	r13
     6fc:	ef 92       	push	r14
     6fe:	ff 92       	push	r15
     700:	0f 93       	push	r16
     702:	1f 93       	push	r17
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	ec 01       	movw	r28, r24
     70a:	6a 01       	movw	r12, r20
     70c:	7b 01       	movw	r14, r22
     70e:	8c 01       	movw	r16, r24
     710:	09 5f       	subi	r16, 0xF9	; 249
     712:	1f 4f       	sbci	r17, 0xFF	; 255
     714:	0e 94 ce 0b 	call	0x179c	; 0x179c <vTaskSuspendAll>
     718:	eb 85       	ldd	r30, Y+11	; 0x0b
     71a:	fc 85       	ldd	r31, Y+12	; 0x0c
     71c:	88 81       	ld	r24, Y
     71e:	99 81       	ldd	r25, Y+1	; 0x01
     720:	aa 81       	ldd	r26, Y+2	; 0x02
     722:	bb 81       	ldd	r27, Y+3	; 0x03
     724:	c8 2a       	or	r12, r24
     726:	d9 2a       	or	r13, r25
     728:	ea 2a       	or	r14, r26
     72a:	fb 2a       	or	r15, r27
     72c:	c8 82       	st	Y, r12
     72e:	d9 82       	std	Y+1, r13	; 0x01
     730:	ea 82       	std	Y+2, r14	; 0x02
     732:	fb 82       	std	Y+3, r15	; 0x03
     734:	c1 2c       	mov	r12, r1
     736:	d1 2c       	mov	r13, r1
     738:	76 01       	movw	r14, r12
     73a:	3d c0       	rjmp	.+122    	; 0x7b6 <xEventGroupSetBits+0xca>
     73c:	a4 80       	ldd	r10, Z+4	; 0x04
     73e:	b5 80       	ldd	r11, Z+5	; 0x05
     740:	80 81       	ld	r24, Z
     742:	91 81       	ldd	r25, Z+1	; 0x01
     744:	a2 81       	ldd	r26, Z+2	; 0x02
     746:	b3 81       	ldd	r27, Z+3	; 0x03
     748:	ac 01       	movw	r20, r24
     74a:	bd 01       	movw	r22, r26
     74c:	77 27       	eor	r23, r23
     74e:	b2 fd       	sbrc	r27, 2
     750:	0e c0       	rjmp	.+28     	; 0x76e <xEventGroupSetBits+0x82>
     752:	48 80       	ld	r4, Y
     754:	59 80       	ldd	r5, Y+1	; 0x01
     756:	6a 80       	ldd	r6, Y+2	; 0x02
     758:	7b 80       	ldd	r7, Y+3	; 0x03
     75a:	44 22       	and	r4, r20
     75c:	55 22       	and	r5, r21
     75e:	66 22       	and	r6, r22
     760:	77 22       	and	r7, r23
     762:	45 28       	or	r4, r5
     764:	46 28       	or	r4, r6
     766:	47 28       	or	r4, r7
     768:	89 f4       	brne	.+34     	; 0x78c <xEventGroupSetBits+0xa0>
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	12 c0       	rjmp	.+36     	; 0x792 <xEventGroupSetBits+0xa6>
     76e:	48 80       	ld	r4, Y
     770:	59 80       	ldd	r5, Y+1	; 0x01
     772:	6a 80       	ldd	r6, Y+2	; 0x02
     774:	7b 80       	ldd	r7, Y+3	; 0x03
     776:	44 22       	and	r4, r20
     778:	55 22       	and	r5, r21
     77a:	66 22       	and	r6, r22
     77c:	77 22       	and	r7, r23
     77e:	44 15       	cp	r20, r4
     780:	55 05       	cpc	r21, r5
     782:	66 05       	cpc	r22, r6
     784:	77 05       	cpc	r23, r7
     786:	21 f0       	breq	.+8      	; 0x790 <xEventGroupSetBits+0xa4>
     788:	20 e0       	ldi	r18, 0x00	; 0
     78a:	03 c0       	rjmp	.+6      	; 0x792 <xEventGroupSetBits+0xa6>
     78c:	21 e0       	ldi	r18, 0x01	; 1
     78e:	01 c0       	rjmp	.+2      	; 0x792 <xEventGroupSetBits+0xa6>
     790:	21 e0       	ldi	r18, 0x01	; 1
     792:	22 23       	and	r18, r18
     794:	71 f0       	breq	.+28     	; 0x7b2 <xEventGroupSetBits+0xc6>
     796:	b0 ff       	sbrs	r27, 0
     798:	04 c0       	rjmp	.+8      	; 0x7a2 <xEventGroupSetBits+0xb6>
     79a:	c4 2a       	or	r12, r20
     79c:	d5 2a       	or	r13, r21
     79e:	e6 2a       	or	r14, r22
     7a0:	f7 2a       	or	r15, r23
     7a2:	48 81       	ld	r20, Y
     7a4:	59 81       	ldd	r21, Y+1	; 0x01
     7a6:	6a 81       	ldd	r22, Y+2	; 0x02
     7a8:	7b 81       	ldd	r23, Y+3	; 0x03
     7aa:	72 60       	ori	r23, 0x02	; 2
     7ac:	cf 01       	movw	r24, r30
     7ae:	0e 94 65 0e 	call	0x1cca	; 0x1cca <vTaskRemoveFromUnorderedEventList>
     7b2:	ea 2d       	mov	r30, r10
     7b4:	fb 2d       	mov	r31, r11
     7b6:	e0 17       	cp	r30, r16
     7b8:	f1 07       	cpc	r31, r17
     7ba:	09 f0       	breq	.+2      	; 0x7be <xEventGroupSetBits+0xd2>
     7bc:	bf cf       	rjmp	.-130    	; 0x73c <xEventGroupSetBits+0x50>
     7be:	c0 94       	com	r12
     7c0:	d0 94       	com	r13
     7c2:	e0 94       	com	r14
     7c4:	f0 94       	com	r15
     7c6:	88 81       	ld	r24, Y
     7c8:	99 81       	ldd	r25, Y+1	; 0x01
     7ca:	aa 81       	ldd	r26, Y+2	; 0x02
     7cc:	bb 81       	ldd	r27, Y+3	; 0x03
     7ce:	c8 22       	and	r12, r24
     7d0:	d9 22       	and	r13, r25
     7d2:	ea 22       	and	r14, r26
     7d4:	fb 22       	and	r15, r27
     7d6:	c8 82       	st	Y, r12
     7d8:	d9 82       	std	Y+1, r13	; 0x01
     7da:	ea 82       	std	Y+2, r14	; 0x02
     7dc:	fb 82       	std	Y+3, r15	; 0x03
     7de:	0e 94 b6 0c 	call	0x196c	; 0x196c <xTaskResumeAll>
     7e2:	68 81       	ld	r22, Y
     7e4:	79 81       	ldd	r23, Y+1	; 0x01
     7e6:	8a 81       	ldd	r24, Y+2	; 0x02
     7e8:	9b 81       	ldd	r25, Y+3	; 0x03
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	1f 91       	pop	r17
     7f0:	0f 91       	pop	r16
     7f2:	ff 90       	pop	r15
     7f4:	ef 90       	pop	r14
     7f6:	df 90       	pop	r13
     7f8:	cf 90       	pop	r12
     7fa:	bf 90       	pop	r11
     7fc:	af 90       	pop	r10
     7fe:	7f 90       	pop	r7
     800:	6f 90       	pop	r6
     802:	5f 90       	pop	r5
     804:	4f 90       	pop	r4
     806:	08 95       	ret

00000808 <vEventGroupSetBitsCallback>:
     808:	0e 94 76 03 	call	0x6ec	; 0x6ec <xEventGroupSetBits>
     80c:	08 95       	ret

0000080e <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
     80e:	0f 93       	push	r16
     810:	1f 93       	push	r17
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
     812:	89 01       	movw	r16, r18
     814:	9a 01       	movw	r18, r20
     816:	ab 01       	movw	r20, r22
     818:	bc 01       	movw	r22, r24
     81a:	84 e0       	ldi	r24, 0x04	; 4
     81c:	94 e0       	ldi	r25, 0x04	; 4
     81e:	0e 94 57 12 	call	0x24ae	; 0x24ae <xTimerPendFunctionCallFromISR>

		return xReturn;
	}
     822:	1f 91       	pop	r17
     824:	0f 91       	pop	r16
     826:	08 95       	ret

00000828 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
     82c:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     82e:	0e 94 ce 0b 	call	0x179c	; 0x179c <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     832:	20 91 50 20 	lds	r18, 0x2050	; 0x802050 <xNextFreeByte>
     836:	30 91 51 20 	lds	r19, 0x2051	; 0x802051 <xNextFreeByte+0x1>
     83a:	c9 01       	movw	r24, r18
     83c:	8c 0f       	add	r24, r28
     83e:	9d 1f       	adc	r25, r29
     840:	88 3b       	cpi	r24, 0xB8	; 184
     842:	4b e0       	ldi	r20, 0x0B	; 11
     844:	94 07       	cpc	r25, r20
     846:	58 f4       	brcc	.+22     	; 0x85e <pvPortMalloc+0x36>
     848:	28 17       	cp	r18, r24
     84a:	39 07       	cpc	r19, r25
     84c:	58 f4       	brcc	.+22     	; 0x864 <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     84e:	e9 01       	movw	r28, r18
     850:	ce 5a       	subi	r28, 0xAE	; 174
     852:	df 4d       	sbci	r29, 0xDF	; 223
			xNextFreeByte += xWantedSize;			
     854:	80 93 50 20 	sts	0x2050, r24	; 0x802050 <xNextFreeByte>
     858:	90 93 51 20 	sts	0x2051, r25	; 0x802051 <xNextFreeByte+0x1>
     85c:	05 c0       	rjmp	.+10     	; 0x868 <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
     85e:	c0 e0       	ldi	r28, 0x00	; 0
     860:	d0 e0       	ldi	r29, 0x00	; 0
     862:	02 c0       	rjmp	.+4      	; 0x868 <pvPortMalloc+0x40>
     864:	c0 e0       	ldi	r28, 0x00	; 0
     866:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     868:	0e 94 b6 0c 	call	0x196c	; 0x196c <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     86c:	ce 01       	movw	r24, r28
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	08 95       	ret

00000874 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     874:	08 95       	ret

00000876 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     876:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     878:	03 96       	adiw	r24, 0x03	; 3
     87a:	81 83       	std	Z+1, r24	; 0x01
     87c:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     87e:	4f ef       	ldi	r20, 0xFF	; 255
     880:	5f ef       	ldi	r21, 0xFF	; 255
     882:	ba 01       	movw	r22, r20
     884:	43 83       	std	Z+3, r20	; 0x03
     886:	54 83       	std	Z+4, r21	; 0x04
     888:	65 83       	std	Z+5, r22	; 0x05
     88a:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     88c:	87 83       	std	Z+7, r24	; 0x07
     88e:	90 87       	std	Z+8, r25	; 0x08
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     890:	81 87       	std	Z+9, r24	; 0x09
     892:	92 87       	std	Z+10, r25	; 0x0a

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     894:	10 82       	st	Z, r1
     896:	08 95       	ret

00000898 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     898:	fc 01       	movw	r30, r24
     89a:	12 86       	std	Z+10, r1	; 0x0a
     89c:	13 86       	std	Z+11, r1	; 0x0b
     89e:	08 95       	ret

000008a0 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     8a0:	cf 93       	push	r28
     8a2:	df 93       	push	r29
     8a4:	9c 01       	movw	r18, r24
     8a6:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     8a8:	dc 01       	movw	r26, r24
     8aa:	11 96       	adiw	r26, 0x01	; 1
     8ac:	cd 91       	ld	r28, X+
     8ae:	dc 91       	ld	r29, X
     8b0:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     8b2:	c4 83       	std	Z+4, r28	; 0x04
     8b4:	d5 83       	std	Z+5, r29	; 0x05
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     8b6:	8e 81       	ldd	r24, Y+6	; 0x06
     8b8:	9f 81       	ldd	r25, Y+7	; 0x07
     8ba:	86 83       	std	Z+6, r24	; 0x06
     8bc:	97 83       	std	Z+7, r25	; 0x07

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     8be:	8e 81       	ldd	r24, Y+6	; 0x06
     8c0:	9f 81       	ldd	r25, Y+7	; 0x07
     8c2:	dc 01       	movw	r26, r24
     8c4:	14 96       	adiw	r26, 0x04	; 4
     8c6:	6d 93       	st	X+, r22
     8c8:	7c 93       	st	X, r23
     8ca:	15 97       	sbiw	r26, 0x05	; 5
	pxIndex->pxPrevious = pxNewListItem;
     8cc:	6e 83       	std	Y+6, r22	; 0x06
     8ce:	7f 83       	std	Y+7, r23	; 0x07

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     8d0:	22 87       	std	Z+10, r18	; 0x0a
     8d2:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
     8d4:	f9 01       	movw	r30, r18
     8d6:	80 81       	ld	r24, Z
     8d8:	8f 5f       	subi	r24, 0xFF	; 255
     8da:	80 83       	st	Z, r24
}
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	08 95       	ret

000008e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     8e2:	0f 93       	push	r16
     8e4:	1f 93       	push	r17
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     8ec:	08 81       	ld	r16, Y
     8ee:	19 81       	ldd	r17, Y+1	; 0x01
     8f0:	2a 81       	ldd	r18, Y+2	; 0x02
     8f2:	3b 81       	ldd	r19, Y+3	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     8f4:	0f 3f       	cpi	r16, 0xFF	; 255
     8f6:	4f ef       	ldi	r20, 0xFF	; 255
     8f8:	14 07       	cpc	r17, r20
     8fa:	24 07       	cpc	r18, r20
     8fc:	34 07       	cpc	r19, r20
     8fe:	21 f4       	brne	.+8      	; 0x908 <vListInsert+0x26>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     900:	fc 01       	movw	r30, r24
     902:	a1 85       	ldd	r26, Z+9	; 0x09
     904:	b2 85       	ldd	r27, Z+10	; 0x0a
     906:	11 c0       	rjmp	.+34     	; 0x92a <vListInsert+0x48>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     908:	dc 01       	movw	r26, r24
     90a:	13 96       	adiw	r26, 0x03	; 3
     90c:	01 c0       	rjmp	.+2      	; 0x910 <vListInsert+0x2e>
     90e:	df 01       	movw	r26, r30
     910:	14 96       	adiw	r26, 0x04	; 4
     912:	ed 91       	ld	r30, X+
     914:	fc 91       	ld	r31, X
     916:	15 97       	sbiw	r26, 0x05	; 5
     918:	40 81       	ld	r20, Z
     91a:	51 81       	ldd	r21, Z+1	; 0x01
     91c:	62 81       	ldd	r22, Z+2	; 0x02
     91e:	73 81       	ldd	r23, Z+3	; 0x03
     920:	04 17       	cp	r16, r20
     922:	15 07       	cpc	r17, r21
     924:	26 07       	cpc	r18, r22
     926:	37 07       	cpc	r19, r23
     928:	90 f7       	brcc	.-28     	; 0x90e <vListInsert+0x2c>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     92a:	14 96       	adiw	r26, 0x04	; 4
     92c:	ed 91       	ld	r30, X+
     92e:	fc 91       	ld	r31, X
     930:	15 97       	sbiw	r26, 0x05	; 5
     932:	ec 83       	std	Y+4, r30	; 0x04
     934:	fd 83       	std	Y+5, r31	; 0x05
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     936:	c6 83       	std	Z+6, r28	; 0x06
     938:	d7 83       	std	Z+7, r29	; 0x07
	pxNewListItem->pxPrevious = pxIterator;
     93a:	ae 83       	std	Y+6, r26	; 0x06
     93c:	bf 83       	std	Y+7, r27	; 0x07
	pxIterator->pxNext = pxNewListItem;
     93e:	14 96       	adiw	r26, 0x04	; 4
     940:	cd 93       	st	X+, r28
     942:	dc 93       	st	X, r29
     944:	15 97       	sbiw	r26, 0x05	; 5

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     946:	8a 87       	std	Y+10, r24	; 0x0a
     948:	9b 87       	std	Y+11, r25	; 0x0b

	( pxList->uxNumberOfItems )++;
     94a:	fc 01       	movw	r30, r24
     94c:	20 81       	ld	r18, Z
     94e:	2f 5f       	subi	r18, 0xFF	; 255
     950:	20 83       	st	Z, r18
}
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	1f 91       	pop	r17
     958:	0f 91       	pop	r16
     95a:	08 95       	ret

0000095c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     962:	a2 85       	ldd	r26, Z+10	; 0x0a
     964:	b3 85       	ldd	r27, Z+11	; 0x0b

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     966:	c4 81       	ldd	r28, Z+4	; 0x04
     968:	d5 81       	ldd	r29, Z+5	; 0x05
     96a:	86 81       	ldd	r24, Z+6	; 0x06
     96c:	97 81       	ldd	r25, Z+7	; 0x07
     96e:	8e 83       	std	Y+6, r24	; 0x06
     970:	9f 83       	std	Y+7, r25	; 0x07
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     972:	c6 81       	ldd	r28, Z+6	; 0x06
     974:	d7 81       	ldd	r29, Z+7	; 0x07
     976:	84 81       	ldd	r24, Z+4	; 0x04
     978:	95 81       	ldd	r25, Z+5	; 0x05
     97a:	8c 83       	std	Y+4, r24	; 0x04
     97c:	9d 83       	std	Y+5, r25	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     97e:	11 96       	adiw	r26, 0x01	; 1
     980:	8d 91       	ld	r24, X+
     982:	9c 91       	ld	r25, X
     984:	12 97       	sbiw	r26, 0x02	; 2
     986:	e8 17       	cp	r30, r24
     988:	f9 07       	cpc	r31, r25
     98a:	31 f4       	brne	.+12     	; 0x998 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     98c:	86 81       	ldd	r24, Z+6	; 0x06
     98e:	97 81       	ldd	r25, Z+7	; 0x07
     990:	11 96       	adiw	r26, 0x01	; 1
     992:	8d 93       	st	X+, r24
     994:	9c 93       	st	X, r25
     996:	12 97       	sbiw	r26, 0x02	; 2
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     998:	12 86       	std	Z+10, r1	; 0x0a
     99a:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
     99c:	8c 91       	ld	r24, X
     99e:	81 50       	subi	r24, 0x01	; 1
     9a0:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
     9a2:	8c 91       	ld	r24, X
}
     9a4:	df 91       	pop	r29
     9a6:	cf 91       	pop	r28
     9a8:	08 95       	ret

000009aa <prvSetupTimerInterrupt>:
}

/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     9aa:	83 ef       	ldi	r24, 0xF3	; 243
     9ac:	91 e0       	ldi	r25, 0x01	; 1
     9ae:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x7de826>
     9b2:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x7de827>
     9b6:	65 e0       	ldi	r22, 0x05	; 5
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	98 e0       	ldi	r25, 0x08	; 8
     9bc:	0e 94 58 02 	call	0x4b0	; 0x4b0 <TC0_ConfigClockSource>
     9c0:	61 e0       	ldi	r22, 0x01	; 1
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	98 e0       	ldi	r25, 0x08	; 8
     9c6:	0e 94 64 02 	call	0x4c8	; 0x4c8 <TC0_SetOverflowIntLevel>
     9ca:	08 95       	ret

000009cc <_portSetInterruptMaskFromIsr>:
     9cc:	e0 ea       	ldi	r30, 0xA0	; 160
     9ce:	f0 e0       	ldi	r31, 0x00	; 0
     9d0:	82 81       	ldd	r24, Z+2	; 0x02
     9d2:	92 81       	ldd	r25, Z+2	; 0x02
     9d4:	98 7f       	andi	r25, 0xF8	; 248
     9d6:	92 83       	std	Z+2, r25	; 0x02
     9d8:	08 95       	ret

000009da <portTaskIncrementTick>:
     9da:	cf 93       	push	r28
     9dc:	0e 94 e6 04 	call	0x9cc	; 0x9cc <_portSetInterruptMaskFromIsr>
     9e0:	c8 2f       	mov	r28, r24
     9e2:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <xTaskIncrementTick>
     9e6:	c0 93 a2 00 	sts	0x00A2, r28	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     9ea:	cf 91       	pop	r28
     9ec:	08 95       	ret

000009ee <pxPortInitialiseStack>:
     9ee:	cf 92       	push	r12
     9f0:	df 92       	push	r13
     9f2:	ef 92       	push	r14
     9f4:	ff 92       	push	r15
     9f6:	31 e1       	ldi	r19, 0x11	; 17
     9f8:	fc 01       	movw	r30, r24
     9fa:	30 83       	st	Z, r19
     9fc:	31 97       	sbiw	r30, 0x01	; 1
     9fe:	22 e2       	ldi	r18, 0x22	; 34
     a00:	20 83       	st	Z, r18
     a02:	31 97       	sbiw	r30, 0x01	; 1
     a04:	a3 e3       	ldi	r26, 0x33	; 51
     a06:	a0 83       	st	Z, r26
     a08:	6b 01       	movw	r12, r22
     a0a:	e1 2c       	mov	r14, r1
     a0c:	f1 2c       	mov	r15, r1
     a0e:	31 97       	sbiw	r30, 0x01	; 1
     a10:	60 83       	st	Z, r22
     a12:	31 97       	sbiw	r30, 0x01	; 1
     a14:	d0 82       	st	Z, r13
     a16:	31 97       	sbiw	r30, 0x01	; 1
     a18:	e0 82       	st	Z, r14
     a1a:	31 97       	sbiw	r30, 0x01	; 1
     a1c:	61 e3       	ldi	r22, 0x31	; 49
     a1e:	60 83       	st	Z, r22
     a20:	31 97       	sbiw	r30, 0x01	; 1
     a22:	60 e8       	ldi	r22, 0x80	; 128
     a24:	60 83       	st	Z, r22
     a26:	31 97       	sbiw	r30, 0x01	; 1
     a28:	67 e8       	ldi	r22, 0x87	; 135
     a2a:	60 83       	st	Z, r22
     a2c:	31 97       	sbiw	r30, 0x01	; 1
     a2e:	10 82       	st	Z, r1
     a30:	31 97       	sbiw	r30, 0x01	; 1
     a32:	10 82       	st	Z, r1
     a34:	31 97       	sbiw	r30, 0x01	; 1
     a36:	62 e0       	ldi	r22, 0x02	; 2
     a38:	60 83       	st	Z, r22
     a3a:	31 97       	sbiw	r30, 0x01	; 1
     a3c:	63 e0       	ldi	r22, 0x03	; 3
     a3e:	60 83       	st	Z, r22
     a40:	31 97       	sbiw	r30, 0x01	; 1
     a42:	64 e0       	ldi	r22, 0x04	; 4
     a44:	60 83       	st	Z, r22
     a46:	31 97       	sbiw	r30, 0x01	; 1
     a48:	65 e0       	ldi	r22, 0x05	; 5
     a4a:	60 83       	st	Z, r22
     a4c:	31 97       	sbiw	r30, 0x01	; 1
     a4e:	66 e0       	ldi	r22, 0x06	; 6
     a50:	60 83       	st	Z, r22
     a52:	31 97       	sbiw	r30, 0x01	; 1
     a54:	67 e0       	ldi	r22, 0x07	; 7
     a56:	60 83       	st	Z, r22
     a58:	31 97       	sbiw	r30, 0x01	; 1
     a5a:	68 e0       	ldi	r22, 0x08	; 8
     a5c:	60 83       	st	Z, r22
     a5e:	31 97       	sbiw	r30, 0x01	; 1
     a60:	69 e0       	ldi	r22, 0x09	; 9
     a62:	60 83       	st	Z, r22
     a64:	31 97       	sbiw	r30, 0x01	; 1
     a66:	60 e1       	ldi	r22, 0x10	; 16
     a68:	60 83       	st	Z, r22
     a6a:	31 97       	sbiw	r30, 0x01	; 1
     a6c:	30 83       	st	Z, r19
     a6e:	31 97       	sbiw	r30, 0x01	; 1
     a70:	32 e1       	ldi	r19, 0x12	; 18
     a72:	30 83       	st	Z, r19
     a74:	31 97       	sbiw	r30, 0x01	; 1
     a76:	33 e1       	ldi	r19, 0x13	; 19
     a78:	30 83       	st	Z, r19
     a7a:	31 97       	sbiw	r30, 0x01	; 1
     a7c:	34 e1       	ldi	r19, 0x14	; 20
     a7e:	30 83       	st	Z, r19
     a80:	31 97       	sbiw	r30, 0x01	; 1
     a82:	35 e1       	ldi	r19, 0x15	; 21
     a84:	30 83       	st	Z, r19
     a86:	31 97       	sbiw	r30, 0x01	; 1
     a88:	36 e1       	ldi	r19, 0x16	; 22
     a8a:	30 83       	st	Z, r19
     a8c:	31 97       	sbiw	r30, 0x01	; 1
     a8e:	37 e1       	ldi	r19, 0x17	; 23
     a90:	30 83       	st	Z, r19
     a92:	31 97       	sbiw	r30, 0x01	; 1
     a94:	38 e1       	ldi	r19, 0x18	; 24
     a96:	30 83       	st	Z, r19
     a98:	31 97       	sbiw	r30, 0x01	; 1
     a9a:	39 e1       	ldi	r19, 0x19	; 25
     a9c:	30 83       	st	Z, r19
     a9e:	31 97       	sbiw	r30, 0x01	; 1
     aa0:	30 e2       	ldi	r19, 0x20	; 32
     aa2:	30 83       	st	Z, r19
     aa4:	31 97       	sbiw	r30, 0x01	; 1
     aa6:	31 e2       	ldi	r19, 0x21	; 33
     aa8:	30 83       	st	Z, r19
     aaa:	31 97       	sbiw	r30, 0x01	; 1
     aac:	20 83       	st	Z, r18
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	23 e2       	ldi	r18, 0x23	; 35
     ab2:	20 83       	st	Z, r18
     ab4:	6a 01       	movw	r12, r20
     ab6:	31 97       	sbiw	r30, 0x01	; 1
     ab8:	40 83       	st	Z, r20
     aba:	31 97       	sbiw	r30, 0x01	; 1
     abc:	d0 82       	st	Z, r13
     abe:	31 97       	sbiw	r30, 0x01	; 1
     ac0:	26 e2       	ldi	r18, 0x26	; 38
     ac2:	20 83       	st	Z, r18
     ac4:	31 97       	sbiw	r30, 0x01	; 1
     ac6:	27 e2       	ldi	r18, 0x27	; 39
     ac8:	20 83       	st	Z, r18
     aca:	31 97       	sbiw	r30, 0x01	; 1
     acc:	28 e2       	ldi	r18, 0x28	; 40
     ace:	20 83       	st	Z, r18
     ad0:	31 97       	sbiw	r30, 0x01	; 1
     ad2:	29 e2       	ldi	r18, 0x29	; 41
     ad4:	20 83       	st	Z, r18
     ad6:	31 97       	sbiw	r30, 0x01	; 1
     ad8:	20 e3       	ldi	r18, 0x30	; 48
     ada:	20 83       	st	Z, r18
     adc:	88 97       	sbiw	r24, 0x28	; 40
     ade:	ff 90       	pop	r15
     ae0:	ef 90       	pop	r14
     ae2:	df 90       	pop	r13
     ae4:	cf 90       	pop	r12
     ae6:	08 95       	ret

00000ae8 <xPortStartScheduler>:
     ae8:	0e 94 d5 04 	call	0x9aa	; 0x9aa <prvSetupTimerInterrupt>
     aec:	a0 91 78 2c 	lds	r26, 0x2C78	; 0x802c78 <pxCurrentTCB>
     af0:	b0 91 79 2c 	lds	r27, 0x2C79	; 0x802c79 <pxCurrentTCB+0x1>
     af4:	0d 90       	ld	r0, X+
     af6:	0d be       	out	0x3d, r0	; 61
     af8:	0d 90       	ld	r0, X+
     afa:	0e be       	out	0x3e, r0	; 62
     afc:	ef 91       	pop	r30
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	bf 91       	pop	r27
     b04:	af 91       	pop	r26
     b06:	9f 91       	pop	r25
     b08:	8f 91       	pop	r24
     b0a:	7f 91       	pop	r23
     b0c:	6f 91       	pop	r22
     b0e:	5f 91       	pop	r21
     b10:	4f 91       	pop	r20
     b12:	3f 91       	pop	r19
     b14:	2f 91       	pop	r18
     b16:	1f 91       	pop	r17
     b18:	0f 91       	pop	r16
     b1a:	ff 90       	pop	r15
     b1c:	ef 90       	pop	r14
     b1e:	df 90       	pop	r13
     b20:	cf 90       	pop	r12
     b22:	bf 90       	pop	r11
     b24:	af 90       	pop	r10
     b26:	9f 90       	pop	r9
     b28:	8f 90       	pop	r8
     b2a:	7f 90       	pop	r7
     b2c:	6f 90       	pop	r6
     b2e:	5f 90       	pop	r5
     b30:	4f 90       	pop	r4
     b32:	3f 90       	pop	r3
     b34:	2f 90       	pop	r2
     b36:	1f 90       	pop	r1
     b38:	0f 90       	pop	r0
     b3a:	ff 91       	pop	r31
     b3c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     b40:	ff 91       	pop	r31
     b42:	ff bf       	out	0x3f, r31	; 63
     b44:	ff 91       	pop	r31
     b46:	08 95       	ret
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	08 95       	ret

00000b4c <vPortYield>:
// 
//
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     b4c:	ff 93       	push	r31
     b4e:	ff b7       	in	r31, 0x3f	; 63
     b50:	ff 93       	push	r31
     b52:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     b56:	ff 93       	push	r31
     b58:	f8 7f       	andi	r31, 0xF8	; 248
     b5a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     b5e:	0f 92       	push	r0
     b60:	1f 92       	push	r1
     b62:	11 24       	eor	r1, r1
     b64:	2f 92       	push	r2
     b66:	3f 92       	push	r3
     b68:	4f 92       	push	r4
     b6a:	5f 92       	push	r5
     b6c:	6f 92       	push	r6
     b6e:	7f 92       	push	r7
     b70:	8f 92       	push	r8
     b72:	9f 92       	push	r9
     b74:	af 92       	push	r10
     b76:	bf 92       	push	r11
     b78:	cf 92       	push	r12
     b7a:	df 92       	push	r13
     b7c:	ef 92       	push	r14
     b7e:	ff 92       	push	r15
     b80:	0f 93       	push	r16
     b82:	1f 93       	push	r17
     b84:	2f 93       	push	r18
     b86:	3f 93       	push	r19
     b88:	4f 93       	push	r20
     b8a:	5f 93       	push	r21
     b8c:	6f 93       	push	r22
     b8e:	7f 93       	push	r23
     b90:	8f 93       	push	r24
     b92:	9f 93       	push	r25
     b94:	af 93       	push	r26
     b96:	bf 93       	push	r27
     b98:	cf 93       	push	r28
     b9a:	df 93       	push	r29
     b9c:	ef 93       	push	r30
     b9e:	a0 91 78 2c 	lds	r26, 0x2C78	; 0x802c78 <pxCurrentTCB>
     ba2:	b0 91 79 2c 	lds	r27, 0x2C79	; 0x802c79 <pxCurrentTCB+0x1>
     ba6:	0d b6       	in	r0, 0x3d	; 61
     ba8:	0d 92       	st	X+, r0
     baa:	0e b6       	in	r0, 0x3e	; 62
     bac:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     bae:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     bb2:	a0 91 78 2c 	lds	r26, 0x2C78	; 0x802c78 <pxCurrentTCB>
     bb6:	b0 91 79 2c 	lds	r27, 0x2C79	; 0x802c79 <pxCurrentTCB+0x1>
     bba:	0d 90       	ld	r0, X+
     bbc:	0d be       	out	0x3d, r0	; 61
     bbe:	0d 90       	ld	r0, X+
     bc0:	0e be       	out	0x3e, r0	; 62
     bc2:	ef 91       	pop	r30
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	bf 91       	pop	r27
     bca:	af 91       	pop	r26
     bcc:	9f 91       	pop	r25
     bce:	8f 91       	pop	r24
     bd0:	7f 91       	pop	r23
     bd2:	6f 91       	pop	r22
     bd4:	5f 91       	pop	r21
     bd6:	4f 91       	pop	r20
     bd8:	3f 91       	pop	r19
     bda:	2f 91       	pop	r18
     bdc:	1f 91       	pop	r17
     bde:	0f 91       	pop	r16
     be0:	ff 90       	pop	r15
     be2:	ef 90       	pop	r14
     be4:	df 90       	pop	r13
     be6:	cf 90       	pop	r12
     be8:	bf 90       	pop	r11
     bea:	af 90       	pop	r10
     bec:	9f 90       	pop	r9
     bee:	8f 90       	pop	r8
     bf0:	7f 90       	pop	r7
     bf2:	6f 90       	pop	r6
     bf4:	5f 90       	pop	r5
     bf6:	4f 90       	pop	r4
     bf8:	3f 90       	pop	r3
     bfa:	2f 90       	pop	r2
     bfc:	1f 90       	pop	r1
     bfe:	0f 90       	pop	r0
     c00:	ff 91       	pop	r31
     c02:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     c06:	ff 91       	pop	r31
     c08:	ff bf       	out	0x3f, r31	; 63
     c0a:	ff 91       	pop	r31
	asm volatile ( "ret" );
     c0c:	08 95       	ret

00000c0e <portTaskSwitchContext>:
	//-----------------------------------------------------------
	//
	// The task switch is deferred until there is no more nesting.
	//
	void portTaskSwitchContext(signed portBASE_TYPE xSwitchRequired)
	{
     c0e:	cf 93       	push	r28
		intTaskSwitchPending |= xSwitchRequired;					
     c10:	90 91 d0 2c 	lds	r25, 0x2CD0	; 0x802cd0 <intTaskSwitchPending>
     c14:	89 2b       	or	r24, r25
     c16:	80 93 d0 2c 	sts	0x2CD0, r24	; 0x802cd0 <intTaskSwitchPending>
																
		if(NOT_NESTING() && intTaskSwitchPending)					
     c1a:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7de0a0>
     c1e:	91 30       	cpi	r25, 0x01	; 1
     c20:	41 f0       	breq	.+16     	; 0xc32 <portTaskSwitchContext+0x24>
     c22:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7de0a0>
     c26:	92 30       	cpi	r25, 0x02	; 2
     c28:	21 f0       	breq	.+8      	; 0xc32 <portTaskSwitchContext+0x24>
     c2a:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7de0a0>
     c2e:	94 30       	cpi	r25, 0x04	; 4
     c30:	59 f4       	brne	.+22     	; 0xc48 <portTaskSwitchContext+0x3a>
     c32:	88 23       	and	r24, r24
     c34:	49 f0       	breq	.+18     	; 0xc48 <portTaskSwitchContext+0x3a>
		{															
			register unsigned portBASE_TYPE uxSavedPmicCtrlReg; 				
			extern void vTaskSwitchContext(void);   				
																
			// Critical section used, because vTaskSwitchContext handles FreeRTOS internal data structures.
 			uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR(); 
     c36:	0e 94 e6 04 	call	0x9cc	; 0x9cc <_portSetInterruptMaskFromIsr>
     c3a:	c8 2f       	mov	r28, r24
			intTaskSwitchPending = 0;								
     c3c:	10 92 d0 2c 	sts	0x2CD0, r1	; 0x802cd0 <intTaskSwitchPending>
			vTaskSwitchContext();                   				
     c40:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <vTaskSwitchContext>
			portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedPmicCtrlReg);
     c44:	c0 93 a2 00 	sts	0x00A2, r28	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
		}                                          					
	}
     c48:	cf 91       	pop	r28
     c4a:	08 95       	ret

00000c4c <__vector_14>:
	// the context is saved at the start of vPortYieldFromTick().  The tick
	// count is incremented after the context is saved.
	//
	ISR(TCC0_OVF_vect, ISR_NAKED)
	{
		portSTART_ISR();
     c4c:	ff 93       	push	r31
     c4e:	ff b7       	in	r31, 0x3f	; 63
     c50:	ff 93       	push	r31
     c52:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     c56:	ff 93       	push	r31
     c58:	f8 7f       	andi	r31, 0xF8	; 248
     c5a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     c5e:	0f 92       	push	r0
     c60:	1f 92       	push	r1
     c62:	11 24       	eor	r1, r1
     c64:	2f 92       	push	r2
     c66:	3f 92       	push	r3
     c68:	4f 92       	push	r4
     c6a:	5f 92       	push	r5
     c6c:	6f 92       	push	r6
     c6e:	7f 92       	push	r7
     c70:	8f 92       	push	r8
     c72:	9f 92       	push	r9
     c74:	af 92       	push	r10
     c76:	bf 92       	push	r11
     c78:	cf 92       	push	r12
     c7a:	df 92       	push	r13
     c7c:	ef 92       	push	r14
     c7e:	ff 92       	push	r15
     c80:	0f 93       	push	r16
     c82:	1f 93       	push	r17
     c84:	2f 93       	push	r18
     c86:	3f 93       	push	r19
     c88:	4f 93       	push	r20
     c8a:	5f 93       	push	r21
     c8c:	6f 93       	push	r22
     c8e:	7f 93       	push	r23
     c90:	8f 93       	push	r24
     c92:	9f 93       	push	r25
     c94:	af 93       	push	r26
     c96:	bf 93       	push	r27
     c98:	cf 93       	push	r28
     c9a:	df 93       	push	r29
     c9c:	ef 93       	push	r30
     c9e:	a0 91 78 2c 	lds	r26, 0x2C78	; 0x802c78 <pxCurrentTCB>
     ca2:	b0 91 79 2c 	lds	r27, 0x2C79	; 0x802c79 <pxCurrentTCB+0x1>
     ca6:	0d b6       	in	r0, 0x3d	; 61
     ca8:	0d 92       	st	X+, r0
     caa:	0e b6       	in	r0, 0x3e	; 62
     cac:	0d 92       	st	X+, r0
		portTaskIncrementTick();
     cae:	0e 94 ed 04 	call	0x9da	; 0x9da <portTaskIncrementTick>
		//always try a task switch, but only if on kernel interrupt level
		portEND_SWITCHING_ISR(pdTRUE); 
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	0e 94 07 06 	call	0xc0e	; 0xc0e <portTaskSwitchContext>
     cb8:	a0 91 78 2c 	lds	r26, 0x2C78	; 0x802c78 <pxCurrentTCB>
     cbc:	b0 91 79 2c 	lds	r27, 0x2C79	; 0x802c79 <pxCurrentTCB+0x1>
     cc0:	0d 90       	ld	r0, X+
     cc2:	0d be       	out	0x3d, r0	; 61
     cc4:	0d 90       	ld	r0, X+
     cc6:	0e be       	out	0x3e, r0	; 62
     cc8:	ef 91       	pop	r30
     cca:	df 91       	pop	r29
     ccc:	cf 91       	pop	r28
     cce:	bf 91       	pop	r27
     cd0:	af 91       	pop	r26
     cd2:	9f 91       	pop	r25
     cd4:	8f 91       	pop	r24
     cd6:	7f 91       	pop	r23
     cd8:	6f 91       	pop	r22
     cda:	5f 91       	pop	r21
     cdc:	4f 91       	pop	r20
     cde:	3f 91       	pop	r19
     ce0:	2f 91       	pop	r18
     ce2:	1f 91       	pop	r17
     ce4:	0f 91       	pop	r16
     ce6:	ff 90       	pop	r15
     ce8:	ef 90       	pop	r14
     cea:	df 90       	pop	r13
     cec:	cf 90       	pop	r12
     cee:	bf 90       	pop	r11
     cf0:	af 90       	pop	r10
     cf2:	9f 90       	pop	r9
     cf4:	8f 90       	pop	r8
     cf6:	7f 90       	pop	r7
     cf8:	6f 90       	pop	r6
     cfa:	5f 90       	pop	r5
     cfc:	4f 90       	pop	r4
     cfe:	3f 90       	pop	r3
     d00:	2f 90       	pop	r2
     d02:	1f 90       	pop	r1
     d04:	0f 90       	pop	r0
     d06:	ff 91       	pop	r31
     d08:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     d0c:	ff 91       	pop	r31
     d0e:	ff bf       	out	0x3f, r31	; 63
     d10:	ff 91       	pop	r31
     d12:	18 95       	reti

00000d14 <prvIsQueueEmpty>:
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
     d14:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     d18:	ff 93       	push	r31
     d1a:	f8 7f       	andi	r31, 0xF8	; 248
     d1c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     d20:	fc 01       	movw	r30, r24
     d22:	86 8d       	ldd	r24, Z+30	; 0x1e
     d24:	81 11       	cpse	r24, r1
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <prvIsQueueEmpty+0x18>
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	01 c0       	rjmp	.+2      	; 0xd2e <prvIsQueueEmpty+0x1a>
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	ff 91       	pop	r31
     d30:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     d34:	08 95       	ret

00000d36 <prvIsQueueFull>:
     d36:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     d3a:	ff 93       	push	r31
     d3c:	f8 7f       	andi	r31, 0xF8	; 248
     d3e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     d42:	fc 01       	movw	r30, r24
     d44:	26 8d       	ldd	r18, Z+30	; 0x1e
     d46:	87 8d       	ldd	r24, Z+31	; 0x1f
     d48:	28 13       	cpse	r18, r24
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <prvIsQueueFull+0x1a>
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	01 c0       	rjmp	.+2      	; 0xd52 <prvIsQueueFull+0x1c>
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	ff 91       	pop	r31
     d54:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     d58:	08 95       	ret

00000d5a <prvCopyDataToQueue>:
     d5a:	0f 93       	push	r16
     d5c:	1f 93       	push	r17
     d5e:	cf 93       	push	r28
     d60:	df 93       	push	r29
     d62:	ec 01       	movw	r28, r24
     d64:	04 2f       	mov	r16, r20
     d66:	1e 8d       	ldd	r17, Y+30	; 0x1e
     d68:	48 a1       	ldd	r20, Y+32	; 0x20
     d6a:	44 23       	and	r20, r20
     d6c:	b9 f1       	breq	.+110    	; 0xddc <prvCopyDataToQueue+0x82>
     d6e:	01 11       	cpse	r16, r1
     d70:	16 c0       	rjmp	.+44     	; 0xd9e <prvCopyDataToQueue+0x44>
     d72:	50 e0       	ldi	r21, 0x00	; 0
     d74:	8c 81       	ldd	r24, Y+4	; 0x04
     d76:	9d 81       	ldd	r25, Y+5	; 0x05
     d78:	0e 94 c5 1c 	call	0x398a	; 0x398a <memcpy>
     d7c:	28 a1       	ldd	r18, Y+32	; 0x20
     d7e:	8c 81       	ldd	r24, Y+4	; 0x04
     d80:	9d 81       	ldd	r25, Y+5	; 0x05
     d82:	82 0f       	add	r24, r18
     d84:	91 1d       	adc	r25, r1
     d86:	8c 83       	std	Y+4, r24	; 0x04
     d88:	9d 83       	std	Y+5, r25	; 0x05
     d8a:	2a 81       	ldd	r18, Y+2	; 0x02
     d8c:	3b 81       	ldd	r19, Y+3	; 0x03
     d8e:	82 17       	cp	r24, r18
     d90:	93 07       	cpc	r25, r19
     d92:	20 f1       	brcs	.+72     	; 0xddc <prvCopyDataToQueue+0x82>
     d94:	88 81       	ld	r24, Y
     d96:	99 81       	ldd	r25, Y+1	; 0x01
     d98:	8c 83       	std	Y+4, r24	; 0x04
     d9a:	9d 83       	std	Y+5, r25	; 0x05
     d9c:	1f c0       	rjmp	.+62     	; 0xddc <prvCopyDataToQueue+0x82>
     d9e:	50 e0       	ldi	r21, 0x00	; 0
     da0:	8e 81       	ldd	r24, Y+6	; 0x06
     da2:	9f 81       	ldd	r25, Y+7	; 0x07
     da4:	0e 94 c5 1c 	call	0x398a	; 0x398a <memcpy>
     da8:	88 a1       	ldd	r24, Y+32	; 0x20
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	91 95       	neg	r25
     dae:	81 95       	neg	r24
     db0:	91 09       	sbc	r25, r1
     db2:	2e 81       	ldd	r18, Y+6	; 0x06
     db4:	3f 81       	ldd	r19, Y+7	; 0x07
     db6:	28 0f       	add	r18, r24
     db8:	39 1f       	adc	r19, r25
     dba:	2e 83       	std	Y+6, r18	; 0x06
     dbc:	3f 83       	std	Y+7, r19	; 0x07
     dbe:	48 81       	ld	r20, Y
     dc0:	59 81       	ldd	r21, Y+1	; 0x01
     dc2:	24 17       	cp	r18, r20
     dc4:	35 07       	cpc	r19, r21
     dc6:	30 f4       	brcc	.+12     	; 0xdd4 <prvCopyDataToQueue+0x7a>
     dc8:	2a 81       	ldd	r18, Y+2	; 0x02
     dca:	3b 81       	ldd	r19, Y+3	; 0x03
     dcc:	82 0f       	add	r24, r18
     dce:	93 1f       	adc	r25, r19
     dd0:	8e 83       	std	Y+6, r24	; 0x06
     dd2:	9f 83       	std	Y+7, r25	; 0x07
     dd4:	02 30       	cpi	r16, 0x02	; 2
     dd6:	11 f4       	brne	.+4      	; 0xddc <prvCopyDataToQueue+0x82>
     dd8:	11 11       	cpse	r17, r1
     dda:	11 50       	subi	r17, 0x01	; 1
     ddc:	1f 5f       	subi	r17, 0xFF	; 255
     dde:	1e 8f       	std	Y+30, r17	; 0x1e
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	1f 91       	pop	r17
     de8:	0f 91       	pop	r16
     dea:	08 95       	ret

00000dec <prvCopyDataFromQueue>:
     dec:	fc 01       	movw	r30, r24
     dee:	40 a1       	ldd	r20, Z+32	; 0x20
     df0:	44 23       	and	r20, r20
     df2:	a9 f0       	breq	.+42     	; 0xe1e <prvCopyDataFromQueue+0x32>
     df4:	50 e0       	ldi	r21, 0x00	; 0
     df6:	26 81       	ldd	r18, Z+6	; 0x06
     df8:	37 81       	ldd	r19, Z+7	; 0x07
     dfa:	24 0f       	add	r18, r20
     dfc:	35 1f       	adc	r19, r21
     dfe:	26 83       	std	Z+6, r18	; 0x06
     e00:	37 83       	std	Z+7, r19	; 0x07
     e02:	82 81       	ldd	r24, Z+2	; 0x02
     e04:	93 81       	ldd	r25, Z+3	; 0x03
     e06:	28 17       	cp	r18, r24
     e08:	39 07       	cpc	r19, r25
     e0a:	20 f0       	brcs	.+8      	; 0xe14 <prvCopyDataFromQueue+0x28>
     e0c:	80 81       	ld	r24, Z
     e0e:	91 81       	ldd	r25, Z+1	; 0x01
     e10:	86 83       	std	Z+6, r24	; 0x06
     e12:	97 83       	std	Z+7, r25	; 0x07
     e14:	cb 01       	movw	r24, r22
     e16:	66 81       	ldd	r22, Z+6	; 0x06
     e18:	77 81       	ldd	r23, Z+7	; 0x07
     e1a:	0e 94 c5 1c 	call	0x398a	; 0x398a <memcpy>
     e1e:	08 95       	ret

00000e20 <prvUnlockQueue>:
     e20:	1f 93       	push	r17
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
     e26:	ec 01       	movw	r28, r24
     e28:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     e2c:	ff 93       	push	r31
     e2e:	f8 7f       	andi	r31, 0xF8	; 248
     e30:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     e34:	1a a1       	ldd	r17, Y+34	; 0x22
     e36:	0b c0       	rjmp	.+22     	; 0xe4e <prvUnlockQueue+0x2e>
     e38:	8b 89       	ldd	r24, Y+19	; 0x13
     e3a:	88 23       	and	r24, r24
     e3c:	51 f0       	breq	.+20     	; 0xe52 <prvUnlockQueue+0x32>
     e3e:	ce 01       	movw	r24, r28
     e40:	43 96       	adiw	r24, 0x13	; 19
     e42:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <xTaskRemoveFromEventList>
     e46:	81 11       	cpse	r24, r1
     e48:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <vTaskMissedYield>
     e4c:	11 50       	subi	r17, 0x01	; 1
     e4e:	11 16       	cp	r1, r17
     e50:	9c f3       	brlt	.-26     	; 0xe38 <prvUnlockQueue+0x18>
     e52:	8f ef       	ldi	r24, 0xFF	; 255
     e54:	8a a3       	std	Y+34, r24	; 0x22
     e56:	ff 91       	pop	r31
     e58:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     e5c:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     e60:	ff 93       	push	r31
     e62:	f8 7f       	andi	r31, 0xF8	; 248
     e64:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     e68:	19 a1       	ldd	r17, Y+33	; 0x21
     e6a:	0b c0       	rjmp	.+22     	; 0xe82 <prvUnlockQueue+0x62>
     e6c:	88 85       	ldd	r24, Y+8	; 0x08
     e6e:	88 23       	and	r24, r24
     e70:	51 f0       	breq	.+20     	; 0xe86 <prvUnlockQueue+0x66>
     e72:	ce 01       	movw	r24, r28
     e74:	08 96       	adiw	r24, 0x08	; 8
     e76:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <xTaskRemoveFromEventList>
     e7a:	81 11       	cpse	r24, r1
     e7c:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <vTaskMissedYield>
     e80:	11 50       	subi	r17, 0x01	; 1
     e82:	11 16       	cp	r1, r17
     e84:	9c f3       	brlt	.-26     	; 0xe6c <prvUnlockQueue+0x4c>
     e86:	8f ef       	ldi	r24, 0xFF	; 255
     e88:	89 a3       	std	Y+33, r24	; 0x21
     e8a:	ff 91       	pop	r31
     e8c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     e90:	df 91       	pop	r29
     e92:	cf 91       	pop	r28
     e94:	1f 91       	pop	r17
     e96:	08 95       	ret

00000e98 <xQueueGenericReset>:
     e98:	cf 93       	push	r28
     e9a:	df 93       	push	r29
     e9c:	ec 01       	movw	r28, r24
     e9e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     ea2:	ff 93       	push	r31
     ea4:	f8 7f       	andi	r31, 0xF8	; 248
     ea6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     eaa:	e8 81       	ld	r30, Y
     eac:	f9 81       	ldd	r31, Y+1	; 0x01
     eae:	8f 8d       	ldd	r24, Y+31	; 0x1f
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	28 a1       	ldd	r18, Y+32	; 0x20
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	82 9f       	mul	r24, r18
     eb8:	a0 01       	movw	r20, r0
     eba:	83 9f       	mul	r24, r19
     ebc:	50 0d       	add	r21, r0
     ebe:	92 9f       	mul	r25, r18
     ec0:	50 0d       	add	r21, r0
     ec2:	11 24       	eor	r1, r1
     ec4:	4e 0f       	add	r20, r30
     ec6:	5f 1f       	adc	r21, r31
     ec8:	4a 83       	std	Y+2, r20	; 0x02
     eca:	5b 83       	std	Y+3, r21	; 0x03
     ecc:	1e 8e       	std	Y+30, r1	; 0x1e
     ece:	ec 83       	std	Y+4, r30	; 0x04
     ed0:	fd 83       	std	Y+5, r31	; 0x05
     ed2:	01 97       	sbiw	r24, 0x01	; 1
     ed4:	28 9f       	mul	r18, r24
     ed6:	a0 01       	movw	r20, r0
     ed8:	29 9f       	mul	r18, r25
     eda:	50 0d       	add	r21, r0
     edc:	38 9f       	mul	r19, r24
     ede:	50 0d       	add	r21, r0
     ee0:	11 24       	eor	r1, r1
     ee2:	cf 01       	movw	r24, r30
     ee4:	84 0f       	add	r24, r20
     ee6:	95 1f       	adc	r25, r21
     ee8:	8e 83       	std	Y+6, r24	; 0x06
     eea:	9f 83       	std	Y+7, r25	; 0x07
     eec:	8f ef       	ldi	r24, 0xFF	; 255
     eee:	89 a3       	std	Y+33, r24	; 0x21
     ef0:	8a a3       	std	Y+34, r24	; 0x22
     ef2:	61 11       	cpse	r22, r1
     ef4:	0c c0       	rjmp	.+24     	; 0xf0e <xQueueGenericReset+0x76>
     ef6:	88 85       	ldd	r24, Y+8	; 0x08
     ef8:	88 23       	and	r24, r24
     efa:	89 f0       	breq	.+34     	; 0xf1e <xQueueGenericReset+0x86>
     efc:	ce 01       	movw	r24, r28
     efe:	08 96       	adiw	r24, 0x08	; 8
     f00:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <xTaskRemoveFromEventList>
     f04:	88 23       	and	r24, r24
     f06:	59 f0       	breq	.+22     	; 0xf1e <xQueueGenericReset+0x86>
     f08:	0e 94 a6 05 	call	0xb4c	; 0xb4c <vPortYield>
     f0c:	08 c0       	rjmp	.+16     	; 0xf1e <xQueueGenericReset+0x86>
     f0e:	ce 01       	movw	r24, r28
     f10:	08 96       	adiw	r24, 0x08	; 8
     f12:	0e 94 3b 04 	call	0x876	; 0x876 <vListInitialise>
     f16:	ce 01       	movw	r24, r28
     f18:	43 96       	adiw	r24, 0x13	; 19
     f1a:	0e 94 3b 04 	call	0x876	; 0x876 <vListInitialise>
     f1e:	ff 91       	pop	r31
     f20:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	df 91       	pop	r29
     f28:	cf 91       	pop	r28
     f2a:	08 95       	ret

00000f2c <prvInitialiseNewQueue>:
     f2c:	ff 92       	push	r15
     f2e:	0f 93       	push	r16
     f30:	1f 93       	push	r17
     f32:	cf 93       	push	r28
     f34:	df 93       	push	r29
     f36:	f2 2e       	mov	r15, r18
     f38:	e8 01       	movw	r28, r16
     f3a:	61 11       	cpse	r22, r1
     f3c:	03 c0       	rjmp	.+6      	; 0xf44 <prvInitialiseNewQueue+0x18>
     f3e:	08 83       	st	Y, r16
     f40:	19 83       	std	Y+1, r17	; 0x01
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <prvInitialiseNewQueue+0x1c>
     f44:	48 83       	st	Y, r20
     f46:	59 83       	std	Y+1, r21	; 0x01
     f48:	8f 8f       	std	Y+31, r24	; 0x1f
     f4a:	68 a3       	std	Y+32, r22	; 0x20
     f4c:	61 e0       	ldi	r22, 0x01	; 1
     f4e:	ce 01       	movw	r24, r28
     f50:	0e 94 4c 07 	call	0xe98	; 0xe98 <xQueueGenericReset>
     f54:	fc a2       	std	Y+36, r15	; 0x24
     f56:	df 91       	pop	r29
     f58:	cf 91       	pop	r28
     f5a:	1f 91       	pop	r17
     f5c:	0f 91       	pop	r16
     f5e:	ff 90       	pop	r15
     f60:	08 95       	ret

00000f62 <xQueueGenericCreate>:
     f62:	df 92       	push	r13
     f64:	ef 92       	push	r14
     f66:	ff 92       	push	r15
     f68:	0f 93       	push	r16
     f6a:	1f 93       	push	r17
     f6c:	cf 93       	push	r28
     f6e:	df 93       	push	r29
     f70:	e8 2e       	mov	r14, r24
     f72:	f6 2e       	mov	r15, r22
     f74:	d4 2e       	mov	r13, r20
     f76:	66 23       	and	r22, r22
     f78:	21 f0       	breq	.+8      	; 0xf82 <xQueueGenericCreate+0x20>
     f7a:	86 9f       	mul	r24, r22
     f7c:	c0 01       	movw	r24, r0
     f7e:	11 24       	eor	r1, r1
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <xQueueGenericCreate+0x24>
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	85 96       	adiw	r24, 0x25	; 37
     f88:	0e 94 14 04 	call	0x828	; 0x828 <pvPortMalloc>
     f8c:	ec 01       	movw	r28, r24
     f8e:	00 97       	sbiw	r24, 0x00	; 0
     f90:	49 f0       	breq	.+18     	; 0xfa4 <xQueueGenericCreate+0x42>
     f92:	8c 01       	movw	r16, r24
     f94:	2d 2d       	mov	r18, r13
     f96:	ac 01       	movw	r20, r24
     f98:	4b 5d       	subi	r20, 0xDB	; 219
     f9a:	5f 4f       	sbci	r21, 0xFF	; 255
     f9c:	6f 2d       	mov	r22, r15
     f9e:	8e 2d       	mov	r24, r14
     fa0:	0e 94 96 07 	call	0xf2c	; 0xf2c <prvInitialiseNewQueue>
     fa4:	ce 01       	movw	r24, r28
     fa6:	df 91       	pop	r29
     fa8:	cf 91       	pop	r28
     faa:	1f 91       	pop	r17
     fac:	0f 91       	pop	r16
     fae:	ff 90       	pop	r15
     fb0:	ef 90       	pop	r14
     fb2:	df 90       	pop	r13
     fb4:	08 95       	ret

00000fb6 <xQueueGenericSend>:
     fb6:	cf 92       	push	r12
     fb8:	df 92       	push	r13
     fba:	ef 92       	push	r14
     fbc:	ff 92       	push	r15
     fbe:	0f 93       	push	r16
     fc0:	1f 93       	push	r17
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
     fca:	29 97       	sbiw	r28, 0x09	; 9
     fcc:	cd bf       	out	0x3d, r28	; 61
     fce:	de bf       	out	0x3e, r29	; 62
     fd0:	7c 01       	movw	r14, r24
     fd2:	6b 01       	movw	r12, r22
     fd4:	2e 83       	std	Y+6, r18	; 0x06
     fd6:	3f 83       	std	Y+7, r19	; 0x07
     fd8:	48 87       	std	Y+8, r20	; 0x08
     fda:	59 87       	std	Y+9, r21	; 0x09
     fdc:	10 e0       	ldi	r17, 0x00	; 0
     fde:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     fe2:	ff 93       	push	r31
     fe4:	f8 7f       	andi	r31, 0xF8	; 248
     fe6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     fea:	f7 01       	movw	r30, r14
     fec:	96 8d       	ldd	r25, Z+30	; 0x1e
     fee:	87 8d       	ldd	r24, Z+31	; 0x1f
     ff0:	98 17       	cp	r25, r24
     ff2:	10 f0       	brcs	.+4      	; 0xff8 <xQueueGenericSend+0x42>
     ff4:	02 30       	cpi	r16, 0x02	; 2
     ff6:	d1 f4       	brne	.+52     	; 0x102c <xQueueGenericSend+0x76>
     ff8:	40 2f       	mov	r20, r16
     ffa:	b6 01       	movw	r22, r12
     ffc:	c7 01       	movw	r24, r14
     ffe:	0e 94 ad 06 	call	0xd5a	; 0xd5a <prvCopyDataToQueue>
    1002:	f7 01       	movw	r30, r14
    1004:	93 89       	ldd	r25, Z+19	; 0x13
    1006:	99 23       	and	r25, r25
    1008:	49 f0       	breq	.+18     	; 0x101c <xQueueGenericSend+0x66>
    100a:	c7 01       	movw	r24, r14
    100c:	43 96       	adiw	r24, 0x13	; 19
    100e:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <xTaskRemoveFromEventList>
    1012:	88 23       	and	r24, r24
    1014:	31 f0       	breq	.+12     	; 0x1022 <xQueueGenericSend+0x6c>
    1016:	0e 94 a6 05 	call	0xb4c	; 0xb4c <vPortYield>
    101a:	03 c0       	rjmp	.+6      	; 0x1022 <xQueueGenericSend+0x6c>
    101c:	81 11       	cpse	r24, r1
    101e:	0e 94 a6 05 	call	0xb4c	; 0xb4c <vPortYield>
    1022:	ff 91       	pop	r31
    1024:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	58 c0       	rjmp	.+176    	; 0x10dc <xQueueGenericSend+0x126>
    102c:	8e 81       	ldd	r24, Y+6	; 0x06
    102e:	9f 81       	ldd	r25, Y+7	; 0x07
    1030:	a8 85       	ldd	r26, Y+8	; 0x08
    1032:	b9 85       	ldd	r27, Y+9	; 0x09
    1034:	89 2b       	or	r24, r25
    1036:	8a 2b       	or	r24, r26
    1038:	8b 2b       	or	r24, r27
    103a:	29 f4       	brne	.+10     	; 0x1046 <xQueueGenericSend+0x90>
    103c:	ff 91       	pop	r31
    103e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	4b c0       	rjmp	.+150    	; 0x10dc <xQueueGenericSend+0x126>
    1046:	11 11       	cpse	r17, r1
    1048:	05 c0       	rjmp	.+10     	; 0x1054 <xQueueGenericSend+0x9e>
    104a:	ce 01       	movw	r24, r28
    104c:	01 96       	adiw	r24, 0x01	; 1
    104e:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <vTaskInternalSetTimeOutState>
    1052:	11 e0       	ldi	r17, 0x01	; 1
    1054:	ff 91       	pop	r31
    1056:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    105a:	0e 94 ce 0b 	call	0x179c	; 0x179c <vTaskSuspendAll>
    105e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1062:	ff 93       	push	r31
    1064:	f8 7f       	andi	r31, 0xF8	; 248
    1066:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    106a:	f7 01       	movw	r30, r14
    106c:	81 a1       	ldd	r24, Z+33	; 0x21
    106e:	8f 3f       	cpi	r24, 0xFF	; 255
    1070:	09 f4       	brne	.+2      	; 0x1074 <xQueueGenericSend+0xbe>
    1072:	11 a2       	std	Z+33, r1	; 0x21
    1074:	f7 01       	movw	r30, r14
    1076:	82 a1       	ldd	r24, Z+34	; 0x22
    1078:	8f 3f       	cpi	r24, 0xFF	; 255
    107a:	09 f4       	brne	.+2      	; 0x107e <xQueueGenericSend+0xc8>
    107c:	12 a2       	std	Z+34, r1	; 0x22
    107e:	ff 91       	pop	r31
    1080:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1084:	be 01       	movw	r22, r28
    1086:	6a 5f       	subi	r22, 0xFA	; 250
    1088:	7f 4f       	sbci	r23, 0xFF	; 255
    108a:	ce 01       	movw	r24, r28
    108c:	01 96       	adiw	r24, 0x01	; 1
    108e:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <xTaskCheckForTimeOut>
    1092:	81 11       	cpse	r24, r1
    1094:	1d c0       	rjmp	.+58     	; 0x10d0 <xQueueGenericSend+0x11a>
    1096:	c7 01       	movw	r24, r14
    1098:	0e 94 9b 06 	call	0xd36	; 0xd36 <prvIsQueueFull>
    109c:	88 23       	and	r24, r24
    109e:	91 f0       	breq	.+36     	; 0x10c4 <xQueueGenericSend+0x10e>
    10a0:	4e 81       	ldd	r20, Y+6	; 0x06
    10a2:	5f 81       	ldd	r21, Y+7	; 0x07
    10a4:	68 85       	ldd	r22, Y+8	; 0x08
    10a6:	79 85       	ldd	r23, Y+9	; 0x09
    10a8:	c7 01       	movw	r24, r14
    10aa:	08 96       	adiw	r24, 0x08	; 8
    10ac:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <vTaskPlaceOnEventList>
    10b0:	c7 01       	movw	r24, r14
    10b2:	0e 94 10 07 	call	0xe20	; 0xe20 <prvUnlockQueue>
    10b6:	0e 94 b6 0c 	call	0x196c	; 0x196c <xTaskResumeAll>
    10ba:	81 11       	cpse	r24, r1
    10bc:	90 cf       	rjmp	.-224    	; 0xfde <xQueueGenericSend+0x28>
    10be:	0e 94 a6 05 	call	0xb4c	; 0xb4c <vPortYield>
    10c2:	8d cf       	rjmp	.-230    	; 0xfde <xQueueGenericSend+0x28>
    10c4:	c7 01       	movw	r24, r14
    10c6:	0e 94 10 07 	call	0xe20	; 0xe20 <prvUnlockQueue>
    10ca:	0e 94 b6 0c 	call	0x196c	; 0x196c <xTaskResumeAll>
    10ce:	87 cf       	rjmp	.-242    	; 0xfde <xQueueGenericSend+0x28>
    10d0:	c7 01       	movw	r24, r14
    10d2:	0e 94 10 07 	call	0xe20	; 0xe20 <prvUnlockQueue>
    10d6:	0e 94 b6 0c 	call	0x196c	; 0x196c <xTaskResumeAll>
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	29 96       	adiw	r28, 0x09	; 9
    10de:	cd bf       	out	0x3d, r28	; 61
    10e0:	de bf       	out	0x3e, r29	; 62
    10e2:	df 91       	pop	r29
    10e4:	cf 91       	pop	r28
    10e6:	1f 91       	pop	r17
    10e8:	0f 91       	pop	r16
    10ea:	ff 90       	pop	r15
    10ec:	ef 90       	pop	r14
    10ee:	df 90       	pop	r13
    10f0:	cf 90       	pop	r12
    10f2:	08 95       	ret

000010f4 <xQueueGenericSendFromISR>:
    10f4:	af 92       	push	r10
    10f6:	bf 92       	push	r11
    10f8:	cf 92       	push	r12
    10fa:	df 92       	push	r13
    10fc:	ff 92       	push	r15
    10fe:	0f 93       	push	r16
    1100:	1f 93       	push	r17
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
    1106:	ec 01       	movw	r28, r24
    1108:	6b 01       	movw	r12, r22
    110a:	5a 01       	movw	r10, r20
    110c:	02 2f       	mov	r16, r18
    110e:	0e 94 e6 04 	call	0x9cc	; 0x9cc <_portSetInterruptMaskFromIsr>
    1112:	f8 2e       	mov	r15, r24
    1114:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1116:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1118:	98 17       	cp	r25, r24
    111a:	10 f0       	brcs	.+4      	; 0x1120 <xQueueGenericSendFromISR+0x2c>
    111c:	02 30       	cpi	r16, 0x02	; 2
    111e:	e1 f4       	brne	.+56     	; 0x1158 <xQueueGenericSendFromISR+0x64>
    1120:	1a a1       	ldd	r17, Y+34	; 0x22
    1122:	40 2f       	mov	r20, r16
    1124:	b6 01       	movw	r22, r12
    1126:	ce 01       	movw	r24, r28
    1128:	0e 94 ad 06 	call	0xd5a	; 0xd5a <prvCopyDataToQueue>
    112c:	1f 3f       	cpi	r17, 0xFF	; 255
    112e:	81 f4       	brne	.+32     	; 0x1150 <xQueueGenericSendFromISR+0x5c>
    1130:	8b 89       	ldd	r24, Y+19	; 0x13
    1132:	88 23       	and	r24, r24
    1134:	99 f0       	breq	.+38     	; 0x115c <xQueueGenericSendFromISR+0x68>
    1136:	ce 01       	movw	r24, r28
    1138:	43 96       	adiw	r24, 0x13	; 19
    113a:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <xTaskRemoveFromEventList>
    113e:	88 23       	and	r24, r24
    1140:	79 f0       	breq	.+30     	; 0x1160 <xQueueGenericSendFromISR+0x6c>
    1142:	a1 14       	cp	r10, r1
    1144:	b1 04       	cpc	r11, r1
    1146:	71 f0       	breq	.+28     	; 0x1164 <xQueueGenericSendFromISR+0x70>
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	f5 01       	movw	r30, r10
    114c:	80 83       	st	Z, r24
    114e:	0b c0       	rjmp	.+22     	; 0x1166 <xQueueGenericSendFromISR+0x72>
    1150:	1f 5f       	subi	r17, 0xFF	; 255
    1152:	1a a3       	std	Y+34, r17	; 0x22
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	07 c0       	rjmp	.+14     	; 0x1166 <xQueueGenericSendFromISR+0x72>
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	05 c0       	rjmp	.+10     	; 0x1166 <xQueueGenericSendFromISR+0x72>
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	03 c0       	rjmp	.+6      	; 0x1166 <xQueueGenericSendFromISR+0x72>
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	01 c0       	rjmp	.+2      	; 0x1166 <xQueueGenericSendFromISR+0x72>
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	f0 92 a2 00 	sts	0x00A2, r15	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    116a:	df 91       	pop	r29
    116c:	cf 91       	pop	r28
    116e:	1f 91       	pop	r17
    1170:	0f 91       	pop	r16
    1172:	ff 90       	pop	r15
    1174:	df 90       	pop	r13
    1176:	cf 90       	pop	r12
    1178:	bf 90       	pop	r11
    117a:	af 90       	pop	r10
    117c:	08 95       	ret

0000117e <xQueueReceive>:
    117e:	cf 92       	push	r12
    1180:	df 92       	push	r13
    1182:	ef 92       	push	r14
    1184:	ff 92       	push	r15
    1186:	0f 93       	push	r16
    1188:	1f 93       	push	r17
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
    1192:	29 97       	sbiw	r28, 0x09	; 9
    1194:	cd bf       	out	0x3d, r28	; 61
    1196:	de bf       	out	0x3e, r29	; 62
    1198:	8c 01       	movw	r16, r24
    119a:	6b 01       	movw	r12, r22
    119c:	2e 83       	std	Y+6, r18	; 0x06
    119e:	3f 83       	std	Y+7, r19	; 0x07
    11a0:	48 87       	std	Y+8, r20	; 0x08
    11a2:	59 87       	std	Y+9, r21	; 0x09
    11a4:	e1 2c       	mov	r14, r1
    11a6:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    11aa:	ff 93       	push	r31
    11ac:	f8 7f       	andi	r31, 0xF8	; 248
    11ae:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    11b2:	f8 01       	movw	r30, r16
    11b4:	f6 8c       	ldd	r15, Z+30	; 0x1e
    11b6:	ff 20       	and	r15, r15
    11b8:	b1 f0       	breq	.+44     	; 0x11e6 <xQueueReceive+0x68>
    11ba:	b6 01       	movw	r22, r12
    11bc:	c8 01       	movw	r24, r16
    11be:	0e 94 f6 06 	call	0xdec	; 0xdec <prvCopyDataFromQueue>
    11c2:	fa 94       	dec	r15
    11c4:	f8 01       	movw	r30, r16
    11c6:	f6 8e       	std	Z+30, r15	; 0x1e
    11c8:	80 85       	ldd	r24, Z+8	; 0x08
    11ca:	88 23       	and	r24, r24
    11cc:	39 f0       	breq	.+14     	; 0x11dc <xQueueReceive+0x5e>
    11ce:	c8 01       	movw	r24, r16
    11d0:	08 96       	adiw	r24, 0x08	; 8
    11d2:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <xTaskRemoveFromEventList>
    11d6:	81 11       	cpse	r24, r1
    11d8:	0e 94 a6 05 	call	0xb4c	; 0xb4c <vPortYield>
    11dc:	ff 91       	pop	r31
    11de:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	5f c0       	rjmp	.+190    	; 0x12a4 <xQueueReceive+0x126>
    11e6:	8e 81       	ldd	r24, Y+6	; 0x06
    11e8:	9f 81       	ldd	r25, Y+7	; 0x07
    11ea:	a8 85       	ldd	r26, Y+8	; 0x08
    11ec:	b9 85       	ldd	r27, Y+9	; 0x09
    11ee:	89 2b       	or	r24, r25
    11f0:	8a 2b       	or	r24, r26
    11f2:	8b 2b       	or	r24, r27
    11f4:	29 f4       	brne	.+10     	; 0x1200 <xQueueReceive+0x82>
    11f6:	ff 91       	pop	r31
    11f8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	52 c0       	rjmp	.+164    	; 0x12a4 <xQueueReceive+0x126>
    1200:	e1 10       	cpse	r14, r1
    1202:	06 c0       	rjmp	.+12     	; 0x1210 <xQueueReceive+0x92>
    1204:	ce 01       	movw	r24, r28
    1206:	01 96       	adiw	r24, 0x01	; 1
    1208:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <vTaskInternalSetTimeOutState>
    120c:	ee 24       	eor	r14, r14
    120e:	e3 94       	inc	r14
    1210:	ff 91       	pop	r31
    1212:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1216:	0e 94 ce 0b 	call	0x179c	; 0x179c <vTaskSuspendAll>
    121a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    121e:	ff 93       	push	r31
    1220:	f8 7f       	andi	r31, 0xF8	; 248
    1222:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1226:	f8 01       	movw	r30, r16
    1228:	81 a1       	ldd	r24, Z+33	; 0x21
    122a:	8f 3f       	cpi	r24, 0xFF	; 255
    122c:	09 f4       	brne	.+2      	; 0x1230 <xQueueReceive+0xb2>
    122e:	11 a2       	std	Z+33, r1	; 0x21
    1230:	f8 01       	movw	r30, r16
    1232:	82 a1       	ldd	r24, Z+34	; 0x22
    1234:	8f 3f       	cpi	r24, 0xFF	; 255
    1236:	09 f4       	brne	.+2      	; 0x123a <xQueueReceive+0xbc>
    1238:	12 a2       	std	Z+34, r1	; 0x22
    123a:	ff 91       	pop	r31
    123c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1240:	be 01       	movw	r22, r28
    1242:	6a 5f       	subi	r22, 0xFA	; 250
    1244:	7f 4f       	sbci	r23, 0xFF	; 255
    1246:	ce 01       	movw	r24, r28
    1248:	01 96       	adiw	r24, 0x01	; 1
    124a:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <xTaskCheckForTimeOut>
    124e:	81 11       	cpse	r24, r1
    1250:	1d c0       	rjmp	.+58     	; 0x128c <xQueueReceive+0x10e>
    1252:	c8 01       	movw	r24, r16
    1254:	0e 94 8a 06 	call	0xd14	; 0xd14 <prvIsQueueEmpty>
    1258:	88 23       	and	r24, r24
    125a:	91 f0       	breq	.+36     	; 0x1280 <xQueueReceive+0x102>
    125c:	4e 81       	ldd	r20, Y+6	; 0x06
    125e:	5f 81       	ldd	r21, Y+7	; 0x07
    1260:	68 85       	ldd	r22, Y+8	; 0x08
    1262:	79 85       	ldd	r23, Y+9	; 0x09
    1264:	c8 01       	movw	r24, r16
    1266:	43 96       	adiw	r24, 0x13	; 19
    1268:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <vTaskPlaceOnEventList>
    126c:	c8 01       	movw	r24, r16
    126e:	0e 94 10 07 	call	0xe20	; 0xe20 <prvUnlockQueue>
    1272:	0e 94 b6 0c 	call	0x196c	; 0x196c <xTaskResumeAll>
    1276:	81 11       	cpse	r24, r1
    1278:	96 cf       	rjmp	.-212    	; 0x11a6 <xQueueReceive+0x28>
    127a:	0e 94 a6 05 	call	0xb4c	; 0xb4c <vPortYield>
    127e:	93 cf       	rjmp	.-218    	; 0x11a6 <xQueueReceive+0x28>
    1280:	c8 01       	movw	r24, r16
    1282:	0e 94 10 07 	call	0xe20	; 0xe20 <prvUnlockQueue>
    1286:	0e 94 b6 0c 	call	0x196c	; 0x196c <xTaskResumeAll>
    128a:	8d cf       	rjmp	.-230    	; 0x11a6 <xQueueReceive+0x28>
    128c:	c8 01       	movw	r24, r16
    128e:	0e 94 10 07 	call	0xe20	; 0xe20 <prvUnlockQueue>
    1292:	0e 94 b6 0c 	call	0x196c	; 0x196c <xTaskResumeAll>
    1296:	c8 01       	movw	r24, r16
    1298:	0e 94 8a 06 	call	0xd14	; 0xd14 <prvIsQueueEmpty>
    129c:	88 23       	and	r24, r24
    129e:	09 f4       	brne	.+2      	; 0x12a2 <xQueueReceive+0x124>
    12a0:	82 cf       	rjmp	.-252    	; 0x11a6 <xQueueReceive+0x28>
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	29 96       	adiw	r28, 0x09	; 9
    12a6:	cd bf       	out	0x3d, r28	; 61
    12a8:	de bf       	out	0x3e, r29	; 62
    12aa:	df 91       	pop	r29
    12ac:	cf 91       	pop	r28
    12ae:	1f 91       	pop	r17
    12b0:	0f 91       	pop	r16
    12b2:	ff 90       	pop	r15
    12b4:	ef 90       	pop	r14
    12b6:	df 90       	pop	r13
    12b8:	cf 90       	pop	r12
    12ba:	08 95       	ret

000012bc <uxQueueMessagesWaiting>:
    12bc:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    12c0:	ff 93       	push	r31
    12c2:	f8 7f       	andi	r31, 0xF8	; 248
    12c4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    12c8:	fc 01       	movw	r30, r24
    12ca:	86 8d       	ldd	r24, Z+30	; 0x1e
    12cc:	ff 91       	pop	r31
    12ce:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    12d2:	08 95       	ret

000012d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	ec 01       	movw	r28, r24
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    12da:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    12de:	ff 93       	push	r31
    12e0:	f8 7f       	andi	r31, 0xF8	; 248
    12e2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    12e6:	89 a1       	ldd	r24, Y+33	; 0x21
    12e8:	8f 3f       	cpi	r24, 0xFF	; 255
    12ea:	09 f4       	brne	.+2      	; 0x12ee <vQueueWaitForMessageRestricted+0x1a>
    12ec:	19 a2       	std	Y+33, r1	; 0x21
    12ee:	8a a1       	ldd	r24, Y+34	; 0x22
    12f0:	8f 3f       	cpi	r24, 0xFF	; 255
    12f2:	09 f4       	brne	.+2      	; 0x12f6 <vQueueWaitForMessageRestricted+0x22>
    12f4:	1a a2       	std	Y+34, r1	; 0x22
    12f6:	ff 91       	pop	r31
    12f8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    12fc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12fe:	81 11       	cpse	r24, r1
    1300:	04 c0       	rjmp	.+8      	; 0x130a <vQueueWaitForMessageRestricted+0x36>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1302:	ce 01       	movw	r24, r28
    1304:	43 96       	adiw	r24, 0x13	; 19
    1306:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    130a:	ce 01       	movw	r24, r28
    130c:	0e 94 10 07 	call	0xe20	; 0xe20 <prvUnlockQueue>
	}
    1310:	df 91       	pop	r29
    1312:	cf 91       	pop	r28
    1314:	08 95       	ret

00001316 <prvResetNextTaskUnblockTime>:
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;

		return xReturn;
	}
    1316:	e0 91 34 2c 	lds	r30, 0x2C34	; 0x802c34 <pxDelayedTaskList>
    131a:	f0 91 35 2c 	lds	r31, 0x2C35	; 0x802c35 <pxDelayedTaskList+0x1>
    131e:	80 81       	ld	r24, Z
    1320:	81 11       	cpse	r24, r1
    1322:	0c c0       	rjmp	.+24     	; 0x133c <prvResetNextTaskUnblockTime+0x26>
    1324:	8f ef       	ldi	r24, 0xFF	; 255
    1326:	9f ef       	ldi	r25, 0xFF	; 255
    1328:	dc 01       	movw	r26, r24
    132a:	80 93 0d 2c 	sts	0x2C0D, r24	; 0x802c0d <xNextTaskUnblockTime>
    132e:	90 93 0e 2c 	sts	0x2C0E, r25	; 0x802c0e <xNextTaskUnblockTime+0x1>
    1332:	a0 93 0f 2c 	sts	0x2C0F, r26	; 0x802c0f <xNextTaskUnblockTime+0x2>
    1336:	b0 93 10 2c 	sts	0x2C10, r27	; 0x802c10 <xNextTaskUnblockTime+0x3>
    133a:	08 95       	ret
    133c:	e0 91 34 2c 	lds	r30, 0x2C34	; 0x802c34 <pxDelayedTaskList>
    1340:	f0 91 35 2c 	lds	r31, 0x2C35	; 0x802c35 <pxDelayedTaskList+0x1>
    1344:	07 80       	ldd	r0, Z+7	; 0x07
    1346:	f0 85       	ldd	r31, Z+8	; 0x08
    1348:	e0 2d       	mov	r30, r0
    134a:	00 84       	ldd	r0, Z+8	; 0x08
    134c:	f1 85       	ldd	r31, Z+9	; 0x09
    134e:	e0 2d       	mov	r30, r0
    1350:	82 81       	ldd	r24, Z+2	; 0x02
    1352:	93 81       	ldd	r25, Z+3	; 0x03
    1354:	a4 81       	ldd	r26, Z+4	; 0x04
    1356:	b5 81       	ldd	r27, Z+5	; 0x05
    1358:	80 93 0d 2c 	sts	0x2C0D, r24	; 0x802c0d <xNextTaskUnblockTime>
    135c:	90 93 0e 2c 	sts	0x2C0E, r25	; 0x802c0e <xNextTaskUnblockTime+0x1>
    1360:	a0 93 0f 2c 	sts	0x2C0F, r26	; 0x802c0f <xNextTaskUnblockTime+0x2>
    1364:	b0 93 10 2c 	sts	0x2C10, r27	; 0x802c10 <xNextTaskUnblockTime+0x3>
    1368:	08 95       	ret

0000136a <prvInitialiseNewTask>:
    136a:	2f 92       	push	r2
    136c:	3f 92       	push	r3
    136e:	4f 92       	push	r4
    1370:	5f 92       	push	r5
    1372:	6f 92       	push	r6
    1374:	7f 92       	push	r7
    1376:	8f 92       	push	r8
    1378:	9f 92       	push	r9
    137a:	af 92       	push	r10
    137c:	bf 92       	push	r11
    137e:	cf 92       	push	r12
    1380:	df 92       	push	r13
    1382:	ef 92       	push	r14
    1384:	0f 93       	push	r16
    1386:	1f 93       	push	r17
    1388:	cf 93       	push	r28
    138a:	df 93       	push	r29
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
    1390:	1c 01       	movw	r2, r24
    1392:	4b 01       	movw	r8, r22
    1394:	29 01       	movw	r4, r18
    1396:	3a 01       	movw	r6, r20
    1398:	a9 01       	movw	r20, r18
    139a:	65 ea       	ldi	r22, 0xA5	; 165
    139c:	70 e0       	ldi	r23, 0x00	; 0
    139e:	f5 01       	movw	r30, r10
    13a0:	83 8d       	ldd	r24, Z+27	; 0x1b
    13a2:	94 8d       	ldd	r25, Z+28	; 0x1c
    13a4:	0e 94 ce 1c 	call	0x399c	; 0x399c <memset>
    13a8:	f5 01       	movw	r30, r10
    13aa:	83 8d       	ldd	r24, Z+27	; 0x1b
    13ac:	94 8d       	ldd	r25, Z+28	; 0x1c
    13ae:	f1 e0       	ldi	r31, 0x01	; 1
    13b0:	4f 1a       	sub	r4, r31
    13b2:	51 08       	sbc	r5, r1
    13b4:	48 0e       	add	r4, r24
    13b6:	59 1e       	adc	r5, r25
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	0f c0       	rjmp	.+30     	; 0x13da <prvInitialiseNewTask+0x70>
    13bc:	82 2f       	mov	r24, r18
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	f4 01       	movw	r30, r8
    13c2:	e8 0f       	add	r30, r24
    13c4:	f9 1f       	adc	r31, r25
    13c6:	30 81       	ld	r19, Z
    13c8:	d5 01       	movw	r26, r10
    13ca:	a8 0f       	add	r26, r24
    13cc:	b9 1f       	adc	r27, r25
    13ce:	5d 96       	adiw	r26, 0x1d	; 29
    13d0:	3c 93       	st	X, r19
    13d2:	80 81       	ld	r24, Z
    13d4:	88 23       	and	r24, r24
    13d6:	19 f0       	breq	.+6      	; 0x13de <prvInitialiseNewTask+0x74>
    13d8:	2f 5f       	subi	r18, 0xFF	; 255
    13da:	28 30       	cpi	r18, 0x08	; 8
    13dc:	78 f3       	brcs	.-34     	; 0x13bc <prvInitialiseNewTask+0x52>
    13de:	f5 01       	movw	r30, r10
    13e0:	14 a2       	std	Z+36, r1	; 0x24
    13e2:	f3 e0       	ldi	r31, 0x03	; 3
    13e4:	fe 15       	cp	r31, r14
    13e6:	20 f4       	brcc	.+8      	; 0x13f0 <prvInitialiseNewTask+0x86>
    13e8:	0f 2e       	mov	r0, r31
    13ea:	f3 e0       	ldi	r31, 0x03	; 3
    13ec:	ef 2e       	mov	r14, r31
    13ee:	f0 2d       	mov	r31, r0
    13f0:	f5 01       	movw	r30, r10
    13f2:	e2 8e       	std	Z+26, r14	; 0x1a
    13f4:	c5 01       	movw	r24, r10
    13f6:	02 96       	adiw	r24, 0x02	; 2
    13f8:	0e 94 4c 04 	call	0x898	; 0x898 <vListInitialiseItem>
    13fc:	c5 01       	movw	r24, r10
    13fe:	0e 96       	adiw	r24, 0x0e	; 14
    1400:	0e 94 4c 04 	call	0x898	; 0x898 <vListInitialiseItem>
    1404:	f5 01       	movw	r30, r10
    1406:	a2 86       	std	Z+10, r10	; 0x0a
    1408:	b3 86       	std	Z+11, r11	; 0x0b
    140a:	84 e0       	ldi	r24, 0x04	; 4
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	a0 e0       	ldi	r26, 0x00	; 0
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	8e 19       	sub	r24, r14
    1414:	91 09       	sbc	r25, r1
    1416:	a1 09       	sbc	r26, r1
    1418:	b1 09       	sbc	r27, r1
    141a:	86 87       	std	Z+14, r24	; 0x0e
    141c:	97 87       	std	Z+15, r25	; 0x0f
    141e:	a0 8b       	std	Z+16, r26	; 0x10
    1420:	b1 8b       	std	Z+17, r27	; 0x11
    1422:	a6 8a       	std	Z+22, r10	; 0x16
    1424:	b7 8a       	std	Z+23, r11	; 0x17
    1426:	17 a2       	std	Z+39, r1	; 0x27
    1428:	10 a6       	std	Z+40, r1	; 0x28
    142a:	11 a6       	std	Z+41, r1	; 0x29
    142c:	12 a6       	std	Z+42, r1	; 0x2a
    142e:	13 a6       	std	Z+43, r1	; 0x2b
    1430:	a8 01       	movw	r20, r16
    1432:	b1 01       	movw	r22, r2
    1434:	c2 01       	movw	r24, r4
    1436:	0e 94 f7 04 	call	0x9ee	; 0x9ee <pxPortInitialiseStack>
    143a:	f5 01       	movw	r30, r10
    143c:	80 83       	st	Z, r24
    143e:	91 83       	std	Z+1, r25	; 0x01
    1440:	c1 14       	cp	r12, r1
    1442:	d1 04       	cpc	r13, r1
    1444:	19 f0       	breq	.+6      	; 0x144c <prvInitialiseNewTask+0xe2>
    1446:	f6 01       	movw	r30, r12
    1448:	a0 82       	st	Z, r10
    144a:	b1 82       	std	Z+1, r11	; 0x01
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	1f 91       	pop	r17
    1452:	0f 91       	pop	r16
    1454:	ef 90       	pop	r14
    1456:	df 90       	pop	r13
    1458:	cf 90       	pop	r12
    145a:	bf 90       	pop	r11
    145c:	af 90       	pop	r10
    145e:	9f 90       	pop	r9
    1460:	8f 90       	pop	r8
    1462:	7f 90       	pop	r7
    1464:	6f 90       	pop	r6
    1466:	5f 90       	pop	r5
    1468:	4f 90       	pop	r4
    146a:	3f 90       	pop	r3
    146c:	2f 90       	pop	r2
    146e:	08 95       	ret

00001470 <prvInitialiseTaskLists>:
    1470:	cf 93       	push	r28
    1472:	c0 e0       	ldi	r28, 0x00	; 0
    1474:	09 c0       	rjmp	.+18     	; 0x1488 <prvInitialiseTaskLists+0x18>
    1476:	2b e0       	ldi	r18, 0x0B	; 11
    1478:	c2 9f       	mul	r28, r18
    147a:	c0 01       	movw	r24, r0
    147c:	11 24       	eor	r1, r1
    147e:	84 5b       	subi	r24, 0xB4	; 180
    1480:	93 4d       	sbci	r25, 0xD3	; 211
    1482:	0e 94 3b 04 	call	0x876	; 0x876 <vListInitialise>
    1486:	cf 5f       	subi	r28, 0xFF	; 255
    1488:	c4 30       	cpi	r28, 0x04	; 4
    148a:	a8 f3       	brcs	.-22     	; 0x1476 <prvInitialiseTaskLists+0x6>
    148c:	81 e4       	ldi	r24, 0x41	; 65
    148e:	9c e2       	ldi	r25, 0x2C	; 44
    1490:	0e 94 3b 04 	call	0x876	; 0x876 <vListInitialise>
    1494:	86 e3       	ldi	r24, 0x36	; 54
    1496:	9c e2       	ldi	r25, 0x2C	; 44
    1498:	0e 94 3b 04 	call	0x876	; 0x876 <vListInitialise>
    149c:	87 e2       	ldi	r24, 0x27	; 39
    149e:	9c e2       	ldi	r25, 0x2C	; 44
    14a0:	0e 94 3b 04 	call	0x876	; 0x876 <vListInitialise>
    14a4:	8c e1       	ldi	r24, 0x1C	; 28
    14a6:	9c e2       	ldi	r25, 0x2C	; 44
    14a8:	0e 94 3b 04 	call	0x876	; 0x876 <vListInitialise>
    14ac:	81 e4       	ldi	r24, 0x41	; 65
    14ae:	9c e2       	ldi	r25, 0x2C	; 44
    14b0:	80 93 34 2c 	sts	0x2C34, r24	; 0x802c34 <pxDelayedTaskList>
    14b4:	90 93 35 2c 	sts	0x2C35, r25	; 0x802c35 <pxDelayedTaskList+0x1>
    14b8:	86 e3       	ldi	r24, 0x36	; 54
    14ba:	9c e2       	ldi	r25, 0x2C	; 44
    14bc:	80 93 32 2c 	sts	0x2C32, r24	; 0x802c32 <pxOverflowDelayedTaskList>
    14c0:	90 93 33 2c 	sts	0x2C33, r25	; 0x802c33 <pxOverflowDelayedTaskList+0x1>
    14c4:	cf 91       	pop	r28
    14c6:	08 95       	ret

000014c8 <prvAddNewTaskToReadyList>:
    14c8:	cf 93       	push	r28
    14ca:	df 93       	push	r29
    14cc:	ec 01       	movw	r28, r24
    14ce:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    14d2:	ff 93       	push	r31
    14d4:	f8 7f       	andi	r31, 0xF8	; 248
    14d6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    14da:	80 91 1b 2c 	lds	r24, 0x2C1B	; 0x802c1b <uxCurrentNumberOfTasks>
    14de:	8f 5f       	subi	r24, 0xFF	; 255
    14e0:	80 93 1b 2c 	sts	0x2C1B, r24	; 0x802c1b <uxCurrentNumberOfTasks>
    14e4:	80 91 78 2c 	lds	r24, 0x2C78	; 0x802c78 <pxCurrentTCB>
    14e8:	90 91 79 2c 	lds	r25, 0x2C79	; 0x802c79 <pxCurrentTCB+0x1>
    14ec:	89 2b       	or	r24, r25
    14ee:	59 f4       	brne	.+22     	; 0x1506 <prvAddNewTaskToReadyList+0x3e>
    14f0:	c0 93 78 2c 	sts	0x2C78, r28	; 0x802c78 <pxCurrentTCB>
    14f4:	d0 93 79 2c 	sts	0x2C79, r29	; 0x802c79 <pxCurrentTCB+0x1>
    14f8:	80 91 1b 2c 	lds	r24, 0x2C1B	; 0x802c1b <uxCurrentNumberOfTasks>
    14fc:	81 30       	cpi	r24, 0x01	; 1
    14fe:	99 f4       	brne	.+38     	; 0x1526 <prvAddNewTaskToReadyList+0x5e>
    1500:	0e 94 38 0a 	call	0x1470	; 0x1470 <prvInitialiseTaskLists>
    1504:	10 c0       	rjmp	.+32     	; 0x1526 <prvAddNewTaskToReadyList+0x5e>
    1506:	80 91 15 2c 	lds	r24, 0x2C15	; 0x802c15 <xSchedulerRunning>
    150a:	81 11       	cpse	r24, r1
    150c:	0c c0       	rjmp	.+24     	; 0x1526 <prvAddNewTaskToReadyList+0x5e>
    150e:	e0 91 78 2c 	lds	r30, 0x2C78	; 0x802c78 <pxCurrentTCB>
    1512:	f0 91 79 2c 	lds	r31, 0x2C79	; 0x802c79 <pxCurrentTCB+0x1>
    1516:	92 8d       	ldd	r25, Z+26	; 0x1a
    1518:	8a 8d       	ldd	r24, Y+26	; 0x1a
    151a:	89 17       	cp	r24, r25
    151c:	20 f0       	brcs	.+8      	; 0x1526 <prvAddNewTaskToReadyList+0x5e>
    151e:	c0 93 78 2c 	sts	0x2C78, r28	; 0x802c78 <pxCurrentTCB>
    1522:	d0 93 79 2c 	sts	0x2C79, r29	; 0x802c79 <pxCurrentTCB+0x1>
    1526:	80 91 11 2c 	lds	r24, 0x2C11	; 0x802c11 <uxTaskNumber>
    152a:	8f 5f       	subi	r24, 0xFF	; 255
    152c:	80 93 11 2c 	sts	0x2C11, r24	; 0x802c11 <uxTaskNumber>
    1530:	8d a3       	std	Y+37, r24	; 0x25
    1532:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1534:	90 91 16 2c 	lds	r25, 0x2C16	; 0x802c16 <uxTopReadyPriority>
    1538:	98 17       	cp	r25, r24
    153a:	10 f4       	brcc	.+4      	; 0x1540 <prvAddNewTaskToReadyList+0x78>
    153c:	80 93 16 2c 	sts	0x2C16, r24	; 0x802c16 <uxTopReadyPriority>
    1540:	2b e0       	ldi	r18, 0x0B	; 11
    1542:	82 9f       	mul	r24, r18
    1544:	c0 01       	movw	r24, r0
    1546:	11 24       	eor	r1, r1
    1548:	be 01       	movw	r22, r28
    154a:	6e 5f       	subi	r22, 0xFE	; 254
    154c:	7f 4f       	sbci	r23, 0xFF	; 255
    154e:	84 5b       	subi	r24, 0xB4	; 180
    1550:	93 4d       	sbci	r25, 0xD3	; 211
    1552:	0e 94 50 04 	call	0x8a0	; 0x8a0 <vListInsertEnd>
    1556:	ff 91       	pop	r31
    1558:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    155c:	80 91 15 2c 	lds	r24, 0x2C15	; 0x802c15 <xSchedulerRunning>
    1560:	88 23       	and	r24, r24
    1562:	51 f0       	breq	.+20     	; 0x1578 <prvAddNewTaskToReadyList+0xb0>
    1564:	e0 91 78 2c 	lds	r30, 0x2C78	; 0x802c78 <pxCurrentTCB>
    1568:	f0 91 79 2c 	lds	r31, 0x2C79	; 0x802c79 <pxCurrentTCB+0x1>
    156c:	92 8d       	ldd	r25, Z+26	; 0x1a
    156e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1570:	98 17       	cp	r25, r24
    1572:	10 f4       	brcc	.+4      	; 0x1578 <prvAddNewTaskToReadyList+0xb0>
    1574:	0e 94 a6 05 	call	0xb4c	; 0xb4c <vPortYield>
    1578:	df 91       	pop	r29
    157a:	cf 91       	pop	r28
    157c:	08 95       	ret

0000157e <prvAddCurrentTaskToDelayedList>:
    157e:	8f 92       	push	r8
    1580:	9f 92       	push	r9
    1582:	af 92       	push	r10
    1584:	bf 92       	push	r11
    1586:	cf 92       	push	r12
    1588:	df 92       	push	r13
    158a:	ef 92       	push	r14
    158c:	ff 92       	push	r15
    158e:	cf 93       	push	r28
    1590:	6b 01       	movw	r12, r22
    1592:	7c 01       	movw	r14, r24
    1594:	c4 2f       	mov	r28, r20
    1596:	80 90 17 2c 	lds	r8, 0x2C17	; 0x802c17 <xTickCount>
    159a:	90 90 18 2c 	lds	r9, 0x2C18	; 0x802c18 <xTickCount+0x1>
    159e:	a0 90 19 2c 	lds	r10, 0x2C19	; 0x802c19 <xTickCount+0x2>
    15a2:	b0 90 1a 2c 	lds	r11, 0x2C1A	; 0x802c1a <xTickCount+0x3>
    15a6:	80 91 78 2c 	lds	r24, 0x2C78	; 0x802c78 <pxCurrentTCB>
    15aa:	90 91 79 2c 	lds	r25, 0x2C79	; 0x802c79 <pxCurrentTCB+0x1>
    15ae:	02 96       	adiw	r24, 0x02	; 2
    15b0:	0e 94 ae 04 	call	0x95c	; 0x95c <uxListRemove>
    15b4:	8f ef       	ldi	r24, 0xFF	; 255
    15b6:	c8 16       	cp	r12, r24
    15b8:	d8 06       	cpc	r13, r24
    15ba:	e8 06       	cpc	r14, r24
    15bc:	f8 06       	cpc	r15, r24
    15be:	69 f4       	brne	.+26     	; 0x15da <prvAddCurrentTaskToDelayedList+0x5c>
    15c0:	cc 23       	and	r28, r28
    15c2:	59 f0       	breq	.+22     	; 0x15da <prvAddCurrentTaskToDelayedList+0x5c>
    15c4:	60 91 78 2c 	lds	r22, 0x2C78	; 0x802c78 <pxCurrentTCB>
    15c8:	70 91 79 2c 	lds	r23, 0x2C79	; 0x802c79 <pxCurrentTCB+0x1>
    15cc:	6e 5f       	subi	r22, 0xFE	; 254
    15ce:	7f 4f       	sbci	r23, 0xFF	; 255
    15d0:	8c e1       	ldi	r24, 0x1C	; 28
    15d2:	9c e2       	ldi	r25, 0x2C	; 44
    15d4:	0e 94 50 04 	call	0x8a0	; 0x8a0 <vListInsertEnd>
    15d8:	3f c0       	rjmp	.+126    	; 0x1658 <prvAddCurrentTaskToDelayedList+0xda>
    15da:	c8 0c       	add	r12, r8
    15dc:	d9 1c       	adc	r13, r9
    15de:	ea 1c       	adc	r14, r10
    15e0:	fb 1c       	adc	r15, r11
    15e2:	e0 91 78 2c 	lds	r30, 0x2C78	; 0x802c78 <pxCurrentTCB>
    15e6:	f0 91 79 2c 	lds	r31, 0x2C79	; 0x802c79 <pxCurrentTCB+0x1>
    15ea:	c2 82       	std	Z+2, r12	; 0x02
    15ec:	d3 82       	std	Z+3, r13	; 0x03
    15ee:	e4 82       	std	Z+4, r14	; 0x04
    15f0:	f5 82       	std	Z+5, r15	; 0x05
    15f2:	c8 14       	cp	r12, r8
    15f4:	d9 04       	cpc	r13, r9
    15f6:	ea 04       	cpc	r14, r10
    15f8:	fb 04       	cpc	r15, r11
    15fa:	68 f4       	brcc	.+26     	; 0x1616 <prvAddCurrentTaskToDelayedList+0x98>
    15fc:	60 91 78 2c 	lds	r22, 0x2C78	; 0x802c78 <pxCurrentTCB>
    1600:	70 91 79 2c 	lds	r23, 0x2C79	; 0x802c79 <pxCurrentTCB+0x1>
    1604:	80 91 32 2c 	lds	r24, 0x2C32	; 0x802c32 <pxOverflowDelayedTaskList>
    1608:	90 91 33 2c 	lds	r25, 0x2C33	; 0x802c33 <pxOverflowDelayedTaskList+0x1>
    160c:	6e 5f       	subi	r22, 0xFE	; 254
    160e:	7f 4f       	sbci	r23, 0xFF	; 255
    1610:	0e 94 71 04 	call	0x8e2	; 0x8e2 <vListInsert>
    1614:	21 c0       	rjmp	.+66     	; 0x1658 <prvAddCurrentTaskToDelayedList+0xda>
    1616:	60 91 78 2c 	lds	r22, 0x2C78	; 0x802c78 <pxCurrentTCB>
    161a:	70 91 79 2c 	lds	r23, 0x2C79	; 0x802c79 <pxCurrentTCB+0x1>
    161e:	80 91 34 2c 	lds	r24, 0x2C34	; 0x802c34 <pxDelayedTaskList>
    1622:	90 91 35 2c 	lds	r25, 0x2C35	; 0x802c35 <pxDelayedTaskList+0x1>
    1626:	6e 5f       	subi	r22, 0xFE	; 254
    1628:	7f 4f       	sbci	r23, 0xFF	; 255
    162a:	0e 94 71 04 	call	0x8e2	; 0x8e2 <vListInsert>
    162e:	80 91 0d 2c 	lds	r24, 0x2C0D	; 0x802c0d <xNextTaskUnblockTime>
    1632:	90 91 0e 2c 	lds	r25, 0x2C0E	; 0x802c0e <xNextTaskUnblockTime+0x1>
    1636:	a0 91 0f 2c 	lds	r26, 0x2C0F	; 0x802c0f <xNextTaskUnblockTime+0x2>
    163a:	b0 91 10 2c 	lds	r27, 0x2C10	; 0x802c10 <xNextTaskUnblockTime+0x3>
    163e:	c8 16       	cp	r12, r24
    1640:	d9 06       	cpc	r13, r25
    1642:	ea 06       	cpc	r14, r26
    1644:	fb 06       	cpc	r15, r27
    1646:	40 f4       	brcc	.+16     	; 0x1658 <prvAddCurrentTaskToDelayedList+0xda>
    1648:	c0 92 0d 2c 	sts	0x2C0D, r12	; 0x802c0d <xNextTaskUnblockTime>
    164c:	d0 92 0e 2c 	sts	0x2C0E, r13	; 0x802c0e <xNextTaskUnblockTime+0x1>
    1650:	e0 92 0f 2c 	sts	0x2C0F, r14	; 0x802c0f <xNextTaskUnblockTime+0x2>
    1654:	f0 92 10 2c 	sts	0x2C10, r15	; 0x802c10 <xNextTaskUnblockTime+0x3>
    1658:	cf 91       	pop	r28
    165a:	ff 90       	pop	r15
    165c:	ef 90       	pop	r14
    165e:	df 90       	pop	r13
    1660:	cf 90       	pop	r12
    1662:	bf 90       	pop	r11
    1664:	af 90       	pop	r10
    1666:	9f 90       	pop	r9
    1668:	8f 90       	pop	r8
    166a:	08 95       	ret

0000166c <prvIdleTask>:
    166c:	80 91 4c 2c 	lds	r24, 0x2C4C	; 0x802c4c <pxReadyTasksLists>
    1670:	82 30       	cpi	r24, 0x02	; 2
    1672:	10 f0       	brcs	.+4      	; 0x1678 <prvIdleTask+0xc>
    1674:	0e 94 a6 05 	call	0xb4c	; 0xb4c <vPortYield>
    1678:	0e 94 87 13 	call	0x270e	; 0x270e <vApplicationIdleHook>
    167c:	f7 cf       	rjmp	.-18     	; 0x166c <prvIdleTask>

0000167e <xTaskCreate>:
    167e:	2f 92       	push	r2
    1680:	3f 92       	push	r3
    1682:	4f 92       	push	r4
    1684:	5f 92       	push	r5
    1686:	6f 92       	push	r6
    1688:	7f 92       	push	r7
    168a:	8f 92       	push	r8
    168c:	9f 92       	push	r9
    168e:	af 92       	push	r10
    1690:	bf 92       	push	r11
    1692:	cf 92       	push	r12
    1694:	df 92       	push	r13
    1696:	ef 92       	push	r14
    1698:	ff 92       	push	r15
    169a:	0f 93       	push	r16
    169c:	1f 93       	push	r17
    169e:	cf 93       	push	r28
    16a0:	df 93       	push	r29
    16a2:	3c 01       	movw	r6, r24
    16a4:	1b 01       	movw	r2, r22
    16a6:	5a 01       	movw	r10, r20
    16a8:	29 01       	movw	r4, r18
    16aa:	ca 01       	movw	r24, r20
    16ac:	0e 94 14 04 	call	0x828	; 0x828 <pvPortMalloc>
    16b0:	6c 01       	movw	r12, r24
    16b2:	89 2b       	or	r24, r25
    16b4:	71 f0       	breq	.+28     	; 0x16d2 <xTaskCreate+0x54>
    16b6:	8c e2       	ldi	r24, 0x2C	; 44
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	0e 94 14 04 	call	0x828	; 0x828 <pvPortMalloc>
    16be:	ec 01       	movw	r28, r24
    16c0:	89 2b       	or	r24, r25
    16c2:	19 f0       	breq	.+6      	; 0x16ca <xTaskCreate+0x4c>
    16c4:	cb 8e       	std	Y+27, r12	; 0x1b
    16c6:	dc 8e       	std	Y+28, r13	; 0x1c
    16c8:	06 c0       	rjmp	.+12     	; 0x16d6 <xTaskCreate+0x58>
    16ca:	c6 01       	movw	r24, r12
    16cc:	0e 94 3a 04 	call	0x874	; 0x874 <vPortFree>
    16d0:	02 c0       	rjmp	.+4      	; 0x16d6 <xTaskCreate+0x58>
    16d2:	c0 e0       	ldi	r28, 0x00	; 0
    16d4:	d0 e0       	ldi	r29, 0x00	; 0
    16d6:	20 97       	sbiw	r28, 0x00	; 0
    16d8:	91 f0       	breq	.+36     	; 0x16fe <xTaskCreate+0x80>
    16da:	95 01       	movw	r18, r10
    16dc:	40 e0       	ldi	r20, 0x00	; 0
    16de:	50 e0       	ldi	r21, 0x00	; 0
    16e0:	81 2c       	mov	r8, r1
    16e2:	91 2c       	mov	r9, r1
    16e4:	5e 01       	movw	r10, r28
    16e6:	67 01       	movw	r12, r14
    16e8:	e0 2e       	mov	r14, r16
    16ea:	82 01       	movw	r16, r4
    16ec:	b1 01       	movw	r22, r2
    16ee:	c3 01       	movw	r24, r6
    16f0:	0e 94 b5 09 	call	0x136a	; 0x136a <prvInitialiseNewTask>
    16f4:	ce 01       	movw	r24, r28
    16f6:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <prvAddNewTaskToReadyList>
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	01 c0       	rjmp	.+2      	; 0x1700 <xTaskCreate+0x82>
    16fe:	8f ef       	ldi	r24, 0xFF	; 255
    1700:	df 91       	pop	r29
    1702:	cf 91       	pop	r28
    1704:	1f 91       	pop	r17
    1706:	0f 91       	pop	r16
    1708:	ff 90       	pop	r15
    170a:	ef 90       	pop	r14
    170c:	df 90       	pop	r13
    170e:	cf 90       	pop	r12
    1710:	bf 90       	pop	r11
    1712:	af 90       	pop	r10
    1714:	9f 90       	pop	r9
    1716:	8f 90       	pop	r8
    1718:	7f 90       	pop	r7
    171a:	6f 90       	pop	r6
    171c:	5f 90       	pop	r5
    171e:	4f 90       	pop	r4
    1720:	3f 90       	pop	r3
    1722:	2f 90       	pop	r2
    1724:	08 95       	ret

00001726 <vTaskStartScheduler>:
    1726:	ef 92       	push	r14
    1728:	ff 92       	push	r15
    172a:	0f 93       	push	r16
    172c:	0f 2e       	mov	r0, r31
    172e:	fb e0       	ldi	r31, 0x0B	; 11
    1730:	ef 2e       	mov	r14, r31
    1732:	fc e2       	ldi	r31, 0x2C	; 44
    1734:	ff 2e       	mov	r15, r31
    1736:	f0 2d       	mov	r31, r0
    1738:	00 e0       	ldi	r16, 0x00	; 0
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	48 ec       	ldi	r20, 0xC8	; 200
    1740:	50 e0       	ldi	r21, 0x00	; 0
    1742:	60 e0       	ldi	r22, 0x00	; 0
    1744:	70 e2       	ldi	r23, 0x20	; 32
    1746:	86 e3       	ldi	r24, 0x36	; 54
    1748:	9b e0       	ldi	r25, 0x0B	; 11
    174a:	0e 94 3f 0b 	call	0x167e	; 0x167e <xTaskCreate>
    174e:	81 30       	cpi	r24, 0x01	; 1
    1750:	11 f4       	brne	.+4      	; 0x1756 <vTaskStartScheduler+0x30>
    1752:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <xTimerCreateTimerTask>
    1756:	81 30       	cpi	r24, 0x01	; 1
    1758:	e9 f4       	brne	.+58     	; 0x1794 <vTaskStartScheduler+0x6e>
    175a:	e0 ea       	ldi	r30, 0xA0	; 160
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	82 81       	ldd	r24, Z+2	; 0x02
    1760:	88 7f       	andi	r24, 0xF8	; 248
    1762:	82 83       	std	Z+2, r24	; 0x02
    1764:	8f ef       	ldi	r24, 0xFF	; 255
    1766:	9f ef       	ldi	r25, 0xFF	; 255
    1768:	dc 01       	movw	r26, r24
    176a:	80 93 0d 2c 	sts	0x2C0D, r24	; 0x802c0d <xNextTaskUnblockTime>
    176e:	90 93 0e 2c 	sts	0x2C0E, r25	; 0x802c0e <xNextTaskUnblockTime+0x1>
    1772:	a0 93 0f 2c 	sts	0x2C0F, r26	; 0x802c0f <xNextTaskUnblockTime+0x2>
    1776:	b0 93 10 2c 	sts	0x2C10, r27	; 0x802c10 <xNextTaskUnblockTime+0x3>
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	80 93 15 2c 	sts	0x2C15, r24	; 0x802c15 <xSchedulerRunning>
    1780:	10 92 17 2c 	sts	0x2C17, r1	; 0x802c17 <xTickCount>
    1784:	10 92 18 2c 	sts	0x2C18, r1	; 0x802c18 <xTickCount+0x1>
    1788:	10 92 19 2c 	sts	0x2C19, r1	; 0x802c19 <xTickCount+0x2>
    178c:	10 92 1a 2c 	sts	0x2C1A, r1	; 0x802c1a <xTickCount+0x3>
    1790:	0e 94 74 05 	call	0xae8	; 0xae8 <xPortStartScheduler>
    1794:	0f 91       	pop	r16
    1796:	ff 90       	pop	r15
    1798:	ef 90       	pop	r14
    179a:	08 95       	ret

0000179c <vTaskSuspendAll>:
    179c:	80 91 0a 2c 	lds	r24, 0x2C0A	; 0x802c0a <uxSchedulerSuspended>
    17a0:	8f 5f       	subi	r24, 0xFF	; 255
    17a2:	80 93 0a 2c 	sts	0x2C0A, r24	; 0x802c0a <uxSchedulerSuspended>
    17a6:	08 95       	ret

000017a8 <xTaskGetTickCount>:
    17a8:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    17ac:	ff 93       	push	r31
    17ae:	f8 7f       	andi	r31, 0xF8	; 248
    17b0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    17b4:	60 91 17 2c 	lds	r22, 0x2C17	; 0x802c17 <xTickCount>
    17b8:	70 91 18 2c 	lds	r23, 0x2C18	; 0x802c18 <xTickCount+0x1>
    17bc:	80 91 19 2c 	lds	r24, 0x2C19	; 0x802c19 <xTickCount+0x2>
    17c0:	90 91 1a 2c 	lds	r25, 0x2C1A	; 0x802c1a <xTickCount+0x3>
    17c4:	ff 91       	pop	r31
    17c6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    17ca:	08 95       	ret

000017cc <xTaskIncrementTick>:
    17cc:	bf 92       	push	r11
    17ce:	cf 92       	push	r12
    17d0:	df 92       	push	r13
    17d2:	ef 92       	push	r14
    17d4:	ff 92       	push	r15
    17d6:	0f 93       	push	r16
    17d8:	1f 93       	push	r17
    17da:	cf 93       	push	r28
    17dc:	df 93       	push	r29
    17de:	80 91 0a 2c 	lds	r24, 0x2C0A	; 0x802c0a <uxSchedulerSuspended>
    17e2:	81 11       	cpse	r24, r1
    17e4:	a9 c0       	rjmp	.+338    	; 0x1938 <xTaskIncrementTick+0x16c>
    17e6:	c0 90 17 2c 	lds	r12, 0x2C17	; 0x802c17 <xTickCount>
    17ea:	d0 90 18 2c 	lds	r13, 0x2C18	; 0x802c18 <xTickCount+0x1>
    17ee:	e0 90 19 2c 	lds	r14, 0x2C19	; 0x802c19 <xTickCount+0x2>
    17f2:	f0 90 1a 2c 	lds	r15, 0x2C1A	; 0x802c1a <xTickCount+0x3>
    17f6:	2f ef       	ldi	r18, 0xFF	; 255
    17f8:	c2 1a       	sub	r12, r18
    17fa:	d2 0a       	sbc	r13, r18
    17fc:	e2 0a       	sbc	r14, r18
    17fe:	f2 0a       	sbc	r15, r18
    1800:	c0 92 17 2c 	sts	0x2C17, r12	; 0x802c17 <xTickCount>
    1804:	d0 92 18 2c 	sts	0x2C18, r13	; 0x802c18 <xTickCount+0x1>
    1808:	e0 92 19 2c 	sts	0x2C19, r14	; 0x802c19 <xTickCount+0x2>
    180c:	f0 92 1a 2c 	sts	0x2C1A, r15	; 0x802c1a <xTickCount+0x3>
    1810:	c1 14       	cp	r12, r1
    1812:	d1 04       	cpc	r13, r1
    1814:	e1 04       	cpc	r14, r1
    1816:	f1 04       	cpc	r15, r1
    1818:	b9 f4       	brne	.+46     	; 0x1848 <xTaskIncrementTick+0x7c>
    181a:	80 91 34 2c 	lds	r24, 0x2C34	; 0x802c34 <pxDelayedTaskList>
    181e:	90 91 35 2c 	lds	r25, 0x2C35	; 0x802c35 <pxDelayedTaskList+0x1>
    1822:	20 91 32 2c 	lds	r18, 0x2C32	; 0x802c32 <pxOverflowDelayedTaskList>
    1826:	30 91 33 2c 	lds	r19, 0x2C33	; 0x802c33 <pxOverflowDelayedTaskList+0x1>
    182a:	20 93 34 2c 	sts	0x2C34, r18	; 0x802c34 <pxDelayedTaskList>
    182e:	30 93 35 2c 	sts	0x2C35, r19	; 0x802c35 <pxDelayedTaskList+0x1>
    1832:	80 93 32 2c 	sts	0x2C32, r24	; 0x802c32 <pxOverflowDelayedTaskList>
    1836:	90 93 33 2c 	sts	0x2C33, r25	; 0x802c33 <pxOverflowDelayedTaskList+0x1>
    183a:	80 91 12 2c 	lds	r24, 0x2C12	; 0x802c12 <xNumOfOverflows>
    183e:	8f 5f       	subi	r24, 0xFF	; 255
    1840:	80 93 12 2c 	sts	0x2C12, r24	; 0x802c12 <xNumOfOverflows>
    1844:	0e 94 8b 09 	call	0x1316	; 0x1316 <prvResetNextTaskUnblockTime>
    1848:	80 91 0d 2c 	lds	r24, 0x2C0D	; 0x802c0d <xNextTaskUnblockTime>
    184c:	90 91 0e 2c 	lds	r25, 0x2C0E	; 0x802c0e <xNextTaskUnblockTime+0x1>
    1850:	a0 91 0f 2c 	lds	r26, 0x2C0F	; 0x802c0f <xNextTaskUnblockTime+0x2>
    1854:	b0 91 10 2c 	lds	r27, 0x2C10	; 0x802c10 <xNextTaskUnblockTime+0x3>
    1858:	c8 16       	cp	r12, r24
    185a:	d9 06       	cpc	r13, r25
    185c:	ea 06       	cpc	r14, r26
    185e:	fb 06       	cpc	r15, r27
    1860:	28 f4       	brcc	.+10     	; 0x186c <xTaskIncrementTick+0xa0>
    1862:	b1 2c       	mov	r11, r1
    1864:	5a c0       	rjmp	.+180    	; 0x191a <xTaskIncrementTick+0x14e>
    1866:	bb 24       	eor	r11, r11
    1868:	b3 94       	inc	r11
    186a:	01 c0       	rjmp	.+2      	; 0x186e <xTaskIncrementTick+0xa2>
    186c:	b1 2c       	mov	r11, r1
    186e:	e0 91 34 2c 	lds	r30, 0x2C34	; 0x802c34 <pxDelayedTaskList>
    1872:	f0 91 35 2c 	lds	r31, 0x2C35	; 0x802c35 <pxDelayedTaskList+0x1>
    1876:	80 81       	ld	r24, Z
    1878:	81 11       	cpse	r24, r1
    187a:	0c c0       	rjmp	.+24     	; 0x1894 <xTaskIncrementTick+0xc8>
    187c:	8f ef       	ldi	r24, 0xFF	; 255
    187e:	9f ef       	ldi	r25, 0xFF	; 255
    1880:	dc 01       	movw	r26, r24
    1882:	80 93 0d 2c 	sts	0x2C0D, r24	; 0x802c0d <xNextTaskUnblockTime>
    1886:	90 93 0e 2c 	sts	0x2C0E, r25	; 0x802c0e <xNextTaskUnblockTime+0x1>
    188a:	a0 93 0f 2c 	sts	0x2C0F, r26	; 0x802c0f <xNextTaskUnblockTime+0x2>
    188e:	b0 93 10 2c 	sts	0x2C10, r27	; 0x802c10 <xNextTaskUnblockTime+0x3>
    1892:	43 c0       	rjmp	.+134    	; 0x191a <xTaskIncrementTick+0x14e>
    1894:	e0 91 34 2c 	lds	r30, 0x2C34	; 0x802c34 <pxDelayedTaskList>
    1898:	f0 91 35 2c 	lds	r31, 0x2C35	; 0x802c35 <pxDelayedTaskList+0x1>
    189c:	07 80       	ldd	r0, Z+7	; 0x07
    189e:	f0 85       	ldd	r31, Z+8	; 0x08
    18a0:	e0 2d       	mov	r30, r0
    18a2:	c0 85       	ldd	r28, Z+8	; 0x08
    18a4:	d1 85       	ldd	r29, Z+9	; 0x09
    18a6:	8a 81       	ldd	r24, Y+2	; 0x02
    18a8:	9b 81       	ldd	r25, Y+3	; 0x03
    18aa:	ac 81       	ldd	r26, Y+4	; 0x04
    18ac:	bd 81       	ldd	r27, Y+5	; 0x05
    18ae:	c8 16       	cp	r12, r24
    18b0:	d9 06       	cpc	r13, r25
    18b2:	ea 06       	cpc	r14, r26
    18b4:	fb 06       	cpc	r15, r27
    18b6:	48 f4       	brcc	.+18     	; 0x18ca <xTaskIncrementTick+0xfe>
    18b8:	80 93 0d 2c 	sts	0x2C0D, r24	; 0x802c0d <xNextTaskUnblockTime>
    18bc:	90 93 0e 2c 	sts	0x2C0E, r25	; 0x802c0e <xNextTaskUnblockTime+0x1>
    18c0:	a0 93 0f 2c 	sts	0x2C0F, r26	; 0x802c0f <xNextTaskUnblockTime+0x2>
    18c4:	b0 93 10 2c 	sts	0x2C10, r27	; 0x802c10 <xNextTaskUnblockTime+0x3>
    18c8:	28 c0       	rjmp	.+80     	; 0x191a <xTaskIncrementTick+0x14e>
    18ca:	8e 01       	movw	r16, r28
    18cc:	0e 5f       	subi	r16, 0xFE	; 254
    18ce:	1f 4f       	sbci	r17, 0xFF	; 255
    18d0:	c8 01       	movw	r24, r16
    18d2:	0e 94 ae 04 	call	0x95c	; 0x95c <uxListRemove>
    18d6:	88 8d       	ldd	r24, Y+24	; 0x18
    18d8:	99 8d       	ldd	r25, Y+25	; 0x19
    18da:	89 2b       	or	r24, r25
    18dc:	21 f0       	breq	.+8      	; 0x18e6 <xTaskIncrementTick+0x11a>
    18de:	ce 01       	movw	r24, r28
    18e0:	0e 96       	adiw	r24, 0x0e	; 14
    18e2:	0e 94 ae 04 	call	0x95c	; 0x95c <uxListRemove>
    18e6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18e8:	90 91 16 2c 	lds	r25, 0x2C16	; 0x802c16 <uxTopReadyPriority>
    18ec:	98 17       	cp	r25, r24
    18ee:	10 f4       	brcc	.+4      	; 0x18f4 <xTaskIncrementTick+0x128>
    18f0:	80 93 16 2c 	sts	0x2C16, r24	; 0x802c16 <uxTopReadyPriority>
    18f4:	2b e0       	ldi	r18, 0x0B	; 11
    18f6:	82 9f       	mul	r24, r18
    18f8:	c0 01       	movw	r24, r0
    18fa:	11 24       	eor	r1, r1
    18fc:	b8 01       	movw	r22, r16
    18fe:	84 5b       	subi	r24, 0xB4	; 180
    1900:	93 4d       	sbci	r25, 0xD3	; 211
    1902:	0e 94 50 04 	call	0x8a0	; 0x8a0 <vListInsertEnd>
    1906:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1908:	e0 91 78 2c 	lds	r30, 0x2C78	; 0x802c78 <pxCurrentTCB>
    190c:	f0 91 79 2c 	lds	r31, 0x2C79	; 0x802c79 <pxCurrentTCB+0x1>
    1910:	82 8d       	ldd	r24, Z+26	; 0x1a
    1912:	98 17       	cp	r25, r24
    1914:	08 f0       	brcs	.+2      	; 0x1918 <xTaskIncrementTick+0x14c>
    1916:	a7 cf       	rjmp	.-178    	; 0x1866 <xTaskIncrementTick+0x9a>
    1918:	aa cf       	rjmp	.-172    	; 0x186e <xTaskIncrementTick+0xa2>
    191a:	e0 91 78 2c 	lds	r30, 0x2C78	; 0x802c78 <pxCurrentTCB>
    191e:	f0 91 79 2c 	lds	r31, 0x2C79	; 0x802c79 <pxCurrentTCB+0x1>
    1922:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1924:	8b e0       	ldi	r24, 0x0B	; 11
    1926:	e8 9f       	mul	r30, r24
    1928:	f0 01       	movw	r30, r0
    192a:	11 24       	eor	r1, r1
    192c:	e4 5b       	subi	r30, 0xB4	; 180
    192e:	f3 4d       	sbci	r31, 0xD3	; 211
    1930:	80 81       	ld	r24, Z
    1932:	82 30       	cpi	r24, 0x02	; 2
    1934:	40 f4       	brcc	.+16     	; 0x1946 <xTaskIncrementTick+0x17a>
    1936:	09 c0       	rjmp	.+18     	; 0x194a <xTaskIncrementTick+0x17e>
    1938:	80 91 14 2c 	lds	r24, 0x2C14	; 0x802c14 <uxPendedTicks>
    193c:	8f 5f       	subi	r24, 0xFF	; 255
    193e:	80 93 14 2c 	sts	0x2C14, r24	; 0x802c14 <uxPendedTicks>
    1942:	b1 2c       	mov	r11, r1
    1944:	02 c0       	rjmp	.+4      	; 0x194a <xTaskIncrementTick+0x17e>
    1946:	bb 24       	eor	r11, r11
    1948:	b3 94       	inc	r11
    194a:	80 91 13 2c 	lds	r24, 0x2C13	; 0x802c13 <xYieldPending>
    194e:	88 23       	and	r24, r24
    1950:	11 f0       	breq	.+4      	; 0x1956 <xTaskIncrementTick+0x18a>
    1952:	bb 24       	eor	r11, r11
    1954:	b3 94       	inc	r11
    1956:	8b 2d       	mov	r24, r11
    1958:	df 91       	pop	r29
    195a:	cf 91       	pop	r28
    195c:	1f 91       	pop	r17
    195e:	0f 91       	pop	r16
    1960:	ff 90       	pop	r15
    1962:	ef 90       	pop	r14
    1964:	df 90       	pop	r13
    1966:	cf 90       	pop	r12
    1968:	bf 90       	pop	r11
    196a:	08 95       	ret

0000196c <xTaskResumeAll>:
    196c:	0f 93       	push	r16
    196e:	1f 93       	push	r17
    1970:	cf 93       	push	r28
    1972:	df 93       	push	r29
    1974:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1978:	ff 93       	push	r31
    197a:	f8 7f       	andi	r31, 0xF8	; 248
    197c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1980:	80 91 0a 2c 	lds	r24, 0x2C0A	; 0x802c0a <uxSchedulerSuspended>
    1984:	81 50       	subi	r24, 0x01	; 1
    1986:	80 93 0a 2c 	sts	0x2C0A, r24	; 0x802c0a <uxSchedulerSuspended>
    198a:	80 91 0a 2c 	lds	r24, 0x2C0A	; 0x802c0a <uxSchedulerSuspended>
    198e:	81 11       	cpse	r24, r1
    1990:	52 c0       	rjmp	.+164    	; 0x1a36 <xTaskResumeAll+0xca>
    1992:	80 91 1b 2c 	lds	r24, 0x2C1B	; 0x802c1b <uxCurrentNumberOfTasks>
    1996:	81 11       	cpse	r24, r1
    1998:	2d c0       	rjmp	.+90     	; 0x19f4 <xTaskResumeAll+0x88>
    199a:	50 c0       	rjmp	.+160    	; 0x1a3c <xTaskResumeAll+0xd0>
    199c:	e0 91 2e 2c 	lds	r30, 0x2C2E	; 0x802c2e <xPendingReadyList+0x7>
    19a0:	f0 91 2f 2c 	lds	r31, 0x2C2F	; 0x802c2f <xPendingReadyList+0x8>
    19a4:	c0 85       	ldd	r28, Z+8	; 0x08
    19a6:	d1 85       	ldd	r29, Z+9	; 0x09
    19a8:	ce 01       	movw	r24, r28
    19aa:	0e 96       	adiw	r24, 0x0e	; 14
    19ac:	0e 94 ae 04 	call	0x95c	; 0x95c <uxListRemove>
    19b0:	8e 01       	movw	r16, r28
    19b2:	0e 5f       	subi	r16, 0xFE	; 254
    19b4:	1f 4f       	sbci	r17, 0xFF	; 255
    19b6:	c8 01       	movw	r24, r16
    19b8:	0e 94 ae 04 	call	0x95c	; 0x95c <uxListRemove>
    19bc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    19be:	90 91 16 2c 	lds	r25, 0x2C16	; 0x802c16 <uxTopReadyPriority>
    19c2:	98 17       	cp	r25, r24
    19c4:	10 f4       	brcc	.+4      	; 0x19ca <xTaskResumeAll+0x5e>
    19c6:	80 93 16 2c 	sts	0x2C16, r24	; 0x802c16 <uxTopReadyPriority>
    19ca:	2b e0       	ldi	r18, 0x0B	; 11
    19cc:	82 9f       	mul	r24, r18
    19ce:	c0 01       	movw	r24, r0
    19d0:	11 24       	eor	r1, r1
    19d2:	b8 01       	movw	r22, r16
    19d4:	84 5b       	subi	r24, 0xB4	; 180
    19d6:	93 4d       	sbci	r25, 0xD3	; 211
    19d8:	0e 94 50 04 	call	0x8a0	; 0x8a0 <vListInsertEnd>
    19dc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    19de:	e0 91 78 2c 	lds	r30, 0x2C78	; 0x802c78 <pxCurrentTCB>
    19e2:	f0 91 79 2c 	lds	r31, 0x2C79	; 0x802c79 <pxCurrentTCB+0x1>
    19e6:	82 8d       	ldd	r24, Z+26	; 0x1a
    19e8:	98 17       	cp	r25, r24
    19ea:	30 f0       	brcs	.+12     	; 0x19f8 <xTaskResumeAll+0x8c>
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	80 93 13 2c 	sts	0x2C13, r24	; 0x802c13 <xYieldPending>
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <xTaskResumeAll+0x8c>
    19f4:	c0 e0       	ldi	r28, 0x00	; 0
    19f6:	d0 e0       	ldi	r29, 0x00	; 0
    19f8:	80 91 27 2c 	lds	r24, 0x2C27	; 0x802c27 <xPendingReadyList>
    19fc:	81 11       	cpse	r24, r1
    19fe:	ce cf       	rjmp	.-100    	; 0x199c <xTaskResumeAll+0x30>
    1a00:	cd 2b       	or	r28, r29
    1a02:	11 f0       	breq	.+4      	; 0x1a08 <xTaskResumeAll+0x9c>
    1a04:	0e 94 8b 09 	call	0x1316	; 0x1316 <prvResetNextTaskUnblockTime>
    1a08:	c0 91 14 2c 	lds	r28, 0x2C14	; 0x802c14 <uxPendedTicks>
    1a0c:	cc 23       	and	r28, r28
    1a0e:	59 f0       	breq	.+22     	; 0x1a26 <xTaskResumeAll+0xba>
    1a10:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <xTaskIncrementTick>
    1a14:	88 23       	and	r24, r24
    1a16:	19 f0       	breq	.+6      	; 0x1a1e <xTaskResumeAll+0xb2>
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	80 93 13 2c 	sts	0x2C13, r24	; 0x802c13 <xYieldPending>
    1a1e:	c1 50       	subi	r28, 0x01	; 1
    1a20:	b9 f7       	brne	.-18     	; 0x1a10 <xTaskResumeAll+0xa4>
    1a22:	10 92 14 2c 	sts	0x2C14, r1	; 0x802c14 <uxPendedTicks>
    1a26:	80 91 13 2c 	lds	r24, 0x2C13	; 0x802c13 <xYieldPending>
    1a2a:	88 23       	and	r24, r24
    1a2c:	31 f0       	breq	.+12     	; 0x1a3a <xTaskResumeAll+0xce>
    1a2e:	0e 94 a6 05 	call	0xb4c	; 0xb4c <vPortYield>
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	03 c0       	rjmp	.+6      	; 0x1a3c <xTaskResumeAll+0xd0>
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	01 c0       	rjmp	.+2      	; 0x1a3c <xTaskResumeAll+0xd0>
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	ff 91       	pop	r31
    1a3e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1a42:	df 91       	pop	r29
    1a44:	cf 91       	pop	r28
    1a46:	1f 91       	pop	r17
    1a48:	0f 91       	pop	r16
    1a4a:	08 95       	ret

00001a4c <vTaskDelay>:
    1a4c:	cf 92       	push	r12
    1a4e:	df 92       	push	r13
    1a50:	ef 92       	push	r14
    1a52:	ff 92       	push	r15
    1a54:	6b 01       	movw	r12, r22
    1a56:	7c 01       	movw	r14, r24
    1a58:	67 2b       	or	r22, r23
    1a5a:	68 2b       	or	r22, r24
    1a5c:	69 2b       	or	r22, r25
    1a5e:	51 f0       	breq	.+20     	; 0x1a74 <vTaskDelay+0x28>
    1a60:	0e 94 ce 0b 	call	0x179c	; 0x179c <vTaskSuspendAll>
    1a64:	40 e0       	ldi	r20, 0x00	; 0
    1a66:	c7 01       	movw	r24, r14
    1a68:	b6 01       	movw	r22, r12
    1a6a:	0e 94 bf 0a 	call	0x157e	; 0x157e <prvAddCurrentTaskToDelayedList>
    1a6e:	0e 94 b6 0c 	call	0x196c	; 0x196c <xTaskResumeAll>
    1a72:	01 c0       	rjmp	.+2      	; 0x1a76 <vTaskDelay+0x2a>
    1a74:	80 e0       	ldi	r24, 0x00	; 0
    1a76:	81 11       	cpse	r24, r1
    1a78:	02 c0       	rjmp	.+4      	; 0x1a7e <vTaskDelay+0x32>
    1a7a:	0e 94 a6 05 	call	0xb4c	; 0xb4c <vPortYield>
    1a7e:	ff 90       	pop	r15
    1a80:	ef 90       	pop	r14
    1a82:	df 90       	pop	r13
    1a84:	cf 90       	pop	r12
    1a86:	08 95       	ret

00001a88 <vTaskSwitchContext>:
    1a88:	80 91 0a 2c 	lds	r24, 0x2C0A	; 0x802c0a <uxSchedulerSuspended>
    1a8c:	88 23       	and	r24, r24
    1a8e:	21 f0       	breq	.+8      	; 0x1a98 <vTaskSwitchContext+0x10>
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	80 93 13 2c 	sts	0x2C13, r24	; 0x802c13 <xYieldPending>
    1a96:	08 95       	ret
    1a98:	10 92 13 2c 	sts	0x2C13, r1	; 0x802c13 <xYieldPending>
    1a9c:	e0 91 78 2c 	lds	r30, 0x2C78	; 0x802c78 <pxCurrentTCB>
    1aa0:	f0 91 79 2c 	lds	r31, 0x2C79	; 0x802c79 <pxCurrentTCB+0x1>
    1aa4:	03 8c       	ldd	r0, Z+27	; 0x1b
    1aa6:	f4 8d       	ldd	r31, Z+28	; 0x1c
    1aa8:	e0 2d       	mov	r30, r0
    1aaa:	80 81       	ld	r24, Z
    1aac:	91 81       	ldd	r25, Z+1	; 0x01
    1aae:	a2 81       	ldd	r26, Z+2	; 0x02
    1ab0:	b3 81       	ldd	r27, Z+3	; 0x03
    1ab2:	85 3a       	cpi	r24, 0xA5	; 165
    1ab4:	95 4a       	sbci	r25, 0xA5	; 165
    1ab6:	a5 4a       	sbci	r26, 0xA5	; 165
    1ab8:	b5 4a       	sbci	r27, 0xA5	; 165
    1aba:	d9 f4       	brne	.+54     	; 0x1af2 <vTaskSwitchContext+0x6a>
    1abc:	84 81       	ldd	r24, Z+4	; 0x04
    1abe:	95 81       	ldd	r25, Z+5	; 0x05
    1ac0:	a6 81       	ldd	r26, Z+6	; 0x06
    1ac2:	b7 81       	ldd	r27, Z+7	; 0x07
    1ac4:	85 3a       	cpi	r24, 0xA5	; 165
    1ac6:	95 4a       	sbci	r25, 0xA5	; 165
    1ac8:	a5 4a       	sbci	r26, 0xA5	; 165
    1aca:	b5 4a       	sbci	r27, 0xA5	; 165
    1acc:	91 f4       	brne	.+36     	; 0x1af2 <vTaskSwitchContext+0x6a>
    1ace:	80 85       	ldd	r24, Z+8	; 0x08
    1ad0:	91 85       	ldd	r25, Z+9	; 0x09
    1ad2:	a2 85       	ldd	r26, Z+10	; 0x0a
    1ad4:	b3 85       	ldd	r27, Z+11	; 0x0b
    1ad6:	85 3a       	cpi	r24, 0xA5	; 165
    1ad8:	95 4a       	sbci	r25, 0xA5	; 165
    1ada:	a5 4a       	sbci	r26, 0xA5	; 165
    1adc:	b5 4a       	sbci	r27, 0xA5	; 165
    1ade:	49 f4       	brne	.+18     	; 0x1af2 <vTaskSwitchContext+0x6a>
    1ae0:	84 85       	ldd	r24, Z+12	; 0x0c
    1ae2:	95 85       	ldd	r25, Z+13	; 0x0d
    1ae4:	a6 85       	ldd	r26, Z+14	; 0x0e
    1ae6:	b7 85       	ldd	r27, Z+15	; 0x0f
    1ae8:	85 3a       	cpi	r24, 0xA5	; 165
    1aea:	95 4a       	sbci	r25, 0xA5	; 165
    1aec:	a5 4a       	sbci	r26, 0xA5	; 165
    1aee:	b5 4a       	sbci	r27, 0xA5	; 165
    1af0:	61 f0       	breq	.+24     	; 0x1b0a <vTaskSwitchContext+0x82>
    1af2:	60 91 78 2c 	lds	r22, 0x2C78	; 0x802c78 <pxCurrentTCB>
    1af6:	70 91 79 2c 	lds	r23, 0x2C79	; 0x802c79 <pxCurrentTCB+0x1>
    1afa:	63 5e       	subi	r22, 0xE3	; 227
    1afc:	7f 4f       	sbci	r23, 0xFF	; 255
    1afe:	80 91 78 2c 	lds	r24, 0x2C78	; 0x802c78 <pxCurrentTCB>
    1b02:	90 91 79 2c 	lds	r25, 0x2C79	; 0x802c79 <pxCurrentTCB+0x1>
    1b06:	0e 94 74 02 	call	0x4e8	; 0x4e8 <vApplicationStackOverflowHook>
    1b0a:	80 91 16 2c 	lds	r24, 0x2C16	; 0x802c16 <uxTopReadyPriority>
    1b0e:	01 c0       	rjmp	.+2      	; 0x1b12 <vTaskSwitchContext+0x8a>
    1b10:	81 50       	subi	r24, 0x01	; 1
    1b12:	28 2f       	mov	r18, r24
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	9b e0       	ldi	r25, 0x0B	; 11
    1b18:	92 9f       	mul	r25, r18
    1b1a:	f0 01       	movw	r30, r0
    1b1c:	93 9f       	mul	r25, r19
    1b1e:	f0 0d       	add	r31, r0
    1b20:	11 24       	eor	r1, r1
    1b22:	e4 5b       	subi	r30, 0xB4	; 180
    1b24:	f3 4d       	sbci	r31, 0xD3	; 211
    1b26:	90 81       	ld	r25, Z
    1b28:	99 23       	and	r25, r25
    1b2a:	91 f3       	breq	.-28     	; 0x1b10 <vTaskSwitchContext+0x88>
    1b2c:	9b e0       	ldi	r25, 0x0B	; 11
    1b2e:	92 9f       	mul	r25, r18
    1b30:	a0 01       	movw	r20, r0
    1b32:	93 9f       	mul	r25, r19
    1b34:	50 0d       	add	r21, r0
    1b36:	11 24       	eor	r1, r1
    1b38:	df 01       	movw	r26, r30
    1b3a:	01 80       	ldd	r0, Z+1	; 0x01
    1b3c:	f2 81       	ldd	r31, Z+2	; 0x02
    1b3e:	e0 2d       	mov	r30, r0
    1b40:	04 80       	ldd	r0, Z+4	; 0x04
    1b42:	f5 81       	ldd	r31, Z+5	; 0x05
    1b44:	e0 2d       	mov	r30, r0
    1b46:	11 96       	adiw	r26, 0x01	; 1
    1b48:	ed 93       	st	X+, r30
    1b4a:	fc 93       	st	X, r31
    1b4c:	12 97       	sbiw	r26, 0x02	; 2
    1b4e:	41 5b       	subi	r20, 0xB1	; 177
    1b50:	53 4d       	sbci	r21, 0xD3	; 211
    1b52:	e4 17       	cp	r30, r20
    1b54:	f5 07       	cpc	r31, r21
    1b56:	29 f4       	brne	.+10     	; 0x1b62 <vTaskSwitchContext+0xda>
    1b58:	44 81       	ldd	r20, Z+4	; 0x04
    1b5a:	55 81       	ldd	r21, Z+5	; 0x05
    1b5c:	fd 01       	movw	r30, r26
    1b5e:	41 83       	std	Z+1, r20	; 0x01
    1b60:	52 83       	std	Z+2, r21	; 0x02
    1b62:	9b e0       	ldi	r25, 0x0B	; 11
    1b64:	92 9f       	mul	r25, r18
    1b66:	f0 01       	movw	r30, r0
    1b68:	93 9f       	mul	r25, r19
    1b6a:	f0 0d       	add	r31, r0
    1b6c:	11 24       	eor	r1, r1
    1b6e:	e4 5b       	subi	r30, 0xB4	; 180
    1b70:	f3 4d       	sbci	r31, 0xD3	; 211
    1b72:	01 80       	ldd	r0, Z+1	; 0x01
    1b74:	f2 81       	ldd	r31, Z+2	; 0x02
    1b76:	e0 2d       	mov	r30, r0
    1b78:	20 85       	ldd	r18, Z+8	; 0x08
    1b7a:	31 85       	ldd	r19, Z+9	; 0x09
    1b7c:	20 93 78 2c 	sts	0x2C78, r18	; 0x802c78 <pxCurrentTCB>
    1b80:	30 93 79 2c 	sts	0x2C79, r19	; 0x802c79 <pxCurrentTCB+0x1>
    1b84:	80 93 16 2c 	sts	0x2C16, r24	; 0x802c16 <uxTopReadyPriority>
    1b88:	08 95       	ret

00001b8a <vTaskPlaceOnEventList>:
    1b8a:	cf 92       	push	r12
    1b8c:	df 92       	push	r13
    1b8e:	ef 92       	push	r14
    1b90:	ff 92       	push	r15
    1b92:	6a 01       	movw	r12, r20
    1b94:	7b 01       	movw	r14, r22
    1b96:	60 91 78 2c 	lds	r22, 0x2C78	; 0x802c78 <pxCurrentTCB>
    1b9a:	70 91 79 2c 	lds	r23, 0x2C79	; 0x802c79 <pxCurrentTCB+0x1>
    1b9e:	62 5f       	subi	r22, 0xF2	; 242
    1ba0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba2:	0e 94 71 04 	call	0x8e2	; 0x8e2 <vListInsert>
    1ba6:	41 e0       	ldi	r20, 0x01	; 1
    1ba8:	c7 01       	movw	r24, r14
    1baa:	b6 01       	movw	r22, r12
    1bac:	0e 94 bf 0a 	call	0x157e	; 0x157e <prvAddCurrentTaskToDelayedList>
    1bb0:	ff 90       	pop	r15
    1bb2:	ef 90       	pop	r14
    1bb4:	df 90       	pop	r13
    1bb6:	cf 90       	pop	r12
    1bb8:	08 95       	ret

00001bba <vTaskPlaceOnUnorderedEventList>:
    1bba:	cf 92       	push	r12
    1bbc:	df 92       	push	r13
    1bbe:	ef 92       	push	r14
    1bc0:	ff 92       	push	r15
    1bc2:	0f 93       	push	r16
    1bc4:	1f 93       	push	r17
    1bc6:	68 01       	movw	r12, r16
    1bc8:	79 01       	movw	r14, r18
    1bca:	e0 91 78 2c 	lds	r30, 0x2C78	; 0x802c78 <pxCurrentTCB>
    1bce:	f0 91 79 2c 	lds	r31, 0x2C79	; 0x802c79 <pxCurrentTCB+0x1>
    1bd2:	70 68       	ori	r23, 0x80	; 128
    1bd4:	46 87       	std	Z+14, r20	; 0x0e
    1bd6:	57 87       	std	Z+15, r21	; 0x0f
    1bd8:	60 8b       	std	Z+16, r22	; 0x10
    1bda:	71 8b       	std	Z+17, r23	; 0x11
    1bdc:	60 91 78 2c 	lds	r22, 0x2C78	; 0x802c78 <pxCurrentTCB>
    1be0:	70 91 79 2c 	lds	r23, 0x2C79	; 0x802c79 <pxCurrentTCB+0x1>
    1be4:	62 5f       	subi	r22, 0xF2	; 242
    1be6:	7f 4f       	sbci	r23, 0xFF	; 255
    1be8:	0e 94 50 04 	call	0x8a0	; 0x8a0 <vListInsertEnd>
    1bec:	41 e0       	ldi	r20, 0x01	; 1
    1bee:	c7 01       	movw	r24, r14
    1bf0:	b6 01       	movw	r22, r12
    1bf2:	0e 94 bf 0a 	call	0x157e	; 0x157e <prvAddCurrentTaskToDelayedList>
    1bf6:	1f 91       	pop	r17
    1bf8:	0f 91       	pop	r16
    1bfa:	ff 90       	pop	r15
    1bfc:	ef 90       	pop	r14
    1bfe:	df 90       	pop	r13
    1c00:	cf 90       	pop	r12
    1c02:	08 95       	ret

00001c04 <vTaskPlaceOnEventListRestricted>:
    1c04:	cf 92       	push	r12
    1c06:	df 92       	push	r13
    1c08:	ef 92       	push	r14
    1c0a:	ff 92       	push	r15
    1c0c:	cf 93       	push	r28
    1c0e:	6a 01       	movw	r12, r20
    1c10:	7b 01       	movw	r14, r22
    1c12:	c2 2f       	mov	r28, r18
    1c14:	60 91 78 2c 	lds	r22, 0x2C78	; 0x802c78 <pxCurrentTCB>
    1c18:	70 91 79 2c 	lds	r23, 0x2C79	; 0x802c79 <pxCurrentTCB+0x1>
    1c1c:	62 5f       	subi	r22, 0xF2	; 242
    1c1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c20:	0e 94 50 04 	call	0x8a0	; 0x8a0 <vListInsertEnd>
    1c24:	cc 23       	and	r28, r28
    1c26:	21 f0       	breq	.+8      	; 0x1c30 <vTaskPlaceOnEventListRestricted+0x2c>
    1c28:	cc 24       	eor	r12, r12
    1c2a:	ca 94       	dec	r12
    1c2c:	dc 2c       	mov	r13, r12
    1c2e:	76 01       	movw	r14, r12
    1c30:	4c 2f       	mov	r20, r28
    1c32:	c7 01       	movw	r24, r14
    1c34:	b6 01       	movw	r22, r12
    1c36:	0e 94 bf 0a 	call	0x157e	; 0x157e <prvAddCurrentTaskToDelayedList>
    1c3a:	cf 91       	pop	r28
    1c3c:	ff 90       	pop	r15
    1c3e:	ef 90       	pop	r14
    1c40:	df 90       	pop	r13
    1c42:	cf 90       	pop	r12
    1c44:	08 95       	ret

00001c46 <xTaskRemoveFromEventList>:
    1c46:	0f 93       	push	r16
    1c48:	1f 93       	push	r17
    1c4a:	cf 93       	push	r28
    1c4c:	df 93       	push	r29
    1c4e:	dc 01       	movw	r26, r24
    1c50:	17 96       	adiw	r26, 0x07	; 7
    1c52:	ed 91       	ld	r30, X+
    1c54:	fc 91       	ld	r31, X
    1c56:	18 97       	sbiw	r26, 0x08	; 8
    1c58:	c0 85       	ldd	r28, Z+8	; 0x08
    1c5a:	d1 85       	ldd	r29, Z+9	; 0x09
    1c5c:	8e 01       	movw	r16, r28
    1c5e:	02 5f       	subi	r16, 0xF2	; 242
    1c60:	1f 4f       	sbci	r17, 0xFF	; 255
    1c62:	c8 01       	movw	r24, r16
    1c64:	0e 94 ae 04 	call	0x95c	; 0x95c <uxListRemove>
    1c68:	80 91 0a 2c 	lds	r24, 0x2C0A	; 0x802c0a <uxSchedulerSuspended>
    1c6c:	81 11       	cpse	r24, r1
    1c6e:	16 c0       	rjmp	.+44     	; 0x1c9c <xTaskRemoveFromEventList+0x56>
    1c70:	0c 50       	subi	r16, 0x0C	; 12
    1c72:	11 09       	sbc	r17, r1
    1c74:	c8 01       	movw	r24, r16
    1c76:	0e 94 ae 04 	call	0x95c	; 0x95c <uxListRemove>
    1c7a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c7c:	90 91 16 2c 	lds	r25, 0x2C16	; 0x802c16 <uxTopReadyPriority>
    1c80:	98 17       	cp	r25, r24
    1c82:	10 f4       	brcc	.+4      	; 0x1c88 <xTaskRemoveFromEventList+0x42>
    1c84:	80 93 16 2c 	sts	0x2C16, r24	; 0x802c16 <uxTopReadyPriority>
    1c88:	bb e0       	ldi	r27, 0x0B	; 11
    1c8a:	8b 9f       	mul	r24, r27
    1c8c:	c0 01       	movw	r24, r0
    1c8e:	11 24       	eor	r1, r1
    1c90:	b8 01       	movw	r22, r16
    1c92:	84 5b       	subi	r24, 0xB4	; 180
    1c94:	93 4d       	sbci	r25, 0xD3	; 211
    1c96:	0e 94 50 04 	call	0x8a0	; 0x8a0 <vListInsertEnd>
    1c9a:	05 c0       	rjmp	.+10     	; 0x1ca6 <xTaskRemoveFromEventList+0x60>
    1c9c:	b8 01       	movw	r22, r16
    1c9e:	87 e2       	ldi	r24, 0x27	; 39
    1ca0:	9c e2       	ldi	r25, 0x2C	; 44
    1ca2:	0e 94 50 04 	call	0x8a0	; 0x8a0 <vListInsertEnd>
    1ca6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1ca8:	e0 91 78 2c 	lds	r30, 0x2C78	; 0x802c78 <pxCurrentTCB>
    1cac:	f0 91 79 2c 	lds	r31, 0x2C79	; 0x802c79 <pxCurrentTCB+0x1>
    1cb0:	82 8d       	ldd	r24, Z+26	; 0x1a
    1cb2:	89 17       	cp	r24, r25
    1cb4:	20 f4       	brcc	.+8      	; 0x1cbe <xTaskRemoveFromEventList+0x78>
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	80 93 13 2c 	sts	0x2C13, r24	; 0x802c13 <xYieldPending>
    1cbc:	01 c0       	rjmp	.+2      	; 0x1cc0 <xTaskRemoveFromEventList+0x7a>
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	df 91       	pop	r29
    1cc2:	cf 91       	pop	r28
    1cc4:	1f 91       	pop	r17
    1cc6:	0f 91       	pop	r16
    1cc8:	08 95       	ret

00001cca <vTaskRemoveFromUnorderedEventList>:
    1cca:	0f 93       	push	r16
    1ccc:	1f 93       	push	r17
    1cce:	cf 93       	push	r28
    1cd0:	df 93       	push	r29
    1cd2:	70 68       	ori	r23, 0x80	; 128
    1cd4:	fc 01       	movw	r30, r24
    1cd6:	40 83       	st	Z, r20
    1cd8:	51 83       	std	Z+1, r21	; 0x01
    1cda:	62 83       	std	Z+2, r22	; 0x02
    1cdc:	73 83       	std	Z+3, r23	; 0x03
    1cde:	c0 85       	ldd	r28, Z+8	; 0x08
    1ce0:	d1 85       	ldd	r29, Z+9	; 0x09
    1ce2:	0e 94 ae 04 	call	0x95c	; 0x95c <uxListRemove>
    1ce6:	8e 01       	movw	r16, r28
    1ce8:	0e 5f       	subi	r16, 0xFE	; 254
    1cea:	1f 4f       	sbci	r17, 0xFF	; 255
    1cec:	c8 01       	movw	r24, r16
    1cee:	0e 94 ae 04 	call	0x95c	; 0x95c <uxListRemove>
    1cf2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1cf4:	90 91 16 2c 	lds	r25, 0x2C16	; 0x802c16 <uxTopReadyPriority>
    1cf8:	98 17       	cp	r25, r24
    1cfa:	10 f4       	brcc	.+4      	; 0x1d00 <vTaskRemoveFromUnorderedEventList+0x36>
    1cfc:	80 93 16 2c 	sts	0x2C16, r24	; 0x802c16 <uxTopReadyPriority>
    1d00:	fb e0       	ldi	r31, 0x0B	; 11
    1d02:	8f 9f       	mul	r24, r31
    1d04:	c0 01       	movw	r24, r0
    1d06:	11 24       	eor	r1, r1
    1d08:	b8 01       	movw	r22, r16
    1d0a:	84 5b       	subi	r24, 0xB4	; 180
    1d0c:	93 4d       	sbci	r25, 0xD3	; 211
    1d0e:	0e 94 50 04 	call	0x8a0	; 0x8a0 <vListInsertEnd>
    1d12:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1d14:	e0 91 78 2c 	lds	r30, 0x2C78	; 0x802c78 <pxCurrentTCB>
    1d18:	f0 91 79 2c 	lds	r31, 0x2C79	; 0x802c79 <pxCurrentTCB+0x1>
    1d1c:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d1e:	89 17       	cp	r24, r25
    1d20:	18 f4       	brcc	.+6      	; 0x1d28 <vTaskRemoveFromUnorderedEventList+0x5e>
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	80 93 13 2c 	sts	0x2C13, r24	; 0x802c13 <xYieldPending>
    1d28:	df 91       	pop	r29
    1d2a:	cf 91       	pop	r28
    1d2c:	1f 91       	pop	r17
    1d2e:	0f 91       	pop	r16
    1d30:	08 95       	ret

00001d32 <vTaskInternalSetTimeOutState>:
    1d32:	20 91 12 2c 	lds	r18, 0x2C12	; 0x802c12 <xNumOfOverflows>
    1d36:	fc 01       	movw	r30, r24
    1d38:	20 83       	st	Z, r18
    1d3a:	40 91 17 2c 	lds	r20, 0x2C17	; 0x802c17 <xTickCount>
    1d3e:	50 91 18 2c 	lds	r21, 0x2C18	; 0x802c18 <xTickCount+0x1>
    1d42:	60 91 19 2c 	lds	r22, 0x2C19	; 0x802c19 <xTickCount+0x2>
    1d46:	70 91 1a 2c 	lds	r23, 0x2C1A	; 0x802c1a <xTickCount+0x3>
    1d4a:	41 83       	std	Z+1, r20	; 0x01
    1d4c:	52 83       	std	Z+2, r21	; 0x02
    1d4e:	63 83       	std	Z+3, r22	; 0x03
    1d50:	74 83       	std	Z+4, r23	; 0x04
    1d52:	08 95       	ret

00001d54 <xTaskCheckForTimeOut>:
    1d54:	8f 92       	push	r8
    1d56:	9f 92       	push	r9
    1d58:	af 92       	push	r10
    1d5a:	bf 92       	push	r11
    1d5c:	cf 92       	push	r12
    1d5e:	df 92       	push	r13
    1d60:	ef 92       	push	r14
    1d62:	ff 92       	push	r15
    1d64:	0f 93       	push	r16
    1d66:	1f 93       	push	r17
    1d68:	cf 93       	push	r28
    1d6a:	df 93       	push	r29
    1d6c:	db 01       	movw	r26, r22
    1d6e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1d72:	ff 93       	push	r31
    1d74:	f8 7f       	andi	r31, 0xF8	; 248
    1d76:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1d7a:	c0 90 17 2c 	lds	r12, 0x2C17	; 0x802c17 <xTickCount>
    1d7e:	d0 90 18 2c 	lds	r13, 0x2C18	; 0x802c18 <xTickCount+0x1>
    1d82:	e0 90 19 2c 	lds	r14, 0x2C19	; 0x802c19 <xTickCount+0x2>
    1d86:	f0 90 1a 2c 	lds	r15, 0x2C1A	; 0x802c1a <xTickCount+0x3>
    1d8a:	ec 01       	movw	r28, r24
    1d8c:	09 81       	ldd	r16, Y+1	; 0x01
    1d8e:	1a 81       	ldd	r17, Y+2	; 0x02
    1d90:	2b 81       	ldd	r18, Y+3	; 0x03
    1d92:	3c 81       	ldd	r19, Y+4	; 0x04
    1d94:	46 01       	movw	r8, r12
    1d96:	57 01       	movw	r10, r14
    1d98:	80 1a       	sub	r8, r16
    1d9a:	91 0a       	sbc	r9, r17
    1d9c:	a2 0a       	sbc	r10, r18
    1d9e:	b3 0a       	sbc	r11, r19
    1da0:	4d 91       	ld	r20, X+
    1da2:	5d 91       	ld	r21, X+
    1da4:	6d 91       	ld	r22, X+
    1da6:	7c 91       	ld	r23, X
    1da8:	13 97       	sbiw	r26, 0x03	; 3
    1daa:	4f 3f       	cpi	r20, 0xFF	; 255
    1dac:	df ef       	ldi	r29, 0xFF	; 255
    1dae:	5d 07       	cpc	r21, r29
    1db0:	6d 07       	cpc	r22, r29
    1db2:	7d 07       	cpc	r23, r29
    1db4:	21 f1       	breq	.+72     	; 0x1dfe <xTaskCheckForTimeOut+0xaa>
    1db6:	ec 01       	movw	r28, r24
    1db8:	f8 81       	ld	r31, Y
    1dba:	e0 91 12 2c 	lds	r30, 0x2C12	; 0x802c12 <xNumOfOverflows>
    1dbe:	fe 17       	cp	r31, r30
    1dc0:	29 f0       	breq	.+10     	; 0x1dcc <xTaskCheckForTimeOut+0x78>
    1dc2:	c0 16       	cp	r12, r16
    1dc4:	d1 06       	cpc	r13, r17
    1dc6:	e2 06       	cpc	r14, r18
    1dc8:	f3 06       	cpc	r15, r19
    1dca:	d8 f4       	brcc	.+54     	; 0x1e02 <xTaskCheckForTimeOut+0xae>
    1dcc:	84 16       	cp	r8, r20
    1dce:	95 06       	cpc	r9, r21
    1dd0:	a6 06       	cpc	r10, r22
    1dd2:	b7 06       	cpc	r11, r23
    1dd4:	68 f4       	brcc	.+26     	; 0x1df0 <xTaskCheckForTimeOut+0x9c>
    1dd6:	48 19       	sub	r20, r8
    1dd8:	59 09       	sbc	r21, r9
    1dda:	6a 09       	sbc	r22, r10
    1ddc:	7b 09       	sbc	r23, r11
    1dde:	4d 93       	st	X+, r20
    1de0:	5d 93       	st	X+, r21
    1de2:	6d 93       	st	X+, r22
    1de4:	7c 93       	st	X, r23
    1de6:	13 97       	sbiw	r26, 0x03	; 3
    1de8:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <vTaskInternalSetTimeOutState>
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	0a c0       	rjmp	.+20     	; 0x1e04 <xTaskCheckForTimeOut+0xb0>
    1df0:	1d 92       	st	X+, r1
    1df2:	1d 92       	st	X+, r1
    1df4:	1d 92       	st	X+, r1
    1df6:	1c 92       	st	X, r1
    1df8:	13 97       	sbiw	r26, 0x03	; 3
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	03 c0       	rjmp	.+6      	; 0x1e04 <xTaskCheckForTimeOut+0xb0>
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	01 c0       	rjmp	.+2      	; 0x1e04 <xTaskCheckForTimeOut+0xb0>
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	ff 91       	pop	r31
    1e06:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1e0a:	df 91       	pop	r29
    1e0c:	cf 91       	pop	r28
    1e0e:	1f 91       	pop	r17
    1e10:	0f 91       	pop	r16
    1e12:	ff 90       	pop	r15
    1e14:	ef 90       	pop	r14
    1e16:	df 90       	pop	r13
    1e18:	cf 90       	pop	r12
    1e1a:	bf 90       	pop	r11
    1e1c:	af 90       	pop	r10
    1e1e:	9f 90       	pop	r9
    1e20:	8f 90       	pop	r8
    1e22:	08 95       	ret

00001e24 <vTaskMissedYield>:
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	80 93 13 2c 	sts	0x2C13, r24	; 0x802c13 <xYieldPending>
    1e2a:	08 95       	ret

00001e2c <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    1e2c:	80 91 15 2c 	lds	r24, 0x2C15	; 0x802c15 <xSchedulerRunning>
    1e30:	88 23       	and	r24, r24
    1e32:	31 f0       	breq	.+12     	; 0x1e40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1e34:	80 91 0a 2c 	lds	r24, 0x2C0A	; 0x802c0a <uxSchedulerSuspended>
    1e38:	81 11       	cpse	r24, r1
    1e3a:	04 c0       	rjmp	.+8      	; 0x1e44 <xTaskGetSchedulerState+0x18>
			{
				xReturn = taskSCHEDULER_RUNNING;
    1e3c:	82 e0       	ldi	r24, 0x02	; 2
    1e3e:	08 95       	ret
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	08 95       	ret
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    1e44:	80 e0       	ldi	r24, 0x00	; 0
			}
		}

		return xReturn;
	}
    1e46:	08 95       	ret

00001e48 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    1e48:	cf 92       	push	r12
    1e4a:	df 92       	push	r13
    1e4c:	ef 92       	push	r14
    1e4e:	ff 92       	push	r15
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    1e50:	e0 91 78 2c 	lds	r30, 0x2C78	; 0x802c78 <pxCurrentTCB>
    1e54:	f0 91 79 2c 	lds	r31, 0x2C79	; 0x802c79 <pxCurrentTCB+0x1>
    1e58:	66 85       	ldd	r22, Z+14	; 0x0e
    1e5a:	77 85       	ldd	r23, Z+15	; 0x0f
    1e5c:	80 89       	ldd	r24, Z+16	; 0x10
    1e5e:	91 89       	ldd	r25, Z+17	; 0x11

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1e60:	e0 91 78 2c 	lds	r30, 0x2C78	; 0x802c78 <pxCurrentTCB>
    1e64:	f0 91 79 2c 	lds	r31, 0x2C79	; 0x802c79 <pxCurrentTCB+0x1>
    1e68:	a0 91 78 2c 	lds	r26, 0x2C78	; 0x802c78 <pxCurrentTCB>
    1e6c:	b0 91 79 2c 	lds	r27, 0x2C79	; 0x802c79 <pxCurrentTCB+0x1>
    1e70:	5a 96       	adiw	r26, 0x1a	; 26
    1e72:	2c 91       	ld	r18, X
    1e74:	c1 2c       	mov	r12, r1
    1e76:	d1 2c       	mov	r13, r1
    1e78:	76 01       	movw	r14, r12
    1e7a:	68 94       	set
    1e7c:	c2 f8       	bld	r12, 2
    1e7e:	c2 1a       	sub	r12, r18
    1e80:	d1 08       	sbc	r13, r1
    1e82:	e1 08       	sbc	r14, r1
    1e84:	f1 08       	sbc	r15, r1
    1e86:	c6 86       	std	Z+14, r12	; 0x0e
    1e88:	d7 86       	std	Z+15, r13	; 0x0f
    1e8a:	e0 8a       	std	Z+16, r14	; 0x10
    1e8c:	f1 8a       	std	Z+17, r15	; 0x11

	return uxReturn;
}
    1e8e:	ff 90       	pop	r15
    1e90:	ef 90       	pop	r14
    1e92:	df 90       	pop	r13
    1e94:	cf 90       	pop	r12
    1e96:	08 95       	ret

00001e98 <prvGetNextExpireTime>:

	taskENTER_CRITICAL();
	{
		pxTimer->pvTimerID = pvNewID;
	}
	taskEXIT_CRITICAL();
    1e98:	dc 01       	movw	r26, r24
    1e9a:	e0 91 84 2c 	lds	r30, 0x2C84	; 0x802c84 <pxCurrentTimerList>
    1e9e:	f0 91 85 2c 	lds	r31, 0x2C85	; 0x802c85 <pxCurrentTimerList+0x1>
    1ea2:	80 81       	ld	r24, Z
    1ea4:	91 e0       	ldi	r25, 0x01	; 1
    1ea6:	81 11       	cpse	r24, r1
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	9c 93       	st	X, r25
    1eac:	91 11       	cpse	r25, r1
    1eae:	08 c0       	rjmp	.+16     	; 0x1ec0 <prvGetNextExpireTime+0x28>
    1eb0:	07 80       	ldd	r0, Z+7	; 0x07
    1eb2:	f0 85       	ldd	r31, Z+8	; 0x08
    1eb4:	e0 2d       	mov	r30, r0
    1eb6:	60 81       	ld	r22, Z
    1eb8:	71 81       	ldd	r23, Z+1	; 0x01
    1eba:	82 81       	ldd	r24, Z+2	; 0x02
    1ebc:	93 81       	ldd	r25, Z+3	; 0x03
    1ebe:	08 95       	ret
    1ec0:	60 e0       	ldi	r22, 0x00	; 0
    1ec2:	70 e0       	ldi	r23, 0x00	; 0
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	08 95       	ret

00001ec8 <prvInsertTimerInActiveList>:
    1ec8:	cf 92       	push	r12
    1eca:	df 92       	push	r13
    1ecc:	ef 92       	push	r14
    1ece:	ff 92       	push	r15
    1ed0:	0f 93       	push	r16
    1ed2:	1f 93       	push	r17
    1ed4:	fc 01       	movw	r30, r24
    1ed6:	42 83       	std	Z+2, r20	; 0x02
    1ed8:	53 83       	std	Z+3, r21	; 0x03
    1eda:	64 83       	std	Z+4, r22	; 0x04
    1edc:	75 83       	std	Z+5, r23	; 0x05
    1ede:	82 87       	std	Z+10, r24	; 0x0a
    1ee0:	93 87       	std	Z+11, r25	; 0x0b
    1ee2:	04 17       	cp	r16, r20
    1ee4:	15 07       	cpc	r17, r21
    1ee6:	26 07       	cpc	r18, r22
    1ee8:	37 07       	cpc	r19, r23
    1eea:	c0 f0       	brcs	.+48     	; 0x1f1c <prvInsertTimerInActiveList+0x54>
    1eec:	0c 19       	sub	r16, r12
    1eee:	1d 09       	sbc	r17, r13
    1ef0:	2e 09       	sbc	r18, r14
    1ef2:	3f 09       	sbc	r19, r15
    1ef4:	86 85       	ldd	r24, Z+14	; 0x0e
    1ef6:	97 85       	ldd	r25, Z+15	; 0x0f
    1ef8:	a0 89       	ldd	r26, Z+16	; 0x10
    1efa:	b1 89       	ldd	r27, Z+17	; 0x11
    1efc:	08 17       	cp	r16, r24
    1efe:	19 07       	cpc	r17, r25
    1f00:	2a 07       	cpc	r18, r26
    1f02:	3b 07       	cpc	r19, r27
    1f04:	00 f5       	brcc	.+64     	; 0x1f46 <prvInsertTimerInActiveList+0x7e>
    1f06:	bf 01       	movw	r22, r30
    1f08:	6e 5f       	subi	r22, 0xFE	; 254
    1f0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f0c:	80 91 82 2c 	lds	r24, 0x2C82	; 0x802c82 <pxOverflowTimerList>
    1f10:	90 91 83 2c 	lds	r25, 0x2C83	; 0x802c83 <pxOverflowTimerList+0x1>
    1f14:	0e 94 71 04 	call	0x8e2	; 0x8e2 <vListInsert>
    1f18:	80 e0       	ldi	r24, 0x00	; 0
    1f1a:	18 c0       	rjmp	.+48     	; 0x1f4c <prvInsertTimerInActiveList+0x84>
    1f1c:	0c 15       	cp	r16, r12
    1f1e:	1d 05       	cpc	r17, r13
    1f20:	2e 05       	cpc	r18, r14
    1f22:	3f 05       	cpc	r19, r15
    1f24:	28 f4       	brcc	.+10     	; 0x1f30 <prvInsertTimerInActiveList+0x68>
    1f26:	4c 15       	cp	r20, r12
    1f28:	5d 05       	cpc	r21, r13
    1f2a:	6e 05       	cpc	r22, r14
    1f2c:	7f 05       	cpc	r23, r15
    1f2e:	68 f4       	brcc	.+26     	; 0x1f4a <prvInsertTimerInActiveList+0x82>
    1f30:	bf 01       	movw	r22, r30
    1f32:	6e 5f       	subi	r22, 0xFE	; 254
    1f34:	7f 4f       	sbci	r23, 0xFF	; 255
    1f36:	80 91 84 2c 	lds	r24, 0x2C84	; 0x802c84 <pxCurrentTimerList>
    1f3a:	90 91 85 2c 	lds	r25, 0x2C85	; 0x802c85 <pxCurrentTimerList+0x1>
    1f3e:	0e 94 71 04 	call	0x8e2	; 0x8e2 <vListInsert>
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	03 c0       	rjmp	.+6      	; 0x1f4c <prvInsertTimerInActiveList+0x84>
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	01 c0       	rjmp	.+2      	; 0x1f4c <prvInsertTimerInActiveList+0x84>
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	1f 91       	pop	r17
    1f4e:	0f 91       	pop	r16
    1f50:	ff 90       	pop	r15
    1f52:	ef 90       	pop	r14
    1f54:	df 90       	pop	r13
    1f56:	cf 90       	pop	r12
    1f58:	08 95       	ret

00001f5a <prvCheckForValidListAndQueue>:
    1f5a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1f5e:	ff 93       	push	r31
    1f60:	f8 7f       	andi	r31, 0xF8	; 248
    1f62:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1f66:	80 91 80 2c 	lds	r24, 0x2C80	; 0x802c80 <xTimerQueue>
    1f6a:	90 91 81 2c 	lds	r25, 0x2C81	; 0x802c81 <xTimerQueue+0x1>
    1f6e:	89 2b       	or	r24, r25
    1f70:	e9 f4       	brne	.+58     	; 0x1fac <prvCheckForValidListAndQueue+0x52>
    1f72:	81 e9       	ldi	r24, 0x91	; 145
    1f74:	9c e2       	ldi	r25, 0x2C	; 44
    1f76:	0e 94 3b 04 	call	0x876	; 0x876 <vListInitialise>
    1f7a:	86 e8       	ldi	r24, 0x86	; 134
    1f7c:	9c e2       	ldi	r25, 0x2C	; 44
    1f7e:	0e 94 3b 04 	call	0x876	; 0x876 <vListInitialise>
    1f82:	81 e9       	ldi	r24, 0x91	; 145
    1f84:	9c e2       	ldi	r25, 0x2C	; 44
    1f86:	80 93 84 2c 	sts	0x2C84, r24	; 0x802c84 <pxCurrentTimerList>
    1f8a:	90 93 85 2c 	sts	0x2C85, r25	; 0x802c85 <pxCurrentTimerList+0x1>
    1f8e:	86 e8       	ldi	r24, 0x86	; 134
    1f90:	9c e2       	ldi	r25, 0x2C	; 44
    1f92:	80 93 82 2c 	sts	0x2C82, r24	; 0x802c82 <pxOverflowTimerList>
    1f96:	90 93 83 2c 	sts	0x2C83, r25	; 0x802c83 <pxOverflowTimerList+0x1>
    1f9a:	40 e0       	ldi	r20, 0x00	; 0
    1f9c:	69 e0       	ldi	r22, 0x09	; 9
    1f9e:	85 e0       	ldi	r24, 0x05	; 5
    1fa0:	0e 94 b1 07 	call	0xf62	; 0xf62 <xQueueGenericCreate>
    1fa4:	80 93 80 2c 	sts	0x2C80, r24	; 0x802c80 <xTimerQueue>
    1fa8:	90 93 81 2c 	sts	0x2C81, r25	; 0x802c81 <xTimerQueue+0x1>
    1fac:	ff 91       	pop	r31
    1fae:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1fb2:	08 95       	ret

00001fb4 <xTimerCreateTimerTask>:
    1fb4:	ef 92       	push	r14
    1fb6:	ff 92       	push	r15
    1fb8:	0f 93       	push	r16
    1fba:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <prvCheckForValidListAndQueue>
    1fbe:	80 91 80 2c 	lds	r24, 0x2C80	; 0x802c80 <xTimerQueue>
    1fc2:	90 91 81 2c 	lds	r25, 0x2C81	; 0x802c81 <xTimerQueue+0x1>
    1fc6:	89 2b       	or	r24, r25
    1fc8:	91 f0       	breq	.+36     	; 0x1fee <xTimerCreateTimerTask+0x3a>
    1fca:	0f 2e       	mov	r0, r31
    1fcc:	fe e7       	ldi	r31, 0x7E	; 126
    1fce:	ef 2e       	mov	r14, r31
    1fd0:	fc e2       	ldi	r31, 0x2C	; 44
    1fd2:	ff 2e       	mov	r15, r31
    1fd4:	f0 2d       	mov	r31, r0
    1fd6:	03 e0       	ldi	r16, 0x03	; 3
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	48 ec       	ldi	r20, 0xC8	; 200
    1fde:	50 e0       	ldi	r21, 0x00	; 0
    1fe0:	65 e0       	ldi	r22, 0x05	; 5
    1fe2:	70 e2       	ldi	r23, 0x20	; 32
    1fe4:	88 e4       	ldi	r24, 0x48	; 72
    1fe6:	92 e1       	ldi	r25, 0x12	; 18
    1fe8:	0e 94 3f 0b 	call	0x167e	; 0x167e <xTaskCreate>
    1fec:	01 c0       	rjmp	.+2      	; 0x1ff0 <xTimerCreateTimerTask+0x3c>
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	0f 91       	pop	r16
    1ff2:	ff 90       	pop	r15
    1ff4:	ef 90       	pop	r14
    1ff6:	08 95       	ret

00001ff8 <xTimerGenericCommand>:
    1ff8:	8f 92       	push	r8
    1ffa:	9f 92       	push	r9
    1ffc:	af 92       	push	r10
    1ffe:	bf 92       	push	r11
    2000:	cf 92       	push	r12
    2002:	df 92       	push	r13
    2004:	ef 92       	push	r14
    2006:	ff 92       	push	r15
    2008:	0f 93       	push	r16
    200a:	1f 93       	push	r17
    200c:	cf 93       	push	r28
    200e:	df 93       	push	r29
    2010:	cd b7       	in	r28, 0x3d	; 61
    2012:	de b7       	in	r29, 0x3e	; 62
    2014:	29 97       	sbiw	r28, 0x09	; 9
    2016:	cd bf       	out	0x3d, r28	; 61
    2018:	de bf       	out	0x3e, r29	; 62
    201a:	e0 91 80 2c 	lds	r30, 0x2C80	; 0x802c80 <xTimerQueue>
    201e:	f0 91 81 2c 	lds	r31, 0x2C81	; 0x802c81 <xTimerQueue+0x1>
    2022:	30 97       	sbiw	r30, 0x00	; 0
    2024:	89 f1       	breq	.+98     	; 0x2088 <__DATA_REGION_LENGTH__+0x88>
    2026:	69 83       	std	Y+1, r22	; 0x01
    2028:	2a 83       	std	Y+2, r18	; 0x02
    202a:	3b 83       	std	Y+3, r19	; 0x03
    202c:	4c 83       	std	Y+4, r20	; 0x04
    202e:	5d 83       	std	Y+5, r21	; 0x05
    2030:	8e 83       	std	Y+6, r24	; 0x06
    2032:	9f 83       	std	Y+7, r25	; 0x07
    2034:	66 30       	cpi	r22, 0x06	; 6
    2036:	fc f4       	brge	.+62     	; 0x2076 <__DATA_REGION_LENGTH__+0x76>
    2038:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <xTaskGetSchedulerState>
    203c:	82 30       	cpi	r24, 0x02	; 2
    203e:	69 f4       	brne	.+26     	; 0x205a <__DATA_REGION_LENGTH__+0x5a>
    2040:	00 e0       	ldi	r16, 0x00	; 0
    2042:	a7 01       	movw	r20, r14
    2044:	96 01       	movw	r18, r12
    2046:	be 01       	movw	r22, r28
    2048:	6f 5f       	subi	r22, 0xFF	; 255
    204a:	7f 4f       	sbci	r23, 0xFF	; 255
    204c:	80 91 80 2c 	lds	r24, 0x2C80	; 0x802c80 <xTimerQueue>
    2050:	90 91 81 2c 	lds	r25, 0x2C81	; 0x802c81 <xTimerQueue+0x1>
    2054:	0e 94 db 07 	call	0xfb6	; 0xfb6 <xQueueGenericSend>
    2058:	18 c0       	rjmp	.+48     	; 0x208a <__DATA_REGION_LENGTH__+0x8a>
    205a:	00 e0       	ldi	r16, 0x00	; 0
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	a9 01       	movw	r20, r18
    2062:	be 01       	movw	r22, r28
    2064:	6f 5f       	subi	r22, 0xFF	; 255
    2066:	7f 4f       	sbci	r23, 0xFF	; 255
    2068:	80 91 80 2c 	lds	r24, 0x2C80	; 0x802c80 <xTimerQueue>
    206c:	90 91 81 2c 	lds	r25, 0x2C81	; 0x802c81 <xTimerQueue+0x1>
    2070:	0e 94 db 07 	call	0xfb6	; 0xfb6 <xQueueGenericSend>
    2074:	0a c0       	rjmp	.+20     	; 0x208a <__DATA_REGION_LENGTH__+0x8a>
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	a8 01       	movw	r20, r16
    207a:	be 01       	movw	r22, r28
    207c:	6f 5f       	subi	r22, 0xFF	; 255
    207e:	7f 4f       	sbci	r23, 0xFF	; 255
    2080:	cf 01       	movw	r24, r30
    2082:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <xQueueGenericSendFromISR>
    2086:	01 c0       	rjmp	.+2      	; 0x208a <__DATA_REGION_LENGTH__+0x8a>
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	29 96       	adiw	r28, 0x09	; 9
    208c:	cd bf       	out	0x3d, r28	; 61
    208e:	de bf       	out	0x3e, r29	; 62
    2090:	df 91       	pop	r29
    2092:	cf 91       	pop	r28
    2094:	1f 91       	pop	r17
    2096:	0f 91       	pop	r16
    2098:	ff 90       	pop	r15
    209a:	ef 90       	pop	r14
    209c:	df 90       	pop	r13
    209e:	cf 90       	pop	r12
    20a0:	bf 90       	pop	r11
    20a2:	af 90       	pop	r10
    20a4:	9f 90       	pop	r9
    20a6:	8f 90       	pop	r8
    20a8:	08 95       	ret

000020aa <prvSwitchTimerLists>:
    20aa:	8f 92       	push	r8
    20ac:	9f 92       	push	r9
    20ae:	af 92       	push	r10
    20b0:	bf 92       	push	r11
    20b2:	cf 92       	push	r12
    20b4:	df 92       	push	r13
    20b6:	ef 92       	push	r14
    20b8:	ff 92       	push	r15
    20ba:	0f 93       	push	r16
    20bc:	1f 93       	push	r17
    20be:	cf 93       	push	r28
    20c0:	df 93       	push	r29
    20c2:	3c c0       	rjmp	.+120    	; 0x213c <prvSwitchTimerLists+0x92>
    20c4:	07 80       	ldd	r0, Z+7	; 0x07
    20c6:	f0 85       	ldd	r31, Z+8	; 0x08
    20c8:	e0 2d       	mov	r30, r0
    20ca:	80 80       	ld	r8, Z
    20cc:	91 80       	ldd	r9, Z+1	; 0x01
    20ce:	a2 80       	ldd	r10, Z+2	; 0x02
    20d0:	b3 80       	ldd	r11, Z+3	; 0x03
    20d2:	c0 85       	ldd	r28, Z+8	; 0x08
    20d4:	d1 85       	ldd	r29, Z+9	; 0x09
    20d6:	8e 01       	movw	r16, r28
    20d8:	0e 5f       	subi	r16, 0xFE	; 254
    20da:	1f 4f       	sbci	r17, 0xFF	; 255
    20dc:	c8 01       	movw	r24, r16
    20de:	0e 94 ae 04 	call	0x95c	; 0x95c <uxListRemove>
    20e2:	ed 89       	ldd	r30, Y+21	; 0x15
    20e4:	fe 89       	ldd	r31, Y+22	; 0x16
    20e6:	ce 01       	movw	r24, r28
    20e8:	19 95       	eicall
    20ea:	8a 89       	ldd	r24, Y+18	; 0x12
    20ec:	81 30       	cpi	r24, 0x01	; 1
    20ee:	31 f5       	brne	.+76     	; 0x213c <prvSwitchTimerLists+0x92>
    20f0:	8e 85       	ldd	r24, Y+14	; 0x0e
    20f2:	9f 85       	ldd	r25, Y+15	; 0x0f
    20f4:	a8 89       	ldd	r26, Y+16	; 0x10
    20f6:	b9 89       	ldd	r27, Y+17	; 0x11
    20f8:	88 0d       	add	r24, r8
    20fa:	99 1d       	adc	r25, r9
    20fc:	aa 1d       	adc	r26, r10
    20fe:	bb 1d       	adc	r27, r11
    2100:	88 16       	cp	r8, r24
    2102:	99 06       	cpc	r9, r25
    2104:	aa 06       	cpc	r10, r26
    2106:	bb 06       	cpc	r11, r27
    2108:	70 f4       	brcc	.+28     	; 0x2126 <prvSwitchTimerLists+0x7c>
    210a:	8a 83       	std	Y+2, r24	; 0x02
    210c:	9b 83       	std	Y+3, r25	; 0x03
    210e:	ac 83       	std	Y+4, r26	; 0x04
    2110:	bd 83       	std	Y+5, r27	; 0x05
    2112:	ca 87       	std	Y+10, r28	; 0x0a
    2114:	db 87       	std	Y+11, r29	; 0x0b
    2116:	b8 01       	movw	r22, r16
    2118:	80 91 84 2c 	lds	r24, 0x2C84	; 0x802c84 <pxCurrentTimerList>
    211c:	90 91 85 2c 	lds	r25, 0x2C85	; 0x802c85 <pxCurrentTimerList+0x1>
    2120:	0e 94 71 04 	call	0x8e2	; 0x8e2 <vListInsert>
    2124:	0b c0       	rjmp	.+22     	; 0x213c <prvSwitchTimerLists+0x92>
    2126:	c1 2c       	mov	r12, r1
    2128:	d1 2c       	mov	r13, r1
    212a:	76 01       	movw	r14, r12
    212c:	00 e0       	ldi	r16, 0x00	; 0
    212e:	10 e0       	ldi	r17, 0x00	; 0
    2130:	a5 01       	movw	r20, r10
    2132:	94 01       	movw	r18, r8
    2134:	60 e0       	ldi	r22, 0x00	; 0
    2136:	ce 01       	movw	r24, r28
    2138:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <xTimerGenericCommand>
    213c:	e0 91 84 2c 	lds	r30, 0x2C84	; 0x802c84 <pxCurrentTimerList>
    2140:	f0 91 85 2c 	lds	r31, 0x2C85	; 0x802c85 <pxCurrentTimerList+0x1>
    2144:	80 81       	ld	r24, Z
    2146:	81 11       	cpse	r24, r1
    2148:	bd cf       	rjmp	.-134    	; 0x20c4 <prvSwitchTimerLists+0x1a>
    214a:	80 91 82 2c 	lds	r24, 0x2C82	; 0x802c82 <pxOverflowTimerList>
    214e:	90 91 83 2c 	lds	r25, 0x2C83	; 0x802c83 <pxOverflowTimerList+0x1>
    2152:	80 93 84 2c 	sts	0x2C84, r24	; 0x802c84 <pxCurrentTimerList>
    2156:	90 93 85 2c 	sts	0x2C85, r25	; 0x802c85 <pxCurrentTimerList+0x1>
    215a:	e0 93 82 2c 	sts	0x2C82, r30	; 0x802c82 <pxOverflowTimerList>
    215e:	f0 93 83 2c 	sts	0x2C83, r31	; 0x802c83 <pxOverflowTimerList+0x1>
    2162:	df 91       	pop	r29
    2164:	cf 91       	pop	r28
    2166:	1f 91       	pop	r17
    2168:	0f 91       	pop	r16
    216a:	ff 90       	pop	r15
    216c:	ef 90       	pop	r14
    216e:	df 90       	pop	r13
    2170:	cf 90       	pop	r12
    2172:	bf 90       	pop	r11
    2174:	af 90       	pop	r10
    2176:	9f 90       	pop	r9
    2178:	8f 90       	pop	r8
    217a:	08 95       	ret

0000217c <prvSampleTimeNow>:
    217c:	cf 92       	push	r12
    217e:	df 92       	push	r13
    2180:	ef 92       	push	r14
    2182:	ff 92       	push	r15
    2184:	cf 93       	push	r28
    2186:	df 93       	push	r29
    2188:	ec 01       	movw	r28, r24
    218a:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <xTaskGetTickCount>
    218e:	6b 01       	movw	r12, r22
    2190:	7c 01       	movw	r14, r24
    2192:	80 91 7a 2c 	lds	r24, 0x2C7A	; 0x802c7a <xLastTime.4745>
    2196:	90 91 7b 2c 	lds	r25, 0x2C7B	; 0x802c7b <xLastTime.4745+0x1>
    219a:	a0 91 7c 2c 	lds	r26, 0x2C7C	; 0x802c7c <xLastTime.4745+0x2>
    219e:	b0 91 7d 2c 	lds	r27, 0x2C7D	; 0x802c7d <xLastTime.4745+0x3>
    21a2:	c8 16       	cp	r12, r24
    21a4:	d9 06       	cpc	r13, r25
    21a6:	ea 06       	cpc	r14, r26
    21a8:	fb 06       	cpc	r15, r27
    21aa:	28 f4       	brcc	.+10     	; 0x21b6 <prvSampleTimeNow+0x3a>
    21ac:	0e 94 55 10 	call	0x20aa	; 0x20aa <prvSwitchTimerLists>
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	88 83       	st	Y, r24
    21b4:	01 c0       	rjmp	.+2      	; 0x21b8 <prvSampleTimeNow+0x3c>
    21b6:	18 82       	st	Y, r1
    21b8:	c0 92 7a 2c 	sts	0x2C7A, r12	; 0x802c7a <xLastTime.4745>
    21bc:	d0 92 7b 2c 	sts	0x2C7B, r13	; 0x802c7b <xLastTime.4745+0x1>
    21c0:	e0 92 7c 2c 	sts	0x2C7C, r14	; 0x802c7c <xLastTime.4745+0x2>
    21c4:	f0 92 7d 2c 	sts	0x2C7D, r15	; 0x802c7d <xLastTime.4745+0x3>
    21c8:	c7 01       	movw	r24, r14
    21ca:	b6 01       	movw	r22, r12
    21cc:	df 91       	pop	r29
    21ce:	cf 91       	pop	r28
    21d0:	ff 90       	pop	r15
    21d2:	ef 90       	pop	r14
    21d4:	df 90       	pop	r13
    21d6:	cf 90       	pop	r12
    21d8:	08 95       	ret

000021da <prvProcessExpiredTimer>:
    21da:	4f 92       	push	r4
    21dc:	5f 92       	push	r5
    21de:	6f 92       	push	r6
    21e0:	7f 92       	push	r7
    21e2:	8f 92       	push	r8
    21e4:	9f 92       	push	r9
    21e6:	af 92       	push	r10
    21e8:	bf 92       	push	r11
    21ea:	cf 92       	push	r12
    21ec:	df 92       	push	r13
    21ee:	ef 92       	push	r14
    21f0:	ff 92       	push	r15
    21f2:	0f 93       	push	r16
    21f4:	1f 93       	push	r17
    21f6:	cf 93       	push	r28
    21f8:	df 93       	push	r29
    21fa:	4b 01       	movw	r8, r22
    21fc:	5c 01       	movw	r10, r24
    21fe:	29 01       	movw	r4, r18
    2200:	3a 01       	movw	r6, r20
    2202:	e0 91 84 2c 	lds	r30, 0x2C84	; 0x802c84 <pxCurrentTimerList>
    2206:	f0 91 85 2c 	lds	r31, 0x2C85	; 0x802c85 <pxCurrentTimerList+0x1>
    220a:	07 80       	ldd	r0, Z+7	; 0x07
    220c:	f0 85       	ldd	r31, Z+8	; 0x08
    220e:	e0 2d       	mov	r30, r0
    2210:	c0 85       	ldd	r28, Z+8	; 0x08
    2212:	d1 85       	ldd	r29, Z+9	; 0x09
    2214:	ce 01       	movw	r24, r28
    2216:	02 96       	adiw	r24, 0x02	; 2
    2218:	0e 94 ae 04 	call	0x95c	; 0x95c <uxListRemove>
    221c:	8a 89       	ldd	r24, Y+18	; 0x12
    221e:	81 30       	cpi	r24, 0x01	; 1
    2220:	e1 f4       	brne	.+56     	; 0x225a <prvProcessExpiredTimer+0x80>
    2222:	4e 85       	ldd	r20, Y+14	; 0x0e
    2224:	5f 85       	ldd	r21, Y+15	; 0x0f
    2226:	68 89       	ldd	r22, Y+16	; 0x10
    2228:	79 89       	ldd	r23, Y+17	; 0x11
    222a:	48 0d       	add	r20, r8
    222c:	59 1d       	adc	r21, r9
    222e:	6a 1d       	adc	r22, r10
    2230:	7b 1d       	adc	r23, r11
    2232:	75 01       	movw	r14, r10
    2234:	64 01       	movw	r12, r8
    2236:	93 01       	movw	r18, r6
    2238:	82 01       	movw	r16, r4
    223a:	ce 01       	movw	r24, r28
    223c:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <prvInsertTimerInActiveList>
    2240:	88 23       	and	r24, r24
    2242:	59 f0       	breq	.+22     	; 0x225a <prvProcessExpiredTimer+0x80>
    2244:	c1 2c       	mov	r12, r1
    2246:	d1 2c       	mov	r13, r1
    2248:	76 01       	movw	r14, r12
    224a:	00 e0       	ldi	r16, 0x00	; 0
    224c:	10 e0       	ldi	r17, 0x00	; 0
    224e:	a5 01       	movw	r20, r10
    2250:	94 01       	movw	r18, r8
    2252:	60 e0       	ldi	r22, 0x00	; 0
    2254:	ce 01       	movw	r24, r28
    2256:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <xTimerGenericCommand>
    225a:	ed 89       	ldd	r30, Y+21	; 0x15
    225c:	fe 89       	ldd	r31, Y+22	; 0x16
    225e:	ce 01       	movw	r24, r28
    2260:	19 95       	eicall
    2262:	df 91       	pop	r29
    2264:	cf 91       	pop	r28
    2266:	1f 91       	pop	r17
    2268:	0f 91       	pop	r16
    226a:	ff 90       	pop	r15
    226c:	ef 90       	pop	r14
    226e:	df 90       	pop	r13
    2270:	cf 90       	pop	r12
    2272:	bf 90       	pop	r11
    2274:	af 90       	pop	r10
    2276:	9f 90       	pop	r9
    2278:	8f 90       	pop	r8
    227a:	7f 90       	pop	r7
    227c:	6f 90       	pop	r6
    227e:	5f 90       	pop	r5
    2280:	4f 90       	pop	r4
    2282:	08 95       	ret

00002284 <prvProcessTimerOrBlockTask>:
    2284:	8f 92       	push	r8
    2286:	9f 92       	push	r9
    2288:	af 92       	push	r10
    228a:	bf 92       	push	r11
    228c:	cf 92       	push	r12
    228e:	df 92       	push	r13
    2290:	ef 92       	push	r14
    2292:	ff 92       	push	r15
    2294:	1f 93       	push	r17
    2296:	cf 93       	push	r28
    2298:	df 93       	push	r29
    229a:	1f 92       	push	r1
    229c:	cd b7       	in	r28, 0x3d	; 61
    229e:	de b7       	in	r29, 0x3e	; 62
    22a0:	6b 01       	movw	r12, r22
    22a2:	7c 01       	movw	r14, r24
    22a4:	14 2f       	mov	r17, r20
    22a6:	0e 94 ce 0b 	call	0x179c	; 0x179c <vTaskSuspendAll>
    22aa:	ce 01       	movw	r24, r28
    22ac:	01 96       	adiw	r24, 0x01	; 1
    22ae:	0e 94 be 10 	call	0x217c	; 0x217c <prvSampleTimeNow>
    22b2:	4b 01       	movw	r8, r22
    22b4:	5c 01       	movw	r10, r24
    22b6:	89 81       	ldd	r24, Y+1	; 0x01
    22b8:	81 11       	cpse	r24, r1
    22ba:	2e c0       	rjmp	.+92     	; 0x2318 <prvProcessTimerOrBlockTask+0x94>
    22bc:	11 11       	cpse	r17, r1
    22be:	0e c0       	rjmp	.+28     	; 0x22dc <prvProcessTimerOrBlockTask+0x58>
    22c0:	8c 14       	cp	r8, r12
    22c2:	9d 04       	cpc	r9, r13
    22c4:	ae 04       	cpc	r10, r14
    22c6:	bf 04       	cpc	r11, r15
    22c8:	48 f0       	brcs	.+18     	; 0x22dc <prvProcessTimerOrBlockTask+0x58>
    22ca:	0e 94 b6 0c 	call	0x196c	; 0x196c <xTaskResumeAll>
    22ce:	a5 01       	movw	r20, r10
    22d0:	94 01       	movw	r18, r8
    22d2:	c7 01       	movw	r24, r14
    22d4:	b6 01       	movw	r22, r12
    22d6:	0e 94 ed 10 	call	0x21da	; 0x21da <prvProcessExpiredTimer>
    22da:	20 c0       	rjmp	.+64     	; 0x231c <prvProcessTimerOrBlockTask+0x98>
    22dc:	11 23       	and	r17, r17
    22de:	41 f0       	breq	.+16     	; 0x22f0 <prvProcessTimerOrBlockTask+0x6c>
    22e0:	e0 91 82 2c 	lds	r30, 0x2C82	; 0x802c82 <pxOverflowTimerList>
    22e4:	f0 91 83 2c 	lds	r31, 0x2C83	; 0x802c83 <pxOverflowTimerList+0x1>
    22e8:	80 81       	ld	r24, Z
    22ea:	11 e0       	ldi	r17, 0x01	; 1
    22ec:	81 11       	cpse	r24, r1
    22ee:	10 e0       	ldi	r17, 0x00	; 0
    22f0:	b7 01       	movw	r22, r14
    22f2:	a6 01       	movw	r20, r12
    22f4:	48 19       	sub	r20, r8
    22f6:	59 09       	sbc	r21, r9
    22f8:	6a 09       	sbc	r22, r10
    22fa:	7b 09       	sbc	r23, r11
    22fc:	21 2f       	mov	r18, r17
    22fe:	80 91 80 2c 	lds	r24, 0x2C80	; 0x802c80 <xTimerQueue>
    2302:	90 91 81 2c 	lds	r25, 0x2C81	; 0x802c81 <xTimerQueue+0x1>
    2306:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <vQueueWaitForMessageRestricted>
    230a:	0e 94 b6 0c 	call	0x196c	; 0x196c <xTaskResumeAll>
    230e:	81 11       	cpse	r24, r1
    2310:	05 c0       	rjmp	.+10     	; 0x231c <prvProcessTimerOrBlockTask+0x98>
    2312:	0e 94 a6 05 	call	0xb4c	; 0xb4c <vPortYield>
    2316:	02 c0       	rjmp	.+4      	; 0x231c <prvProcessTimerOrBlockTask+0x98>
    2318:	0e 94 b6 0c 	call	0x196c	; 0x196c <xTaskResumeAll>
    231c:	0f 90       	pop	r0
    231e:	df 91       	pop	r29
    2320:	cf 91       	pop	r28
    2322:	1f 91       	pop	r17
    2324:	ff 90       	pop	r15
    2326:	ef 90       	pop	r14
    2328:	df 90       	pop	r13
    232a:	cf 90       	pop	r12
    232c:	bf 90       	pop	r11
    232e:	af 90       	pop	r10
    2330:	9f 90       	pop	r9
    2332:	8f 90       	pop	r8
    2334:	08 95       	ret

00002336 <prvProcessReceivedCommands>:
    2336:	af 92       	push	r10
    2338:	bf 92       	push	r11
    233a:	cf 92       	push	r12
    233c:	df 92       	push	r13
    233e:	ef 92       	push	r14
    2340:	ff 92       	push	r15
    2342:	0f 93       	push	r16
    2344:	1f 93       	push	r17
    2346:	cf 93       	push	r28
    2348:	df 93       	push	r29
    234a:	cd b7       	in	r28, 0x3d	; 61
    234c:	de b7       	in	r29, 0x3e	; 62
    234e:	2a 97       	sbiw	r28, 0x0a	; 10
    2350:	cd bf       	out	0x3d, r28	; 61
    2352:	de bf       	out	0x3e, r29	; 62
    2354:	81 c0       	rjmp	.+258    	; 0x2458 <prvProcessReceivedCommands+0x122>
    2356:	89 81       	ldd	r24, Y+1	; 0x01
    2358:	88 23       	and	r24, r24
    235a:	4c f4       	brge	.+18     	; 0x236e <prvProcessReceivedCommands+0x38>
    235c:	ea 81       	ldd	r30, Y+2	; 0x02
    235e:	fb 81       	ldd	r31, Y+3	; 0x03
    2360:	4e 81       	ldd	r20, Y+6	; 0x06
    2362:	5f 81       	ldd	r21, Y+7	; 0x07
    2364:	68 85       	ldd	r22, Y+8	; 0x08
    2366:	79 85       	ldd	r23, Y+9	; 0x09
    2368:	8c 81       	ldd	r24, Y+4	; 0x04
    236a:	9d 81       	ldd	r25, Y+5	; 0x05
    236c:	19 95       	eicall
    236e:	89 81       	ldd	r24, Y+1	; 0x01
    2370:	88 23       	and	r24, r24
    2372:	0c f4       	brge	.+2      	; 0x2376 <prvProcessReceivedCommands+0x40>
    2374:	71 c0       	rjmp	.+226    	; 0x2458 <prvProcessReceivedCommands+0x122>
    2376:	ae 80       	ldd	r10, Y+6	; 0x06
    2378:	bf 80       	ldd	r11, Y+7	; 0x07
    237a:	d5 01       	movw	r26, r10
    237c:	1c 96       	adiw	r26, 0x0c	; 12
    237e:	8d 91       	ld	r24, X+
    2380:	9c 91       	ld	r25, X
    2382:	1d 97       	sbiw	r26, 0x0d	; 13
    2384:	89 2b       	or	r24, r25
    2386:	21 f0       	breq	.+8      	; 0x2390 <prvProcessReceivedCommands+0x5a>
    2388:	c5 01       	movw	r24, r10
    238a:	02 96       	adiw	r24, 0x02	; 2
    238c:	0e 94 ae 04 	call	0x95c	; 0x95c <uxListRemove>
    2390:	ce 01       	movw	r24, r28
    2392:	0a 96       	adiw	r24, 0x0a	; 10
    2394:	0e 94 be 10 	call	0x217c	; 0x217c <prvSampleTimeNow>
    2398:	8b 01       	movw	r16, r22
    239a:	9c 01       	movw	r18, r24
    239c:	89 81       	ldd	r24, Y+1	; 0x01
    239e:	08 2e       	mov	r0, r24
    23a0:	00 0c       	add	r0, r0
    23a2:	99 0b       	sbc	r25, r25
    23a4:	aa 0b       	sbc	r26, r26
    23a6:	bb 0b       	sbc	r27, r27
    23a8:	8a 30       	cpi	r24, 0x0A	; 10
    23aa:	91 05       	cpc	r25, r1
    23ac:	08 f0       	brcs	.+2      	; 0x23b0 <prvProcessReceivedCommands+0x7a>
    23ae:	54 c0       	rjmp	.+168    	; 0x2458 <prvProcessReceivedCommands+0x122>
    23b0:	fc 01       	movw	r30, r24
    23b2:	88 27       	eor	r24, r24
    23b4:	e2 50       	subi	r30, 0x02	; 2
    23b6:	ff 4f       	sbci	r31, 0xFF	; 255
    23b8:	8f 4f       	sbci	r24, 0xFF	; 255
    23ba:	0c 94 bd 1c 	jmp	0x397a	; 0x397a <__tablejump2__>
    23be:	ca 80       	ldd	r12, Y+2	; 0x02
    23c0:	db 80       	ldd	r13, Y+3	; 0x03
    23c2:	ec 80       	ldd	r14, Y+4	; 0x04
    23c4:	fd 80       	ldd	r15, Y+5	; 0x05
    23c6:	f5 01       	movw	r30, r10
    23c8:	46 85       	ldd	r20, Z+14	; 0x0e
    23ca:	57 85       	ldd	r21, Z+15	; 0x0f
    23cc:	60 89       	ldd	r22, Z+16	; 0x10
    23ce:	71 89       	ldd	r23, Z+17	; 0x11
    23d0:	4c 0d       	add	r20, r12
    23d2:	5d 1d       	adc	r21, r13
    23d4:	6e 1d       	adc	r22, r14
    23d6:	7f 1d       	adc	r23, r15
    23d8:	c5 01       	movw	r24, r10
    23da:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <prvInsertTimerInActiveList>
    23de:	88 23       	and	r24, r24
    23e0:	d9 f1       	breq	.+118    	; 0x2458 <prvProcessReceivedCommands+0x122>
    23e2:	d5 01       	movw	r26, r10
    23e4:	55 96       	adiw	r26, 0x15	; 21
    23e6:	ed 91       	ld	r30, X+
    23e8:	fc 91       	ld	r31, X
    23ea:	56 97       	sbiw	r26, 0x16	; 22
    23ec:	c5 01       	movw	r24, r10
    23ee:	19 95       	eicall
    23f0:	f5 01       	movw	r30, r10
    23f2:	82 89       	ldd	r24, Z+18	; 0x12
    23f4:	81 30       	cpi	r24, 0x01	; 1
    23f6:	81 f5       	brne	.+96     	; 0x2458 <prvProcessReceivedCommands+0x122>
    23f8:	4a 81       	ldd	r20, Y+2	; 0x02
    23fa:	5b 81       	ldd	r21, Y+3	; 0x03
    23fc:	6c 81       	ldd	r22, Y+4	; 0x04
    23fe:	7d 81       	ldd	r23, Y+5	; 0x05
    2400:	86 85       	ldd	r24, Z+14	; 0x0e
    2402:	97 85       	ldd	r25, Z+15	; 0x0f
    2404:	a0 89       	ldd	r26, Z+16	; 0x10
    2406:	b1 89       	ldd	r27, Z+17	; 0x11
    2408:	9a 01       	movw	r18, r20
    240a:	ab 01       	movw	r20, r22
    240c:	28 0f       	add	r18, r24
    240e:	39 1f       	adc	r19, r25
    2410:	4a 1f       	adc	r20, r26
    2412:	5b 1f       	adc	r21, r27
    2414:	c1 2c       	mov	r12, r1
    2416:	d1 2c       	mov	r13, r1
    2418:	76 01       	movw	r14, r12
    241a:	00 e0       	ldi	r16, 0x00	; 0
    241c:	10 e0       	ldi	r17, 0x00	; 0
    241e:	60 e0       	ldi	r22, 0x00	; 0
    2420:	c5 01       	movw	r24, r10
    2422:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <xTimerGenericCommand>
    2426:	18 c0       	rjmp	.+48     	; 0x2458 <prvProcessReceivedCommands+0x122>
    2428:	4a 81       	ldd	r20, Y+2	; 0x02
    242a:	5b 81       	ldd	r21, Y+3	; 0x03
    242c:	6c 81       	ldd	r22, Y+4	; 0x04
    242e:	7d 81       	ldd	r23, Y+5	; 0x05
    2430:	d5 01       	movw	r26, r10
    2432:	1e 96       	adiw	r26, 0x0e	; 14
    2434:	4d 93       	st	X+, r20
    2436:	5d 93       	st	X+, r21
    2438:	6d 93       	st	X+, r22
    243a:	7c 93       	st	X, r23
    243c:	51 97       	sbiw	r26, 0x11	; 17
    243e:	40 0f       	add	r20, r16
    2440:	51 1f       	adc	r21, r17
    2442:	62 1f       	adc	r22, r18
    2444:	73 1f       	adc	r23, r19
    2446:	68 01       	movw	r12, r16
    2448:	79 01       	movw	r14, r18
    244a:	c5 01       	movw	r24, r10
    244c:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <prvInsertTimerInActiveList>
    2450:	03 c0       	rjmp	.+6      	; 0x2458 <prvProcessReceivedCommands+0x122>
    2452:	c5 01       	movw	r24, r10
    2454:	0e 94 3a 04 	call	0x874	; 0x874 <vPortFree>
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	a9 01       	movw	r20, r18
    245e:	be 01       	movw	r22, r28
    2460:	6f 5f       	subi	r22, 0xFF	; 255
    2462:	7f 4f       	sbci	r23, 0xFF	; 255
    2464:	80 91 80 2c 	lds	r24, 0x2C80	; 0x802c80 <xTimerQueue>
    2468:	90 91 81 2c 	lds	r25, 0x2C81	; 0x802c81 <xTimerQueue+0x1>
    246c:	0e 94 bf 08 	call	0x117e	; 0x117e <xQueueReceive>
    2470:	81 11       	cpse	r24, r1
    2472:	71 cf       	rjmp	.-286    	; 0x2356 <prvProcessReceivedCommands+0x20>
    2474:	2a 96       	adiw	r28, 0x0a	; 10
    2476:	cd bf       	out	0x3d, r28	; 61
    2478:	de bf       	out	0x3e, r29	; 62
    247a:	df 91       	pop	r29
    247c:	cf 91       	pop	r28
    247e:	1f 91       	pop	r17
    2480:	0f 91       	pop	r16
    2482:	ff 90       	pop	r15
    2484:	ef 90       	pop	r14
    2486:	df 90       	pop	r13
    2488:	cf 90       	pop	r12
    248a:	bf 90       	pop	r11
    248c:	af 90       	pop	r10
    248e:	08 95       	ret

00002490 <prvTimerTask>:
    2490:	cf 93       	push	r28
    2492:	df 93       	push	r29
    2494:	1f 92       	push	r1
    2496:	cd b7       	in	r28, 0x3d	; 61
    2498:	de b7       	in	r29, 0x3e	; 62
    249a:	ce 01       	movw	r24, r28
    249c:	01 96       	adiw	r24, 0x01	; 1
    249e:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <prvGetNextExpireTime>
    24a2:	49 81       	ldd	r20, Y+1	; 0x01
    24a4:	0e 94 42 11 	call	0x2284	; 0x2284 <prvProcessTimerOrBlockTask>
    24a8:	0e 94 9b 11 	call	0x2336	; 0x2336 <prvProcessReceivedCommands>
    24ac:	f6 cf       	rjmp	.-20     	; 0x249a <prvTimerTask+0xa>

000024ae <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
    24ae:	0f 93       	push	r16
    24b0:	1f 93       	push	r17
    24b2:	cf 93       	push	r28
    24b4:	df 93       	push	r29
    24b6:	cd b7       	in	r28, 0x3d	; 61
    24b8:	de b7       	in	r29, 0x3e	; 62
    24ba:	29 97       	sbiw	r28, 0x09	; 9
    24bc:	cd bf       	out	0x3d, r28	; 61
    24be:	de bf       	out	0x3e, r29	; 62
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
    24c0:	ee ef       	ldi	r30, 0xFE	; 254
    24c2:	e9 83       	std	Y+1, r30	; 0x01
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
    24c4:	8a 83       	std	Y+2, r24	; 0x02
    24c6:	9b 83       	std	Y+3, r25	; 0x03
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
    24c8:	6c 83       	std	Y+4, r22	; 0x04
    24ca:	7d 83       	std	Y+5, r23	; 0x05
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
    24cc:	2e 83       	std	Y+6, r18	; 0x06
    24ce:	3f 83       	std	Y+7, r19	; 0x07
    24d0:	48 87       	std	Y+8, r20	; 0x08
    24d2:	59 87       	std	Y+9, r21	; 0x09

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	a8 01       	movw	r20, r16
    24d8:	be 01       	movw	r22, r28
    24da:	6f 5f       	subi	r22, 0xFF	; 255
    24dc:	7f 4f       	sbci	r23, 0xFF	; 255
    24de:	80 91 80 2c 	lds	r24, 0x2C80	; 0x802c80 <xTimerQueue>
    24e2:	90 91 81 2c 	lds	r25, 0x2C81	; 0x802c81 <xTimerQueue+0x1>
    24e6:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
    24ea:	29 96       	adiw	r28, 0x09	; 9
    24ec:	cd bf       	out	0x3d, r28	; 61
    24ee:	de bf       	out	0x3e, r29	; 62
    24f0:	df 91       	pop	r29
    24f2:	cf 91       	pop	r28
    24f4:	1f 91       	pop	r17
    24f6:	0f 91       	pop	r16
    24f8:	08 95       	ret

000024fa <vInitClock>:
#include "clksys_driver.h"


void vInitClock(void)
{
	CLKSYS_Enable( OSC_RC2MEN_bm );
    24fa:	e0 e5       	ldi	r30, 0x50	; 80
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	80 81       	ld	r24, Z
    2500:	81 60       	ori	r24, 0x01	; 1
    2502:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_RC2MRDY_bm ) == 0 );
    2504:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
    2508:	80 ff       	sbrs	r24, 0
    250a:	fc cf       	rjmp	.-8      	; 0x2504 <vInitClock+0xa>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC2M_gc );
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	0e 94 43 02 	call	0x486	; 0x486 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC32KEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
    2512:	8e e1       	ldi	r24, 0x1E	; 30
    2514:	0e 94 33 02 	call	0x466	; 0x466 <CLKSYS_Disable>
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    2518:	60 e0       	ldi	r22, 0x00	; 0
    251a:	80 e0       	ldi	r24, 0x00	; 0
    251c:	0e 94 3d 02 	call	0x47a	; 0x47a <CLKSYS_Prescalers_Config>
	CLKSYS_XOSC_Config( OSC_FRQRANGE_2TO9_gc,false,OSC_XOSCSEL_XTAL_256CLK_gc );
    2520:	43 e0       	ldi	r20, 0x03	; 3
    2522:	60 e0       	ldi	r22, 0x00	; 0
    2524:	80 e4       	ldi	r24, 0x40	; 64
    2526:	0e 94 24 02 	call	0x448	; 0x448 <CLKSYS_XOSC_Config>
	CLKSYS_Enable( OSC_XOSCEN_bm );
    252a:	e0 e5       	ldi	r30, 0x50	; 80
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	80 81       	ld	r24, Z
    2530:	88 60       	ori	r24, 0x08	; 8
    2532:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
    2534:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
    2538:	83 ff       	sbrs	r24, 3
    253a:	fc cf       	rjmp	.-8      	; 0x2534 <vInitClock+0x3a>
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 4 );
    253c:	64 e0       	ldi	r22, 0x04	; 4
    253e:	80 ec       	ldi	r24, 0xC0	; 192
    2540:	0e 94 2e 02 	call	0x45c	; 0x45c <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
    2544:	e0 e5       	ldi	r30, 0x50	; 80
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	80 81       	ld	r24, Z
    254a:	80 61       	ori	r24, 0x10	; 16
    254c:	80 83       	st	Z, r24
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    254e:	60 e0       	ldi	r22, 0x00	; 0
    2550:	80 e0       	ldi	r24, 0x00	; 0
    2552:	0e 94 3d 02 	call	0x47a	; 0x47a <CLKSYS_Prescalers_Config>
	do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
    2556:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
    255a:	84 ff       	sbrs	r24, 4
    255c:	fc cf       	rjmp	.-8      	; 0x2556 <vInitClock+0x5c>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
    255e:	84 e0       	ldi	r24, 0x04	; 4
    2560:	0e 94 43 02 	call	0x486	; 0x486 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC2MEN_bm | OSC_RC32KEN_bm);
    2564:	87 e0       	ldi	r24, 0x07	; 7
    2566:	0e 94 33 02 	call	0x466	; 0x466 <CLKSYS_Disable>
    256a:	08 95       	ret

0000256c <vPiLeibniz>:
}

void vPiLeibniz(void* pvParameters)
{
	uint32_t CurIterations = 0;
	float NextSign = 1.0;
    256c:	0f 2e       	mov	r0, r31
    256e:	81 2c       	mov	r8, r1
    2570:	91 2c       	mov	r9, r1
    2572:	f0 e8       	ldi	r31, 0x80	; 128
    2574:	af 2e       	mov	r10, r31
    2576:	ff e3       	ldi	r31, 0x3F	; 63
    2578:	bf 2e       	mov	r11, r31
    257a:	f0 2d       	mov	r31, r0
	return 0;
}

void vPiLeibniz(void* pvParameters)
{
	uint32_t CurIterations = 0;
    257c:	c1 2c       	mov	r12, r1
    257e:	d1 2c       	mov	r13, r1
    2580:	76 01       	movw	r14, r12
	float NextSign = 1.0;
		while (1)
		{
			LeibnizPi = LeibnizPi + (NextSign / (2 * CurIterations + 1)) * 4;
    2582:	d7 01       	movw	r26, r14
    2584:	c6 01       	movw	r24, r12
    2586:	88 0f       	add	r24, r24
    2588:	99 1f       	adc	r25, r25
    258a:	aa 1f       	adc	r26, r26
    258c:	bb 1f       	adc	r27, r27
    258e:	bc 01       	movw	r22, r24
    2590:	cd 01       	movw	r24, r26
    2592:	6f 5f       	subi	r22, 0xFF	; 255
    2594:	7f 4f       	sbci	r23, 0xFF	; 255
    2596:	8f 4f       	sbci	r24, 0xFF	; 255
    2598:	9f 4f       	sbci	r25, 0xFF	; 255
    259a:	0e 94 3e 1b 	call	0x367c	; 0x367c <__floatunsisf>
    259e:	9b 01       	movw	r18, r22
    25a0:	ac 01       	movw	r20, r24
    25a2:	c5 01       	movw	r24, r10
    25a4:	b4 01       	movw	r22, r8
    25a6:	0e 94 96 1a 	call	0x352c	; 0x352c <__divsf3>
    25aa:	20 e0       	ldi	r18, 0x00	; 0
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	40 e8       	ldi	r20, 0x80	; 128
    25b0:	50 e4       	ldi	r21, 0x40	; 64
    25b2:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    25b6:	20 91 a0 2c 	lds	r18, 0x2CA0	; 0x802ca0 <LeibnizPi>
    25ba:	30 91 a1 2c 	lds	r19, 0x2CA1	; 0x802ca1 <LeibnizPi+0x1>
    25be:	40 91 a2 2c 	lds	r20, 0x2CA2	; 0x802ca2 <LeibnizPi+0x2>
    25c2:	50 91 a3 2c 	lds	r21, 0x2CA3	; 0x802ca3 <LeibnizPi+0x3>
    25c6:	0e 94 25 1a 	call	0x344a	; 0x344a <__addsf3>
    25ca:	60 93 a0 2c 	sts	0x2CA0, r22	; 0x802ca0 <LeibnizPi>
    25ce:	70 93 a1 2c 	sts	0x2CA1, r23	; 0x802ca1 <LeibnizPi+0x1>
    25d2:	80 93 a2 2c 	sts	0x2CA2, r24	; 0x802ca2 <LeibnizPi+0x2>
    25d6:	90 93 a3 2c 	sts	0x2CA3, r25	; 0x802ca3 <LeibnizPi+0x3>
			NextSign = -NextSign;
    25da:	b7 fa       	bst	r11, 7
    25dc:	b0 94       	com	r11
    25de:	b7 f8       	bld	r11, 7
    25e0:	b0 94       	com	r11
			CurIterations++;
    25e2:	8f ef       	ldi	r24, 0xFF	; 255
    25e4:	c8 1a       	sub	r12, r24
    25e6:	d8 0a       	sbc	r13, r24
    25e8:	e8 0a       	sbc	r14, r24
    25ea:	f8 0a       	sbc	r15, r24
			vTaskDelay(10/portTICK_RATE_MS);
    25ec:	6a e0       	ldi	r22, 0x0A	; 10
    25ee:	70 e0       	ldi	r23, 0x00	; 0
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <vTaskDelay>
    25f8:	c4 cf       	rjmp	.-120    	; 0x2582 <vPiLeibniz+0x16>

000025fa <vAreaPi>:

void vAreaPi(void* pvParameters)
{
	uint32_t Iteratiion = 1;
	double CurrentApprox = 1;
	double CurrentSqrt = 0;
    25fa:	81 2c       	mov	r8, r1
    25fc:	91 2c       	mov	r9, r1
    25fe:	54 01       	movw	r10, r8
}

void vAreaPi(void* pvParameters)
{
	uint32_t Iteratiion = 1;
	double CurrentApprox = 1;
    2600:	0f 2e       	mov	r0, r31
    2602:	c1 2c       	mov	r12, r1
    2604:	d1 2c       	mov	r13, r1
    2606:	f0 e8       	ldi	r31, 0x80	; 128
    2608:	ef 2e       	mov	r14, r31
    260a:	ff e3       	ldi	r31, 0x3F	; 63
    260c:	ff 2e       	mov	r15, r31
    260e:	f0 2d       	mov	r31, r0
	double CurrentSqrt = 0;
	
	while(1)
	{
		CurrentSqrt = sqrt(2 + CurrentSqrt); 
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	40 e0       	ldi	r20, 0x00	; 0
    2616:	50 e4       	ldi	r21, 0x40	; 64
    2618:	c5 01       	movw	r24, r10
    261a:	b4 01       	movw	r22, r8
    261c:	0e 94 25 1a 	call	0x344a	; 0x344a <__addsf3>
    2620:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <sqrt>
    2624:	4b 01       	movw	r8, r22
    2626:	5c 01       	movw	r10, r24
		
		CurrentApprox = CurrentApprox * (CurrentSqrt/2.0);
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	40 e0       	ldi	r20, 0x00	; 0
    262e:	5f e3       	ldi	r21, 0x3F	; 63
    2630:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    2634:	9b 01       	movw	r18, r22
    2636:	ac 01       	movw	r20, r24
    2638:	c7 01       	movw	r24, r14
    263a:	b6 01       	movw	r22, r12
    263c:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    2640:	6b 01       	movw	r12, r22
    2642:	7c 01       	movw	r14, r24
		
		AreaPi = 2 / CurrentApprox;
    2644:	9b 01       	movw	r18, r22
    2646:	ac 01       	movw	r20, r24
    2648:	60 e0       	ldi	r22, 0x00	; 0
    264a:	70 e0       	ldi	r23, 0x00	; 0
    264c:	80 e0       	ldi	r24, 0x00	; 0
    264e:	90 e4       	ldi	r25, 0x40	; 64
    2650:	0e 94 96 1a 	call	0x352c	; 0x352c <__divsf3>
    2654:	60 93 9c 2c 	sts	0x2C9C, r22	; 0x802c9c <AreaPi>
    2658:	70 93 9d 2c 	sts	0x2C9D, r23	; 0x802c9d <AreaPi+0x1>
    265c:	80 93 9e 2c 	sts	0x2C9E, r24	; 0x802c9e <AreaPi+0x2>
    2660:	90 93 9f 2c 	sts	0x2C9F, r25	; 0x802c9f <AreaPi+0x3>
		Iteratiion++;
		vTaskDelay(10/portTICK_RATE_MS);
    2664:	6a e0       	ldi	r22, 0x0A	; 10
    2666:	70 e0       	ldi	r23, 0x00	; 0
    2668:	80 e0       	ldi	r24, 0x00	; 0
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <vTaskDelay>
    2670:	cf cf       	rjmp	.-98     	; 0x2610 <vAreaPi+0x16>

00002672 <controllerTask>:
		vTaskDelay((1000/BUTTON_UPDATE_FREQUENCY_HZ)/portTICK_RATE_MS);
	}
}
*/

void controllerTask(void* pvParameters) {
    2672:	cf 93       	push	r28
    2674:	df 93       	push	r29
    2676:	cd b7       	in	r28, 0x3d	; 61
    2678:	de b7       	in	r29, 0x3e	; 62
    267a:	2c 97       	sbiw	r28, 0x0c	; 12
    267c:	cd bf       	out	0x3d, r28	; 61
    267e:	de bf       	out	0x3e, r29	; 62
	initButtons();
    2680:	0e 94 49 01 	call	0x292	; 0x292 <initButtons>
	for(;;) {
		updateButtons();
    2684:	0e 94 54 01 	call	0x2a8	; 0x2a8 <updateButtons>
		if(getButtonPress(BUTTON1) == SHORT_PRESSED) {
    2688:	80 e0       	ldi	r24, 0x00	; 0
    268a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <getButtonPress>
    268e:	81 30       	cpi	r24, 0x01	; 1
    2690:	11 f5       	brne	.+68     	; 0x26d6 <controllerTask+0x64>
			char pistring[12];
			sprintf(&pistring[0], "PI: %.8f", M_PI);
    2692:	80 e4       	ldi	r24, 0x40	; 64
    2694:	8f 93       	push	r24
    2696:	89 e4       	ldi	r24, 0x49	; 73
    2698:	8f 93       	push	r24
    269a:	8f e0       	ldi	r24, 0x0F	; 15
    269c:	8f 93       	push	r24
    269e:	8b ed       	ldi	r24, 0xDB	; 219
    26a0:	8f 93       	push	r24
    26a2:	8d e0       	ldi	r24, 0x0D	; 13
    26a4:	90 e2       	ldi	r25, 0x20	; 32
    26a6:	9f 93       	push	r25
    26a8:	8f 93       	push	r24
    26aa:	8e 01       	movw	r16, r28
    26ac:	0f 5f       	subi	r16, 0xFF	; 255
    26ae:	1f 4f       	sbci	r17, 0xFF	; 255
    26b0:	1f 93       	push	r17
    26b2:	0f 93       	push	r16
    26b4:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <sprintf>
			vDisplayWriteStringAtPos(1,0, "%s", pistring);
    26b8:	1f 93       	push	r17
    26ba:	0f 93       	push	r16
    26bc:	86 e1       	ldi	r24, 0x16	; 22
    26be:	90 e2       	ldi	r25, 0x20	; 32
    26c0:	9f 93       	push	r25
    26c2:	8f 93       	push	r24
    26c4:	1f 92       	push	r1
    26c6:	1f 92       	push	r1
    26c8:	1f 92       	push	r1
    26ca:	81 e0       	ldi	r24, 0x01	; 1
    26cc:	8f 93       	push	r24
    26ce:	0e 94 12 1a 	call	0x3424	; 0x3424 <vDisplayWriteStringAtPos>
    26d2:	cd bf       	out	0x3d, r28	; 61
    26d4:	de bf       	out	0x3e, r29	; 62
		}
		if(getButtonPress(BUTTON2) == SHORT_PRESSED) {
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <getButtonPress>
			
		}
		if(getButtonPress(BUTTON3) == SHORT_PRESSED) {
    26dc:	82 e0       	ldi	r24, 0x02	; 2
    26de:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <getButtonPress>
			
		}
		if(getButtonPress(BUTTON4) == SHORT_PRESSED) {
    26e2:	83 e0       	ldi	r24, 0x03	; 3
    26e4:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <getButtonPress>
			
		}
		if(getButtonPress(BUTTON1) == LONG_PRESSED) {
    26e8:	80 e0       	ldi	r24, 0x00	; 0
    26ea:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <getButtonPress>
			
		}
		if(getButtonPress(BUTTON2) == LONG_PRESSED) {
    26ee:	81 e0       	ldi	r24, 0x01	; 1
    26f0:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <getButtonPress>
			
		}
		if(getButtonPress(BUTTON3) == LONG_PRESSED) {
    26f4:	82 e0       	ldi	r24, 0x02	; 2
    26f6:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <getButtonPress>
			
		}
		if(getButtonPress(BUTTON4) == LONG_PRESSED) {
    26fa:	83 e0       	ldi	r24, 0x03	; 3
    26fc:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <getButtonPress>
			
		}
		vTaskDelay(10/portTICK_RATE_MS);
    2700:	6a e0       	ldi	r22, 0x0A	; 10
    2702:	70 e0       	ldi	r23, 0x00	; 0
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <vTaskDelay>
	}
    270c:	bb cf       	rjmp	.-138    	; 0x2684 <controllerTask+0x12>

0000270e <vApplicationIdleHook>:


TaskHandle_t ledTask;

void vApplicationIdleHook( void )
{	
    270e:	08 95       	ret

00002710 <main>:
	
}

int main(void)
{
    2710:	ef 92       	push	r14
    2712:	ff 92       	push	r15
    2714:	0f 93       	push	r16
	vInitClock();
    2716:	0e 94 7d 12 	call	0x24fa	; 0x24fa <vInitClock>
	vInitDisplay();
    271a:	0e 94 86 18 	call	0x310c	; 0x310c <vInitDisplay>
	
	xTaskCreate(controllerTask, (const char *) "control_tsk", configMINIMAL_STACK_SIZE+150, NULL, 3, NULL);
    271e:	e1 2c       	mov	r14, r1
    2720:	f1 2c       	mov	r15, r1
    2722:	03 e0       	ldi	r16, 0x03	; 3
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	4e e5       	ldi	r20, 0x5E	; 94
    272a:	51 e0       	ldi	r21, 0x01	; 1
    272c:	69 e1       	ldi	r22, 0x19	; 25
    272e:	70 e2       	ldi	r23, 0x20	; 32
    2730:	89 e3       	ldi	r24, 0x39	; 57
    2732:	93 e1       	ldi	r25, 0x13	; 19
    2734:	0e 94 3f 0b 	call	0x167e	; 0x167e <xTaskCreate>
	//xTaskCreate(vButtonTask, (const char *) "btTask", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
	//xTaskCreate( vTimeMeasurement, (const char *) "TimeMeasurement", configMINIMAL_STACK_SIZE+10, NULL, 1, &TimeMeasurement);
	xTaskCreate( vPiLeibniz, (const char *) "Leibniz_tsk", configMINIMAL_STACK_SIZE+10, NULL, 3, NULL);
    2738:	20 e0       	ldi	r18, 0x00	; 0
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	42 ed       	ldi	r20, 0xD2	; 210
    273e:	50 e0       	ldi	r21, 0x00	; 0
    2740:	65 e2       	ldi	r22, 0x25	; 37
    2742:	70 e2       	ldi	r23, 0x20	; 32
    2744:	86 eb       	ldi	r24, 0xB6	; 182
    2746:	92 e1       	ldi	r25, 0x12	; 18
    2748:	0e 94 3f 0b 	call	0x167e	; 0x167e <xTaskCreate>
	xTaskCreate( vAreaPi, (const char *) "vAreaPi_tsk", configMINIMAL_STACK_SIZE+10, NULL, 2, NULL);
    274c:	02 e0       	ldi	r16, 0x02	; 2
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	42 ed       	ldi	r20, 0xD2	; 210
    2754:	50 e0       	ldi	r21, 0x00	; 0
    2756:	61 e3       	ldi	r22, 0x31	; 49
    2758:	70 e2       	ldi	r23, 0x20	; 32
    275a:	8d ef       	ldi	r24, 0xFD	; 253
    275c:	92 e1       	ldi	r25, 0x12	; 18
    275e:	0e 94 3f 0b 	call	0x167e	; 0x167e <xTaskCreate>

	
	vTaskStartScheduler();
    2762:	0e 94 93 0b 	call	0x1726	; 0x1726 <vTaskStartScheduler>
	
	return 0;
}
    2766:	80 e0       	ldi	r24, 0x00	; 0
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	0f 91       	pop	r16
    276c:	ff 90       	pop	r15
    276e:	ef 90       	pop	r14
    2770:	08 95       	ret

00002772 <normalize>:
	 }
 }
 

void vDisplayClear() {
	xEventGroupSetBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    2772:	cf 92       	push	r12
    2774:	df 92       	push	r13
    2776:	ef 92       	push	r14
    2778:	ff 92       	push	r15
    277a:	0f 93       	push	r16
    277c:	1f 93       	push	r17
    277e:	cf 93       	push	r28
    2780:	df 93       	push	r29
    2782:	8c 01       	movw	r16, r24
    2784:	fc 01       	movw	r30, r24
    2786:	c0 80       	ld	r12, Z
    2788:	d1 80       	ldd	r13, Z+1	; 0x01
    278a:	e2 80       	ldd	r14, Z+2	; 0x02
    278c:	f3 80       	ldd	r15, Z+3	; 0x03
    278e:	c0 e0       	ldi	r28, 0x00	; 0
    2790:	d0 e0       	ldi	r29, 0x00	; 0
    2792:	0b c0       	rjmp	.+22     	; 0x27aa <normalize+0x38>
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	40 e2       	ldi	r20, 0x20	; 32
    279a:	51 e4       	ldi	r21, 0x41	; 65
    279c:	c7 01       	movw	r24, r14
    279e:	b6 01       	movw	r22, r12
    27a0:	0e 94 96 1a 	call	0x352c	; 0x352c <__divsf3>
    27a4:	6b 01       	movw	r12, r22
    27a6:	7c 01       	movw	r14, r24
    27a8:	21 96       	adiw	r28, 0x01	; 1
    27aa:	20 e0       	ldi	r18, 0x00	; 0
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	40 e8       	ldi	r20, 0x80	; 128
    27b0:	5f e3       	ldi	r21, 0x3F	; 63
    27b2:	c7 01       	movw	r24, r14
    27b4:	b6 01       	movw	r22, r12
    27b6:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <__gesf2>
    27ba:	88 23       	and	r24, r24
    27bc:	5c f7       	brge	.-42     	; 0x2794 <normalize+0x22>
    27be:	0b c0       	rjmp	.+22     	; 0x27d6 <normalize+0x64>
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	40 e2       	ldi	r20, 0x20	; 32
    27c6:	51 e4       	ldi	r21, 0x41	; 65
    27c8:	c7 01       	movw	r24, r14
    27ca:	b6 01       	movw	r22, r12
    27cc:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    27d0:	6b 01       	movw	r12, r22
    27d2:	7c 01       	movw	r14, r24
    27d4:	21 97       	sbiw	r28, 0x01	; 1
    27d6:	2d ec       	ldi	r18, 0xCD	; 205
    27d8:	3c ec       	ldi	r19, 0xCC	; 204
    27da:	4c ec       	ldi	r20, 0xCC	; 204
    27dc:	5d e3       	ldi	r21, 0x3D	; 61
    27de:	c7 01       	movw	r24, r14
    27e0:	b6 01       	movw	r22, r12
    27e2:	0e 94 91 1a 	call	0x3522	; 0x3522 <__cmpsf2>
    27e6:	88 23       	and	r24, r24
    27e8:	5c f3       	brlt	.-42     	; 0x27c0 <normalize+0x4e>
    27ea:	f8 01       	movw	r30, r16
    27ec:	c0 82       	st	Z, r12
    27ee:	d1 82       	std	Z+1, r13	; 0x01
    27f0:	e2 82       	std	Z+2, r14	; 0x02
    27f2:	f3 82       	std	Z+3, r15	; 0x03
    27f4:	ce 01       	movw	r24, r28
    27f6:	df 91       	pop	r29
    27f8:	cf 91       	pop	r28
    27fa:	1f 91       	pop	r17
    27fc:	0f 91       	pop	r16
    27fe:	ff 90       	pop	r15
    2800:	ef 90       	pop	r14
    2802:	df 90       	pop	r13
    2804:	cf 90       	pop	r12
    2806:	08 95       	ret

00002808 <ftoa_fixed>:
    2808:	4f 92       	push	r4
    280a:	5f 92       	push	r5
    280c:	6f 92       	push	r6
    280e:	7f 92       	push	r7
    2810:	8f 92       	push	r8
    2812:	9f 92       	push	r9
    2814:	af 92       	push	r10
    2816:	bf 92       	push	r11
    2818:	cf 92       	push	r12
    281a:	df 92       	push	r13
    281c:	ef 92       	push	r14
    281e:	ff 92       	push	r15
    2820:	0f 93       	push	r16
    2822:	1f 93       	push	r17
    2824:	cf 93       	push	r28
    2826:	df 93       	push	r29
    2828:	00 d0       	rcall	.+0      	; 0x282a <ftoa_fixed+0x22>
    282a:	1f 92       	push	r1
    282c:	cd b7       	in	r28, 0x3d	; 61
    282e:	de b7       	in	r29, 0x3e	; 62
    2830:	5c 01       	movw	r10, r24
    2832:	e4 2e       	mov	r14, r20
    2834:	f5 2e       	mov	r15, r21
    2836:	06 2f       	mov	r16, r22
    2838:	17 2f       	mov	r17, r23
    283a:	49 83       	std	Y+1, r20	; 0x01
    283c:	5a 83       	std	Y+2, r21	; 0x02
    283e:	6b 83       	std	Y+3, r22	; 0x03
    2840:	7c 83       	std	Y+4, r23	; 0x04
    2842:	20 e0       	ldi	r18, 0x00	; 0
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	a9 01       	movw	r20, r18
    2848:	6e 2d       	mov	r22, r14
    284a:	7f 2d       	mov	r23, r15
    284c:	80 2f       	mov	r24, r16
    284e:	91 2f       	mov	r25, r17
    2850:	0e 94 91 1a 	call	0x3522	; 0x3522 <__cmpsf2>
    2854:	81 11       	cpse	r24, r1
    2856:	05 c0       	rjmp	.+10     	; 0x2862 <ftoa_fixed+0x5a>
    2858:	80 e3       	ldi	r24, 0x30	; 48
    285a:	f5 01       	movw	r30, r10
    285c:	80 83       	st	Z, r24
    285e:	11 82       	std	Z+1, r1	; 0x01
    2860:	b9 c0       	rjmp	.+370    	; 0x29d4 <ftoa_fixed+0x1cc>
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	a9 01       	movw	r20, r18
    2868:	6e 2d       	mov	r22, r14
    286a:	7f 2d       	mov	r23, r15
    286c:	80 2f       	mov	r24, r16
    286e:	91 2f       	mov	r25, r17
    2870:	0e 94 91 1a 	call	0x3522	; 0x3522 <__cmpsf2>
    2874:	88 23       	and	r24, r24
    2876:	7c f4       	brge	.+30     	; 0x2896 <ftoa_fixed+0x8e>
    2878:	8d e2       	ldi	r24, 0x2D	; 45
    287a:	f5 01       	movw	r30, r10
    287c:	80 83       	st	Z, r24
    287e:	89 81       	ldd	r24, Y+1	; 0x01
    2880:	9a 81       	ldd	r25, Y+2	; 0x02
    2882:	ab 81       	ldd	r26, Y+3	; 0x03
    2884:	bc 81       	ldd	r27, Y+4	; 0x04
    2886:	b0 58       	subi	r27, 0x80	; 128
    2888:	89 83       	std	Y+1, r24	; 0x01
    288a:	9a 83       	std	Y+2, r25	; 0x02
    288c:	ab 83       	std	Y+3, r26	; 0x03
    288e:	bc 83       	std	Y+4, r27	; 0x04
    2890:	c5 01       	movw	r24, r10
    2892:	01 96       	adiw	r24, 0x01	; 1
    2894:	5c 01       	movw	r10, r24
    2896:	ce 01       	movw	r24, r28
    2898:	01 96       	adiw	r24, 0x01	; 1
    289a:	0e 94 b9 13 	call	0x2772	; 0x2772 <normalize>
    289e:	7c 01       	movw	r14, r24
    28a0:	00 e0       	ldi	r16, 0x00	; 0
    28a2:	10 e0       	ldi	r17, 0x00	; 0
    28a4:	38 c0       	rjmp	.+112    	; 0x2916 <ftoa_fixed+0x10e>
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	40 e2       	ldi	r20, 0x20	; 32
    28ac:	51 e4       	ldi	r21, 0x41	; 65
    28ae:	69 81       	ldd	r22, Y+1	; 0x01
    28b0:	7a 81       	ldd	r23, Y+2	; 0x02
    28b2:	8b 81       	ldd	r24, Y+3	; 0x03
    28b4:	9c 81       	ldd	r25, Y+4	; 0x04
    28b6:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    28ba:	0e 94 08 1b 	call	0x3610	; 0x3610 <__fixsfsi>
    28be:	2b 01       	movw	r4, r22
    28c0:	3c 01       	movw	r6, r24
    28c2:	65 01       	movw	r12, r10
    28c4:	9f ef       	ldi	r25, 0xFF	; 255
    28c6:	c9 1a       	sub	r12, r25
    28c8:	d9 0a       	sbc	r13, r25
    28ca:	80 e3       	ldi	r24, 0x30	; 48
    28cc:	84 0d       	add	r24, r4
    28ce:	f5 01       	movw	r30, r10
    28d0:	80 83       	st	Z, r24
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	40 e2       	ldi	r20, 0x20	; 32
    28d8:	51 e4       	ldi	r21, 0x41	; 65
    28da:	69 81       	ldd	r22, Y+1	; 0x01
    28dc:	7a 81       	ldd	r23, Y+2	; 0x02
    28de:	8b 81       	ldd	r24, Y+3	; 0x03
    28e0:	9c 81       	ldd	r25, Y+4	; 0x04
    28e2:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    28e6:	4b 01       	movw	r8, r22
    28e8:	5c 01       	movw	r10, r24
    28ea:	b2 01       	movw	r22, r4
    28ec:	55 0c       	add	r5, r5
    28ee:	88 0b       	sbc	r24, r24
    28f0:	99 0b       	sbc	r25, r25
    28f2:	0e 94 40 1b 	call	0x3680	; 0x3680 <__floatsisf>
    28f6:	9b 01       	movw	r18, r22
    28f8:	ac 01       	movw	r20, r24
    28fa:	c5 01       	movw	r24, r10
    28fc:	b4 01       	movw	r22, r8
    28fe:	0e 94 24 1a 	call	0x3448	; 0x3448 <__subsf3>
    2902:	69 83       	std	Y+1, r22	; 0x01
    2904:	7a 83       	std	Y+2, r23	; 0x02
    2906:	8b 83       	std	Y+3, r24	; 0x03
    2908:	9c 83       	std	Y+4, r25	; 0x04
    290a:	0f 5f       	subi	r16, 0xFF	; 255
    290c:	1f 4f       	sbci	r17, 0xFF	; 255
    290e:	f1 e0       	ldi	r31, 0x01	; 1
    2910:	ef 1a       	sub	r14, r31
    2912:	f1 08       	sbc	r15, r1
    2914:	56 01       	movw	r10, r12
    2916:	1e 14       	cp	r1, r14
    2918:	1f 04       	cpc	r1, r15
    291a:	2c f2       	brlt	.-118    	; 0x28a6 <ftoa_fixed+0x9e>
    291c:	01 15       	cp	r16, r1
    291e:	11 05       	cpc	r17, r1
    2920:	31 f4       	brne	.+12     	; 0x292e <ftoa_fixed+0x126>
    2922:	80 e3       	ldi	r24, 0x30	; 48
    2924:	f5 01       	movw	r30, r10
    2926:	80 83       	st	Z, r24
    2928:	c5 01       	movw	r24, r10
    292a:	01 96       	adiw	r24, 0x01	; 1
    292c:	5c 01       	movw	r10, r24
    292e:	65 01       	movw	r12, r10
    2930:	9f ef       	ldi	r25, 0xFF	; 255
    2932:	c9 1a       	sub	r12, r25
    2934:	d9 0a       	sbc	r13, r25
    2936:	8e e2       	ldi	r24, 0x2E	; 46
    2938:	f5 01       	movw	r30, r10
    293a:	80 83       	st	Z, r24
    293c:	0b c0       	rjmp	.+22     	; 0x2954 <ftoa_fixed+0x14c>
    293e:	80 e3       	ldi	r24, 0x30	; 48
    2940:	f6 01       	movw	r30, r12
    2942:	80 83       	st	Z, r24
    2944:	f1 e0       	ldi	r31, 0x01	; 1
    2946:	ef 1a       	sub	r14, r31
    2948:	f1 08       	sbc	r15, r1
    294a:	0f 5f       	subi	r16, 0xFF	; 255
    294c:	1f 4f       	sbci	r17, 0xFF	; 255
    294e:	c6 01       	movw	r24, r12
    2950:	01 96       	adiw	r24, 0x01	; 1
    2952:	6c 01       	movw	r12, r24
    2954:	ff 20       	and	r15, r15
    2956:	cc f5       	brge	.+114    	; 0x29ca <ftoa_fixed+0x1c2>
    2958:	04 30       	cpi	r16, 0x04	; 4
    295a:	11 05       	cpc	r17, r1
    295c:	84 f3       	brlt	.-32     	; 0x293e <ftoa_fixed+0x136>
    295e:	35 c0       	rjmp	.+106    	; 0x29ca <ftoa_fixed+0x1c2>
    2960:	20 e0       	ldi	r18, 0x00	; 0
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	40 e2       	ldi	r20, 0x20	; 32
    2966:	51 e4       	ldi	r21, 0x41	; 65
    2968:	69 81       	ldd	r22, Y+1	; 0x01
    296a:	7a 81       	ldd	r23, Y+2	; 0x02
    296c:	8b 81       	ldd	r24, Y+3	; 0x03
    296e:	9c 81       	ldd	r25, Y+4	; 0x04
    2970:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    2974:	0e 94 08 1b 	call	0x3610	; 0x3610 <__fixsfsi>
    2978:	4b 01       	movw	r8, r22
    297a:	5c 01       	movw	r10, r24
    297c:	76 01       	movw	r14, r12
    297e:	9f ef       	ldi	r25, 0xFF	; 255
    2980:	e9 1a       	sub	r14, r25
    2982:	f9 0a       	sbc	r15, r25
    2984:	80 e3       	ldi	r24, 0x30	; 48
    2986:	88 0d       	add	r24, r8
    2988:	f6 01       	movw	r30, r12
    298a:	80 83       	st	Z, r24
    298c:	20 e0       	ldi	r18, 0x00	; 0
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	40 e2       	ldi	r20, 0x20	; 32
    2992:	51 e4       	ldi	r21, 0x41	; 65
    2994:	69 81       	ldd	r22, Y+1	; 0x01
    2996:	7a 81       	ldd	r23, Y+2	; 0x02
    2998:	8b 81       	ldd	r24, Y+3	; 0x03
    299a:	9c 81       	ldd	r25, Y+4	; 0x04
    299c:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    29a0:	2b 01       	movw	r4, r22
    29a2:	3c 01       	movw	r6, r24
    29a4:	b4 01       	movw	r22, r8
    29a6:	99 0c       	add	r9, r9
    29a8:	88 0b       	sbc	r24, r24
    29aa:	99 0b       	sbc	r25, r25
    29ac:	0e 94 40 1b 	call	0x3680	; 0x3680 <__floatsisf>
    29b0:	9b 01       	movw	r18, r22
    29b2:	ac 01       	movw	r20, r24
    29b4:	c3 01       	movw	r24, r6
    29b6:	b2 01       	movw	r22, r4
    29b8:	0e 94 24 1a 	call	0x3448	; 0x3448 <__subsf3>
    29bc:	69 83       	std	Y+1, r22	; 0x01
    29be:	7a 83       	std	Y+2, r23	; 0x02
    29c0:	8b 83       	std	Y+3, r24	; 0x03
    29c2:	9c 83       	std	Y+4, r25	; 0x04
    29c4:	0f 5f       	subi	r16, 0xFF	; 255
    29c6:	1f 4f       	sbci	r17, 0xFF	; 255
    29c8:	67 01       	movw	r12, r14
    29ca:	04 30       	cpi	r16, 0x04	; 4
    29cc:	11 05       	cpc	r17, r1
    29ce:	44 f2       	brlt	.-112    	; 0x2960 <ftoa_fixed+0x158>
    29d0:	f6 01       	movw	r30, r12
    29d2:	10 82       	st	Z, r1
    29d4:	24 96       	adiw	r28, 0x04	; 4
    29d6:	cd bf       	out	0x3d, r28	; 61
    29d8:	de bf       	out	0x3e, r29	; 62
    29da:	df 91       	pop	r29
    29dc:	cf 91       	pop	r28
    29de:	1f 91       	pop	r17
    29e0:	0f 91       	pop	r16
    29e2:	ff 90       	pop	r15
    29e4:	ef 90       	pop	r14
    29e6:	df 90       	pop	r13
    29e8:	cf 90       	pop	r12
    29ea:	bf 90       	pop	r11
    29ec:	af 90       	pop	r10
    29ee:	9f 90       	pop	r9
    29f0:	8f 90       	pop	r8
    29f2:	7f 90       	pop	r7
    29f4:	6f 90       	pop	r6
    29f6:	5f 90       	pop	r5
    29f8:	4f 90       	pop	r4
    29fa:	08 95       	ret

000029fc <ftoa_sci>:
    29fc:	2f 92       	push	r2
    29fe:	3f 92       	push	r3
    2a00:	4f 92       	push	r4
    2a02:	5f 92       	push	r5
    2a04:	6f 92       	push	r6
    2a06:	7f 92       	push	r7
    2a08:	8f 92       	push	r8
    2a0a:	9f 92       	push	r9
    2a0c:	af 92       	push	r10
    2a0e:	bf 92       	push	r11
    2a10:	cf 92       	push	r12
    2a12:	df 92       	push	r13
    2a14:	ef 92       	push	r14
    2a16:	ff 92       	push	r15
    2a18:	0f 93       	push	r16
    2a1a:	1f 93       	push	r17
    2a1c:	cf 93       	push	r28
    2a1e:	df 93       	push	r29
    2a20:	cd b7       	in	r28, 0x3d	; 61
    2a22:	de b7       	in	r29, 0x3e	; 62
    2a24:	28 97       	sbiw	r28, 0x08	; 8
    2a26:	cd bf       	out	0x3d, r28	; 61
    2a28:	de bf       	out	0x3e, r29	; 62
    2a2a:	7c 01       	movw	r14, r24
    2a2c:	c4 2e       	mov	r12, r20
    2a2e:	d5 2e       	mov	r13, r21
    2a30:	06 2f       	mov	r16, r22
    2a32:	17 2f       	mov	r17, r23
    2a34:	49 83       	std	Y+1, r20	; 0x01
    2a36:	5a 83       	std	Y+2, r21	; 0x02
    2a38:	6b 83       	std	Y+3, r22	; 0x03
    2a3a:	7c 83       	std	Y+4, r23	; 0x04
    2a3c:	20 e0       	ldi	r18, 0x00	; 0
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	a9 01       	movw	r20, r18
    2a42:	6c 2d       	mov	r22, r12
    2a44:	7d 2d       	mov	r23, r13
    2a46:	80 2f       	mov	r24, r16
    2a48:	91 2f       	mov	r25, r17
    2a4a:	0e 94 91 1a 	call	0x3522	; 0x3522 <__cmpsf2>
    2a4e:	81 11       	cpse	r24, r1
    2a50:	05 c0       	rjmp	.+10     	; 0x2a5c <ftoa_sci+0x60>
    2a52:	80 e3       	ldi	r24, 0x30	; 48
    2a54:	f7 01       	movw	r30, r14
    2a56:	80 83       	st	Z, r24
    2a58:	11 82       	std	Z+1, r1	; 0x01
    2a5a:	a2 c0       	rjmp	.+324    	; 0x2ba0 <ftoa_sci+0x1a4>
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	a9 01       	movw	r20, r18
    2a62:	6c 2d       	mov	r22, r12
    2a64:	7d 2d       	mov	r23, r13
    2a66:	80 2f       	mov	r24, r16
    2a68:	91 2f       	mov	r25, r17
    2a6a:	0e 94 91 1a 	call	0x3522	; 0x3522 <__cmpsf2>
    2a6e:	88 23       	and	r24, r24
    2a70:	7c f4       	brge	.+30     	; 0x2a90 <ftoa_sci+0x94>
    2a72:	8d e2       	ldi	r24, 0x2D	; 45
    2a74:	f7 01       	movw	r30, r14
    2a76:	80 83       	st	Z, r24
    2a78:	89 81       	ldd	r24, Y+1	; 0x01
    2a7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a7c:	ab 81       	ldd	r26, Y+3	; 0x03
    2a7e:	bc 81       	ldd	r27, Y+4	; 0x04
    2a80:	b0 58       	subi	r27, 0x80	; 128
    2a82:	89 83       	std	Y+1, r24	; 0x01
    2a84:	9a 83       	std	Y+2, r25	; 0x02
    2a86:	ab 83       	std	Y+3, r26	; 0x03
    2a88:	bc 83       	std	Y+4, r27	; 0x04
    2a8a:	c7 01       	movw	r24, r14
    2a8c:	01 96       	adiw	r24, 0x01	; 1
    2a8e:	7c 01       	movw	r14, r24
    2a90:	ce 01       	movw	r24, r28
    2a92:	01 96       	adiw	r24, 0x01	; 1
    2a94:	0e 94 b9 13 	call	0x2772	; 0x2772 <normalize>
    2a98:	5c 01       	movw	r10, r24
    2a9a:	20 e0       	ldi	r18, 0x00	; 0
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	40 e2       	ldi	r20, 0x20	; 32
    2aa0:	51 e4       	ldi	r21, 0x41	; 65
    2aa2:	69 81       	ldd	r22, Y+1	; 0x01
    2aa4:	7a 81       	ldd	r23, Y+2	; 0x02
    2aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa8:	9c 81       	ldd	r25, Y+4	; 0x04
    2aaa:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    2aae:	0e 94 08 1b 	call	0x3610	; 0x3610 <__fixsfsi>
    2ab2:	2b 01       	movw	r4, r22
    2ab4:	3c 01       	movw	r6, r24
    2ab6:	80 e3       	ldi	r24, 0x30	; 48
    2ab8:	84 0d       	add	r24, r4
    2aba:	f7 01       	movw	r30, r14
    2abc:	80 83       	st	Z, r24
    2abe:	20 e0       	ldi	r18, 0x00	; 0
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	40 e2       	ldi	r20, 0x20	; 32
    2ac4:	51 e4       	ldi	r21, 0x41	; 65
    2ac6:	69 81       	ldd	r22, Y+1	; 0x01
    2ac8:	7a 81       	ldd	r23, Y+2	; 0x02
    2aca:	8b 81       	ldd	r24, Y+3	; 0x03
    2acc:	9c 81       	ldd	r25, Y+4	; 0x04
    2ace:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    2ad2:	6d 83       	std	Y+5, r22	; 0x05
    2ad4:	7e 83       	std	Y+6, r23	; 0x06
    2ad6:	8f 83       	std	Y+7, r24	; 0x07
    2ad8:	98 87       	std	Y+8, r25	; 0x08
    2ada:	b2 01       	movw	r22, r4
    2adc:	55 0c       	add	r5, r5
    2ade:	88 0b       	sbc	r24, r24
    2ae0:	99 0b       	sbc	r25, r25
    2ae2:	0e 94 40 1b 	call	0x3680	; 0x3680 <__floatsisf>
    2ae6:	9b 01       	movw	r18, r22
    2ae8:	ac 01       	movw	r20, r24
    2aea:	6d 81       	ldd	r22, Y+5	; 0x05
    2aec:	7e 81       	ldd	r23, Y+6	; 0x06
    2aee:	8f 81       	ldd	r24, Y+7	; 0x07
    2af0:	98 85       	ldd	r25, Y+8	; 0x08
    2af2:	0e 94 24 1a 	call	0x3448	; 0x3448 <__subsf3>
    2af6:	69 83       	std	Y+1, r22	; 0x01
    2af8:	7a 83       	std	Y+2, r23	; 0x02
    2afa:	8b 83       	std	Y+3, r24	; 0x03
    2afc:	9c 83       	std	Y+4, r25	; 0x04
    2afe:	15 01       	movw	r2, r10
    2b00:	f1 e0       	ldi	r31, 0x01	; 1
    2b02:	2f 1a       	sub	r2, r31
    2b04:	31 08       	sbc	r3, r1
    2b06:	87 01       	movw	r16, r14
    2b08:	0e 5f       	subi	r16, 0xFE	; 254
    2b0a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b0c:	8e e2       	ldi	r24, 0x2E	; 46
    2b0e:	f7 01       	movw	r30, r14
    2b10:	81 83       	std	Z+1, r24	; 0x01
    2b12:	e1 2c       	mov	r14, r1
    2b14:	f1 2c       	mov	r15, r1
    2b16:	36 c0       	rjmp	.+108    	; 0x2b84 <ftoa_sci+0x188>
    2b18:	20 e0       	ldi	r18, 0x00	; 0
    2b1a:	30 e0       	ldi	r19, 0x00	; 0
    2b1c:	40 e2       	ldi	r20, 0x20	; 32
    2b1e:	51 e4       	ldi	r21, 0x41	; 65
    2b20:	69 81       	ldd	r22, Y+1	; 0x01
    2b22:	7a 81       	ldd	r23, Y+2	; 0x02
    2b24:	8b 81       	ldd	r24, Y+3	; 0x03
    2b26:	9c 81       	ldd	r25, Y+4	; 0x04
    2b28:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    2b2c:	0e 94 08 1b 	call	0x3610	; 0x3610 <__fixsfsi>
    2b30:	2b 01       	movw	r4, r22
    2b32:	3c 01       	movw	r6, r24
    2b34:	68 01       	movw	r12, r16
    2b36:	ff ef       	ldi	r31, 0xFF	; 255
    2b38:	cf 1a       	sub	r12, r31
    2b3a:	df 0a       	sbc	r13, r31
    2b3c:	80 e3       	ldi	r24, 0x30	; 48
    2b3e:	84 0d       	add	r24, r4
    2b40:	f8 01       	movw	r30, r16
    2b42:	80 83       	st	Z, r24
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	40 e2       	ldi	r20, 0x20	; 32
    2b4a:	51 e4       	ldi	r21, 0x41	; 65
    2b4c:	69 81       	ldd	r22, Y+1	; 0x01
    2b4e:	7a 81       	ldd	r23, Y+2	; 0x02
    2b50:	8b 81       	ldd	r24, Y+3	; 0x03
    2b52:	9c 81       	ldd	r25, Y+4	; 0x04
    2b54:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    2b58:	4b 01       	movw	r8, r22
    2b5a:	5c 01       	movw	r10, r24
    2b5c:	b2 01       	movw	r22, r4
    2b5e:	55 0c       	add	r5, r5
    2b60:	88 0b       	sbc	r24, r24
    2b62:	99 0b       	sbc	r25, r25
    2b64:	0e 94 40 1b 	call	0x3680	; 0x3680 <__floatsisf>
    2b68:	9b 01       	movw	r18, r22
    2b6a:	ac 01       	movw	r20, r24
    2b6c:	c5 01       	movw	r24, r10
    2b6e:	b4 01       	movw	r22, r8
    2b70:	0e 94 24 1a 	call	0x3448	; 0x3448 <__subsf3>
    2b74:	69 83       	std	Y+1, r22	; 0x01
    2b76:	7a 83       	std	Y+2, r23	; 0x02
    2b78:	8b 83       	std	Y+3, r24	; 0x03
    2b7a:	9c 83       	std	Y+4, r25	; 0x04
    2b7c:	ff ef       	ldi	r31, 0xFF	; 255
    2b7e:	ef 1a       	sub	r14, r31
    2b80:	ff 0a       	sbc	r15, r31
    2b82:	86 01       	movw	r16, r12
    2b84:	84 e0       	ldi	r24, 0x04	; 4
    2b86:	e8 16       	cp	r14, r24
    2b88:	f1 04       	cpc	r15, r1
    2b8a:	34 f2       	brlt	.-116    	; 0x2b18 <ftoa_sci+0x11c>
    2b8c:	b8 01       	movw	r22, r16
    2b8e:	6f 5f       	subi	r22, 0xFF	; 255
    2b90:	7f 4f       	sbci	r23, 0xFF	; 255
    2b92:	85 e6       	ldi	r24, 0x65	; 101
    2b94:	f8 01       	movw	r30, r16
    2b96:	80 83       	st	Z, r24
    2b98:	4a e0       	ldi	r20, 0x0A	; 10
    2b9a:	c1 01       	movw	r24, r2
    2b9c:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <__itoa_ncheck>
    2ba0:	28 96       	adiw	r28, 0x08	; 8
    2ba2:	cd bf       	out	0x3d, r28	; 61
    2ba4:	de bf       	out	0x3e, r29	; 62
    2ba6:	df 91       	pop	r29
    2ba8:	cf 91       	pop	r28
    2baa:	1f 91       	pop	r17
    2bac:	0f 91       	pop	r16
    2bae:	ff 90       	pop	r15
    2bb0:	ef 90       	pop	r14
    2bb2:	df 90       	pop	r13
    2bb4:	cf 90       	pop	r12
    2bb6:	bf 90       	pop	r11
    2bb8:	af 90       	pop	r10
    2bba:	9f 90       	pop	r9
    2bbc:	8f 90       	pop	r8
    2bbe:	7f 90       	pop	r7
    2bc0:	6f 90       	pop	r6
    2bc2:	5f 90       	pop	r5
    2bc4:	4f 90       	pop	r4
    2bc6:	3f 90       	pop	r3
    2bc8:	2f 90       	pop	r2
    2bca:	08 95       	ret

00002bcc <display_vprintf>:
    2bcc:	6f 92       	push	r6
    2bce:	7f 92       	push	r7
    2bd0:	8f 92       	push	r8
    2bd2:	9f 92       	push	r9
    2bd4:	bf 92       	push	r11
    2bd6:	cf 92       	push	r12
    2bd8:	df 92       	push	r13
    2bda:	ef 92       	push	r14
    2bdc:	ff 92       	push	r15
    2bde:	0f 93       	push	r16
    2be0:	1f 93       	push	r17
    2be2:	cf 93       	push	r28
    2be4:	df 93       	push	r29
    2be6:	cd b7       	in	r28, 0x3d	; 61
    2be8:	de b7       	in	r29, 0x3e	; 62
    2bea:	66 97       	sbiw	r28, 0x16	; 22
    2bec:	cd bf       	out	0x3d, r28	; 61
    2bee:	de bf       	out	0x3e, r29	; 62
    2bf0:	b8 2e       	mov	r11, r24
    2bf2:	8b 01       	movw	r16, r22
    2bf4:	da 01       	movw	r26, r20
    2bf6:	39 01       	movw	r6, r18
    2bf8:	80 e0       	ldi	r24, 0x00	; 0
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	05 c0       	rjmp	.+10     	; 0x2c08 <display_vprintf+0x3c>
    2bfe:	fc 01       	movw	r30, r24
    2c00:	e8 54       	subi	r30, 0x48	; 72
    2c02:	f3 4d       	sbci	r31, 0xD3	; 211
    2c04:	10 82       	st	Z, r1
    2c06:	01 96       	adiw	r24, 0x01	; 1
    2c08:	84 31       	cpi	r24, 0x14	; 20
    2c0a:	91 05       	cpc	r25, r1
    2c0c:	c4 f3       	brlt	.-16     	; 0x2bfe <display_vprintf+0x32>
    2c0e:	80 e0       	ldi	r24, 0x00	; 0
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	05 c0       	rjmp	.+10     	; 0x2c1e <display_vprintf+0x52>
    2c14:	fc 01       	movw	r30, r24
    2c16:	ec 55       	subi	r30, 0x5C	; 92
    2c18:	f3 4d       	sbci	r31, 0xD3	; 211
    2c1a:	10 82       	st	Z, r1
    2c1c:	01 96       	adiw	r24, 0x01	; 1
    2c1e:	84 31       	cpi	r24, 0x14	; 20
    2c20:	91 05       	cpc	r25, r1
    2c22:	c4 f3       	brlt	.-16     	; 0x2c14 <display_vprintf+0x48>
    2c24:	e1 2c       	mov	r14, r1
    2c26:	f1 2c       	mov	r15, r1
    2c28:	14 c1       	rjmp	.+552    	; 0x2e52 <display_vprintf+0x286>
    2c2a:	85 32       	cpi	r24, 0x25	; 37
    2c2c:	09 f0       	breq	.+2      	; 0x2c30 <display_vprintf+0x64>
    2c2e:	01 c1       	rjmp	.+514    	; 0x2e32 <display_vprintf+0x266>
    2c30:	6d 01       	movw	r12, r26
    2c32:	82 e0       	ldi	r24, 0x02	; 2
    2c34:	c8 0e       	add	r12, r24
    2c36:	d1 1c       	adc	r13, r1
    2c38:	11 96       	adiw	r26, 0x01	; 1
    2c3a:	8c 91       	ld	r24, X
    2c3c:	85 36       	cpi	r24, 0x65	; 101
    2c3e:	09 f4       	brne	.+2      	; 0x2c42 <display_vprintf+0x76>
    2c40:	cd c0       	rjmp	.+410    	; 0x2ddc <display_vprintf+0x210>
    2c42:	38 f4       	brcc	.+14     	; 0x2c52 <display_vprintf+0x86>
    2c44:	83 36       	cpi	r24, 0x63	; 99
    2c46:	c1 f0       	breq	.+48     	; 0x2c78 <display_vprintf+0xac>
    2c48:	08 f0       	brcs	.+2      	; 0x2c4c <display_vprintf+0x80>
    2c4a:	49 c0       	rjmp	.+146    	; 0x2cde <display_vprintf+0x112>
    2c4c:	85 32       	cpi	r24, 0x25	; 37
    2c4e:	51 f0       	breq	.+20     	; 0x2c64 <display_vprintf+0x98>
    2c50:	ff c0       	rjmp	.+510    	; 0x2e50 <display_vprintf+0x284>
    2c52:	83 37       	cpi	r24, 0x73	; 115
    2c54:	f9 f0       	breq	.+62     	; 0x2c94 <display_vprintf+0xc8>
    2c56:	88 37       	cpi	r24, 0x78	; 120
    2c58:	09 f4       	brne	.+2      	; 0x2c5c <display_vprintf+0x90>
    2c5a:	6b c0       	rjmp	.+214    	; 0x2d32 <display_vprintf+0x166>
    2c5c:	86 36       	cpi	r24, 0x66	; 102
    2c5e:	09 f0       	breq	.+2      	; 0x2c62 <display_vprintf+0x96>
    2c60:	f7 c0       	rjmp	.+494    	; 0x2e50 <display_vprintf+0x284>
    2c62:	91 c0       	rjmp	.+290    	; 0x2d86 <display_vprintf+0x1ba>
    2c64:	d7 01       	movw	r26, r14
    2c66:	ac 55       	subi	r26, 0x5C	; 92
    2c68:	b3 4d       	sbci	r27, 0xD3	; 211
    2c6a:	85 e2       	ldi	r24, 0x25	; 37
    2c6c:	8c 93       	st	X, r24
    2c6e:	9f ef       	ldi	r25, 0xFF	; 255
    2c70:	e9 1a       	sub	r14, r25
    2c72:	f9 0a       	sbc	r15, r25
    2c74:	d6 01       	movw	r26, r12
    2c76:	ed c0       	rjmp	.+474    	; 0x2e52 <display_vprintf+0x286>
    2c78:	f3 01       	movw	r30, r6
    2c7a:	80 81       	ld	r24, Z
    2c7c:	d7 01       	movw	r26, r14
    2c7e:	ac 55       	subi	r26, 0x5C	; 92
    2c80:	b3 4d       	sbci	r27, 0xD3	; 211
    2c82:	8c 93       	st	X, r24
    2c84:	ff ef       	ldi	r31, 0xFF	; 255
    2c86:	ef 1a       	sub	r14, r31
    2c88:	ff 0a       	sbc	r15, r31
    2c8a:	c3 01       	movw	r24, r6
    2c8c:	02 96       	adiw	r24, 0x02	; 2
    2c8e:	3c 01       	movw	r6, r24
    2c90:	d6 01       	movw	r26, r12
    2c92:	df c0       	rjmp	.+446    	; 0x2e52 <display_vprintf+0x286>
    2c94:	93 01       	movw	r18, r6
    2c96:	2e 5f       	subi	r18, 0xFE	; 254
    2c98:	3f 4f       	sbci	r19, 0xFF	; 255
    2c9a:	f3 01       	movw	r30, r6
    2c9c:	a0 81       	ld	r26, Z
    2c9e:	b1 81       	ldd	r27, Z+1	; 0x01
    2ca0:	80 e0       	ldi	r24, 0x00	; 0
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	0d c0       	rjmp	.+26     	; 0x2cc0 <display_vprintf+0xf4>
    2ca6:	b7 01       	movw	r22, r14
    2ca8:	68 0f       	add	r22, r24
    2caa:	79 1f       	adc	r23, r25
    2cac:	ad 01       	movw	r20, r26
    2cae:	48 0f       	add	r20, r24
    2cb0:	59 1f       	adc	r21, r25
    2cb2:	fa 01       	movw	r30, r20
    2cb4:	40 81       	ld	r20, Z
    2cb6:	fb 01       	movw	r30, r22
    2cb8:	ec 55       	subi	r30, 0x5C	; 92
    2cba:	f3 4d       	sbci	r31, 0xD3	; 211
    2cbc:	40 83       	st	Z, r20
    2cbe:	01 96       	adiw	r24, 0x01	; 1
    2cc0:	fd 01       	movw	r30, r26
    2cc2:	01 90       	ld	r0, Z+
    2cc4:	00 20       	and	r0, r0
    2cc6:	e9 f7       	brne	.-6      	; 0x2cc2 <display_vprintf+0xf6>
    2cc8:	31 97       	sbiw	r30, 0x01	; 1
    2cca:	ea 1b       	sub	r30, r26
    2ccc:	fb 0b       	sbc	r31, r27
    2cce:	8e 17       	cp	r24, r30
    2cd0:	9f 07       	cpc	r25, r31
    2cd2:	48 f3       	brcs	.-46     	; 0x2ca6 <display_vprintf+0xda>
    2cd4:	ee 0e       	add	r14, r30
    2cd6:	ff 1e       	adc	r15, r31
    2cd8:	39 01       	movw	r6, r18
    2cda:	d6 01       	movw	r26, r12
    2cdc:	ba c0       	rjmp	.+372    	; 0x2e52 <display_vprintf+0x286>
    2cde:	43 01       	movw	r8, r6
    2ce0:	f2 e0       	ldi	r31, 0x02	; 2
    2ce2:	8f 0e       	add	r8, r31
    2ce4:	91 1c       	adc	r9, r1
    2ce6:	4a e0       	ldi	r20, 0x0A	; 10
    2ce8:	68 eb       	ldi	r22, 0xB8	; 184
    2cea:	7c e2       	ldi	r23, 0x2C	; 44
    2cec:	f3 01       	movw	r30, r6
    2cee:	80 81       	ld	r24, Z
    2cf0:	91 81       	ldd	r25, Z+1	; 0x01
    2cf2:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <__itoa_ncheck>
    2cf6:	80 e0       	ldi	r24, 0x00	; 0
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	0b c0       	rjmp	.+22     	; 0x2d12 <display_vprintf+0x146>
    2cfc:	f7 01       	movw	r30, r14
    2cfe:	e8 0f       	add	r30, r24
    2d00:	f9 1f       	adc	r31, r25
    2d02:	dc 01       	movw	r26, r24
    2d04:	a8 54       	subi	r26, 0x48	; 72
    2d06:	b3 4d       	sbci	r27, 0xD3	; 211
    2d08:	2c 91       	ld	r18, X
    2d0a:	ec 55       	subi	r30, 0x5C	; 92
    2d0c:	f3 4d       	sbci	r31, 0xD3	; 211
    2d0e:	20 83       	st	Z, r18
    2d10:	01 96       	adiw	r24, 0x01	; 1
    2d12:	e8 eb       	ldi	r30, 0xB8	; 184
    2d14:	fc e2       	ldi	r31, 0x2C	; 44
    2d16:	01 90       	ld	r0, Z+
    2d18:	00 20       	and	r0, r0
    2d1a:	e9 f7       	brne	.-6      	; 0x2d16 <display_vprintf+0x14a>
    2d1c:	31 97       	sbiw	r30, 0x01	; 1
    2d1e:	e8 5b       	subi	r30, 0xB8	; 184
    2d20:	fc 42       	sbci	r31, 0x2C	; 44
    2d22:	8e 17       	cp	r24, r30
    2d24:	9f 07       	cpc	r25, r31
    2d26:	50 f3       	brcs	.-44     	; 0x2cfc <display_vprintf+0x130>
    2d28:	ee 0e       	add	r14, r30
    2d2a:	ff 1e       	adc	r15, r31
    2d2c:	34 01       	movw	r6, r8
    2d2e:	d6 01       	movw	r26, r12
    2d30:	90 c0       	rjmp	.+288    	; 0x2e52 <display_vprintf+0x286>
    2d32:	43 01       	movw	r8, r6
    2d34:	f2 e0       	ldi	r31, 0x02	; 2
    2d36:	8f 0e       	add	r8, r31
    2d38:	91 1c       	adc	r9, r1
    2d3a:	40 e1       	ldi	r20, 0x10	; 16
    2d3c:	68 eb       	ldi	r22, 0xB8	; 184
    2d3e:	7c e2       	ldi	r23, 0x2C	; 44
    2d40:	f3 01       	movw	r30, r6
    2d42:	80 81       	ld	r24, Z
    2d44:	91 81       	ldd	r25, Z+1	; 0x01
    2d46:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <__itoa_ncheck>
    2d4a:	80 e0       	ldi	r24, 0x00	; 0
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	0b c0       	rjmp	.+22     	; 0x2d66 <display_vprintf+0x19a>
    2d50:	f7 01       	movw	r30, r14
    2d52:	e8 0f       	add	r30, r24
    2d54:	f9 1f       	adc	r31, r25
    2d56:	dc 01       	movw	r26, r24
    2d58:	a8 54       	subi	r26, 0x48	; 72
    2d5a:	b3 4d       	sbci	r27, 0xD3	; 211
    2d5c:	2c 91       	ld	r18, X
    2d5e:	ec 55       	subi	r30, 0x5C	; 92
    2d60:	f3 4d       	sbci	r31, 0xD3	; 211
    2d62:	20 83       	st	Z, r18
    2d64:	01 96       	adiw	r24, 0x01	; 1
    2d66:	e8 eb       	ldi	r30, 0xB8	; 184
    2d68:	fc e2       	ldi	r31, 0x2C	; 44
    2d6a:	01 90       	ld	r0, Z+
    2d6c:	00 20       	and	r0, r0
    2d6e:	e9 f7       	brne	.-6      	; 0x2d6a <display_vprintf+0x19e>
    2d70:	31 97       	sbiw	r30, 0x01	; 1
    2d72:	e8 5b       	subi	r30, 0xB8	; 184
    2d74:	fc 42       	sbci	r31, 0x2C	; 44
    2d76:	8e 17       	cp	r24, r30
    2d78:	9f 07       	cpc	r25, r31
    2d7a:	50 f3       	brcs	.-44     	; 0x2d50 <display_vprintf+0x184>
    2d7c:	ee 0e       	add	r14, r30
    2d7e:	ff 1e       	adc	r15, r31
    2d80:	34 01       	movw	r6, r8
    2d82:	d6 01       	movw	r26, r12
    2d84:	66 c0       	rjmp	.+204    	; 0x2e52 <display_vprintf+0x286>
    2d86:	43 01       	movw	r8, r6
    2d88:	f4 e0       	ldi	r31, 0x04	; 4
    2d8a:	8f 0e       	add	r8, r31
    2d8c:	91 1c       	adc	r9, r1
    2d8e:	f3 01       	movw	r30, r6
    2d90:	40 81       	ld	r20, Z
    2d92:	51 81       	ldd	r21, Z+1	; 0x01
    2d94:	62 81       	ldd	r22, Z+2	; 0x02
    2d96:	73 81       	ldd	r23, Z+3	; 0x03
    2d98:	88 eb       	ldi	r24, 0xB8	; 184
    2d9a:	9c e2       	ldi	r25, 0x2C	; 44
    2d9c:	0e 94 04 14 	call	0x2808	; 0x2808 <ftoa_fixed>
    2da0:	80 e0       	ldi	r24, 0x00	; 0
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	0b c0       	rjmp	.+22     	; 0x2dbc <display_vprintf+0x1f0>
    2da6:	f7 01       	movw	r30, r14
    2da8:	e8 0f       	add	r30, r24
    2daa:	f9 1f       	adc	r31, r25
    2dac:	dc 01       	movw	r26, r24
    2dae:	a8 54       	subi	r26, 0x48	; 72
    2db0:	b3 4d       	sbci	r27, 0xD3	; 211
    2db2:	2c 91       	ld	r18, X
    2db4:	ec 55       	subi	r30, 0x5C	; 92
    2db6:	f3 4d       	sbci	r31, 0xD3	; 211
    2db8:	20 83       	st	Z, r18
    2dba:	01 96       	adiw	r24, 0x01	; 1
    2dbc:	e8 eb       	ldi	r30, 0xB8	; 184
    2dbe:	fc e2       	ldi	r31, 0x2C	; 44
    2dc0:	01 90       	ld	r0, Z+
    2dc2:	00 20       	and	r0, r0
    2dc4:	e9 f7       	brne	.-6      	; 0x2dc0 <display_vprintf+0x1f4>
    2dc6:	31 97       	sbiw	r30, 0x01	; 1
    2dc8:	e8 5b       	subi	r30, 0xB8	; 184
    2dca:	fc 42       	sbci	r31, 0x2C	; 44
    2dcc:	8e 17       	cp	r24, r30
    2dce:	9f 07       	cpc	r25, r31
    2dd0:	50 f3       	brcs	.-44     	; 0x2da6 <display_vprintf+0x1da>
    2dd2:	ee 0e       	add	r14, r30
    2dd4:	ff 1e       	adc	r15, r31
    2dd6:	34 01       	movw	r6, r8
    2dd8:	d6 01       	movw	r26, r12
    2dda:	3b c0       	rjmp	.+118    	; 0x2e52 <display_vprintf+0x286>
    2ddc:	43 01       	movw	r8, r6
    2dde:	f4 e0       	ldi	r31, 0x04	; 4
    2de0:	8f 0e       	add	r8, r31
    2de2:	91 1c       	adc	r9, r1
    2de4:	f3 01       	movw	r30, r6
    2de6:	40 81       	ld	r20, Z
    2de8:	51 81       	ldd	r21, Z+1	; 0x01
    2dea:	62 81       	ldd	r22, Z+2	; 0x02
    2dec:	73 81       	ldd	r23, Z+3	; 0x03
    2dee:	88 eb       	ldi	r24, 0xB8	; 184
    2df0:	9c e2       	ldi	r25, 0x2C	; 44
    2df2:	0e 94 fe 14 	call	0x29fc	; 0x29fc <ftoa_sci>
    2df6:	80 e0       	ldi	r24, 0x00	; 0
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	0b c0       	rjmp	.+22     	; 0x2e12 <display_vprintf+0x246>
    2dfc:	f7 01       	movw	r30, r14
    2dfe:	e8 0f       	add	r30, r24
    2e00:	f9 1f       	adc	r31, r25
    2e02:	dc 01       	movw	r26, r24
    2e04:	a8 54       	subi	r26, 0x48	; 72
    2e06:	b3 4d       	sbci	r27, 0xD3	; 211
    2e08:	2c 91       	ld	r18, X
    2e0a:	ec 55       	subi	r30, 0x5C	; 92
    2e0c:	f3 4d       	sbci	r31, 0xD3	; 211
    2e0e:	20 83       	st	Z, r18
    2e10:	01 96       	adiw	r24, 0x01	; 1
    2e12:	e8 eb       	ldi	r30, 0xB8	; 184
    2e14:	fc e2       	ldi	r31, 0x2C	; 44
    2e16:	01 90       	ld	r0, Z+
    2e18:	00 20       	and	r0, r0
    2e1a:	e9 f7       	brne	.-6      	; 0x2e16 <display_vprintf+0x24a>
    2e1c:	31 97       	sbiw	r30, 0x01	; 1
    2e1e:	e8 5b       	subi	r30, 0xB8	; 184
    2e20:	fc 42       	sbci	r31, 0x2C	; 44
    2e22:	8e 17       	cp	r24, r30
    2e24:	9f 07       	cpc	r25, r31
    2e26:	50 f3       	brcs	.-44     	; 0x2dfc <display_vprintf+0x230>
    2e28:	ee 0e       	add	r14, r30
    2e2a:	ff 1e       	adc	r15, r31
    2e2c:	34 01       	movw	r6, r8
    2e2e:	d6 01       	movw	r26, r12
    2e30:	10 c0       	rjmp	.+32     	; 0x2e52 <display_vprintf+0x286>
    2e32:	d7 01       	movw	r26, r14
    2e34:	ac 55       	subi	r26, 0x5C	; 92
    2e36:	b3 4d       	sbci	r27, 0xD3	; 211
    2e38:	8c 93       	st	X, r24
    2e3a:	8a 30       	cpi	r24, 0x0A	; 10
    2e3c:	21 f4       	brne	.+8      	; 0x2e46 <display_vprintf+0x27a>
    2e3e:	d7 01       	movw	r26, r14
    2e40:	ac 55       	subi	r26, 0x5C	; 92
    2e42:	b3 4d       	sbci	r27, 0xD3	; 211
    2e44:	1c 92       	st	X, r1
    2e46:	ff ef       	ldi	r31, 0xFF	; 255
    2e48:	ef 1a       	sub	r14, r31
    2e4a:	ff 0a       	sbc	r15, r31
    2e4c:	d9 01       	movw	r26, r18
    2e4e:	01 c0       	rjmp	.+2      	; 0x2e52 <display_vprintf+0x286>
    2e50:	d6 01       	movw	r26, r12
    2e52:	9d 01       	movw	r18, r26
    2e54:	2f 5f       	subi	r18, 0xFF	; 255
    2e56:	3f 4f       	sbci	r19, 0xFF	; 255
    2e58:	8c 91       	ld	r24, X
    2e5a:	81 11       	cpse	r24, r1
    2e5c:	e6 ce       	rjmp	.-564    	; 0x2c2a <display_vprintf+0x5e>
    2e5e:	c7 01       	movw	r24, r14
    2e60:	80 0f       	add	r24, r16
    2e62:	91 1f       	adc	r25, r17
    2e64:	44 97       	sbiw	r24, 0x14	; 20
    2e66:	2c f0       	brlt	.+10     	; 0x2e72 <display_vprintf+0x2a6>
    2e68:	84 e1       	ldi	r24, 0x14	; 20
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	7c 01       	movw	r14, r24
    2e6e:	e0 1a       	sub	r14, r16
    2e70:	f1 0a       	sbc	r15, r17
    2e72:	80 e0       	ldi	r24, 0x00	; 0
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	08 c0       	rjmp	.+16     	; 0x2e88 <display_vprintf+0x2bc>
    2e78:	e3 e0       	ldi	r30, 0x03	; 3
    2e7a:	f0 e0       	ldi	r31, 0x00	; 0
    2e7c:	ec 0f       	add	r30, r28
    2e7e:	fd 1f       	adc	r31, r29
    2e80:	e8 0f       	add	r30, r24
    2e82:	f9 1f       	adc	r31, r25
    2e84:	10 82       	st	Z, r1
    2e86:	01 96       	adiw	r24, 0x01	; 1
    2e88:	84 31       	cpi	r24, 0x14	; 20
    2e8a:	91 05       	cpc	r25, r1
    2e8c:	ac f3       	brlt	.-22     	; 0x2e78 <display_vprintf+0x2ac>
    2e8e:	b9 82       	std	Y+1, r11	; 0x01
    2e90:	0a 83       	std	Y+2, r16	; 0x02
    2e92:	80 e0       	ldi	r24, 0x00	; 0
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	0c c0       	rjmp	.+24     	; 0x2eb0 <display_vprintf+0x2e4>
    2e98:	fc 01       	movw	r30, r24
    2e9a:	ec 55       	subi	r30, 0x5C	; 92
    2e9c:	f3 4d       	sbci	r31, 0xD3	; 211
    2e9e:	20 81       	ld	r18, Z
    2ea0:	e3 e0       	ldi	r30, 0x03	; 3
    2ea2:	f0 e0       	ldi	r31, 0x00	; 0
    2ea4:	ec 0f       	add	r30, r28
    2ea6:	fd 1f       	adc	r31, r29
    2ea8:	e8 0f       	add	r30, r24
    2eaa:	f9 1f       	adc	r31, r25
    2eac:	20 83       	st	Z, r18
    2eae:	01 96       	adiw	r24, 0x01	; 1
    2eb0:	8e 15       	cp	r24, r14
    2eb2:	9f 05       	cpc	r25, r15
    2eb4:	8c f3       	brlt	.-30     	; 0x2e98 <display_vprintf+0x2cc>
    2eb6:	00 e0       	ldi	r16, 0x00	; 0
    2eb8:	2f ef       	ldi	r18, 0xFF	; 255
    2eba:	3f ef       	ldi	r19, 0xFF	; 255
    2ebc:	a9 01       	movw	r20, r18
    2ebe:	be 01       	movw	r22, r28
    2ec0:	6f 5f       	subi	r22, 0xFF	; 255
    2ec2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ec4:	80 91 d1 2c 	lds	r24, 0x2CD1	; 0x802cd1 <displayLineQueue>
    2ec8:	90 91 d2 2c 	lds	r25, 0x2CD2	; 0x802cd2 <displayLineQueue+0x1>
    2ecc:	0e 94 db 07 	call	0xfb6	; 0xfb6 <xQueueGenericSend>
    2ed0:	c7 01       	movw	r24, r14
    2ed2:	66 96       	adiw	r28, 0x16	; 22
    2ed4:	cd bf       	out	0x3d, r28	; 61
    2ed6:	de bf       	out	0x3e, r29	; 62
    2ed8:	df 91       	pop	r29
    2eda:	cf 91       	pop	r28
    2edc:	1f 91       	pop	r17
    2ede:	0f 91       	pop	r16
    2ee0:	ff 90       	pop	r15
    2ee2:	ef 90       	pop	r14
    2ee4:	df 90       	pop	r13
    2ee6:	cf 90       	pop	r12
    2ee8:	bf 90       	pop	r11
    2eea:	9f 90       	pop	r9
    2eec:	8f 90       	pop	r8
    2eee:	7f 90       	pop	r7
    2ef0:	6f 90       	pop	r6
    2ef2:	08 95       	ret

00002ef4 <__vector_108>:
    2ef4:	1f 92       	push	r1
    2ef6:	0f 92       	push	r0
    2ef8:	0f b6       	in	r0, 0x3f	; 63
    2efa:	0f 92       	push	r0
    2efc:	11 24       	eor	r1, r1
    2efe:	0b b6       	in	r0, 0x3b	; 59
    2f00:	0f 92       	push	r0
    2f02:	2f 93       	push	r18
    2f04:	3f 93       	push	r19
    2f06:	4f 93       	push	r20
    2f08:	5f 93       	push	r21
    2f0a:	6f 93       	push	r22
    2f0c:	7f 93       	push	r23
    2f0e:	8f 93       	push	r24
    2f10:	9f 93       	push	r25
    2f12:	af 93       	push	r26
    2f14:	bf 93       	push	r27
    2f16:	ef 93       	push	r30
    2f18:	ff 93       	push	r31
    2f1a:	cf 93       	push	r28
    2f1c:	df 93       	push	r29
    2f1e:	1f 92       	push	r1
    2f20:	cd b7       	in	r28, 0x3d	; 61
    2f22:	de b7       	in	r29, 0x3e	; 62
    2f24:	19 82       	std	Y+1, r1	; 0x01
    2f26:	9e 01       	movw	r18, r28
    2f28:	2f 5f       	subi	r18, 0xFF	; 255
    2f2a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f2c:	41 e0       	ldi	r20, 0x01	; 1
    2f2e:	50 e0       	ldi	r21, 0x00	; 0
    2f30:	60 e0       	ldi	r22, 0x00	; 0
    2f32:	70 e0       	ldi	r23, 0x00	; 0
    2f34:	80 91 d3 2c 	lds	r24, 0x2CD3	; 0x802cd3 <egDisplayTiming>
    2f38:	90 91 d4 2c 	lds	r25, 0x2CD4	; 0x802cd4 <egDisplayTiming+0x1>
    2f3c:	0e 94 07 04 	call	0x80e	; 0x80e <xEventGroupSetBitsFromISR>
    2f40:	60 e0       	ldi	r22, 0x00	; 0
    2f42:	80 e0       	ldi	r24, 0x00	; 0
    2f44:	9b e0       	ldi	r25, 0x0B	; 11
    2f46:	0e 94 58 02 	call	0x4b0	; 0x4b0 <TC0_ConfigClockSource>
    2f4a:	10 92 06 0b 	sts	0x0B06, r1	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7deb06>
    2f4e:	0f 90       	pop	r0
    2f50:	df 91       	pop	r29
    2f52:	cf 91       	pop	r28
    2f54:	ff 91       	pop	r31
    2f56:	ef 91       	pop	r30
    2f58:	bf 91       	pop	r27
    2f5a:	af 91       	pop	r26
    2f5c:	9f 91       	pop	r25
    2f5e:	8f 91       	pop	r24
    2f60:	7f 91       	pop	r23
    2f62:	6f 91       	pop	r22
    2f64:	5f 91       	pop	r21
    2f66:	4f 91       	pop	r20
    2f68:	3f 91       	pop	r19
    2f6a:	2f 91       	pop	r18
    2f6c:	0f 90       	pop	r0
    2f6e:	0b be       	out	0x3b, r0	; 59
    2f70:	0f 90       	pop	r0
    2f72:	0f be       	out	0x3f, r0	; 63
    2f74:	0f 90       	pop	r0
    2f76:	1f 90       	pop	r1
    2f78:	18 95       	reti

00002f7a <delayUS>:
    2f7a:	cf 92       	push	r12
    2f7c:	df 92       	push	r13
    2f7e:	ef 92       	push	r14
    2f80:	ff 92       	push	r15
    2f82:	0f 93       	push	r16
    2f84:	6b 01       	movw	r12, r22
    2f86:	7c 01       	movw	r14, r24
    2f88:	82 e0       	ldi	r24, 0x02	; 2
    2f8a:	c8 16       	cp	r12, r24
    2f8c:	d1 04       	cpc	r13, r1
    2f8e:	e1 04       	cpc	r14, r1
    2f90:	f1 04       	cpc	r15, r1
    2f92:	28 f4       	brcc	.+10     	; 0x2f9e <delayUS+0x24>
    2f94:	c1 2c       	mov	r12, r1
    2f96:	d1 2c       	mov	r13, r1
    2f98:	76 01       	movw	r14, r12
    2f9a:	68 94       	set
    2f9c:	c1 f8       	bld	r12, 1
    2f9e:	e0 e0       	ldi	r30, 0x00	; 0
    2fa0:	fb e0       	ldi	r31, 0x0B	; 11
    2fa2:	81 e0       	ldi	r24, 0x01	; 1
    2fa4:	86 83       	std	Z+6, r24	; 0x06
    2fa6:	10 a2       	std	Z+32, r1	; 0x20
    2fa8:	11 a2       	std	Z+33, r1	; 0x21
    2faa:	60 e0       	ldi	r22, 0x00	; 0
    2fac:	80 e0       	ldi	r24, 0x00	; 0
    2fae:	9b e0       	ldi	r25, 0x0B	; 11
    2fb0:	0e 94 5e 02 	call	0x4bc	; 0x4bc <TC0_ConfigWGM>
    2fb4:	8e ef       	ldi	r24, 0xFE	; 254
    2fb6:	c8 16       	cp	r12, r24
    2fb8:	8f ef       	ldi	r24, 0xFF	; 255
    2fba:	d8 06       	cpc	r13, r24
    2fbc:	e1 04       	cpc	r14, r1
    2fbe:	f1 04       	cpc	r15, r1
    2fc0:	70 f4       	brcc	.+28     	; 0x2fde <delayUS+0x64>
    2fc2:	f6 94       	lsr	r15
    2fc4:	e7 94       	ror	r14
    2fc6:	d7 94       	ror	r13
    2fc8:	c7 94       	ror	r12
    2fca:	c0 92 26 0b 	sts	0x0B26, r12	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7deb26>
    2fce:	d0 92 27 0b 	sts	0x0B27, r13	; 0x800b27 <__TEXT_REGION_LENGTH__+0x7deb27>
    2fd2:	65 e0       	ldi	r22, 0x05	; 5
    2fd4:	80 e0       	ldi	r24, 0x00	; 0
    2fd6:	9b e0       	ldi	r25, 0x0B	; 11
    2fd8:	0e 94 58 02 	call	0x4b0	; 0x4b0 <TC0_ConfigClockSource>
    2fdc:	19 c0       	rjmp	.+50     	; 0x3010 <delayUS+0x96>
    2fde:	80 e4       	ldi	r24, 0x40	; 64
    2fe0:	c8 16       	cp	r12, r24
    2fe2:	82 e4       	ldi	r24, 0x42	; 66
    2fe4:	d8 06       	cpc	r13, r24
    2fe6:	8f e0       	ldi	r24, 0x0F	; 15
    2fe8:	e8 06       	cpc	r14, r24
    2fea:	f1 04       	cpc	r15, r1
    2fec:	88 f4       	brcc	.+34     	; 0x3010 <delayUS+0x96>
    2fee:	68 94       	set
    2ff0:	14 f8       	bld	r1, 4
    2ff2:	f6 94       	lsr	r15
    2ff4:	e7 94       	ror	r14
    2ff6:	d7 94       	ror	r13
    2ff8:	c7 94       	ror	r12
    2ffa:	16 94       	lsr	r1
    2ffc:	d1 f7       	brne	.-12     	; 0x2ff2 <delayUS+0x78>
    2ffe:	c0 92 26 0b 	sts	0x0B26, r12	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7deb26>
    3002:	d0 92 27 0b 	sts	0x0B27, r13	; 0x800b27 <__TEXT_REGION_LENGTH__+0x7deb27>
    3006:	67 e0       	ldi	r22, 0x07	; 7
    3008:	80 e0       	ldi	r24, 0x00	; 0
    300a:	9b e0       	ldi	r25, 0x0B	; 11
    300c:	0e 94 58 02 	call	0x4b0	; 0x4b0 <TC0_ConfigClockSource>
    3010:	0f 2e       	mov	r0, r31
    3012:	f4 ef       	ldi	r31, 0xF4	; 244
    3014:	cf 2e       	mov	r12, r31
    3016:	dd 24       	eor	r13, r13
    3018:	d3 94       	inc	r13
    301a:	e1 2c       	mov	r14, r1
    301c:	f1 2c       	mov	r15, r1
    301e:	f0 2d       	mov	r31, r0
    3020:	00 e0       	ldi	r16, 0x00	; 0
    3022:	21 e0       	ldi	r18, 0x01	; 1
    3024:	41 e0       	ldi	r20, 0x01	; 1
    3026:	50 e0       	ldi	r21, 0x00	; 0
    3028:	60 e0       	ldi	r22, 0x00	; 0
    302a:	70 e0       	ldi	r23, 0x00	; 0
    302c:	80 91 d3 2c 	lds	r24, 0x2CD3	; 0x802cd3 <egDisplayTiming>
    3030:	90 91 d4 2c 	lds	r25, 0x2CD4	; 0x802cd4 <egDisplayTiming+0x1>
    3034:	0e 94 ae 02 	call	0x55c	; 0x55c <xEventGroupWaitBits>
    3038:	0f 91       	pop	r16
    303a:	ff 90       	pop	r15
    303c:	ef 90       	pop	r14
    303e:	df 90       	pop	r13
    3040:	cf 90       	pop	r12
    3042:	08 95       	ret

00003044 <setPort>:
    3044:	82 95       	swap	r24
    3046:	80 7f       	andi	r24, 0xF0	; 240
    3048:	e0 e0       	ldi	r30, 0x00	; 0
    304a:	f6 e0       	ldi	r31, 0x06	; 6
    304c:	94 81       	ldd	r25, Z+4	; 0x04
    304e:	28 2f       	mov	r18, r24
    3050:	2f 60       	ori	r18, 0x0F	; 15
    3052:	92 23       	and	r25, r18
    3054:	94 83       	std	Z+4, r25	; 0x04
    3056:	94 81       	ldd	r25, Z+4	; 0x04
    3058:	89 2b       	or	r24, r25
    305a:	84 83       	std	Z+4, r24	; 0x04
    305c:	08 95       	ret

0000305e <setRS>:
    305e:	88 23       	and	r24, r24
    3060:	21 f0       	breq	.+8      	; 0x306a <setRS+0xc>
    3062:	81 e0       	ldi	r24, 0x01	; 1
    3064:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x7de665>
    3068:	08 95       	ret
    306a:	81 e0       	ldi	r24, 0x01	; 1
    306c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7de666>
    3070:	08 95       	ret

00003072 <setRW>:
    3072:	88 23       	and	r24, r24
    3074:	21 f0       	breq	.+8      	; 0x307e <setRW+0xc>
    3076:	82 e0       	ldi	r24, 0x02	; 2
    3078:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x7de665>
    307c:	08 95       	ret
    307e:	82 e0       	ldi	r24, 0x02	; 2
    3080:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7de666>
    3084:	08 95       	ret

00003086 <setE>:
    3086:	88 23       	and	r24, r24
    3088:	21 f0       	breq	.+8      	; 0x3092 <setE+0xc>
    308a:	84 e0       	ldi	r24, 0x04	; 4
    308c:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x7de665>
    3090:	08 95       	ret
    3092:	84 e0       	ldi	r24, 0x04	; 4
    3094:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7de666>
    3098:	08 95       	ret

0000309a <Nybble>:
    309a:	81 e0       	ldi	r24, 0x01	; 1
    309c:	0e 94 43 18 	call	0x3086	; 0x3086 <setE>
    30a0:	61 e0       	ldi	r22, 0x01	; 1
    30a2:	70 e0       	ldi	r23, 0x00	; 0
    30a4:	80 e0       	ldi	r24, 0x00	; 0
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <delayUS>
    30ac:	80 e0       	ldi	r24, 0x00	; 0
    30ae:	0e 94 43 18 	call	0x3086	; 0x3086 <setE>
    30b2:	08 95       	ret

000030b4 <command>:
    30b4:	cf 93       	push	r28
    30b6:	c8 2f       	mov	r28, r24
    30b8:	82 95       	swap	r24
    30ba:	8f 70       	andi	r24, 0x0F	; 15
    30bc:	0e 94 22 18 	call	0x3044	; 0x3044 <setPort>
    30c0:	80 e0       	ldi	r24, 0x00	; 0
    30c2:	0e 94 2f 18 	call	0x305e	; 0x305e <setRS>
    30c6:	80 e0       	ldi	r24, 0x00	; 0
    30c8:	0e 94 39 18 	call	0x3072	; 0x3072 <setRW>
    30cc:	0e 94 4d 18 	call	0x309a	; 0x309a <Nybble>
    30d0:	8c 2f       	mov	r24, r28
    30d2:	8f 70       	andi	r24, 0x0F	; 15
    30d4:	0e 94 22 18 	call	0x3044	; 0x3044 <setPort>
    30d8:	0e 94 4d 18 	call	0x309a	; 0x309a <Nybble>
    30dc:	cf 91       	pop	r28
    30de:	08 95       	ret

000030e0 <write>:
    30e0:	cf 93       	push	r28
    30e2:	c8 2f       	mov	r28, r24
    30e4:	82 95       	swap	r24
    30e6:	8f 70       	andi	r24, 0x0F	; 15
    30e8:	0e 94 22 18 	call	0x3044	; 0x3044 <setPort>
    30ec:	81 e0       	ldi	r24, 0x01	; 1
    30ee:	0e 94 2f 18 	call	0x305e	; 0x305e <setRS>
    30f2:	80 e0       	ldi	r24, 0x00	; 0
    30f4:	0e 94 39 18 	call	0x3072	; 0x3072 <setRW>
    30f8:	0e 94 4d 18 	call	0x309a	; 0x309a <Nybble>
    30fc:	8c 2f       	mov	r24, r28
    30fe:	8f 70       	andi	r24, 0x0F	; 15
    3100:	0e 94 22 18 	call	0x3044	; 0x3044 <setPort>
    3104:	0e 94 4d 18 	call	0x309a	; 0x309a <Nybble>
    3108:	cf 91       	pop	r28
    310a:	08 95       	ret

0000310c <vInitDisplay>:
    310c:	ef 92       	push	r14
    310e:	ff 92       	push	r15
    3110:	0f 93       	push	r16
    3112:	e0 e0       	ldi	r30, 0x00	; 0
    3114:	f6 e0       	ldi	r31, 0x06	; 6
    3116:	80 e1       	ldi	r24, 0x10	; 16
    3118:	81 83       	std	Z+1, r24	; 0x01
    311a:	80 e2       	ldi	r24, 0x20	; 32
    311c:	81 83       	std	Z+1, r24	; 0x01
    311e:	80 e4       	ldi	r24, 0x40	; 64
    3120:	81 83       	std	Z+1, r24	; 0x01
    3122:	80 e8       	ldi	r24, 0x80	; 128
    3124:	81 83       	std	Z+1, r24	; 0x01
    3126:	a0 e6       	ldi	r26, 0x60	; 96
    3128:	b6 e0       	ldi	r27, 0x06	; 6
    312a:	81 e0       	ldi	r24, 0x01	; 1
    312c:	11 96       	adiw	r26, 0x01	; 1
    312e:	8c 93       	st	X, r24
    3130:	11 97       	sbiw	r26, 0x01	; 1
    3132:	82 e0       	ldi	r24, 0x02	; 2
    3134:	11 96       	adiw	r26, 0x01	; 1
    3136:	8c 93       	st	X, r24
    3138:	11 97       	sbiw	r26, 0x01	; 1
    313a:	84 e0       	ldi	r24, 0x04	; 4
    313c:	11 96       	adiw	r26, 0x01	; 1
    313e:	8c 93       	st	X, r24
    3140:	11 97       	sbiw	r26, 0x01	; 1
    3142:	84 81       	ldd	r24, Z+4	; 0x04
    3144:	8f 70       	andi	r24, 0x0F	; 15
    3146:	84 83       	std	Z+4, r24	; 0x04
    3148:	14 96       	adiw	r26, 0x04	; 4
    314a:	8c 91       	ld	r24, X
    314c:	14 97       	sbiw	r26, 0x04	; 4
    314e:	88 7f       	andi	r24, 0xF8	; 248
    3150:	14 96       	adiw	r26, 0x04	; 4
    3152:	8c 93       	st	X, r24
    3154:	40 e0       	ldi	r20, 0x00	; 0
    3156:	66 e1       	ldi	r22, 0x16	; 22
    3158:	88 e0       	ldi	r24, 0x08	; 8
    315a:	0e 94 b1 07 	call	0xf62	; 0xf62 <xQueueGenericCreate>
    315e:	80 93 d1 2c 	sts	0x2CD1, r24	; 0x802cd1 <displayLineQueue>
    3162:	90 93 d2 2c 	sts	0x2CD2, r25	; 0x802cd2 <displayLineQueue+0x1>
    3166:	0e 94 99 02 	call	0x532	; 0x532 <xEventGroupCreate>
    316a:	80 93 d3 2c 	sts	0x2CD3, r24	; 0x802cd3 <egDisplayTiming>
    316e:	90 93 d4 2c 	sts	0x2CD4, r25	; 0x802cd4 <egDisplayTiming+0x1>
    3172:	e1 2c       	mov	r14, r1
    3174:	f1 2c       	mov	r15, r1
    3176:	01 e0       	ldi	r16, 0x01	; 1
    3178:	20 e0       	ldi	r18, 0x00	; 0
    317a:	30 e0       	ldi	r19, 0x00	; 0
    317c:	4e e5       	ldi	r20, 0x5E	; 94
    317e:	51 e0       	ldi	r21, 0x01	; 1
    3180:	6d e3       	ldi	r22, 0x3D	; 61
    3182:	70 e2       	ldi	r23, 0x20	; 32
    3184:	8e e1       	ldi	r24, 0x1E	; 30
    3186:	99 e1       	ldi	r25, 0x19	; 25
    3188:	0e 94 3f 0b 	call	0x167e	; 0x167e <xTaskCreate>
    318c:	0f 91       	pop	r16
    318e:	ff 90       	pop	r15
    3190:	ef 90       	pop	r14
    3192:	08 95       	ret

00003194 <_displaySetPos>:
    3194:	81 30       	cpi	r24, 0x01	; 1
    3196:	91 05       	cpc	r25, r1
    3198:	79 f0       	breq	.+30     	; 0x31b8 <_displaySetPos+0x24>
    319a:	1c f4       	brge	.+6      	; 0x31a2 <_displaySetPos+0xe>
    319c:	89 2b       	or	r24, r25
    319e:	39 f0       	breq	.+14     	; 0x31ae <_displaySetPos+0x1a>
    31a0:	19 c0       	rjmp	.+50     	; 0x31d4 <_displaySetPos+0x40>
    31a2:	82 30       	cpi	r24, 0x02	; 2
    31a4:	91 05       	cpc	r25, r1
    31a6:	69 f0       	breq	.+26     	; 0x31c2 <_displaySetPos+0x2e>
    31a8:	03 97       	sbiw	r24, 0x03	; 3
    31aa:	81 f0       	breq	.+32     	; 0x31cc <_displaySetPos+0x38>
    31ac:	13 c0       	rjmp	.+38     	; 0x31d4 <_displaySetPos+0x40>
    31ae:	80 e8       	ldi	r24, 0x80	; 128
    31b0:	86 0f       	add	r24, r22
    31b2:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <command>
    31b6:	0e c0       	rjmp	.+28     	; 0x31d4 <_displaySetPos+0x40>
    31b8:	80 ec       	ldi	r24, 0xC0	; 192
    31ba:	86 0f       	add	r24, r22
    31bc:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <command>
    31c0:	09 c0       	rjmp	.+18     	; 0x31d4 <_displaySetPos+0x40>
    31c2:	84 e9       	ldi	r24, 0x94	; 148
    31c4:	86 0f       	add	r24, r22
    31c6:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <command>
    31ca:	04 c0       	rjmp	.+8      	; 0x31d4 <_displaySetPos+0x40>
    31cc:	84 ed       	ldi	r24, 0xD4	; 212
    31ce:	86 0f       	add	r24, r22
    31d0:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <command>
    31d4:	67 e2       	ldi	r22, 0x27	; 39
    31d6:	70 e0       	ldi	r23, 0x00	; 0
    31d8:	80 e0       	ldi	r24, 0x00	; 0
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <delayUS>
    31e0:	08 95       	ret

000031e2 <_displayWriteChar>:
    31e2:	0e 94 70 18 	call	0x30e0	; 0x30e0 <write>
    31e6:	6b e2       	ldi	r22, 0x2B	; 43
    31e8:	70 e0       	ldi	r23, 0x00	; 0
    31ea:	80 e0       	ldi	r24, 0x00	; 0
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <delayUS>
    31f2:	08 95       	ret

000031f4 <_displayWriteString>:
    31f4:	0f 93       	push	r16
    31f6:	1f 93       	push	r17
    31f8:	cf 93       	push	r28
    31fa:	df 93       	push	r29
    31fc:	8c 01       	movw	r16, r24
    31fe:	c0 e0       	ldi	r28, 0x00	; 0
    3200:	d0 e0       	ldi	r29, 0x00	; 0
    3202:	09 c0       	rjmp	.+18     	; 0x3216 <_displayWriteString+0x22>
    3204:	f8 01       	movw	r30, r16
    3206:	ec 0f       	add	r30, r28
    3208:	fd 1f       	adc	r31, r29
    320a:	80 81       	ld	r24, Z
    320c:	88 23       	and	r24, r24
    320e:	31 f0       	breq	.+12     	; 0x321c <_displayWriteString+0x28>
    3210:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <_displayWriteChar>
    3214:	21 96       	adiw	r28, 0x01	; 1
    3216:	c4 31       	cpi	r28, 0x14	; 20
    3218:	d1 05       	cpc	r29, r1
    321a:	a4 f3       	brlt	.-24     	; 0x3204 <_displayWriteString+0x10>
    321c:	df 91       	pop	r29
    321e:	cf 91       	pop	r28
    3220:	1f 91       	pop	r17
    3222:	0f 91       	pop	r16
    3224:	08 95       	ret

00003226 <_displayWriteStringAtPos>:
    3226:	cf 93       	push	r28
    3228:	df 93       	push	r29
    322a:	ea 01       	movw	r28, r20
    322c:	0e 94 ca 18 	call	0x3194	; 0x3194 <_displaySetPos>
    3230:	ce 01       	movw	r24, r28
    3232:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <_displayWriteString>
    3236:	df 91       	pop	r29
    3238:	cf 91       	pop	r28
    323a:	08 95       	ret

0000323c <vDisplayUpdateTask>:
    323c:	cf 93       	push	r28
    323e:	df 93       	push	r29
    3240:	cd b7       	in	r28, 0x3d	; 61
    3242:	de b7       	in	r29, 0x3e	; 62
    3244:	c6 56       	subi	r28, 0x66	; 102
    3246:	d1 09       	sbc	r29, r1
    3248:	cd bf       	out	0x3d, r28	; 61
    324a:	de bf       	out	0x3e, r29	; 62
    324c:	80 e0       	ldi	r24, 0x00	; 0
    324e:	90 e0       	ldi	r25, 0x00	; 0
    3250:	19 c0       	rjmp	.+50     	; 0x3284 <vDisplayUpdateTask+0x48>
    3252:	44 e1       	ldi	r20, 0x14	; 20
    3254:	48 9f       	mul	r20, r24
    3256:	f0 01       	movw	r30, r0
    3258:	49 9f       	mul	r20, r25
    325a:	f0 0d       	add	r31, r0
    325c:	11 24       	eor	r1, r1
    325e:	41 e0       	ldi	r20, 0x01	; 1
    3260:	50 e0       	ldi	r21, 0x00	; 0
    3262:	4c 0f       	add	r20, r28
    3264:	5d 1f       	adc	r21, r29
    3266:	e4 0f       	add	r30, r20
    3268:	f5 1f       	adc	r31, r21
    326a:	e2 0f       	add	r30, r18
    326c:	f3 1f       	adc	r31, r19
    326e:	40 e2       	ldi	r20, 0x20	; 32
    3270:	40 83       	st	Z, r20
    3272:	2f 5f       	subi	r18, 0xFF	; 255
    3274:	3f 4f       	sbci	r19, 0xFF	; 255
    3276:	02 c0       	rjmp	.+4      	; 0x327c <vDisplayUpdateTask+0x40>
    3278:	20 e0       	ldi	r18, 0x00	; 0
    327a:	30 e0       	ldi	r19, 0x00	; 0
    327c:	24 31       	cpi	r18, 0x14	; 20
    327e:	31 05       	cpc	r19, r1
    3280:	44 f3       	brlt	.-48     	; 0x3252 <vDisplayUpdateTask+0x16>
    3282:	01 96       	adiw	r24, 0x01	; 1
    3284:	84 30       	cpi	r24, 0x04	; 4
    3286:	91 05       	cpc	r25, r1
    3288:	bc f3       	brlt	.-18     	; 0x3278 <vDisplayUpdateTask+0x3c>
    328a:	60 e4       	ldi	r22, 0x40	; 64
    328c:	7c e9       	ldi	r23, 0x9C	; 156
    328e:	80 e0       	ldi	r24, 0x00	; 0
    3290:	90 e0       	ldi	r25, 0x00	; 0
    3292:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <delayUS>
    3296:	83 e0       	ldi	r24, 0x03	; 3
    3298:	0e 94 22 18 	call	0x3044	; 0x3044 <setPort>
    329c:	68 e8       	ldi	r22, 0x88	; 136
    329e:	73 e1       	ldi	r23, 0x13	; 19
    32a0:	80 e0       	ldi	r24, 0x00	; 0
    32a2:	90 e0       	ldi	r25, 0x00	; 0
    32a4:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <delayUS>
    32a8:	0e 94 4d 18 	call	0x309a	; 0x309a <Nybble>
    32ac:	60 ea       	ldi	r22, 0xA0	; 160
    32ae:	70 e0       	ldi	r23, 0x00	; 0
    32b0:	80 e0       	ldi	r24, 0x00	; 0
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <delayUS>
    32b8:	0e 94 4d 18 	call	0x309a	; 0x309a <Nybble>
    32bc:	60 ea       	ldi	r22, 0xA0	; 160
    32be:	70 e0       	ldi	r23, 0x00	; 0
    32c0:	80 e0       	ldi	r24, 0x00	; 0
    32c2:	90 e0       	ldi	r25, 0x00	; 0
    32c4:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <delayUS>
    32c8:	0e 94 4d 18 	call	0x309a	; 0x309a <Nybble>
    32cc:	60 ea       	ldi	r22, 0xA0	; 160
    32ce:	70 e0       	ldi	r23, 0x00	; 0
    32d0:	80 e0       	ldi	r24, 0x00	; 0
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <delayUS>
    32d8:	82 e0       	ldi	r24, 0x02	; 2
    32da:	0e 94 22 18 	call	0x3044	; 0x3044 <setPort>
    32de:	0e 94 4d 18 	call	0x309a	; 0x309a <Nybble>
    32e2:	88 e2       	ldi	r24, 0x28	; 40
    32e4:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <command>
    32e8:	80 e1       	ldi	r24, 0x10	; 16
    32ea:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <command>
    32ee:	8c e0       	ldi	r24, 0x0C	; 12
    32f0:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <command>
    32f4:	86 e0       	ldi	r24, 0x06	; 6
    32f6:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <command>
    32fa:	68 ec       	ldi	r22, 0xC8	; 200
    32fc:	70 e0       	ldi	r23, 0x00	; 0
    32fe:	80 e0       	ldi	r24, 0x00	; 0
    3300:	90 e0       	ldi	r25, 0x00	; 0
    3302:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <vTaskDelay>
    3306:	40 e0       	ldi	r20, 0x00	; 0
    3308:	50 e0       	ldi	r21, 0x00	; 0
    330a:	ba 01       	movw	r22, r20
    330c:	80 91 d3 2c 	lds	r24, 0x2CD3	; 0x802cd3 <egDisplayTiming>
    3310:	90 91 d4 2c 	lds	r25, 0x2CD4	; 0x802cd4 <egDisplayTiming+0x1>
    3314:	0e 94 55 03 	call	0x6aa	; 0x6aa <xEventGroupClearBits>
    3318:	67 2b       	or	r22, r23
    331a:	68 2b       	or	r22, r24
    331c:	69 2b       	or	r22, r25
    331e:	09 f4       	brne	.+2      	; 0x3322 <vDisplayUpdateTask+0xe6>
    3320:	5f c0       	rjmp	.+190    	; 0x33e0 <vDisplayUpdateTask+0x1a4>
    3322:	42 e0       	ldi	r20, 0x02	; 2
    3324:	50 e0       	ldi	r21, 0x00	; 0
    3326:	60 e0       	ldi	r22, 0x00	; 0
    3328:	70 e0       	ldi	r23, 0x00	; 0
    332a:	80 91 d3 2c 	lds	r24, 0x2CD3	; 0x802cd3 <egDisplayTiming>
    332e:	90 91 d4 2c 	lds	r25, 0x2CD4	; 0x802cd4 <egDisplayTiming+0x1>
    3332:	0e 94 55 03 	call	0x6aa	; 0x6aa <xEventGroupClearBits>
    3336:	40 e0       	ldi	r20, 0x00	; 0
    3338:	50 e0       	ldi	r21, 0x00	; 0
    333a:	19 c0       	rjmp	.+50     	; 0x336e <vDisplayUpdateTask+0x132>
    333c:	24 e1       	ldi	r18, 0x14	; 20
    333e:	24 9f       	mul	r18, r20
    3340:	f0 01       	movw	r30, r0
    3342:	25 9f       	mul	r18, r21
    3344:	f0 0d       	add	r31, r0
    3346:	11 24       	eor	r1, r1
    3348:	21 e0       	ldi	r18, 0x01	; 1
    334a:	30 e0       	ldi	r19, 0x00	; 0
    334c:	2c 0f       	add	r18, r28
    334e:	3d 1f       	adc	r19, r29
    3350:	e2 0f       	add	r30, r18
    3352:	f3 1f       	adc	r31, r19
    3354:	e8 0f       	add	r30, r24
    3356:	f9 1f       	adc	r31, r25
    3358:	20 e2       	ldi	r18, 0x20	; 32
    335a:	20 83       	st	Z, r18
    335c:	01 96       	adiw	r24, 0x01	; 1
    335e:	02 c0       	rjmp	.+4      	; 0x3364 <vDisplayUpdateTask+0x128>
    3360:	80 e0       	ldi	r24, 0x00	; 0
    3362:	90 e0       	ldi	r25, 0x00	; 0
    3364:	84 31       	cpi	r24, 0x14	; 20
    3366:	91 05       	cpc	r25, r1
    3368:	4c f3       	brlt	.-46     	; 0x333c <vDisplayUpdateTask+0x100>
    336a:	4f 5f       	subi	r20, 0xFF	; 255
    336c:	5f 4f       	sbci	r21, 0xFF	; 255
    336e:	44 30       	cpi	r20, 0x04	; 4
    3370:	51 05       	cpc	r21, r1
    3372:	b4 f3       	brlt	.-20     	; 0x3360 <vDisplayUpdateTask+0x124>
    3374:	35 c0       	rjmp	.+106    	; 0x33e0 <vDisplayUpdateTask+0x1a4>
    3376:	2f ef       	ldi	r18, 0xFF	; 255
    3378:	3f ef       	ldi	r19, 0xFF	; 255
    337a:	a9 01       	movw	r20, r18
    337c:	be 01       	movw	r22, r28
    337e:	6f 5a       	subi	r22, 0xAF	; 175
    3380:	7f 4f       	sbci	r23, 0xFF	; 255
    3382:	80 91 d1 2c 	lds	r24, 0x2CD1	; 0x802cd1 <displayLineQueue>
    3386:	90 91 d2 2c 	lds	r25, 0x2CD2	; 0x802cd2 <displayLineQueue+0x1>
    338a:	0e 94 bf 08 	call	0x117e	; 0x117e <xQueueReceive>
    338e:	88 23       	and	r24, r24
    3390:	39 f1       	breq	.+78     	; 0x33e0 <vDisplayUpdateTask+0x1a4>
    3392:	12 c0       	rjmp	.+36     	; 0x33b8 <vDisplayUpdateTask+0x17c>
    3394:	62 96       	adiw	r28, 0x12	; 18
    3396:	4f ad       	ldd	r20, Y+63	; 0x3f
    3398:	62 97       	sbiw	r28, 0x12	; 18
    339a:	e1 e0       	ldi	r30, 0x01	; 1
    339c:	f0 e0       	ldi	r31, 0x00	; 0
    339e:	ec 0f       	add	r30, r28
    33a0:	fd 1f       	adc	r31, r29
    33a2:	74 e1       	ldi	r23, 0x14	; 20
    33a4:	47 9f       	mul	r20, r23
    33a6:	e0 0d       	add	r30, r0
    33a8:	f1 1d       	adc	r31, r1
    33aa:	11 24       	eor	r1, r1
    33ac:	e8 0f       	add	r30, r24
    33ae:	f9 1f       	adc	r31, r25
    33b0:	60 83       	st	Z, r22
    33b2:	2f 5f       	subi	r18, 0xFF	; 255
    33b4:	3f 4f       	sbci	r19, 0xFF	; 255
    33b6:	02 c0       	rjmp	.+4      	; 0x33bc <vDisplayUpdateTask+0x180>
    33b8:	20 e0       	ldi	r18, 0x00	; 0
    33ba:	30 e0       	ldi	r19, 0x00	; 0
    33bc:	63 96       	adiw	r28, 0x13	; 19
    33be:	8f ad       	ldd	r24, Y+63	; 0x3f
    33c0:	63 97       	sbiw	r28, 0x13	; 19
    33c2:	f9 01       	movw	r30, r18
    33c4:	e8 0f       	add	r30, r24
    33c6:	f1 1d       	adc	r31, r1
    33c8:	cf 01       	movw	r24, r30
    33ca:	74 97       	sbiw	r30, 0x14	; 20
    33cc:	4c f4       	brge	.+18     	; 0x33e0 <vDisplayUpdateTask+0x1a4>
    33ce:	e1 e5       	ldi	r30, 0x51	; 81
    33d0:	f0 e0       	ldi	r31, 0x00	; 0
    33d2:	ec 0f       	add	r30, r28
    33d4:	fd 1f       	adc	r31, r29
    33d6:	e2 0f       	add	r30, r18
    33d8:	f3 1f       	adc	r31, r19
    33da:	62 81       	ldd	r22, Z+2	; 0x02
    33dc:	61 11       	cpse	r22, r1
    33de:	da cf       	rjmp	.-76     	; 0x3394 <vDisplayUpdateTask+0x158>
    33e0:	80 91 d1 2c 	lds	r24, 0x2CD1	; 0x802cd1 <displayLineQueue>
    33e4:	90 91 d2 2c 	lds	r25, 0x2CD2	; 0x802cd2 <displayLineQueue+0x1>
    33e8:	0e 94 5e 09 	call	0x12bc	; 0x12bc <uxQueueMessagesWaiting>
    33ec:	81 11       	cpse	r24, r1
    33ee:	c3 cf       	rjmp	.-122    	; 0x3376 <vDisplayUpdateTask+0x13a>
    33f0:	00 e0       	ldi	r16, 0x00	; 0
    33f2:	10 e0       	ldi	r17, 0x00	; 0
    33f4:	13 c0       	rjmp	.+38     	; 0x341c <vDisplayUpdateTask+0x1e0>
    33f6:	84 e1       	ldi	r24, 0x14	; 20
    33f8:	80 9f       	mul	r24, r16
    33fa:	a0 01       	movw	r20, r0
    33fc:	81 9f       	mul	r24, r17
    33fe:	50 0d       	add	r21, r0
    3400:	11 24       	eor	r1, r1
    3402:	21 e0       	ldi	r18, 0x01	; 1
    3404:	30 e0       	ldi	r19, 0x00	; 0
    3406:	2c 0f       	add	r18, r28
    3408:	3d 1f       	adc	r19, r29
    340a:	42 0f       	add	r20, r18
    340c:	53 1f       	adc	r21, r19
    340e:	60 e0       	ldi	r22, 0x00	; 0
    3410:	70 e0       	ldi	r23, 0x00	; 0
    3412:	c8 01       	movw	r24, r16
    3414:	0e 94 13 19 	call	0x3226	; 0x3226 <_displayWriteStringAtPos>
    3418:	0f 5f       	subi	r16, 0xFF	; 255
    341a:	1f 4f       	sbci	r17, 0xFF	; 255
    341c:	04 30       	cpi	r16, 0x04	; 4
    341e:	11 05       	cpc	r17, r1
    3420:	54 f3       	brlt	.-44     	; 0x33f6 <vDisplayUpdateTask+0x1ba>
    3422:	6b cf       	rjmp	.-298    	; 0x32fa <vDisplayUpdateTask+0xbe>

00003424 <vDisplayWriteStringAtPos>:
}

void vDisplayWriteStringAtPos(int line, int pos, char const *fmt, ...) {
    3424:	cf 93       	push	r28
    3426:	df 93       	push	r29
    3428:	cd b7       	in	r28, 0x3d	; 61
    342a:	de b7       	in	r29, 0x3e	; 62
	va_list arg;	
	va_start(arg, fmt);
	display_vprintf(line, pos, fmt, arg);
    342c:	9e 01       	movw	r18, r28
    342e:	24 5f       	subi	r18, 0xF4	; 244
    3430:	3f 4f       	sbci	r19, 0xFF	; 255
    3432:	4a 85       	ldd	r20, Y+10	; 0x0a
    3434:	5b 85       	ldd	r21, Y+11	; 0x0b
    3436:	68 85       	ldd	r22, Y+8	; 0x08
    3438:	79 85       	ldd	r23, Y+9	; 0x09
    343a:	8e 81       	ldd	r24, Y+6	; 0x06
    343c:	9f 81       	ldd	r25, Y+7	; 0x07
    343e:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <display_vprintf>
	va_end(arg);	
}
    3442:	df 91       	pop	r29
    3444:	cf 91       	pop	r28
    3446:	08 95       	ret

00003448 <__subsf3>:
    3448:	50 58       	subi	r21, 0x80	; 128

0000344a <__addsf3>:
    344a:	bb 27       	eor	r27, r27
    344c:	aa 27       	eor	r26, r26
    344e:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__addsf3x>
    3452:	0c 94 b6 1b 	jmp	0x376c	; 0x376c <__fp_round>
    3456:	0e 94 a8 1b 	call	0x3750	; 0x3750 <__fp_pscA>
    345a:	38 f0       	brcs	.+14     	; 0x346a <__addsf3+0x20>
    345c:	0e 94 af 1b 	call	0x375e	; 0x375e <__fp_pscB>
    3460:	20 f0       	brcs	.+8      	; 0x346a <__addsf3+0x20>
    3462:	39 f4       	brne	.+14     	; 0x3472 <__addsf3+0x28>
    3464:	9f 3f       	cpi	r25, 0xFF	; 255
    3466:	19 f4       	brne	.+6      	; 0x346e <__addsf3+0x24>
    3468:	26 f4       	brtc	.+8      	; 0x3472 <__addsf3+0x28>
    346a:	0c 94 a5 1b 	jmp	0x374a	; 0x374a <__fp_nan>
    346e:	0e f4       	brtc	.+2      	; 0x3472 <__addsf3+0x28>
    3470:	e0 95       	com	r30
    3472:	e7 fb       	bst	r30, 7
    3474:	0c 94 9f 1b 	jmp	0x373e	; 0x373e <__fp_inf>

00003478 <__addsf3x>:
    3478:	e9 2f       	mov	r30, r25
    347a:	0e 94 c7 1b 	call	0x378e	; 0x378e <__fp_split3>
    347e:	58 f3       	brcs	.-42     	; 0x3456 <__addsf3+0xc>
    3480:	ba 17       	cp	r27, r26
    3482:	62 07       	cpc	r22, r18
    3484:	73 07       	cpc	r23, r19
    3486:	84 07       	cpc	r24, r20
    3488:	95 07       	cpc	r25, r21
    348a:	20 f0       	brcs	.+8      	; 0x3494 <__addsf3x+0x1c>
    348c:	79 f4       	brne	.+30     	; 0x34ac <__addsf3x+0x34>
    348e:	a6 f5       	brtc	.+104    	; 0x34f8 <__addsf3x+0x80>
    3490:	0c 94 e9 1b 	jmp	0x37d2	; 0x37d2 <__fp_zero>
    3494:	0e f4       	brtc	.+2      	; 0x3498 <__addsf3x+0x20>
    3496:	e0 95       	com	r30
    3498:	0b 2e       	mov	r0, r27
    349a:	ba 2f       	mov	r27, r26
    349c:	a0 2d       	mov	r26, r0
    349e:	0b 01       	movw	r0, r22
    34a0:	b9 01       	movw	r22, r18
    34a2:	90 01       	movw	r18, r0
    34a4:	0c 01       	movw	r0, r24
    34a6:	ca 01       	movw	r24, r20
    34a8:	a0 01       	movw	r20, r0
    34aa:	11 24       	eor	r1, r1
    34ac:	ff 27       	eor	r31, r31
    34ae:	59 1b       	sub	r21, r25
    34b0:	99 f0       	breq	.+38     	; 0x34d8 <__addsf3x+0x60>
    34b2:	59 3f       	cpi	r21, 0xF9	; 249
    34b4:	50 f4       	brcc	.+20     	; 0x34ca <__addsf3x+0x52>
    34b6:	50 3e       	cpi	r21, 0xE0	; 224
    34b8:	68 f1       	brcs	.+90     	; 0x3514 <__addsf3x+0x9c>
    34ba:	1a 16       	cp	r1, r26
    34bc:	f0 40       	sbci	r31, 0x00	; 0
    34be:	a2 2f       	mov	r26, r18
    34c0:	23 2f       	mov	r18, r19
    34c2:	34 2f       	mov	r19, r20
    34c4:	44 27       	eor	r20, r20
    34c6:	58 5f       	subi	r21, 0xF8	; 248
    34c8:	f3 cf       	rjmp	.-26     	; 0x34b0 <__addsf3x+0x38>
    34ca:	46 95       	lsr	r20
    34cc:	37 95       	ror	r19
    34ce:	27 95       	ror	r18
    34d0:	a7 95       	ror	r26
    34d2:	f0 40       	sbci	r31, 0x00	; 0
    34d4:	53 95       	inc	r21
    34d6:	c9 f7       	brne	.-14     	; 0x34ca <__addsf3x+0x52>
    34d8:	7e f4       	brtc	.+30     	; 0x34f8 <__addsf3x+0x80>
    34da:	1f 16       	cp	r1, r31
    34dc:	ba 0b       	sbc	r27, r26
    34de:	62 0b       	sbc	r22, r18
    34e0:	73 0b       	sbc	r23, r19
    34e2:	84 0b       	sbc	r24, r20
    34e4:	ba f0       	brmi	.+46     	; 0x3514 <__addsf3x+0x9c>
    34e6:	91 50       	subi	r25, 0x01	; 1
    34e8:	a1 f0       	breq	.+40     	; 0x3512 <__addsf3x+0x9a>
    34ea:	ff 0f       	add	r31, r31
    34ec:	bb 1f       	adc	r27, r27
    34ee:	66 1f       	adc	r22, r22
    34f0:	77 1f       	adc	r23, r23
    34f2:	88 1f       	adc	r24, r24
    34f4:	c2 f7       	brpl	.-16     	; 0x34e6 <__addsf3x+0x6e>
    34f6:	0e c0       	rjmp	.+28     	; 0x3514 <__addsf3x+0x9c>
    34f8:	ba 0f       	add	r27, r26
    34fa:	62 1f       	adc	r22, r18
    34fc:	73 1f       	adc	r23, r19
    34fe:	84 1f       	adc	r24, r20
    3500:	48 f4       	brcc	.+18     	; 0x3514 <__addsf3x+0x9c>
    3502:	87 95       	ror	r24
    3504:	77 95       	ror	r23
    3506:	67 95       	ror	r22
    3508:	b7 95       	ror	r27
    350a:	f7 95       	ror	r31
    350c:	9e 3f       	cpi	r25, 0xFE	; 254
    350e:	08 f0       	brcs	.+2      	; 0x3512 <__addsf3x+0x9a>
    3510:	b0 cf       	rjmp	.-160    	; 0x3472 <__addsf3+0x28>
    3512:	93 95       	inc	r25
    3514:	88 0f       	add	r24, r24
    3516:	08 f0       	brcs	.+2      	; 0x351a <__addsf3x+0xa2>
    3518:	99 27       	eor	r25, r25
    351a:	ee 0f       	add	r30, r30
    351c:	97 95       	ror	r25
    351e:	87 95       	ror	r24
    3520:	08 95       	ret

00003522 <__cmpsf2>:
    3522:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <__fp_cmp>
    3526:	08 f4       	brcc	.+2      	; 0x352a <__cmpsf2+0x8>
    3528:	81 e0       	ldi	r24, 0x01	; 1
    352a:	08 95       	ret

0000352c <__divsf3>:
    352c:	0e 94 aa 1a 	call	0x3554	; 0x3554 <__divsf3x>
    3530:	0c 94 b6 1b 	jmp	0x376c	; 0x376c <__fp_round>
    3534:	0e 94 af 1b 	call	0x375e	; 0x375e <__fp_pscB>
    3538:	58 f0       	brcs	.+22     	; 0x3550 <__divsf3+0x24>
    353a:	0e 94 a8 1b 	call	0x3750	; 0x3750 <__fp_pscA>
    353e:	40 f0       	brcs	.+16     	; 0x3550 <__divsf3+0x24>
    3540:	29 f4       	brne	.+10     	; 0x354c <__divsf3+0x20>
    3542:	5f 3f       	cpi	r21, 0xFF	; 255
    3544:	29 f0       	breq	.+10     	; 0x3550 <__divsf3+0x24>
    3546:	0c 94 9f 1b 	jmp	0x373e	; 0x373e <__fp_inf>
    354a:	51 11       	cpse	r21, r1
    354c:	0c 94 ea 1b 	jmp	0x37d4	; 0x37d4 <__fp_szero>
    3550:	0c 94 a5 1b 	jmp	0x374a	; 0x374a <__fp_nan>

00003554 <__divsf3x>:
    3554:	0e 94 c7 1b 	call	0x378e	; 0x378e <__fp_split3>
    3558:	68 f3       	brcs	.-38     	; 0x3534 <__divsf3+0x8>

0000355a <__divsf3_pse>:
    355a:	99 23       	and	r25, r25
    355c:	b1 f3       	breq	.-20     	; 0x354a <__divsf3+0x1e>
    355e:	55 23       	and	r21, r21
    3560:	91 f3       	breq	.-28     	; 0x3546 <__divsf3+0x1a>
    3562:	95 1b       	sub	r25, r21
    3564:	55 0b       	sbc	r21, r21
    3566:	bb 27       	eor	r27, r27
    3568:	aa 27       	eor	r26, r26
    356a:	62 17       	cp	r22, r18
    356c:	73 07       	cpc	r23, r19
    356e:	84 07       	cpc	r24, r20
    3570:	38 f0       	brcs	.+14     	; 0x3580 <__divsf3_pse+0x26>
    3572:	9f 5f       	subi	r25, 0xFF	; 255
    3574:	5f 4f       	sbci	r21, 0xFF	; 255
    3576:	22 0f       	add	r18, r18
    3578:	33 1f       	adc	r19, r19
    357a:	44 1f       	adc	r20, r20
    357c:	aa 1f       	adc	r26, r26
    357e:	a9 f3       	breq	.-22     	; 0x356a <__divsf3_pse+0x10>
    3580:	35 d0       	rcall	.+106    	; 0x35ec <__divsf3_pse+0x92>
    3582:	0e 2e       	mov	r0, r30
    3584:	3a f0       	brmi	.+14     	; 0x3594 <__divsf3_pse+0x3a>
    3586:	e0 e8       	ldi	r30, 0x80	; 128
    3588:	32 d0       	rcall	.+100    	; 0x35ee <__divsf3_pse+0x94>
    358a:	91 50       	subi	r25, 0x01	; 1
    358c:	50 40       	sbci	r21, 0x00	; 0
    358e:	e6 95       	lsr	r30
    3590:	00 1c       	adc	r0, r0
    3592:	ca f7       	brpl	.-14     	; 0x3586 <__divsf3_pse+0x2c>
    3594:	2b d0       	rcall	.+86     	; 0x35ec <__divsf3_pse+0x92>
    3596:	fe 2f       	mov	r31, r30
    3598:	29 d0       	rcall	.+82     	; 0x35ec <__divsf3_pse+0x92>
    359a:	66 0f       	add	r22, r22
    359c:	77 1f       	adc	r23, r23
    359e:	88 1f       	adc	r24, r24
    35a0:	bb 1f       	adc	r27, r27
    35a2:	26 17       	cp	r18, r22
    35a4:	37 07       	cpc	r19, r23
    35a6:	48 07       	cpc	r20, r24
    35a8:	ab 07       	cpc	r26, r27
    35aa:	b0 e8       	ldi	r27, 0x80	; 128
    35ac:	09 f0       	breq	.+2      	; 0x35b0 <__divsf3_pse+0x56>
    35ae:	bb 0b       	sbc	r27, r27
    35b0:	80 2d       	mov	r24, r0
    35b2:	bf 01       	movw	r22, r30
    35b4:	ff 27       	eor	r31, r31
    35b6:	93 58       	subi	r25, 0x83	; 131
    35b8:	5f 4f       	sbci	r21, 0xFF	; 255
    35ba:	3a f0       	brmi	.+14     	; 0x35ca <__divsf3_pse+0x70>
    35bc:	9e 3f       	cpi	r25, 0xFE	; 254
    35be:	51 05       	cpc	r21, r1
    35c0:	78 f0       	brcs	.+30     	; 0x35e0 <__divsf3_pse+0x86>
    35c2:	0c 94 9f 1b 	jmp	0x373e	; 0x373e <__fp_inf>
    35c6:	0c 94 ea 1b 	jmp	0x37d4	; 0x37d4 <__fp_szero>
    35ca:	5f 3f       	cpi	r21, 0xFF	; 255
    35cc:	e4 f3       	brlt	.-8      	; 0x35c6 <__divsf3_pse+0x6c>
    35ce:	98 3e       	cpi	r25, 0xE8	; 232
    35d0:	d4 f3       	brlt	.-12     	; 0x35c6 <__divsf3_pse+0x6c>
    35d2:	86 95       	lsr	r24
    35d4:	77 95       	ror	r23
    35d6:	67 95       	ror	r22
    35d8:	b7 95       	ror	r27
    35da:	f7 95       	ror	r31
    35dc:	9f 5f       	subi	r25, 0xFF	; 255
    35de:	c9 f7       	brne	.-14     	; 0x35d2 <__divsf3_pse+0x78>
    35e0:	88 0f       	add	r24, r24
    35e2:	91 1d       	adc	r25, r1
    35e4:	96 95       	lsr	r25
    35e6:	87 95       	ror	r24
    35e8:	97 f9       	bld	r25, 7
    35ea:	08 95       	ret
    35ec:	e1 e0       	ldi	r30, 0x01	; 1
    35ee:	66 0f       	add	r22, r22
    35f0:	77 1f       	adc	r23, r23
    35f2:	88 1f       	adc	r24, r24
    35f4:	bb 1f       	adc	r27, r27
    35f6:	62 17       	cp	r22, r18
    35f8:	73 07       	cpc	r23, r19
    35fa:	84 07       	cpc	r24, r20
    35fc:	ba 07       	cpc	r27, r26
    35fe:	20 f0       	brcs	.+8      	; 0x3608 <__divsf3_pse+0xae>
    3600:	62 1b       	sub	r22, r18
    3602:	73 0b       	sbc	r23, r19
    3604:	84 0b       	sbc	r24, r20
    3606:	ba 0b       	sbc	r27, r26
    3608:	ee 1f       	adc	r30, r30
    360a:	88 f7       	brcc	.-30     	; 0x35ee <__divsf3_pse+0x94>
    360c:	e0 95       	com	r30
    360e:	08 95       	ret

00003610 <__fixsfsi>:
    3610:	0e 94 0f 1b 	call	0x361e	; 0x361e <__fixunssfsi>
    3614:	68 94       	set
    3616:	b1 11       	cpse	r27, r1
    3618:	0c 94 ea 1b 	jmp	0x37d4	; 0x37d4 <__fp_szero>
    361c:	08 95       	ret

0000361e <__fixunssfsi>:
    361e:	0e 94 cf 1b 	call	0x379e	; 0x379e <__fp_splitA>
    3622:	88 f0       	brcs	.+34     	; 0x3646 <__fixunssfsi+0x28>
    3624:	9f 57       	subi	r25, 0x7F	; 127
    3626:	98 f0       	brcs	.+38     	; 0x364e <__fixunssfsi+0x30>
    3628:	b9 2f       	mov	r27, r25
    362a:	99 27       	eor	r25, r25
    362c:	b7 51       	subi	r27, 0x17	; 23
    362e:	b0 f0       	brcs	.+44     	; 0x365c <__fixunssfsi+0x3e>
    3630:	e1 f0       	breq	.+56     	; 0x366a <__fixunssfsi+0x4c>
    3632:	66 0f       	add	r22, r22
    3634:	77 1f       	adc	r23, r23
    3636:	88 1f       	adc	r24, r24
    3638:	99 1f       	adc	r25, r25
    363a:	1a f0       	brmi	.+6      	; 0x3642 <__fixunssfsi+0x24>
    363c:	ba 95       	dec	r27
    363e:	c9 f7       	brne	.-14     	; 0x3632 <__fixunssfsi+0x14>
    3640:	14 c0       	rjmp	.+40     	; 0x366a <__fixunssfsi+0x4c>
    3642:	b1 30       	cpi	r27, 0x01	; 1
    3644:	91 f0       	breq	.+36     	; 0x366a <__fixunssfsi+0x4c>
    3646:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <__fp_zero>
    364a:	b1 e0       	ldi	r27, 0x01	; 1
    364c:	08 95       	ret
    364e:	0c 94 e9 1b 	jmp	0x37d2	; 0x37d2 <__fp_zero>
    3652:	67 2f       	mov	r22, r23
    3654:	78 2f       	mov	r23, r24
    3656:	88 27       	eor	r24, r24
    3658:	b8 5f       	subi	r27, 0xF8	; 248
    365a:	39 f0       	breq	.+14     	; 0x366a <__fixunssfsi+0x4c>
    365c:	b9 3f       	cpi	r27, 0xF9	; 249
    365e:	cc f3       	brlt	.-14     	; 0x3652 <__fixunssfsi+0x34>
    3660:	86 95       	lsr	r24
    3662:	77 95       	ror	r23
    3664:	67 95       	ror	r22
    3666:	b3 95       	inc	r27
    3668:	d9 f7       	brne	.-10     	; 0x3660 <__fixunssfsi+0x42>
    366a:	3e f4       	brtc	.+14     	; 0x367a <__fixunssfsi+0x5c>
    366c:	90 95       	com	r25
    366e:	80 95       	com	r24
    3670:	70 95       	com	r23
    3672:	61 95       	neg	r22
    3674:	7f 4f       	sbci	r23, 0xFF	; 255
    3676:	8f 4f       	sbci	r24, 0xFF	; 255
    3678:	9f 4f       	sbci	r25, 0xFF	; 255
    367a:	08 95       	ret

0000367c <__floatunsisf>:
    367c:	e8 94       	clt
    367e:	09 c0       	rjmp	.+18     	; 0x3692 <__floatsisf+0x12>

00003680 <__floatsisf>:
    3680:	97 fb       	bst	r25, 7
    3682:	3e f4       	brtc	.+14     	; 0x3692 <__floatsisf+0x12>
    3684:	90 95       	com	r25
    3686:	80 95       	com	r24
    3688:	70 95       	com	r23
    368a:	61 95       	neg	r22
    368c:	7f 4f       	sbci	r23, 0xFF	; 255
    368e:	8f 4f       	sbci	r24, 0xFF	; 255
    3690:	9f 4f       	sbci	r25, 0xFF	; 255
    3692:	99 23       	and	r25, r25
    3694:	a9 f0       	breq	.+42     	; 0x36c0 <__floatsisf+0x40>
    3696:	f9 2f       	mov	r31, r25
    3698:	96 e9       	ldi	r25, 0x96	; 150
    369a:	bb 27       	eor	r27, r27
    369c:	93 95       	inc	r25
    369e:	f6 95       	lsr	r31
    36a0:	87 95       	ror	r24
    36a2:	77 95       	ror	r23
    36a4:	67 95       	ror	r22
    36a6:	b7 95       	ror	r27
    36a8:	f1 11       	cpse	r31, r1
    36aa:	f8 cf       	rjmp	.-16     	; 0x369c <__floatsisf+0x1c>
    36ac:	fa f4       	brpl	.+62     	; 0x36ec <__floatsisf+0x6c>
    36ae:	bb 0f       	add	r27, r27
    36b0:	11 f4       	brne	.+4      	; 0x36b6 <__floatsisf+0x36>
    36b2:	60 ff       	sbrs	r22, 0
    36b4:	1b c0       	rjmp	.+54     	; 0x36ec <__floatsisf+0x6c>
    36b6:	6f 5f       	subi	r22, 0xFF	; 255
    36b8:	7f 4f       	sbci	r23, 0xFF	; 255
    36ba:	8f 4f       	sbci	r24, 0xFF	; 255
    36bc:	9f 4f       	sbci	r25, 0xFF	; 255
    36be:	16 c0       	rjmp	.+44     	; 0x36ec <__floatsisf+0x6c>
    36c0:	88 23       	and	r24, r24
    36c2:	11 f0       	breq	.+4      	; 0x36c8 <__floatsisf+0x48>
    36c4:	96 e9       	ldi	r25, 0x96	; 150
    36c6:	11 c0       	rjmp	.+34     	; 0x36ea <__floatsisf+0x6a>
    36c8:	77 23       	and	r23, r23
    36ca:	21 f0       	breq	.+8      	; 0x36d4 <__floatsisf+0x54>
    36cc:	9e e8       	ldi	r25, 0x8E	; 142
    36ce:	87 2f       	mov	r24, r23
    36d0:	76 2f       	mov	r23, r22
    36d2:	05 c0       	rjmp	.+10     	; 0x36de <__floatsisf+0x5e>
    36d4:	66 23       	and	r22, r22
    36d6:	71 f0       	breq	.+28     	; 0x36f4 <__floatsisf+0x74>
    36d8:	96 e8       	ldi	r25, 0x86	; 134
    36da:	86 2f       	mov	r24, r22
    36dc:	70 e0       	ldi	r23, 0x00	; 0
    36de:	60 e0       	ldi	r22, 0x00	; 0
    36e0:	2a f0       	brmi	.+10     	; 0x36ec <__floatsisf+0x6c>
    36e2:	9a 95       	dec	r25
    36e4:	66 0f       	add	r22, r22
    36e6:	77 1f       	adc	r23, r23
    36e8:	88 1f       	adc	r24, r24
    36ea:	da f7       	brpl	.-10     	; 0x36e2 <__floatsisf+0x62>
    36ec:	88 0f       	add	r24, r24
    36ee:	96 95       	lsr	r25
    36f0:	87 95       	ror	r24
    36f2:	97 f9       	bld	r25, 7
    36f4:	08 95       	ret

000036f6 <__fp_cmp>:
    36f6:	99 0f       	add	r25, r25
    36f8:	00 08       	sbc	r0, r0
    36fa:	55 0f       	add	r21, r21
    36fc:	aa 0b       	sbc	r26, r26
    36fe:	e0 e8       	ldi	r30, 0x80	; 128
    3700:	fe ef       	ldi	r31, 0xFE	; 254
    3702:	16 16       	cp	r1, r22
    3704:	17 06       	cpc	r1, r23
    3706:	e8 07       	cpc	r30, r24
    3708:	f9 07       	cpc	r31, r25
    370a:	c0 f0       	brcs	.+48     	; 0x373c <__fp_cmp+0x46>
    370c:	12 16       	cp	r1, r18
    370e:	13 06       	cpc	r1, r19
    3710:	e4 07       	cpc	r30, r20
    3712:	f5 07       	cpc	r31, r21
    3714:	98 f0       	brcs	.+38     	; 0x373c <__fp_cmp+0x46>
    3716:	62 1b       	sub	r22, r18
    3718:	73 0b       	sbc	r23, r19
    371a:	84 0b       	sbc	r24, r20
    371c:	95 0b       	sbc	r25, r21
    371e:	39 f4       	brne	.+14     	; 0x372e <__fp_cmp+0x38>
    3720:	0a 26       	eor	r0, r26
    3722:	61 f0       	breq	.+24     	; 0x373c <__fp_cmp+0x46>
    3724:	23 2b       	or	r18, r19
    3726:	24 2b       	or	r18, r20
    3728:	25 2b       	or	r18, r21
    372a:	21 f4       	brne	.+8      	; 0x3734 <__fp_cmp+0x3e>
    372c:	08 95       	ret
    372e:	0a 26       	eor	r0, r26
    3730:	09 f4       	brne	.+2      	; 0x3734 <__fp_cmp+0x3e>
    3732:	a1 40       	sbci	r26, 0x01	; 1
    3734:	a6 95       	lsr	r26
    3736:	8f ef       	ldi	r24, 0xFF	; 255
    3738:	81 1d       	adc	r24, r1
    373a:	81 1d       	adc	r24, r1
    373c:	08 95       	ret

0000373e <__fp_inf>:
    373e:	97 f9       	bld	r25, 7
    3740:	9f 67       	ori	r25, 0x7F	; 127
    3742:	80 e8       	ldi	r24, 0x80	; 128
    3744:	70 e0       	ldi	r23, 0x00	; 0
    3746:	60 e0       	ldi	r22, 0x00	; 0
    3748:	08 95       	ret

0000374a <__fp_nan>:
    374a:	9f ef       	ldi	r25, 0xFF	; 255
    374c:	80 ec       	ldi	r24, 0xC0	; 192
    374e:	08 95       	ret

00003750 <__fp_pscA>:
    3750:	00 24       	eor	r0, r0
    3752:	0a 94       	dec	r0
    3754:	16 16       	cp	r1, r22
    3756:	17 06       	cpc	r1, r23
    3758:	18 06       	cpc	r1, r24
    375a:	09 06       	cpc	r0, r25
    375c:	08 95       	ret

0000375e <__fp_pscB>:
    375e:	00 24       	eor	r0, r0
    3760:	0a 94       	dec	r0
    3762:	12 16       	cp	r1, r18
    3764:	13 06       	cpc	r1, r19
    3766:	14 06       	cpc	r1, r20
    3768:	05 06       	cpc	r0, r21
    376a:	08 95       	ret

0000376c <__fp_round>:
    376c:	09 2e       	mov	r0, r25
    376e:	03 94       	inc	r0
    3770:	00 0c       	add	r0, r0
    3772:	11 f4       	brne	.+4      	; 0x3778 <__fp_round+0xc>
    3774:	88 23       	and	r24, r24
    3776:	52 f0       	brmi	.+20     	; 0x378c <__fp_round+0x20>
    3778:	bb 0f       	add	r27, r27
    377a:	40 f4       	brcc	.+16     	; 0x378c <__fp_round+0x20>
    377c:	bf 2b       	or	r27, r31
    377e:	11 f4       	brne	.+4      	; 0x3784 <__fp_round+0x18>
    3780:	60 ff       	sbrs	r22, 0
    3782:	04 c0       	rjmp	.+8      	; 0x378c <__fp_round+0x20>
    3784:	6f 5f       	subi	r22, 0xFF	; 255
    3786:	7f 4f       	sbci	r23, 0xFF	; 255
    3788:	8f 4f       	sbci	r24, 0xFF	; 255
    378a:	9f 4f       	sbci	r25, 0xFF	; 255
    378c:	08 95       	ret

0000378e <__fp_split3>:
    378e:	57 fd       	sbrc	r21, 7
    3790:	90 58       	subi	r25, 0x80	; 128
    3792:	44 0f       	add	r20, r20
    3794:	55 1f       	adc	r21, r21
    3796:	59 f0       	breq	.+22     	; 0x37ae <__fp_splitA+0x10>
    3798:	5f 3f       	cpi	r21, 0xFF	; 255
    379a:	71 f0       	breq	.+28     	; 0x37b8 <__fp_splitA+0x1a>
    379c:	47 95       	ror	r20

0000379e <__fp_splitA>:
    379e:	88 0f       	add	r24, r24
    37a0:	97 fb       	bst	r25, 7
    37a2:	99 1f       	adc	r25, r25
    37a4:	61 f0       	breq	.+24     	; 0x37be <__fp_splitA+0x20>
    37a6:	9f 3f       	cpi	r25, 0xFF	; 255
    37a8:	79 f0       	breq	.+30     	; 0x37c8 <__fp_splitA+0x2a>
    37aa:	87 95       	ror	r24
    37ac:	08 95       	ret
    37ae:	12 16       	cp	r1, r18
    37b0:	13 06       	cpc	r1, r19
    37b2:	14 06       	cpc	r1, r20
    37b4:	55 1f       	adc	r21, r21
    37b6:	f2 cf       	rjmp	.-28     	; 0x379c <__fp_split3+0xe>
    37b8:	46 95       	lsr	r20
    37ba:	f1 df       	rcall	.-30     	; 0x379e <__fp_splitA>
    37bc:	08 c0       	rjmp	.+16     	; 0x37ce <__fp_splitA+0x30>
    37be:	16 16       	cp	r1, r22
    37c0:	17 06       	cpc	r1, r23
    37c2:	18 06       	cpc	r1, r24
    37c4:	99 1f       	adc	r25, r25
    37c6:	f1 cf       	rjmp	.-30     	; 0x37aa <__fp_splitA+0xc>
    37c8:	86 95       	lsr	r24
    37ca:	71 05       	cpc	r23, r1
    37cc:	61 05       	cpc	r22, r1
    37ce:	08 94       	sec
    37d0:	08 95       	ret

000037d2 <__fp_zero>:
    37d2:	e8 94       	clt

000037d4 <__fp_szero>:
    37d4:	bb 27       	eor	r27, r27
    37d6:	66 27       	eor	r22, r22
    37d8:	77 27       	eor	r23, r23
    37da:	cb 01       	movw	r24, r22
    37dc:	97 f9       	bld	r25, 7
    37de:	08 95       	ret

000037e0 <__gesf2>:
    37e0:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <__fp_cmp>
    37e4:	08 f4       	brcc	.+2      	; 0x37e8 <__gesf2+0x8>
    37e6:	8f ef       	ldi	r24, 0xFF	; 255
    37e8:	08 95       	ret

000037ea <__mulsf3>:
    37ea:	0e 94 08 1c 	call	0x3810	; 0x3810 <__mulsf3x>
    37ee:	0c 94 b6 1b 	jmp	0x376c	; 0x376c <__fp_round>
    37f2:	0e 94 a8 1b 	call	0x3750	; 0x3750 <__fp_pscA>
    37f6:	38 f0       	brcs	.+14     	; 0x3806 <__mulsf3+0x1c>
    37f8:	0e 94 af 1b 	call	0x375e	; 0x375e <__fp_pscB>
    37fc:	20 f0       	brcs	.+8      	; 0x3806 <__mulsf3+0x1c>
    37fe:	95 23       	and	r25, r21
    3800:	11 f0       	breq	.+4      	; 0x3806 <__mulsf3+0x1c>
    3802:	0c 94 9f 1b 	jmp	0x373e	; 0x373e <__fp_inf>
    3806:	0c 94 a5 1b 	jmp	0x374a	; 0x374a <__fp_nan>
    380a:	11 24       	eor	r1, r1
    380c:	0c 94 ea 1b 	jmp	0x37d4	; 0x37d4 <__fp_szero>

00003810 <__mulsf3x>:
    3810:	0e 94 c7 1b 	call	0x378e	; 0x378e <__fp_split3>
    3814:	70 f3       	brcs	.-36     	; 0x37f2 <__mulsf3+0x8>

00003816 <__mulsf3_pse>:
    3816:	95 9f       	mul	r25, r21
    3818:	c1 f3       	breq	.-16     	; 0x380a <__mulsf3+0x20>
    381a:	95 0f       	add	r25, r21
    381c:	50 e0       	ldi	r21, 0x00	; 0
    381e:	55 1f       	adc	r21, r21
    3820:	62 9f       	mul	r22, r18
    3822:	f0 01       	movw	r30, r0
    3824:	72 9f       	mul	r23, r18
    3826:	bb 27       	eor	r27, r27
    3828:	f0 0d       	add	r31, r0
    382a:	b1 1d       	adc	r27, r1
    382c:	63 9f       	mul	r22, r19
    382e:	aa 27       	eor	r26, r26
    3830:	f0 0d       	add	r31, r0
    3832:	b1 1d       	adc	r27, r1
    3834:	aa 1f       	adc	r26, r26
    3836:	64 9f       	mul	r22, r20
    3838:	66 27       	eor	r22, r22
    383a:	b0 0d       	add	r27, r0
    383c:	a1 1d       	adc	r26, r1
    383e:	66 1f       	adc	r22, r22
    3840:	82 9f       	mul	r24, r18
    3842:	22 27       	eor	r18, r18
    3844:	b0 0d       	add	r27, r0
    3846:	a1 1d       	adc	r26, r1
    3848:	62 1f       	adc	r22, r18
    384a:	73 9f       	mul	r23, r19
    384c:	b0 0d       	add	r27, r0
    384e:	a1 1d       	adc	r26, r1
    3850:	62 1f       	adc	r22, r18
    3852:	83 9f       	mul	r24, r19
    3854:	a0 0d       	add	r26, r0
    3856:	61 1d       	adc	r22, r1
    3858:	22 1f       	adc	r18, r18
    385a:	74 9f       	mul	r23, r20
    385c:	33 27       	eor	r19, r19
    385e:	a0 0d       	add	r26, r0
    3860:	61 1d       	adc	r22, r1
    3862:	23 1f       	adc	r18, r19
    3864:	84 9f       	mul	r24, r20
    3866:	60 0d       	add	r22, r0
    3868:	21 1d       	adc	r18, r1
    386a:	82 2f       	mov	r24, r18
    386c:	76 2f       	mov	r23, r22
    386e:	6a 2f       	mov	r22, r26
    3870:	11 24       	eor	r1, r1
    3872:	9f 57       	subi	r25, 0x7F	; 127
    3874:	50 40       	sbci	r21, 0x00	; 0
    3876:	9a f0       	brmi	.+38     	; 0x389e <__mulsf3_pse+0x88>
    3878:	f1 f0       	breq	.+60     	; 0x38b6 <__mulsf3_pse+0xa0>
    387a:	88 23       	and	r24, r24
    387c:	4a f0       	brmi	.+18     	; 0x3890 <__mulsf3_pse+0x7a>
    387e:	ee 0f       	add	r30, r30
    3880:	ff 1f       	adc	r31, r31
    3882:	bb 1f       	adc	r27, r27
    3884:	66 1f       	adc	r22, r22
    3886:	77 1f       	adc	r23, r23
    3888:	88 1f       	adc	r24, r24
    388a:	91 50       	subi	r25, 0x01	; 1
    388c:	50 40       	sbci	r21, 0x00	; 0
    388e:	a9 f7       	brne	.-22     	; 0x387a <__mulsf3_pse+0x64>
    3890:	9e 3f       	cpi	r25, 0xFE	; 254
    3892:	51 05       	cpc	r21, r1
    3894:	80 f0       	brcs	.+32     	; 0x38b6 <__mulsf3_pse+0xa0>
    3896:	0c 94 9f 1b 	jmp	0x373e	; 0x373e <__fp_inf>
    389a:	0c 94 ea 1b 	jmp	0x37d4	; 0x37d4 <__fp_szero>
    389e:	5f 3f       	cpi	r21, 0xFF	; 255
    38a0:	e4 f3       	brlt	.-8      	; 0x389a <__mulsf3_pse+0x84>
    38a2:	98 3e       	cpi	r25, 0xE8	; 232
    38a4:	d4 f3       	brlt	.-12     	; 0x389a <__mulsf3_pse+0x84>
    38a6:	86 95       	lsr	r24
    38a8:	77 95       	ror	r23
    38aa:	67 95       	ror	r22
    38ac:	b7 95       	ror	r27
    38ae:	f7 95       	ror	r31
    38b0:	e7 95       	ror	r30
    38b2:	9f 5f       	subi	r25, 0xFF	; 255
    38b4:	c1 f7       	brne	.-16     	; 0x38a6 <__mulsf3_pse+0x90>
    38b6:	fe 2b       	or	r31, r30
    38b8:	88 0f       	add	r24, r24
    38ba:	91 1d       	adc	r25, r1
    38bc:	96 95       	lsr	r25
    38be:	87 95       	ror	r24
    38c0:	97 f9       	bld	r25, 7
    38c2:	08 95       	ret
    38c4:	19 f4       	brne	.+6      	; 0x38cc <__mulsf3_pse+0xb6>
    38c6:	16 f4       	brtc	.+4      	; 0x38cc <__mulsf3_pse+0xb6>
    38c8:	0c 94 a5 1b 	jmp	0x374a	; 0x374a <__fp_nan>
    38cc:	0c 94 a8 1c 	jmp	0x3950	; 0x3950 <__fp_mpack>

000038d0 <sqrt>:
    38d0:	0e 94 cf 1b 	call	0x379e	; 0x379e <__fp_splitA>
    38d4:	b8 f3       	brcs	.-18     	; 0x38c4 <__mulsf3_pse+0xae>
    38d6:	99 23       	and	r25, r25
    38d8:	c9 f3       	breq	.-14     	; 0x38cc <__mulsf3_pse+0xb6>
    38da:	b6 f3       	brts	.-20     	; 0x38c8 <__mulsf3_pse+0xb2>
    38dc:	9f 57       	subi	r25, 0x7F	; 127
    38de:	55 0b       	sbc	r21, r21
    38e0:	87 ff       	sbrs	r24, 7
    38e2:	0e 94 b6 1c 	call	0x396c	; 0x396c <__fp_norm2>
    38e6:	00 24       	eor	r0, r0
    38e8:	a0 e6       	ldi	r26, 0x60	; 96
    38ea:	40 ea       	ldi	r20, 0xA0	; 160
    38ec:	90 01       	movw	r18, r0
    38ee:	80 58       	subi	r24, 0x80	; 128
    38f0:	56 95       	lsr	r21
    38f2:	97 95       	ror	r25
    38f4:	28 f4       	brcc	.+10     	; 0x3900 <sqrt+0x30>
    38f6:	80 5c       	subi	r24, 0xC0	; 192
    38f8:	66 0f       	add	r22, r22
    38fa:	77 1f       	adc	r23, r23
    38fc:	88 1f       	adc	r24, r24
    38fe:	20 f0       	brcs	.+8      	; 0x3908 <sqrt+0x38>
    3900:	26 17       	cp	r18, r22
    3902:	37 07       	cpc	r19, r23
    3904:	48 07       	cpc	r20, r24
    3906:	30 f4       	brcc	.+12     	; 0x3914 <sqrt+0x44>
    3908:	62 1b       	sub	r22, r18
    390a:	73 0b       	sbc	r23, r19
    390c:	84 0b       	sbc	r24, r20
    390e:	20 29       	or	r18, r0
    3910:	31 29       	or	r19, r1
    3912:	4a 2b       	or	r20, r26
    3914:	a6 95       	lsr	r26
    3916:	17 94       	ror	r1
    3918:	07 94       	ror	r0
    391a:	20 25       	eor	r18, r0
    391c:	31 25       	eor	r19, r1
    391e:	4a 27       	eor	r20, r26
    3920:	58 f7       	brcc	.-42     	; 0x38f8 <sqrt+0x28>
    3922:	66 0f       	add	r22, r22
    3924:	77 1f       	adc	r23, r23
    3926:	88 1f       	adc	r24, r24
    3928:	20 f0       	brcs	.+8      	; 0x3932 <sqrt+0x62>
    392a:	26 17       	cp	r18, r22
    392c:	37 07       	cpc	r19, r23
    392e:	48 07       	cpc	r20, r24
    3930:	30 f4       	brcc	.+12     	; 0x393e <sqrt+0x6e>
    3932:	62 0b       	sbc	r22, r18
    3934:	73 0b       	sbc	r23, r19
    3936:	84 0b       	sbc	r24, r20
    3938:	20 0d       	add	r18, r0
    393a:	31 1d       	adc	r19, r1
    393c:	41 1d       	adc	r20, r1
    393e:	a0 95       	com	r26
    3940:	81 f7       	brne	.-32     	; 0x3922 <sqrt+0x52>
    3942:	b9 01       	movw	r22, r18
    3944:	84 2f       	mov	r24, r20
    3946:	91 58       	subi	r25, 0x81	; 129
    3948:	88 0f       	add	r24, r24
    394a:	96 95       	lsr	r25
    394c:	87 95       	ror	r24
    394e:	08 95       	ret

00003950 <__fp_mpack>:
    3950:	9f 3f       	cpi	r25, 0xFF	; 255
    3952:	31 f0       	breq	.+12     	; 0x3960 <__fp_mpack_finite+0xc>

00003954 <__fp_mpack_finite>:
    3954:	91 50       	subi	r25, 0x01	; 1
    3956:	20 f4       	brcc	.+8      	; 0x3960 <__fp_mpack_finite+0xc>
    3958:	87 95       	ror	r24
    395a:	77 95       	ror	r23
    395c:	67 95       	ror	r22
    395e:	b7 95       	ror	r27
    3960:	88 0f       	add	r24, r24
    3962:	91 1d       	adc	r25, r1
    3964:	96 95       	lsr	r25
    3966:	87 95       	ror	r24
    3968:	97 f9       	bld	r25, 7
    396a:	08 95       	ret

0000396c <__fp_norm2>:
    396c:	91 50       	subi	r25, 0x01	; 1
    396e:	50 40       	sbci	r21, 0x00	; 0
    3970:	66 0f       	add	r22, r22
    3972:	77 1f       	adc	r23, r23
    3974:	88 1f       	adc	r24, r24
    3976:	d2 f7       	brpl	.-12     	; 0x396c <__fp_norm2>
    3978:	08 95       	ret

0000397a <__tablejump2__>:
    397a:	ee 0f       	add	r30, r30
    397c:	ff 1f       	adc	r31, r31
    397e:	88 1f       	adc	r24, r24
    3980:	8b bf       	out	0x3b, r24	; 59
    3982:	07 90       	elpm	r0, Z+
    3984:	f6 91       	elpm	r31, Z
    3986:	e0 2d       	mov	r30, r0
    3988:	19 94       	eijmp

0000398a <memcpy>:
    398a:	fb 01       	movw	r30, r22
    398c:	dc 01       	movw	r26, r24
    398e:	02 c0       	rjmp	.+4      	; 0x3994 <memcpy+0xa>
    3990:	01 90       	ld	r0, Z+
    3992:	0d 92       	st	X+, r0
    3994:	41 50       	subi	r20, 0x01	; 1
    3996:	50 40       	sbci	r21, 0x00	; 0
    3998:	d8 f7       	brcc	.-10     	; 0x3990 <memcpy+0x6>
    399a:	08 95       	ret

0000399c <memset>:
    399c:	dc 01       	movw	r26, r24
    399e:	01 c0       	rjmp	.+2      	; 0x39a2 <memset+0x6>
    39a0:	6d 93       	st	X+, r22
    39a2:	41 50       	subi	r20, 0x01	; 1
    39a4:	50 40       	sbci	r21, 0x00	; 0
    39a6:	e0 f7       	brcc	.-8      	; 0x39a0 <memset+0x4>
    39a8:	08 95       	ret

000039aa <__itoa_ncheck>:
    39aa:	bb 27       	eor	r27, r27
    39ac:	4a 30       	cpi	r20, 0x0A	; 10
    39ae:	31 f4       	brne	.+12     	; 0x39bc <__itoa_ncheck+0x12>
    39b0:	99 23       	and	r25, r25
    39b2:	22 f4       	brpl	.+8      	; 0x39bc <__itoa_ncheck+0x12>
    39b4:	bd e2       	ldi	r27, 0x2D	; 45
    39b6:	90 95       	com	r25
    39b8:	81 95       	neg	r24
    39ba:	9f 4f       	sbci	r25, 0xFF	; 255
    39bc:	0c 94 e1 1c 	jmp	0x39c2	; 0x39c2 <__utoa_common>

000039c0 <__utoa_ncheck>:
    39c0:	bb 27       	eor	r27, r27

000039c2 <__utoa_common>:
    39c2:	fb 01       	movw	r30, r22
    39c4:	55 27       	eor	r21, r21
    39c6:	aa 27       	eor	r26, r26
    39c8:	88 0f       	add	r24, r24
    39ca:	99 1f       	adc	r25, r25
    39cc:	aa 1f       	adc	r26, r26
    39ce:	a4 17       	cp	r26, r20
    39d0:	10 f0       	brcs	.+4      	; 0x39d6 <__utoa_common+0x14>
    39d2:	a4 1b       	sub	r26, r20
    39d4:	83 95       	inc	r24
    39d6:	50 51       	subi	r21, 0x10	; 16
    39d8:	b9 f7       	brne	.-18     	; 0x39c8 <__utoa_common+0x6>
    39da:	a0 5d       	subi	r26, 0xD0	; 208
    39dc:	aa 33       	cpi	r26, 0x3A	; 58
    39de:	08 f0       	brcs	.+2      	; 0x39e2 <__utoa_common+0x20>
    39e0:	a9 5d       	subi	r26, 0xD9	; 217
    39e2:	a1 93       	st	Z+, r26
    39e4:	00 97       	sbiw	r24, 0x00	; 0
    39e6:	79 f7       	brne	.-34     	; 0x39c6 <__utoa_common+0x4>
    39e8:	b1 11       	cpse	r27, r1
    39ea:	b1 93       	st	Z+, r27
    39ec:	11 92       	st	Z+, r1
    39ee:	cb 01       	movw	r24, r22
    39f0:	0c 94 3d 1f 	jmp	0x3e7a	; 0x3e7a <strrev>

000039f4 <sprintf>:
    39f4:	0f 93       	push	r16
    39f6:	1f 93       	push	r17
    39f8:	cf 93       	push	r28
    39fa:	df 93       	push	r29
    39fc:	cd b7       	in	r28, 0x3d	; 61
    39fe:	de b7       	in	r29, 0x3e	; 62
    3a00:	2e 97       	sbiw	r28, 0x0e	; 14
    3a02:	cd bf       	out	0x3d, r28	; 61
    3a04:	de bf       	out	0x3e, r29	; 62
    3a06:	0e 89       	ldd	r16, Y+22	; 0x16
    3a08:	1f 89       	ldd	r17, Y+23	; 0x17
    3a0a:	86 e0       	ldi	r24, 0x06	; 6
    3a0c:	8c 83       	std	Y+4, r24	; 0x04
    3a0e:	09 83       	std	Y+1, r16	; 0x01
    3a10:	1a 83       	std	Y+2, r17	; 0x02
    3a12:	8f ef       	ldi	r24, 0xFF	; 255
    3a14:	9f e7       	ldi	r25, 0x7F	; 127
    3a16:	8d 83       	std	Y+5, r24	; 0x05
    3a18:	9e 83       	std	Y+6, r25	; 0x06
    3a1a:	ae 01       	movw	r20, r28
    3a1c:	46 5e       	subi	r20, 0xE6	; 230
    3a1e:	5f 4f       	sbci	r21, 0xFF	; 255
    3a20:	68 8d       	ldd	r22, Y+24	; 0x18
    3a22:	79 8d       	ldd	r23, Y+25	; 0x19
    3a24:	ce 01       	movw	r24, r28
    3a26:	01 96       	adiw	r24, 0x01	; 1
    3a28:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <vfprintf>
    3a2c:	ef 81       	ldd	r30, Y+7	; 0x07
    3a2e:	f8 85       	ldd	r31, Y+8	; 0x08
    3a30:	e0 0f       	add	r30, r16
    3a32:	f1 1f       	adc	r31, r17
    3a34:	10 82       	st	Z, r1
    3a36:	2e 96       	adiw	r28, 0x0e	; 14
    3a38:	cd bf       	out	0x3d, r28	; 61
    3a3a:	de bf       	out	0x3e, r29	; 62
    3a3c:	df 91       	pop	r29
    3a3e:	cf 91       	pop	r28
    3a40:	1f 91       	pop	r17
    3a42:	0f 91       	pop	r16
    3a44:	08 95       	ret

00003a46 <vfprintf>:
    3a46:	2f 92       	push	r2
    3a48:	3f 92       	push	r3
    3a4a:	4f 92       	push	r4
    3a4c:	5f 92       	push	r5
    3a4e:	6f 92       	push	r6
    3a50:	7f 92       	push	r7
    3a52:	8f 92       	push	r8
    3a54:	9f 92       	push	r9
    3a56:	af 92       	push	r10
    3a58:	bf 92       	push	r11
    3a5a:	cf 92       	push	r12
    3a5c:	df 92       	push	r13
    3a5e:	ef 92       	push	r14
    3a60:	ff 92       	push	r15
    3a62:	0f 93       	push	r16
    3a64:	1f 93       	push	r17
    3a66:	cf 93       	push	r28
    3a68:	df 93       	push	r29
    3a6a:	cd b7       	in	r28, 0x3d	; 61
    3a6c:	de b7       	in	r29, 0x3e	; 62
    3a6e:	2b 97       	sbiw	r28, 0x0b	; 11
    3a70:	cd bf       	out	0x3d, r28	; 61
    3a72:	de bf       	out	0x3e, r29	; 62
    3a74:	6c 01       	movw	r12, r24
    3a76:	7b 01       	movw	r14, r22
    3a78:	8a 01       	movw	r16, r20
    3a7a:	fc 01       	movw	r30, r24
    3a7c:	16 82       	std	Z+6, r1	; 0x06
    3a7e:	17 82       	std	Z+7, r1	; 0x07
    3a80:	83 81       	ldd	r24, Z+3	; 0x03
    3a82:	81 ff       	sbrs	r24, 1
    3a84:	cc c1       	rjmp	.+920    	; 0x3e1e <vfprintf+0x3d8>
    3a86:	ce 01       	movw	r24, r28
    3a88:	01 96       	adiw	r24, 0x01	; 1
    3a8a:	3c 01       	movw	r6, r24
    3a8c:	f6 01       	movw	r30, r12
    3a8e:	93 81       	ldd	r25, Z+3	; 0x03
    3a90:	f7 01       	movw	r30, r14
    3a92:	93 fd       	sbrc	r25, 3
    3a94:	85 91       	lpm	r24, Z+
    3a96:	93 ff       	sbrs	r25, 3
    3a98:	81 91       	ld	r24, Z+
    3a9a:	7f 01       	movw	r14, r30
    3a9c:	88 23       	and	r24, r24
    3a9e:	09 f4       	brne	.+2      	; 0x3aa2 <vfprintf+0x5c>
    3aa0:	ba c1       	rjmp	.+884    	; 0x3e16 <vfprintf+0x3d0>
    3aa2:	85 32       	cpi	r24, 0x25	; 37
    3aa4:	39 f4       	brne	.+14     	; 0x3ab4 <vfprintf+0x6e>
    3aa6:	93 fd       	sbrc	r25, 3
    3aa8:	85 91       	lpm	r24, Z+
    3aaa:	93 ff       	sbrs	r25, 3
    3aac:	81 91       	ld	r24, Z+
    3aae:	7f 01       	movw	r14, r30
    3ab0:	85 32       	cpi	r24, 0x25	; 37
    3ab2:	29 f4       	brne	.+10     	; 0x3abe <vfprintf+0x78>
    3ab4:	b6 01       	movw	r22, r12
    3ab6:	90 e0       	ldi	r25, 0x00	; 0
    3ab8:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <fputc>
    3abc:	e7 cf       	rjmp	.-50     	; 0x3a8c <vfprintf+0x46>
    3abe:	91 2c       	mov	r9, r1
    3ac0:	21 2c       	mov	r2, r1
    3ac2:	31 2c       	mov	r3, r1
    3ac4:	ff e1       	ldi	r31, 0x1F	; 31
    3ac6:	f3 15       	cp	r31, r3
    3ac8:	d8 f0       	brcs	.+54     	; 0x3b00 <vfprintf+0xba>
    3aca:	8b 32       	cpi	r24, 0x2B	; 43
    3acc:	79 f0       	breq	.+30     	; 0x3aec <vfprintf+0xa6>
    3ace:	38 f4       	brcc	.+14     	; 0x3ade <vfprintf+0x98>
    3ad0:	80 32       	cpi	r24, 0x20	; 32
    3ad2:	79 f0       	breq	.+30     	; 0x3af2 <vfprintf+0xac>
    3ad4:	83 32       	cpi	r24, 0x23	; 35
    3ad6:	a1 f4       	brne	.+40     	; 0x3b00 <vfprintf+0xba>
    3ad8:	23 2d       	mov	r18, r3
    3ada:	20 61       	ori	r18, 0x10	; 16
    3adc:	1d c0       	rjmp	.+58     	; 0x3b18 <vfprintf+0xd2>
    3ade:	8d 32       	cpi	r24, 0x2D	; 45
    3ae0:	61 f0       	breq	.+24     	; 0x3afa <vfprintf+0xb4>
    3ae2:	80 33       	cpi	r24, 0x30	; 48
    3ae4:	69 f4       	brne	.+26     	; 0x3b00 <vfprintf+0xba>
    3ae6:	23 2d       	mov	r18, r3
    3ae8:	21 60       	ori	r18, 0x01	; 1
    3aea:	16 c0       	rjmp	.+44     	; 0x3b18 <vfprintf+0xd2>
    3aec:	83 2d       	mov	r24, r3
    3aee:	82 60       	ori	r24, 0x02	; 2
    3af0:	38 2e       	mov	r3, r24
    3af2:	e3 2d       	mov	r30, r3
    3af4:	e4 60       	ori	r30, 0x04	; 4
    3af6:	3e 2e       	mov	r3, r30
    3af8:	2a c0       	rjmp	.+84     	; 0x3b4e <vfprintf+0x108>
    3afa:	f3 2d       	mov	r31, r3
    3afc:	f8 60       	ori	r31, 0x08	; 8
    3afe:	1d c0       	rjmp	.+58     	; 0x3b3a <vfprintf+0xf4>
    3b00:	37 fc       	sbrc	r3, 7
    3b02:	2d c0       	rjmp	.+90     	; 0x3b5e <vfprintf+0x118>
    3b04:	20 ed       	ldi	r18, 0xD0	; 208
    3b06:	28 0f       	add	r18, r24
    3b08:	2a 30       	cpi	r18, 0x0A	; 10
    3b0a:	40 f0       	brcs	.+16     	; 0x3b1c <vfprintf+0xd6>
    3b0c:	8e 32       	cpi	r24, 0x2E	; 46
    3b0e:	b9 f4       	brne	.+46     	; 0x3b3e <vfprintf+0xf8>
    3b10:	36 fc       	sbrc	r3, 6
    3b12:	81 c1       	rjmp	.+770    	; 0x3e16 <vfprintf+0x3d0>
    3b14:	23 2d       	mov	r18, r3
    3b16:	20 64       	ori	r18, 0x40	; 64
    3b18:	32 2e       	mov	r3, r18
    3b1a:	19 c0       	rjmp	.+50     	; 0x3b4e <vfprintf+0x108>
    3b1c:	36 fe       	sbrs	r3, 6
    3b1e:	06 c0       	rjmp	.+12     	; 0x3b2c <vfprintf+0xe6>
    3b20:	8a e0       	ldi	r24, 0x0A	; 10
    3b22:	98 9e       	mul	r9, r24
    3b24:	20 0d       	add	r18, r0
    3b26:	11 24       	eor	r1, r1
    3b28:	92 2e       	mov	r9, r18
    3b2a:	11 c0       	rjmp	.+34     	; 0x3b4e <vfprintf+0x108>
    3b2c:	ea e0       	ldi	r30, 0x0A	; 10
    3b2e:	2e 9e       	mul	r2, r30
    3b30:	20 0d       	add	r18, r0
    3b32:	11 24       	eor	r1, r1
    3b34:	22 2e       	mov	r2, r18
    3b36:	f3 2d       	mov	r31, r3
    3b38:	f0 62       	ori	r31, 0x20	; 32
    3b3a:	3f 2e       	mov	r3, r31
    3b3c:	08 c0       	rjmp	.+16     	; 0x3b4e <vfprintf+0x108>
    3b3e:	8c 36       	cpi	r24, 0x6C	; 108
    3b40:	21 f4       	brne	.+8      	; 0x3b4a <vfprintf+0x104>
    3b42:	83 2d       	mov	r24, r3
    3b44:	80 68       	ori	r24, 0x80	; 128
    3b46:	38 2e       	mov	r3, r24
    3b48:	02 c0       	rjmp	.+4      	; 0x3b4e <vfprintf+0x108>
    3b4a:	88 36       	cpi	r24, 0x68	; 104
    3b4c:	41 f4       	brne	.+16     	; 0x3b5e <vfprintf+0x118>
    3b4e:	f7 01       	movw	r30, r14
    3b50:	93 fd       	sbrc	r25, 3
    3b52:	85 91       	lpm	r24, Z+
    3b54:	93 ff       	sbrs	r25, 3
    3b56:	81 91       	ld	r24, Z+
    3b58:	7f 01       	movw	r14, r30
    3b5a:	81 11       	cpse	r24, r1
    3b5c:	b3 cf       	rjmp	.-154    	; 0x3ac4 <vfprintf+0x7e>
    3b5e:	98 2f       	mov	r25, r24
    3b60:	9f 7d       	andi	r25, 0xDF	; 223
    3b62:	95 54       	subi	r25, 0x45	; 69
    3b64:	93 30       	cpi	r25, 0x03	; 3
    3b66:	28 f4       	brcc	.+10     	; 0x3b72 <vfprintf+0x12c>
    3b68:	0c 5f       	subi	r16, 0xFC	; 252
    3b6a:	1f 4f       	sbci	r17, 0xFF	; 255
    3b6c:	9f e3       	ldi	r25, 0x3F	; 63
    3b6e:	99 83       	std	Y+1, r25	; 0x01
    3b70:	0d c0       	rjmp	.+26     	; 0x3b8c <vfprintf+0x146>
    3b72:	83 36       	cpi	r24, 0x63	; 99
    3b74:	31 f0       	breq	.+12     	; 0x3b82 <vfprintf+0x13c>
    3b76:	83 37       	cpi	r24, 0x73	; 115
    3b78:	71 f0       	breq	.+28     	; 0x3b96 <vfprintf+0x150>
    3b7a:	83 35       	cpi	r24, 0x53	; 83
    3b7c:	09 f0       	breq	.+2      	; 0x3b80 <vfprintf+0x13a>
    3b7e:	59 c0       	rjmp	.+178    	; 0x3c32 <vfprintf+0x1ec>
    3b80:	21 c0       	rjmp	.+66     	; 0x3bc4 <vfprintf+0x17e>
    3b82:	f8 01       	movw	r30, r16
    3b84:	80 81       	ld	r24, Z
    3b86:	89 83       	std	Y+1, r24	; 0x01
    3b88:	0e 5f       	subi	r16, 0xFE	; 254
    3b8a:	1f 4f       	sbci	r17, 0xFF	; 255
    3b8c:	88 24       	eor	r8, r8
    3b8e:	83 94       	inc	r8
    3b90:	91 2c       	mov	r9, r1
    3b92:	53 01       	movw	r10, r6
    3b94:	13 c0       	rjmp	.+38     	; 0x3bbc <vfprintf+0x176>
    3b96:	28 01       	movw	r4, r16
    3b98:	f2 e0       	ldi	r31, 0x02	; 2
    3b9a:	4f 0e       	add	r4, r31
    3b9c:	51 1c       	adc	r5, r1
    3b9e:	f8 01       	movw	r30, r16
    3ba0:	a0 80       	ld	r10, Z
    3ba2:	b1 80       	ldd	r11, Z+1	; 0x01
    3ba4:	36 fe       	sbrs	r3, 6
    3ba6:	03 c0       	rjmp	.+6      	; 0x3bae <vfprintf+0x168>
    3ba8:	69 2d       	mov	r22, r9
    3baa:	70 e0       	ldi	r23, 0x00	; 0
    3bac:	02 c0       	rjmp	.+4      	; 0x3bb2 <vfprintf+0x16c>
    3bae:	6f ef       	ldi	r22, 0xFF	; 255
    3bb0:	7f ef       	ldi	r23, 0xFF	; 255
    3bb2:	c5 01       	movw	r24, r10
    3bb4:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <strnlen>
    3bb8:	4c 01       	movw	r8, r24
    3bba:	82 01       	movw	r16, r4
    3bbc:	f3 2d       	mov	r31, r3
    3bbe:	ff 77       	andi	r31, 0x7F	; 127
    3bc0:	3f 2e       	mov	r3, r31
    3bc2:	16 c0       	rjmp	.+44     	; 0x3bf0 <vfprintf+0x1aa>
    3bc4:	28 01       	movw	r4, r16
    3bc6:	22 e0       	ldi	r18, 0x02	; 2
    3bc8:	42 0e       	add	r4, r18
    3bca:	51 1c       	adc	r5, r1
    3bcc:	f8 01       	movw	r30, r16
    3bce:	a0 80       	ld	r10, Z
    3bd0:	b1 80       	ldd	r11, Z+1	; 0x01
    3bd2:	36 fe       	sbrs	r3, 6
    3bd4:	03 c0       	rjmp	.+6      	; 0x3bdc <vfprintf+0x196>
    3bd6:	69 2d       	mov	r22, r9
    3bd8:	70 e0       	ldi	r23, 0x00	; 0
    3bda:	02 c0       	rjmp	.+4      	; 0x3be0 <vfprintf+0x19a>
    3bdc:	6f ef       	ldi	r22, 0xFF	; 255
    3bde:	7f ef       	ldi	r23, 0xFF	; 255
    3be0:	c5 01       	movw	r24, r10
    3be2:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <strnlen_P>
    3be6:	4c 01       	movw	r8, r24
    3be8:	f3 2d       	mov	r31, r3
    3bea:	f0 68       	ori	r31, 0x80	; 128
    3bec:	3f 2e       	mov	r3, r31
    3bee:	82 01       	movw	r16, r4
    3bf0:	33 fc       	sbrc	r3, 3
    3bf2:	1b c0       	rjmp	.+54     	; 0x3c2a <vfprintf+0x1e4>
    3bf4:	82 2d       	mov	r24, r2
    3bf6:	90 e0       	ldi	r25, 0x00	; 0
    3bf8:	88 16       	cp	r8, r24
    3bfa:	99 06       	cpc	r9, r25
    3bfc:	b0 f4       	brcc	.+44     	; 0x3c2a <vfprintf+0x1e4>
    3bfe:	b6 01       	movw	r22, r12
    3c00:	80 e2       	ldi	r24, 0x20	; 32
    3c02:	90 e0       	ldi	r25, 0x00	; 0
    3c04:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <fputc>
    3c08:	2a 94       	dec	r2
    3c0a:	f4 cf       	rjmp	.-24     	; 0x3bf4 <vfprintf+0x1ae>
    3c0c:	f5 01       	movw	r30, r10
    3c0e:	37 fc       	sbrc	r3, 7
    3c10:	85 91       	lpm	r24, Z+
    3c12:	37 fe       	sbrs	r3, 7
    3c14:	81 91       	ld	r24, Z+
    3c16:	5f 01       	movw	r10, r30
    3c18:	b6 01       	movw	r22, r12
    3c1a:	90 e0       	ldi	r25, 0x00	; 0
    3c1c:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <fputc>
    3c20:	21 10       	cpse	r2, r1
    3c22:	2a 94       	dec	r2
    3c24:	21 e0       	ldi	r18, 0x01	; 1
    3c26:	82 1a       	sub	r8, r18
    3c28:	91 08       	sbc	r9, r1
    3c2a:	81 14       	cp	r8, r1
    3c2c:	91 04       	cpc	r9, r1
    3c2e:	71 f7       	brne	.-36     	; 0x3c0c <vfprintf+0x1c6>
    3c30:	e8 c0       	rjmp	.+464    	; 0x3e02 <vfprintf+0x3bc>
    3c32:	84 36       	cpi	r24, 0x64	; 100
    3c34:	11 f0       	breq	.+4      	; 0x3c3a <vfprintf+0x1f4>
    3c36:	89 36       	cpi	r24, 0x69	; 105
    3c38:	41 f5       	brne	.+80     	; 0x3c8a <vfprintf+0x244>
    3c3a:	f8 01       	movw	r30, r16
    3c3c:	37 fe       	sbrs	r3, 7
    3c3e:	07 c0       	rjmp	.+14     	; 0x3c4e <vfprintf+0x208>
    3c40:	60 81       	ld	r22, Z
    3c42:	71 81       	ldd	r23, Z+1	; 0x01
    3c44:	82 81       	ldd	r24, Z+2	; 0x02
    3c46:	93 81       	ldd	r25, Z+3	; 0x03
    3c48:	0c 5f       	subi	r16, 0xFC	; 252
    3c4a:	1f 4f       	sbci	r17, 0xFF	; 255
    3c4c:	08 c0       	rjmp	.+16     	; 0x3c5e <vfprintf+0x218>
    3c4e:	60 81       	ld	r22, Z
    3c50:	71 81       	ldd	r23, Z+1	; 0x01
    3c52:	07 2e       	mov	r0, r23
    3c54:	00 0c       	add	r0, r0
    3c56:	88 0b       	sbc	r24, r24
    3c58:	99 0b       	sbc	r25, r25
    3c5a:	0e 5f       	subi	r16, 0xFE	; 254
    3c5c:	1f 4f       	sbci	r17, 0xFF	; 255
    3c5e:	f3 2d       	mov	r31, r3
    3c60:	ff 76       	andi	r31, 0x6F	; 111
    3c62:	3f 2e       	mov	r3, r31
    3c64:	97 ff       	sbrs	r25, 7
    3c66:	09 c0       	rjmp	.+18     	; 0x3c7a <vfprintf+0x234>
    3c68:	90 95       	com	r25
    3c6a:	80 95       	com	r24
    3c6c:	70 95       	com	r23
    3c6e:	61 95       	neg	r22
    3c70:	7f 4f       	sbci	r23, 0xFF	; 255
    3c72:	8f 4f       	sbci	r24, 0xFF	; 255
    3c74:	9f 4f       	sbci	r25, 0xFF	; 255
    3c76:	f0 68       	ori	r31, 0x80	; 128
    3c78:	3f 2e       	mov	r3, r31
    3c7a:	2a e0       	ldi	r18, 0x0A	; 10
    3c7c:	30 e0       	ldi	r19, 0x00	; 0
    3c7e:	a3 01       	movw	r20, r6
    3c80:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <__ultoa_invert>
    3c84:	88 2e       	mov	r8, r24
    3c86:	86 18       	sub	r8, r6
    3c88:	45 c0       	rjmp	.+138    	; 0x3d14 <vfprintf+0x2ce>
    3c8a:	85 37       	cpi	r24, 0x75	; 117
    3c8c:	31 f4       	brne	.+12     	; 0x3c9a <vfprintf+0x254>
    3c8e:	23 2d       	mov	r18, r3
    3c90:	2f 7e       	andi	r18, 0xEF	; 239
    3c92:	b2 2e       	mov	r11, r18
    3c94:	2a e0       	ldi	r18, 0x0A	; 10
    3c96:	30 e0       	ldi	r19, 0x00	; 0
    3c98:	25 c0       	rjmp	.+74     	; 0x3ce4 <vfprintf+0x29e>
    3c9a:	93 2d       	mov	r25, r3
    3c9c:	99 7f       	andi	r25, 0xF9	; 249
    3c9e:	b9 2e       	mov	r11, r25
    3ca0:	8f 36       	cpi	r24, 0x6F	; 111
    3ca2:	c1 f0       	breq	.+48     	; 0x3cd4 <vfprintf+0x28e>
    3ca4:	18 f4       	brcc	.+6      	; 0x3cac <vfprintf+0x266>
    3ca6:	88 35       	cpi	r24, 0x58	; 88
    3ca8:	79 f0       	breq	.+30     	; 0x3cc8 <vfprintf+0x282>
    3caa:	b5 c0       	rjmp	.+362    	; 0x3e16 <vfprintf+0x3d0>
    3cac:	80 37       	cpi	r24, 0x70	; 112
    3cae:	19 f0       	breq	.+6      	; 0x3cb6 <vfprintf+0x270>
    3cb0:	88 37       	cpi	r24, 0x78	; 120
    3cb2:	21 f0       	breq	.+8      	; 0x3cbc <vfprintf+0x276>
    3cb4:	b0 c0       	rjmp	.+352    	; 0x3e16 <vfprintf+0x3d0>
    3cb6:	e9 2f       	mov	r30, r25
    3cb8:	e0 61       	ori	r30, 0x10	; 16
    3cba:	be 2e       	mov	r11, r30
    3cbc:	b4 fe       	sbrs	r11, 4
    3cbe:	0d c0       	rjmp	.+26     	; 0x3cda <vfprintf+0x294>
    3cc0:	fb 2d       	mov	r31, r11
    3cc2:	f4 60       	ori	r31, 0x04	; 4
    3cc4:	bf 2e       	mov	r11, r31
    3cc6:	09 c0       	rjmp	.+18     	; 0x3cda <vfprintf+0x294>
    3cc8:	34 fe       	sbrs	r3, 4
    3cca:	0a c0       	rjmp	.+20     	; 0x3ce0 <vfprintf+0x29a>
    3ccc:	29 2f       	mov	r18, r25
    3cce:	26 60       	ori	r18, 0x06	; 6
    3cd0:	b2 2e       	mov	r11, r18
    3cd2:	06 c0       	rjmp	.+12     	; 0x3ce0 <vfprintf+0x29a>
    3cd4:	28 e0       	ldi	r18, 0x08	; 8
    3cd6:	30 e0       	ldi	r19, 0x00	; 0
    3cd8:	05 c0       	rjmp	.+10     	; 0x3ce4 <vfprintf+0x29e>
    3cda:	20 e1       	ldi	r18, 0x10	; 16
    3cdc:	30 e0       	ldi	r19, 0x00	; 0
    3cde:	02 c0       	rjmp	.+4      	; 0x3ce4 <vfprintf+0x29e>
    3ce0:	20 e1       	ldi	r18, 0x10	; 16
    3ce2:	32 e0       	ldi	r19, 0x02	; 2
    3ce4:	f8 01       	movw	r30, r16
    3ce6:	b7 fe       	sbrs	r11, 7
    3ce8:	07 c0       	rjmp	.+14     	; 0x3cf8 <vfprintf+0x2b2>
    3cea:	60 81       	ld	r22, Z
    3cec:	71 81       	ldd	r23, Z+1	; 0x01
    3cee:	82 81       	ldd	r24, Z+2	; 0x02
    3cf0:	93 81       	ldd	r25, Z+3	; 0x03
    3cf2:	0c 5f       	subi	r16, 0xFC	; 252
    3cf4:	1f 4f       	sbci	r17, 0xFF	; 255
    3cf6:	06 c0       	rjmp	.+12     	; 0x3d04 <vfprintf+0x2be>
    3cf8:	60 81       	ld	r22, Z
    3cfa:	71 81       	ldd	r23, Z+1	; 0x01
    3cfc:	80 e0       	ldi	r24, 0x00	; 0
    3cfe:	90 e0       	ldi	r25, 0x00	; 0
    3d00:	0e 5f       	subi	r16, 0xFE	; 254
    3d02:	1f 4f       	sbci	r17, 0xFF	; 255
    3d04:	a3 01       	movw	r20, r6
    3d06:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <__ultoa_invert>
    3d0a:	88 2e       	mov	r8, r24
    3d0c:	86 18       	sub	r8, r6
    3d0e:	fb 2d       	mov	r31, r11
    3d10:	ff 77       	andi	r31, 0x7F	; 127
    3d12:	3f 2e       	mov	r3, r31
    3d14:	36 fe       	sbrs	r3, 6
    3d16:	0d c0       	rjmp	.+26     	; 0x3d32 <vfprintf+0x2ec>
    3d18:	23 2d       	mov	r18, r3
    3d1a:	2e 7f       	andi	r18, 0xFE	; 254
    3d1c:	a2 2e       	mov	r10, r18
    3d1e:	89 14       	cp	r8, r9
    3d20:	58 f4       	brcc	.+22     	; 0x3d38 <vfprintf+0x2f2>
    3d22:	34 fe       	sbrs	r3, 4
    3d24:	0b c0       	rjmp	.+22     	; 0x3d3c <vfprintf+0x2f6>
    3d26:	32 fc       	sbrc	r3, 2
    3d28:	09 c0       	rjmp	.+18     	; 0x3d3c <vfprintf+0x2f6>
    3d2a:	83 2d       	mov	r24, r3
    3d2c:	8e 7e       	andi	r24, 0xEE	; 238
    3d2e:	a8 2e       	mov	r10, r24
    3d30:	05 c0       	rjmp	.+10     	; 0x3d3c <vfprintf+0x2f6>
    3d32:	b8 2c       	mov	r11, r8
    3d34:	a3 2c       	mov	r10, r3
    3d36:	03 c0       	rjmp	.+6      	; 0x3d3e <vfprintf+0x2f8>
    3d38:	b8 2c       	mov	r11, r8
    3d3a:	01 c0       	rjmp	.+2      	; 0x3d3e <vfprintf+0x2f8>
    3d3c:	b9 2c       	mov	r11, r9
    3d3e:	a4 fe       	sbrs	r10, 4
    3d40:	0f c0       	rjmp	.+30     	; 0x3d60 <vfprintf+0x31a>
    3d42:	fe 01       	movw	r30, r28
    3d44:	e8 0d       	add	r30, r8
    3d46:	f1 1d       	adc	r31, r1
    3d48:	80 81       	ld	r24, Z
    3d4a:	80 33       	cpi	r24, 0x30	; 48
    3d4c:	21 f4       	brne	.+8      	; 0x3d56 <vfprintf+0x310>
    3d4e:	9a 2d       	mov	r25, r10
    3d50:	99 7e       	andi	r25, 0xE9	; 233
    3d52:	a9 2e       	mov	r10, r25
    3d54:	09 c0       	rjmp	.+18     	; 0x3d68 <vfprintf+0x322>
    3d56:	a2 fe       	sbrs	r10, 2
    3d58:	06 c0       	rjmp	.+12     	; 0x3d66 <vfprintf+0x320>
    3d5a:	b3 94       	inc	r11
    3d5c:	b3 94       	inc	r11
    3d5e:	04 c0       	rjmp	.+8      	; 0x3d68 <vfprintf+0x322>
    3d60:	8a 2d       	mov	r24, r10
    3d62:	86 78       	andi	r24, 0x86	; 134
    3d64:	09 f0       	breq	.+2      	; 0x3d68 <vfprintf+0x322>
    3d66:	b3 94       	inc	r11
    3d68:	a3 fc       	sbrc	r10, 3
    3d6a:	11 c0       	rjmp	.+34     	; 0x3d8e <vfprintf+0x348>
    3d6c:	a0 fe       	sbrs	r10, 0
    3d6e:	06 c0       	rjmp	.+12     	; 0x3d7c <vfprintf+0x336>
    3d70:	b2 14       	cp	r11, r2
    3d72:	88 f4       	brcc	.+34     	; 0x3d96 <vfprintf+0x350>
    3d74:	28 0c       	add	r2, r8
    3d76:	92 2c       	mov	r9, r2
    3d78:	9b 18       	sub	r9, r11
    3d7a:	0e c0       	rjmp	.+28     	; 0x3d98 <vfprintf+0x352>
    3d7c:	b2 14       	cp	r11, r2
    3d7e:	60 f4       	brcc	.+24     	; 0x3d98 <vfprintf+0x352>
    3d80:	b6 01       	movw	r22, r12
    3d82:	80 e2       	ldi	r24, 0x20	; 32
    3d84:	90 e0       	ldi	r25, 0x00	; 0
    3d86:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <fputc>
    3d8a:	b3 94       	inc	r11
    3d8c:	f7 cf       	rjmp	.-18     	; 0x3d7c <vfprintf+0x336>
    3d8e:	b2 14       	cp	r11, r2
    3d90:	18 f4       	brcc	.+6      	; 0x3d98 <vfprintf+0x352>
    3d92:	2b 18       	sub	r2, r11
    3d94:	02 c0       	rjmp	.+4      	; 0x3d9a <vfprintf+0x354>
    3d96:	98 2c       	mov	r9, r8
    3d98:	21 2c       	mov	r2, r1
    3d9a:	a4 fe       	sbrs	r10, 4
    3d9c:	10 c0       	rjmp	.+32     	; 0x3dbe <vfprintf+0x378>
    3d9e:	b6 01       	movw	r22, r12
    3da0:	80 e3       	ldi	r24, 0x30	; 48
    3da2:	90 e0       	ldi	r25, 0x00	; 0
    3da4:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <fputc>
    3da8:	a2 fe       	sbrs	r10, 2
    3daa:	17 c0       	rjmp	.+46     	; 0x3dda <vfprintf+0x394>
    3dac:	a1 fc       	sbrc	r10, 1
    3dae:	03 c0       	rjmp	.+6      	; 0x3db6 <vfprintf+0x370>
    3db0:	88 e7       	ldi	r24, 0x78	; 120
    3db2:	90 e0       	ldi	r25, 0x00	; 0
    3db4:	02 c0       	rjmp	.+4      	; 0x3dba <vfprintf+0x374>
    3db6:	88 e5       	ldi	r24, 0x58	; 88
    3db8:	90 e0       	ldi	r25, 0x00	; 0
    3dba:	b6 01       	movw	r22, r12
    3dbc:	0c c0       	rjmp	.+24     	; 0x3dd6 <vfprintf+0x390>
    3dbe:	8a 2d       	mov	r24, r10
    3dc0:	86 78       	andi	r24, 0x86	; 134
    3dc2:	59 f0       	breq	.+22     	; 0x3dda <vfprintf+0x394>
    3dc4:	a1 fe       	sbrs	r10, 1
    3dc6:	02 c0       	rjmp	.+4      	; 0x3dcc <vfprintf+0x386>
    3dc8:	8b e2       	ldi	r24, 0x2B	; 43
    3dca:	01 c0       	rjmp	.+2      	; 0x3dce <vfprintf+0x388>
    3dcc:	80 e2       	ldi	r24, 0x20	; 32
    3dce:	a7 fc       	sbrc	r10, 7
    3dd0:	8d e2       	ldi	r24, 0x2D	; 45
    3dd2:	b6 01       	movw	r22, r12
    3dd4:	90 e0       	ldi	r25, 0x00	; 0
    3dd6:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <fputc>
    3dda:	89 14       	cp	r8, r9
    3ddc:	38 f4       	brcc	.+14     	; 0x3dec <vfprintf+0x3a6>
    3dde:	b6 01       	movw	r22, r12
    3de0:	80 e3       	ldi	r24, 0x30	; 48
    3de2:	90 e0       	ldi	r25, 0x00	; 0
    3de4:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <fputc>
    3de8:	9a 94       	dec	r9
    3dea:	f7 cf       	rjmp	.-18     	; 0x3dda <vfprintf+0x394>
    3dec:	8a 94       	dec	r8
    3dee:	f3 01       	movw	r30, r6
    3df0:	e8 0d       	add	r30, r8
    3df2:	f1 1d       	adc	r31, r1
    3df4:	80 81       	ld	r24, Z
    3df6:	b6 01       	movw	r22, r12
    3df8:	90 e0       	ldi	r25, 0x00	; 0
    3dfa:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <fputc>
    3dfe:	81 10       	cpse	r8, r1
    3e00:	f5 cf       	rjmp	.-22     	; 0x3dec <vfprintf+0x3a6>
    3e02:	22 20       	and	r2, r2
    3e04:	09 f4       	brne	.+2      	; 0x3e08 <vfprintf+0x3c2>
    3e06:	42 ce       	rjmp	.-892    	; 0x3a8c <vfprintf+0x46>
    3e08:	b6 01       	movw	r22, r12
    3e0a:	80 e2       	ldi	r24, 0x20	; 32
    3e0c:	90 e0       	ldi	r25, 0x00	; 0
    3e0e:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <fputc>
    3e12:	2a 94       	dec	r2
    3e14:	f6 cf       	rjmp	.-20     	; 0x3e02 <vfprintf+0x3bc>
    3e16:	f6 01       	movw	r30, r12
    3e18:	86 81       	ldd	r24, Z+6	; 0x06
    3e1a:	97 81       	ldd	r25, Z+7	; 0x07
    3e1c:	02 c0       	rjmp	.+4      	; 0x3e22 <vfprintf+0x3dc>
    3e1e:	8f ef       	ldi	r24, 0xFF	; 255
    3e20:	9f ef       	ldi	r25, 0xFF	; 255
    3e22:	2b 96       	adiw	r28, 0x0b	; 11
    3e24:	cd bf       	out	0x3d, r28	; 61
    3e26:	de bf       	out	0x3e, r29	; 62
    3e28:	df 91       	pop	r29
    3e2a:	cf 91       	pop	r28
    3e2c:	1f 91       	pop	r17
    3e2e:	0f 91       	pop	r16
    3e30:	ff 90       	pop	r15
    3e32:	ef 90       	pop	r14
    3e34:	df 90       	pop	r13
    3e36:	cf 90       	pop	r12
    3e38:	bf 90       	pop	r11
    3e3a:	af 90       	pop	r10
    3e3c:	9f 90       	pop	r9
    3e3e:	8f 90       	pop	r8
    3e40:	7f 90       	pop	r7
    3e42:	6f 90       	pop	r6
    3e44:	5f 90       	pop	r5
    3e46:	4f 90       	pop	r4
    3e48:	3f 90       	pop	r3
    3e4a:	2f 90       	pop	r2
    3e4c:	08 95       	ret

00003e4e <strnlen_P>:
    3e4e:	fc 01       	movw	r30, r24
    3e50:	05 90       	lpm	r0, Z+
    3e52:	61 50       	subi	r22, 0x01	; 1
    3e54:	70 40       	sbci	r23, 0x00	; 0
    3e56:	01 10       	cpse	r0, r1
    3e58:	d8 f7       	brcc	.-10     	; 0x3e50 <strnlen_P+0x2>
    3e5a:	80 95       	com	r24
    3e5c:	90 95       	com	r25
    3e5e:	8e 0f       	add	r24, r30
    3e60:	9f 1f       	adc	r25, r31
    3e62:	08 95       	ret

00003e64 <strnlen>:
    3e64:	fc 01       	movw	r30, r24
    3e66:	61 50       	subi	r22, 0x01	; 1
    3e68:	70 40       	sbci	r23, 0x00	; 0
    3e6a:	01 90       	ld	r0, Z+
    3e6c:	01 10       	cpse	r0, r1
    3e6e:	d8 f7       	brcc	.-10     	; 0x3e66 <strnlen+0x2>
    3e70:	80 95       	com	r24
    3e72:	90 95       	com	r25
    3e74:	8e 0f       	add	r24, r30
    3e76:	9f 1f       	adc	r25, r31
    3e78:	08 95       	ret

00003e7a <strrev>:
    3e7a:	dc 01       	movw	r26, r24
    3e7c:	fc 01       	movw	r30, r24
    3e7e:	67 2f       	mov	r22, r23
    3e80:	71 91       	ld	r23, Z+
    3e82:	77 23       	and	r23, r23
    3e84:	e1 f7       	brne	.-8      	; 0x3e7e <strrev+0x4>
    3e86:	32 97       	sbiw	r30, 0x02	; 2
    3e88:	04 c0       	rjmp	.+8      	; 0x3e92 <strrev+0x18>
    3e8a:	7c 91       	ld	r23, X
    3e8c:	6d 93       	st	X+, r22
    3e8e:	70 83       	st	Z, r23
    3e90:	62 91       	ld	r22, -Z
    3e92:	ae 17       	cp	r26, r30
    3e94:	bf 07       	cpc	r27, r31
    3e96:	c8 f3       	brcs	.-14     	; 0x3e8a <strrev+0x10>
    3e98:	08 95       	ret

00003e9a <fputc>:
    3e9a:	0f 93       	push	r16
    3e9c:	1f 93       	push	r17
    3e9e:	cf 93       	push	r28
    3ea0:	df 93       	push	r29
    3ea2:	fb 01       	movw	r30, r22
    3ea4:	23 81       	ldd	r18, Z+3	; 0x03
    3ea6:	21 fd       	sbrc	r18, 1
    3ea8:	03 c0       	rjmp	.+6      	; 0x3eb0 <fputc+0x16>
    3eaa:	8f ef       	ldi	r24, 0xFF	; 255
    3eac:	9f ef       	ldi	r25, 0xFF	; 255
    3eae:	2c c0       	rjmp	.+88     	; 0x3f08 <fputc+0x6e>
    3eb0:	22 ff       	sbrs	r18, 2
    3eb2:	16 c0       	rjmp	.+44     	; 0x3ee0 <fputc+0x46>
    3eb4:	46 81       	ldd	r20, Z+6	; 0x06
    3eb6:	57 81       	ldd	r21, Z+7	; 0x07
    3eb8:	24 81       	ldd	r18, Z+4	; 0x04
    3eba:	35 81       	ldd	r19, Z+5	; 0x05
    3ebc:	42 17       	cp	r20, r18
    3ebe:	53 07       	cpc	r21, r19
    3ec0:	44 f4       	brge	.+16     	; 0x3ed2 <fputc+0x38>
    3ec2:	a0 81       	ld	r26, Z
    3ec4:	b1 81       	ldd	r27, Z+1	; 0x01
    3ec6:	9d 01       	movw	r18, r26
    3ec8:	2f 5f       	subi	r18, 0xFF	; 255
    3eca:	3f 4f       	sbci	r19, 0xFF	; 255
    3ecc:	20 83       	st	Z, r18
    3ece:	31 83       	std	Z+1, r19	; 0x01
    3ed0:	8c 93       	st	X, r24
    3ed2:	26 81       	ldd	r18, Z+6	; 0x06
    3ed4:	37 81       	ldd	r19, Z+7	; 0x07
    3ed6:	2f 5f       	subi	r18, 0xFF	; 255
    3ed8:	3f 4f       	sbci	r19, 0xFF	; 255
    3eda:	26 83       	std	Z+6, r18	; 0x06
    3edc:	37 83       	std	Z+7, r19	; 0x07
    3ede:	14 c0       	rjmp	.+40     	; 0x3f08 <fputc+0x6e>
    3ee0:	8b 01       	movw	r16, r22
    3ee2:	ec 01       	movw	r28, r24
    3ee4:	fb 01       	movw	r30, r22
    3ee6:	00 84       	ldd	r0, Z+8	; 0x08
    3ee8:	f1 85       	ldd	r31, Z+9	; 0x09
    3eea:	e0 2d       	mov	r30, r0
    3eec:	19 95       	eicall
    3eee:	89 2b       	or	r24, r25
    3ef0:	e1 f6       	brne	.-72     	; 0x3eaa <fputc+0x10>
    3ef2:	d8 01       	movw	r26, r16
    3ef4:	16 96       	adiw	r26, 0x06	; 6
    3ef6:	8d 91       	ld	r24, X+
    3ef8:	9c 91       	ld	r25, X
    3efa:	17 97       	sbiw	r26, 0x07	; 7
    3efc:	01 96       	adiw	r24, 0x01	; 1
    3efe:	16 96       	adiw	r26, 0x06	; 6
    3f00:	8d 93       	st	X+, r24
    3f02:	9c 93       	st	X, r25
    3f04:	17 97       	sbiw	r26, 0x07	; 7
    3f06:	ce 01       	movw	r24, r28
    3f08:	df 91       	pop	r29
    3f0a:	cf 91       	pop	r28
    3f0c:	1f 91       	pop	r17
    3f0e:	0f 91       	pop	r16
    3f10:	08 95       	ret

00003f12 <__ultoa_invert>:
    3f12:	fa 01       	movw	r30, r20
    3f14:	aa 27       	eor	r26, r26
    3f16:	28 30       	cpi	r18, 0x08	; 8
    3f18:	51 f1       	breq	.+84     	; 0x3f6e <__ultoa_invert+0x5c>
    3f1a:	20 31       	cpi	r18, 0x10	; 16
    3f1c:	81 f1       	breq	.+96     	; 0x3f7e <__ultoa_invert+0x6c>
    3f1e:	e8 94       	clt
    3f20:	6f 93       	push	r22
    3f22:	6e 7f       	andi	r22, 0xFE	; 254
    3f24:	6e 5f       	subi	r22, 0xFE	; 254
    3f26:	7f 4f       	sbci	r23, 0xFF	; 255
    3f28:	8f 4f       	sbci	r24, 0xFF	; 255
    3f2a:	9f 4f       	sbci	r25, 0xFF	; 255
    3f2c:	af 4f       	sbci	r26, 0xFF	; 255
    3f2e:	b1 e0       	ldi	r27, 0x01	; 1
    3f30:	3e d0       	rcall	.+124    	; 0x3fae <__ultoa_invert+0x9c>
    3f32:	b4 e0       	ldi	r27, 0x04	; 4
    3f34:	3c d0       	rcall	.+120    	; 0x3fae <__ultoa_invert+0x9c>
    3f36:	67 0f       	add	r22, r23
    3f38:	78 1f       	adc	r23, r24
    3f3a:	89 1f       	adc	r24, r25
    3f3c:	9a 1f       	adc	r25, r26
    3f3e:	a1 1d       	adc	r26, r1
    3f40:	68 0f       	add	r22, r24
    3f42:	79 1f       	adc	r23, r25
    3f44:	8a 1f       	adc	r24, r26
    3f46:	91 1d       	adc	r25, r1
    3f48:	a1 1d       	adc	r26, r1
    3f4a:	6a 0f       	add	r22, r26
    3f4c:	71 1d       	adc	r23, r1
    3f4e:	81 1d       	adc	r24, r1
    3f50:	91 1d       	adc	r25, r1
    3f52:	a1 1d       	adc	r26, r1
    3f54:	20 d0       	rcall	.+64     	; 0x3f96 <__ultoa_invert+0x84>
    3f56:	09 f4       	brne	.+2      	; 0x3f5a <__ultoa_invert+0x48>
    3f58:	68 94       	set
    3f5a:	3f 91       	pop	r19
    3f5c:	2a e0       	ldi	r18, 0x0A	; 10
    3f5e:	26 9f       	mul	r18, r22
    3f60:	11 24       	eor	r1, r1
    3f62:	30 19       	sub	r19, r0
    3f64:	30 5d       	subi	r19, 0xD0	; 208
    3f66:	31 93       	st	Z+, r19
    3f68:	de f6       	brtc	.-74     	; 0x3f20 <__ultoa_invert+0xe>
    3f6a:	cf 01       	movw	r24, r30
    3f6c:	08 95       	ret
    3f6e:	46 2f       	mov	r20, r22
    3f70:	47 70       	andi	r20, 0x07	; 7
    3f72:	40 5d       	subi	r20, 0xD0	; 208
    3f74:	41 93       	st	Z+, r20
    3f76:	b3 e0       	ldi	r27, 0x03	; 3
    3f78:	0f d0       	rcall	.+30     	; 0x3f98 <__ultoa_invert+0x86>
    3f7a:	c9 f7       	brne	.-14     	; 0x3f6e <__ultoa_invert+0x5c>
    3f7c:	f6 cf       	rjmp	.-20     	; 0x3f6a <__ultoa_invert+0x58>
    3f7e:	46 2f       	mov	r20, r22
    3f80:	4f 70       	andi	r20, 0x0F	; 15
    3f82:	40 5d       	subi	r20, 0xD0	; 208
    3f84:	4a 33       	cpi	r20, 0x3A	; 58
    3f86:	18 f0       	brcs	.+6      	; 0x3f8e <__ultoa_invert+0x7c>
    3f88:	49 5d       	subi	r20, 0xD9	; 217
    3f8a:	31 fd       	sbrc	r19, 1
    3f8c:	40 52       	subi	r20, 0x20	; 32
    3f8e:	41 93       	st	Z+, r20
    3f90:	02 d0       	rcall	.+4      	; 0x3f96 <__ultoa_invert+0x84>
    3f92:	a9 f7       	brne	.-22     	; 0x3f7e <__ultoa_invert+0x6c>
    3f94:	ea cf       	rjmp	.-44     	; 0x3f6a <__ultoa_invert+0x58>
    3f96:	b4 e0       	ldi	r27, 0x04	; 4
    3f98:	a6 95       	lsr	r26
    3f9a:	97 95       	ror	r25
    3f9c:	87 95       	ror	r24
    3f9e:	77 95       	ror	r23
    3fa0:	67 95       	ror	r22
    3fa2:	ba 95       	dec	r27
    3fa4:	c9 f7       	brne	.-14     	; 0x3f98 <__ultoa_invert+0x86>
    3fa6:	00 97       	sbiw	r24, 0x00	; 0
    3fa8:	61 05       	cpc	r22, r1
    3faa:	71 05       	cpc	r23, r1
    3fac:	08 95       	ret
    3fae:	9b 01       	movw	r18, r22
    3fb0:	ac 01       	movw	r20, r24
    3fb2:	0a 2e       	mov	r0, r26
    3fb4:	06 94       	lsr	r0
    3fb6:	57 95       	ror	r21
    3fb8:	47 95       	ror	r20
    3fba:	37 95       	ror	r19
    3fbc:	27 95       	ror	r18
    3fbe:	ba 95       	dec	r27
    3fc0:	c9 f7       	brne	.-14     	; 0x3fb4 <__ultoa_invert+0xa2>
    3fc2:	62 0f       	add	r22, r18
    3fc4:	73 1f       	adc	r23, r19
    3fc6:	84 1f       	adc	r24, r20
    3fc8:	95 1f       	adc	r25, r21
    3fca:	a0 1d       	adc	r26, r0
    3fcc:	08 95       	ret

00003fce <_exit>:
    3fce:	f8 94       	cli

00003fd0 <__stop_program>:
    3fd0:	ff cf       	rjmp	.-2      	; 0x3fd0 <__stop_program>
