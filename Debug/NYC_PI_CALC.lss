
NYC_PI_CALC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000066fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c6  00802000  000066fe  00006792  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000107e  008020c6  008020c6  00006858  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006858  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000068b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000800  00000000  00000000  000068f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b339  00000000  00000000  000070f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004699  00000000  00000000  0001242d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000057a4  00000000  00000000  00016ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001eec  00000000  00000000  0001c26c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005645  00000000  00000000  0001e158  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004191  00000000  00000000  0002379d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000728  00000000  00000000  0002792e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 24 01 	jmp	0x248	; 0x248 <__ctors_end>
       4:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
       8:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
       c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      10:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      14:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      18:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      1c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      20:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      24:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      28:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      2c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      30:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      34:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      38:	0c 94 af 0b 	jmp	0x175e	; 0x175e <__vector_14>
      3c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      40:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      44:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      48:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      4c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      50:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      54:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      58:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      5c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      60:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      64:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      68:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      6c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      70:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      74:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      78:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      7c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      80:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      84:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      88:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      8c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      90:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      94:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      98:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      9c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      a0:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      a4:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      a8:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      ac:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      b0:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      b4:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      b8:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      bc:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      c0:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      c4:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      c8:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      cc:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      d0:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      d4:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      d8:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      dc:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      e0:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      e4:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      e8:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      ec:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      f0:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      f4:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      f8:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      fc:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     100:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     104:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     108:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     10c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     110:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     114:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     118:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     11c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     120:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     124:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     128:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     12c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     130:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     134:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     138:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     13c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     140:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     144:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     148:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     14c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     150:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     154:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     158:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     15c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     160:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     164:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     168:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     16c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     170:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     174:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     178:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     17c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     180:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     184:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     188:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     18c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     190:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     194:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     198:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     19c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     1a0:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     1a4:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     1a8:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     1ac:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     1b0:	0c 94 6d 24 	jmp	0x48da	; 0x48da <__vector_108>
     1b4:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     1b8:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     1bc:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     1c0:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     1c4:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     1c8:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     1cc:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     1d0:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     1d4:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     1d8:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     1dc:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     1e0:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     1e4:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     1e8:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     1ec:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     1f0:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     1f4:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     1f8:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
     1fc:	1d 1e       	adc	r1, r29
     1fe:	1d 1e       	adc	r1, r29
     200:	1d 1e       	adc	r1, r29
     202:	a4 1e       	adc	r10, r20
     204:	70 1e       	adc	r7, r16
     206:	9e 1e       	adc	r9, r30
     208:	1d 1e       	adc	r1, r29
     20a:	1d 1e       	adc	r1, r29
     20c:	a4 1e       	adc	r10, r20
     20e:	70 1e       	adc	r7, r16

00000210 <__trampolines_start>:
     210:	0c 94 00 27 	jmp	0x4e00	; 0x4e00 <vDisplayUpdateTask>
     214:	0c 94 19 21 	jmp	0x4232	; 0x4232 <vPiLeibniz>
     218:	0c 94 9e 1e 	jmp	0x3d3c	; 0x3d3c <prvProcessReceivedCommands+0x1d0>
     21c:	0c 94 a9 21 	jmp	0x4352	; 0x4352 <vVietaPi>
     220:	0c 94 58 19 	jmp	0x32b0	; 0x32b0 <prvIdleTask>
     224:	0c 94 b2 20 	jmp	0x4164	; 0x4164 <vTimeMeasurement>
     228:	0c 94 b6 22 	jmp	0x456c	; 0x456c <vDisplaytask>
     22c:	0c 94 f0 23 	jmp	0x47e0	; 0x47e0 <controllerTask>
     230:	0c 94 26 22 	jmp	0x444c	; 0x444c <vCompare>
     234:	0c 94 a4 1e 	jmp	0x3d48	; 0x3d48 <prvProcessReceivedCommands+0x1dc>
     238:	0c 94 ff 1b 	jmp	0x37fe	; 0x37fe <prvTimerTask>
     23c:	0c 94 8d 06 	jmp	0xd1a	; 0xd1a <vEventGroupSetBitsCallback>
     240:	0c 94 70 1e 	jmp	0x3ce0	; 0x3ce0 <prvProcessReceivedCommands+0x174>
     244:	0c 94 1d 1e 	jmp	0x3c3a	; 0x3c3a <prvProcessReceivedCommands+0xce>

00000248 <__ctors_end>:
     248:	11 24       	eor	r1, r1
     24a:	1f be       	out	0x3f, r1	; 63
     24c:	cf ef       	ldi	r28, 0xFF	; 255
     24e:	cd bf       	out	0x3d, r28	; 61
     250:	df e3       	ldi	r29, 0x3F	; 63
     252:	de bf       	out	0x3e, r29	; 62
     254:	00 e0       	ldi	r16, 0x00	; 0
     256:	0c bf       	out	0x3c, r16	; 60

00000258 <init_mem>:
// !!! Never call this function, it is part of .init-Code
void __attribute__ ((naked, section(".init3"))) init_mem (void);
void init_mem (void)
{
   //  Use inline assembler so it works even with optimization turned off
   __asm volatile (
     258:	e4 e4       	ldi	r30, 0x44	; 68
     25a:	f1 e3       	ldi	r31, 0x31	; 49
     25c:	8a ea       	ldi	r24, 0xAA	; 170
     25e:	90 e4       	ldi	r25, 0x40	; 64
     260:	81 93       	st	Z+, r24
     262:	e0 30       	cpi	r30, 0x00	; 0
     264:	f9 07       	cpc	r31, r25
     266:	e0 f3       	brcs	.-8      	; 0x260 <init_mem+0x8>
	...

0000026a <__do_copy_data>:
     26a:	10 e2       	ldi	r17, 0x20	; 32
     26c:	a0 e0       	ldi	r26, 0x00	; 0
     26e:	b0 e2       	ldi	r27, 0x20	; 32
     270:	ee ef       	ldi	r30, 0xFE	; 254
     272:	f6 e6       	ldi	r31, 0x66	; 102
     274:	00 e0       	ldi	r16, 0x00	; 0
     276:	0b bf       	out	0x3b, r16	; 59
     278:	02 c0       	rjmp	.+4      	; 0x27e <__do_copy_data+0x14>
     27a:	07 90       	elpm	r0, Z+
     27c:	0d 92       	st	X+, r0
     27e:	a6 3c       	cpi	r26, 0xC6	; 198
     280:	b1 07       	cpc	r27, r17
     282:	d9 f7       	brne	.-10     	; 0x27a <__do_copy_data+0x10>

00000284 <__do_clear_bss>:
     284:	21 e3       	ldi	r18, 0x31	; 49
     286:	a6 ec       	ldi	r26, 0xC6	; 198
     288:	b0 e2       	ldi	r27, 0x20	; 32
     28a:	01 c0       	rjmp	.+2      	; 0x28e <.do_clear_bss_start>

0000028c <.do_clear_bss_loop>:
     28c:	1d 92       	st	X+, r1

0000028e <.do_clear_bss_start>:
     28e:	a4 34       	cpi	r26, 0x44	; 68
     290:	b2 07       	cpc	r27, r18
     292:	e1 f7       	brne	.-8      	; 0x28c <.do_clear_bss_loop>
     294:	0e 94 4f 20 	call	0x409e	; 0x409e <main>
     298:	0c 94 7d 33 	jmp	0x66fa	; 0x66fa <_exit>

0000029c <__bad_interrupt>:
     29c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002a0 <initButtons>:
 #define BUTTON_PRESS_SHORT			100
 #define BUTTON_PRESS_LONG			500

 

 void initButtons(void) {
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	cd b7       	in	r28, 0x3d	; 61
     2a6:	de b7       	in	r29, 0x3e	; 62
	PORTF.DIRCLR = PIN4_bm; //SW1
     2a8:	80 ea       	ldi	r24, 0xA0	; 160
     2aa:	96 e0       	ldi	r25, 0x06	; 6
     2ac:	20 e1       	ldi	r18, 0x10	; 16
     2ae:	fc 01       	movw	r30, r24
     2b0:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN5_bm; //SW2
     2b2:	80 ea       	ldi	r24, 0xA0	; 160
     2b4:	96 e0       	ldi	r25, 0x06	; 6
     2b6:	20 e2       	ldi	r18, 0x20	; 32
     2b8:	fc 01       	movw	r30, r24
     2ba:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN6_bm; //SW3
     2bc:	80 ea       	ldi	r24, 0xA0	; 160
     2be:	96 e0       	ldi	r25, 0x06	; 6
     2c0:	20 e4       	ldi	r18, 0x40	; 64
     2c2:	fc 01       	movw	r30, r24
     2c4:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN7_bm; //SW4
     2c6:	80 ea       	ldi	r24, 0xA0	; 160
     2c8:	96 e0       	ldi	r25, 0x06	; 6
     2ca:	20 e8       	ldi	r18, 0x80	; 128
     2cc:	fc 01       	movw	r30, r24
     2ce:	22 83       	std	Z+2, r18	; 0x02
 }
     2d0:	00 00       	nop
     2d2:	df 91       	pop	r29
     2d4:	cf 91       	pop	r28
     2d6:	08 95       	ret

000002d8 <updateButtons>:
 button_press_t b1Status;
 button_press_t b2Status;
 button_press_t b3Status;
 button_press_t b4Status;

 void updateButtons(void) {
     2d8:	cf 93       	push	r28
     2da:	df 93       	push	r29
     2dc:	cd b7       	in	r28, 0x3d	; 61
     2de:	de b7       	in	r29, 0x3e	; 62
	static uint16_t b1Count = 0;
	static uint16_t b2Count = 0;
	static uint16_t b3Count = 0;
	static uint16_t b4Count = 0;
	if(Button1_Value == 0) {
     2e0:	80 ea       	ldi	r24, 0xA0	; 160
     2e2:	96 e0       	ldi	r25, 0x06	; 6
     2e4:	fc 01       	movw	r30, r24
     2e6:	80 85       	ldd	r24, Z+8	; 0x08
     2e8:	88 2f       	mov	r24, r24
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	80 71       	andi	r24, 0x10	; 16
     2ee:	99 27       	eor	r25, r25
     2f0:	95 95       	asr	r25
     2f2:	87 95       	ror	r24
     2f4:	95 95       	asr	r25
     2f6:	87 95       	ror	r24
     2f8:	95 95       	asr	r25
     2fa:	87 95       	ror	r24
     2fc:	95 95       	asr	r25
     2fe:	87 95       	ror	r24
     300:	89 2b       	or	r24, r25
     302:	89 f4       	brne	.+34     	; 0x326 <updateButtons+0x4e>
		if(b1Count < 60000) {
     304:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <__data_end>
     308:	90 91 c7 20 	lds	r25, 0x20C7	; 0x8020c7 <__data_end+0x1>
     30c:	80 36       	cpi	r24, 0x60	; 96
     30e:	9a 4e       	sbci	r25, 0xEA	; 234
     310:	20 f5       	brcc	.+72     	; 0x35a <updateButtons+0x82>
			b1Count++;
     312:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <__data_end>
     316:	90 91 c7 20 	lds	r25, 0x20C7	; 0x8020c7 <__data_end+0x1>
     31a:	01 96       	adiw	r24, 0x01	; 1
     31c:	80 93 c6 20 	sts	0x20C6, r24	; 0x8020c6 <__data_end>
     320:	90 93 c7 20 	sts	0x20C7, r25	; 0x8020c7 <__data_end+0x1>
     324:	1a c0       	rjmp	.+52     	; 0x35a <updateButtons+0x82>
		}
	} else {
		if(b1Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     326:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <__data_end>
     32a:	90 91 c7 20 	lds	r25, 0x20C7	; 0x8020c7 <__data_end+0x1>
     32e:	0b 97       	sbiw	r24, 0x0b	; 11
     330:	68 f0       	brcs	.+26     	; 0x34c <updateButtons+0x74>
			if(b1Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     332:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <__data_end>
     336:	90 91 c7 20 	lds	r25, 0x20C7	; 0x8020c7 <__data_end+0x1>
     33a:	c3 97       	sbiw	r24, 0x33	; 51
     33c:	18 f0       	brcs	.+6      	; 0x344 <updateButtons+0x6c>
				//Button was pressed Long
				b1Status = LONG_PRESSED;
     33e:	10 92 3b 31 	sts	0x313B, r1	; 0x80313b <b1Status>
     342:	07 c0       	rjmp	.+14     	; 0x352 <updateButtons+0x7a>
			} else {
				//Button was pressed Short	
				b1Status = SHORT_PRESSED;
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	80 93 3b 31 	sts	0x313B, r24	; 0x80313b <b1Status>
     34a:	03 c0       	rjmp	.+6      	; 0x352 <updateButtons+0x7a>
			}
		} else {
			b1Status = NOT_PRESSED;
     34c:	82 e0       	ldi	r24, 0x02	; 2
     34e:	80 93 3b 31 	sts	0x313B, r24	; 0x80313b <b1Status>
		}
		b1Count = 0;
     352:	10 92 c6 20 	sts	0x20C6, r1	; 0x8020c6 <__data_end>
     356:	10 92 c7 20 	sts	0x20C7, r1	; 0x8020c7 <__data_end+0x1>
	}
	if(Button2_Value == 0) {
     35a:	80 ea       	ldi	r24, 0xA0	; 160
     35c:	96 e0       	ldi	r25, 0x06	; 6
     35e:	fc 01       	movw	r30, r24
     360:	80 85       	ldd	r24, Z+8	; 0x08
     362:	88 2f       	mov	r24, r24
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	80 72       	andi	r24, 0x20	; 32
     368:	99 27       	eor	r25, r25
     36a:	95 95       	asr	r25
     36c:	87 95       	ror	r24
     36e:	95 95       	asr	r25
     370:	87 95       	ror	r24
     372:	95 95       	asr	r25
     374:	87 95       	ror	r24
     376:	95 95       	asr	r25
     378:	87 95       	ror	r24
     37a:	95 95       	asr	r25
     37c:	87 95       	ror	r24
     37e:	89 2b       	or	r24, r25
     380:	89 f4       	brne	.+34     	; 0x3a4 <updateButtons+0xcc>
		if(b2Count < 60000) {
     382:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <b2Count.3830>
     386:	90 91 c9 20 	lds	r25, 0x20C9	; 0x8020c9 <b2Count.3830+0x1>
     38a:	80 36       	cpi	r24, 0x60	; 96
     38c:	9a 4e       	sbci	r25, 0xEA	; 234
     38e:	20 f5       	brcc	.+72     	; 0x3d8 <updateButtons+0x100>
			b2Count++;
     390:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <b2Count.3830>
     394:	90 91 c9 20 	lds	r25, 0x20C9	; 0x8020c9 <b2Count.3830+0x1>
     398:	01 96       	adiw	r24, 0x01	; 1
     39a:	80 93 c8 20 	sts	0x20C8, r24	; 0x8020c8 <b2Count.3830>
     39e:	90 93 c9 20 	sts	0x20C9, r25	; 0x8020c9 <b2Count.3830+0x1>
     3a2:	1a c0       	rjmp	.+52     	; 0x3d8 <updateButtons+0x100>
		}
	} else {
		if(b2Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     3a4:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <b2Count.3830>
     3a8:	90 91 c9 20 	lds	r25, 0x20C9	; 0x8020c9 <b2Count.3830+0x1>
     3ac:	0b 97       	sbiw	r24, 0x0b	; 11
     3ae:	68 f0       	brcs	.+26     	; 0x3ca <updateButtons+0xf2>
			if(b2Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     3b0:	80 91 c8 20 	lds	r24, 0x20C8	; 0x8020c8 <b2Count.3830>
     3b4:	90 91 c9 20 	lds	r25, 0x20C9	; 0x8020c9 <b2Count.3830+0x1>
     3b8:	c3 97       	sbiw	r24, 0x33	; 51
     3ba:	18 f0       	brcs	.+6      	; 0x3c2 <updateButtons+0xea>
				//Button was pressed Long
				b2Status = LONG_PRESSED;
     3bc:	10 92 3c 31 	sts	0x313C, r1	; 0x80313c <b2Status>
     3c0:	07 c0       	rjmp	.+14     	; 0x3d0 <updateButtons+0xf8>
				} else {
				//Button was pressed Short
				b2Status = SHORT_PRESSED;
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	80 93 3c 31 	sts	0x313C, r24	; 0x80313c <b2Status>
     3c8:	03 c0       	rjmp	.+6      	; 0x3d0 <updateButtons+0xf8>
			}
		} else {
			b2Status = NOT_PRESSED;			
     3ca:	82 e0       	ldi	r24, 0x02	; 2
     3cc:	80 93 3c 31 	sts	0x313C, r24	; 0x80313c <b2Status>
		}
		b2Count = 0;
     3d0:	10 92 c8 20 	sts	0x20C8, r1	; 0x8020c8 <b2Count.3830>
     3d4:	10 92 c9 20 	sts	0x20C9, r1	; 0x8020c9 <b2Count.3830+0x1>
	}
	if(Button3_Value == 0) {
     3d8:	80 ea       	ldi	r24, 0xA0	; 160
     3da:	96 e0       	ldi	r25, 0x06	; 6
     3dc:	fc 01       	movw	r30, r24
     3de:	80 85       	ldd	r24, Z+8	; 0x08
     3e0:	88 2f       	mov	r24, r24
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	80 74       	andi	r24, 0x40	; 64
     3e6:	99 27       	eor	r25, r25
     3e8:	08 2e       	mov	r0, r24
     3ea:	89 2f       	mov	r24, r25
     3ec:	00 0c       	add	r0, r0
     3ee:	88 1f       	adc	r24, r24
     3f0:	99 0b       	sbc	r25, r25
     3f2:	00 0c       	add	r0, r0
     3f4:	88 1f       	adc	r24, r24
     3f6:	99 1f       	adc	r25, r25
     3f8:	89 2b       	or	r24, r25
     3fa:	89 f4       	brne	.+34     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
		if(b3Count < 60000) {
     3fc:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <b3Count.3831>
     400:	90 91 cb 20 	lds	r25, 0x20CB	; 0x8020cb <b3Count.3831+0x1>
     404:	80 36       	cpi	r24, 0x60	; 96
     406:	9a 4e       	sbci	r25, 0xEA	; 234
     408:	20 f5       	brcc	.+72     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
			b3Count++;
     40a:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <b3Count.3831>
     40e:	90 91 cb 20 	lds	r25, 0x20CB	; 0x8020cb <b3Count.3831+0x1>
     412:	01 96       	adiw	r24, 0x01	; 1
     414:	80 93 ca 20 	sts	0x20CA, r24	; 0x8020ca <b3Count.3831>
     418:	90 93 cb 20 	sts	0x20CB, r25	; 0x8020cb <b3Count.3831+0x1>
     41c:	1a c0       	rjmp	.+52     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
		}
	} else {
		if(b3Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     41e:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <b3Count.3831>
     422:	90 91 cb 20 	lds	r25, 0x20CB	; 0x8020cb <b3Count.3831+0x1>
     426:	0b 97       	sbiw	r24, 0x0b	; 11
     428:	68 f0       	brcs	.+26     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
			if(b3Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     42a:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <b3Count.3831>
     42e:	90 91 cb 20 	lds	r25, 0x20CB	; 0x8020cb <b3Count.3831+0x1>
     432:	c3 97       	sbiw	r24, 0x33	; 51
     434:	18 f0       	brcs	.+6      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
				//Button was pressed Long
				b3Status = LONG_PRESSED;
     436:	10 92 3d 31 	sts	0x313D, r1	; 0x80313d <b3Status>
     43a:	07 c0       	rjmp	.+14     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
				} else {
				//Button was pressed Short
				b3Status = SHORT_PRESSED;
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	80 93 3d 31 	sts	0x313D, r24	; 0x80313d <b3Status>
     442:	03 c0       	rjmp	.+6      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
			}
		} else {
			b3Status = NOT_PRESSED;
     444:	82 e0       	ldi	r24, 0x02	; 2
     446:	80 93 3d 31 	sts	0x313D, r24	; 0x80313d <b3Status>
		}
		b3Count = 0;
     44a:	10 92 ca 20 	sts	0x20CA, r1	; 0x8020ca <b3Count.3831>
     44e:	10 92 cb 20 	sts	0x20CB, r1	; 0x8020cb <b3Count.3831+0x1>
	}
	if(Button4_Value == 0) {
     452:	80 ea       	ldi	r24, 0xA0	; 160
     454:	96 e0       	ldi	r25, 0x06	; 6
     456:	fc 01       	movw	r30, r24
     458:	80 85       	ldd	r24, Z+8	; 0x08
     45a:	88 23       	and	r24, r24
     45c:	8c f0       	brlt	.+34     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
		if(b4Count < 60000) {
     45e:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <b4Count.3832>
     462:	90 91 cd 20 	lds	r25, 0x20CD	; 0x8020cd <b4Count.3832+0x1>
     466:	80 36       	cpi	r24, 0x60	; 96
     468:	9a 4e       	sbci	r25, 0xEA	; 234
     46a:	20 f5       	brcc	.+72     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
			b4Count++;
     46c:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <b4Count.3832>
     470:	90 91 cd 20 	lds	r25, 0x20CD	; 0x8020cd <b4Count.3832+0x1>
     474:	01 96       	adiw	r24, 0x01	; 1
     476:	80 93 cc 20 	sts	0x20CC, r24	; 0x8020cc <b4Count.3832>
     47a:	90 93 cd 20 	sts	0x20CD, r25	; 0x8020cd <b4Count.3832+0x1>
		} else {
			b4Status = NOT_PRESSED;
		}
		b4Count = 0;
	}
 }
     47e:	1a c0       	rjmp	.+52     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
	if(Button4_Value == 0) {
		if(b4Count < 60000) {
			b4Count++;
		}
	} else {
		if(b4Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     480:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <b4Count.3832>
     484:	90 91 cd 20 	lds	r25, 0x20CD	; 0x8020cd <b4Count.3832+0x1>
     488:	0b 97       	sbiw	r24, 0x0b	; 11
     48a:	68 f0       	brcs	.+26     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
			if(b4Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     48c:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <b4Count.3832>
     490:	90 91 cd 20 	lds	r25, 0x20CD	; 0x8020cd <b4Count.3832+0x1>
     494:	c3 97       	sbiw	r24, 0x33	; 51
     496:	18 f0       	brcs	.+6      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
				//Button was pressed Long
				b4Status = LONG_PRESSED;
     498:	10 92 3e 31 	sts	0x313E, r1	; 0x80313e <b4Status>
     49c:	07 c0       	rjmp	.+14     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
				} else {
				//Button was pressed Short
				b4Status = SHORT_PRESSED;
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	80 93 3e 31 	sts	0x313E, r24	; 0x80313e <b4Status>
     4a4:	03 c0       	rjmp	.+6      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
			}
		} else {
			b4Status = NOT_PRESSED;
     4a6:	82 e0       	ldi	r24, 0x02	; 2
     4a8:	80 93 3e 31 	sts	0x313E, r24	; 0x80313e <b4Status>
		}
		b4Count = 0;
     4ac:	10 92 cc 20 	sts	0x20CC, r1	; 0x8020cc <b4Count.3832>
     4b0:	10 92 cd 20 	sts	0x20CD, r1	; 0x8020cd <b4Count.3832+0x1>
	}
 }
     4b4:	00 00       	nop
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	08 95       	ret

000004bc <getButtonPress>:

 button_press_t getButtonPress(button_t button) {
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	1f 92       	push	r1
     4c2:	cd b7       	in	r28, 0x3d	; 61
     4c4:	de b7       	in	r29, 0x3e	; 62
     4c6:	89 83       	std	Y+1, r24	; 0x01
	switch(button) {
     4c8:	89 81       	ldd	r24, Y+1	; 0x01
     4ca:	88 2f       	mov	r24, r24
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	81 30       	cpi	r24, 0x01	; 1
     4d0:	91 05       	cpc	r25, r1
     4d2:	79 f0       	breq	.+30     	; 0x4f2 <getButtonPress+0x36>
     4d4:	82 30       	cpi	r24, 0x02	; 2
     4d6:	91 05       	cpc	r25, r1
     4d8:	1c f4       	brge	.+6      	; 0x4e0 <getButtonPress+0x24>
     4da:	89 2b       	or	r24, r25
     4dc:	39 f0       	breq	.+14     	; 0x4ec <getButtonPress+0x30>
     4de:	12 c0       	rjmp	.+36     	; 0x504 <getButtonPress+0x48>
     4e0:	82 30       	cpi	r24, 0x02	; 2
     4e2:	91 05       	cpc	r25, r1
     4e4:	49 f0       	breq	.+18     	; 0x4f8 <getButtonPress+0x3c>
     4e6:	03 97       	sbiw	r24, 0x03	; 3
     4e8:	51 f0       	breq	.+20     	; 0x4fe <getButtonPress+0x42>
     4ea:	0c c0       	rjmp	.+24     	; 0x504 <getButtonPress+0x48>
		case BUTTON1:
			return b1Status;
     4ec:	80 91 3b 31 	lds	r24, 0x313B	; 0x80313b <b1Status>
     4f0:	0a c0       	rjmp	.+20     	; 0x506 <getButtonPress+0x4a>
		break;
		case BUTTON2:
			return b2Status;
     4f2:	80 91 3c 31 	lds	r24, 0x313C	; 0x80313c <b2Status>
     4f6:	07 c0       	rjmp	.+14     	; 0x506 <getButtonPress+0x4a>
		break;
		case BUTTON3:
			return b3Status;
     4f8:	80 91 3d 31 	lds	r24, 0x313D	; 0x80313d <b3Status>
     4fc:	04 c0       	rjmp	.+8      	; 0x506 <getButtonPress+0x4a>
		break;
		case BUTTON4:
			return b4Status;
     4fe:	80 91 3e 31 	lds	r24, 0x313E	; 0x80313e <b4Status>
     502:	01 c0       	rjmp	.+2      	; 0x506 <getButtonPress+0x4a>
		break;
	}
	return NOT_PRESSED;
     504:	82 e0       	ldi	r24, 0x02	; 2
     506:	0f 90       	pop	r0
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	08 95       	ret

0000050e <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
     50e:	0f 93       	push	r16
     510:	cf 93       	push	r28
     512:	df 93       	push	r29
     514:	00 d0       	rcall	.+0      	; 0x516 <CCPWrite+0x8>
     516:	00 d0       	rcall	.+0      	; 0x518 <CCPWrite+0xa>
     518:	cd b7       	in	r28, 0x3d	; 61
     51a:	de b7       	in	r29, 0x3e	; 62
     51c:	8c 83       	std	Y+4, r24	; 0x04
     51e:	9d 83       	std	Y+5, r25	; 0x05
     520:	6e 83       	std	Y+6, r22	; 0x06

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
     522:	8f e3       	ldi	r24, 0x3F	; 63
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	fc 01       	movw	r30, r24
     528:	80 81       	ld	r24, Z
     52a:	8b 83       	std	Y+3, r24	; 0x03
     52c:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
     52e:	8c 81       	ldd	r24, Y+4	; 0x04
     530:	9d 81       	ldd	r25, Y+5	; 0x05
     532:	89 83       	std	Y+1, r24	; 0x01
     534:	9a 83       	std	Y+2, r25	; 0x02
#ifdef RAMPZ
	RAMPZ = 0;
     536:	8b e3       	ldi	r24, 0x3B	; 59
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	fc 01       	movw	r30, r24
     53c:	10 82       	st	Z, r1
#endif
	asm volatile(
     53e:	89 81       	ldd	r24, Y+1	; 0x01
     540:	9a 81       	ldd	r25, Y+2	; 0x02
     542:	2e 81       	ldd	r18, Y+6	; 0x06
     544:	fc 01       	movw	r30, r24
     546:	08 ed       	ldi	r16, 0xD8	; 216
     548:	04 bf       	out	0x34, r16	; 52
     54a:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
     54c:	8f e3       	ldi	r24, 0x3F	; 63
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	2b 81       	ldd	r18, Y+3	; 0x03
     552:	fc 01       	movw	r30, r24
     554:	20 83       	st	Z, r18
#endif
}
     556:	00 00       	nop
     558:	26 96       	adiw	r28, 0x06	; 6
     55a:	cd bf       	out	0x3d, r28	; 61
     55c:	de bf       	out	0x3e, r29	; 62
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	0f 91       	pop	r16
     564:	08 95       	ret

00000566 <CLKSYS_XOSC_Config>:
 *                             external clock) and startup times.
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	00 d0       	rcall	.+0      	; 0x56c <CLKSYS_XOSC_Config+0x6>
     56c:	cd b7       	in	r28, 0x3d	; 61
     56e:	de b7       	in	r29, 0x3e	; 62
     570:	89 83       	std	Y+1, r24	; 0x01
     572:	6a 83       	std	Y+2, r22	; 0x02
     574:	4b 83       	std	Y+3, r20	; 0x03
	OSC.XOSCCTRL = (uint8_t) freqRange |
     576:	80 e5       	ldi	r24, 0x50	; 80
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	2a 81       	ldd	r18, Y+2	; 0x02
     57c:	22 23       	and	r18, r18
     57e:	11 f0       	breq	.+4      	; 0x584 <CLKSYS_XOSC_Config+0x1e>
     580:	20 e2       	ldi	r18, 0x20	; 32
     582:	01 c0       	rjmp	.+2      	; 0x586 <CLKSYS_XOSC_Config+0x20>
     584:	20 e0       	ldi	r18, 0x00	; 0
     586:	39 81       	ldd	r19, Y+1	; 0x01
     588:	32 2b       	or	r19, r18
     58a:	2b 81       	ldd	r18, Y+3	; 0x03
     58c:	23 2b       	or	r18, r19
     58e:	fc 01       	movw	r30, r24
     590:	22 83       	std	Z+2, r18	; 0x02
	               ( lowPower32kHz ? OSC_X32KLPM_bm : 0 ) |
	               xoscModeSelection;
}
     592:	00 00       	nop
     594:	23 96       	adiw	r28, 0x03	; 3
     596:	cd bf       	out	0x3d, r28	; 61
     598:	de bf       	out	0x3e, r29	; 62
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	08 95       	ret

000005a0 <CLKSYS_PLL_Config>:
 *                      must be above 0.4MHz.
 *  \param  factor      PLL multiplication factor, must be
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	1f 92       	push	r1
     5a6:	1f 92       	push	r1
     5a8:	cd b7       	in	r28, 0x3d	; 61
     5aa:	de b7       	in	r29, 0x3e	; 62
     5ac:	89 83       	std	Y+1, r24	; 0x01
     5ae:	6a 83       	std	Y+2, r22	; 0x02
	factor &= OSC_PLLFAC_gm;
     5b0:	8a 81       	ldd	r24, Y+2	; 0x02
     5b2:	8f 71       	andi	r24, 0x1F	; 31
     5b4:	8a 83       	std	Y+2, r24	; 0x02
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
     5b6:	80 e5       	ldi	r24, 0x50	; 80
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	39 81       	ldd	r19, Y+1	; 0x01
     5bc:	2a 81       	ldd	r18, Y+2	; 0x02
     5be:	23 2b       	or	r18, r19
     5c0:	fc 01       	movw	r30, r24
     5c2:	25 83       	std	Z+5, r18	; 0x05
}
     5c4:	00 00       	nop
     5c6:	0f 90       	pop	r0
     5c8:	0f 90       	pop	r0
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	08 95       	ret

000005d0 <CLKSYS_Disable>:
 *                 OSC_XOSCEN_bm, OSC_PLLEN_bm.
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	1f 92       	push	r1
     5d6:	1f 92       	push	r1
     5d8:	cd b7       	in	r28, 0x3d	; 61
     5da:	de b7       	in	r29, 0x3e	; 62
     5dc:	8a 83       	std	Y+2, r24	; 0x02
	OSC.CTRL &= ~oscSel;
     5de:	80 e5       	ldi	r24, 0x50	; 80
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	20 e5       	ldi	r18, 0x50	; 80
     5e4:	30 e0       	ldi	r19, 0x00	; 0
     5e6:	f9 01       	movw	r30, r18
     5e8:	20 81       	ld	r18, Z
     5ea:	32 2f       	mov	r19, r18
     5ec:	2a 81       	ldd	r18, Y+2	; 0x02
     5ee:	20 95       	com	r18
     5f0:	23 23       	and	r18, r19
     5f2:	fc 01       	movw	r30, r24
     5f4:	20 83       	st	Z, r18
	uint8_t clkEnabled = OSC.CTRL & oscSel;
     5f6:	80 e5       	ldi	r24, 0x50	; 80
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	fc 01       	movw	r30, r24
     5fc:	90 81       	ld	r25, Z
     5fe:	8a 81       	ldd	r24, Y+2	; 0x02
     600:	89 23       	and	r24, r25
     602:	89 83       	std	Y+1, r24	; 0x01
	return clkEnabled;
     604:	89 81       	ldd	r24, Y+1	; 0x01
}
     606:	0f 90       	pop	r0
     608:	0f 90       	pop	r0
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	08 95       	ret

00000610 <CLKSYS_Prescalers_Config>:
 *  \param  PSBCfactor  Prescaler B and C division factor, in the combination
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
     614:	00 d0       	rcall	.+0      	; 0x616 <CLKSYS_Prescalers_Config+0x6>
     616:	cd b7       	in	r28, 0x3d	; 61
     618:	de b7       	in	r29, 0x3e	; 62
     61a:	8a 83       	std	Y+2, r24	; 0x02
     61c:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
     61e:	9a 81       	ldd	r25, Y+2	; 0x02
     620:	8b 81       	ldd	r24, Y+3	; 0x03
     622:	89 2b       	or	r24, r25
     624:	89 83       	std	Y+1, r24	; 0x01
	CCPWrite( &CLK.PSCTRL, PSconfig );
     626:	69 81       	ldd	r22, Y+1	; 0x01
     628:	81 e4       	ldi	r24, 0x41	; 65
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	0e 94 87 02 	call	0x50e	; 0x50e <CCPWrite>
}
     630:	00 00       	nop
     632:	23 96       	adiw	r28, 0x03	; 3
     634:	cd bf       	out	0x3d, r28	; 61
     636:	de bf       	out	0x3e, r29	; 62
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	08 95       	ret

0000063e <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     63e:	cf 93       	push	r28
     640:	df 93       	push	r29
     642:	1f 92       	push	r1
     644:	1f 92       	push	r1
     646:	cd b7       	in	r28, 0x3d	; 61
     648:	de b7       	in	r29, 0x3e	; 62
     64a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     64c:	80 e4       	ldi	r24, 0x40	; 64
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	fc 01       	movw	r30, r24
     652:	80 81       	ld	r24, Z
     654:	98 2f       	mov	r25, r24
     656:	98 7f       	andi	r25, 0xF8	; 248
     658:	8a 81       	ldd	r24, Y+2	; 0x02
     65a:	89 2b       	or	r24, r25
     65c:	89 83       	std	Y+1, r24	; 0x01
	CCPWrite( &CLK.CTRL, clkCtrl );
     65e:	69 81       	ldd	r22, Y+1	; 0x01
     660:	80 e4       	ldi	r24, 0x40	; 64
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	0e 94 87 02 	call	0x50e	; 0x50e <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
     668:	80 e4       	ldi	r24, 0x40	; 64
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	fc 01       	movw	r30, r24
     66e:	90 81       	ld	r25, Z
     670:	8a 81       	ldd	r24, Y+2	; 0x02
     672:	89 23       	and	r24, r25
     674:	89 83       	std	Y+1, r24	; 0x01
	return clkCtrl;
     676:	89 81       	ldd	r24, Y+1	; 0x01
}
     678:	0f 90       	pop	r0
     67a:	0f 90       	pop	r0
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	08 95       	ret

00000682 <TC0_ConfigClockSource>:
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
}
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	00 d0       	rcall	.+0      	; 0x688 <TC0_ConfigClockSource+0x6>
     688:	cd b7       	in	r28, 0x3d	; 61
     68a:	de b7       	in	r29, 0x3e	; 62
     68c:	89 83       	std	Y+1, r24	; 0x01
     68e:	9a 83       	std	Y+2, r25	; 0x02
     690:	6b 83       	std	Y+3, r22	; 0x03
     692:	89 81       	ldd	r24, Y+1	; 0x01
     694:	9a 81       	ldd	r25, Y+2	; 0x02
     696:	fc 01       	movw	r30, r24
     698:	80 81       	ld	r24, Z
     69a:	98 2f       	mov	r25, r24
     69c:	90 7f       	andi	r25, 0xF0	; 240
     69e:	8b 81       	ldd	r24, Y+3	; 0x03
     6a0:	89 2b       	or	r24, r25
     6a2:	28 2f       	mov	r18, r24
     6a4:	89 81       	ldd	r24, Y+1	; 0x01
     6a6:	9a 81       	ldd	r25, Y+2	; 0x02
     6a8:	fc 01       	movw	r30, r24
     6aa:	20 83       	st	Z, r18
     6ac:	00 00       	nop
     6ae:	23 96       	adiw	r28, 0x03	; 3
     6b0:	cd bf       	out	0x3d, r28	; 61
     6b2:	de bf       	out	0x3e, r29	; 62
     6b4:	df 91       	pop	r29
     6b6:	cf 91       	pop	r28
     6b8:	08 95       	ret

000006ba <TC0_ConfigWGM>:
     6ba:	cf 93       	push	r28
     6bc:	df 93       	push	r29
     6be:	00 d0       	rcall	.+0      	; 0x6c0 <TC0_ConfigWGM+0x6>
     6c0:	cd b7       	in	r28, 0x3d	; 61
     6c2:	de b7       	in	r29, 0x3e	; 62
     6c4:	89 83       	std	Y+1, r24	; 0x01
     6c6:	9a 83       	std	Y+2, r25	; 0x02
     6c8:	6b 83       	std	Y+3, r22	; 0x03
     6ca:	89 81       	ldd	r24, Y+1	; 0x01
     6cc:	9a 81       	ldd	r25, Y+2	; 0x02
     6ce:	fc 01       	movw	r30, r24
     6d0:	81 81       	ldd	r24, Z+1	; 0x01
     6d2:	98 2f       	mov	r25, r24
     6d4:	98 7f       	andi	r25, 0xF8	; 248
     6d6:	8b 81       	ldd	r24, Y+3	; 0x03
     6d8:	89 2b       	or	r24, r25
     6da:	28 2f       	mov	r18, r24
     6dc:	89 81       	ldd	r24, Y+1	; 0x01
     6de:	9a 81       	ldd	r25, Y+2	; 0x02
     6e0:	fc 01       	movw	r30, r24
     6e2:	21 83       	std	Z+1, r18	; 0x01
     6e4:	00 00       	nop
     6e6:	23 96       	adiw	r28, 0x03	; 3
     6e8:	cd bf       	out	0x3d, r28	; 61
     6ea:	de bf       	out	0x3e, r29	; 62
     6ec:	df 91       	pop	r29
     6ee:	cf 91       	pop	r28
     6f0:	08 95       	ret

000006f2 <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
     6f2:	cf 93       	push	r28
     6f4:	df 93       	push	r29
     6f6:	00 d0       	rcall	.+0      	; 0x6f8 <TC0_SetOverflowIntLevel+0x6>
     6f8:	cd b7       	in	r28, 0x3d	; 61
     6fa:	de b7       	in	r29, 0x3e	; 62
     6fc:	89 83       	std	Y+1, r24	; 0x01
     6fe:	9a 83       	std	Y+2, r25	; 0x02
     700:	6b 83       	std	Y+3, r22	; 0x03
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
     702:	89 81       	ldd	r24, Y+1	; 0x01
     704:	9a 81       	ldd	r25, Y+2	; 0x02
     706:	fc 01       	movw	r30, r24
     708:	86 81       	ldd	r24, Z+6	; 0x06
     70a:	98 2f       	mov	r25, r24
     70c:	9c 7f       	andi	r25, 0xFC	; 252
     70e:	8b 81       	ldd	r24, Y+3	; 0x03
     710:	89 2b       	or	r24, r25
     712:	28 2f       	mov	r18, r24
     714:	89 81       	ldd	r24, Y+1	; 0x01
     716:	9a 81       	ldd	r25, Y+2	; 0x02
     718:	fc 01       	movw	r30, r24
     71a:	26 83       	std	Z+6, r18	; 0x06
}
     71c:	00 00       	nop
     71e:	23 96       	adiw	r28, 0x03	; 3
     720:	cd bf       	out	0x3d, r28	; 61
     722:	de bf       	out	0x3e, r29	; 62
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	08 95       	ret

0000072a <vApplicationStackOverflowHook>:
 {
	 (void)errCode;

	 uint8_t a=42; (void)a;

 }
     72a:	cf 93       	push	r28
     72c:	df 93       	push	r29
     72e:	00 d0       	rcall	.+0      	; 0x730 <vApplicationStackOverflowHook+0x6>
     730:	1f 92       	push	r1
     732:	cd b7       	in	r28, 0x3d	; 61
     734:	de b7       	in	r29, 0x3e	; 62
     736:	89 83       	std	Y+1, r24	; 0x01
     738:	9a 83       	std	Y+2, r25	; 0x02
     73a:	6b 83       	std	Y+3, r22	; 0x03
     73c:	7c 83       	std	Y+4, r23	; 0x04
     73e:	8b e2       	ldi	r24, 0x2B	; 43
     740:	0e 94 a9 03 	call	0x752	; 0x752 <error>
     744:	00 00       	nop
     746:	24 96       	adiw	r28, 0x04	; 4
     748:	cd bf       	out	0x3d, r28	; 61
     74a:	de bf       	out	0x3e, r29	; 62
     74c:	df 91       	pop	r29
     74e:	cf 91       	pop	r28
     750:	08 95       	ret

00000752 <error>:

 //----------------------------------------------
 //
 void error(uint8_t errCode)
 {
     752:	cf 93       	push	r28
     754:	df 93       	push	r29
     756:	1f 92       	push	r1
     758:	1f 92       	push	r1
     75a:	cd b7       	in	r28, 0x3d	; 61
     75c:	de b7       	in	r29, 0x3e	; 62
     75e:	8a 83       	std	Y+2, r24	; 0x02
	 uint8_t a;

	 if(errCode==ERR_STACK_OVERFLOW)
     760:	8a 81       	ldd	r24, Y+2	; 0x02
     762:	8b 32       	cpi	r24, 0x2B	; 43
     764:	19 f4       	brne	.+6      	; 0x76c <error+0x1a>
	 a = 1;
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	89 83       	std	Y+1, r24	; 0x01
     76a:	0e c0       	rjmp	.+28     	; 0x788 <error+0x36>
	 else if(errCode==ERR_QUEUE_SEND_FAILED)
     76c:	8a 81       	ldd	r24, Y+2	; 0x02
     76e:	8c 32       	cpi	r24, 0x2C	; 44
     770:	19 f4       	brne	.+6      	; 0x778 <error+0x26>
	 a = 2;
     772:	82 e0       	ldi	r24, 0x02	; 2
     774:	89 83       	std	Y+1, r24	; 0x01
     776:	08 c0       	rjmp	.+16     	; 0x788 <error+0x36>
	 else if(errCode==ERR_BYTES_SHOULD_BE_AVAILABLE)
     778:	8a 81       	ldd	r24, Y+2	; 0x02
     77a:	8f 32       	cpi	r24, 0x2F	; 47
     77c:	19 f4       	brne	.+6      	; 0x784 <error+0x32>
	 a = 3;
     77e:	83 e0       	ldi	r24, 0x03	; 3
     780:	89 83       	std	Y+1, r24	; 0x01
     782:	02 c0       	rjmp	.+4      	; 0x788 <error+0x36>
	 else
	 a = 4;
     784:	84 e0       	ldi	r24, 0x04	; 4
     786:	89 83       	std	Y+1, r24	; 0x01
	 // TODO from here:
	 //
	 // - log the occurance of any error in flash mem (inc counter)
	 // - print a message

	 software_reset();
     788:	0e 94 cc 03 	call	0x798	; 0x798 <software_reset>
 }
     78c:	00 00       	nop
     78e:	0f 90       	pop	r0
     790:	0f 90       	pop	r0
     792:	df 91       	pop	r29
     794:	cf 91       	pop	r28
     796:	08 95       	ret

00000798 <software_reset>:

 //----------------------------------------------
 //
 void software_reset(void)
 {	 
     798:	cf 93       	push	r28
     79a:	df 93       	push	r29
     79c:	cd b7       	in	r28, 0x3d	; 61
     79e:	de b7       	in	r29, 0x3e	; 62
	 asm("nop");
     7a0:	00 00       	nop
	 CPU_CCP  = CCP_IOREG_gc;
     7a2:	84 e3       	ldi	r24, 0x34	; 52
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	28 ed       	ldi	r18, 0xD8	; 216
     7a8:	fc 01       	movw	r30, r24
     7aa:	20 83       	st	Z, r18
	 RST.CTRL = RST_SWRST_bm ;	 
     7ac:	88 e7       	ldi	r24, 0x78	; 120
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	21 e0       	ldi	r18, 0x01	; 1
     7b2:	fc 01       	movw	r30, r24
     7b4:	21 83       	std	Z+1, r18	; 0x01
     7b6:	00 00       	nop
     7b8:	df 91       	pop	r29
     7ba:	cf 91       	pop	r28
     7bc:	08 95       	ret

000007be <xEventGroupCreate>:
/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	1f 92       	push	r1
     7c4:	1f 92       	push	r1
     7c6:	cd b7       	in	r28, 0x3d	; 61
     7c8:	de b7       	in	r29, 0x3e	; 62
     7ca:	80 e1       	ldi	r24, 0x10	; 16
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	0e 94 1c 07 	call	0xe38	; 0xe38 <pvPortMalloc>
     7d2:	89 83       	std	Y+1, r24	; 0x01
     7d4:	9a 83       	std	Y+2, r25	; 0x02
     7d6:	89 81       	ldd	r24, Y+1	; 0x01
     7d8:	9a 81       	ldd	r25, Y+2	; 0x02
     7da:	89 2b       	or	r24, r25
     7dc:	61 f0       	breq	.+24     	; 0x7f6 <xEventGroupCreate+0x38>
     7de:	89 81       	ldd	r24, Y+1	; 0x01
     7e0:	9a 81       	ldd	r25, Y+2	; 0x02
     7e2:	fc 01       	movw	r30, r24
     7e4:	10 82       	st	Z, r1
     7e6:	11 82       	std	Z+1, r1	; 0x01
     7e8:	12 82       	std	Z+2, r1	; 0x02
     7ea:	13 82       	std	Z+3, r1	; 0x03
     7ec:	89 81       	ldd	r24, Y+1	; 0x01
     7ee:	9a 81       	ldd	r25, Y+2	; 0x02
     7f0:	04 96       	adiw	r24, 0x04	; 4
     7f2:	0e 94 6e 07 	call	0xedc	; 0xedc <vListInitialise>
     7f6:	89 81       	ldd	r24, Y+1	; 0x01
     7f8:	9a 81       	ldd	r25, Y+2	; 0x02
     7fa:	0f 90       	pop	r0
     7fc:	0f 90       	pop	r0
     7fe:	df 91       	pop	r29
     800:	cf 91       	pop	r28
     802:	08 95       	ret

00000804 <xEventGroupWaitBits>:
     804:	cf 92       	push	r12
     806:	df 92       	push	r13
     808:	ef 92       	push	r14
     80a:	ff 92       	push	r15
     80c:	0f 93       	push	r16
     80e:	1f 93       	push	r17
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
     814:	cd b7       	in	r28, 0x3d	; 61
     816:	de b7       	in	r29, 0x3e	; 62
     818:	6d 97       	sbiw	r28, 0x1d	; 29
     81a:	cd bf       	out	0x3d, r28	; 61
     81c:	de bf       	out	0x3e, r29	; 62
     81e:	8a 8b       	std	Y+18, r24	; 0x12
     820:	9b 8b       	std	Y+19, r25	; 0x13
     822:	4c 8b       	std	Y+20, r20	; 0x14
     824:	5d 8b       	std	Y+21, r21	; 0x15
     826:	6e 8b       	std	Y+22, r22	; 0x16
     828:	7f 8b       	std	Y+23, r23	; 0x17
     82a:	28 8f       	std	Y+24, r18	; 0x18
     82c:	09 8f       	std	Y+25, r16	; 0x19
     82e:	ca 8e       	std	Y+26, r12	; 0x1a
     830:	db 8e       	std	Y+27, r13	; 0x1b
     832:	ec 8e       	std	Y+28, r14	; 0x1c
     834:	fd 8e       	std	Y+29, r15	; 0x1d
     836:	8a 89       	ldd	r24, Y+18	; 0x12
     838:	9b 89       	ldd	r25, Y+19	; 0x13
     83a:	89 87       	std	Y+9, r24	; 0x09
     83c:	9a 87       	std	Y+10, r25	; 0x0a
     83e:	1d 82       	std	Y+5, r1	; 0x05
     840:	1e 82       	std	Y+6, r1	; 0x06
     842:	1f 82       	std	Y+7, r1	; 0x07
     844:	18 86       	std	Y+8, r1	; 0x08
     846:	1b 86       	std	Y+11, r1	; 0x0b
     848:	0e 94 71 14 	call	0x28e2	; 0x28e2 <vTaskSuspendAll>
     84c:	89 85       	ldd	r24, Y+9	; 0x09
     84e:	9a 85       	ldd	r25, Y+10	; 0x0a
     850:	fc 01       	movw	r30, r24
     852:	80 81       	ld	r24, Z
     854:	91 81       	ldd	r25, Z+1	; 0x01
     856:	a2 81       	ldd	r26, Z+2	; 0x02
     858:	b3 81       	ldd	r27, Z+3	; 0x03
     85a:	8c 87       	std	Y+12, r24	; 0x0c
     85c:	9d 87       	std	Y+13, r25	; 0x0d
     85e:	ae 87       	std	Y+14, r26	; 0x0e
     860:	bf 87       	std	Y+15, r27	; 0x0f
     862:	2c 89       	ldd	r18, Y+20	; 0x14
     864:	3d 89       	ldd	r19, Y+21	; 0x15
     866:	4e 89       	ldd	r20, Y+22	; 0x16
     868:	5f 89       	ldd	r21, Y+23	; 0x17
     86a:	8c 85       	ldd	r24, Y+12	; 0x0c
     86c:	9d 85       	ldd	r25, Y+13	; 0x0d
     86e:	ae 85       	ldd	r26, Y+14	; 0x0e
     870:	bf 85       	ldd	r27, Y+15	; 0x0f
     872:	09 8d       	ldd	r16, Y+25	; 0x19
     874:	bc 01       	movw	r22, r24
     876:	cd 01       	movw	r24, r26
     878:	0e 94 ab 06 	call	0xd56	; 0xd56 <prvTestWaitCondition>
     87c:	88 8b       	std	Y+16, r24	; 0x10
     87e:	88 89       	ldd	r24, Y+16	; 0x10
     880:	88 23       	and	r24, r24
     882:	59 f1       	breq	.+86     	; 0x8da <xEventGroupWaitBits+0xd6>
     884:	8c 85       	ldd	r24, Y+12	; 0x0c
     886:	9d 85       	ldd	r25, Y+13	; 0x0d
     888:	ae 85       	ldd	r26, Y+14	; 0x0e
     88a:	bf 85       	ldd	r27, Y+15	; 0x0f
     88c:	89 83       	std	Y+1, r24	; 0x01
     88e:	9a 83       	std	Y+2, r25	; 0x02
     890:	ab 83       	std	Y+3, r26	; 0x03
     892:	bc 83       	std	Y+4, r27	; 0x04
     894:	1a 8e       	std	Y+26, r1	; 0x1a
     896:	1b 8e       	std	Y+27, r1	; 0x1b
     898:	1c 8e       	std	Y+28, r1	; 0x1c
     89a:	1d 8e       	std	Y+29, r1	; 0x1d
     89c:	88 8d       	ldd	r24, Y+24	; 0x18
     89e:	88 23       	and	r24, r24
     8a0:	09 f4       	brne	.+2      	; 0x8a4 <xEventGroupWaitBits+0xa0>
     8a2:	65 c0       	rjmp	.+202    	; 0x96e <xEventGroupWaitBits+0x16a>
     8a4:	89 85       	ldd	r24, Y+9	; 0x09
     8a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     8a8:	fc 01       	movw	r30, r24
     8aa:	20 81       	ld	r18, Z
     8ac:	31 81       	ldd	r19, Z+1	; 0x01
     8ae:	42 81       	ldd	r20, Z+2	; 0x02
     8b0:	53 81       	ldd	r21, Z+3	; 0x03
     8b2:	8c 89       	ldd	r24, Y+20	; 0x14
     8b4:	9d 89       	ldd	r25, Y+21	; 0x15
     8b6:	ae 89       	ldd	r26, Y+22	; 0x16
     8b8:	bf 89       	ldd	r27, Y+23	; 0x17
     8ba:	80 95       	com	r24
     8bc:	90 95       	com	r25
     8be:	a0 95       	com	r26
     8c0:	b0 95       	com	r27
     8c2:	82 23       	and	r24, r18
     8c4:	93 23       	and	r25, r19
     8c6:	a4 23       	and	r26, r20
     8c8:	b5 23       	and	r27, r21
     8ca:	29 85       	ldd	r18, Y+9	; 0x09
     8cc:	3a 85       	ldd	r19, Y+10	; 0x0a
     8ce:	f9 01       	movw	r30, r18
     8d0:	80 83       	st	Z, r24
     8d2:	91 83       	std	Z+1, r25	; 0x01
     8d4:	a2 83       	std	Z+2, r26	; 0x02
     8d6:	b3 83       	std	Z+3, r27	; 0x03
     8d8:	4a c0       	rjmp	.+148    	; 0x96e <xEventGroupWaitBits+0x16a>
     8da:	8a 8d       	ldd	r24, Y+26	; 0x1a
     8dc:	9b 8d       	ldd	r25, Y+27	; 0x1b
     8de:	ac 8d       	ldd	r26, Y+28	; 0x1c
     8e0:	bd 8d       	ldd	r27, Y+29	; 0x1d
     8e2:	89 2b       	or	r24, r25
     8e4:	8a 2b       	or	r24, r26
     8e6:	8b 2b       	or	r24, r27
     8e8:	59 f4       	brne	.+22     	; 0x900 <xEventGroupWaitBits+0xfc>
     8ea:	8c 85       	ldd	r24, Y+12	; 0x0c
     8ec:	9d 85       	ldd	r25, Y+13	; 0x0d
     8ee:	ae 85       	ldd	r26, Y+14	; 0x0e
     8f0:	bf 85       	ldd	r27, Y+15	; 0x0f
     8f2:	89 83       	std	Y+1, r24	; 0x01
     8f4:	9a 83       	std	Y+2, r25	; 0x02
     8f6:	ab 83       	std	Y+3, r26	; 0x03
     8f8:	bc 83       	std	Y+4, r27	; 0x04
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	8b 87       	std	Y+11, r24	; 0x0b
     8fe:	37 c0       	rjmp	.+110    	; 0x96e <xEventGroupWaitBits+0x16a>
     900:	88 8d       	ldd	r24, Y+24	; 0x18
     902:	88 23       	and	r24, r24
     904:	49 f0       	breq	.+18     	; 0x918 <xEventGroupWaitBits+0x114>
     906:	8d 81       	ldd	r24, Y+5	; 0x05
     908:	9e 81       	ldd	r25, Y+6	; 0x06
     90a:	af 81       	ldd	r26, Y+7	; 0x07
     90c:	b8 85       	ldd	r27, Y+8	; 0x08
     90e:	b1 60       	ori	r27, 0x01	; 1
     910:	8d 83       	std	Y+5, r24	; 0x05
     912:	9e 83       	std	Y+6, r25	; 0x06
     914:	af 83       	std	Y+7, r26	; 0x07
     916:	b8 87       	std	Y+8, r27	; 0x08
     918:	89 8d       	ldd	r24, Y+25	; 0x19
     91a:	88 23       	and	r24, r24
     91c:	49 f0       	breq	.+18     	; 0x930 <xEventGroupWaitBits+0x12c>
     91e:	8d 81       	ldd	r24, Y+5	; 0x05
     920:	9e 81       	ldd	r25, Y+6	; 0x06
     922:	af 81       	ldd	r26, Y+7	; 0x07
     924:	b8 85       	ldd	r27, Y+8	; 0x08
     926:	b4 60       	ori	r27, 0x04	; 4
     928:	8d 83       	std	Y+5, r24	; 0x05
     92a:	9e 83       	std	Y+6, r25	; 0x06
     92c:	af 83       	std	Y+7, r26	; 0x07
     92e:	b8 87       	std	Y+8, r27	; 0x08
     930:	2c 89       	ldd	r18, Y+20	; 0x14
     932:	3d 89       	ldd	r19, Y+21	; 0x15
     934:	4e 89       	ldd	r20, Y+22	; 0x16
     936:	5f 89       	ldd	r21, Y+23	; 0x17
     938:	8d 81       	ldd	r24, Y+5	; 0x05
     93a:	9e 81       	ldd	r25, Y+6	; 0x06
     93c:	af 81       	ldd	r26, Y+7	; 0x07
     93e:	b8 85       	ldd	r27, Y+8	; 0x08
     940:	82 2b       	or	r24, r18
     942:	93 2b       	or	r25, r19
     944:	a4 2b       	or	r26, r20
     946:	b5 2b       	or	r27, r21
     948:	29 85       	ldd	r18, Y+9	; 0x09
     94a:	3a 85       	ldd	r19, Y+10	; 0x0a
     94c:	f9 01       	movw	r30, r18
     94e:	34 96       	adiw	r30, 0x04	; 4
     950:	2a 8d       	ldd	r18, Y+26	; 0x1a
     952:	3b 8d       	ldd	r19, Y+27	; 0x1b
     954:	4c 8d       	ldd	r20, Y+28	; 0x1c
     956:	5d 8d       	ldd	r21, Y+29	; 0x1d
     958:	89 01       	movw	r16, r18
     95a:	9a 01       	movw	r18, r20
     95c:	ac 01       	movw	r20, r24
     95e:	bd 01       	movw	r22, r26
     960:	cf 01       	movw	r24, r30
     962:	0e 94 44 17 	call	0x2e88	; 0x2e88 <vTaskPlaceOnUnorderedEventList>
     966:	19 82       	std	Y+1, r1	; 0x01
     968:	1a 82       	std	Y+2, r1	; 0x02
     96a:	1b 82       	std	Y+3, r1	; 0x03
     96c:	1c 82       	std	Y+4, r1	; 0x04
     96e:	0e 94 7e 14 	call	0x28fc	; 0x28fc <xTaskResumeAll>
     972:	89 8b       	std	Y+17, r24	; 0x11
     974:	8a 8d       	ldd	r24, Y+26	; 0x1a
     976:	9b 8d       	ldd	r25, Y+27	; 0x1b
     978:	ac 8d       	ldd	r26, Y+28	; 0x1c
     97a:	bd 8d       	ldd	r27, Y+29	; 0x1d
     97c:	89 2b       	or	r24, r25
     97e:	8a 2b       	or	r24, r26
     980:	8b 2b       	or	r24, r27
     982:	09 f4       	brne	.+2      	; 0x986 <xEventGroupWaitBits+0x182>
     984:	65 c0       	rjmp	.+202    	; 0xa50 <xEventGroupWaitBits+0x24c>
     986:	89 89       	ldd	r24, Y+17	; 0x11
     988:	88 23       	and	r24, r24
     98a:	11 f4       	brne	.+4      	; 0x990 <xEventGroupWaitBits+0x18c>
     98c:	0e 94 05 0b 	call	0x160a	; 0x160a <vPortYield>
     990:	0e 94 02 1a 	call	0x3404	; 0x3404 <uxTaskResetEventItemValue>
     994:	dc 01       	movw	r26, r24
     996:	cb 01       	movw	r24, r22
     998:	89 83       	std	Y+1, r24	; 0x01
     99a:	9a 83       	std	Y+2, r25	; 0x02
     99c:	ab 83       	std	Y+3, r26	; 0x03
     99e:	bc 83       	std	Y+4, r27	; 0x04
     9a0:	89 81       	ldd	r24, Y+1	; 0x01
     9a2:	9a 81       	ldd	r25, Y+2	; 0x02
     9a4:	ab 81       	ldd	r26, Y+3	; 0x03
     9a6:	bc 81       	ldd	r27, Y+4	; 0x04
     9a8:	88 27       	eor	r24, r24
     9aa:	99 27       	eor	r25, r25
     9ac:	aa 27       	eor	r26, r26
     9ae:	b2 70       	andi	r27, 0x02	; 2
     9b0:	89 2b       	or	r24, r25
     9b2:	8a 2b       	or	r24, r26
     9b4:	8b 2b       	or	r24, r27
     9b6:	09 f0       	breq	.+2      	; 0x9ba <xEventGroupWaitBits+0x1b6>
     9b8:	42 c0       	rjmp	.+132    	; 0xa3e <xEventGroupWaitBits+0x23a>
     9ba:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     9be:	ff 93       	push	r31
     9c0:	f8 7f       	andi	r31, 0xF8	; 248
     9c2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     9c6:	89 85       	ldd	r24, Y+9	; 0x09
     9c8:	9a 85       	ldd	r25, Y+10	; 0x0a
     9ca:	fc 01       	movw	r30, r24
     9cc:	80 81       	ld	r24, Z
     9ce:	91 81       	ldd	r25, Z+1	; 0x01
     9d0:	a2 81       	ldd	r26, Z+2	; 0x02
     9d2:	b3 81       	ldd	r27, Z+3	; 0x03
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	9a 83       	std	Y+2, r25	; 0x02
     9d8:	ab 83       	std	Y+3, r26	; 0x03
     9da:	bc 83       	std	Y+4, r27	; 0x04
     9dc:	2c 89       	ldd	r18, Y+20	; 0x14
     9de:	3d 89       	ldd	r19, Y+21	; 0x15
     9e0:	4e 89       	ldd	r20, Y+22	; 0x16
     9e2:	5f 89       	ldd	r21, Y+23	; 0x17
     9e4:	89 81       	ldd	r24, Y+1	; 0x01
     9e6:	9a 81       	ldd	r25, Y+2	; 0x02
     9e8:	ab 81       	ldd	r26, Y+3	; 0x03
     9ea:	bc 81       	ldd	r27, Y+4	; 0x04
     9ec:	09 8d       	ldd	r16, Y+25	; 0x19
     9ee:	bc 01       	movw	r22, r24
     9f0:	cd 01       	movw	r24, r26
     9f2:	0e 94 ab 06 	call	0xd56	; 0xd56 <prvTestWaitCondition>
     9f6:	88 23       	and	r24, r24
     9f8:	e9 f0       	breq	.+58     	; 0xa34 <xEventGroupWaitBits+0x230>
     9fa:	88 8d       	ldd	r24, Y+24	; 0x18
     9fc:	88 23       	and	r24, r24
     9fe:	d1 f0       	breq	.+52     	; 0xa34 <xEventGroupWaitBits+0x230>
     a00:	89 85       	ldd	r24, Y+9	; 0x09
     a02:	9a 85       	ldd	r25, Y+10	; 0x0a
     a04:	fc 01       	movw	r30, r24
     a06:	20 81       	ld	r18, Z
     a08:	31 81       	ldd	r19, Z+1	; 0x01
     a0a:	42 81       	ldd	r20, Z+2	; 0x02
     a0c:	53 81       	ldd	r21, Z+3	; 0x03
     a0e:	8c 89       	ldd	r24, Y+20	; 0x14
     a10:	9d 89       	ldd	r25, Y+21	; 0x15
     a12:	ae 89       	ldd	r26, Y+22	; 0x16
     a14:	bf 89       	ldd	r27, Y+23	; 0x17
     a16:	80 95       	com	r24
     a18:	90 95       	com	r25
     a1a:	a0 95       	com	r26
     a1c:	b0 95       	com	r27
     a1e:	82 23       	and	r24, r18
     a20:	93 23       	and	r25, r19
     a22:	a4 23       	and	r26, r20
     a24:	b5 23       	and	r27, r21
     a26:	29 85       	ldd	r18, Y+9	; 0x09
     a28:	3a 85       	ldd	r19, Y+10	; 0x0a
     a2a:	f9 01       	movw	r30, r18
     a2c:	80 83       	st	Z, r24
     a2e:	91 83       	std	Z+1, r25	; 0x01
     a30:	a2 83       	std	Z+2, r26	; 0x02
     a32:	b3 83       	std	Z+3, r27	; 0x03
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	8b 87       	std	Y+11, r24	; 0x0b
     a38:	ff 91       	pop	r31
     a3a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     a3e:	89 81       	ldd	r24, Y+1	; 0x01
     a40:	9a 81       	ldd	r25, Y+2	; 0x02
     a42:	ab 81       	ldd	r26, Y+3	; 0x03
     a44:	bc 81       	ldd	r27, Y+4	; 0x04
     a46:	bb 27       	eor	r27, r27
     a48:	89 83       	std	Y+1, r24	; 0x01
     a4a:	9a 83       	std	Y+2, r25	; 0x02
     a4c:	ab 83       	std	Y+3, r26	; 0x03
     a4e:	bc 83       	std	Y+4, r27	; 0x04
     a50:	89 81       	ldd	r24, Y+1	; 0x01
     a52:	9a 81       	ldd	r25, Y+2	; 0x02
     a54:	ab 81       	ldd	r26, Y+3	; 0x03
     a56:	bc 81       	ldd	r27, Y+4	; 0x04
     a58:	bc 01       	movw	r22, r24
     a5a:	cd 01       	movw	r24, r26
     a5c:	6d 96       	adiw	r28, 0x1d	; 29
     a5e:	cd bf       	out	0x3d, r28	; 61
     a60:	de bf       	out	0x3e, r29	; 62
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	1f 91       	pop	r17
     a68:	0f 91       	pop	r16
     a6a:	ff 90       	pop	r15
     a6c:	ef 90       	pop	r14
     a6e:	df 90       	pop	r13
     a70:	cf 90       	pop	r12
     a72:	08 95       	ret

00000a74 <xEventGroupClearBits>:
     a74:	cf 93       	push	r28
     a76:	df 93       	push	r29
     a78:	cd b7       	in	r28, 0x3d	; 61
     a7a:	de b7       	in	r29, 0x3e	; 62
     a7c:	2c 97       	sbiw	r28, 0x0c	; 12
     a7e:	cd bf       	out	0x3d, r28	; 61
     a80:	de bf       	out	0x3e, r29	; 62
     a82:	8f 83       	std	Y+7, r24	; 0x07
     a84:	98 87       	std	Y+8, r25	; 0x08
     a86:	49 87       	std	Y+9, r20	; 0x09
     a88:	5a 87       	std	Y+10, r21	; 0x0a
     a8a:	6b 87       	std	Y+11, r22	; 0x0b
     a8c:	7c 87       	std	Y+12, r23	; 0x0c
     a8e:	8f 81       	ldd	r24, Y+7	; 0x07
     a90:	98 85       	ldd	r25, Y+8	; 0x08
     a92:	89 83       	std	Y+1, r24	; 0x01
     a94:	9a 83       	std	Y+2, r25	; 0x02
     a96:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     a9a:	ff 93       	push	r31
     a9c:	f8 7f       	andi	r31, 0xF8	; 248
     a9e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     aa2:	89 81       	ldd	r24, Y+1	; 0x01
     aa4:	9a 81       	ldd	r25, Y+2	; 0x02
     aa6:	fc 01       	movw	r30, r24
     aa8:	80 81       	ld	r24, Z
     aaa:	91 81       	ldd	r25, Z+1	; 0x01
     aac:	a2 81       	ldd	r26, Z+2	; 0x02
     aae:	b3 81       	ldd	r27, Z+3	; 0x03
     ab0:	8b 83       	std	Y+3, r24	; 0x03
     ab2:	9c 83       	std	Y+4, r25	; 0x04
     ab4:	ad 83       	std	Y+5, r26	; 0x05
     ab6:	be 83       	std	Y+6, r27	; 0x06
     ab8:	89 81       	ldd	r24, Y+1	; 0x01
     aba:	9a 81       	ldd	r25, Y+2	; 0x02
     abc:	fc 01       	movw	r30, r24
     abe:	20 81       	ld	r18, Z
     ac0:	31 81       	ldd	r19, Z+1	; 0x01
     ac2:	42 81       	ldd	r20, Z+2	; 0x02
     ac4:	53 81       	ldd	r21, Z+3	; 0x03
     ac6:	89 85       	ldd	r24, Y+9	; 0x09
     ac8:	9a 85       	ldd	r25, Y+10	; 0x0a
     aca:	ab 85       	ldd	r26, Y+11	; 0x0b
     acc:	bc 85       	ldd	r27, Y+12	; 0x0c
     ace:	80 95       	com	r24
     ad0:	90 95       	com	r25
     ad2:	a0 95       	com	r26
     ad4:	b0 95       	com	r27
     ad6:	82 23       	and	r24, r18
     ad8:	93 23       	and	r25, r19
     ada:	a4 23       	and	r26, r20
     adc:	b5 23       	and	r27, r21
     ade:	29 81       	ldd	r18, Y+1	; 0x01
     ae0:	3a 81       	ldd	r19, Y+2	; 0x02
     ae2:	f9 01       	movw	r30, r18
     ae4:	80 83       	st	Z, r24
     ae6:	91 83       	std	Z+1, r25	; 0x01
     ae8:	a2 83       	std	Z+2, r26	; 0x02
     aea:	b3 83       	std	Z+3, r27	; 0x03
     aec:	ff 91       	pop	r31
     aee:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     af2:	8b 81       	ldd	r24, Y+3	; 0x03
     af4:	9c 81       	ldd	r25, Y+4	; 0x04
     af6:	ad 81       	ldd	r26, Y+5	; 0x05
     af8:	be 81       	ldd	r27, Y+6	; 0x06
     afa:	bc 01       	movw	r22, r24
     afc:	cd 01       	movw	r24, r26
     afe:	2c 96       	adiw	r28, 0x0c	; 12
     b00:	cd bf       	out	0x3d, r28	; 61
     b02:	de bf       	out	0x3e, r29	; 62
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	08 95       	ret

00000b0a <xEventGroupSetBits>:
     b0a:	cf 93       	push	r28
     b0c:	df 93       	push	r29
     b0e:	cd b7       	in	r28, 0x3d	; 61
     b10:	de b7       	in	r29, 0x3e	; 62
     b12:	6d 97       	sbiw	r28, 0x1d	; 29
     b14:	cd bf       	out	0x3d, r28	; 61
     b16:	de bf       	out	0x3e, r29	; 62
     b18:	88 8f       	std	Y+24, r24	; 0x18
     b1a:	99 8f       	std	Y+25, r25	; 0x19
     b1c:	4a 8f       	std	Y+26, r20	; 0x1a
     b1e:	5b 8f       	std	Y+27, r21	; 0x1b
     b20:	6c 8f       	std	Y+28, r22	; 0x1c
     b22:	7d 8f       	std	Y+29, r23	; 0x1d
     b24:	1b 82       	std	Y+3, r1	; 0x03
     b26:	1c 82       	std	Y+4, r1	; 0x04
     b28:	1d 82       	std	Y+5, r1	; 0x05
     b2a:	1e 82       	std	Y+6, r1	; 0x06
     b2c:	88 8d       	ldd	r24, Y+24	; 0x18
     b2e:	99 8d       	ldd	r25, Y+25	; 0x19
     b30:	88 87       	std	Y+8, r24	; 0x08
     b32:	99 87       	std	Y+9, r25	; 0x09
     b34:	1f 82       	std	Y+7, r1	; 0x07
     b36:	88 85       	ldd	r24, Y+8	; 0x08
     b38:	99 85       	ldd	r25, Y+9	; 0x09
     b3a:	04 96       	adiw	r24, 0x04	; 4
     b3c:	8a 87       	std	Y+10, r24	; 0x0a
     b3e:	9b 87       	std	Y+11, r25	; 0x0b
     b40:	8a 85       	ldd	r24, Y+10	; 0x0a
     b42:	9b 85       	ldd	r25, Y+11	; 0x0b
     b44:	03 96       	adiw	r24, 0x03	; 3
     b46:	8c 87       	std	Y+12, r24	; 0x0c
     b48:	9d 87       	std	Y+13, r25	; 0x0d
     b4a:	0e 94 71 14 	call	0x28e2	; 0x28e2 <vTaskSuspendAll>
     b4e:	8a 85       	ldd	r24, Y+10	; 0x0a
     b50:	9b 85       	ldd	r25, Y+11	; 0x0b
     b52:	fc 01       	movw	r30, r24
     b54:	87 81       	ldd	r24, Z+7	; 0x07
     b56:	90 85       	ldd	r25, Z+8	; 0x08
     b58:	89 83       	std	Y+1, r24	; 0x01
     b5a:	9a 83       	std	Y+2, r25	; 0x02
     b5c:	88 85       	ldd	r24, Y+8	; 0x08
     b5e:	99 85       	ldd	r25, Y+9	; 0x09
     b60:	fc 01       	movw	r30, r24
     b62:	20 81       	ld	r18, Z
     b64:	31 81       	ldd	r19, Z+1	; 0x01
     b66:	42 81       	ldd	r20, Z+2	; 0x02
     b68:	53 81       	ldd	r21, Z+3	; 0x03
     b6a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     b6c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     b6e:	ac 8d       	ldd	r26, Y+28	; 0x1c
     b70:	bd 8d       	ldd	r27, Y+29	; 0x1d
     b72:	82 2b       	or	r24, r18
     b74:	93 2b       	or	r25, r19
     b76:	a4 2b       	or	r26, r20
     b78:	b5 2b       	or	r27, r21
     b7a:	28 85       	ldd	r18, Y+8	; 0x08
     b7c:	39 85       	ldd	r19, Y+9	; 0x09
     b7e:	f9 01       	movw	r30, r18
     b80:	80 83       	st	Z, r24
     b82:	91 83       	std	Z+1, r25	; 0x01
     b84:	a2 83       	std	Z+2, r26	; 0x02
     b86:	b3 83       	std	Z+3, r27	; 0x03
     b88:	95 c0       	rjmp	.+298    	; 0xcb4 <xEventGroupSetBits+0x1aa>
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	9a 81       	ldd	r25, Y+2	; 0x02
     b8e:	fc 01       	movw	r30, r24
     b90:	84 81       	ldd	r24, Z+4	; 0x04
     b92:	95 81       	ldd	r25, Z+5	; 0x05
     b94:	8e 87       	std	Y+14, r24	; 0x0e
     b96:	9f 87       	std	Y+15, r25	; 0x0f
     b98:	89 81       	ldd	r24, Y+1	; 0x01
     b9a:	9a 81       	ldd	r25, Y+2	; 0x02
     b9c:	fc 01       	movw	r30, r24
     b9e:	80 81       	ld	r24, Z
     ba0:	91 81       	ldd	r25, Z+1	; 0x01
     ba2:	a2 81       	ldd	r26, Z+2	; 0x02
     ba4:	b3 81       	ldd	r27, Z+3	; 0x03
     ba6:	88 8b       	std	Y+16, r24	; 0x10
     ba8:	99 8b       	std	Y+17, r25	; 0x11
     baa:	aa 8b       	std	Y+18, r26	; 0x12
     bac:	bb 8b       	std	Y+19, r27	; 0x13
     bae:	1f 82       	std	Y+7, r1	; 0x07
     bb0:	88 89       	ldd	r24, Y+16	; 0x10
     bb2:	99 89       	ldd	r25, Y+17	; 0x11
     bb4:	aa 89       	ldd	r26, Y+18	; 0x12
     bb6:	bb 89       	ldd	r27, Y+19	; 0x13
     bb8:	88 27       	eor	r24, r24
     bba:	99 27       	eor	r25, r25
     bbc:	aa 27       	eor	r26, r26
     bbe:	8c 8b       	std	Y+20, r24	; 0x14
     bc0:	9d 8b       	std	Y+21, r25	; 0x15
     bc2:	ae 8b       	std	Y+22, r26	; 0x16
     bc4:	bf 8b       	std	Y+23, r27	; 0x17
     bc6:	88 89       	ldd	r24, Y+16	; 0x10
     bc8:	99 89       	ldd	r25, Y+17	; 0x11
     bca:	aa 89       	ldd	r26, Y+18	; 0x12
     bcc:	bb 89       	ldd	r27, Y+19	; 0x13
     bce:	bb 27       	eor	r27, r27
     bd0:	88 8b       	std	Y+16, r24	; 0x10
     bd2:	99 8b       	std	Y+17, r25	; 0x11
     bd4:	aa 8b       	std	Y+18, r26	; 0x12
     bd6:	bb 8b       	std	Y+19, r27	; 0x13
     bd8:	8c 89       	ldd	r24, Y+20	; 0x14
     bda:	9d 89       	ldd	r25, Y+21	; 0x15
     bdc:	ae 89       	ldd	r26, Y+22	; 0x16
     bde:	bf 89       	ldd	r27, Y+23	; 0x17
     be0:	88 27       	eor	r24, r24
     be2:	99 27       	eor	r25, r25
     be4:	aa 27       	eor	r26, r26
     be6:	b4 70       	andi	r27, 0x04	; 4
     be8:	89 2b       	or	r24, r25
     bea:	8a 2b       	or	r24, r26
     bec:	8b 2b       	or	r24, r27
     bee:	b1 f4       	brne	.+44     	; 0xc1c <xEventGroupSetBits+0x112>
     bf0:	88 85       	ldd	r24, Y+8	; 0x08
     bf2:	99 85       	ldd	r25, Y+9	; 0x09
     bf4:	fc 01       	movw	r30, r24
     bf6:	20 81       	ld	r18, Z
     bf8:	31 81       	ldd	r19, Z+1	; 0x01
     bfa:	42 81       	ldd	r20, Z+2	; 0x02
     bfc:	53 81       	ldd	r21, Z+3	; 0x03
     bfe:	88 89       	ldd	r24, Y+16	; 0x10
     c00:	99 89       	ldd	r25, Y+17	; 0x11
     c02:	aa 89       	ldd	r26, Y+18	; 0x12
     c04:	bb 89       	ldd	r27, Y+19	; 0x13
     c06:	82 23       	and	r24, r18
     c08:	93 23       	and	r25, r19
     c0a:	a4 23       	and	r26, r20
     c0c:	b5 23       	and	r27, r21
     c0e:	89 2b       	or	r24, r25
     c10:	8a 2b       	or	r24, r26
     c12:	8b 2b       	or	r24, r27
     c14:	e9 f0       	breq	.+58     	; 0xc50 <xEventGroupSetBits+0x146>
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	8f 83       	std	Y+7, r24	; 0x07
     c1a:	1a c0       	rjmp	.+52     	; 0xc50 <xEventGroupSetBits+0x146>
     c1c:	88 85       	ldd	r24, Y+8	; 0x08
     c1e:	99 85       	ldd	r25, Y+9	; 0x09
     c20:	fc 01       	movw	r30, r24
     c22:	20 81       	ld	r18, Z
     c24:	31 81       	ldd	r19, Z+1	; 0x01
     c26:	42 81       	ldd	r20, Z+2	; 0x02
     c28:	53 81       	ldd	r21, Z+3	; 0x03
     c2a:	88 89       	ldd	r24, Y+16	; 0x10
     c2c:	99 89       	ldd	r25, Y+17	; 0x11
     c2e:	aa 89       	ldd	r26, Y+18	; 0x12
     c30:	bb 89       	ldd	r27, Y+19	; 0x13
     c32:	28 23       	and	r18, r24
     c34:	39 23       	and	r19, r25
     c36:	4a 23       	and	r20, r26
     c38:	5b 23       	and	r21, r27
     c3a:	88 89       	ldd	r24, Y+16	; 0x10
     c3c:	99 89       	ldd	r25, Y+17	; 0x11
     c3e:	aa 89       	ldd	r26, Y+18	; 0x12
     c40:	bb 89       	ldd	r27, Y+19	; 0x13
     c42:	28 17       	cp	r18, r24
     c44:	39 07       	cpc	r19, r25
     c46:	4a 07       	cpc	r20, r26
     c48:	5b 07       	cpc	r21, r27
     c4a:	11 f4       	brne	.+4      	; 0xc50 <xEventGroupSetBits+0x146>
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	8f 83       	std	Y+7, r24	; 0x07
     c50:	8f 81       	ldd	r24, Y+7	; 0x07
     c52:	88 23       	and	r24, r24
     c54:	59 f1       	breq	.+86     	; 0xcac <xEventGroupSetBits+0x1a2>
     c56:	8c 89       	ldd	r24, Y+20	; 0x14
     c58:	9d 89       	ldd	r25, Y+21	; 0x15
     c5a:	ae 89       	ldd	r26, Y+22	; 0x16
     c5c:	bf 89       	ldd	r27, Y+23	; 0x17
     c5e:	88 27       	eor	r24, r24
     c60:	99 27       	eor	r25, r25
     c62:	aa 27       	eor	r26, r26
     c64:	b1 70       	andi	r27, 0x01	; 1
     c66:	89 2b       	or	r24, r25
     c68:	8a 2b       	or	r24, r26
     c6a:	8b 2b       	or	r24, r27
     c6c:	81 f0       	breq	.+32     	; 0xc8e <xEventGroupSetBits+0x184>
     c6e:	2b 81       	ldd	r18, Y+3	; 0x03
     c70:	3c 81       	ldd	r19, Y+4	; 0x04
     c72:	4d 81       	ldd	r20, Y+5	; 0x05
     c74:	5e 81       	ldd	r21, Y+6	; 0x06
     c76:	88 89       	ldd	r24, Y+16	; 0x10
     c78:	99 89       	ldd	r25, Y+17	; 0x11
     c7a:	aa 89       	ldd	r26, Y+18	; 0x12
     c7c:	bb 89       	ldd	r27, Y+19	; 0x13
     c7e:	82 2b       	or	r24, r18
     c80:	93 2b       	or	r25, r19
     c82:	a4 2b       	or	r26, r20
     c84:	b5 2b       	or	r27, r21
     c86:	8b 83       	std	Y+3, r24	; 0x03
     c88:	9c 83       	std	Y+4, r25	; 0x04
     c8a:	ad 83       	std	Y+5, r26	; 0x05
     c8c:	be 83       	std	Y+6, r27	; 0x06
     c8e:	88 85       	ldd	r24, Y+8	; 0x08
     c90:	99 85       	ldd	r25, Y+9	; 0x09
     c92:	fc 01       	movw	r30, r24
     c94:	80 81       	ld	r24, Z
     c96:	91 81       	ldd	r25, Z+1	; 0x01
     c98:	a2 81       	ldd	r26, Z+2	; 0x02
     c9a:	b3 81       	ldd	r27, Z+3	; 0x03
     c9c:	b2 60       	ori	r27, 0x02	; 2
     c9e:	29 81       	ldd	r18, Y+1	; 0x01
     ca0:	3a 81       	ldd	r19, Y+2	; 0x02
     ca2:	ac 01       	movw	r20, r24
     ca4:	bd 01       	movw	r22, r26
     ca6:	c9 01       	movw	r24, r18
     ca8:	0e 94 1f 18 	call	0x303e	; 0x303e <vTaskRemoveFromUnorderedEventList>
     cac:	8e 85       	ldd	r24, Y+14	; 0x0e
     cae:	9f 85       	ldd	r25, Y+15	; 0x0f
     cb0:	89 83       	std	Y+1, r24	; 0x01
     cb2:	9a 83       	std	Y+2, r25	; 0x02
     cb4:	29 81       	ldd	r18, Y+1	; 0x01
     cb6:	3a 81       	ldd	r19, Y+2	; 0x02
     cb8:	8c 85       	ldd	r24, Y+12	; 0x0c
     cba:	9d 85       	ldd	r25, Y+13	; 0x0d
     cbc:	28 17       	cp	r18, r24
     cbe:	39 07       	cpc	r19, r25
     cc0:	09 f0       	breq	.+2      	; 0xcc4 <xEventGroupSetBits+0x1ba>
     cc2:	63 cf       	rjmp	.-314    	; 0xb8a <xEventGroupSetBits+0x80>
     cc4:	88 85       	ldd	r24, Y+8	; 0x08
     cc6:	99 85       	ldd	r25, Y+9	; 0x09
     cc8:	fc 01       	movw	r30, r24
     cca:	20 81       	ld	r18, Z
     ccc:	31 81       	ldd	r19, Z+1	; 0x01
     cce:	42 81       	ldd	r20, Z+2	; 0x02
     cd0:	53 81       	ldd	r21, Z+3	; 0x03
     cd2:	8b 81       	ldd	r24, Y+3	; 0x03
     cd4:	9c 81       	ldd	r25, Y+4	; 0x04
     cd6:	ad 81       	ldd	r26, Y+5	; 0x05
     cd8:	be 81       	ldd	r27, Y+6	; 0x06
     cda:	80 95       	com	r24
     cdc:	90 95       	com	r25
     cde:	a0 95       	com	r26
     ce0:	b0 95       	com	r27
     ce2:	82 23       	and	r24, r18
     ce4:	93 23       	and	r25, r19
     ce6:	a4 23       	and	r26, r20
     ce8:	b5 23       	and	r27, r21
     cea:	28 85       	ldd	r18, Y+8	; 0x08
     cec:	39 85       	ldd	r19, Y+9	; 0x09
     cee:	f9 01       	movw	r30, r18
     cf0:	80 83       	st	Z, r24
     cf2:	91 83       	std	Z+1, r25	; 0x01
     cf4:	a2 83       	std	Z+2, r26	; 0x02
     cf6:	b3 83       	std	Z+3, r27	; 0x03
     cf8:	0e 94 7e 14 	call	0x28fc	; 0x28fc <xTaskResumeAll>
     cfc:	88 85       	ldd	r24, Y+8	; 0x08
     cfe:	99 85       	ldd	r25, Y+9	; 0x09
     d00:	fc 01       	movw	r30, r24
     d02:	80 81       	ld	r24, Z
     d04:	91 81       	ldd	r25, Z+1	; 0x01
     d06:	a2 81       	ldd	r26, Z+2	; 0x02
     d08:	b3 81       	ldd	r27, Z+3	; 0x03
     d0a:	bc 01       	movw	r22, r24
     d0c:	cd 01       	movw	r24, r26
     d0e:	6d 96       	adiw	r28, 0x1d	; 29
     d10:	cd bf       	out	0x3d, r28	; 61
     d12:	de bf       	out	0x3e, r29	; 62
     d14:	df 91       	pop	r29
     d16:	cf 91       	pop	r28
     d18:	08 95       	ret

00000d1a <vEventGroupSetBitsCallback>:
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
     d1e:	00 d0       	rcall	.+0      	; 0xd20 <vEventGroupSetBitsCallback+0x6>
     d20:	00 d0       	rcall	.+0      	; 0xd22 <vEventGroupSetBitsCallback+0x8>
     d22:	cd b7       	in	r28, 0x3d	; 61
     d24:	de b7       	in	r29, 0x3e	; 62
     d26:	89 83       	std	Y+1, r24	; 0x01
     d28:	9a 83       	std	Y+2, r25	; 0x02
     d2a:	4b 83       	std	Y+3, r20	; 0x03
     d2c:	5c 83       	std	Y+4, r21	; 0x04
     d2e:	6d 83       	std	Y+5, r22	; 0x05
     d30:	7e 83       	std	Y+6, r23	; 0x06
     d32:	8b 81       	ldd	r24, Y+3	; 0x03
     d34:	9c 81       	ldd	r25, Y+4	; 0x04
     d36:	ad 81       	ldd	r26, Y+5	; 0x05
     d38:	be 81       	ldd	r27, Y+6	; 0x06
     d3a:	29 81       	ldd	r18, Y+1	; 0x01
     d3c:	3a 81       	ldd	r19, Y+2	; 0x02
     d3e:	ac 01       	movw	r20, r24
     d40:	bd 01       	movw	r22, r26
     d42:	c9 01       	movw	r24, r18
     d44:	0e 94 85 05 	call	0xb0a	; 0xb0a <xEventGroupSetBits>
     d48:	00 00       	nop
     d4a:	26 96       	adiw	r28, 0x06	; 6
     d4c:	cd bf       	out	0x3d, r28	; 61
     d4e:	de bf       	out	0x3e, r29	; 62
     d50:	df 91       	pop	r29
     d52:	cf 91       	pop	r28
     d54:	08 95       	ret

00000d56 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
     d56:	0f 93       	push	r16
     d58:	cf 93       	push	r28
     d5a:	df 93       	push	r29
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
     d60:	2a 97       	sbiw	r28, 0x0a	; 10
     d62:	cd bf       	out	0x3d, r28	; 61
     d64:	de bf       	out	0x3e, r29	; 62
     d66:	6a 83       	std	Y+2, r22	; 0x02
     d68:	7b 83       	std	Y+3, r23	; 0x03
     d6a:	8c 83       	std	Y+4, r24	; 0x04
     d6c:	9d 83       	std	Y+5, r25	; 0x05
     d6e:	2e 83       	std	Y+6, r18	; 0x06
     d70:	3f 83       	std	Y+7, r19	; 0x07
     d72:	48 87       	std	Y+8, r20	; 0x08
     d74:	59 87       	std	Y+9, r21	; 0x09
     d76:	0a 87       	std	Y+10, r16	; 0x0a
BaseType_t xWaitConditionMet = pdFALSE;
     d78:	19 82       	std	Y+1, r1	; 0x01

	if( xWaitForAllBits == pdFALSE )
     d7a:	8a 85       	ldd	r24, Y+10	; 0x0a
     d7c:	88 23       	and	r24, r24
     d7e:	99 f4       	brne	.+38     	; 0xda6 <prvTestWaitCondition+0x50>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
     d80:	2a 81       	ldd	r18, Y+2	; 0x02
     d82:	3b 81       	ldd	r19, Y+3	; 0x03
     d84:	4c 81       	ldd	r20, Y+4	; 0x04
     d86:	5d 81       	ldd	r21, Y+5	; 0x05
     d88:	8e 81       	ldd	r24, Y+6	; 0x06
     d8a:	9f 81       	ldd	r25, Y+7	; 0x07
     d8c:	a8 85       	ldd	r26, Y+8	; 0x08
     d8e:	b9 85       	ldd	r27, Y+9	; 0x09
     d90:	82 23       	and	r24, r18
     d92:	93 23       	and	r25, r19
     d94:	a4 23       	and	r26, r20
     d96:	b5 23       	and	r27, r21
     d98:	89 2b       	or	r24, r25
     d9a:	8a 2b       	or	r24, r26
     d9c:	8b 2b       	or	r24, r27
     d9e:	d1 f0       	breq	.+52     	; 0xdd4 <prvTestWaitCondition+0x7e>
		{
			xWaitConditionMet = pdTRUE;
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	89 83       	std	Y+1, r24	; 0x01
     da4:	17 c0       	rjmp	.+46     	; 0xdd4 <prvTestWaitCondition+0x7e>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
     da6:	2a 81       	ldd	r18, Y+2	; 0x02
     da8:	3b 81       	ldd	r19, Y+3	; 0x03
     daa:	4c 81       	ldd	r20, Y+4	; 0x04
     dac:	5d 81       	ldd	r21, Y+5	; 0x05
     dae:	8e 81       	ldd	r24, Y+6	; 0x06
     db0:	9f 81       	ldd	r25, Y+7	; 0x07
     db2:	a8 85       	ldd	r26, Y+8	; 0x08
     db4:	b9 85       	ldd	r27, Y+9	; 0x09
     db6:	28 23       	and	r18, r24
     db8:	39 23       	and	r19, r25
     dba:	4a 23       	and	r20, r26
     dbc:	5b 23       	and	r21, r27
     dbe:	8e 81       	ldd	r24, Y+6	; 0x06
     dc0:	9f 81       	ldd	r25, Y+7	; 0x07
     dc2:	a8 85       	ldd	r26, Y+8	; 0x08
     dc4:	b9 85       	ldd	r27, Y+9	; 0x09
     dc6:	28 17       	cp	r18, r24
     dc8:	39 07       	cpc	r19, r25
     dca:	4a 07       	cpc	r20, r26
     dcc:	5b 07       	cpc	r21, r27
     dce:	11 f4       	brne	.+4      	; 0xdd4 <prvTestWaitCondition+0x7e>
		{
			xWaitConditionMet = pdTRUE;
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
}
     dd6:	2a 96       	adiw	r28, 0x0a	; 10
     dd8:	cd bf       	out	0x3d, r28	; 61
     dda:	de bf       	out	0x3e, r29	; 62
     ddc:	df 91       	pop	r29
     dde:	cf 91       	pop	r28
     de0:	0f 91       	pop	r16
     de2:	08 95       	ret

00000de4 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
     de4:	0f 93       	push	r16
     de6:	1f 93       	push	r17
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
     df0:	29 97       	sbiw	r28, 0x09	; 9
     df2:	cd bf       	out	0x3d, r28	; 61
     df4:	de bf       	out	0x3e, r29	; 62
     df6:	8a 83       	std	Y+2, r24	; 0x02
     df8:	9b 83       	std	Y+3, r25	; 0x03
     dfa:	4c 83       	std	Y+4, r20	; 0x04
     dfc:	5d 83       	std	Y+5, r21	; 0x05
     dfe:	6e 83       	std	Y+6, r22	; 0x06
     e00:	7f 83       	std	Y+7, r23	; 0x07
     e02:	28 87       	std	Y+8, r18	; 0x08
     e04:	39 87       	std	Y+9, r19	; 0x09
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
     e06:	28 85       	ldd	r18, Y+8	; 0x08
     e08:	39 85       	ldd	r19, Y+9	; 0x09
     e0a:	8c 81       	ldd	r24, Y+4	; 0x04
     e0c:	9d 81       	ldd	r25, Y+5	; 0x05
     e0e:	ae 81       	ldd	r26, Y+6	; 0x06
     e10:	bf 81       	ldd	r27, Y+7	; 0x07
     e12:	6a 81       	ldd	r22, Y+2	; 0x02
     e14:	7b 81       	ldd	r23, Y+3	; 0x03
     e16:	89 01       	movw	r16, r18
     e18:	9c 01       	movw	r18, r24
     e1a:	ad 01       	movw	r20, r26
     e1c:	8d e8       	ldi	r24, 0x8D	; 141
     e1e:	96 e0       	ldi	r25, 0x06	; 6
     e20:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <xTimerPendFunctionCallFromISR>
     e24:	89 83       	std	Y+1, r24	; 0x01

		return xReturn;
     e26:	89 81       	ldd	r24, Y+1	; 0x01
	}
     e28:	29 96       	adiw	r28, 0x09	; 9
     e2a:	cd bf       	out	0x3d, r28	; 61
     e2c:	de bf       	out	0x3e, r29	; 62
     e2e:	df 91       	pop	r29
     e30:	cf 91       	pop	r28
     e32:	1f 91       	pop	r17
     e34:	0f 91       	pop	r16
     e36:	08 95       	ret

00000e38 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     e38:	cf 93       	push	r28
     e3a:	df 93       	push	r29
     e3c:	00 d0       	rcall	.+0      	; 0xe3e <pvPortMalloc+0x6>
     e3e:	1f 92       	push	r1
     e40:	cd b7       	in	r28, 0x3d	; 61
     e42:	de b7       	in	r29, 0x3e	; 62
     e44:	8b 83       	std	Y+3, r24	; 0x03
     e46:	9c 83       	std	Y+4, r25	; 0x04
void *pvReturn = NULL; 
     e48:	19 82       	std	Y+1, r1	; 0x01
     e4a:	1a 82       	std	Y+2, r1	; 0x02
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     e4c:	0e 94 71 14 	call	0x28e2	; 0x28e2 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     e50:	20 91 6e 30 	lds	r18, 0x306E	; 0x80306e <xNextFreeByte>
     e54:	30 91 6f 30 	lds	r19, 0x306F	; 0x80306f <xNextFreeByte+0x1>
     e58:	8b 81       	ldd	r24, Y+3	; 0x03
     e5a:	9c 81       	ldd	r25, Y+4	; 0x04
     e5c:	82 0f       	add	r24, r18
     e5e:	93 1f       	adc	r25, r19
     e60:	80 3a       	cpi	r24, 0xA0	; 160
     e62:	9f 40       	sbci	r25, 0x0F	; 15
     e64:	18 f5       	brcc	.+70     	; 0xeac <pvPortMalloc+0x74>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
     e66:	20 91 6e 30 	lds	r18, 0x306E	; 0x80306e <xNextFreeByte>
     e6a:	30 91 6f 30 	lds	r19, 0x306F	; 0x80306f <xNextFreeByte+0x1>
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	9c 81       	ldd	r25, Y+4	; 0x04
     e72:	28 0f       	add	r18, r24
     e74:	39 1f       	adc	r19, r25
     e76:	80 91 6e 30 	lds	r24, 0x306E	; 0x80306e <xNextFreeByte>
     e7a:	90 91 6f 30 	lds	r25, 0x306F	; 0x80306f <xNextFreeByte+0x1>
	#endif

	vTaskSuspendAll();
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     e7e:	82 17       	cp	r24, r18
     e80:	93 07       	cpc	r25, r19
     e82:	a0 f4       	brcc	.+40     	; 0xeac <pvPortMalloc+0x74>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     e84:	80 91 6e 30 	lds	r24, 0x306E	; 0x80306e <xNextFreeByte>
     e88:	90 91 6f 30 	lds	r25, 0x306F	; 0x80306f <xNextFreeByte+0x1>
     e8c:	82 53       	subi	r24, 0x32	; 50
     e8e:	9f 4d       	sbci	r25, 0xDF	; 223
     e90:	89 83       	std	Y+1, r24	; 0x01
     e92:	9a 83       	std	Y+2, r25	; 0x02
			xNextFreeByte += xWantedSize;			
     e94:	20 91 6e 30 	lds	r18, 0x306E	; 0x80306e <xNextFreeByte>
     e98:	30 91 6f 30 	lds	r19, 0x306F	; 0x80306f <xNextFreeByte+0x1>
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ea0:	82 0f       	add	r24, r18
     ea2:	93 1f       	adc	r25, r19
     ea4:	80 93 6e 30 	sts	0x306E, r24	; 0x80306e <xNextFreeByte>
     ea8:	90 93 6f 30 	sts	0x306F, r25	; 0x80306f <xNextFreeByte+0x1>
		}	
	}
	xTaskResumeAll();
     eac:	0e 94 7e 14 	call	0x28fc	; 0x28fc <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	9a 81       	ldd	r25, Y+2	; 0x02
}
     eb4:	24 96       	adiw	r28, 0x04	; 4
     eb6:	cd bf       	out	0x3d, r28	; 61
     eb8:	de bf       	out	0x3e, r29	; 62
     eba:	df 91       	pop	r29
     ebc:	cf 91       	pop	r28
     ebe:	08 95       	ret

00000ec0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     ec0:	cf 93       	push	r28
     ec2:	df 93       	push	r29
     ec4:	1f 92       	push	r1
     ec6:	1f 92       	push	r1
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
     ecc:	89 83       	std	Y+1, r24	; 0x01
     ece:	9a 83       	std	Y+2, r25	; 0x02
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
	
	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
     ed0:	00 00       	nop
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	df 91       	pop	r29
     ed8:	cf 91       	pop	r28
     eda:	08 95       	ret

00000edc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     edc:	cf 93       	push	r28
     ede:	df 93       	push	r29
     ee0:	1f 92       	push	r1
     ee2:	1f 92       	push	r1
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
     ee8:	89 83       	std	Y+1, r24	; 0x01
     eea:	9a 83       	std	Y+2, r25	; 0x02
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	9a 81       	ldd	r25, Y+2	; 0x02
     ef0:	9c 01       	movw	r18, r24
     ef2:	2d 5f       	subi	r18, 0xFD	; 253
     ef4:	3f 4f       	sbci	r19, 0xFF	; 255
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	9a 81       	ldd	r25, Y+2	; 0x02
     efa:	fc 01       	movw	r30, r24
     efc:	21 83       	std	Z+1, r18	; 0x01
     efe:	32 83       	std	Z+2, r19	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     f00:	29 81       	ldd	r18, Y+1	; 0x01
     f02:	3a 81       	ldd	r19, Y+2	; 0x02
     f04:	8f ef       	ldi	r24, 0xFF	; 255
     f06:	9f ef       	ldi	r25, 0xFF	; 255
     f08:	dc 01       	movw	r26, r24
     f0a:	f9 01       	movw	r30, r18
     f0c:	83 83       	std	Z+3, r24	; 0x03
     f0e:	94 83       	std	Z+4, r25	; 0x04
     f10:	a5 83       	std	Z+5, r26	; 0x05
     f12:	b6 83       	std	Z+6, r27	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	9a 81       	ldd	r25, Y+2	; 0x02
     f18:	9c 01       	movw	r18, r24
     f1a:	2d 5f       	subi	r18, 0xFD	; 253
     f1c:	3f 4f       	sbci	r19, 0xFF	; 255
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	9a 81       	ldd	r25, Y+2	; 0x02
     f22:	fc 01       	movw	r30, r24
     f24:	27 83       	std	Z+7, r18	; 0x07
     f26:	30 87       	std	Z+8, r19	; 0x08
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	9a 81       	ldd	r25, Y+2	; 0x02
     f2c:	9c 01       	movw	r18, r24
     f2e:	2d 5f       	subi	r18, 0xFD	; 253
     f30:	3f 4f       	sbci	r19, 0xFF	; 255
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	9a 81       	ldd	r25, Y+2	; 0x02
     f36:	fc 01       	movw	r30, r24
     f38:	21 87       	std	Z+9, r18	; 0x09
     f3a:	32 87       	std	Z+10, r19	; 0x0a

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	9a 81       	ldd	r25, Y+2	; 0x02
     f40:	fc 01       	movw	r30, r24
     f42:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     f44:	00 00       	nop
     f46:	0f 90       	pop	r0
     f48:	0f 90       	pop	r0
     f4a:	df 91       	pop	r29
     f4c:	cf 91       	pop	r28
     f4e:	08 95       	ret

00000f50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     f50:	cf 93       	push	r28
     f52:	df 93       	push	r29
     f54:	1f 92       	push	r1
     f56:	1f 92       	push	r1
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62
     f5c:	89 83       	std	Y+1, r24	; 0x01
     f5e:	9a 83       	std	Y+2, r25	; 0x02
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	9a 81       	ldd	r25, Y+2	; 0x02
     f64:	fc 01       	movw	r30, r24
     f66:	12 86       	std	Z+10, r1	; 0x0a
     f68:	13 86       	std	Z+11, r1	; 0x0b

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     f6a:	00 00       	nop
     f6c:	0f 90       	pop	r0
     f6e:	0f 90       	pop	r0
     f70:	df 91       	pop	r29
     f72:	cf 91       	pop	r28
     f74:	08 95       	ret

00000f76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     f76:	cf 93       	push	r28
     f78:	df 93       	push	r29
     f7a:	00 d0       	rcall	.+0      	; 0xf7c <vListInsertEnd+0x6>
     f7c:	00 d0       	rcall	.+0      	; 0xf7e <vListInsertEnd+0x8>
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
     f82:	8b 83       	std	Y+3, r24	; 0x03
     f84:	9c 83       	std	Y+4, r25	; 0x04
     f86:	6d 83       	std	Y+5, r22	; 0x05
     f88:	7e 83       	std	Y+6, r23	; 0x06
ListItem_t * const pxIndex = pxList->pxIndex;
     f8a:	8b 81       	ldd	r24, Y+3	; 0x03
     f8c:	9c 81       	ldd	r25, Y+4	; 0x04
     f8e:	fc 01       	movw	r30, r24
     f90:	81 81       	ldd	r24, Z+1	; 0x01
     f92:	92 81       	ldd	r25, Z+2	; 0x02
     f94:	89 83       	std	Y+1, r24	; 0x01
     f96:	9a 83       	std	Y+2, r25	; 0x02
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     f98:	8d 81       	ldd	r24, Y+5	; 0x05
     f9a:	9e 81       	ldd	r25, Y+6	; 0x06
     f9c:	29 81       	ldd	r18, Y+1	; 0x01
     f9e:	3a 81       	ldd	r19, Y+2	; 0x02
     fa0:	fc 01       	movw	r30, r24
     fa2:	24 83       	std	Z+4, r18	; 0x04
     fa4:	35 83       	std	Z+5, r19	; 0x05
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	9a 81       	ldd	r25, Y+2	; 0x02
     faa:	fc 01       	movw	r30, r24
     fac:	26 81       	ldd	r18, Z+6	; 0x06
     fae:	37 81       	ldd	r19, Z+7	; 0x07
     fb0:	8d 81       	ldd	r24, Y+5	; 0x05
     fb2:	9e 81       	ldd	r25, Y+6	; 0x06
     fb4:	fc 01       	movw	r30, r24
     fb6:	26 83       	std	Z+6, r18	; 0x06
     fb8:	37 83       	std	Z+7, r19	; 0x07

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	9a 81       	ldd	r25, Y+2	; 0x02
     fbe:	fc 01       	movw	r30, r24
     fc0:	86 81       	ldd	r24, Z+6	; 0x06
     fc2:	97 81       	ldd	r25, Z+7	; 0x07
     fc4:	2d 81       	ldd	r18, Y+5	; 0x05
     fc6:	3e 81       	ldd	r19, Y+6	; 0x06
     fc8:	fc 01       	movw	r30, r24
     fca:	24 83       	std	Z+4, r18	; 0x04
     fcc:	35 83       	std	Z+5, r19	; 0x05
	pxIndex->pxPrevious = pxNewListItem;
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	9a 81       	ldd	r25, Y+2	; 0x02
     fd2:	2d 81       	ldd	r18, Y+5	; 0x05
     fd4:	3e 81       	ldd	r19, Y+6	; 0x06
     fd6:	fc 01       	movw	r30, r24
     fd8:	26 83       	std	Z+6, r18	; 0x06
     fda:	37 83       	std	Z+7, r19	; 0x07

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     fdc:	8d 81       	ldd	r24, Y+5	; 0x05
     fde:	9e 81       	ldd	r25, Y+6	; 0x06
     fe0:	2b 81       	ldd	r18, Y+3	; 0x03
     fe2:	3c 81       	ldd	r19, Y+4	; 0x04
     fe4:	fc 01       	movw	r30, r24
     fe6:	22 87       	std	Z+10, r18	; 0x0a
     fe8:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	9c 81       	ldd	r25, Y+4	; 0x04
     fee:	fc 01       	movw	r30, r24
     ff0:	80 81       	ld	r24, Z
     ff2:	21 e0       	ldi	r18, 0x01	; 1
     ff4:	28 0f       	add	r18, r24
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	9c 81       	ldd	r25, Y+4	; 0x04
     ffa:	fc 01       	movw	r30, r24
     ffc:	20 83       	st	Z, r18
}
     ffe:	00 00       	nop
    1000:	26 96       	adiw	r28, 0x06	; 6
    1002:	cd bf       	out	0x3d, r28	; 61
    1004:	de bf       	out	0x3e, r29	; 62
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
    100a:	08 95       	ret

0000100c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    100c:	cf 93       	push	r28
    100e:	df 93       	push	r29
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
    1014:	2a 97       	sbiw	r28, 0x0a	; 10
    1016:	cd bf       	out	0x3d, r28	; 61
    1018:	de bf       	out	0x3e, r29	; 62
    101a:	8f 83       	std	Y+7, r24	; 0x07
    101c:	98 87       	std	Y+8, r25	; 0x08
    101e:	69 87       	std	Y+9, r22	; 0x09
    1020:	7a 87       	std	Y+10, r23	; 0x0a
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1022:	89 85       	ldd	r24, Y+9	; 0x09
    1024:	9a 85       	ldd	r25, Y+10	; 0x0a
    1026:	fc 01       	movw	r30, r24
    1028:	80 81       	ld	r24, Z
    102a:	91 81       	ldd	r25, Z+1	; 0x01
    102c:	a2 81       	ldd	r26, Z+2	; 0x02
    102e:	b3 81       	ldd	r27, Z+3	; 0x03
    1030:	8b 83       	std	Y+3, r24	; 0x03
    1032:	9c 83       	std	Y+4, r25	; 0x04
    1034:	ad 83       	std	Y+5, r26	; 0x05
    1036:	be 83       	std	Y+6, r27	; 0x06
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	9c 81       	ldd	r25, Y+4	; 0x04
    103c:	ad 81       	ldd	r26, Y+5	; 0x05
    103e:	be 81       	ldd	r27, Y+6	; 0x06
    1040:	8f 3f       	cpi	r24, 0xFF	; 255
    1042:	9f 4f       	sbci	r25, 0xFF	; 255
    1044:	af 4f       	sbci	r26, 0xFF	; 255
    1046:	bf 4f       	sbci	r27, 0xFF	; 255
    1048:	41 f4       	brne	.+16     	; 0x105a <vListInsert+0x4e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    104a:	8f 81       	ldd	r24, Y+7	; 0x07
    104c:	98 85       	ldd	r25, Y+8	; 0x08
    104e:	fc 01       	movw	r30, r24
    1050:	81 85       	ldd	r24, Z+9	; 0x09
    1052:	92 85       	ldd	r25, Z+10	; 0x0a
    1054:	89 83       	std	Y+1, r24	; 0x01
    1056:	9a 83       	std	Y+2, r25	; 0x02
    1058:	20 c0       	rjmp	.+64     	; 0x109a <vListInsert+0x8e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    105a:	8f 81       	ldd	r24, Y+7	; 0x07
    105c:	98 85       	ldd	r25, Y+8	; 0x08
    105e:	03 96       	adiw	r24, 0x03	; 3
    1060:	89 83       	std	Y+1, r24	; 0x01
    1062:	9a 83       	std	Y+2, r25	; 0x02
    1064:	07 c0       	rjmp	.+14     	; 0x1074 <vListInsert+0x68>
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	9a 81       	ldd	r25, Y+2	; 0x02
    106a:	fc 01       	movw	r30, r24
    106c:	84 81       	ldd	r24, Z+4	; 0x04
    106e:	95 81       	ldd	r25, Z+5	; 0x05
    1070:	89 83       	std	Y+1, r24	; 0x01
    1072:	9a 83       	std	Y+2, r25	; 0x02
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	9a 81       	ldd	r25, Y+2	; 0x02
    1078:	fc 01       	movw	r30, r24
    107a:	84 81       	ldd	r24, Z+4	; 0x04
    107c:	95 81       	ldd	r25, Z+5	; 0x05
    107e:	fc 01       	movw	r30, r24
    1080:	20 81       	ld	r18, Z
    1082:	31 81       	ldd	r19, Z+1	; 0x01
    1084:	42 81       	ldd	r20, Z+2	; 0x02
    1086:	53 81       	ldd	r21, Z+3	; 0x03
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	9c 81       	ldd	r25, Y+4	; 0x04
    108c:	ad 81       	ldd	r26, Y+5	; 0x05
    108e:	be 81       	ldd	r27, Y+6	; 0x06
    1090:	82 17       	cp	r24, r18
    1092:	93 07       	cpc	r25, r19
    1094:	a4 07       	cpc	r26, r20
    1096:	b5 07       	cpc	r27, r21
    1098:	30 f7       	brcc	.-52     	; 0x1066 <vListInsert+0x5a>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	9a 81       	ldd	r25, Y+2	; 0x02
    109e:	fc 01       	movw	r30, r24
    10a0:	24 81       	ldd	r18, Z+4	; 0x04
    10a2:	35 81       	ldd	r19, Z+5	; 0x05
    10a4:	89 85       	ldd	r24, Y+9	; 0x09
    10a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a8:	fc 01       	movw	r30, r24
    10aa:	24 83       	std	Z+4, r18	; 0x04
    10ac:	35 83       	std	Z+5, r19	; 0x05
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    10ae:	89 85       	ldd	r24, Y+9	; 0x09
    10b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b2:	fc 01       	movw	r30, r24
    10b4:	84 81       	ldd	r24, Z+4	; 0x04
    10b6:	95 81       	ldd	r25, Z+5	; 0x05
    10b8:	29 85       	ldd	r18, Y+9	; 0x09
    10ba:	3a 85       	ldd	r19, Y+10	; 0x0a
    10bc:	fc 01       	movw	r30, r24
    10be:	26 83       	std	Z+6, r18	; 0x06
    10c0:	37 83       	std	Z+7, r19	; 0x07
	pxNewListItem->pxPrevious = pxIterator;
    10c2:	89 85       	ldd	r24, Y+9	; 0x09
    10c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c6:	29 81       	ldd	r18, Y+1	; 0x01
    10c8:	3a 81       	ldd	r19, Y+2	; 0x02
    10ca:	fc 01       	movw	r30, r24
    10cc:	26 83       	std	Z+6, r18	; 0x06
    10ce:	37 83       	std	Z+7, r19	; 0x07
	pxIterator->pxNext = pxNewListItem;
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	9a 81       	ldd	r25, Y+2	; 0x02
    10d4:	29 85       	ldd	r18, Y+9	; 0x09
    10d6:	3a 85       	ldd	r19, Y+10	; 0x0a
    10d8:	fc 01       	movw	r30, r24
    10da:	24 83       	std	Z+4, r18	; 0x04
    10dc:	35 83       	std	Z+5, r19	; 0x05

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    10de:	89 85       	ldd	r24, Y+9	; 0x09
    10e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e2:	2f 81       	ldd	r18, Y+7	; 0x07
    10e4:	38 85       	ldd	r19, Y+8	; 0x08
    10e6:	fc 01       	movw	r30, r24
    10e8:	22 87       	std	Z+10, r18	; 0x0a
    10ea:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
    10ec:	8f 81       	ldd	r24, Y+7	; 0x07
    10ee:	98 85       	ldd	r25, Y+8	; 0x08
    10f0:	fc 01       	movw	r30, r24
    10f2:	80 81       	ld	r24, Z
    10f4:	21 e0       	ldi	r18, 0x01	; 1
    10f6:	28 0f       	add	r18, r24
    10f8:	8f 81       	ldd	r24, Y+7	; 0x07
    10fa:	98 85       	ldd	r25, Y+8	; 0x08
    10fc:	fc 01       	movw	r30, r24
    10fe:	20 83       	st	Z, r18
}
    1100:	00 00       	nop
    1102:	2a 96       	adiw	r28, 0x0a	; 10
    1104:	cd bf       	out	0x3d, r28	; 61
    1106:	de bf       	out	0x3e, r29	; 62
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	08 95       	ret

0000110e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    110e:	cf 93       	push	r28
    1110:	df 93       	push	r29
    1112:	00 d0       	rcall	.+0      	; 0x1114 <uxListRemove+0x6>
    1114:	1f 92       	push	r1
    1116:	cd b7       	in	r28, 0x3d	; 61
    1118:	de b7       	in	r29, 0x3e	; 62
    111a:	8b 83       	std	Y+3, r24	; 0x03
    111c:	9c 83       	std	Y+4, r25	; 0x04
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    111e:	8b 81       	ldd	r24, Y+3	; 0x03
    1120:	9c 81       	ldd	r25, Y+4	; 0x04
    1122:	fc 01       	movw	r30, r24
    1124:	82 85       	ldd	r24, Z+10	; 0x0a
    1126:	93 85       	ldd	r25, Z+11	; 0x0b
    1128:	89 83       	std	Y+1, r24	; 0x01
    112a:	9a 83       	std	Y+2, r25	; 0x02

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	9c 81       	ldd	r25, Y+4	; 0x04
    1130:	fc 01       	movw	r30, r24
    1132:	84 81       	ldd	r24, Z+4	; 0x04
    1134:	95 81       	ldd	r25, Z+5	; 0x05
    1136:	2b 81       	ldd	r18, Y+3	; 0x03
    1138:	3c 81       	ldd	r19, Y+4	; 0x04
    113a:	f9 01       	movw	r30, r18
    113c:	26 81       	ldd	r18, Z+6	; 0x06
    113e:	37 81       	ldd	r19, Z+7	; 0x07
    1140:	fc 01       	movw	r30, r24
    1142:	26 83       	std	Z+6, r18	; 0x06
    1144:	37 83       	std	Z+7, r19	; 0x07
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	9c 81       	ldd	r25, Y+4	; 0x04
    114a:	fc 01       	movw	r30, r24
    114c:	86 81       	ldd	r24, Z+6	; 0x06
    114e:	97 81       	ldd	r25, Z+7	; 0x07
    1150:	2b 81       	ldd	r18, Y+3	; 0x03
    1152:	3c 81       	ldd	r19, Y+4	; 0x04
    1154:	f9 01       	movw	r30, r18
    1156:	24 81       	ldd	r18, Z+4	; 0x04
    1158:	35 81       	ldd	r19, Z+5	; 0x05
    115a:	fc 01       	movw	r30, r24
    115c:	24 83       	std	Z+4, r18	; 0x04
    115e:	35 83       	std	Z+5, r19	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1160:	89 81       	ldd	r24, Y+1	; 0x01
    1162:	9a 81       	ldd	r25, Y+2	; 0x02
    1164:	fc 01       	movw	r30, r24
    1166:	21 81       	ldd	r18, Z+1	; 0x01
    1168:	32 81       	ldd	r19, Z+2	; 0x02
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	9c 81       	ldd	r25, Y+4	; 0x04
    116e:	28 17       	cp	r18, r24
    1170:	39 07       	cpc	r19, r25
    1172:	51 f4       	brne	.+20     	; 0x1188 <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	9c 81       	ldd	r25, Y+4	; 0x04
    1178:	fc 01       	movw	r30, r24
    117a:	26 81       	ldd	r18, Z+6	; 0x06
    117c:	37 81       	ldd	r19, Z+7	; 0x07
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	9a 81       	ldd	r25, Y+2	; 0x02
    1182:	fc 01       	movw	r30, r24
    1184:	21 83       	std	Z+1, r18	; 0x01
    1186:	32 83       	std	Z+2, r19	; 0x02
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	9c 81       	ldd	r25, Y+4	; 0x04
    118c:	fc 01       	movw	r30, r24
    118e:	12 86       	std	Z+10, r1	; 0x0a
    1190:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	9a 81       	ldd	r25, Y+2	; 0x02
    1196:	fc 01       	movw	r30, r24
    1198:	80 81       	ld	r24, Z
    119a:	2f ef       	ldi	r18, 0xFF	; 255
    119c:	28 0f       	add	r18, r24
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	9a 81       	ldd	r25, Y+2	; 0x02
    11a2:	fc 01       	movw	r30, r24
    11a4:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	9a 81       	ldd	r25, Y+2	; 0x02
    11aa:	fc 01       	movw	r30, r24
    11ac:	80 81       	ld	r24, Z
}
    11ae:	24 96       	adiw	r28, 0x04	; 4
    11b0:	cd bf       	out	0x3d, r28	; 61
    11b2:	de bf       	out	0x3e, r29	; 62
    11b4:	df 91       	pop	r29
    11b6:	cf 91       	pop	r28
    11b8:	08 95       	ret

000011ba <_portSetInterruptMaskFromIsr>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    11ba:	1f 93       	push	r17
    11bc:	cf 93       	push	r28
    11be:	df 93       	push	r29
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
    11c4:	80 ea       	ldi	r24, 0xA0	; 160
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	fc 01       	movw	r30, r24
    11ca:	12 81       	ldd	r17, Z+2	; 0x02
    11cc:	80 ea       	ldi	r24, 0xA0	; 160
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	20 ea       	ldi	r18, 0xA0	; 160
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	f9 01       	movw	r30, r18
    11d6:	22 81       	ldd	r18, Z+2	; 0x02
    11d8:	28 7f       	andi	r18, 0xF8	; 248
    11da:	fc 01       	movw	r30, r24
    11dc:	22 83       	std	Z+2, r18	; 0x02
    11de:	81 2f       	mov	r24, r17
    11e0:	df 91       	pop	r29
    11e2:	cf 91       	pop	r28
    11e4:	1f 91       	pop	r17
    11e6:	08 95       	ret

000011e8 <pxPortInitialiseStack>:
    11e8:	cf 93       	push	r28
    11ea:	df 93       	push	r29
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
    11f0:	2a 97       	sbiw	r28, 0x0a	; 10
    11f2:	cd bf       	out	0x3d, r28	; 61
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	8d 83       	std	Y+5, r24	; 0x05
    11f8:	9e 83       	std	Y+6, r25	; 0x06
    11fa:	6f 83       	std	Y+7, r22	; 0x07
    11fc:	78 87       	std	Y+8, r23	; 0x08
    11fe:	49 87       	std	Y+9, r20	; 0x09
    1200:	5a 87       	std	Y+10, r21	; 0x0a
    1202:	8d 81       	ldd	r24, Y+5	; 0x05
    1204:	9e 81       	ldd	r25, Y+6	; 0x06
    1206:	21 e1       	ldi	r18, 0x11	; 17
    1208:	fc 01       	movw	r30, r24
    120a:	20 83       	st	Z, r18
    120c:	8d 81       	ldd	r24, Y+5	; 0x05
    120e:	9e 81       	ldd	r25, Y+6	; 0x06
    1210:	01 97       	sbiw	r24, 0x01	; 1
    1212:	8d 83       	std	Y+5, r24	; 0x05
    1214:	9e 83       	std	Y+6, r25	; 0x06
    1216:	8d 81       	ldd	r24, Y+5	; 0x05
    1218:	9e 81       	ldd	r25, Y+6	; 0x06
    121a:	22 e2       	ldi	r18, 0x22	; 34
    121c:	fc 01       	movw	r30, r24
    121e:	20 83       	st	Z, r18
    1220:	8d 81       	ldd	r24, Y+5	; 0x05
    1222:	9e 81       	ldd	r25, Y+6	; 0x06
    1224:	01 97       	sbiw	r24, 0x01	; 1
    1226:	8d 83       	std	Y+5, r24	; 0x05
    1228:	9e 83       	std	Y+6, r25	; 0x06
    122a:	8d 81       	ldd	r24, Y+5	; 0x05
    122c:	9e 81       	ldd	r25, Y+6	; 0x06
    122e:	23 e3       	ldi	r18, 0x33	; 51
    1230:	fc 01       	movw	r30, r24
    1232:	20 83       	st	Z, r18
    1234:	8d 81       	ldd	r24, Y+5	; 0x05
    1236:	9e 81       	ldd	r25, Y+6	; 0x06
    1238:	01 97       	sbiw	r24, 0x01	; 1
    123a:	8d 83       	std	Y+5, r24	; 0x05
    123c:	9e 83       	std	Y+6, r25	; 0x06
    123e:	8f 81       	ldd	r24, Y+7	; 0x07
    1240:	98 85       	ldd	r25, Y+8	; 0x08
    1242:	cc 01       	movw	r24, r24
    1244:	a0 e0       	ldi	r26, 0x00	; 0
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	89 83       	std	Y+1, r24	; 0x01
    124a:	9a 83       	std	Y+2, r25	; 0x02
    124c:	ab 83       	std	Y+3, r26	; 0x03
    124e:	bc 83       	std	Y+4, r27	; 0x04
    1250:	29 81       	ldd	r18, Y+1	; 0x01
    1252:	8d 81       	ldd	r24, Y+5	; 0x05
    1254:	9e 81       	ldd	r25, Y+6	; 0x06
    1256:	fc 01       	movw	r30, r24
    1258:	20 83       	st	Z, r18
    125a:	8d 81       	ldd	r24, Y+5	; 0x05
    125c:	9e 81       	ldd	r25, Y+6	; 0x06
    125e:	01 97       	sbiw	r24, 0x01	; 1
    1260:	8d 83       	std	Y+5, r24	; 0x05
    1262:	9e 83       	std	Y+6, r25	; 0x06
    1264:	89 81       	ldd	r24, Y+1	; 0x01
    1266:	9a 81       	ldd	r25, Y+2	; 0x02
    1268:	ab 81       	ldd	r26, Y+3	; 0x03
    126a:	bc 81       	ldd	r27, Y+4	; 0x04
    126c:	89 2f       	mov	r24, r25
    126e:	9a 2f       	mov	r25, r26
    1270:	ab 2f       	mov	r26, r27
    1272:	bb 27       	eor	r27, r27
    1274:	89 83       	std	Y+1, r24	; 0x01
    1276:	9a 83       	std	Y+2, r25	; 0x02
    1278:	ab 83       	std	Y+3, r26	; 0x03
    127a:	bc 83       	std	Y+4, r27	; 0x04
    127c:	29 81       	ldd	r18, Y+1	; 0x01
    127e:	8d 81       	ldd	r24, Y+5	; 0x05
    1280:	9e 81       	ldd	r25, Y+6	; 0x06
    1282:	fc 01       	movw	r30, r24
    1284:	20 83       	st	Z, r18
    1286:	8d 81       	ldd	r24, Y+5	; 0x05
    1288:	9e 81       	ldd	r25, Y+6	; 0x06
    128a:	01 97       	sbiw	r24, 0x01	; 1
    128c:	8d 83       	std	Y+5, r24	; 0x05
    128e:	9e 83       	std	Y+6, r25	; 0x06
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	9a 81       	ldd	r25, Y+2	; 0x02
    1294:	ab 81       	ldd	r26, Y+3	; 0x03
    1296:	bc 81       	ldd	r27, Y+4	; 0x04
    1298:	89 2f       	mov	r24, r25
    129a:	9a 2f       	mov	r25, r26
    129c:	ab 2f       	mov	r26, r27
    129e:	bb 27       	eor	r27, r27
    12a0:	89 83       	std	Y+1, r24	; 0x01
    12a2:	9a 83       	std	Y+2, r25	; 0x02
    12a4:	ab 83       	std	Y+3, r26	; 0x03
    12a6:	bc 83       	std	Y+4, r27	; 0x04
    12a8:	29 81       	ldd	r18, Y+1	; 0x01
    12aa:	8d 81       	ldd	r24, Y+5	; 0x05
    12ac:	9e 81       	ldd	r25, Y+6	; 0x06
    12ae:	fc 01       	movw	r30, r24
    12b0:	20 83       	st	Z, r18
    12b2:	8d 81       	ldd	r24, Y+5	; 0x05
    12b4:	9e 81       	ldd	r25, Y+6	; 0x06
    12b6:	01 97       	sbiw	r24, 0x01	; 1
    12b8:	8d 83       	std	Y+5, r24	; 0x05
    12ba:	9e 83       	std	Y+6, r25	; 0x06
    12bc:	8d 81       	ldd	r24, Y+5	; 0x05
    12be:	9e 81       	ldd	r25, Y+6	; 0x06
    12c0:	21 e3       	ldi	r18, 0x31	; 49
    12c2:	fc 01       	movw	r30, r24
    12c4:	20 83       	st	Z, r18
    12c6:	8d 81       	ldd	r24, Y+5	; 0x05
    12c8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ca:	01 97       	sbiw	r24, 0x01	; 1
    12cc:	8d 83       	std	Y+5, r24	; 0x05
    12ce:	9e 83       	std	Y+6, r25	; 0x06
    12d0:	8d 81       	ldd	r24, Y+5	; 0x05
    12d2:	9e 81       	ldd	r25, Y+6	; 0x06
    12d4:	20 e8       	ldi	r18, 0x80	; 128
    12d6:	fc 01       	movw	r30, r24
    12d8:	20 83       	st	Z, r18
    12da:	8d 81       	ldd	r24, Y+5	; 0x05
    12dc:	9e 81       	ldd	r25, Y+6	; 0x06
    12de:	01 97       	sbiw	r24, 0x01	; 1
    12e0:	8d 83       	std	Y+5, r24	; 0x05
    12e2:	9e 83       	std	Y+6, r25	; 0x06
    12e4:	8d 81       	ldd	r24, Y+5	; 0x05
    12e6:	9e 81       	ldd	r25, Y+6	; 0x06
    12e8:	27 e8       	ldi	r18, 0x87	; 135
    12ea:	fc 01       	movw	r30, r24
    12ec:	20 83       	st	Z, r18
    12ee:	8d 81       	ldd	r24, Y+5	; 0x05
    12f0:	9e 81       	ldd	r25, Y+6	; 0x06
    12f2:	01 97       	sbiw	r24, 0x01	; 1
    12f4:	8d 83       	std	Y+5, r24	; 0x05
    12f6:	9e 83       	std	Y+6, r25	; 0x06
    12f8:	8d 81       	ldd	r24, Y+5	; 0x05
    12fa:	9e 81       	ldd	r25, Y+6	; 0x06
    12fc:	fc 01       	movw	r30, r24
    12fe:	10 82       	st	Z, r1
    1300:	8d 81       	ldd	r24, Y+5	; 0x05
    1302:	9e 81       	ldd	r25, Y+6	; 0x06
    1304:	01 97       	sbiw	r24, 0x01	; 1
    1306:	8d 83       	std	Y+5, r24	; 0x05
    1308:	9e 83       	std	Y+6, r25	; 0x06
    130a:	8d 81       	ldd	r24, Y+5	; 0x05
    130c:	9e 81       	ldd	r25, Y+6	; 0x06
    130e:	fc 01       	movw	r30, r24
    1310:	10 82       	st	Z, r1
    1312:	8d 81       	ldd	r24, Y+5	; 0x05
    1314:	9e 81       	ldd	r25, Y+6	; 0x06
    1316:	01 97       	sbiw	r24, 0x01	; 1
    1318:	8d 83       	std	Y+5, r24	; 0x05
    131a:	9e 83       	std	Y+6, r25	; 0x06
    131c:	8d 81       	ldd	r24, Y+5	; 0x05
    131e:	9e 81       	ldd	r25, Y+6	; 0x06
    1320:	22 e0       	ldi	r18, 0x02	; 2
    1322:	fc 01       	movw	r30, r24
    1324:	20 83       	st	Z, r18
    1326:	8d 81       	ldd	r24, Y+5	; 0x05
    1328:	9e 81       	ldd	r25, Y+6	; 0x06
    132a:	01 97       	sbiw	r24, 0x01	; 1
    132c:	8d 83       	std	Y+5, r24	; 0x05
    132e:	9e 83       	std	Y+6, r25	; 0x06
    1330:	8d 81       	ldd	r24, Y+5	; 0x05
    1332:	9e 81       	ldd	r25, Y+6	; 0x06
    1334:	23 e0       	ldi	r18, 0x03	; 3
    1336:	fc 01       	movw	r30, r24
    1338:	20 83       	st	Z, r18
    133a:	8d 81       	ldd	r24, Y+5	; 0x05
    133c:	9e 81       	ldd	r25, Y+6	; 0x06
    133e:	01 97       	sbiw	r24, 0x01	; 1
    1340:	8d 83       	std	Y+5, r24	; 0x05
    1342:	9e 83       	std	Y+6, r25	; 0x06
    1344:	8d 81       	ldd	r24, Y+5	; 0x05
    1346:	9e 81       	ldd	r25, Y+6	; 0x06
    1348:	24 e0       	ldi	r18, 0x04	; 4
    134a:	fc 01       	movw	r30, r24
    134c:	20 83       	st	Z, r18
    134e:	8d 81       	ldd	r24, Y+5	; 0x05
    1350:	9e 81       	ldd	r25, Y+6	; 0x06
    1352:	01 97       	sbiw	r24, 0x01	; 1
    1354:	8d 83       	std	Y+5, r24	; 0x05
    1356:	9e 83       	std	Y+6, r25	; 0x06
    1358:	8d 81       	ldd	r24, Y+5	; 0x05
    135a:	9e 81       	ldd	r25, Y+6	; 0x06
    135c:	25 e0       	ldi	r18, 0x05	; 5
    135e:	fc 01       	movw	r30, r24
    1360:	20 83       	st	Z, r18
    1362:	8d 81       	ldd	r24, Y+5	; 0x05
    1364:	9e 81       	ldd	r25, Y+6	; 0x06
    1366:	01 97       	sbiw	r24, 0x01	; 1
    1368:	8d 83       	std	Y+5, r24	; 0x05
    136a:	9e 83       	std	Y+6, r25	; 0x06
    136c:	8d 81       	ldd	r24, Y+5	; 0x05
    136e:	9e 81       	ldd	r25, Y+6	; 0x06
    1370:	26 e0       	ldi	r18, 0x06	; 6
    1372:	fc 01       	movw	r30, r24
    1374:	20 83       	st	Z, r18
    1376:	8d 81       	ldd	r24, Y+5	; 0x05
    1378:	9e 81       	ldd	r25, Y+6	; 0x06
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	8d 83       	std	Y+5, r24	; 0x05
    137e:	9e 83       	std	Y+6, r25	; 0x06
    1380:	8d 81       	ldd	r24, Y+5	; 0x05
    1382:	9e 81       	ldd	r25, Y+6	; 0x06
    1384:	27 e0       	ldi	r18, 0x07	; 7
    1386:	fc 01       	movw	r30, r24
    1388:	20 83       	st	Z, r18
    138a:	8d 81       	ldd	r24, Y+5	; 0x05
    138c:	9e 81       	ldd	r25, Y+6	; 0x06
    138e:	01 97       	sbiw	r24, 0x01	; 1
    1390:	8d 83       	std	Y+5, r24	; 0x05
    1392:	9e 83       	std	Y+6, r25	; 0x06
    1394:	8d 81       	ldd	r24, Y+5	; 0x05
    1396:	9e 81       	ldd	r25, Y+6	; 0x06
    1398:	28 e0       	ldi	r18, 0x08	; 8
    139a:	fc 01       	movw	r30, r24
    139c:	20 83       	st	Z, r18
    139e:	8d 81       	ldd	r24, Y+5	; 0x05
    13a0:	9e 81       	ldd	r25, Y+6	; 0x06
    13a2:	01 97       	sbiw	r24, 0x01	; 1
    13a4:	8d 83       	std	Y+5, r24	; 0x05
    13a6:	9e 83       	std	Y+6, r25	; 0x06
    13a8:	8d 81       	ldd	r24, Y+5	; 0x05
    13aa:	9e 81       	ldd	r25, Y+6	; 0x06
    13ac:	29 e0       	ldi	r18, 0x09	; 9
    13ae:	fc 01       	movw	r30, r24
    13b0:	20 83       	st	Z, r18
    13b2:	8d 81       	ldd	r24, Y+5	; 0x05
    13b4:	9e 81       	ldd	r25, Y+6	; 0x06
    13b6:	01 97       	sbiw	r24, 0x01	; 1
    13b8:	8d 83       	std	Y+5, r24	; 0x05
    13ba:	9e 83       	std	Y+6, r25	; 0x06
    13bc:	8d 81       	ldd	r24, Y+5	; 0x05
    13be:	9e 81       	ldd	r25, Y+6	; 0x06
    13c0:	20 e1       	ldi	r18, 0x10	; 16
    13c2:	fc 01       	movw	r30, r24
    13c4:	20 83       	st	Z, r18
    13c6:	8d 81       	ldd	r24, Y+5	; 0x05
    13c8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ca:	01 97       	sbiw	r24, 0x01	; 1
    13cc:	8d 83       	std	Y+5, r24	; 0x05
    13ce:	9e 83       	std	Y+6, r25	; 0x06
    13d0:	8d 81       	ldd	r24, Y+5	; 0x05
    13d2:	9e 81       	ldd	r25, Y+6	; 0x06
    13d4:	21 e1       	ldi	r18, 0x11	; 17
    13d6:	fc 01       	movw	r30, r24
    13d8:	20 83       	st	Z, r18
    13da:	8d 81       	ldd	r24, Y+5	; 0x05
    13dc:	9e 81       	ldd	r25, Y+6	; 0x06
    13de:	01 97       	sbiw	r24, 0x01	; 1
    13e0:	8d 83       	std	Y+5, r24	; 0x05
    13e2:	9e 83       	std	Y+6, r25	; 0x06
    13e4:	8d 81       	ldd	r24, Y+5	; 0x05
    13e6:	9e 81       	ldd	r25, Y+6	; 0x06
    13e8:	22 e1       	ldi	r18, 0x12	; 18
    13ea:	fc 01       	movw	r30, r24
    13ec:	20 83       	st	Z, r18
    13ee:	8d 81       	ldd	r24, Y+5	; 0x05
    13f0:	9e 81       	ldd	r25, Y+6	; 0x06
    13f2:	01 97       	sbiw	r24, 0x01	; 1
    13f4:	8d 83       	std	Y+5, r24	; 0x05
    13f6:	9e 83       	std	Y+6, r25	; 0x06
    13f8:	8d 81       	ldd	r24, Y+5	; 0x05
    13fa:	9e 81       	ldd	r25, Y+6	; 0x06
    13fc:	23 e1       	ldi	r18, 0x13	; 19
    13fe:	fc 01       	movw	r30, r24
    1400:	20 83       	st	Z, r18
    1402:	8d 81       	ldd	r24, Y+5	; 0x05
    1404:	9e 81       	ldd	r25, Y+6	; 0x06
    1406:	01 97       	sbiw	r24, 0x01	; 1
    1408:	8d 83       	std	Y+5, r24	; 0x05
    140a:	9e 83       	std	Y+6, r25	; 0x06
    140c:	8d 81       	ldd	r24, Y+5	; 0x05
    140e:	9e 81       	ldd	r25, Y+6	; 0x06
    1410:	24 e1       	ldi	r18, 0x14	; 20
    1412:	fc 01       	movw	r30, r24
    1414:	20 83       	st	Z, r18
    1416:	8d 81       	ldd	r24, Y+5	; 0x05
    1418:	9e 81       	ldd	r25, Y+6	; 0x06
    141a:	01 97       	sbiw	r24, 0x01	; 1
    141c:	8d 83       	std	Y+5, r24	; 0x05
    141e:	9e 83       	std	Y+6, r25	; 0x06
    1420:	8d 81       	ldd	r24, Y+5	; 0x05
    1422:	9e 81       	ldd	r25, Y+6	; 0x06
    1424:	25 e1       	ldi	r18, 0x15	; 21
    1426:	fc 01       	movw	r30, r24
    1428:	20 83       	st	Z, r18
    142a:	8d 81       	ldd	r24, Y+5	; 0x05
    142c:	9e 81       	ldd	r25, Y+6	; 0x06
    142e:	01 97       	sbiw	r24, 0x01	; 1
    1430:	8d 83       	std	Y+5, r24	; 0x05
    1432:	9e 83       	std	Y+6, r25	; 0x06
    1434:	8d 81       	ldd	r24, Y+5	; 0x05
    1436:	9e 81       	ldd	r25, Y+6	; 0x06
    1438:	26 e1       	ldi	r18, 0x16	; 22
    143a:	fc 01       	movw	r30, r24
    143c:	20 83       	st	Z, r18
    143e:	8d 81       	ldd	r24, Y+5	; 0x05
    1440:	9e 81       	ldd	r25, Y+6	; 0x06
    1442:	01 97       	sbiw	r24, 0x01	; 1
    1444:	8d 83       	std	Y+5, r24	; 0x05
    1446:	9e 83       	std	Y+6, r25	; 0x06
    1448:	8d 81       	ldd	r24, Y+5	; 0x05
    144a:	9e 81       	ldd	r25, Y+6	; 0x06
    144c:	27 e1       	ldi	r18, 0x17	; 23
    144e:	fc 01       	movw	r30, r24
    1450:	20 83       	st	Z, r18
    1452:	8d 81       	ldd	r24, Y+5	; 0x05
    1454:	9e 81       	ldd	r25, Y+6	; 0x06
    1456:	01 97       	sbiw	r24, 0x01	; 1
    1458:	8d 83       	std	Y+5, r24	; 0x05
    145a:	9e 83       	std	Y+6, r25	; 0x06
    145c:	8d 81       	ldd	r24, Y+5	; 0x05
    145e:	9e 81       	ldd	r25, Y+6	; 0x06
    1460:	28 e1       	ldi	r18, 0x18	; 24
    1462:	fc 01       	movw	r30, r24
    1464:	20 83       	st	Z, r18
    1466:	8d 81       	ldd	r24, Y+5	; 0x05
    1468:	9e 81       	ldd	r25, Y+6	; 0x06
    146a:	01 97       	sbiw	r24, 0x01	; 1
    146c:	8d 83       	std	Y+5, r24	; 0x05
    146e:	9e 83       	std	Y+6, r25	; 0x06
    1470:	8d 81       	ldd	r24, Y+5	; 0x05
    1472:	9e 81       	ldd	r25, Y+6	; 0x06
    1474:	29 e1       	ldi	r18, 0x19	; 25
    1476:	fc 01       	movw	r30, r24
    1478:	20 83       	st	Z, r18
    147a:	8d 81       	ldd	r24, Y+5	; 0x05
    147c:	9e 81       	ldd	r25, Y+6	; 0x06
    147e:	01 97       	sbiw	r24, 0x01	; 1
    1480:	8d 83       	std	Y+5, r24	; 0x05
    1482:	9e 83       	std	Y+6, r25	; 0x06
    1484:	8d 81       	ldd	r24, Y+5	; 0x05
    1486:	9e 81       	ldd	r25, Y+6	; 0x06
    1488:	20 e2       	ldi	r18, 0x20	; 32
    148a:	fc 01       	movw	r30, r24
    148c:	20 83       	st	Z, r18
    148e:	8d 81       	ldd	r24, Y+5	; 0x05
    1490:	9e 81       	ldd	r25, Y+6	; 0x06
    1492:	01 97       	sbiw	r24, 0x01	; 1
    1494:	8d 83       	std	Y+5, r24	; 0x05
    1496:	9e 83       	std	Y+6, r25	; 0x06
    1498:	8d 81       	ldd	r24, Y+5	; 0x05
    149a:	9e 81       	ldd	r25, Y+6	; 0x06
    149c:	21 e2       	ldi	r18, 0x21	; 33
    149e:	fc 01       	movw	r30, r24
    14a0:	20 83       	st	Z, r18
    14a2:	8d 81       	ldd	r24, Y+5	; 0x05
    14a4:	9e 81       	ldd	r25, Y+6	; 0x06
    14a6:	01 97       	sbiw	r24, 0x01	; 1
    14a8:	8d 83       	std	Y+5, r24	; 0x05
    14aa:	9e 83       	std	Y+6, r25	; 0x06
    14ac:	8d 81       	ldd	r24, Y+5	; 0x05
    14ae:	9e 81       	ldd	r25, Y+6	; 0x06
    14b0:	22 e2       	ldi	r18, 0x22	; 34
    14b2:	fc 01       	movw	r30, r24
    14b4:	20 83       	st	Z, r18
    14b6:	8d 81       	ldd	r24, Y+5	; 0x05
    14b8:	9e 81       	ldd	r25, Y+6	; 0x06
    14ba:	01 97       	sbiw	r24, 0x01	; 1
    14bc:	8d 83       	std	Y+5, r24	; 0x05
    14be:	9e 83       	std	Y+6, r25	; 0x06
    14c0:	8d 81       	ldd	r24, Y+5	; 0x05
    14c2:	9e 81       	ldd	r25, Y+6	; 0x06
    14c4:	23 e2       	ldi	r18, 0x23	; 35
    14c6:	fc 01       	movw	r30, r24
    14c8:	20 83       	st	Z, r18
    14ca:	8d 81       	ldd	r24, Y+5	; 0x05
    14cc:	9e 81       	ldd	r25, Y+6	; 0x06
    14ce:	01 97       	sbiw	r24, 0x01	; 1
    14d0:	8d 83       	std	Y+5, r24	; 0x05
    14d2:	9e 83       	std	Y+6, r25	; 0x06
    14d4:	89 85       	ldd	r24, Y+9	; 0x09
    14d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d8:	cc 01       	movw	r24, r24
    14da:	a0 e0       	ldi	r26, 0x00	; 0
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	89 83       	std	Y+1, r24	; 0x01
    14e0:	9a 83       	std	Y+2, r25	; 0x02
    14e2:	ab 83       	std	Y+3, r26	; 0x03
    14e4:	bc 83       	std	Y+4, r27	; 0x04
    14e6:	29 81       	ldd	r18, Y+1	; 0x01
    14e8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ea:	9e 81       	ldd	r25, Y+6	; 0x06
    14ec:	fc 01       	movw	r30, r24
    14ee:	20 83       	st	Z, r18
    14f0:	8d 81       	ldd	r24, Y+5	; 0x05
    14f2:	9e 81       	ldd	r25, Y+6	; 0x06
    14f4:	01 97       	sbiw	r24, 0x01	; 1
    14f6:	8d 83       	std	Y+5, r24	; 0x05
    14f8:	9e 83       	std	Y+6, r25	; 0x06
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	9a 81       	ldd	r25, Y+2	; 0x02
    14fe:	ab 81       	ldd	r26, Y+3	; 0x03
    1500:	bc 81       	ldd	r27, Y+4	; 0x04
    1502:	89 2f       	mov	r24, r25
    1504:	9a 2f       	mov	r25, r26
    1506:	ab 2f       	mov	r26, r27
    1508:	bb 27       	eor	r27, r27
    150a:	89 83       	std	Y+1, r24	; 0x01
    150c:	9a 83       	std	Y+2, r25	; 0x02
    150e:	ab 83       	std	Y+3, r26	; 0x03
    1510:	bc 83       	std	Y+4, r27	; 0x04
    1512:	29 81       	ldd	r18, Y+1	; 0x01
    1514:	8d 81       	ldd	r24, Y+5	; 0x05
    1516:	9e 81       	ldd	r25, Y+6	; 0x06
    1518:	fc 01       	movw	r30, r24
    151a:	20 83       	st	Z, r18
    151c:	8d 81       	ldd	r24, Y+5	; 0x05
    151e:	9e 81       	ldd	r25, Y+6	; 0x06
    1520:	01 97       	sbiw	r24, 0x01	; 1
    1522:	8d 83       	std	Y+5, r24	; 0x05
    1524:	9e 83       	std	Y+6, r25	; 0x06
    1526:	8d 81       	ldd	r24, Y+5	; 0x05
    1528:	9e 81       	ldd	r25, Y+6	; 0x06
    152a:	26 e2       	ldi	r18, 0x26	; 38
    152c:	fc 01       	movw	r30, r24
    152e:	20 83       	st	Z, r18
    1530:	8d 81       	ldd	r24, Y+5	; 0x05
    1532:	9e 81       	ldd	r25, Y+6	; 0x06
    1534:	01 97       	sbiw	r24, 0x01	; 1
    1536:	8d 83       	std	Y+5, r24	; 0x05
    1538:	9e 83       	std	Y+6, r25	; 0x06
    153a:	8d 81       	ldd	r24, Y+5	; 0x05
    153c:	9e 81       	ldd	r25, Y+6	; 0x06
    153e:	27 e2       	ldi	r18, 0x27	; 39
    1540:	fc 01       	movw	r30, r24
    1542:	20 83       	st	Z, r18
    1544:	8d 81       	ldd	r24, Y+5	; 0x05
    1546:	9e 81       	ldd	r25, Y+6	; 0x06
    1548:	01 97       	sbiw	r24, 0x01	; 1
    154a:	8d 83       	std	Y+5, r24	; 0x05
    154c:	9e 83       	std	Y+6, r25	; 0x06
    154e:	8d 81       	ldd	r24, Y+5	; 0x05
    1550:	9e 81       	ldd	r25, Y+6	; 0x06
    1552:	28 e2       	ldi	r18, 0x28	; 40
    1554:	fc 01       	movw	r30, r24
    1556:	20 83       	st	Z, r18
    1558:	8d 81       	ldd	r24, Y+5	; 0x05
    155a:	9e 81       	ldd	r25, Y+6	; 0x06
    155c:	01 97       	sbiw	r24, 0x01	; 1
    155e:	8d 83       	std	Y+5, r24	; 0x05
    1560:	9e 83       	std	Y+6, r25	; 0x06
    1562:	8d 81       	ldd	r24, Y+5	; 0x05
    1564:	9e 81       	ldd	r25, Y+6	; 0x06
    1566:	29 e2       	ldi	r18, 0x29	; 41
    1568:	fc 01       	movw	r30, r24
    156a:	20 83       	st	Z, r18
    156c:	8d 81       	ldd	r24, Y+5	; 0x05
    156e:	9e 81       	ldd	r25, Y+6	; 0x06
    1570:	01 97       	sbiw	r24, 0x01	; 1
    1572:	8d 83       	std	Y+5, r24	; 0x05
    1574:	9e 83       	std	Y+6, r25	; 0x06
    1576:	8d 81       	ldd	r24, Y+5	; 0x05
    1578:	9e 81       	ldd	r25, Y+6	; 0x06
    157a:	20 e3       	ldi	r18, 0x30	; 48
    157c:	fc 01       	movw	r30, r24
    157e:	20 83       	st	Z, r18
    1580:	8d 81       	ldd	r24, Y+5	; 0x05
    1582:	9e 81       	ldd	r25, Y+6	; 0x06
    1584:	01 97       	sbiw	r24, 0x01	; 1
    1586:	8d 83       	std	Y+5, r24	; 0x05
    1588:	9e 83       	std	Y+6, r25	; 0x06
    158a:	8d 81       	ldd	r24, Y+5	; 0x05
    158c:	9e 81       	ldd	r25, Y+6	; 0x06
    158e:	2a 96       	adiw	r28, 0x0a	; 10
    1590:	cd bf       	out	0x3d, r28	; 61
    1592:	de bf       	out	0x3e, r29	; 62
    1594:	df 91       	pop	r29
    1596:	cf 91       	pop	r28
    1598:	08 95       	ret

0000159a <xPortStartScheduler>:
    159a:	cf 93       	push	r28
    159c:	df 93       	push	r29
    159e:	cd b7       	in	r28, 0x3d	; 61
    15a0:	de b7       	in	r29, 0x3e	; 62
    15a2:	0e 94 14 0c 	call	0x1828	; 0x1828 <prvSetupTimerInterrupt>
    15a6:	a0 91 70 30 	lds	r26, 0x3070	; 0x803070 <pxCurrentTCB>
    15aa:	b0 91 71 30 	lds	r27, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    15ae:	0d 90       	ld	r0, X+
    15b0:	0d be       	out	0x3d, r0	; 61
    15b2:	0d 90       	ld	r0, X+
    15b4:	0e be       	out	0x3e, r0	; 62
    15b6:	ef 91       	pop	r30
    15b8:	df 91       	pop	r29
    15ba:	cf 91       	pop	r28
    15bc:	bf 91       	pop	r27
    15be:	af 91       	pop	r26
    15c0:	9f 91       	pop	r25
    15c2:	8f 91       	pop	r24
    15c4:	7f 91       	pop	r23
    15c6:	6f 91       	pop	r22
    15c8:	5f 91       	pop	r21
    15ca:	4f 91       	pop	r20
    15cc:	3f 91       	pop	r19
    15ce:	2f 91       	pop	r18
    15d0:	1f 91       	pop	r17
    15d2:	0f 91       	pop	r16
    15d4:	ff 90       	pop	r15
    15d6:	ef 90       	pop	r14
    15d8:	df 90       	pop	r13
    15da:	cf 90       	pop	r12
    15dc:	bf 90       	pop	r11
    15de:	af 90       	pop	r10
    15e0:	9f 90       	pop	r9
    15e2:	8f 90       	pop	r8
    15e4:	7f 90       	pop	r7
    15e6:	6f 90       	pop	r6
    15e8:	5f 90       	pop	r5
    15ea:	4f 90       	pop	r4
    15ec:	3f 90       	pop	r3
    15ee:	2f 90       	pop	r2
    15f0:	1f 90       	pop	r1
    15f2:	0f 90       	pop	r0
    15f4:	ff 91       	pop	r31
    15f6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    15fa:	ff 91       	pop	r31
    15fc:	ff bf       	out	0x3f, r31	; 63
    15fe:	ff 91       	pop	r31
    1600:	08 95       	ret
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	df 91       	pop	r29
    1606:	cf 91       	pop	r28
    1608:	08 95       	ret

0000160a <vPortYield>:
// 
//
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    160a:	ff 93       	push	r31
    160c:	ff b7       	in	r31, 0x3f	; 63
    160e:	ff 93       	push	r31
    1610:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1614:	ff 93       	push	r31
    1616:	f8 7f       	andi	r31, 0xF8	; 248
    1618:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    161c:	0f 92       	push	r0
    161e:	1f 92       	push	r1
    1620:	11 24       	eor	r1, r1
    1622:	2f 92       	push	r2
    1624:	3f 92       	push	r3
    1626:	4f 92       	push	r4
    1628:	5f 92       	push	r5
    162a:	6f 92       	push	r6
    162c:	7f 92       	push	r7
    162e:	8f 92       	push	r8
    1630:	9f 92       	push	r9
    1632:	af 92       	push	r10
    1634:	bf 92       	push	r11
    1636:	cf 92       	push	r12
    1638:	df 92       	push	r13
    163a:	ef 92       	push	r14
    163c:	ff 92       	push	r15
    163e:	0f 93       	push	r16
    1640:	1f 93       	push	r17
    1642:	2f 93       	push	r18
    1644:	3f 93       	push	r19
    1646:	4f 93       	push	r20
    1648:	5f 93       	push	r21
    164a:	6f 93       	push	r22
    164c:	7f 93       	push	r23
    164e:	8f 93       	push	r24
    1650:	9f 93       	push	r25
    1652:	af 93       	push	r26
    1654:	bf 93       	push	r27
    1656:	cf 93       	push	r28
    1658:	df 93       	push	r29
    165a:	ef 93       	push	r30
    165c:	a0 91 70 30 	lds	r26, 0x3070	; 0x803070 <pxCurrentTCB>
    1660:	b0 91 71 30 	lds	r27, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    1664:	0d b6       	in	r0, 0x3d	; 61
    1666:	0d 92       	st	X+, r0
    1668:	0e b6       	in	r0, 0x3e	; 62
    166a:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    166c:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1670:	a0 91 70 30 	lds	r26, 0x3070	; 0x803070 <pxCurrentTCB>
    1674:	b0 91 71 30 	lds	r27, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    1678:	0d 90       	ld	r0, X+
    167a:	0d be       	out	0x3d, r0	; 61
    167c:	0d 90       	ld	r0, X+
    167e:	0e be       	out	0x3e, r0	; 62
    1680:	ef 91       	pop	r30
    1682:	df 91       	pop	r29
    1684:	cf 91       	pop	r28
    1686:	bf 91       	pop	r27
    1688:	af 91       	pop	r26
    168a:	9f 91       	pop	r25
    168c:	8f 91       	pop	r24
    168e:	7f 91       	pop	r23
    1690:	6f 91       	pop	r22
    1692:	5f 91       	pop	r21
    1694:	4f 91       	pop	r20
    1696:	3f 91       	pop	r19
    1698:	2f 91       	pop	r18
    169a:	1f 91       	pop	r17
    169c:	0f 91       	pop	r16
    169e:	ff 90       	pop	r15
    16a0:	ef 90       	pop	r14
    16a2:	df 90       	pop	r13
    16a4:	cf 90       	pop	r12
    16a6:	bf 90       	pop	r11
    16a8:	af 90       	pop	r10
    16aa:	9f 90       	pop	r9
    16ac:	8f 90       	pop	r8
    16ae:	7f 90       	pop	r7
    16b0:	6f 90       	pop	r6
    16b2:	5f 90       	pop	r5
    16b4:	4f 90       	pop	r4
    16b6:	3f 90       	pop	r3
    16b8:	2f 90       	pop	r2
    16ba:	1f 90       	pop	r1
    16bc:	0f 90       	pop	r0
    16be:	ff 91       	pop	r31
    16c0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    16c4:	ff 91       	pop	r31
    16c6:	ff bf       	out	0x3f, r31	; 63
    16c8:	ff 91       	pop	r31
	asm volatile ( "ret" );
    16ca:	08 95       	ret
	...

000016ce <portTaskSwitchContext>:
	//-----------------------------------------------------------
	//
	// The task switch is deferred until there is no more nesting.
	//
	void portTaskSwitchContext(signed portBASE_TYPE xSwitchRequired)
	{
    16ce:	1f 93       	push	r17
    16d0:	cf 93       	push	r28
    16d2:	df 93       	push	r29
    16d4:	1f 92       	push	r1
    16d6:	cd b7       	in	r28, 0x3d	; 61
    16d8:	de b7       	in	r29, 0x3e	; 62
    16da:	89 83       	std	Y+1, r24	; 0x01
		intTaskSwitchPending |= xSwitchRequired;					
    16dc:	80 91 3f 31 	lds	r24, 0x313F	; 0x80313f <intTaskSwitchPending>
    16e0:	98 2f       	mov	r25, r24
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
    16e4:	89 2b       	or	r24, r25
    16e6:	80 93 3f 31 	sts	0x313F, r24	; 0x80313f <intTaskSwitchPending>
																
		if(NOT_NESTING() && intTaskSwitchPending)					
    16ea:	80 ea       	ldi	r24, 0xA0	; 160
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	fc 01       	movw	r30, r24
    16f0:	80 81       	ld	r24, Z
    16f2:	81 30       	cpi	r24, 0x01	; 1
    16f4:	61 f0       	breq	.+24     	; 0x170e <portTaskSwitchContext+0x40>
    16f6:	80 ea       	ldi	r24, 0xA0	; 160
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	fc 01       	movw	r30, r24
    16fc:	80 81       	ld	r24, Z
    16fe:	82 30       	cpi	r24, 0x02	; 2
    1700:	31 f0       	breq	.+12     	; 0x170e <portTaskSwitchContext+0x40>
    1702:	80 ea       	ldi	r24, 0xA0	; 160
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	fc 01       	movw	r30, r24
    1708:	80 81       	ld	r24, Z
    170a:	84 30       	cpi	r24, 0x04	; 4
    170c:	79 f4       	brne	.+30     	; 0x172c <portTaskSwitchContext+0x5e>
    170e:	80 91 3f 31 	lds	r24, 0x313F	; 0x80313f <intTaskSwitchPending>
    1712:	88 23       	and	r24, r24
    1714:	59 f0       	breq	.+22     	; 0x172c <portTaskSwitchContext+0x5e>
		{															
			register unsigned portBASE_TYPE uxSavedPmicCtrlReg; 				
			extern void vTaskSwitchContext(void);   				
																
			// Critical section used, because vTaskSwitchContext handles FreeRTOS internal data structures.
 			uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR(); 
    1716:	0e 94 dd 08 	call	0x11ba	; 0x11ba <_portSetInterruptMaskFromIsr>
    171a:	18 2f       	mov	r17, r24
			intTaskSwitchPending = 0;								
    171c:	10 92 3f 31 	sts	0x313F, r1	; 0x80313f <intTaskSwitchPending>
			vTaskSwitchContext();                   				
    1720:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <vTaskSwitchContext>
			portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedPmicCtrlReg);
    1724:	80 ea       	ldi	r24, 0xA0	; 160
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	fc 01       	movw	r30, r24
    172a:	12 83       	std	Z+2, r17	; 0x02
		}                                          					
	}
    172c:	00 00       	nop
    172e:	0f 90       	pop	r0
    1730:	df 91       	pop	r29
    1732:	cf 91       	pop	r28
    1734:	1f 91       	pop	r17
    1736:	08 95       	ret

00001738 <portTaskIncrementTick>:
	// This routine is only an indirect call to vTaskIncrementTick because
	// a local variable is necessary. Local variables cannot be used directly
	// in a naked isr because of the lack of the frame pointer.
	//
	static void portTaskIncrementTick( void )
	{
    1738:	1f 93       	push	r17
    173a:	cf 93       	push	r28
    173c:	df 93       	push	r29
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
		register unsigned portBASE_TYPE uxSavedPmicCtrlReg;

 		uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR();
    1742:	0e 94 dd 08 	call	0x11ba	; 0x11ba <_portSetInterruptMaskFromIsr>
    1746:	18 2f       	mov	r17, r24
		xTaskIncrementTick();
    1748:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <xTaskIncrementTick>
 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedPmicCtrlReg );
    174c:	80 ea       	ldi	r24, 0xA0	; 160
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	fc 01       	movw	r30, r24
    1752:	12 83       	std	Z+2, r17	; 0x02
	}
    1754:	00 00       	nop
    1756:	df 91       	pop	r29
    1758:	cf 91       	pop	r28
    175a:	1f 91       	pop	r17
    175c:	08 95       	ret

0000175e <__vector_14>:
	// the context is saved at the start of vPortYieldFromTick().  The tick
	// count is incremented after the context is saved.
	//
	ISR(TCC0_OVF_vect, ISR_NAKED)
	{
		portSTART_ISR();
    175e:	ff 93       	push	r31
    1760:	ff b7       	in	r31, 0x3f	; 63
    1762:	ff 93       	push	r31
    1764:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1768:	ff 93       	push	r31
    176a:	f8 7f       	andi	r31, 0xF8	; 248
    176c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1770:	0f 92       	push	r0
    1772:	1f 92       	push	r1
    1774:	11 24       	eor	r1, r1
    1776:	2f 92       	push	r2
    1778:	3f 92       	push	r3
    177a:	4f 92       	push	r4
    177c:	5f 92       	push	r5
    177e:	6f 92       	push	r6
    1780:	7f 92       	push	r7
    1782:	8f 92       	push	r8
    1784:	9f 92       	push	r9
    1786:	af 92       	push	r10
    1788:	bf 92       	push	r11
    178a:	cf 92       	push	r12
    178c:	df 92       	push	r13
    178e:	ef 92       	push	r14
    1790:	ff 92       	push	r15
    1792:	0f 93       	push	r16
    1794:	1f 93       	push	r17
    1796:	2f 93       	push	r18
    1798:	3f 93       	push	r19
    179a:	4f 93       	push	r20
    179c:	5f 93       	push	r21
    179e:	6f 93       	push	r22
    17a0:	7f 93       	push	r23
    17a2:	8f 93       	push	r24
    17a4:	9f 93       	push	r25
    17a6:	af 93       	push	r26
    17a8:	bf 93       	push	r27
    17aa:	cf 93       	push	r28
    17ac:	df 93       	push	r29
    17ae:	ef 93       	push	r30
    17b0:	a0 91 70 30 	lds	r26, 0x3070	; 0x803070 <pxCurrentTCB>
    17b4:	b0 91 71 30 	lds	r27, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    17b8:	0d b6       	in	r0, 0x3d	; 61
    17ba:	0d 92       	st	X+, r0
    17bc:	0e b6       	in	r0, 0x3e	; 62
    17be:	0d 92       	st	X+, r0
		portTaskIncrementTick();
    17c0:	0e 94 9c 0b 	call	0x1738	; 0x1738 <portTaskIncrementTick>
		//always try a task switch, but only if on kernel interrupt level
		portEND_SWITCHING_ISR(pdTRUE); 
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	0e 94 67 0b 	call	0x16ce	; 0x16ce <portTaskSwitchContext>
    17ca:	a0 91 70 30 	lds	r26, 0x3070	; 0x803070 <pxCurrentTCB>
    17ce:	b0 91 71 30 	lds	r27, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    17d2:	0d 90       	ld	r0, X+
    17d4:	0d be       	out	0x3d, r0	; 61
    17d6:	0d 90       	ld	r0, X+
    17d8:	0e be       	out	0x3e, r0	; 62
    17da:	ef 91       	pop	r30
    17dc:	df 91       	pop	r29
    17de:	cf 91       	pop	r28
    17e0:	bf 91       	pop	r27
    17e2:	af 91       	pop	r26
    17e4:	9f 91       	pop	r25
    17e6:	8f 91       	pop	r24
    17e8:	7f 91       	pop	r23
    17ea:	6f 91       	pop	r22
    17ec:	5f 91       	pop	r21
    17ee:	4f 91       	pop	r20
    17f0:	3f 91       	pop	r19
    17f2:	2f 91       	pop	r18
    17f4:	1f 91       	pop	r17
    17f6:	0f 91       	pop	r16
    17f8:	ff 90       	pop	r15
    17fa:	ef 90       	pop	r14
    17fc:	df 90       	pop	r13
    17fe:	cf 90       	pop	r12
    1800:	bf 90       	pop	r11
    1802:	af 90       	pop	r10
    1804:	9f 90       	pop	r9
    1806:	8f 90       	pop	r8
    1808:	7f 90       	pop	r7
    180a:	6f 90       	pop	r6
    180c:	5f 90       	pop	r5
    180e:	4f 90       	pop	r4
    1810:	3f 90       	pop	r3
    1812:	2f 90       	pop	r2
    1814:	1f 90       	pop	r1
    1816:	0f 90       	pop	r0
    1818:	ff 91       	pop	r31
    181a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    181e:	ff 91       	pop	r31
    1820:	ff bf       	out	0x3f, r31	; 63
    1822:	ff 91       	pop	r31
    1824:	18 95       	reti
	...

00001828 <prvSetupTimerInterrupt>:
//-----------------------------------------------------------
//
// Setup of 16bit timer C0 to generate a tick interrupt in case of overflow.
//
static void prvSetupTimerInterrupt( void )
{
    1828:	cf 93       	push	r28
    182a:	df 93       	push	r29
    182c:	00 d0       	rcall	.+0      	; 0x182e <prvSetupTimerInterrupt+0x6>
    182e:	1f 92       	push	r1
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62

	unsigned portLONG ulOvfMatch;

	ulOvfMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    1834:	80 e0       	ldi	r24, 0x00	; 0
    1836:	9d e7       	ldi	r25, 0x7D	; 125
    1838:	a0 e0       	ldi	r26, 0x00	; 0
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	89 83       	std	Y+1, r24	; 0x01
    183e:	9a 83       	std	Y+2, r25	; 0x02
    1840:	ab 83       	std	Y+3, r26	; 0x03
    1842:	bc 83       	std	Y+4, r27	; 0x04

	// We only have 16bits so have to scale to get our required tick rate.
	ulOvfMatch /= portCLOCK_PRESCALER_TIMER0;
    1844:	89 81       	ldd	r24, Y+1	; 0x01
    1846:	9a 81       	ldd	r25, Y+2	; 0x02
    1848:	ab 81       	ldd	r26, Y+3	; 0x03
    184a:	bc 81       	ldd	r27, Y+4	; 0x04
    184c:	68 94       	set
    184e:	15 f8       	bld	r1, 5
    1850:	b6 95       	lsr	r27
    1852:	a7 95       	ror	r26
    1854:	97 95       	ror	r25
    1856:	87 95       	ror	r24
    1858:	16 94       	lsr	r1
    185a:	d1 f7       	brne	.-12     	; 0x1850 <prvSetupTimerInterrupt+0x28>
    185c:	89 83       	std	Y+1, r24	; 0x01
    185e:	9a 83       	std	Y+2, r25	; 0x02
    1860:	ab 83       	std	Y+3, r26	; 0x03
    1862:	bc 83       	std	Y+4, r27	; 0x04

	// Adjust for correct value. (because overflow clear if CNT > PER)
	ulOvfMatch -= ( unsigned portLONG ) 1;
    1864:	89 81       	ldd	r24, Y+1	; 0x01
    1866:	9a 81       	ldd	r25, Y+2	; 0x02
    1868:	ab 81       	ldd	r26, Y+3	; 0x03
    186a:	bc 81       	ldd	r27, Y+4	; 0x04
    186c:	01 97       	sbiw	r24, 0x01	; 1
    186e:	a1 09       	sbc	r26, r1
    1870:	b1 09       	sbc	r27, r1
    1872:	89 83       	std	Y+1, r24	; 0x01
    1874:	9a 83       	std	Y+2, r25	; 0x02
    1876:	ab 83       	std	Y+3, r26	; 0x03
    1878:	bc 83       	std	Y+4, r27	; 0x04

	// Setup overflow value
	TC_SetPeriod( &TCC0, ulOvfMatch);
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	98 e0       	ldi	r25, 0x08	; 8
    187e:	29 81       	ldd	r18, Y+1	; 0x01
    1880:	3a 81       	ldd	r19, Y+2	; 0x02
    1882:	fc 01       	movw	r30, r24
    1884:	26 a3       	std	Z+38, r18	; 0x26
    1886:	37 a3       	std	Z+39, r19	; 0x27
		
	// Setup clock source and compare match behaviour.
	TC0_ConfigClockSource( &TCC0, TC_CLKSEL_DIV64_gc);
    1888:	65 e0       	ldi	r22, 0x05	; 5
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	98 e0       	ldi	r25, 0x08	; 8
    188e:	0e 94 41 03 	call	0x682	; 0x682 <TC0_ConfigClockSource>

	// Enable the interrupt - this is okay as interrupts are currently globally disabled.
	// The tick interrupt may run in one of the three levels.
#if   configKERNEL_INTERRUPT_PRIORITY == 0
	TC0_SetOverflowIntLevel( &TCC0, TC_OVFINTLVL_LO_gc);	//low interrupt priority
    1892:	61 e0       	ldi	r22, 0x01	; 1
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	98 e0       	ldi	r25, 0x08	; 8
    1898:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TC0_SetOverflowIntLevel>
#elif configKERNEL_INTERRUPT_PRIORITY == 1
	TC0_SetOverflowIntLevel( &TCC0, TC_OVFINTLVL_MED_gc);	//medium interrupt priority
#elif configKERNEL_INTERRUPT_PRIORITY == 2
	TC0_SetOverflowIntLevel( &TCC0, TC_OVFINTLVL_HI_gc);	//high interrupt priority
#endif
}
    189c:	00 00       	nop
    189e:	24 96       	adiw	r28, 0x04	; 4
    18a0:	cd bf       	out	0x3d, r28	; 61
    18a2:	de bf       	out	0x3e, r29	; 62
    18a4:	df 91       	pop	r29
    18a6:	cf 91       	pop	r28
    18a8:	08 95       	ret

000018aa <xQueueGenericReset>:
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
    18aa:	cf 93       	push	r28
    18ac:	df 93       	push	r29
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
    18b2:	25 97       	sbiw	r28, 0x05	; 5
    18b4:	cd bf       	out	0x3d, r28	; 61
    18b6:	de bf       	out	0x3e, r29	; 62
    18b8:	8b 83       	std	Y+3, r24	; 0x03
    18ba:	9c 83       	std	Y+4, r25	; 0x04
    18bc:	6d 83       	std	Y+5, r22	; 0x05
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	9c 81       	ldd	r25, Y+4	; 0x04
    18c2:	89 83       	std	Y+1, r24	; 0x01
    18c4:	9a 83       	std	Y+2, r25	; 0x02
    18c6:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    18ca:	ff 93       	push	r31
    18cc:	f8 7f       	andi	r31, 0xF8	; 248
    18ce:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    18d2:	89 81       	ldd	r24, Y+1	; 0x01
    18d4:	9a 81       	ldd	r25, Y+2	; 0x02
    18d6:	fc 01       	movw	r30, r24
    18d8:	80 81       	ld	r24, Z
    18da:	91 81       	ldd	r25, Z+1	; 0x01
    18dc:	29 81       	ldd	r18, Y+1	; 0x01
    18de:	3a 81       	ldd	r19, Y+2	; 0x02
    18e0:	f9 01       	movw	r30, r18
    18e2:	27 8d       	ldd	r18, Z+31	; 0x1f
    18e4:	42 2f       	mov	r20, r18
    18e6:	50 e0       	ldi	r21, 0x00	; 0
    18e8:	29 81       	ldd	r18, Y+1	; 0x01
    18ea:	3a 81       	ldd	r19, Y+2	; 0x02
    18ec:	f9 01       	movw	r30, r18
    18ee:	20 a1       	ldd	r18, Z+32	; 0x20
    18f0:	22 2f       	mov	r18, r18
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	42 9f       	mul	r20, r18
    18f6:	b0 01       	movw	r22, r0
    18f8:	43 9f       	mul	r20, r19
    18fa:	70 0d       	add	r23, r0
    18fc:	52 9f       	mul	r21, r18
    18fe:	70 0d       	add	r23, r0
    1900:	11 24       	eor	r1, r1
    1902:	9b 01       	movw	r18, r22
    1904:	28 0f       	add	r18, r24
    1906:	39 1f       	adc	r19, r25
    1908:	89 81       	ldd	r24, Y+1	; 0x01
    190a:	9a 81       	ldd	r25, Y+2	; 0x02
    190c:	fc 01       	movw	r30, r24
    190e:	22 83       	std	Z+2, r18	; 0x02
    1910:	33 83       	std	Z+3, r19	; 0x03
    1912:	89 81       	ldd	r24, Y+1	; 0x01
    1914:	9a 81       	ldd	r25, Y+2	; 0x02
    1916:	fc 01       	movw	r30, r24
    1918:	16 8e       	std	Z+30, r1	; 0x1e
    191a:	89 81       	ldd	r24, Y+1	; 0x01
    191c:	9a 81       	ldd	r25, Y+2	; 0x02
    191e:	fc 01       	movw	r30, r24
    1920:	20 81       	ld	r18, Z
    1922:	31 81       	ldd	r19, Z+1	; 0x01
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	9a 81       	ldd	r25, Y+2	; 0x02
    1928:	fc 01       	movw	r30, r24
    192a:	24 83       	std	Z+4, r18	; 0x04
    192c:	35 83       	std	Z+5, r19	; 0x05
    192e:	89 81       	ldd	r24, Y+1	; 0x01
    1930:	9a 81       	ldd	r25, Y+2	; 0x02
    1932:	fc 01       	movw	r30, r24
    1934:	80 81       	ld	r24, Z
    1936:	91 81       	ldd	r25, Z+1	; 0x01
    1938:	29 81       	ldd	r18, Y+1	; 0x01
    193a:	3a 81       	ldd	r19, Y+2	; 0x02
    193c:	f9 01       	movw	r30, r18
    193e:	27 8d       	ldd	r18, Z+31	; 0x1f
    1940:	22 2f       	mov	r18, r18
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	a9 01       	movw	r20, r18
    1946:	41 50       	subi	r20, 0x01	; 1
    1948:	51 09       	sbc	r21, r1
    194a:	29 81       	ldd	r18, Y+1	; 0x01
    194c:	3a 81       	ldd	r19, Y+2	; 0x02
    194e:	f9 01       	movw	r30, r18
    1950:	20 a1       	ldd	r18, Z+32	; 0x20
    1952:	22 2f       	mov	r18, r18
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	42 9f       	mul	r20, r18
    1958:	b0 01       	movw	r22, r0
    195a:	43 9f       	mul	r20, r19
    195c:	70 0d       	add	r23, r0
    195e:	52 9f       	mul	r21, r18
    1960:	70 0d       	add	r23, r0
    1962:	11 24       	eor	r1, r1
    1964:	9b 01       	movw	r18, r22
    1966:	28 0f       	add	r18, r24
    1968:	39 1f       	adc	r19, r25
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	9a 81       	ldd	r25, Y+2	; 0x02
    196e:	fc 01       	movw	r30, r24
    1970:	26 83       	std	Z+6, r18	; 0x06
    1972:	37 83       	std	Z+7, r19	; 0x07
    1974:	89 81       	ldd	r24, Y+1	; 0x01
    1976:	9a 81       	ldd	r25, Y+2	; 0x02
    1978:	2f ef       	ldi	r18, 0xFF	; 255
    197a:	fc 01       	movw	r30, r24
    197c:	21 a3       	std	Z+33, r18	; 0x21
    197e:	89 81       	ldd	r24, Y+1	; 0x01
    1980:	9a 81       	ldd	r25, Y+2	; 0x02
    1982:	2f ef       	ldi	r18, 0xFF	; 255
    1984:	fc 01       	movw	r30, r24
    1986:	22 a3       	std	Z+34, r18	; 0x22
    1988:	8d 81       	ldd	r24, Y+5	; 0x05
    198a:	88 23       	and	r24, r24
    198c:	81 f4       	brne	.+32     	; 0x19ae <xQueueGenericReset+0x104>
    198e:	89 81       	ldd	r24, Y+1	; 0x01
    1990:	9a 81       	ldd	r25, Y+2	; 0x02
    1992:	fc 01       	movw	r30, r24
    1994:	80 85       	ldd	r24, Z+8	; 0x08
    1996:	88 23       	and	r24, r24
    1998:	a1 f0       	breq	.+40     	; 0x19c2 <xQueueGenericReset+0x118>
    199a:	89 81       	ldd	r24, Y+1	; 0x01
    199c:	9a 81       	ldd	r25, Y+2	; 0x02
    199e:	08 96       	adiw	r24, 0x08	; 8
    19a0:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <xTaskRemoveFromEventList>
    19a4:	88 23       	and	r24, r24
    19a6:	69 f0       	breq	.+26     	; 0x19c2 <xQueueGenericReset+0x118>
    19a8:	0e 94 05 0b 	call	0x160a	; 0x160a <vPortYield>
    19ac:	0a c0       	rjmp	.+20     	; 0x19c2 <xQueueGenericReset+0x118>
    19ae:	89 81       	ldd	r24, Y+1	; 0x01
    19b0:	9a 81       	ldd	r25, Y+2	; 0x02
    19b2:	08 96       	adiw	r24, 0x08	; 8
    19b4:	0e 94 6e 07 	call	0xedc	; 0xedc <vListInitialise>
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	9a 81       	ldd	r25, Y+2	; 0x02
    19bc:	43 96       	adiw	r24, 0x13	; 19
    19be:	0e 94 6e 07 	call	0xedc	; 0xedc <vListInitialise>
    19c2:	ff 91       	pop	r31
    19c4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	25 96       	adiw	r28, 0x05	; 5
    19cc:	cd bf       	out	0x3d, r28	; 61
    19ce:	de bf       	out	0x3e, r29	; 62
    19d0:	df 91       	pop	r29
    19d2:	cf 91       	pop	r28
    19d4:	08 95       	ret

000019d6 <xQueueGenericCreate>:
    19d6:	0f 93       	push	r16
    19d8:	1f 93       	push	r17
    19da:	cf 93       	push	r28
    19dc:	df 93       	push	r29
    19de:	cd b7       	in	r28, 0x3d	; 61
    19e0:	de b7       	in	r29, 0x3e	; 62
    19e2:	29 97       	sbiw	r28, 0x09	; 9
    19e4:	cd bf       	out	0x3d, r28	; 61
    19e6:	de bf       	out	0x3e, r29	; 62
    19e8:	8f 83       	std	Y+7, r24	; 0x07
    19ea:	68 87       	std	Y+8, r22	; 0x08
    19ec:	49 87       	std	Y+9, r20	; 0x09
    19ee:	88 85       	ldd	r24, Y+8	; 0x08
    19f0:	88 23       	and	r24, r24
    19f2:	19 f4       	brne	.+6      	; 0x19fa <xQueueGenericCreate+0x24>
    19f4:	19 82       	std	Y+1, r1	; 0x01
    19f6:	1a 82       	std	Y+2, r1	; 0x02
    19f8:	0f c0       	rjmp	.+30     	; 0x1a18 <xQueueGenericCreate+0x42>
    19fa:	8f 81       	ldd	r24, Y+7	; 0x07
    19fc:	48 2f       	mov	r20, r24
    19fe:	50 e0       	ldi	r21, 0x00	; 0
    1a00:	88 85       	ldd	r24, Y+8	; 0x08
    1a02:	28 2f       	mov	r18, r24
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	42 9f       	mul	r20, r18
    1a08:	c0 01       	movw	r24, r0
    1a0a:	43 9f       	mul	r20, r19
    1a0c:	90 0d       	add	r25, r0
    1a0e:	52 9f       	mul	r21, r18
    1a10:	90 0d       	add	r25, r0
    1a12:	11 24       	eor	r1, r1
    1a14:	89 83       	std	Y+1, r24	; 0x01
    1a16:	9a 83       	std	Y+2, r25	; 0x02
    1a18:	89 81       	ldd	r24, Y+1	; 0x01
    1a1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1c:	85 96       	adiw	r24, 0x25	; 37
    1a1e:	0e 94 1c 07 	call	0xe38	; 0xe38 <pvPortMalloc>
    1a22:	8b 83       	std	Y+3, r24	; 0x03
    1a24:	9c 83       	std	Y+4, r25	; 0x04
    1a26:	8b 81       	ldd	r24, Y+3	; 0x03
    1a28:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2a:	89 2b       	or	r24, r25
    1a2c:	81 f0       	breq	.+32     	; 0x1a4e <xQueueGenericCreate+0x78>
    1a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a30:	9c 81       	ldd	r25, Y+4	; 0x04
    1a32:	85 96       	adiw	r24, 0x25	; 37
    1a34:	8d 83       	std	Y+5, r24	; 0x05
    1a36:	9e 83       	std	Y+6, r25	; 0x06
    1a38:	2b 81       	ldd	r18, Y+3	; 0x03
    1a3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a40:	89 01       	movw	r16, r18
    1a42:	29 85       	ldd	r18, Y+9	; 0x09
    1a44:	ac 01       	movw	r20, r24
    1a46:	68 85       	ldd	r22, Y+8	; 0x08
    1a48:	8f 81       	ldd	r24, Y+7	; 0x07
    1a4a:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <prvInitialiseNewQueue>
    1a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a50:	9c 81       	ldd	r25, Y+4	; 0x04
    1a52:	29 96       	adiw	r28, 0x09	; 9
    1a54:	cd bf       	out	0x3d, r28	; 61
    1a56:	de bf       	out	0x3e, r29	; 62
    1a58:	df 91       	pop	r29
    1a5a:	cf 91       	pop	r28
    1a5c:	1f 91       	pop	r17
    1a5e:	0f 91       	pop	r16
    1a60:	08 95       	ret

00001a62 <prvInitialiseNewQueue>:
    1a62:	0f 93       	push	r16
    1a64:	1f 93       	push	r17
    1a66:	cf 93       	push	r28
    1a68:	df 93       	push	r29
    1a6a:	cd b7       	in	r28, 0x3d	; 61
    1a6c:	de b7       	in	r29, 0x3e	; 62
    1a6e:	27 97       	sbiw	r28, 0x07	; 7
    1a70:	cd bf       	out	0x3d, r28	; 61
    1a72:	de bf       	out	0x3e, r29	; 62
    1a74:	89 83       	std	Y+1, r24	; 0x01
    1a76:	6a 83       	std	Y+2, r22	; 0x02
    1a78:	4b 83       	std	Y+3, r20	; 0x03
    1a7a:	5c 83       	std	Y+4, r21	; 0x04
    1a7c:	2d 83       	std	Y+5, r18	; 0x05
    1a7e:	0e 83       	std	Y+6, r16	; 0x06
    1a80:	1f 83       	std	Y+7, r17	; 0x07
    1a82:	8a 81       	ldd	r24, Y+2	; 0x02
    1a84:	88 23       	and	r24, r24
    1a86:	41 f4       	brne	.+16     	; 0x1a98 <prvInitialiseNewQueue+0x36>
    1a88:	8e 81       	ldd	r24, Y+6	; 0x06
    1a8a:	9f 81       	ldd	r25, Y+7	; 0x07
    1a8c:	2e 81       	ldd	r18, Y+6	; 0x06
    1a8e:	3f 81       	ldd	r19, Y+7	; 0x07
    1a90:	fc 01       	movw	r30, r24
    1a92:	20 83       	st	Z, r18
    1a94:	31 83       	std	Z+1, r19	; 0x01
    1a96:	07 c0       	rjmp	.+14     	; 0x1aa6 <prvInitialiseNewQueue+0x44>
    1a98:	8e 81       	ldd	r24, Y+6	; 0x06
    1a9a:	9f 81       	ldd	r25, Y+7	; 0x07
    1a9c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a9e:	3c 81       	ldd	r19, Y+4	; 0x04
    1aa0:	fc 01       	movw	r30, r24
    1aa2:	20 83       	st	Z, r18
    1aa4:	31 83       	std	Z+1, r19	; 0x01
    1aa6:	8e 81       	ldd	r24, Y+6	; 0x06
    1aa8:	9f 81       	ldd	r25, Y+7	; 0x07
    1aaa:	29 81       	ldd	r18, Y+1	; 0x01
    1aac:	fc 01       	movw	r30, r24
    1aae:	27 8f       	std	Z+31, r18	; 0x1f
    1ab0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ab2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ab4:	2a 81       	ldd	r18, Y+2	; 0x02
    1ab6:	fc 01       	movw	r30, r24
    1ab8:	20 a3       	std	Z+32, r18	; 0x20
    1aba:	8e 81       	ldd	r24, Y+6	; 0x06
    1abc:	9f 81       	ldd	r25, Y+7	; 0x07
    1abe:	61 e0       	ldi	r22, 0x01	; 1
    1ac0:	0e 94 55 0c 	call	0x18aa	; 0x18aa <xQueueGenericReset>
    1ac4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ac6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ac8:	2d 81       	ldd	r18, Y+5	; 0x05
    1aca:	fc 01       	movw	r30, r24
    1acc:	24 a3       	std	Z+36, r18	; 0x24
    1ace:	00 00       	nop
    1ad0:	27 96       	adiw	r28, 0x07	; 7
    1ad2:	cd bf       	out	0x3d, r28	; 61
    1ad4:	de bf       	out	0x3e, r29	; 62
    1ad6:	df 91       	pop	r29
    1ad8:	cf 91       	pop	r28
    1ada:	1f 91       	pop	r17
    1adc:	0f 91       	pop	r16
    1ade:	08 95       	ret

00001ae0 <xQueueGenericSend>:
    1ae0:	0f 93       	push	r16
    1ae2:	cf 93       	push	r28
    1ae4:	df 93       	push	r29
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    1aea:	62 97       	sbiw	r28, 0x12	; 18
    1aec:	cd bf       	out	0x3d, r28	; 61
    1aee:	de bf       	out	0x3e, r29	; 62
    1af0:	8a 87       	std	Y+10, r24	; 0x0a
    1af2:	9b 87       	std	Y+11, r25	; 0x0b
    1af4:	6c 87       	std	Y+12, r22	; 0x0c
    1af6:	7d 87       	std	Y+13, r23	; 0x0d
    1af8:	2e 87       	std	Y+14, r18	; 0x0e
    1afa:	3f 87       	std	Y+15, r19	; 0x0f
    1afc:	48 8b       	std	Y+16, r20	; 0x10
    1afe:	59 8b       	std	Y+17, r21	; 0x11
    1b00:	0a 8b       	std	Y+18, r16	; 0x12
    1b02:	19 82       	std	Y+1, r1	; 0x01
    1b04:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b06:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b08:	8a 83       	std	Y+2, r24	; 0x02
    1b0a:	9b 83       	std	Y+3, r25	; 0x03
    1b0c:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1b10:	ff 93       	push	r31
    1b12:	f8 7f       	andi	r31, 0xF8	; 248
    1b14:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1b18:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b1c:	fc 01       	movw	r30, r24
    1b1e:	26 8d       	ldd	r18, Z+30	; 0x1e
    1b20:	8a 81       	ldd	r24, Y+2	; 0x02
    1b22:	9b 81       	ldd	r25, Y+3	; 0x03
    1b24:	fc 01       	movw	r30, r24
    1b26:	87 8d       	ldd	r24, Z+31	; 0x1f
    1b28:	28 17       	cp	r18, r24
    1b2a:	18 f0       	brcs	.+6      	; 0x1b32 <xQueueGenericSend+0x52>
    1b2c:	8a 89       	ldd	r24, Y+18	; 0x12
    1b2e:	82 30       	cpi	r24, 0x02	; 2
    1b30:	19 f5       	brne	.+70     	; 0x1b78 <xQueueGenericSend+0x98>
    1b32:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b34:	3d 85       	ldd	r19, Y+13	; 0x0d
    1b36:	8a 81       	ldd	r24, Y+2	; 0x02
    1b38:	9b 81       	ldd	r25, Y+3	; 0x03
    1b3a:	4a 89       	ldd	r20, Y+18	; 0x12
    1b3c:	b9 01       	movw	r22, r18
    1b3e:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <prvCopyDataToQueue>
    1b42:	8c 83       	std	Y+4, r24	; 0x04
    1b44:	8a 81       	ldd	r24, Y+2	; 0x02
    1b46:	9b 81       	ldd	r25, Y+3	; 0x03
    1b48:	fc 01       	movw	r30, r24
    1b4a:	83 89       	ldd	r24, Z+19	; 0x13
    1b4c:	88 23       	and	r24, r24
    1b4e:	51 f0       	breq	.+20     	; 0x1b64 <xQueueGenericSend+0x84>
    1b50:	8a 81       	ldd	r24, Y+2	; 0x02
    1b52:	9b 81       	ldd	r25, Y+3	; 0x03
    1b54:	43 96       	adiw	r24, 0x13	; 19
    1b56:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <xTaskRemoveFromEventList>
    1b5a:	88 23       	and	r24, r24
    1b5c:	41 f0       	breq	.+16     	; 0x1b6e <xQueueGenericSend+0x8e>
    1b5e:	0e 94 05 0b 	call	0x160a	; 0x160a <vPortYield>
    1b62:	05 c0       	rjmp	.+10     	; 0x1b6e <xQueueGenericSend+0x8e>
    1b64:	8c 81       	ldd	r24, Y+4	; 0x04
    1b66:	88 23       	and	r24, r24
    1b68:	11 f0       	breq	.+4      	; 0x1b6e <xQueueGenericSend+0x8e>
    1b6a:	0e 94 05 0b 	call	0x160a	; 0x160a <vPortYield>
    1b6e:	ff 91       	pop	r31
    1b70:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	6f c0       	rjmp	.+222    	; 0x1c56 <xQueueGenericSend+0x176>
    1b78:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b7a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b7c:	a8 89       	ldd	r26, Y+16	; 0x10
    1b7e:	b9 89       	ldd	r27, Y+17	; 0x11
    1b80:	89 2b       	or	r24, r25
    1b82:	8a 2b       	or	r24, r26
    1b84:	8b 2b       	or	r24, r27
    1b86:	29 f4       	brne	.+10     	; 0x1b92 <xQueueGenericSend+0xb2>
    1b88:	ff 91       	pop	r31
    1b8a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	62 c0       	rjmp	.+196    	; 0x1c56 <xQueueGenericSend+0x176>
    1b92:	89 81       	ldd	r24, Y+1	; 0x01
    1b94:	88 23       	and	r24, r24
    1b96:	31 f4       	brne	.+12     	; 0x1ba4 <xQueueGenericSend+0xc4>
    1b98:	ce 01       	movw	r24, r28
    1b9a:	05 96       	adiw	r24, 0x05	; 5
    1b9c:	0e 94 82 18 	call	0x3104	; 0x3104 <vTaskInternalSetTimeOutState>
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	89 83       	std	Y+1, r24	; 0x01
    1ba4:	ff 91       	pop	r31
    1ba6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1baa:	0e 94 71 14 	call	0x28e2	; 0x28e2 <vTaskSuspendAll>
    1bae:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1bb2:	ff 93       	push	r31
    1bb4:	f8 7f       	andi	r31, 0xF8	; 248
    1bb6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1bba:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbc:	9b 81       	ldd	r25, Y+3	; 0x03
    1bbe:	fc 01       	movw	r30, r24
    1bc0:	81 a1       	ldd	r24, Z+33	; 0x21
    1bc2:	8f 3f       	cpi	r24, 0xFF	; 255
    1bc4:	21 f4       	brne	.+8      	; 0x1bce <xQueueGenericSend+0xee>
    1bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bca:	fc 01       	movw	r30, r24
    1bcc:	11 a2       	std	Z+33, r1	; 0x21
    1bce:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd0:	9b 81       	ldd	r25, Y+3	; 0x03
    1bd2:	fc 01       	movw	r30, r24
    1bd4:	82 a1       	ldd	r24, Z+34	; 0x22
    1bd6:	8f 3f       	cpi	r24, 0xFF	; 255
    1bd8:	21 f4       	brne	.+8      	; 0x1be2 <xQueueGenericSend+0x102>
    1bda:	8a 81       	ldd	r24, Y+2	; 0x02
    1bdc:	9b 81       	ldd	r25, Y+3	; 0x03
    1bde:	fc 01       	movw	r30, r24
    1be0:	12 a2       	std	Z+34, r1	; 0x22
    1be2:	ff 91       	pop	r31
    1be4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1be8:	9e 01       	movw	r18, r28
    1bea:	22 5f       	subi	r18, 0xF2	; 242
    1bec:	3f 4f       	sbci	r19, 0xFF	; 255
    1bee:	ce 01       	movw	r24, r28
    1bf0:	05 96       	adiw	r24, 0x05	; 5
    1bf2:	b9 01       	movw	r22, r18
    1bf4:	0e 94 a5 18 	call	0x314a	; 0x314a <xTaskCheckForTimeOut>
    1bf8:	88 23       	and	r24, r24
    1bfa:	31 f5       	brne	.+76     	; 0x1c48 <xQueueGenericSend+0x168>
    1bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfe:	9b 81       	ldd	r25, Y+3	; 0x03
    1c00:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <prvIsQueueFull>
    1c04:	88 23       	and	r24, r24
    1c06:	c9 f0       	breq	.+50     	; 0x1c3a <xQueueGenericSend+0x15a>
    1c08:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c0a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c0c:	a8 89       	ldd	r26, Y+16	; 0x10
    1c0e:	b9 89       	ldd	r27, Y+17	; 0x11
    1c10:	2a 81       	ldd	r18, Y+2	; 0x02
    1c12:	3b 81       	ldd	r19, Y+3	; 0x03
    1c14:	28 5f       	subi	r18, 0xF8	; 248
    1c16:	3f 4f       	sbci	r19, 0xFF	; 255
    1c18:	ac 01       	movw	r20, r24
    1c1a:	bd 01       	movw	r22, r26
    1c1c:	c9 01       	movw	r24, r18
    1c1e:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <vTaskPlaceOnEventList>
    1c22:	8a 81       	ldd	r24, Y+2	; 0x02
    1c24:	9b 81       	ldd	r25, Y+3	; 0x03
    1c26:	0e 94 73 10 	call	0x20e6	; 0x20e6 <prvUnlockQueue>
    1c2a:	0e 94 7e 14 	call	0x28fc	; 0x28fc <xTaskResumeAll>
    1c2e:	88 23       	and	r24, r24
    1c30:	09 f0       	breq	.+2      	; 0x1c34 <xQueueGenericSend+0x154>
    1c32:	6c cf       	rjmp	.-296    	; 0x1b0c <xQueueGenericSend+0x2c>
    1c34:	0e 94 05 0b 	call	0x160a	; 0x160a <vPortYield>
    1c38:	69 cf       	rjmp	.-302    	; 0x1b0c <xQueueGenericSend+0x2c>
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c3e:	0e 94 73 10 	call	0x20e6	; 0x20e6 <prvUnlockQueue>
    1c42:	0e 94 7e 14 	call	0x28fc	; 0x28fc <xTaskResumeAll>
    1c46:	62 cf       	rjmp	.-316    	; 0x1b0c <xQueueGenericSend+0x2c>
    1c48:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c4c:	0e 94 73 10 	call	0x20e6	; 0x20e6 <prvUnlockQueue>
    1c50:	0e 94 7e 14 	call	0x28fc	; 0x28fc <xTaskResumeAll>
    1c54:	80 e0       	ldi	r24, 0x00	; 0
    1c56:	62 96       	adiw	r28, 0x12	; 18
    1c58:	cd bf       	out	0x3d, r28	; 61
    1c5a:	de bf       	out	0x3e, r29	; 62
    1c5c:	df 91       	pop	r29
    1c5e:	cf 91       	pop	r28
    1c60:	0f 91       	pop	r16
    1c62:	08 95       	ret

00001c64 <xQueueGenericSendFromISR>:
    1c64:	cf 93       	push	r28
    1c66:	df 93       	push	r29
    1c68:	cd b7       	in	r28, 0x3d	; 61
    1c6a:	de b7       	in	r29, 0x3e	; 62
    1c6c:	2c 97       	sbiw	r28, 0x0c	; 12
    1c6e:	cd bf       	out	0x3d, r28	; 61
    1c70:	de bf       	out	0x3e, r29	; 62
    1c72:	8e 83       	std	Y+6, r24	; 0x06
    1c74:	9f 83       	std	Y+7, r25	; 0x07
    1c76:	68 87       	std	Y+8, r22	; 0x08
    1c78:	79 87       	std	Y+9, r23	; 0x09
    1c7a:	4a 87       	std	Y+10, r20	; 0x0a
    1c7c:	5b 87       	std	Y+11, r21	; 0x0b
    1c7e:	2c 87       	std	Y+12, r18	; 0x0c
    1c80:	8e 81       	ldd	r24, Y+6	; 0x06
    1c82:	9f 81       	ldd	r25, Y+7	; 0x07
    1c84:	8a 83       	std	Y+2, r24	; 0x02
    1c86:	9b 83       	std	Y+3, r25	; 0x03
    1c88:	0e 94 dd 08 	call	0x11ba	; 0x11ba <_portSetInterruptMaskFromIsr>
    1c8c:	8c 83       	std	Y+4, r24	; 0x04
    1c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c90:	9b 81       	ldd	r25, Y+3	; 0x03
    1c92:	fc 01       	movw	r30, r24
    1c94:	26 8d       	ldd	r18, Z+30	; 0x1e
    1c96:	8a 81       	ldd	r24, Y+2	; 0x02
    1c98:	9b 81       	ldd	r25, Y+3	; 0x03
    1c9a:	fc 01       	movw	r30, r24
    1c9c:	87 8d       	ldd	r24, Z+31	; 0x1f
    1c9e:	28 17       	cp	r18, r24
    1ca0:	18 f0       	brcs	.+6      	; 0x1ca8 <xQueueGenericSendFromISR+0x44>
    1ca2:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ca4:	82 30       	cpi	r24, 0x02	; 2
    1ca6:	89 f5       	brne	.+98     	; 0x1d0a <xQueueGenericSendFromISR+0xa6>
    1ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    1caa:	9b 81       	ldd	r25, Y+3	; 0x03
    1cac:	fc 01       	movw	r30, r24
    1cae:	82 a1       	ldd	r24, Z+34	; 0x22
    1cb0:	8d 83       	std	Y+5, r24	; 0x05
    1cb2:	28 85       	ldd	r18, Y+8	; 0x08
    1cb4:	39 85       	ldd	r19, Y+9	; 0x09
    1cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb8:	9b 81       	ldd	r25, Y+3	; 0x03
    1cba:	4c 85       	ldd	r20, Y+12	; 0x0c
    1cbc:	b9 01       	movw	r22, r18
    1cbe:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <prvCopyDataToQueue>
    1cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc4:	8f 3f       	cpi	r24, 0xFF	; 255
    1cc6:	b9 f4       	brne	.+46     	; 0x1cf6 <xQueueGenericSendFromISR+0x92>
    1cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cca:	9b 81       	ldd	r25, Y+3	; 0x03
    1ccc:	fc 01       	movw	r30, r24
    1cce:	83 89       	ldd	r24, Z+19	; 0x13
    1cd0:	88 23       	and	r24, r24
    1cd2:	c1 f0       	breq	.+48     	; 0x1d04 <xQueueGenericSendFromISR+0xa0>
    1cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1cd8:	43 96       	adiw	r24, 0x13	; 19
    1cda:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <xTaskRemoveFromEventList>
    1cde:	88 23       	and	r24, r24
    1ce0:	89 f0       	breq	.+34     	; 0x1d04 <xQueueGenericSendFromISR+0xa0>
    1ce2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ce4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ce6:	89 2b       	or	r24, r25
    1ce8:	69 f0       	breq	.+26     	; 0x1d04 <xQueueGenericSendFromISR+0xa0>
    1cea:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cec:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cee:	21 e0       	ldi	r18, 0x01	; 1
    1cf0:	fc 01       	movw	r30, r24
    1cf2:	20 83       	st	Z, r18
    1cf4:	07 c0       	rjmp	.+14     	; 0x1d04 <xQueueGenericSendFromISR+0xa0>
    1cf6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf8:	8f 5f       	subi	r24, 0xFF	; 255
    1cfa:	28 2f       	mov	r18, r24
    1cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfe:	9b 81       	ldd	r25, Y+3	; 0x03
    1d00:	fc 01       	movw	r30, r24
    1d02:	22 a3       	std	Z+34, r18	; 0x22
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	89 83       	std	Y+1, r24	; 0x01
    1d08:	01 c0       	rjmp	.+2      	; 0x1d0c <xQueueGenericSendFromISR+0xa8>
    1d0a:	19 82       	std	Y+1, r1	; 0x01
    1d0c:	80 ea       	ldi	r24, 0xA0	; 160
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	2c 81       	ldd	r18, Y+4	; 0x04
    1d12:	fc 01       	movw	r30, r24
    1d14:	22 83       	std	Z+2, r18	; 0x02
    1d16:	89 81       	ldd	r24, Y+1	; 0x01
    1d18:	2c 96       	adiw	r28, 0x0c	; 12
    1d1a:	cd bf       	out	0x3d, r28	; 61
    1d1c:	de bf       	out	0x3e, r29	; 62
    1d1e:	df 91       	pop	r29
    1d20:	cf 91       	pop	r28
    1d22:	08 95       	ret

00001d24 <xQueueReceive>:
    1d24:	cf 93       	push	r28
    1d26:	df 93       	push	r29
    1d28:	cd b7       	in	r28, 0x3d	; 61
    1d2a:	de b7       	in	r29, 0x3e	; 62
    1d2c:	61 97       	sbiw	r28, 0x11	; 17
    1d2e:	cd bf       	out	0x3d, r28	; 61
    1d30:	de bf       	out	0x3e, r29	; 62
    1d32:	8a 87       	std	Y+10, r24	; 0x0a
    1d34:	9b 87       	std	Y+11, r25	; 0x0b
    1d36:	6c 87       	std	Y+12, r22	; 0x0c
    1d38:	7d 87       	std	Y+13, r23	; 0x0d
    1d3a:	2e 87       	std	Y+14, r18	; 0x0e
    1d3c:	3f 87       	std	Y+15, r19	; 0x0f
    1d3e:	48 8b       	std	Y+16, r20	; 0x10
    1d40:	59 8b       	std	Y+17, r21	; 0x11
    1d42:	19 82       	std	Y+1, r1	; 0x01
    1d44:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d46:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d48:	8a 83       	std	Y+2, r24	; 0x02
    1d4a:	9b 83       	std	Y+3, r25	; 0x03
    1d4c:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1d50:	ff 93       	push	r31
    1d52:	f8 7f       	andi	r31, 0xF8	; 248
    1d54:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1d58:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d5c:	fc 01       	movw	r30, r24
    1d5e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1d60:	8c 83       	std	Y+4, r24	; 0x04
    1d62:	8c 81       	ldd	r24, Y+4	; 0x04
    1d64:	88 23       	and	r24, r24
    1d66:	11 f1       	breq	.+68     	; 0x1dac <xQueueReceive+0x88>
    1d68:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d6a:	3d 85       	ldd	r19, Y+13	; 0x0d
    1d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d70:	b9 01       	movw	r22, r18
    1d72:	0e 94 23 10 	call	0x2046	; 0x2046 <prvCopyDataFromQueue>
    1d76:	8c 81       	ldd	r24, Y+4	; 0x04
    1d78:	2f ef       	ldi	r18, 0xFF	; 255
    1d7a:	28 0f       	add	r18, r24
    1d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d80:	fc 01       	movw	r30, r24
    1d82:	26 8f       	std	Z+30, r18	; 0x1e
    1d84:	8a 81       	ldd	r24, Y+2	; 0x02
    1d86:	9b 81       	ldd	r25, Y+3	; 0x03
    1d88:	fc 01       	movw	r30, r24
    1d8a:	80 85       	ldd	r24, Z+8	; 0x08
    1d8c:	88 23       	and	r24, r24
    1d8e:	49 f0       	breq	.+18     	; 0x1da2 <xQueueReceive+0x7e>
    1d90:	8a 81       	ldd	r24, Y+2	; 0x02
    1d92:	9b 81       	ldd	r25, Y+3	; 0x03
    1d94:	08 96       	adiw	r24, 0x08	; 8
    1d96:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <xTaskRemoveFromEventList>
    1d9a:	88 23       	and	r24, r24
    1d9c:	11 f0       	breq	.+4      	; 0x1da2 <xQueueReceive+0x7e>
    1d9e:	0e 94 05 0b 	call	0x160a	; 0x160a <vPortYield>
    1da2:	ff 91       	pop	r31
    1da4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	76 c0       	rjmp	.+236    	; 0x1e98 <xQueueReceive+0x174>
    1dac:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dae:	9f 85       	ldd	r25, Y+15	; 0x0f
    1db0:	a8 89       	ldd	r26, Y+16	; 0x10
    1db2:	b9 89       	ldd	r27, Y+17	; 0x11
    1db4:	89 2b       	or	r24, r25
    1db6:	8a 2b       	or	r24, r26
    1db8:	8b 2b       	or	r24, r27
    1dba:	29 f4       	brne	.+10     	; 0x1dc6 <xQueueReceive+0xa2>
    1dbc:	ff 91       	pop	r31
    1dbe:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	69 c0       	rjmp	.+210    	; 0x1e98 <xQueueReceive+0x174>
    1dc6:	89 81       	ldd	r24, Y+1	; 0x01
    1dc8:	88 23       	and	r24, r24
    1dca:	31 f4       	brne	.+12     	; 0x1dd8 <xQueueReceive+0xb4>
    1dcc:	ce 01       	movw	r24, r28
    1dce:	05 96       	adiw	r24, 0x05	; 5
    1dd0:	0e 94 82 18 	call	0x3104	; 0x3104 <vTaskInternalSetTimeOutState>
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	89 83       	std	Y+1, r24	; 0x01
    1dd8:	ff 91       	pop	r31
    1dda:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1dde:	0e 94 71 14 	call	0x28e2	; 0x28e2 <vTaskSuspendAll>
    1de2:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1de6:	ff 93       	push	r31
    1de8:	f8 7f       	andi	r31, 0xF8	; 248
    1dea:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1dee:	8a 81       	ldd	r24, Y+2	; 0x02
    1df0:	9b 81       	ldd	r25, Y+3	; 0x03
    1df2:	fc 01       	movw	r30, r24
    1df4:	81 a1       	ldd	r24, Z+33	; 0x21
    1df6:	8f 3f       	cpi	r24, 0xFF	; 255
    1df8:	21 f4       	brne	.+8      	; 0x1e02 <xQueueReceive+0xde>
    1dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfc:	9b 81       	ldd	r25, Y+3	; 0x03
    1dfe:	fc 01       	movw	r30, r24
    1e00:	11 a2       	std	Z+33, r1	; 0x21
    1e02:	8a 81       	ldd	r24, Y+2	; 0x02
    1e04:	9b 81       	ldd	r25, Y+3	; 0x03
    1e06:	fc 01       	movw	r30, r24
    1e08:	82 a1       	ldd	r24, Z+34	; 0x22
    1e0a:	8f 3f       	cpi	r24, 0xFF	; 255
    1e0c:	21 f4       	brne	.+8      	; 0x1e16 <xQueueReceive+0xf2>
    1e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e10:	9b 81       	ldd	r25, Y+3	; 0x03
    1e12:	fc 01       	movw	r30, r24
    1e14:	12 a2       	std	Z+34, r1	; 0x22
    1e16:	ff 91       	pop	r31
    1e18:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1e1c:	9e 01       	movw	r18, r28
    1e1e:	22 5f       	subi	r18, 0xF2	; 242
    1e20:	3f 4f       	sbci	r19, 0xFF	; 255
    1e22:	ce 01       	movw	r24, r28
    1e24:	05 96       	adiw	r24, 0x05	; 5
    1e26:	b9 01       	movw	r22, r18
    1e28:	0e 94 a5 18 	call	0x314a	; 0x314a <xTaskCheckForTimeOut>
    1e2c:	88 23       	and	r24, r24
    1e2e:	31 f5       	brne	.+76     	; 0x1e7c <xQueueReceive+0x158>
    1e30:	8a 81       	ldd	r24, Y+2	; 0x02
    1e32:	9b 81       	ldd	r25, Y+3	; 0x03
    1e34:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <prvIsQueueEmpty>
    1e38:	88 23       	and	r24, r24
    1e3a:	c9 f0       	breq	.+50     	; 0x1e6e <xQueueReceive+0x14a>
    1e3c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e3e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e40:	a8 89       	ldd	r26, Y+16	; 0x10
    1e42:	b9 89       	ldd	r27, Y+17	; 0x11
    1e44:	2a 81       	ldd	r18, Y+2	; 0x02
    1e46:	3b 81       	ldd	r19, Y+3	; 0x03
    1e48:	2d 5e       	subi	r18, 0xED	; 237
    1e4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e4c:	ac 01       	movw	r20, r24
    1e4e:	bd 01       	movw	r22, r26
    1e50:	c9 01       	movw	r24, r18
    1e52:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <vTaskPlaceOnEventList>
    1e56:	8a 81       	ldd	r24, Y+2	; 0x02
    1e58:	9b 81       	ldd	r25, Y+3	; 0x03
    1e5a:	0e 94 73 10 	call	0x20e6	; 0x20e6 <prvUnlockQueue>
    1e5e:	0e 94 7e 14 	call	0x28fc	; 0x28fc <xTaskResumeAll>
    1e62:	88 23       	and	r24, r24
    1e64:	09 f0       	breq	.+2      	; 0x1e68 <xQueueReceive+0x144>
    1e66:	72 cf       	rjmp	.-284    	; 0x1d4c <xQueueReceive+0x28>
    1e68:	0e 94 05 0b 	call	0x160a	; 0x160a <vPortYield>
    1e6c:	6f cf       	rjmp	.-290    	; 0x1d4c <xQueueReceive+0x28>
    1e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e70:	9b 81       	ldd	r25, Y+3	; 0x03
    1e72:	0e 94 73 10 	call	0x20e6	; 0x20e6 <prvUnlockQueue>
    1e76:	0e 94 7e 14 	call	0x28fc	; 0x28fc <xTaskResumeAll>
    1e7a:	68 cf       	rjmp	.-304    	; 0x1d4c <xQueueReceive+0x28>
    1e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e80:	0e 94 73 10 	call	0x20e6	; 0x20e6 <prvUnlockQueue>
    1e84:	0e 94 7e 14 	call	0x28fc	; 0x28fc <xTaskResumeAll>
    1e88:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e8c:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <prvIsQueueEmpty>
    1e90:	88 23       	and	r24, r24
    1e92:	09 f4       	brne	.+2      	; 0x1e96 <xQueueReceive+0x172>
    1e94:	5b cf       	rjmp	.-330    	; 0x1d4c <xQueueReceive+0x28>
    1e96:	80 e0       	ldi	r24, 0x00	; 0
    1e98:	61 96       	adiw	r28, 0x11	; 17
    1e9a:	cd bf       	out	0x3d, r28	; 61
    1e9c:	de bf       	out	0x3e, r29	; 62
    1e9e:	df 91       	pop	r29
    1ea0:	cf 91       	pop	r28
    1ea2:	08 95       	ret

00001ea4 <uxQueueMessagesWaiting>:
    1ea4:	cf 93       	push	r28
    1ea6:	df 93       	push	r29
    1ea8:	00 d0       	rcall	.+0      	; 0x1eaa <uxQueueMessagesWaiting+0x6>
    1eaa:	cd b7       	in	r28, 0x3d	; 61
    1eac:	de b7       	in	r29, 0x3e	; 62
    1eae:	8a 83       	std	Y+2, r24	; 0x02
    1eb0:	9b 83       	std	Y+3, r25	; 0x03
    1eb2:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1eb6:	ff 93       	push	r31
    1eb8:	f8 7f       	andi	r31, 0xF8	; 248
    1eba:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec2:	fc 01       	movw	r30, r24
    1ec4:	86 8d       	ldd	r24, Z+30	; 0x1e
    1ec6:	89 83       	std	Y+1, r24	; 0x01
    1ec8:	ff 91       	pop	r31
    1eca:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1ece:	89 81       	ldd	r24, Y+1	; 0x01
    1ed0:	23 96       	adiw	r28, 0x03	; 3
    1ed2:	cd bf       	out	0x3d, r28	; 61
    1ed4:	de bf       	out	0x3e, r29	; 62
    1ed6:	df 91       	pop	r29
    1ed8:	cf 91       	pop	r28
    1eda:	08 95       	ret

00001edc <prvCopyDataToQueue>:
    1edc:	cf 93       	push	r28
    1ede:	df 93       	push	r29
    1ee0:	cd b7       	in	r28, 0x3d	; 61
    1ee2:	de b7       	in	r29, 0x3e	; 62
    1ee4:	27 97       	sbiw	r28, 0x07	; 7
    1ee6:	cd bf       	out	0x3d, r28	; 61
    1ee8:	de bf       	out	0x3e, r29	; 62
    1eea:	8b 83       	std	Y+3, r24	; 0x03
    1eec:	9c 83       	std	Y+4, r25	; 0x04
    1eee:	6d 83       	std	Y+5, r22	; 0x05
    1ef0:	7e 83       	std	Y+6, r23	; 0x06
    1ef2:	4f 83       	std	Y+7, r20	; 0x07
    1ef4:	1a 82       	std	Y+2, r1	; 0x02
    1ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef8:	9c 81       	ldd	r25, Y+4	; 0x04
    1efa:	fc 01       	movw	r30, r24
    1efc:	86 8d       	ldd	r24, Z+30	; 0x1e
    1efe:	89 83       	std	Y+1, r24	; 0x01
    1f00:	8b 81       	ldd	r24, Y+3	; 0x03
    1f02:	9c 81       	ldd	r25, Y+4	; 0x04
    1f04:	fc 01       	movw	r30, r24
    1f06:	80 a1       	ldd	r24, Z+32	; 0x20
    1f08:	88 23       	and	r24, r24
    1f0a:	09 f4       	brne	.+2      	; 0x1f0e <prvCopyDataToQueue+0x32>
    1f0c:	8e c0       	rjmp	.+284    	; 0x202a <__DATA_REGION_LENGTH__+0x2a>
    1f0e:	8f 81       	ldd	r24, Y+7	; 0x07
    1f10:	88 23       	and	r24, r24
    1f12:	d9 f5       	brne	.+118    	; 0x1f8a <prvCopyDataToQueue+0xae>
    1f14:	8b 81       	ldd	r24, Y+3	; 0x03
    1f16:	9c 81       	ldd	r25, Y+4	; 0x04
    1f18:	fc 01       	movw	r30, r24
    1f1a:	80 a1       	ldd	r24, Z+32	; 0x20
    1f1c:	48 2f       	mov	r20, r24
    1f1e:	50 e0       	ldi	r21, 0x00	; 0
    1f20:	8b 81       	ldd	r24, Y+3	; 0x03
    1f22:	9c 81       	ldd	r25, Y+4	; 0x04
    1f24:	fc 01       	movw	r30, r24
    1f26:	84 81       	ldd	r24, Z+4	; 0x04
    1f28:	95 81       	ldd	r25, Z+5	; 0x05
    1f2a:	2d 81       	ldd	r18, Y+5	; 0x05
    1f2c:	3e 81       	ldd	r19, Y+6	; 0x06
    1f2e:	b9 01       	movw	r22, r18
    1f30:	0e 94 47 30 	call	0x608e	; 0x608e <memcpy>
    1f34:	8b 81       	ldd	r24, Y+3	; 0x03
    1f36:	9c 81       	ldd	r25, Y+4	; 0x04
    1f38:	fc 01       	movw	r30, r24
    1f3a:	24 81       	ldd	r18, Z+4	; 0x04
    1f3c:	35 81       	ldd	r19, Z+5	; 0x05
    1f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f40:	9c 81       	ldd	r25, Y+4	; 0x04
    1f42:	fc 01       	movw	r30, r24
    1f44:	80 a1       	ldd	r24, Z+32	; 0x20
    1f46:	88 2f       	mov	r24, r24
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	28 0f       	add	r18, r24
    1f4c:	39 1f       	adc	r19, r25
    1f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f50:	9c 81       	ldd	r25, Y+4	; 0x04
    1f52:	fc 01       	movw	r30, r24
    1f54:	24 83       	std	Z+4, r18	; 0x04
    1f56:	35 83       	std	Z+5, r19	; 0x05
    1f58:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5c:	fc 01       	movw	r30, r24
    1f5e:	24 81       	ldd	r18, Z+4	; 0x04
    1f60:	35 81       	ldd	r19, Z+5	; 0x05
    1f62:	8b 81       	ldd	r24, Y+3	; 0x03
    1f64:	9c 81       	ldd	r25, Y+4	; 0x04
    1f66:	fc 01       	movw	r30, r24
    1f68:	82 81       	ldd	r24, Z+2	; 0x02
    1f6a:	93 81       	ldd	r25, Z+3	; 0x03
    1f6c:	28 17       	cp	r18, r24
    1f6e:	39 07       	cpc	r19, r25
    1f70:	08 f4       	brcc	.+2      	; 0x1f74 <prvCopyDataToQueue+0x98>
    1f72:	5b c0       	rjmp	.+182    	; 0x202a <__DATA_REGION_LENGTH__+0x2a>
    1f74:	8b 81       	ldd	r24, Y+3	; 0x03
    1f76:	9c 81       	ldd	r25, Y+4	; 0x04
    1f78:	fc 01       	movw	r30, r24
    1f7a:	20 81       	ld	r18, Z
    1f7c:	31 81       	ldd	r19, Z+1	; 0x01
    1f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f80:	9c 81       	ldd	r25, Y+4	; 0x04
    1f82:	fc 01       	movw	r30, r24
    1f84:	24 83       	std	Z+4, r18	; 0x04
    1f86:	35 83       	std	Z+5, r19	; 0x05
    1f88:	50 c0       	rjmp	.+160    	; 0x202a <__DATA_REGION_LENGTH__+0x2a>
    1f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8e:	fc 01       	movw	r30, r24
    1f90:	80 a1       	ldd	r24, Z+32	; 0x20
    1f92:	48 2f       	mov	r20, r24
    1f94:	50 e0       	ldi	r21, 0x00	; 0
    1f96:	8b 81       	ldd	r24, Y+3	; 0x03
    1f98:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9a:	fc 01       	movw	r30, r24
    1f9c:	86 81       	ldd	r24, Z+6	; 0x06
    1f9e:	97 81       	ldd	r25, Z+7	; 0x07
    1fa0:	2d 81       	ldd	r18, Y+5	; 0x05
    1fa2:	3e 81       	ldd	r19, Y+6	; 0x06
    1fa4:	b9 01       	movw	r22, r18
    1fa6:	0e 94 47 30 	call	0x608e	; 0x608e <memcpy>
    1faa:	8b 81       	ldd	r24, Y+3	; 0x03
    1fac:	9c 81       	ldd	r25, Y+4	; 0x04
    1fae:	fc 01       	movw	r30, r24
    1fb0:	26 81       	ldd	r18, Z+6	; 0x06
    1fb2:	37 81       	ldd	r19, Z+7	; 0x07
    1fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb8:	fc 01       	movw	r30, r24
    1fba:	80 a1       	ldd	r24, Z+32	; 0x20
    1fbc:	88 2f       	mov	r24, r24
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	91 95       	neg	r25
    1fc2:	81 95       	neg	r24
    1fc4:	91 09       	sbc	r25, r1
    1fc6:	28 0f       	add	r18, r24
    1fc8:	39 1f       	adc	r19, r25
    1fca:	8b 81       	ldd	r24, Y+3	; 0x03
    1fcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fce:	fc 01       	movw	r30, r24
    1fd0:	26 83       	std	Z+6, r18	; 0x06
    1fd2:	37 83       	std	Z+7, r19	; 0x07
    1fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd8:	fc 01       	movw	r30, r24
    1fda:	26 81       	ldd	r18, Z+6	; 0x06
    1fdc:	37 81       	ldd	r19, Z+7	; 0x07
    1fde:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe2:	fc 01       	movw	r30, r24
    1fe4:	80 81       	ld	r24, Z
    1fe6:	91 81       	ldd	r25, Z+1	; 0x01
    1fe8:	28 17       	cp	r18, r24
    1fea:	39 07       	cpc	r19, r25
    1fec:	a8 f4       	brcc	.+42     	; 0x2018 <__DATA_REGION_LENGTH__+0x18>
    1fee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff2:	fc 01       	movw	r30, r24
    1ff4:	22 81       	ldd	r18, Z+2	; 0x02
    1ff6:	33 81       	ldd	r19, Z+3	; 0x03
    1ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffa:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffc:	fc 01       	movw	r30, r24
    1ffe:	80 a1       	ldd	r24, Z+32	; 0x20
    2000:	88 2f       	mov	r24, r24
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	91 95       	neg	r25
    2006:	81 95       	neg	r24
    2008:	91 09       	sbc	r25, r1
    200a:	28 0f       	add	r18, r24
    200c:	39 1f       	adc	r19, r25
    200e:	8b 81       	ldd	r24, Y+3	; 0x03
    2010:	9c 81       	ldd	r25, Y+4	; 0x04
    2012:	fc 01       	movw	r30, r24
    2014:	26 83       	std	Z+6, r18	; 0x06
    2016:	37 83       	std	Z+7, r19	; 0x07
    2018:	8f 81       	ldd	r24, Y+7	; 0x07
    201a:	82 30       	cpi	r24, 0x02	; 2
    201c:	31 f4       	brne	.+12     	; 0x202a <__DATA_REGION_LENGTH__+0x2a>
    201e:	89 81       	ldd	r24, Y+1	; 0x01
    2020:	88 23       	and	r24, r24
    2022:	19 f0       	breq	.+6      	; 0x202a <__DATA_REGION_LENGTH__+0x2a>
    2024:	89 81       	ldd	r24, Y+1	; 0x01
    2026:	81 50       	subi	r24, 0x01	; 1
    2028:	89 83       	std	Y+1, r24	; 0x01
    202a:	89 81       	ldd	r24, Y+1	; 0x01
    202c:	21 e0       	ldi	r18, 0x01	; 1
    202e:	28 0f       	add	r18, r24
    2030:	8b 81       	ldd	r24, Y+3	; 0x03
    2032:	9c 81       	ldd	r25, Y+4	; 0x04
    2034:	fc 01       	movw	r30, r24
    2036:	26 8f       	std	Z+30, r18	; 0x1e
    2038:	8a 81       	ldd	r24, Y+2	; 0x02
    203a:	27 96       	adiw	r28, 0x07	; 7
    203c:	cd bf       	out	0x3d, r28	; 61
    203e:	de bf       	out	0x3e, r29	; 62
    2040:	df 91       	pop	r29
    2042:	cf 91       	pop	r28
    2044:	08 95       	ret

00002046 <prvCopyDataFromQueue>:
    2046:	cf 93       	push	r28
    2048:	df 93       	push	r29
    204a:	00 d0       	rcall	.+0      	; 0x204c <prvCopyDataFromQueue+0x6>
    204c:	1f 92       	push	r1
    204e:	cd b7       	in	r28, 0x3d	; 61
    2050:	de b7       	in	r29, 0x3e	; 62
    2052:	89 83       	std	Y+1, r24	; 0x01
    2054:	9a 83       	std	Y+2, r25	; 0x02
    2056:	6b 83       	std	Y+3, r22	; 0x03
    2058:	7c 83       	std	Y+4, r23	; 0x04
    205a:	89 81       	ldd	r24, Y+1	; 0x01
    205c:	9a 81       	ldd	r25, Y+2	; 0x02
    205e:	fc 01       	movw	r30, r24
    2060:	80 a1       	ldd	r24, Z+32	; 0x20
    2062:	88 23       	and	r24, r24
    2064:	c9 f1       	breq	.+114    	; 0x20d8 <prvCopyDataFromQueue+0x92>
    2066:	89 81       	ldd	r24, Y+1	; 0x01
    2068:	9a 81       	ldd	r25, Y+2	; 0x02
    206a:	fc 01       	movw	r30, r24
    206c:	26 81       	ldd	r18, Z+6	; 0x06
    206e:	37 81       	ldd	r19, Z+7	; 0x07
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	9a 81       	ldd	r25, Y+2	; 0x02
    2074:	fc 01       	movw	r30, r24
    2076:	80 a1       	ldd	r24, Z+32	; 0x20
    2078:	88 2f       	mov	r24, r24
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	28 0f       	add	r18, r24
    207e:	39 1f       	adc	r19, r25
    2080:	89 81       	ldd	r24, Y+1	; 0x01
    2082:	9a 81       	ldd	r25, Y+2	; 0x02
    2084:	fc 01       	movw	r30, r24
    2086:	26 83       	std	Z+6, r18	; 0x06
    2088:	37 83       	std	Z+7, r19	; 0x07
    208a:	89 81       	ldd	r24, Y+1	; 0x01
    208c:	9a 81       	ldd	r25, Y+2	; 0x02
    208e:	fc 01       	movw	r30, r24
    2090:	26 81       	ldd	r18, Z+6	; 0x06
    2092:	37 81       	ldd	r19, Z+7	; 0x07
    2094:	89 81       	ldd	r24, Y+1	; 0x01
    2096:	9a 81       	ldd	r25, Y+2	; 0x02
    2098:	fc 01       	movw	r30, r24
    209a:	82 81       	ldd	r24, Z+2	; 0x02
    209c:	93 81       	ldd	r25, Z+3	; 0x03
    209e:	28 17       	cp	r18, r24
    20a0:	39 07       	cpc	r19, r25
    20a2:	50 f0       	brcs	.+20     	; 0x20b8 <prvCopyDataFromQueue+0x72>
    20a4:	89 81       	ldd	r24, Y+1	; 0x01
    20a6:	9a 81       	ldd	r25, Y+2	; 0x02
    20a8:	fc 01       	movw	r30, r24
    20aa:	20 81       	ld	r18, Z
    20ac:	31 81       	ldd	r19, Z+1	; 0x01
    20ae:	89 81       	ldd	r24, Y+1	; 0x01
    20b0:	9a 81       	ldd	r25, Y+2	; 0x02
    20b2:	fc 01       	movw	r30, r24
    20b4:	26 83       	std	Z+6, r18	; 0x06
    20b6:	37 83       	std	Z+7, r19	; 0x07
    20b8:	89 81       	ldd	r24, Y+1	; 0x01
    20ba:	9a 81       	ldd	r25, Y+2	; 0x02
    20bc:	fc 01       	movw	r30, r24
    20be:	80 a1       	ldd	r24, Z+32	; 0x20
    20c0:	48 2f       	mov	r20, r24
    20c2:	50 e0       	ldi	r21, 0x00	; 0
    20c4:	89 81       	ldd	r24, Y+1	; 0x01
    20c6:	9a 81       	ldd	r25, Y+2	; 0x02
    20c8:	fc 01       	movw	r30, r24
    20ca:	26 81       	ldd	r18, Z+6	; 0x06
    20cc:	37 81       	ldd	r19, Z+7	; 0x07
    20ce:	8b 81       	ldd	r24, Y+3	; 0x03
    20d0:	9c 81       	ldd	r25, Y+4	; 0x04
    20d2:	b9 01       	movw	r22, r18
    20d4:	0e 94 47 30 	call	0x608e	; 0x608e <memcpy>
    20d8:	00 00       	nop
    20da:	24 96       	adiw	r28, 0x04	; 4
    20dc:	cd bf       	out	0x3d, r28	; 61
    20de:	de bf       	out	0x3e, r29	; 62
    20e0:	df 91       	pop	r29
    20e2:	cf 91       	pop	r28
    20e4:	08 95       	ret

000020e6 <prvUnlockQueue>:
    20e6:	cf 93       	push	r28
    20e8:	df 93       	push	r29
    20ea:	00 d0       	rcall	.+0      	; 0x20ec <prvUnlockQueue+0x6>
    20ec:	1f 92       	push	r1
    20ee:	cd b7       	in	r28, 0x3d	; 61
    20f0:	de b7       	in	r29, 0x3e	; 62
    20f2:	8b 83       	std	Y+3, r24	; 0x03
    20f4:	9c 83       	std	Y+4, r25	; 0x04
    20f6:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    20fa:	ff 93       	push	r31
    20fc:	f8 7f       	andi	r31, 0xF8	; 248
    20fe:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2102:	8b 81       	ldd	r24, Y+3	; 0x03
    2104:	9c 81       	ldd	r25, Y+4	; 0x04
    2106:	fc 01       	movw	r30, r24
    2108:	82 a1       	ldd	r24, Z+34	; 0x22
    210a:	89 83       	std	Y+1, r24	; 0x01
    210c:	12 c0       	rjmp	.+36     	; 0x2132 <prvUnlockQueue+0x4c>
    210e:	8b 81       	ldd	r24, Y+3	; 0x03
    2110:	9c 81       	ldd	r25, Y+4	; 0x04
    2112:	fc 01       	movw	r30, r24
    2114:	83 89       	ldd	r24, Z+19	; 0x13
    2116:	88 23       	and	r24, r24
    2118:	81 f0       	breq	.+32     	; 0x213a <prvUnlockQueue+0x54>
    211a:	8b 81       	ldd	r24, Y+3	; 0x03
    211c:	9c 81       	ldd	r25, Y+4	; 0x04
    211e:	43 96       	adiw	r24, 0x13	; 19
    2120:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <xTaskRemoveFromEventList>
    2124:	88 23       	and	r24, r24
    2126:	11 f0       	breq	.+4      	; 0x212c <prvUnlockQueue+0x46>
    2128:	0e 94 4d 19 	call	0x329a	; 0x329a <vTaskMissedYield>
    212c:	89 81       	ldd	r24, Y+1	; 0x01
    212e:	81 50       	subi	r24, 0x01	; 1
    2130:	89 83       	std	Y+1, r24	; 0x01
    2132:	89 81       	ldd	r24, Y+1	; 0x01
    2134:	18 16       	cp	r1, r24
    2136:	5c f3       	brlt	.-42     	; 0x210e <prvUnlockQueue+0x28>
    2138:	01 c0       	rjmp	.+2      	; 0x213c <prvUnlockQueue+0x56>
    213a:	00 00       	nop
    213c:	8b 81       	ldd	r24, Y+3	; 0x03
    213e:	9c 81       	ldd	r25, Y+4	; 0x04
    2140:	2f ef       	ldi	r18, 0xFF	; 255
    2142:	fc 01       	movw	r30, r24
    2144:	22 a3       	std	Z+34, r18	; 0x22
    2146:	ff 91       	pop	r31
    2148:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    214c:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2150:	ff 93       	push	r31
    2152:	f8 7f       	andi	r31, 0xF8	; 248
    2154:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2158:	8b 81       	ldd	r24, Y+3	; 0x03
    215a:	9c 81       	ldd	r25, Y+4	; 0x04
    215c:	fc 01       	movw	r30, r24
    215e:	81 a1       	ldd	r24, Z+33	; 0x21
    2160:	8a 83       	std	Y+2, r24	; 0x02
    2162:	12 c0       	rjmp	.+36     	; 0x2188 <prvUnlockQueue+0xa2>
    2164:	8b 81       	ldd	r24, Y+3	; 0x03
    2166:	9c 81       	ldd	r25, Y+4	; 0x04
    2168:	fc 01       	movw	r30, r24
    216a:	80 85       	ldd	r24, Z+8	; 0x08
    216c:	88 23       	and	r24, r24
    216e:	81 f0       	breq	.+32     	; 0x2190 <prvUnlockQueue+0xaa>
    2170:	8b 81       	ldd	r24, Y+3	; 0x03
    2172:	9c 81       	ldd	r25, Y+4	; 0x04
    2174:	08 96       	adiw	r24, 0x08	; 8
    2176:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <xTaskRemoveFromEventList>
    217a:	88 23       	and	r24, r24
    217c:	11 f0       	breq	.+4      	; 0x2182 <prvUnlockQueue+0x9c>
    217e:	0e 94 4d 19 	call	0x329a	; 0x329a <vTaskMissedYield>
    2182:	8a 81       	ldd	r24, Y+2	; 0x02
    2184:	81 50       	subi	r24, 0x01	; 1
    2186:	8a 83       	std	Y+2, r24	; 0x02
    2188:	8a 81       	ldd	r24, Y+2	; 0x02
    218a:	18 16       	cp	r1, r24
    218c:	5c f3       	brlt	.-42     	; 0x2164 <prvUnlockQueue+0x7e>
    218e:	01 c0       	rjmp	.+2      	; 0x2192 <prvUnlockQueue+0xac>
    2190:	00 00       	nop
    2192:	8b 81       	ldd	r24, Y+3	; 0x03
    2194:	9c 81       	ldd	r25, Y+4	; 0x04
    2196:	2f ef       	ldi	r18, 0xFF	; 255
    2198:	fc 01       	movw	r30, r24
    219a:	21 a3       	std	Z+33, r18	; 0x21
    219c:	ff 91       	pop	r31
    219e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    21a2:	00 00       	nop
    21a4:	24 96       	adiw	r28, 0x04	; 4
    21a6:	cd bf       	out	0x3d, r28	; 61
    21a8:	de bf       	out	0x3e, r29	; 62
    21aa:	df 91       	pop	r29
    21ac:	cf 91       	pop	r28
    21ae:	08 95       	ret

000021b0 <prvIsQueueEmpty>:
    21b0:	cf 93       	push	r28
    21b2:	df 93       	push	r29
    21b4:	00 d0       	rcall	.+0      	; 0x21b6 <prvIsQueueEmpty+0x6>
    21b6:	cd b7       	in	r28, 0x3d	; 61
    21b8:	de b7       	in	r29, 0x3e	; 62
    21ba:	8a 83       	std	Y+2, r24	; 0x02
    21bc:	9b 83       	std	Y+3, r25	; 0x03
    21be:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    21c2:	ff 93       	push	r31
    21c4:	f8 7f       	andi	r31, 0xF8	; 248
    21c6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    21ca:	8a 81       	ldd	r24, Y+2	; 0x02
    21cc:	9b 81       	ldd	r25, Y+3	; 0x03
    21ce:	fc 01       	movw	r30, r24
    21d0:	86 8d       	ldd	r24, Z+30	; 0x1e
    21d2:	88 23       	and	r24, r24
    21d4:	19 f4       	brne	.+6      	; 0x21dc <prvIsQueueEmpty+0x2c>
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	89 83       	std	Y+1, r24	; 0x01
    21da:	01 c0       	rjmp	.+2      	; 0x21de <prvIsQueueEmpty+0x2e>
    21dc:	19 82       	std	Y+1, r1	; 0x01
    21de:	ff 91       	pop	r31
    21e0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    21e4:	89 81       	ldd	r24, Y+1	; 0x01
    21e6:	23 96       	adiw	r28, 0x03	; 3
    21e8:	cd bf       	out	0x3d, r28	; 61
    21ea:	de bf       	out	0x3e, r29	; 62
    21ec:	df 91       	pop	r29
    21ee:	cf 91       	pop	r28
    21f0:	08 95       	ret

000021f2 <prvIsQueueFull>:
    21f2:	cf 93       	push	r28
    21f4:	df 93       	push	r29
    21f6:	00 d0       	rcall	.+0      	; 0x21f8 <prvIsQueueFull+0x6>
    21f8:	cd b7       	in	r28, 0x3d	; 61
    21fa:	de b7       	in	r29, 0x3e	; 62
    21fc:	8a 83       	std	Y+2, r24	; 0x02
    21fe:	9b 83       	std	Y+3, r25	; 0x03
    2200:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2204:	ff 93       	push	r31
    2206:	f8 7f       	andi	r31, 0xF8	; 248
    2208:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    220c:	8a 81       	ldd	r24, Y+2	; 0x02
    220e:	9b 81       	ldd	r25, Y+3	; 0x03
    2210:	fc 01       	movw	r30, r24
    2212:	26 8d       	ldd	r18, Z+30	; 0x1e
    2214:	8a 81       	ldd	r24, Y+2	; 0x02
    2216:	9b 81       	ldd	r25, Y+3	; 0x03
    2218:	fc 01       	movw	r30, r24
    221a:	87 8d       	ldd	r24, Z+31	; 0x1f
    221c:	28 17       	cp	r18, r24
    221e:	19 f4       	brne	.+6      	; 0x2226 <prvIsQueueFull+0x34>
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	89 83       	std	Y+1, r24	; 0x01
    2224:	01 c0       	rjmp	.+2      	; 0x2228 <prvIsQueueFull+0x36>
    2226:	19 82       	std	Y+1, r1	; 0x01
    2228:	ff 91       	pop	r31
    222a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    222e:	89 81       	ldd	r24, Y+1	; 0x01
    2230:	23 96       	adiw	r28, 0x03	; 3
    2232:	cd bf       	out	0x3d, r28	; 61
    2234:	de bf       	out	0x3e, r29	; 62
    2236:	df 91       	pop	r29
    2238:	cf 91       	pop	r28
    223a:	08 95       	ret

0000223c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    223c:	cf 93       	push	r28
    223e:	df 93       	push	r29
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
    2244:	29 97       	sbiw	r28, 0x09	; 9
    2246:	cd bf       	out	0x3d, r28	; 61
    2248:	de bf       	out	0x3e, r29	; 62
    224a:	8b 83       	std	Y+3, r24	; 0x03
    224c:	9c 83       	std	Y+4, r25	; 0x04
    224e:	4d 83       	std	Y+5, r20	; 0x05
    2250:	5e 83       	std	Y+6, r21	; 0x06
    2252:	6f 83       	std	Y+7, r22	; 0x07
    2254:	78 87       	std	Y+8, r23	; 0x08
    2256:	29 87       	std	Y+9, r18	; 0x09
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2258:	8b 81       	ldd	r24, Y+3	; 0x03
    225a:	9c 81       	ldd	r25, Y+4	; 0x04
    225c:	89 83       	std	Y+1, r24	; 0x01
    225e:	9a 83       	std	Y+2, r25	; 0x02
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    2260:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2264:	ff 93       	push	r31
    2266:	f8 7f       	andi	r31, 0xF8	; 248
    2268:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    226c:	89 81       	ldd	r24, Y+1	; 0x01
    226e:	9a 81       	ldd	r25, Y+2	; 0x02
    2270:	fc 01       	movw	r30, r24
    2272:	81 a1       	ldd	r24, Z+33	; 0x21
    2274:	8f 3f       	cpi	r24, 0xFF	; 255
    2276:	21 f4       	brne	.+8      	; 0x2280 <vQueueWaitForMessageRestricted+0x44>
    2278:	89 81       	ldd	r24, Y+1	; 0x01
    227a:	9a 81       	ldd	r25, Y+2	; 0x02
    227c:	fc 01       	movw	r30, r24
    227e:	11 a2       	std	Z+33, r1	; 0x21
    2280:	89 81       	ldd	r24, Y+1	; 0x01
    2282:	9a 81       	ldd	r25, Y+2	; 0x02
    2284:	fc 01       	movw	r30, r24
    2286:	82 a1       	ldd	r24, Z+34	; 0x22
    2288:	8f 3f       	cpi	r24, 0xFF	; 255
    228a:	21 f4       	brne	.+8      	; 0x2294 <vQueueWaitForMessageRestricted+0x58>
    228c:	89 81       	ldd	r24, Y+1	; 0x01
    228e:	9a 81       	ldd	r25, Y+2	; 0x02
    2290:	fc 01       	movw	r30, r24
    2292:	12 a2       	std	Z+34, r1	; 0x22
    2294:	ff 91       	pop	r31
    2296:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    229a:	89 81       	ldd	r24, Y+1	; 0x01
    229c:	9a 81       	ldd	r25, Y+2	; 0x02
    229e:	fc 01       	movw	r30, r24
    22a0:	86 8d       	ldd	r24, Z+30	; 0x1e
    22a2:	88 23       	and	r24, r24
    22a4:	71 f4       	brne	.+28     	; 0x22c2 <vQueueWaitForMessageRestricted+0x86>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    22a6:	89 81       	ldd	r24, Y+1	; 0x01
    22a8:	9a 81       	ldd	r25, Y+2	; 0x02
    22aa:	fc 01       	movw	r30, r24
    22ac:	73 96       	adiw	r30, 0x13	; 19
    22ae:	8d 81       	ldd	r24, Y+5	; 0x05
    22b0:	9e 81       	ldd	r25, Y+6	; 0x06
    22b2:	af 81       	ldd	r26, Y+7	; 0x07
    22b4:	b8 85       	ldd	r27, Y+8	; 0x08
    22b6:	29 85       	ldd	r18, Y+9	; 0x09
    22b8:	ac 01       	movw	r20, r24
    22ba:	bd 01       	movw	r22, r26
    22bc:	cf 01       	movw	r24, r30
    22be:	0e 94 83 17 	call	0x2f06	; 0x2f06 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    22c2:	89 81       	ldd	r24, Y+1	; 0x01
    22c4:	9a 81       	ldd	r25, Y+2	; 0x02
    22c6:	0e 94 73 10 	call	0x20e6	; 0x20e6 <prvUnlockQueue>
	}
    22ca:	00 00       	nop
    22cc:	29 96       	adiw	r28, 0x09	; 9
    22ce:	cd bf       	out	0x3d, r28	; 61
    22d0:	de bf       	out	0x3e, r29	; 62
    22d2:	df 91       	pop	r29
    22d4:	cf 91       	pop	r28
    22d6:	08 95       	ret

000022d8 <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
    22d8:	8f 92       	push	r8
    22da:	9f 92       	push	r9
    22dc:	af 92       	push	r10
    22de:	bf 92       	push	r11
    22e0:	cf 92       	push	r12
    22e2:	df 92       	push	r13
    22e4:	ef 92       	push	r14
    22e6:	ff 92       	push	r15
    22e8:	0f 93       	push	r16
    22ea:	1f 93       	push	r17
    22ec:	cf 93       	push	r28
    22ee:	df 93       	push	r29
    22f0:	cd b7       	in	r28, 0x3d	; 61
    22f2:	de b7       	in	r29, 0x3e	; 62
    22f4:	60 97       	sbiw	r28, 0x10	; 16
    22f6:	cd bf       	out	0x3d, r28	; 61
    22f8:	de bf       	out	0x3e, r29	; 62
    22fa:	8e 83       	std	Y+6, r24	; 0x06
    22fc:	9f 83       	std	Y+7, r25	; 0x07
    22fe:	68 87       	std	Y+8, r22	; 0x08
    2300:	79 87       	std	Y+9, r23	; 0x09
    2302:	4a 87       	std	Y+10, r20	; 0x0a
    2304:	5b 87       	std	Y+11, r21	; 0x0b
    2306:	2c 87       	std	Y+12, r18	; 0x0c
    2308:	3d 87       	std	Y+13, r19	; 0x0d
    230a:	0e 87       	std	Y+14, r16	; 0x0e
    230c:	ef 86       	std	Y+15, r14	; 0x0f
    230e:	f8 8a       	std	Y+16, r15	; 0x10
    2310:	8a 85       	ldd	r24, Y+10	; 0x0a
    2312:	9b 85       	ldd	r25, Y+11	; 0x0b
    2314:	0e 94 1c 07 	call	0xe38	; 0xe38 <pvPortMalloc>
    2318:	8c 83       	std	Y+4, r24	; 0x04
    231a:	9d 83       	std	Y+5, r25	; 0x05
    231c:	8c 81       	ldd	r24, Y+4	; 0x04
    231e:	9d 81       	ldd	r25, Y+5	; 0x05
    2320:	89 2b       	or	r24, r25
    2322:	b9 f0       	breq	.+46     	; 0x2352 <xTaskCreate+0x7a>
    2324:	8c e2       	ldi	r24, 0x2C	; 44
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	0e 94 1c 07 	call	0xe38	; 0xe38 <pvPortMalloc>
    232c:	89 83       	std	Y+1, r24	; 0x01
    232e:	9a 83       	std	Y+2, r25	; 0x02
    2330:	89 81       	ldd	r24, Y+1	; 0x01
    2332:	9a 81       	ldd	r25, Y+2	; 0x02
    2334:	89 2b       	or	r24, r25
    2336:	41 f0       	breq	.+16     	; 0x2348 <xTaskCreate+0x70>
    2338:	89 81       	ldd	r24, Y+1	; 0x01
    233a:	9a 81       	ldd	r25, Y+2	; 0x02
    233c:	2c 81       	ldd	r18, Y+4	; 0x04
    233e:	3d 81       	ldd	r19, Y+5	; 0x05
    2340:	fc 01       	movw	r30, r24
    2342:	23 8f       	std	Z+27, r18	; 0x1b
    2344:	34 8f       	std	Z+28, r19	; 0x1c
    2346:	07 c0       	rjmp	.+14     	; 0x2356 <xTaskCreate+0x7e>
    2348:	8c 81       	ldd	r24, Y+4	; 0x04
    234a:	9d 81       	ldd	r25, Y+5	; 0x05
    234c:	0e 94 60 07 	call	0xec0	; 0xec0 <vPortFree>
    2350:	02 c0       	rjmp	.+4      	; 0x2356 <xTaskCreate+0x7e>
    2352:	19 82       	std	Y+1, r1	; 0x01
    2354:	1a 82       	std	Y+2, r1	; 0x02
    2356:	89 81       	ldd	r24, Y+1	; 0x01
    2358:	9a 81       	ldd	r25, Y+2	; 0x02
    235a:	89 2b       	or	r24, r25
    235c:	09 f1       	breq	.+66     	; 0x23a0 <xTaskCreate+0xc8>
    235e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2360:	9b 85       	ldd	r25, Y+11	; 0x0b
    2362:	cc 01       	movw	r24, r24
    2364:	a0 e0       	ldi	r26, 0x00	; 0
    2366:	b0 e0       	ldi	r27, 0x00	; 0
    2368:	09 81       	ldd	r16, Y+1	; 0x01
    236a:	1a 81       	ldd	r17, Y+2	; 0x02
    236c:	4f 85       	ldd	r20, Y+15	; 0x0f
    236e:	58 89       	ldd	r21, Y+16	; 0x10
    2370:	2c 85       	ldd	r18, Y+12	; 0x0c
    2372:	3d 85       	ldd	r19, Y+13	; 0x0d
    2374:	68 85       	ldd	r22, Y+8	; 0x08
    2376:	79 85       	ldd	r23, Y+9	; 0x09
    2378:	ee 81       	ldd	r30, Y+6	; 0x06
    237a:	ff 81       	ldd	r31, Y+7	; 0x07
    237c:	81 2c       	mov	r8, r1
    237e:	91 2c       	mov	r9, r1
    2380:	58 01       	movw	r10, r16
    2382:	6a 01       	movw	r12, r20
    2384:	ee 84       	ldd	r14, Y+14	; 0x0e
    2386:	89 01       	movw	r16, r18
    2388:	9c 01       	movw	r18, r24
    238a:	ad 01       	movw	r20, r26
    238c:	cf 01       	movw	r24, r30
    238e:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <prvInitialiseNewTask>
    2392:	89 81       	ldd	r24, Y+1	; 0x01
    2394:	9a 81       	ldd	r25, Y+2	; 0x02
    2396:	0e 94 b9 12 	call	0x2572	; 0x2572 <prvAddNewTaskToReadyList>
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	8b 83       	std	Y+3, r24	; 0x03
    239e:	02 c0       	rjmp	.+4      	; 0x23a4 <xTaskCreate+0xcc>
    23a0:	8f ef       	ldi	r24, 0xFF	; 255
    23a2:	8b 83       	std	Y+3, r24	; 0x03
    23a4:	8b 81       	ldd	r24, Y+3	; 0x03
    23a6:	60 96       	adiw	r28, 0x10	; 16
    23a8:	cd bf       	out	0x3d, r28	; 61
    23aa:	de bf       	out	0x3e, r29	; 62
    23ac:	df 91       	pop	r29
    23ae:	cf 91       	pop	r28
    23b0:	1f 91       	pop	r17
    23b2:	0f 91       	pop	r16
    23b4:	ff 90       	pop	r15
    23b6:	ef 90       	pop	r14
    23b8:	df 90       	pop	r13
    23ba:	cf 90       	pop	r12
    23bc:	bf 90       	pop	r11
    23be:	af 90       	pop	r10
    23c0:	9f 90       	pop	r9
    23c2:	8f 90       	pop	r8
    23c4:	08 95       	ret

000023c6 <prvInitialiseNewTask>:
    23c6:	8f 92       	push	r8
    23c8:	9f 92       	push	r9
    23ca:	af 92       	push	r10
    23cc:	bf 92       	push	r11
    23ce:	cf 92       	push	r12
    23d0:	df 92       	push	r13
    23d2:	ef 92       	push	r14
    23d4:	ff 92       	push	r15
    23d6:	0f 93       	push	r16
    23d8:	1f 93       	push	r17
    23da:	cf 93       	push	r28
    23dc:	df 93       	push	r29
    23de:	cd b7       	in	r28, 0x3d	; 61
    23e0:	de b7       	in	r29, 0x3e	; 62
    23e2:	64 97       	sbiw	r28, 0x14	; 20
    23e4:	cd bf       	out	0x3d, r28	; 61
    23e6:	de bf       	out	0x3e, r29	; 62
    23e8:	8c 83       	std	Y+4, r24	; 0x04
    23ea:	9d 83       	std	Y+5, r25	; 0x05
    23ec:	6e 83       	std	Y+6, r22	; 0x06
    23ee:	7f 83       	std	Y+7, r23	; 0x07
    23f0:	28 87       	std	Y+8, r18	; 0x08
    23f2:	39 87       	std	Y+9, r19	; 0x09
    23f4:	4a 87       	std	Y+10, r20	; 0x0a
    23f6:	5b 87       	std	Y+11, r21	; 0x0b
    23f8:	0c 87       	std	Y+12, r16	; 0x0c
    23fa:	1d 87       	std	Y+13, r17	; 0x0d
    23fc:	ee 86       	std	Y+14, r14	; 0x0e
    23fe:	cf 86       	std	Y+15, r12	; 0x0f
    2400:	d8 8a       	std	Y+16, r13	; 0x10
    2402:	a9 8a       	std	Y+17, r10	; 0x11
    2404:	ba 8a       	std	Y+18, r11	; 0x12
    2406:	8b 8a       	std	Y+19, r8	; 0x13
    2408:	9c 8a       	std	Y+20, r9	; 0x14
    240a:	28 85       	ldd	r18, Y+8	; 0x08
    240c:	39 85       	ldd	r19, Y+9	; 0x09
    240e:	89 89       	ldd	r24, Y+17	; 0x11
    2410:	9a 89       	ldd	r25, Y+18	; 0x12
    2412:	fc 01       	movw	r30, r24
    2414:	83 8d       	ldd	r24, Z+27	; 0x1b
    2416:	94 8d       	ldd	r25, Z+28	; 0x1c
    2418:	a9 01       	movw	r20, r18
    241a:	65 ea       	ldi	r22, 0xA5	; 165
    241c:	70 e0       	ldi	r23, 0x00	; 0
    241e:	0e 94 50 30 	call	0x60a0	; 0x60a0 <memset>
    2422:	89 89       	ldd	r24, Y+17	; 0x11
    2424:	9a 89       	ldd	r25, Y+18	; 0x12
    2426:	fc 01       	movw	r30, r24
    2428:	23 8d       	ldd	r18, Z+27	; 0x1b
    242a:	34 8d       	ldd	r19, Z+28	; 0x1c
    242c:	88 85       	ldd	r24, Y+8	; 0x08
    242e:	99 85       	ldd	r25, Y+9	; 0x09
    2430:	01 97       	sbiw	r24, 0x01	; 1
    2432:	82 0f       	add	r24, r18
    2434:	93 1f       	adc	r25, r19
    2436:	8a 83       	std	Y+2, r24	; 0x02
    2438:	9b 83       	std	Y+3, r25	; 0x03
    243a:	19 82       	std	Y+1, r1	; 0x01
    243c:	21 c0       	rjmp	.+66     	; 0x2480 <prvInitialiseNewTask+0xba>
    243e:	89 81       	ldd	r24, Y+1	; 0x01
    2440:	88 2f       	mov	r24, r24
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	29 81       	ldd	r18, Y+1	; 0x01
    2446:	22 2f       	mov	r18, r18
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	4e 81       	ldd	r20, Y+6	; 0x06
    244c:	5f 81       	ldd	r21, Y+7	; 0x07
    244e:	24 0f       	add	r18, r20
    2450:	35 1f       	adc	r19, r21
    2452:	f9 01       	movw	r30, r18
    2454:	40 81       	ld	r20, Z
    2456:	29 89       	ldd	r18, Y+17	; 0x11
    2458:	3a 89       	ldd	r19, Y+18	; 0x12
    245a:	82 0f       	add	r24, r18
    245c:	93 1f       	adc	r25, r19
    245e:	4d 96       	adiw	r24, 0x1d	; 29
    2460:	fc 01       	movw	r30, r24
    2462:	40 83       	st	Z, r20
    2464:	89 81       	ldd	r24, Y+1	; 0x01
    2466:	88 2f       	mov	r24, r24
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	2e 81       	ldd	r18, Y+6	; 0x06
    246c:	3f 81       	ldd	r19, Y+7	; 0x07
    246e:	82 0f       	add	r24, r18
    2470:	93 1f       	adc	r25, r19
    2472:	fc 01       	movw	r30, r24
    2474:	80 81       	ld	r24, Z
    2476:	88 23       	and	r24, r24
    2478:	39 f0       	breq	.+14     	; 0x2488 <prvInitialiseNewTask+0xc2>
    247a:	89 81       	ldd	r24, Y+1	; 0x01
    247c:	8f 5f       	subi	r24, 0xFF	; 255
    247e:	89 83       	std	Y+1, r24	; 0x01
    2480:	89 81       	ldd	r24, Y+1	; 0x01
    2482:	88 30       	cpi	r24, 0x08	; 8
    2484:	e0 f2       	brcs	.-72     	; 0x243e <prvInitialiseNewTask+0x78>
    2486:	01 c0       	rjmp	.+2      	; 0x248a <prvInitialiseNewTask+0xc4>
    2488:	00 00       	nop
    248a:	89 89       	ldd	r24, Y+17	; 0x11
    248c:	9a 89       	ldd	r25, Y+18	; 0x12
    248e:	fc 01       	movw	r30, r24
    2490:	14 a2       	std	Z+36, r1	; 0x24
    2492:	8e 85       	ldd	r24, Y+14	; 0x0e
    2494:	84 30       	cpi	r24, 0x04	; 4
    2496:	10 f0       	brcs	.+4      	; 0x249c <prvInitialiseNewTask+0xd6>
    2498:	83 e0       	ldi	r24, 0x03	; 3
    249a:	8e 87       	std	Y+14, r24	; 0x0e
    249c:	89 89       	ldd	r24, Y+17	; 0x11
    249e:	9a 89       	ldd	r25, Y+18	; 0x12
    24a0:	2e 85       	ldd	r18, Y+14	; 0x0e
    24a2:	fc 01       	movw	r30, r24
    24a4:	22 8f       	std	Z+26, r18	; 0x1a
    24a6:	89 89       	ldd	r24, Y+17	; 0x11
    24a8:	9a 89       	ldd	r25, Y+18	; 0x12
    24aa:	02 96       	adiw	r24, 0x02	; 2
    24ac:	0e 94 a8 07 	call	0xf50	; 0xf50 <vListInitialiseItem>
    24b0:	89 89       	ldd	r24, Y+17	; 0x11
    24b2:	9a 89       	ldd	r25, Y+18	; 0x12
    24b4:	0e 96       	adiw	r24, 0x0e	; 14
    24b6:	0e 94 a8 07 	call	0xf50	; 0xf50 <vListInitialiseItem>
    24ba:	89 89       	ldd	r24, Y+17	; 0x11
    24bc:	9a 89       	ldd	r25, Y+18	; 0x12
    24be:	29 89       	ldd	r18, Y+17	; 0x11
    24c0:	3a 89       	ldd	r19, Y+18	; 0x12
    24c2:	fc 01       	movw	r30, r24
    24c4:	22 87       	std	Z+10, r18	; 0x0a
    24c6:	33 87       	std	Z+11, r19	; 0x0b
    24c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    24ca:	88 2f       	mov	r24, r24
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	a0 e0       	ldi	r26, 0x00	; 0
    24d0:	b0 e0       	ldi	r27, 0x00	; 0
    24d2:	24 e0       	ldi	r18, 0x04	; 4
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	40 e0       	ldi	r20, 0x00	; 0
    24d8:	50 e0       	ldi	r21, 0x00	; 0
    24da:	79 01       	movw	r14, r18
    24dc:	8a 01       	movw	r16, r20
    24de:	e8 1a       	sub	r14, r24
    24e0:	f9 0a       	sbc	r15, r25
    24e2:	0a 0b       	sbc	r16, r26
    24e4:	1b 0b       	sbc	r17, r27
    24e6:	d8 01       	movw	r26, r16
    24e8:	c7 01       	movw	r24, r14
    24ea:	29 89       	ldd	r18, Y+17	; 0x11
    24ec:	3a 89       	ldd	r19, Y+18	; 0x12
    24ee:	f9 01       	movw	r30, r18
    24f0:	86 87       	std	Z+14, r24	; 0x0e
    24f2:	97 87       	std	Z+15, r25	; 0x0f
    24f4:	a0 8b       	std	Z+16, r26	; 0x10
    24f6:	b1 8b       	std	Z+17, r27	; 0x11
    24f8:	89 89       	ldd	r24, Y+17	; 0x11
    24fa:	9a 89       	ldd	r25, Y+18	; 0x12
    24fc:	29 89       	ldd	r18, Y+17	; 0x11
    24fe:	3a 89       	ldd	r19, Y+18	; 0x12
    2500:	fc 01       	movw	r30, r24
    2502:	26 8b       	std	Z+22, r18	; 0x16
    2504:	37 8b       	std	Z+23, r19	; 0x17
    2506:	89 89       	ldd	r24, Y+17	; 0x11
    2508:	9a 89       	ldd	r25, Y+18	; 0x12
    250a:	fc 01       	movw	r30, r24
    250c:	17 a2       	std	Z+39, r1	; 0x27
    250e:	10 a6       	std	Z+40, r1	; 0x28
    2510:	11 a6       	std	Z+41, r1	; 0x29
    2512:	12 a6       	std	Z+42, r1	; 0x2a
    2514:	89 89       	ldd	r24, Y+17	; 0x11
    2516:	9a 89       	ldd	r25, Y+18	; 0x12
    2518:	fc 01       	movw	r30, r24
    251a:	13 a6       	std	Z+43, r1	; 0x2b
    251c:	4c 85       	ldd	r20, Y+12	; 0x0c
    251e:	5d 85       	ldd	r21, Y+13	; 0x0d
    2520:	2c 81       	ldd	r18, Y+4	; 0x04
    2522:	3d 81       	ldd	r19, Y+5	; 0x05
    2524:	8a 81       	ldd	r24, Y+2	; 0x02
    2526:	9b 81       	ldd	r25, Y+3	; 0x03
    2528:	b9 01       	movw	r22, r18
    252a:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <pxPortInitialiseStack>
    252e:	9c 01       	movw	r18, r24
    2530:	89 89       	ldd	r24, Y+17	; 0x11
    2532:	9a 89       	ldd	r25, Y+18	; 0x12
    2534:	fc 01       	movw	r30, r24
    2536:	20 83       	st	Z, r18
    2538:	31 83       	std	Z+1, r19	; 0x01
    253a:	8f 85       	ldd	r24, Y+15	; 0x0f
    253c:	98 89       	ldd	r25, Y+16	; 0x10
    253e:	89 2b       	or	r24, r25
    2540:	39 f0       	breq	.+14     	; 0x2550 <prvInitialiseNewTask+0x18a>
    2542:	8f 85       	ldd	r24, Y+15	; 0x0f
    2544:	98 89       	ldd	r25, Y+16	; 0x10
    2546:	29 89       	ldd	r18, Y+17	; 0x11
    2548:	3a 89       	ldd	r19, Y+18	; 0x12
    254a:	fc 01       	movw	r30, r24
    254c:	20 83       	st	Z, r18
    254e:	31 83       	std	Z+1, r19	; 0x01
    2550:	00 00       	nop
    2552:	64 96       	adiw	r28, 0x14	; 20
    2554:	cd bf       	out	0x3d, r28	; 61
    2556:	de bf       	out	0x3e, r29	; 62
    2558:	df 91       	pop	r29
    255a:	cf 91       	pop	r28
    255c:	1f 91       	pop	r17
    255e:	0f 91       	pop	r16
    2560:	ff 90       	pop	r15
    2562:	ef 90       	pop	r14
    2564:	df 90       	pop	r13
    2566:	cf 90       	pop	r12
    2568:	bf 90       	pop	r11
    256a:	af 90       	pop	r10
    256c:	9f 90       	pop	r9
    256e:	8f 90       	pop	r8
    2570:	08 95       	ret

00002572 <prvAddNewTaskToReadyList>:
    2572:	cf 93       	push	r28
    2574:	df 93       	push	r29
    2576:	1f 92       	push	r1
    2578:	1f 92       	push	r1
    257a:	cd b7       	in	r28, 0x3d	; 61
    257c:	de b7       	in	r29, 0x3e	; 62
    257e:	89 83       	std	Y+1, r24	; 0x01
    2580:	9a 83       	std	Y+2, r25	; 0x02
    2582:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2586:	ff 93       	push	r31
    2588:	f8 7f       	andi	r31, 0xF8	; 248
    258a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    258e:	80 91 ce 30 	lds	r24, 0x30CE	; 0x8030ce <uxCurrentNumberOfTasks>
    2592:	8f 5f       	subi	r24, 0xFF	; 255
    2594:	80 93 ce 30 	sts	0x30CE, r24	; 0x8030ce <uxCurrentNumberOfTasks>
    2598:	80 91 70 30 	lds	r24, 0x3070	; 0x803070 <pxCurrentTCB>
    259c:	90 91 71 30 	lds	r25, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    25a0:	89 2b       	or	r24, r25
    25a2:	69 f4       	brne	.+26     	; 0x25be <prvAddNewTaskToReadyList+0x4c>
    25a4:	89 81       	ldd	r24, Y+1	; 0x01
    25a6:	9a 81       	ldd	r25, Y+2	; 0x02
    25a8:	80 93 70 30 	sts	0x3070, r24	; 0x803070 <pxCurrentTCB>
    25ac:	90 93 71 30 	sts	0x3071, r25	; 0x803071 <pxCurrentTCB+0x1>
    25b0:	80 91 ce 30 	lds	r24, 0x30CE	; 0x8030ce <uxCurrentNumberOfTasks>
    25b4:	81 30       	cpi	r24, 0x01	; 1
    25b6:	c9 f4       	brne	.+50     	; 0x25ea <prvAddNewTaskToReadyList+0x78>
    25b8:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <prvInitialiseTaskLists>
    25bc:	16 c0       	rjmp	.+44     	; 0x25ea <prvAddNewTaskToReadyList+0x78>
    25be:	80 91 d4 30 	lds	r24, 0x30D4	; 0x8030d4 <xSchedulerRunning>
    25c2:	88 23       	and	r24, r24
    25c4:	91 f4       	brne	.+36     	; 0x25ea <prvAddNewTaskToReadyList+0x78>
    25c6:	80 91 70 30 	lds	r24, 0x3070	; 0x803070 <pxCurrentTCB>
    25ca:	90 91 71 30 	lds	r25, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    25ce:	fc 01       	movw	r30, r24
    25d0:	22 8d       	ldd	r18, Z+26	; 0x1a
    25d2:	89 81       	ldd	r24, Y+1	; 0x01
    25d4:	9a 81       	ldd	r25, Y+2	; 0x02
    25d6:	fc 01       	movw	r30, r24
    25d8:	82 8d       	ldd	r24, Z+26	; 0x1a
    25da:	82 17       	cp	r24, r18
    25dc:	30 f0       	brcs	.+12     	; 0x25ea <prvAddNewTaskToReadyList+0x78>
    25de:	89 81       	ldd	r24, Y+1	; 0x01
    25e0:	9a 81       	ldd	r25, Y+2	; 0x02
    25e2:	80 93 70 30 	sts	0x3070, r24	; 0x803070 <pxCurrentTCB>
    25e6:	90 93 71 30 	sts	0x3071, r25	; 0x803071 <pxCurrentTCB+0x1>
    25ea:	80 91 d8 30 	lds	r24, 0x30D8	; 0x8030d8 <uxTaskNumber>
    25ee:	8f 5f       	subi	r24, 0xFF	; 255
    25f0:	80 93 d8 30 	sts	0x30D8, r24	; 0x8030d8 <uxTaskNumber>
    25f4:	20 91 d8 30 	lds	r18, 0x30D8	; 0x8030d8 <uxTaskNumber>
    25f8:	89 81       	ldd	r24, Y+1	; 0x01
    25fa:	9a 81       	ldd	r25, Y+2	; 0x02
    25fc:	fc 01       	movw	r30, r24
    25fe:	25 a3       	std	Z+37, r18	; 0x25
    2600:	89 81       	ldd	r24, Y+1	; 0x01
    2602:	9a 81       	ldd	r25, Y+2	; 0x02
    2604:	fc 01       	movw	r30, r24
    2606:	92 8d       	ldd	r25, Z+26	; 0x1a
    2608:	80 91 d3 30 	lds	r24, 0x30D3	; 0x8030d3 <uxTopReadyPriority>
    260c:	89 17       	cp	r24, r25
    260e:	30 f4       	brcc	.+12     	; 0x261c <prvAddNewTaskToReadyList+0xaa>
    2610:	89 81       	ldd	r24, Y+1	; 0x01
    2612:	9a 81       	ldd	r25, Y+2	; 0x02
    2614:	fc 01       	movw	r30, r24
    2616:	82 8d       	ldd	r24, Z+26	; 0x1a
    2618:	80 93 d3 30 	sts	0x30D3, r24	; 0x8030d3 <uxTopReadyPriority>
    261c:	89 81       	ldd	r24, Y+1	; 0x01
    261e:	9a 81       	ldd	r25, Y+2	; 0x02
    2620:	ac 01       	movw	r20, r24
    2622:	4e 5f       	subi	r20, 0xFE	; 254
    2624:	5f 4f       	sbci	r21, 0xFF	; 255
    2626:	89 81       	ldd	r24, Y+1	; 0x01
    2628:	9a 81       	ldd	r25, Y+2	; 0x02
    262a:	fc 01       	movw	r30, r24
    262c:	82 8d       	ldd	r24, Z+26	; 0x1a
    262e:	28 2f       	mov	r18, r24
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	6b e0       	ldi	r22, 0x0B	; 11
    2634:	62 9f       	mul	r22, r18
    2636:	c0 01       	movw	r24, r0
    2638:	63 9f       	mul	r22, r19
    263a:	90 0d       	add	r25, r0
    263c:	11 24       	eor	r1, r1
    263e:	8e 58       	subi	r24, 0x8E	; 142
    2640:	9f 4c       	sbci	r25, 0xCF	; 207
    2642:	ba 01       	movw	r22, r20
    2644:	0e 94 bb 07 	call	0xf76	; 0xf76 <vListInsertEnd>
    2648:	ff 91       	pop	r31
    264a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    264e:	80 91 d4 30 	lds	r24, 0x30D4	; 0x8030d4 <xSchedulerRunning>
    2652:	88 23       	and	r24, r24
    2654:	71 f0       	breq	.+28     	; 0x2672 <prvAddNewTaskToReadyList+0x100>
    2656:	80 91 70 30 	lds	r24, 0x3070	; 0x803070 <pxCurrentTCB>
    265a:	90 91 71 30 	lds	r25, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    265e:	fc 01       	movw	r30, r24
    2660:	22 8d       	ldd	r18, Z+26	; 0x1a
    2662:	89 81       	ldd	r24, Y+1	; 0x01
    2664:	9a 81       	ldd	r25, Y+2	; 0x02
    2666:	fc 01       	movw	r30, r24
    2668:	82 8d       	ldd	r24, Z+26	; 0x1a
    266a:	28 17       	cp	r18, r24
    266c:	10 f4       	brcc	.+4      	; 0x2672 <prvAddNewTaskToReadyList+0x100>
    266e:	0e 94 05 0b 	call	0x160a	; 0x160a <vPortYield>
    2672:	00 00       	nop
    2674:	0f 90       	pop	r0
    2676:	0f 90       	pop	r0
    2678:	df 91       	pop	r29
    267a:	cf 91       	pop	r28
    267c:	08 95       	ret

0000267e <vTaskDelayUntil>:
    267e:	ef 92       	push	r14
    2680:	ff 92       	push	r15
    2682:	0f 93       	push	r16
    2684:	1f 93       	push	r17
    2686:	cf 93       	push	r28
    2688:	df 93       	push	r29
    268a:	cd b7       	in	r28, 0x3d	; 61
    268c:	de b7       	in	r29, 0x3e	; 62
    268e:	60 97       	sbiw	r28, 0x10	; 16
    2690:	cd bf       	out	0x3d, r28	; 61
    2692:	de bf       	out	0x3e, r29	; 62
    2694:	8b 87       	std	Y+11, r24	; 0x0b
    2696:	9c 87       	std	Y+12, r25	; 0x0c
    2698:	4d 87       	std	Y+13, r20	; 0x0d
    269a:	5e 87       	std	Y+14, r21	; 0x0e
    269c:	6f 87       	std	Y+15, r22	; 0x0f
    269e:	78 8b       	std	Y+16, r23	; 0x10
    26a0:	19 82       	std	Y+1, r1	; 0x01
    26a2:	0e 94 71 14 	call	0x28e2	; 0x28e2 <vTaskSuspendAll>
    26a6:	80 91 cf 30 	lds	r24, 0x30CF	; 0x8030cf <xTickCount>
    26aa:	90 91 d0 30 	lds	r25, 0x30D0	; 0x8030d0 <xTickCount+0x1>
    26ae:	a0 91 d1 30 	lds	r26, 0x30D1	; 0x8030d1 <xTickCount+0x2>
    26b2:	b0 91 d2 30 	lds	r27, 0x30D2	; 0x8030d2 <xTickCount+0x3>
    26b6:	8a 83       	std	Y+2, r24	; 0x02
    26b8:	9b 83       	std	Y+3, r25	; 0x03
    26ba:	ac 83       	std	Y+4, r26	; 0x04
    26bc:	bd 83       	std	Y+5, r27	; 0x05
    26be:	8b 85       	ldd	r24, Y+11	; 0x0b
    26c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    26c2:	fc 01       	movw	r30, r24
    26c4:	20 81       	ld	r18, Z
    26c6:	31 81       	ldd	r19, Z+1	; 0x01
    26c8:	42 81       	ldd	r20, Z+2	; 0x02
    26ca:	53 81       	ldd	r21, Z+3	; 0x03
    26cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    26d0:	af 85       	ldd	r26, Y+15	; 0x0f
    26d2:	b8 89       	ldd	r27, Y+16	; 0x10
    26d4:	82 0f       	add	r24, r18
    26d6:	93 1f       	adc	r25, r19
    26d8:	a4 1f       	adc	r26, r20
    26da:	b5 1f       	adc	r27, r21
    26dc:	8e 83       	std	Y+6, r24	; 0x06
    26de:	9f 83       	std	Y+7, r25	; 0x07
    26e0:	a8 87       	std	Y+8, r26	; 0x08
    26e2:	b9 87       	std	Y+9, r27	; 0x09
    26e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    26e6:	9c 85       	ldd	r25, Y+12	; 0x0c
    26e8:	fc 01       	movw	r30, r24
    26ea:	20 81       	ld	r18, Z
    26ec:	31 81       	ldd	r19, Z+1	; 0x01
    26ee:	42 81       	ldd	r20, Z+2	; 0x02
    26f0:	53 81       	ldd	r21, Z+3	; 0x03
    26f2:	8a 81       	ldd	r24, Y+2	; 0x02
    26f4:	9b 81       	ldd	r25, Y+3	; 0x03
    26f6:	ac 81       	ldd	r26, Y+4	; 0x04
    26f8:	bd 81       	ldd	r27, Y+5	; 0x05
    26fa:	82 17       	cp	r24, r18
    26fc:	93 07       	cpc	r25, r19
    26fe:	a4 07       	cpc	r26, r20
    2700:	b5 07       	cpc	r27, r21
    2702:	00 f5       	brcc	.+64     	; 0x2744 <vTaskDelayUntil+0xc6>
    2704:	8b 85       	ldd	r24, Y+11	; 0x0b
    2706:	9c 85       	ldd	r25, Y+12	; 0x0c
    2708:	fc 01       	movw	r30, r24
    270a:	20 81       	ld	r18, Z
    270c:	31 81       	ldd	r19, Z+1	; 0x01
    270e:	42 81       	ldd	r20, Z+2	; 0x02
    2710:	53 81       	ldd	r21, Z+3	; 0x03
    2712:	8e 81       	ldd	r24, Y+6	; 0x06
    2714:	9f 81       	ldd	r25, Y+7	; 0x07
    2716:	a8 85       	ldd	r26, Y+8	; 0x08
    2718:	b9 85       	ldd	r27, Y+9	; 0x09
    271a:	82 17       	cp	r24, r18
    271c:	93 07       	cpc	r25, r19
    271e:	a4 07       	cpc	r26, r20
    2720:	b5 07       	cpc	r27, r21
    2722:	78 f5       	brcc	.+94     	; 0x2782 <vTaskDelayUntil+0x104>
    2724:	2e 81       	ldd	r18, Y+6	; 0x06
    2726:	3f 81       	ldd	r19, Y+7	; 0x07
    2728:	48 85       	ldd	r20, Y+8	; 0x08
    272a:	59 85       	ldd	r21, Y+9	; 0x09
    272c:	8a 81       	ldd	r24, Y+2	; 0x02
    272e:	9b 81       	ldd	r25, Y+3	; 0x03
    2730:	ac 81       	ldd	r26, Y+4	; 0x04
    2732:	bd 81       	ldd	r27, Y+5	; 0x05
    2734:	82 17       	cp	r24, r18
    2736:	93 07       	cpc	r25, r19
    2738:	a4 07       	cpc	r26, r20
    273a:	b5 07       	cpc	r27, r21
    273c:	10 f5       	brcc	.+68     	; 0x2782 <vTaskDelayUntil+0x104>
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	89 83       	std	Y+1, r24	; 0x01
    2742:	1f c0       	rjmp	.+62     	; 0x2782 <vTaskDelayUntil+0x104>
    2744:	8b 85       	ldd	r24, Y+11	; 0x0b
    2746:	9c 85       	ldd	r25, Y+12	; 0x0c
    2748:	fc 01       	movw	r30, r24
    274a:	20 81       	ld	r18, Z
    274c:	31 81       	ldd	r19, Z+1	; 0x01
    274e:	42 81       	ldd	r20, Z+2	; 0x02
    2750:	53 81       	ldd	r21, Z+3	; 0x03
    2752:	8e 81       	ldd	r24, Y+6	; 0x06
    2754:	9f 81       	ldd	r25, Y+7	; 0x07
    2756:	a8 85       	ldd	r26, Y+8	; 0x08
    2758:	b9 85       	ldd	r27, Y+9	; 0x09
    275a:	82 17       	cp	r24, r18
    275c:	93 07       	cpc	r25, r19
    275e:	a4 07       	cpc	r26, r20
    2760:	b5 07       	cpc	r27, r21
    2762:	68 f0       	brcs	.+26     	; 0x277e <vTaskDelayUntil+0x100>
    2764:	2e 81       	ldd	r18, Y+6	; 0x06
    2766:	3f 81       	ldd	r19, Y+7	; 0x07
    2768:	48 85       	ldd	r20, Y+8	; 0x08
    276a:	59 85       	ldd	r21, Y+9	; 0x09
    276c:	8a 81       	ldd	r24, Y+2	; 0x02
    276e:	9b 81       	ldd	r25, Y+3	; 0x03
    2770:	ac 81       	ldd	r26, Y+4	; 0x04
    2772:	bd 81       	ldd	r27, Y+5	; 0x05
    2774:	82 17       	cp	r24, r18
    2776:	93 07       	cpc	r25, r19
    2778:	a4 07       	cpc	r26, r20
    277a:	b5 07       	cpc	r27, r21
    277c:	10 f4       	brcc	.+4      	; 0x2782 <vTaskDelayUntil+0x104>
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	89 83       	std	Y+1, r24	; 0x01
    2782:	2b 85       	ldd	r18, Y+11	; 0x0b
    2784:	3c 85       	ldd	r19, Y+12	; 0x0c
    2786:	8e 81       	ldd	r24, Y+6	; 0x06
    2788:	9f 81       	ldd	r25, Y+7	; 0x07
    278a:	a8 85       	ldd	r26, Y+8	; 0x08
    278c:	b9 85       	ldd	r27, Y+9	; 0x09
    278e:	f9 01       	movw	r30, r18
    2790:	80 83       	st	Z, r24
    2792:	91 83       	std	Z+1, r25	; 0x01
    2794:	a2 83       	std	Z+2, r26	; 0x02
    2796:	b3 83       	std	Z+3, r27	; 0x03
    2798:	89 81       	ldd	r24, Y+1	; 0x01
    279a:	88 23       	and	r24, r24
    279c:	a9 f0       	breq	.+42     	; 0x27c8 <vTaskDelayUntil+0x14a>
    279e:	2e 81       	ldd	r18, Y+6	; 0x06
    27a0:	3f 81       	ldd	r19, Y+7	; 0x07
    27a2:	48 85       	ldd	r20, Y+8	; 0x08
    27a4:	59 85       	ldd	r21, Y+9	; 0x09
    27a6:	8a 81       	ldd	r24, Y+2	; 0x02
    27a8:	9b 81       	ldd	r25, Y+3	; 0x03
    27aa:	ac 81       	ldd	r26, Y+4	; 0x04
    27ac:	bd 81       	ldd	r27, Y+5	; 0x05
    27ae:	79 01       	movw	r14, r18
    27b0:	8a 01       	movw	r16, r20
    27b2:	e8 1a       	sub	r14, r24
    27b4:	f9 0a       	sbc	r15, r25
    27b6:	0a 0b       	sbc	r16, r26
    27b8:	1b 0b       	sbc	r17, r27
    27ba:	d8 01       	movw	r26, r16
    27bc:	c7 01       	movw	r24, r14
    27be:	40 e0       	ldi	r20, 0x00	; 0
    27c0:	bc 01       	movw	r22, r24
    27c2:	cd 01       	movw	r24, r26
    27c4:	0e 94 48 1a 	call	0x3490	; 0x3490 <prvAddCurrentTaskToDelayedList>
    27c8:	0e 94 7e 14 	call	0x28fc	; 0x28fc <xTaskResumeAll>
    27cc:	8a 87       	std	Y+10, r24	; 0x0a
    27ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    27d0:	88 23       	and	r24, r24
    27d2:	11 f4       	brne	.+4      	; 0x27d8 <vTaskDelayUntil+0x15a>
    27d4:	0e 94 05 0b 	call	0x160a	; 0x160a <vPortYield>
    27d8:	00 00       	nop
    27da:	60 96       	adiw	r28, 0x10	; 16
    27dc:	cd bf       	out	0x3d, r28	; 61
    27de:	de bf       	out	0x3e, r29	; 62
    27e0:	df 91       	pop	r29
    27e2:	cf 91       	pop	r28
    27e4:	1f 91       	pop	r17
    27e6:	0f 91       	pop	r16
    27e8:	ff 90       	pop	r15
    27ea:	ef 90       	pop	r14
    27ec:	08 95       	ret

000027ee <vTaskDelay>:
    27ee:	cf 93       	push	r28
    27f0:	df 93       	push	r29
    27f2:	cd b7       	in	r28, 0x3d	; 61
    27f4:	de b7       	in	r29, 0x3e	; 62
    27f6:	25 97       	sbiw	r28, 0x05	; 5
    27f8:	cd bf       	out	0x3d, r28	; 61
    27fa:	de bf       	out	0x3e, r29	; 62
    27fc:	6a 83       	std	Y+2, r22	; 0x02
    27fe:	7b 83       	std	Y+3, r23	; 0x03
    2800:	8c 83       	std	Y+4, r24	; 0x04
    2802:	9d 83       	std	Y+5, r25	; 0x05
    2804:	19 82       	std	Y+1, r1	; 0x01
    2806:	8a 81       	ldd	r24, Y+2	; 0x02
    2808:	9b 81       	ldd	r25, Y+3	; 0x03
    280a:	ac 81       	ldd	r26, Y+4	; 0x04
    280c:	bd 81       	ldd	r27, Y+5	; 0x05
    280e:	89 2b       	or	r24, r25
    2810:	8a 2b       	or	r24, r26
    2812:	8b 2b       	or	r24, r27
    2814:	71 f0       	breq	.+28     	; 0x2832 <vTaskDelay+0x44>
    2816:	0e 94 71 14 	call	0x28e2	; 0x28e2 <vTaskSuspendAll>
    281a:	8a 81       	ldd	r24, Y+2	; 0x02
    281c:	9b 81       	ldd	r25, Y+3	; 0x03
    281e:	ac 81       	ldd	r26, Y+4	; 0x04
    2820:	bd 81       	ldd	r27, Y+5	; 0x05
    2822:	40 e0       	ldi	r20, 0x00	; 0
    2824:	bc 01       	movw	r22, r24
    2826:	cd 01       	movw	r24, r26
    2828:	0e 94 48 1a 	call	0x3490	; 0x3490 <prvAddCurrentTaskToDelayedList>
    282c:	0e 94 7e 14 	call	0x28fc	; 0x28fc <xTaskResumeAll>
    2830:	89 83       	std	Y+1, r24	; 0x01
    2832:	89 81       	ldd	r24, Y+1	; 0x01
    2834:	88 23       	and	r24, r24
    2836:	11 f4       	brne	.+4      	; 0x283c <vTaskDelay+0x4e>
    2838:	0e 94 05 0b 	call	0x160a	; 0x160a <vPortYield>
    283c:	00 00       	nop
    283e:	25 96       	adiw	r28, 0x05	; 5
    2840:	cd bf       	out	0x3d, r28	; 61
    2842:	de bf       	out	0x3e, r29	; 62
    2844:	df 91       	pop	r29
    2846:	cf 91       	pop	r28
    2848:	08 95       	ret

0000284a <vTaskStartScheduler>:
    284a:	ef 92       	push	r14
    284c:	ff 92       	push	r15
    284e:	0f 93       	push	r16
    2850:	cf 93       	push	r28
    2852:	df 93       	push	r29
    2854:	1f 92       	push	r1
    2856:	cd b7       	in	r28, 0x3d	; 61
    2858:	de b7       	in	r29, 0x3e	; 62
    285a:	0f 2e       	mov	r0, r31
    285c:	fd ed       	ldi	r31, 0xDD	; 221
    285e:	ef 2e       	mov	r14, r31
    2860:	f0 e3       	ldi	r31, 0x30	; 48
    2862:	ff 2e       	mov	r15, r31
    2864:	f0 2d       	mov	r31, r0
    2866:	00 e0       	ldi	r16, 0x00	; 0
    2868:	20 e0       	ldi	r18, 0x00	; 0
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	48 ec       	ldi	r20, 0xC8	; 200
    286e:	50 e0       	ldi	r21, 0x00	; 0
    2870:	64 e0       	ldi	r22, 0x04	; 4
    2872:	70 e2       	ldi	r23, 0x20	; 32
    2874:	88 e5       	ldi	r24, 0x58	; 88
    2876:	99 e1       	ldi	r25, 0x19	; 25
    2878:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <xTaskCreate>
    287c:	89 83       	std	Y+1, r24	; 0x01
    287e:	89 81       	ldd	r24, Y+1	; 0x01
    2880:	81 30       	cpi	r24, 0x01	; 1
    2882:	19 f4       	brne	.+6      	; 0x288a <vTaskStartScheduler+0x40>
    2884:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <xTimerCreateTimerTask>
    2888:	89 83       	std	Y+1, r24	; 0x01
    288a:	89 81       	ldd	r24, Y+1	; 0x01
    288c:	81 30       	cpi	r24, 0x01	; 1
    288e:	09 f5       	brne	.+66     	; 0x28d2 <vTaskStartScheduler+0x88>
    2890:	80 ea       	ldi	r24, 0xA0	; 160
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	20 ea       	ldi	r18, 0xA0	; 160
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	f9 01       	movw	r30, r18
    289a:	22 81       	ldd	r18, Z+2	; 0x02
    289c:	28 7f       	andi	r18, 0xF8	; 248
    289e:	fc 01       	movw	r30, r24
    28a0:	22 83       	std	Z+2, r18	; 0x02
    28a2:	8f ef       	ldi	r24, 0xFF	; 255
    28a4:	9f ef       	ldi	r25, 0xFF	; 255
    28a6:	dc 01       	movw	r26, r24
    28a8:	80 93 d9 30 	sts	0x30D9, r24	; 0x8030d9 <xNextTaskUnblockTime>
    28ac:	90 93 da 30 	sts	0x30DA, r25	; 0x8030da <xNextTaskUnblockTime+0x1>
    28b0:	a0 93 db 30 	sts	0x30DB, r26	; 0x8030db <xNextTaskUnblockTime+0x2>
    28b4:	b0 93 dc 30 	sts	0x30DC, r27	; 0x8030dc <xNextTaskUnblockTime+0x3>
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	80 93 d4 30 	sts	0x30D4, r24	; 0x8030d4 <xSchedulerRunning>
    28be:	10 92 cf 30 	sts	0x30CF, r1	; 0x8030cf <xTickCount>
    28c2:	10 92 d0 30 	sts	0x30D0, r1	; 0x8030d0 <xTickCount+0x1>
    28c6:	10 92 d1 30 	sts	0x30D1, r1	; 0x8030d1 <xTickCount+0x2>
    28ca:	10 92 d2 30 	sts	0x30D2, r1	; 0x8030d2 <xTickCount+0x3>
    28ce:	0e 94 cd 0a 	call	0x159a	; 0x159a <xPortStartScheduler>
    28d2:	00 00       	nop
    28d4:	0f 90       	pop	r0
    28d6:	df 91       	pop	r29
    28d8:	cf 91       	pop	r28
    28da:	0f 91       	pop	r16
    28dc:	ff 90       	pop	r15
    28de:	ef 90       	pop	r14
    28e0:	08 95       	ret

000028e2 <vTaskSuspendAll>:
    28e2:	cf 93       	push	r28
    28e4:	df 93       	push	r29
    28e6:	cd b7       	in	r28, 0x3d	; 61
    28e8:	de b7       	in	r29, 0x3e	; 62
    28ea:	80 91 df 30 	lds	r24, 0x30DF	; 0x8030df <uxSchedulerSuspended>
    28ee:	8f 5f       	subi	r24, 0xFF	; 255
    28f0:	80 93 df 30 	sts	0x30DF, r24	; 0x8030df <uxSchedulerSuspended>
    28f4:	00 00       	nop
    28f6:	df 91       	pop	r29
    28f8:	cf 91       	pop	r28
    28fa:	08 95       	ret

000028fc <xTaskResumeAll>:
    28fc:	cf 93       	push	r28
    28fe:	df 93       	push	r29
    2900:	00 d0       	rcall	.+0      	; 0x2902 <xTaskResumeAll+0x6>
    2902:	1f 92       	push	r1
    2904:	cd b7       	in	r28, 0x3d	; 61
    2906:	de b7       	in	r29, 0x3e	; 62
    2908:	19 82       	std	Y+1, r1	; 0x01
    290a:	1a 82       	std	Y+2, r1	; 0x02
    290c:	1b 82       	std	Y+3, r1	; 0x03
    290e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2912:	ff 93       	push	r31
    2914:	f8 7f       	andi	r31, 0xF8	; 248
    2916:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    291a:	80 91 df 30 	lds	r24, 0x30DF	; 0x8030df <uxSchedulerSuspended>
    291e:	81 50       	subi	r24, 0x01	; 1
    2920:	80 93 df 30 	sts	0x30DF, r24	; 0x8030df <uxSchedulerSuspended>
    2924:	80 91 df 30 	lds	r24, 0x30DF	; 0x8030df <uxSchedulerSuspended>
    2928:	88 23       	and	r24, r24
    292a:	09 f0       	breq	.+2      	; 0x292e <xTaskResumeAll+0x32>
    292c:	74 c0       	rjmp	.+232    	; 0x2a16 <xTaskResumeAll+0x11a>
    292e:	80 91 ce 30 	lds	r24, 0x30CE	; 0x8030ce <uxCurrentNumberOfTasks>
    2932:	88 23       	and	r24, r24
    2934:	09 f4       	brne	.+2      	; 0x2938 <xTaskResumeAll+0x3c>
    2936:	6f c0       	rjmp	.+222    	; 0x2a16 <xTaskResumeAll+0x11a>
    2938:	46 c0       	rjmp	.+140    	; 0x29c6 <xTaskResumeAll+0xca>
    293a:	80 91 bf 30 	lds	r24, 0x30BF	; 0x8030bf <xPendingReadyList+0x7>
    293e:	90 91 c0 30 	lds	r25, 0x30C0	; 0x8030c0 <xPendingReadyList+0x8>
    2942:	fc 01       	movw	r30, r24
    2944:	80 85       	ldd	r24, Z+8	; 0x08
    2946:	91 85       	ldd	r25, Z+9	; 0x09
    2948:	89 83       	std	Y+1, r24	; 0x01
    294a:	9a 83       	std	Y+2, r25	; 0x02
    294c:	89 81       	ldd	r24, Y+1	; 0x01
    294e:	9a 81       	ldd	r25, Y+2	; 0x02
    2950:	0e 96       	adiw	r24, 0x0e	; 14
    2952:	0e 94 87 08 	call	0x110e	; 0x110e <uxListRemove>
    2956:	89 81       	ldd	r24, Y+1	; 0x01
    2958:	9a 81       	ldd	r25, Y+2	; 0x02
    295a:	02 96       	adiw	r24, 0x02	; 2
    295c:	0e 94 87 08 	call	0x110e	; 0x110e <uxListRemove>
    2960:	89 81       	ldd	r24, Y+1	; 0x01
    2962:	9a 81       	ldd	r25, Y+2	; 0x02
    2964:	fc 01       	movw	r30, r24
    2966:	92 8d       	ldd	r25, Z+26	; 0x1a
    2968:	80 91 d3 30 	lds	r24, 0x30D3	; 0x8030d3 <uxTopReadyPriority>
    296c:	89 17       	cp	r24, r25
    296e:	30 f4       	brcc	.+12     	; 0x297c <xTaskResumeAll+0x80>
    2970:	89 81       	ldd	r24, Y+1	; 0x01
    2972:	9a 81       	ldd	r25, Y+2	; 0x02
    2974:	fc 01       	movw	r30, r24
    2976:	82 8d       	ldd	r24, Z+26	; 0x1a
    2978:	80 93 d3 30 	sts	0x30D3, r24	; 0x8030d3 <uxTopReadyPriority>
    297c:	89 81       	ldd	r24, Y+1	; 0x01
    297e:	9a 81       	ldd	r25, Y+2	; 0x02
    2980:	ac 01       	movw	r20, r24
    2982:	4e 5f       	subi	r20, 0xFE	; 254
    2984:	5f 4f       	sbci	r21, 0xFF	; 255
    2986:	89 81       	ldd	r24, Y+1	; 0x01
    2988:	9a 81       	ldd	r25, Y+2	; 0x02
    298a:	fc 01       	movw	r30, r24
    298c:	82 8d       	ldd	r24, Z+26	; 0x1a
    298e:	28 2f       	mov	r18, r24
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	6b e0       	ldi	r22, 0x0B	; 11
    2994:	62 9f       	mul	r22, r18
    2996:	c0 01       	movw	r24, r0
    2998:	63 9f       	mul	r22, r19
    299a:	90 0d       	add	r25, r0
    299c:	11 24       	eor	r1, r1
    299e:	8e 58       	subi	r24, 0x8E	; 142
    29a0:	9f 4c       	sbci	r25, 0xCF	; 207
    29a2:	ba 01       	movw	r22, r20
    29a4:	0e 94 bb 07 	call	0xf76	; 0xf76 <vListInsertEnd>
    29a8:	89 81       	ldd	r24, Y+1	; 0x01
    29aa:	9a 81       	ldd	r25, Y+2	; 0x02
    29ac:	fc 01       	movw	r30, r24
    29ae:	22 8d       	ldd	r18, Z+26	; 0x1a
    29b0:	80 91 70 30 	lds	r24, 0x3070	; 0x803070 <pxCurrentTCB>
    29b4:	90 91 71 30 	lds	r25, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    29b8:	fc 01       	movw	r30, r24
    29ba:	82 8d       	ldd	r24, Z+26	; 0x1a
    29bc:	28 17       	cp	r18, r24
    29be:	18 f0       	brcs	.+6      	; 0x29c6 <xTaskResumeAll+0xca>
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	80 93 d6 30 	sts	0x30D6, r24	; 0x8030d6 <xYieldPending>
    29c6:	80 91 b8 30 	lds	r24, 0x30B8	; 0x8030b8 <xPendingReadyList>
    29ca:	88 23       	and	r24, r24
    29cc:	09 f0       	breq	.+2      	; 0x29d0 <xTaskResumeAll+0xd4>
    29ce:	b5 cf       	rjmp	.-150    	; 0x293a <xTaskResumeAll+0x3e>
    29d0:	89 81       	ldd	r24, Y+1	; 0x01
    29d2:	9a 81       	ldd	r25, Y+2	; 0x02
    29d4:	89 2b       	or	r24, r25
    29d6:	11 f0       	breq	.+4      	; 0x29dc <xTaskResumeAll+0xe0>
    29d8:	0e 94 ae 19 	call	0x335c	; 0x335c <prvResetNextTaskUnblockTime>
    29dc:	80 91 d5 30 	lds	r24, 0x30D5	; 0x8030d5 <uxPendedTicks>
    29e0:	8c 83       	std	Y+4, r24	; 0x04
    29e2:	8c 81       	ldd	r24, Y+4	; 0x04
    29e4:	88 23       	and	r24, r24
    29e6:	79 f0       	breq	.+30     	; 0x2a06 <xTaskResumeAll+0x10a>
    29e8:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <xTaskIncrementTick>
    29ec:	88 23       	and	r24, r24
    29ee:	19 f0       	breq	.+6      	; 0x29f6 <xTaskResumeAll+0xfa>
    29f0:	81 e0       	ldi	r24, 0x01	; 1
    29f2:	80 93 d6 30 	sts	0x30D6, r24	; 0x8030d6 <xYieldPending>
    29f6:	8c 81       	ldd	r24, Y+4	; 0x04
    29f8:	81 50       	subi	r24, 0x01	; 1
    29fa:	8c 83       	std	Y+4, r24	; 0x04
    29fc:	8c 81       	ldd	r24, Y+4	; 0x04
    29fe:	88 23       	and	r24, r24
    2a00:	99 f7       	brne	.-26     	; 0x29e8 <xTaskResumeAll+0xec>
    2a02:	10 92 d5 30 	sts	0x30D5, r1	; 0x8030d5 <uxPendedTicks>
    2a06:	80 91 d6 30 	lds	r24, 0x30D6	; 0x8030d6 <xYieldPending>
    2a0a:	88 23       	and	r24, r24
    2a0c:	21 f0       	breq	.+8      	; 0x2a16 <xTaskResumeAll+0x11a>
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	8b 83       	std	Y+3, r24	; 0x03
    2a12:	0e 94 05 0b 	call	0x160a	; 0x160a <vPortYield>
    2a16:	ff 91       	pop	r31
    2a18:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a1e:	24 96       	adiw	r28, 0x04	; 4
    2a20:	cd bf       	out	0x3d, r28	; 61
    2a22:	de bf       	out	0x3e, r29	; 62
    2a24:	df 91       	pop	r29
    2a26:	cf 91       	pop	r28
    2a28:	08 95       	ret

00002a2a <xTaskGetTickCount>:
    2a2a:	cf 93       	push	r28
    2a2c:	df 93       	push	r29
    2a2e:	00 d0       	rcall	.+0      	; 0x2a30 <xTaskGetTickCount+0x6>
    2a30:	1f 92       	push	r1
    2a32:	cd b7       	in	r28, 0x3d	; 61
    2a34:	de b7       	in	r29, 0x3e	; 62
    2a36:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2a3a:	ff 93       	push	r31
    2a3c:	f8 7f       	andi	r31, 0xF8	; 248
    2a3e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2a42:	80 91 cf 30 	lds	r24, 0x30CF	; 0x8030cf <xTickCount>
    2a46:	90 91 d0 30 	lds	r25, 0x30D0	; 0x8030d0 <xTickCount+0x1>
    2a4a:	a0 91 d1 30 	lds	r26, 0x30D1	; 0x8030d1 <xTickCount+0x2>
    2a4e:	b0 91 d2 30 	lds	r27, 0x30D2	; 0x8030d2 <xTickCount+0x3>
    2a52:	89 83       	std	Y+1, r24	; 0x01
    2a54:	9a 83       	std	Y+2, r25	; 0x02
    2a56:	ab 83       	std	Y+3, r26	; 0x03
    2a58:	bc 83       	std	Y+4, r27	; 0x04
    2a5a:	ff 91       	pop	r31
    2a5c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    2a60:	89 81       	ldd	r24, Y+1	; 0x01
    2a62:	9a 81       	ldd	r25, Y+2	; 0x02
    2a64:	ab 81       	ldd	r26, Y+3	; 0x03
    2a66:	bc 81       	ldd	r27, Y+4	; 0x04
    2a68:	bc 01       	movw	r22, r24
    2a6a:	cd 01       	movw	r24, r26
    2a6c:	24 96       	adiw	r28, 0x04	; 4
    2a6e:	cd bf       	out	0x3d, r28	; 61
    2a70:	de bf       	out	0x3e, r29	; 62
    2a72:	df 91       	pop	r29
    2a74:	cf 91       	pop	r28
    2a76:	08 95       	ret

00002a78 <xTaskIncrementTick>:
    2a78:	cf 93       	push	r28
    2a7a:	df 93       	push	r29
    2a7c:	cd b7       	in	r28, 0x3d	; 61
    2a7e:	de b7       	in	r29, 0x3e	; 62
    2a80:	2d 97       	sbiw	r28, 0x0d	; 13
    2a82:	cd bf       	out	0x3d, r28	; 61
    2a84:	de bf       	out	0x3e, r29	; 62
    2a86:	19 82       	std	Y+1, r1	; 0x01
    2a88:	80 91 df 30 	lds	r24, 0x30DF	; 0x8030df <uxSchedulerSuspended>
    2a8c:	88 23       	and	r24, r24
    2a8e:	09 f0       	breq	.+2      	; 0x2a92 <xTaskIncrementTick+0x1a>
    2a90:	f1 c0       	rjmp	.+482    	; 0x2c74 <xTaskIncrementTick+0x1fc>
    2a92:	80 91 cf 30 	lds	r24, 0x30CF	; 0x8030cf <xTickCount>
    2a96:	90 91 d0 30 	lds	r25, 0x30D0	; 0x8030d0 <xTickCount+0x1>
    2a9a:	a0 91 d1 30 	lds	r26, 0x30D1	; 0x8030d1 <xTickCount+0x2>
    2a9e:	b0 91 d2 30 	lds	r27, 0x30D2	; 0x8030d2 <xTickCount+0x3>
    2aa2:	01 96       	adiw	r24, 0x01	; 1
    2aa4:	a1 1d       	adc	r26, r1
    2aa6:	b1 1d       	adc	r27, r1
    2aa8:	8a 83       	std	Y+2, r24	; 0x02
    2aaa:	9b 83       	std	Y+3, r25	; 0x03
    2aac:	ac 83       	std	Y+4, r26	; 0x04
    2aae:	bd 83       	std	Y+5, r27	; 0x05
    2ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ab4:	ac 81       	ldd	r26, Y+4	; 0x04
    2ab6:	bd 81       	ldd	r27, Y+5	; 0x05
    2ab8:	80 93 cf 30 	sts	0x30CF, r24	; 0x8030cf <xTickCount>
    2abc:	90 93 d0 30 	sts	0x30D0, r25	; 0x8030d0 <xTickCount+0x1>
    2ac0:	a0 93 d1 30 	sts	0x30D1, r26	; 0x8030d1 <xTickCount+0x2>
    2ac4:	b0 93 d2 30 	sts	0x30D2, r27	; 0x8030d2 <xTickCount+0x3>
    2ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aca:	9b 81       	ldd	r25, Y+3	; 0x03
    2acc:	ac 81       	ldd	r26, Y+4	; 0x04
    2ace:	bd 81       	ldd	r27, Y+5	; 0x05
    2ad0:	89 2b       	or	r24, r25
    2ad2:	8a 2b       	or	r24, r26
    2ad4:	8b 2b       	or	r24, r27
    2ad6:	d9 f4       	brne	.+54     	; 0x2b0e <xTaskIncrementTick+0x96>
    2ad8:	80 91 b4 30 	lds	r24, 0x30B4	; 0x8030b4 <pxDelayedTaskList>
    2adc:	90 91 b5 30 	lds	r25, 0x30B5	; 0x8030b5 <pxDelayedTaskList+0x1>
    2ae0:	8e 83       	std	Y+6, r24	; 0x06
    2ae2:	9f 83       	std	Y+7, r25	; 0x07
    2ae4:	80 91 b6 30 	lds	r24, 0x30B6	; 0x8030b6 <pxOverflowDelayedTaskList>
    2ae8:	90 91 b7 30 	lds	r25, 0x30B7	; 0x8030b7 <pxOverflowDelayedTaskList+0x1>
    2aec:	80 93 b4 30 	sts	0x30B4, r24	; 0x8030b4 <pxDelayedTaskList>
    2af0:	90 93 b5 30 	sts	0x30B5, r25	; 0x8030b5 <pxDelayedTaskList+0x1>
    2af4:	8e 81       	ldd	r24, Y+6	; 0x06
    2af6:	9f 81       	ldd	r25, Y+7	; 0x07
    2af8:	80 93 b6 30 	sts	0x30B6, r24	; 0x8030b6 <pxOverflowDelayedTaskList>
    2afc:	90 93 b7 30 	sts	0x30B7, r25	; 0x8030b7 <pxOverflowDelayedTaskList+0x1>
    2b00:	80 91 d7 30 	lds	r24, 0x30D7	; 0x8030d7 <xNumOfOverflows>
    2b04:	8f 5f       	subi	r24, 0xFF	; 255
    2b06:	80 93 d7 30 	sts	0x30D7, r24	; 0x8030d7 <xNumOfOverflows>
    2b0a:	0e 94 ae 19 	call	0x335c	; 0x335c <prvResetNextTaskUnblockTime>
    2b0e:	80 91 d9 30 	lds	r24, 0x30D9	; 0x8030d9 <xNextTaskUnblockTime>
    2b12:	90 91 da 30 	lds	r25, 0x30DA	; 0x8030da <xNextTaskUnblockTime+0x1>
    2b16:	a0 91 db 30 	lds	r26, 0x30DB	; 0x8030db <xNextTaskUnblockTime+0x2>
    2b1a:	b0 91 dc 30 	lds	r27, 0x30DC	; 0x8030dc <xNextTaskUnblockTime+0x3>
    2b1e:	2a 81       	ldd	r18, Y+2	; 0x02
    2b20:	3b 81       	ldd	r19, Y+3	; 0x03
    2b22:	4c 81       	ldd	r20, Y+4	; 0x04
    2b24:	5d 81       	ldd	r21, Y+5	; 0x05
    2b26:	28 17       	cp	r18, r24
    2b28:	39 07       	cpc	r19, r25
    2b2a:	4a 07       	cpc	r20, r26
    2b2c:	5b 07       	cpc	r21, r27
    2b2e:	08 f4       	brcc	.+2      	; 0x2b32 <xTaskIncrementTick+0xba>
    2b30:	8a c0       	rjmp	.+276    	; 0x2c46 <xTaskIncrementTick+0x1ce>
    2b32:	80 91 b4 30 	lds	r24, 0x30B4	; 0x8030b4 <pxDelayedTaskList>
    2b36:	90 91 b5 30 	lds	r25, 0x30B5	; 0x8030b5 <pxDelayedTaskList+0x1>
    2b3a:	fc 01       	movw	r30, r24
    2b3c:	80 81       	ld	r24, Z
    2b3e:	88 23       	and	r24, r24
    2b40:	61 f4       	brne	.+24     	; 0x2b5a <xTaskIncrementTick+0xe2>
    2b42:	8f ef       	ldi	r24, 0xFF	; 255
    2b44:	9f ef       	ldi	r25, 0xFF	; 255
    2b46:	dc 01       	movw	r26, r24
    2b48:	80 93 d9 30 	sts	0x30D9, r24	; 0x8030d9 <xNextTaskUnblockTime>
    2b4c:	90 93 da 30 	sts	0x30DA, r25	; 0x8030da <xNextTaskUnblockTime+0x1>
    2b50:	a0 93 db 30 	sts	0x30DB, r26	; 0x8030db <xNextTaskUnblockTime+0x2>
    2b54:	b0 93 dc 30 	sts	0x30DC, r27	; 0x8030dc <xNextTaskUnblockTime+0x3>
    2b58:	76 c0       	rjmp	.+236    	; 0x2c46 <xTaskIncrementTick+0x1ce>
    2b5a:	80 91 b4 30 	lds	r24, 0x30B4	; 0x8030b4 <pxDelayedTaskList>
    2b5e:	90 91 b5 30 	lds	r25, 0x30B5	; 0x8030b5 <pxDelayedTaskList+0x1>
    2b62:	fc 01       	movw	r30, r24
    2b64:	87 81       	ldd	r24, Z+7	; 0x07
    2b66:	90 85       	ldd	r25, Z+8	; 0x08
    2b68:	fc 01       	movw	r30, r24
    2b6a:	80 85       	ldd	r24, Z+8	; 0x08
    2b6c:	91 85       	ldd	r25, Z+9	; 0x09
    2b6e:	88 87       	std	Y+8, r24	; 0x08
    2b70:	99 87       	std	Y+9, r25	; 0x09
    2b72:	88 85       	ldd	r24, Y+8	; 0x08
    2b74:	99 85       	ldd	r25, Y+9	; 0x09
    2b76:	fc 01       	movw	r30, r24
    2b78:	82 81       	ldd	r24, Z+2	; 0x02
    2b7a:	93 81       	ldd	r25, Z+3	; 0x03
    2b7c:	a4 81       	ldd	r26, Z+4	; 0x04
    2b7e:	b5 81       	ldd	r27, Z+5	; 0x05
    2b80:	8a 87       	std	Y+10, r24	; 0x0a
    2b82:	9b 87       	std	Y+11, r25	; 0x0b
    2b84:	ac 87       	std	Y+12, r26	; 0x0c
    2b86:	bd 87       	std	Y+13, r27	; 0x0d
    2b88:	2a 81       	ldd	r18, Y+2	; 0x02
    2b8a:	3b 81       	ldd	r19, Y+3	; 0x03
    2b8c:	4c 81       	ldd	r20, Y+4	; 0x04
    2b8e:	5d 81       	ldd	r21, Y+5	; 0x05
    2b90:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b92:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b94:	ac 85       	ldd	r26, Y+12	; 0x0c
    2b96:	bd 85       	ldd	r27, Y+13	; 0x0d
    2b98:	28 17       	cp	r18, r24
    2b9a:	39 07       	cpc	r19, r25
    2b9c:	4a 07       	cpc	r20, r26
    2b9e:	5b 07       	cpc	r21, r27
    2ba0:	68 f4       	brcc	.+26     	; 0x2bbc <xTaskIncrementTick+0x144>
    2ba2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ba4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ba6:	ac 85       	ldd	r26, Y+12	; 0x0c
    2ba8:	bd 85       	ldd	r27, Y+13	; 0x0d
    2baa:	80 93 d9 30 	sts	0x30D9, r24	; 0x8030d9 <xNextTaskUnblockTime>
    2bae:	90 93 da 30 	sts	0x30DA, r25	; 0x8030da <xNextTaskUnblockTime+0x1>
    2bb2:	a0 93 db 30 	sts	0x30DB, r26	; 0x8030db <xNextTaskUnblockTime+0x2>
    2bb6:	b0 93 dc 30 	sts	0x30DC, r27	; 0x8030dc <xNextTaskUnblockTime+0x3>
    2bba:	45 c0       	rjmp	.+138    	; 0x2c46 <xTaskIncrementTick+0x1ce>
    2bbc:	88 85       	ldd	r24, Y+8	; 0x08
    2bbe:	99 85       	ldd	r25, Y+9	; 0x09
    2bc0:	02 96       	adiw	r24, 0x02	; 2
    2bc2:	0e 94 87 08 	call	0x110e	; 0x110e <uxListRemove>
    2bc6:	88 85       	ldd	r24, Y+8	; 0x08
    2bc8:	99 85       	ldd	r25, Y+9	; 0x09
    2bca:	fc 01       	movw	r30, r24
    2bcc:	80 8d       	ldd	r24, Z+24	; 0x18
    2bce:	91 8d       	ldd	r25, Z+25	; 0x19
    2bd0:	89 2b       	or	r24, r25
    2bd2:	29 f0       	breq	.+10     	; 0x2bde <xTaskIncrementTick+0x166>
    2bd4:	88 85       	ldd	r24, Y+8	; 0x08
    2bd6:	99 85       	ldd	r25, Y+9	; 0x09
    2bd8:	0e 96       	adiw	r24, 0x0e	; 14
    2bda:	0e 94 87 08 	call	0x110e	; 0x110e <uxListRemove>
    2bde:	88 85       	ldd	r24, Y+8	; 0x08
    2be0:	99 85       	ldd	r25, Y+9	; 0x09
    2be2:	fc 01       	movw	r30, r24
    2be4:	92 8d       	ldd	r25, Z+26	; 0x1a
    2be6:	80 91 d3 30 	lds	r24, 0x30D3	; 0x8030d3 <uxTopReadyPriority>
    2bea:	89 17       	cp	r24, r25
    2bec:	30 f4       	brcc	.+12     	; 0x2bfa <xTaskIncrementTick+0x182>
    2bee:	88 85       	ldd	r24, Y+8	; 0x08
    2bf0:	99 85       	ldd	r25, Y+9	; 0x09
    2bf2:	fc 01       	movw	r30, r24
    2bf4:	82 8d       	ldd	r24, Z+26	; 0x1a
    2bf6:	80 93 d3 30 	sts	0x30D3, r24	; 0x8030d3 <uxTopReadyPriority>
    2bfa:	88 85       	ldd	r24, Y+8	; 0x08
    2bfc:	99 85       	ldd	r25, Y+9	; 0x09
    2bfe:	ac 01       	movw	r20, r24
    2c00:	4e 5f       	subi	r20, 0xFE	; 254
    2c02:	5f 4f       	sbci	r21, 0xFF	; 255
    2c04:	88 85       	ldd	r24, Y+8	; 0x08
    2c06:	99 85       	ldd	r25, Y+9	; 0x09
    2c08:	fc 01       	movw	r30, r24
    2c0a:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c0c:	28 2f       	mov	r18, r24
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	6b e0       	ldi	r22, 0x0B	; 11
    2c12:	62 9f       	mul	r22, r18
    2c14:	c0 01       	movw	r24, r0
    2c16:	63 9f       	mul	r22, r19
    2c18:	90 0d       	add	r25, r0
    2c1a:	11 24       	eor	r1, r1
    2c1c:	8e 58       	subi	r24, 0x8E	; 142
    2c1e:	9f 4c       	sbci	r25, 0xCF	; 207
    2c20:	ba 01       	movw	r22, r20
    2c22:	0e 94 bb 07 	call	0xf76	; 0xf76 <vListInsertEnd>
    2c26:	88 85       	ldd	r24, Y+8	; 0x08
    2c28:	99 85       	ldd	r25, Y+9	; 0x09
    2c2a:	fc 01       	movw	r30, r24
    2c2c:	22 8d       	ldd	r18, Z+26	; 0x1a
    2c2e:	80 91 70 30 	lds	r24, 0x3070	; 0x803070 <pxCurrentTCB>
    2c32:	90 91 71 30 	lds	r25, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    2c36:	fc 01       	movw	r30, r24
    2c38:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c3a:	28 17       	cp	r18, r24
    2c3c:	08 f4       	brcc	.+2      	; 0x2c40 <xTaskIncrementTick+0x1c8>
    2c3e:	79 cf       	rjmp	.-270    	; 0x2b32 <xTaskIncrementTick+0xba>
    2c40:	81 e0       	ldi	r24, 0x01	; 1
    2c42:	89 83       	std	Y+1, r24	; 0x01
    2c44:	76 cf       	rjmp	.-276    	; 0x2b32 <xTaskIncrementTick+0xba>
    2c46:	80 91 70 30 	lds	r24, 0x3070	; 0x803070 <pxCurrentTCB>
    2c4a:	90 91 71 30 	lds	r25, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    2c4e:	fc 01       	movw	r30, r24
    2c50:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c52:	28 2f       	mov	r18, r24
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	4b e0       	ldi	r20, 0x0B	; 11
    2c58:	42 9f       	mul	r20, r18
    2c5a:	c0 01       	movw	r24, r0
    2c5c:	43 9f       	mul	r20, r19
    2c5e:	90 0d       	add	r25, r0
    2c60:	11 24       	eor	r1, r1
    2c62:	8e 58       	subi	r24, 0x8E	; 142
    2c64:	9f 4c       	sbci	r25, 0xCF	; 207
    2c66:	fc 01       	movw	r30, r24
    2c68:	80 81       	ld	r24, Z
    2c6a:	82 30       	cpi	r24, 0x02	; 2
    2c6c:	40 f0       	brcs	.+16     	; 0x2c7e <xTaskIncrementTick+0x206>
    2c6e:	81 e0       	ldi	r24, 0x01	; 1
    2c70:	89 83       	std	Y+1, r24	; 0x01
    2c72:	05 c0       	rjmp	.+10     	; 0x2c7e <xTaskIncrementTick+0x206>
    2c74:	80 91 d5 30 	lds	r24, 0x30D5	; 0x8030d5 <uxPendedTicks>
    2c78:	8f 5f       	subi	r24, 0xFF	; 255
    2c7a:	80 93 d5 30 	sts	0x30D5, r24	; 0x8030d5 <uxPendedTicks>
    2c7e:	80 91 d6 30 	lds	r24, 0x30D6	; 0x8030d6 <xYieldPending>
    2c82:	88 23       	and	r24, r24
    2c84:	11 f0       	breq	.+4      	; 0x2c8a <xTaskIncrementTick+0x212>
    2c86:	81 e0       	ldi	r24, 0x01	; 1
    2c88:	89 83       	std	Y+1, r24	; 0x01
    2c8a:	89 81       	ldd	r24, Y+1	; 0x01
    2c8c:	2d 96       	adiw	r28, 0x0d	; 13
    2c8e:	cd bf       	out	0x3d, r28	; 61
    2c90:	de bf       	out	0x3e, r29	; 62
    2c92:	df 91       	pop	r29
    2c94:	cf 91       	pop	r28
    2c96:	08 95       	ret

00002c98 <vTaskSwitchContext>:
    2c98:	cf 93       	push	r28
    2c9a:	df 93       	push	r29
    2c9c:	cd b7       	in	r28, 0x3d	; 61
    2c9e:	de b7       	in	r29, 0x3e	; 62
    2ca0:	29 97       	sbiw	r28, 0x09	; 9
    2ca2:	cd bf       	out	0x3d, r28	; 61
    2ca4:	de bf       	out	0x3e, r29	; 62
    2ca6:	80 91 df 30 	lds	r24, 0x30DF	; 0x8030df <uxSchedulerSuspended>
    2caa:	88 23       	and	r24, r24
    2cac:	21 f0       	breq	.+8      	; 0x2cb6 <vTaskSwitchContext+0x1e>
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	80 93 d6 30 	sts	0x30D6, r24	; 0x8030d6 <xYieldPending>
    2cb4:	ba c0       	rjmp	.+372    	; 0x2e2a <vTaskSwitchContext+0x192>
    2cb6:	10 92 d6 30 	sts	0x30D6, r1	; 0x8030d6 <xYieldPending>
    2cba:	80 91 70 30 	lds	r24, 0x3070	; 0x803070 <pxCurrentTCB>
    2cbe:	90 91 71 30 	lds	r25, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    2cc2:	fc 01       	movw	r30, r24
    2cc4:	83 8d       	ldd	r24, Z+27	; 0x1b
    2cc6:	94 8d       	ldd	r25, Z+28	; 0x1c
    2cc8:	8a 83       	std	Y+2, r24	; 0x02
    2cca:	9b 83       	std	Y+3, r25	; 0x03
    2ccc:	85 ea       	ldi	r24, 0xA5	; 165
    2cce:	95 ea       	ldi	r25, 0xA5	; 165
    2cd0:	dc 01       	movw	r26, r24
    2cd2:	8c 83       	std	Y+4, r24	; 0x04
    2cd4:	9d 83       	std	Y+5, r25	; 0x05
    2cd6:	ae 83       	std	Y+6, r26	; 0x06
    2cd8:	bf 83       	std	Y+7, r27	; 0x07
    2cda:	8a 81       	ldd	r24, Y+2	; 0x02
    2cdc:	9b 81       	ldd	r25, Y+3	; 0x03
    2cde:	fc 01       	movw	r30, r24
    2ce0:	20 81       	ld	r18, Z
    2ce2:	31 81       	ldd	r19, Z+1	; 0x01
    2ce4:	42 81       	ldd	r20, Z+2	; 0x02
    2ce6:	53 81       	ldd	r21, Z+3	; 0x03
    2ce8:	8c 81       	ldd	r24, Y+4	; 0x04
    2cea:	9d 81       	ldd	r25, Y+5	; 0x05
    2cec:	ae 81       	ldd	r26, Y+6	; 0x06
    2cee:	bf 81       	ldd	r27, Y+7	; 0x07
    2cf0:	28 17       	cp	r18, r24
    2cf2:	39 07       	cpc	r19, r25
    2cf4:	4a 07       	cpc	r20, r26
    2cf6:	5b 07       	cpc	r21, r27
    2cf8:	99 f5       	brne	.+102    	; 0x2d60 <vTaskSwitchContext+0xc8>
    2cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfc:	9b 81       	ldd	r25, Y+3	; 0x03
    2cfe:	04 96       	adiw	r24, 0x04	; 4
    2d00:	fc 01       	movw	r30, r24
    2d02:	20 81       	ld	r18, Z
    2d04:	31 81       	ldd	r19, Z+1	; 0x01
    2d06:	42 81       	ldd	r20, Z+2	; 0x02
    2d08:	53 81       	ldd	r21, Z+3	; 0x03
    2d0a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d0c:	9d 81       	ldd	r25, Y+5	; 0x05
    2d0e:	ae 81       	ldd	r26, Y+6	; 0x06
    2d10:	bf 81       	ldd	r27, Y+7	; 0x07
    2d12:	28 17       	cp	r18, r24
    2d14:	39 07       	cpc	r19, r25
    2d16:	4a 07       	cpc	r20, r26
    2d18:	5b 07       	cpc	r21, r27
    2d1a:	11 f5       	brne	.+68     	; 0x2d60 <vTaskSwitchContext+0xc8>
    2d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d1e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d20:	08 96       	adiw	r24, 0x08	; 8
    2d22:	fc 01       	movw	r30, r24
    2d24:	20 81       	ld	r18, Z
    2d26:	31 81       	ldd	r19, Z+1	; 0x01
    2d28:	42 81       	ldd	r20, Z+2	; 0x02
    2d2a:	53 81       	ldd	r21, Z+3	; 0x03
    2d2c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d2e:	9d 81       	ldd	r25, Y+5	; 0x05
    2d30:	ae 81       	ldd	r26, Y+6	; 0x06
    2d32:	bf 81       	ldd	r27, Y+7	; 0x07
    2d34:	28 17       	cp	r18, r24
    2d36:	39 07       	cpc	r19, r25
    2d38:	4a 07       	cpc	r20, r26
    2d3a:	5b 07       	cpc	r21, r27
    2d3c:	89 f4       	brne	.+34     	; 0x2d60 <vTaskSwitchContext+0xc8>
    2d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d40:	9b 81       	ldd	r25, Y+3	; 0x03
    2d42:	0c 96       	adiw	r24, 0x0c	; 12
    2d44:	fc 01       	movw	r30, r24
    2d46:	20 81       	ld	r18, Z
    2d48:	31 81       	ldd	r19, Z+1	; 0x01
    2d4a:	42 81       	ldd	r20, Z+2	; 0x02
    2d4c:	53 81       	ldd	r21, Z+3	; 0x03
    2d4e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d50:	9d 81       	ldd	r25, Y+5	; 0x05
    2d52:	ae 81       	ldd	r26, Y+6	; 0x06
    2d54:	bf 81       	ldd	r27, Y+7	; 0x07
    2d56:	28 17       	cp	r18, r24
    2d58:	39 07       	cpc	r19, r25
    2d5a:	4a 07       	cpc	r20, r26
    2d5c:	5b 07       	cpc	r21, r27
    2d5e:	71 f0       	breq	.+28     	; 0x2d7c <vTaskSwitchContext+0xe4>
    2d60:	80 91 70 30 	lds	r24, 0x3070	; 0x803070 <pxCurrentTCB>
    2d64:	90 91 71 30 	lds	r25, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    2d68:	9c 01       	movw	r18, r24
    2d6a:	23 5e       	subi	r18, 0xE3	; 227
    2d6c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d6e:	80 91 70 30 	lds	r24, 0x3070	; 0x803070 <pxCurrentTCB>
    2d72:	90 91 71 30 	lds	r25, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    2d76:	b9 01       	movw	r22, r18
    2d78:	0e 94 95 03 	call	0x72a	; 0x72a <vApplicationStackOverflowHook>
    2d7c:	80 91 d3 30 	lds	r24, 0x30D3	; 0x8030d3 <uxTopReadyPriority>
    2d80:	89 83       	std	Y+1, r24	; 0x01
    2d82:	03 c0       	rjmp	.+6      	; 0x2d8a <vTaskSwitchContext+0xf2>
    2d84:	89 81       	ldd	r24, Y+1	; 0x01
    2d86:	81 50       	subi	r24, 0x01	; 1
    2d88:	89 83       	std	Y+1, r24	; 0x01
    2d8a:	89 81       	ldd	r24, Y+1	; 0x01
    2d8c:	28 2f       	mov	r18, r24
    2d8e:	30 e0       	ldi	r19, 0x00	; 0
    2d90:	4b e0       	ldi	r20, 0x0B	; 11
    2d92:	42 9f       	mul	r20, r18
    2d94:	c0 01       	movw	r24, r0
    2d96:	43 9f       	mul	r20, r19
    2d98:	90 0d       	add	r25, r0
    2d9a:	11 24       	eor	r1, r1
    2d9c:	8e 58       	subi	r24, 0x8E	; 142
    2d9e:	9f 4c       	sbci	r25, 0xCF	; 207
    2da0:	fc 01       	movw	r30, r24
    2da2:	80 81       	ld	r24, Z
    2da4:	88 23       	and	r24, r24
    2da6:	71 f3       	breq	.-36     	; 0x2d84 <vTaskSwitchContext+0xec>
    2da8:	89 81       	ldd	r24, Y+1	; 0x01
    2daa:	28 2f       	mov	r18, r24
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	4b e0       	ldi	r20, 0x0B	; 11
    2db0:	42 9f       	mul	r20, r18
    2db2:	c0 01       	movw	r24, r0
    2db4:	43 9f       	mul	r20, r19
    2db6:	90 0d       	add	r25, r0
    2db8:	11 24       	eor	r1, r1
    2dba:	8e 58       	subi	r24, 0x8E	; 142
    2dbc:	9f 4c       	sbci	r25, 0xCF	; 207
    2dbe:	88 87       	std	Y+8, r24	; 0x08
    2dc0:	99 87       	std	Y+9, r25	; 0x09
    2dc2:	88 85       	ldd	r24, Y+8	; 0x08
    2dc4:	99 85       	ldd	r25, Y+9	; 0x09
    2dc6:	fc 01       	movw	r30, r24
    2dc8:	81 81       	ldd	r24, Z+1	; 0x01
    2dca:	92 81       	ldd	r25, Z+2	; 0x02
    2dcc:	fc 01       	movw	r30, r24
    2dce:	24 81       	ldd	r18, Z+4	; 0x04
    2dd0:	35 81       	ldd	r19, Z+5	; 0x05
    2dd2:	88 85       	ldd	r24, Y+8	; 0x08
    2dd4:	99 85       	ldd	r25, Y+9	; 0x09
    2dd6:	fc 01       	movw	r30, r24
    2dd8:	21 83       	std	Z+1, r18	; 0x01
    2dda:	32 83       	std	Z+2, r19	; 0x02
    2ddc:	88 85       	ldd	r24, Y+8	; 0x08
    2dde:	99 85       	ldd	r25, Y+9	; 0x09
    2de0:	fc 01       	movw	r30, r24
    2de2:	21 81       	ldd	r18, Z+1	; 0x01
    2de4:	32 81       	ldd	r19, Z+2	; 0x02
    2de6:	88 85       	ldd	r24, Y+8	; 0x08
    2de8:	99 85       	ldd	r25, Y+9	; 0x09
    2dea:	03 96       	adiw	r24, 0x03	; 3
    2dec:	28 17       	cp	r18, r24
    2dee:	39 07       	cpc	r19, r25
    2df0:	69 f4       	brne	.+26     	; 0x2e0c <vTaskSwitchContext+0x174>
    2df2:	88 85       	ldd	r24, Y+8	; 0x08
    2df4:	99 85       	ldd	r25, Y+9	; 0x09
    2df6:	fc 01       	movw	r30, r24
    2df8:	81 81       	ldd	r24, Z+1	; 0x01
    2dfa:	92 81       	ldd	r25, Z+2	; 0x02
    2dfc:	fc 01       	movw	r30, r24
    2dfe:	24 81       	ldd	r18, Z+4	; 0x04
    2e00:	35 81       	ldd	r19, Z+5	; 0x05
    2e02:	88 85       	ldd	r24, Y+8	; 0x08
    2e04:	99 85       	ldd	r25, Y+9	; 0x09
    2e06:	fc 01       	movw	r30, r24
    2e08:	21 83       	std	Z+1, r18	; 0x01
    2e0a:	32 83       	std	Z+2, r19	; 0x02
    2e0c:	88 85       	ldd	r24, Y+8	; 0x08
    2e0e:	99 85       	ldd	r25, Y+9	; 0x09
    2e10:	fc 01       	movw	r30, r24
    2e12:	81 81       	ldd	r24, Z+1	; 0x01
    2e14:	92 81       	ldd	r25, Z+2	; 0x02
    2e16:	fc 01       	movw	r30, r24
    2e18:	80 85       	ldd	r24, Z+8	; 0x08
    2e1a:	91 85       	ldd	r25, Z+9	; 0x09
    2e1c:	80 93 70 30 	sts	0x3070, r24	; 0x803070 <pxCurrentTCB>
    2e20:	90 93 71 30 	sts	0x3071, r25	; 0x803071 <pxCurrentTCB+0x1>
    2e24:	89 81       	ldd	r24, Y+1	; 0x01
    2e26:	80 93 d3 30 	sts	0x30D3, r24	; 0x8030d3 <uxTopReadyPriority>
    2e2a:	00 00       	nop
    2e2c:	29 96       	adiw	r28, 0x09	; 9
    2e2e:	cd bf       	out	0x3d, r28	; 61
    2e30:	de bf       	out	0x3e, r29	; 62
    2e32:	df 91       	pop	r29
    2e34:	cf 91       	pop	r28
    2e36:	08 95       	ret

00002e38 <vTaskPlaceOnEventList>:
    2e38:	cf 93       	push	r28
    2e3a:	df 93       	push	r29
    2e3c:	00 d0       	rcall	.+0      	; 0x2e3e <vTaskPlaceOnEventList+0x6>
    2e3e:	00 d0       	rcall	.+0      	; 0x2e40 <vTaskPlaceOnEventList+0x8>
    2e40:	cd b7       	in	r28, 0x3d	; 61
    2e42:	de b7       	in	r29, 0x3e	; 62
    2e44:	89 83       	std	Y+1, r24	; 0x01
    2e46:	9a 83       	std	Y+2, r25	; 0x02
    2e48:	4b 83       	std	Y+3, r20	; 0x03
    2e4a:	5c 83       	std	Y+4, r21	; 0x04
    2e4c:	6d 83       	std	Y+5, r22	; 0x05
    2e4e:	7e 83       	std	Y+6, r23	; 0x06
    2e50:	80 91 70 30 	lds	r24, 0x3070	; 0x803070 <pxCurrentTCB>
    2e54:	90 91 71 30 	lds	r25, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    2e58:	9c 01       	movw	r18, r24
    2e5a:	22 5f       	subi	r18, 0xF2	; 242
    2e5c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e5e:	89 81       	ldd	r24, Y+1	; 0x01
    2e60:	9a 81       	ldd	r25, Y+2	; 0x02
    2e62:	b9 01       	movw	r22, r18
    2e64:	0e 94 06 08 	call	0x100c	; 0x100c <vListInsert>
    2e68:	8b 81       	ldd	r24, Y+3	; 0x03
    2e6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e6c:	ad 81       	ldd	r26, Y+5	; 0x05
    2e6e:	be 81       	ldd	r27, Y+6	; 0x06
    2e70:	41 e0       	ldi	r20, 0x01	; 1
    2e72:	bc 01       	movw	r22, r24
    2e74:	cd 01       	movw	r24, r26
    2e76:	0e 94 48 1a 	call	0x3490	; 0x3490 <prvAddCurrentTaskToDelayedList>
    2e7a:	00 00       	nop
    2e7c:	26 96       	adiw	r28, 0x06	; 6
    2e7e:	cd bf       	out	0x3d, r28	; 61
    2e80:	de bf       	out	0x3e, r29	; 62
    2e82:	df 91       	pop	r29
    2e84:	cf 91       	pop	r28
    2e86:	08 95       	ret

00002e88 <vTaskPlaceOnUnorderedEventList>:
    2e88:	0f 93       	push	r16
    2e8a:	1f 93       	push	r17
    2e8c:	cf 93       	push	r28
    2e8e:	df 93       	push	r29
    2e90:	cd b7       	in	r28, 0x3d	; 61
    2e92:	de b7       	in	r29, 0x3e	; 62
    2e94:	2a 97       	sbiw	r28, 0x0a	; 10
    2e96:	cd bf       	out	0x3d, r28	; 61
    2e98:	de bf       	out	0x3e, r29	; 62
    2e9a:	89 83       	std	Y+1, r24	; 0x01
    2e9c:	9a 83       	std	Y+2, r25	; 0x02
    2e9e:	4b 83       	std	Y+3, r20	; 0x03
    2ea0:	5c 83       	std	Y+4, r21	; 0x04
    2ea2:	6d 83       	std	Y+5, r22	; 0x05
    2ea4:	7e 83       	std	Y+6, r23	; 0x06
    2ea6:	0f 83       	std	Y+7, r16	; 0x07
    2ea8:	18 87       	std	Y+8, r17	; 0x08
    2eaa:	29 87       	std	Y+9, r18	; 0x09
    2eac:	3a 87       	std	Y+10, r19	; 0x0a
    2eae:	20 91 70 30 	lds	r18, 0x3070	; 0x803070 <pxCurrentTCB>
    2eb2:	30 91 71 30 	lds	r19, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    2eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb8:	9c 81       	ldd	r25, Y+4	; 0x04
    2eba:	ad 81       	ldd	r26, Y+5	; 0x05
    2ebc:	be 81       	ldd	r27, Y+6	; 0x06
    2ebe:	b0 68       	ori	r27, 0x80	; 128
    2ec0:	f9 01       	movw	r30, r18
    2ec2:	86 87       	std	Z+14, r24	; 0x0e
    2ec4:	97 87       	std	Z+15, r25	; 0x0f
    2ec6:	a0 8b       	std	Z+16, r26	; 0x10
    2ec8:	b1 8b       	std	Z+17, r27	; 0x11
    2eca:	80 91 70 30 	lds	r24, 0x3070	; 0x803070 <pxCurrentTCB>
    2ece:	90 91 71 30 	lds	r25, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    2ed2:	9c 01       	movw	r18, r24
    2ed4:	22 5f       	subi	r18, 0xF2	; 242
    2ed6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ed8:	89 81       	ldd	r24, Y+1	; 0x01
    2eda:	9a 81       	ldd	r25, Y+2	; 0x02
    2edc:	b9 01       	movw	r22, r18
    2ede:	0e 94 bb 07 	call	0xf76	; 0xf76 <vListInsertEnd>
    2ee2:	8f 81       	ldd	r24, Y+7	; 0x07
    2ee4:	98 85       	ldd	r25, Y+8	; 0x08
    2ee6:	a9 85       	ldd	r26, Y+9	; 0x09
    2ee8:	ba 85       	ldd	r27, Y+10	; 0x0a
    2eea:	41 e0       	ldi	r20, 0x01	; 1
    2eec:	bc 01       	movw	r22, r24
    2eee:	cd 01       	movw	r24, r26
    2ef0:	0e 94 48 1a 	call	0x3490	; 0x3490 <prvAddCurrentTaskToDelayedList>
    2ef4:	00 00       	nop
    2ef6:	2a 96       	adiw	r28, 0x0a	; 10
    2ef8:	cd bf       	out	0x3d, r28	; 61
    2efa:	de bf       	out	0x3e, r29	; 62
    2efc:	df 91       	pop	r29
    2efe:	cf 91       	pop	r28
    2f00:	1f 91       	pop	r17
    2f02:	0f 91       	pop	r16
    2f04:	08 95       	ret

00002f06 <vTaskPlaceOnEventListRestricted>:
    2f06:	cf 93       	push	r28
    2f08:	df 93       	push	r29
    2f0a:	cd b7       	in	r28, 0x3d	; 61
    2f0c:	de b7       	in	r29, 0x3e	; 62
    2f0e:	27 97       	sbiw	r28, 0x07	; 7
    2f10:	cd bf       	out	0x3d, r28	; 61
    2f12:	de bf       	out	0x3e, r29	; 62
    2f14:	89 83       	std	Y+1, r24	; 0x01
    2f16:	9a 83       	std	Y+2, r25	; 0x02
    2f18:	4b 83       	std	Y+3, r20	; 0x03
    2f1a:	5c 83       	std	Y+4, r21	; 0x04
    2f1c:	6d 83       	std	Y+5, r22	; 0x05
    2f1e:	7e 83       	std	Y+6, r23	; 0x06
    2f20:	2f 83       	std	Y+7, r18	; 0x07
    2f22:	80 91 70 30 	lds	r24, 0x3070	; 0x803070 <pxCurrentTCB>
    2f26:	90 91 71 30 	lds	r25, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    2f2a:	9c 01       	movw	r18, r24
    2f2c:	22 5f       	subi	r18, 0xF2	; 242
    2f2e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f30:	89 81       	ldd	r24, Y+1	; 0x01
    2f32:	9a 81       	ldd	r25, Y+2	; 0x02
    2f34:	b9 01       	movw	r22, r18
    2f36:	0e 94 bb 07 	call	0xf76	; 0xf76 <vListInsertEnd>
    2f3a:	8f 81       	ldd	r24, Y+7	; 0x07
    2f3c:	88 23       	and	r24, r24
    2f3e:	39 f0       	breq	.+14     	; 0x2f4e <vTaskPlaceOnEventListRestricted+0x48>
    2f40:	8f ef       	ldi	r24, 0xFF	; 255
    2f42:	9f ef       	ldi	r25, 0xFF	; 255
    2f44:	dc 01       	movw	r26, r24
    2f46:	8b 83       	std	Y+3, r24	; 0x03
    2f48:	9c 83       	std	Y+4, r25	; 0x04
    2f4a:	ad 83       	std	Y+5, r26	; 0x05
    2f4c:	be 83       	std	Y+6, r27	; 0x06
    2f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f50:	9c 81       	ldd	r25, Y+4	; 0x04
    2f52:	ad 81       	ldd	r26, Y+5	; 0x05
    2f54:	be 81       	ldd	r27, Y+6	; 0x06
    2f56:	4f 81       	ldd	r20, Y+7	; 0x07
    2f58:	bc 01       	movw	r22, r24
    2f5a:	cd 01       	movw	r24, r26
    2f5c:	0e 94 48 1a 	call	0x3490	; 0x3490 <prvAddCurrentTaskToDelayedList>
    2f60:	00 00       	nop
    2f62:	27 96       	adiw	r28, 0x07	; 7
    2f64:	cd bf       	out	0x3d, r28	; 61
    2f66:	de bf       	out	0x3e, r29	; 62
    2f68:	df 91       	pop	r29
    2f6a:	cf 91       	pop	r28
    2f6c:	08 95       	ret

00002f6e <xTaskRemoveFromEventList>:
    2f6e:	cf 93       	push	r28
    2f70:	df 93       	push	r29
    2f72:	cd b7       	in	r28, 0x3d	; 61
    2f74:	de b7       	in	r29, 0x3e	; 62
    2f76:	25 97       	sbiw	r28, 0x05	; 5
    2f78:	cd bf       	out	0x3d, r28	; 61
    2f7a:	de bf       	out	0x3e, r29	; 62
    2f7c:	8c 83       	std	Y+4, r24	; 0x04
    2f7e:	9d 83       	std	Y+5, r25	; 0x05
    2f80:	8c 81       	ldd	r24, Y+4	; 0x04
    2f82:	9d 81       	ldd	r25, Y+5	; 0x05
    2f84:	fc 01       	movw	r30, r24
    2f86:	87 81       	ldd	r24, Z+7	; 0x07
    2f88:	90 85       	ldd	r25, Z+8	; 0x08
    2f8a:	fc 01       	movw	r30, r24
    2f8c:	80 85       	ldd	r24, Z+8	; 0x08
    2f8e:	91 85       	ldd	r25, Z+9	; 0x09
    2f90:	8a 83       	std	Y+2, r24	; 0x02
    2f92:	9b 83       	std	Y+3, r25	; 0x03
    2f94:	8a 81       	ldd	r24, Y+2	; 0x02
    2f96:	9b 81       	ldd	r25, Y+3	; 0x03
    2f98:	0e 96       	adiw	r24, 0x0e	; 14
    2f9a:	0e 94 87 08 	call	0x110e	; 0x110e <uxListRemove>
    2f9e:	80 91 df 30 	lds	r24, 0x30DF	; 0x8030df <uxSchedulerSuspended>
    2fa2:	88 23       	and	r24, r24
    2fa4:	51 f5       	brne	.+84     	; 0x2ffa <xTaskRemoveFromEventList+0x8c>
    2fa6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa8:	9b 81       	ldd	r25, Y+3	; 0x03
    2faa:	02 96       	adiw	r24, 0x02	; 2
    2fac:	0e 94 87 08 	call	0x110e	; 0x110e <uxListRemove>
    2fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb2:	9b 81       	ldd	r25, Y+3	; 0x03
    2fb4:	fc 01       	movw	r30, r24
    2fb6:	92 8d       	ldd	r25, Z+26	; 0x1a
    2fb8:	80 91 d3 30 	lds	r24, 0x30D3	; 0x8030d3 <uxTopReadyPriority>
    2fbc:	89 17       	cp	r24, r25
    2fbe:	30 f4       	brcc	.+12     	; 0x2fcc <xTaskRemoveFromEventList+0x5e>
    2fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc2:	9b 81       	ldd	r25, Y+3	; 0x03
    2fc4:	fc 01       	movw	r30, r24
    2fc6:	82 8d       	ldd	r24, Z+26	; 0x1a
    2fc8:	80 93 d3 30 	sts	0x30D3, r24	; 0x8030d3 <uxTopReadyPriority>
    2fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    2fce:	9b 81       	ldd	r25, Y+3	; 0x03
    2fd0:	ac 01       	movw	r20, r24
    2fd2:	4e 5f       	subi	r20, 0xFE	; 254
    2fd4:	5f 4f       	sbci	r21, 0xFF	; 255
    2fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd8:	9b 81       	ldd	r25, Y+3	; 0x03
    2fda:	fc 01       	movw	r30, r24
    2fdc:	82 8d       	ldd	r24, Z+26	; 0x1a
    2fde:	28 2f       	mov	r18, r24
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	6b e0       	ldi	r22, 0x0B	; 11
    2fe4:	62 9f       	mul	r22, r18
    2fe6:	c0 01       	movw	r24, r0
    2fe8:	63 9f       	mul	r22, r19
    2fea:	90 0d       	add	r25, r0
    2fec:	11 24       	eor	r1, r1
    2fee:	8e 58       	subi	r24, 0x8E	; 142
    2ff0:	9f 4c       	sbci	r25, 0xCF	; 207
    2ff2:	ba 01       	movw	r22, r20
    2ff4:	0e 94 bb 07 	call	0xf76	; 0xf76 <vListInsertEnd>
    2ff8:	08 c0       	rjmp	.+16     	; 0x300a <xTaskRemoveFromEventList+0x9c>
    2ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    2ffc:	9b 81       	ldd	r25, Y+3	; 0x03
    2ffe:	0e 96       	adiw	r24, 0x0e	; 14
    3000:	bc 01       	movw	r22, r24
    3002:	88 eb       	ldi	r24, 0xB8	; 184
    3004:	90 e3       	ldi	r25, 0x30	; 48
    3006:	0e 94 bb 07 	call	0xf76	; 0xf76 <vListInsertEnd>
    300a:	8a 81       	ldd	r24, Y+2	; 0x02
    300c:	9b 81       	ldd	r25, Y+3	; 0x03
    300e:	fc 01       	movw	r30, r24
    3010:	22 8d       	ldd	r18, Z+26	; 0x1a
    3012:	80 91 70 30 	lds	r24, 0x3070	; 0x803070 <pxCurrentTCB>
    3016:	90 91 71 30 	lds	r25, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    301a:	fc 01       	movw	r30, r24
    301c:	82 8d       	ldd	r24, Z+26	; 0x1a
    301e:	82 17       	cp	r24, r18
    3020:	30 f4       	brcc	.+12     	; 0x302e <xTaskRemoveFromEventList+0xc0>
    3022:	81 e0       	ldi	r24, 0x01	; 1
    3024:	89 83       	std	Y+1, r24	; 0x01
    3026:	81 e0       	ldi	r24, 0x01	; 1
    3028:	80 93 d6 30 	sts	0x30D6, r24	; 0x8030d6 <xYieldPending>
    302c:	01 c0       	rjmp	.+2      	; 0x3030 <xTaskRemoveFromEventList+0xc2>
    302e:	19 82       	std	Y+1, r1	; 0x01
    3030:	89 81       	ldd	r24, Y+1	; 0x01
    3032:	25 96       	adiw	r28, 0x05	; 5
    3034:	cd bf       	out	0x3d, r28	; 61
    3036:	de bf       	out	0x3e, r29	; 62
    3038:	df 91       	pop	r29
    303a:	cf 91       	pop	r28
    303c:	08 95       	ret

0000303e <vTaskRemoveFromUnorderedEventList>:
    303e:	cf 93       	push	r28
    3040:	df 93       	push	r29
    3042:	cd b7       	in	r28, 0x3d	; 61
    3044:	de b7       	in	r29, 0x3e	; 62
    3046:	28 97       	sbiw	r28, 0x08	; 8
    3048:	cd bf       	out	0x3d, r28	; 61
    304a:	de bf       	out	0x3e, r29	; 62
    304c:	8b 83       	std	Y+3, r24	; 0x03
    304e:	9c 83       	std	Y+4, r25	; 0x04
    3050:	4d 83       	std	Y+5, r20	; 0x05
    3052:	5e 83       	std	Y+6, r21	; 0x06
    3054:	6f 83       	std	Y+7, r22	; 0x07
    3056:	78 87       	std	Y+8, r23	; 0x08
    3058:	8d 81       	ldd	r24, Y+5	; 0x05
    305a:	9e 81       	ldd	r25, Y+6	; 0x06
    305c:	af 81       	ldd	r26, Y+7	; 0x07
    305e:	b8 85       	ldd	r27, Y+8	; 0x08
    3060:	b0 68       	ori	r27, 0x80	; 128
    3062:	2b 81       	ldd	r18, Y+3	; 0x03
    3064:	3c 81       	ldd	r19, Y+4	; 0x04
    3066:	f9 01       	movw	r30, r18
    3068:	80 83       	st	Z, r24
    306a:	91 83       	std	Z+1, r25	; 0x01
    306c:	a2 83       	std	Z+2, r26	; 0x02
    306e:	b3 83       	std	Z+3, r27	; 0x03
    3070:	8b 81       	ldd	r24, Y+3	; 0x03
    3072:	9c 81       	ldd	r25, Y+4	; 0x04
    3074:	fc 01       	movw	r30, r24
    3076:	80 85       	ldd	r24, Z+8	; 0x08
    3078:	91 85       	ldd	r25, Z+9	; 0x09
    307a:	89 83       	std	Y+1, r24	; 0x01
    307c:	9a 83       	std	Y+2, r25	; 0x02
    307e:	8b 81       	ldd	r24, Y+3	; 0x03
    3080:	9c 81       	ldd	r25, Y+4	; 0x04
    3082:	0e 94 87 08 	call	0x110e	; 0x110e <uxListRemove>
    3086:	89 81       	ldd	r24, Y+1	; 0x01
    3088:	9a 81       	ldd	r25, Y+2	; 0x02
    308a:	02 96       	adiw	r24, 0x02	; 2
    308c:	0e 94 87 08 	call	0x110e	; 0x110e <uxListRemove>
    3090:	89 81       	ldd	r24, Y+1	; 0x01
    3092:	9a 81       	ldd	r25, Y+2	; 0x02
    3094:	fc 01       	movw	r30, r24
    3096:	92 8d       	ldd	r25, Z+26	; 0x1a
    3098:	80 91 d3 30 	lds	r24, 0x30D3	; 0x8030d3 <uxTopReadyPriority>
    309c:	89 17       	cp	r24, r25
    309e:	30 f4       	brcc	.+12     	; 0x30ac <vTaskRemoveFromUnorderedEventList+0x6e>
    30a0:	89 81       	ldd	r24, Y+1	; 0x01
    30a2:	9a 81       	ldd	r25, Y+2	; 0x02
    30a4:	fc 01       	movw	r30, r24
    30a6:	82 8d       	ldd	r24, Z+26	; 0x1a
    30a8:	80 93 d3 30 	sts	0x30D3, r24	; 0x8030d3 <uxTopReadyPriority>
    30ac:	89 81       	ldd	r24, Y+1	; 0x01
    30ae:	9a 81       	ldd	r25, Y+2	; 0x02
    30b0:	ac 01       	movw	r20, r24
    30b2:	4e 5f       	subi	r20, 0xFE	; 254
    30b4:	5f 4f       	sbci	r21, 0xFF	; 255
    30b6:	89 81       	ldd	r24, Y+1	; 0x01
    30b8:	9a 81       	ldd	r25, Y+2	; 0x02
    30ba:	fc 01       	movw	r30, r24
    30bc:	82 8d       	ldd	r24, Z+26	; 0x1a
    30be:	28 2f       	mov	r18, r24
    30c0:	30 e0       	ldi	r19, 0x00	; 0
    30c2:	6b e0       	ldi	r22, 0x0B	; 11
    30c4:	62 9f       	mul	r22, r18
    30c6:	c0 01       	movw	r24, r0
    30c8:	63 9f       	mul	r22, r19
    30ca:	90 0d       	add	r25, r0
    30cc:	11 24       	eor	r1, r1
    30ce:	8e 58       	subi	r24, 0x8E	; 142
    30d0:	9f 4c       	sbci	r25, 0xCF	; 207
    30d2:	ba 01       	movw	r22, r20
    30d4:	0e 94 bb 07 	call	0xf76	; 0xf76 <vListInsertEnd>
    30d8:	89 81       	ldd	r24, Y+1	; 0x01
    30da:	9a 81       	ldd	r25, Y+2	; 0x02
    30dc:	fc 01       	movw	r30, r24
    30de:	22 8d       	ldd	r18, Z+26	; 0x1a
    30e0:	80 91 70 30 	lds	r24, 0x3070	; 0x803070 <pxCurrentTCB>
    30e4:	90 91 71 30 	lds	r25, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    30e8:	fc 01       	movw	r30, r24
    30ea:	82 8d       	ldd	r24, Z+26	; 0x1a
    30ec:	82 17       	cp	r24, r18
    30ee:	18 f4       	brcc	.+6      	; 0x30f6 <vTaskRemoveFromUnorderedEventList+0xb8>
    30f0:	81 e0       	ldi	r24, 0x01	; 1
    30f2:	80 93 d6 30 	sts	0x30D6, r24	; 0x8030d6 <xYieldPending>
    30f6:	00 00       	nop
    30f8:	28 96       	adiw	r28, 0x08	; 8
    30fa:	cd bf       	out	0x3d, r28	; 61
    30fc:	de bf       	out	0x3e, r29	; 62
    30fe:	df 91       	pop	r29
    3100:	cf 91       	pop	r28
    3102:	08 95       	ret

00003104 <vTaskInternalSetTimeOutState>:
    3104:	cf 93       	push	r28
    3106:	df 93       	push	r29
    3108:	1f 92       	push	r1
    310a:	1f 92       	push	r1
    310c:	cd b7       	in	r28, 0x3d	; 61
    310e:	de b7       	in	r29, 0x3e	; 62
    3110:	89 83       	std	Y+1, r24	; 0x01
    3112:	9a 83       	std	Y+2, r25	; 0x02
    3114:	20 91 d7 30 	lds	r18, 0x30D7	; 0x8030d7 <xNumOfOverflows>
    3118:	89 81       	ldd	r24, Y+1	; 0x01
    311a:	9a 81       	ldd	r25, Y+2	; 0x02
    311c:	fc 01       	movw	r30, r24
    311e:	20 83       	st	Z, r18
    3120:	80 91 cf 30 	lds	r24, 0x30CF	; 0x8030cf <xTickCount>
    3124:	90 91 d0 30 	lds	r25, 0x30D0	; 0x8030d0 <xTickCount+0x1>
    3128:	a0 91 d1 30 	lds	r26, 0x30D1	; 0x8030d1 <xTickCount+0x2>
    312c:	b0 91 d2 30 	lds	r27, 0x30D2	; 0x8030d2 <xTickCount+0x3>
    3130:	29 81       	ldd	r18, Y+1	; 0x01
    3132:	3a 81       	ldd	r19, Y+2	; 0x02
    3134:	f9 01       	movw	r30, r18
    3136:	81 83       	std	Z+1, r24	; 0x01
    3138:	92 83       	std	Z+2, r25	; 0x02
    313a:	a3 83       	std	Z+3, r26	; 0x03
    313c:	b4 83       	std	Z+4, r27	; 0x04
    313e:	00 00       	nop
    3140:	0f 90       	pop	r0
    3142:	0f 90       	pop	r0
    3144:	df 91       	pop	r29
    3146:	cf 91       	pop	r28
    3148:	08 95       	ret

0000314a <xTaskCheckForTimeOut>:
    314a:	ef 92       	push	r14
    314c:	ff 92       	push	r15
    314e:	0f 93       	push	r16
    3150:	1f 93       	push	r17
    3152:	cf 93       	push	r28
    3154:	df 93       	push	r29
    3156:	cd b7       	in	r28, 0x3d	; 61
    3158:	de b7       	in	r29, 0x3e	; 62
    315a:	2d 97       	sbiw	r28, 0x0d	; 13
    315c:	cd bf       	out	0x3d, r28	; 61
    315e:	de bf       	out	0x3e, r29	; 62
    3160:	8a 87       	std	Y+10, r24	; 0x0a
    3162:	9b 87       	std	Y+11, r25	; 0x0b
    3164:	6c 87       	std	Y+12, r22	; 0x0c
    3166:	7d 87       	std	Y+13, r23	; 0x0d
    3168:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    316c:	ff 93       	push	r31
    316e:	f8 7f       	andi	r31, 0xF8	; 248
    3170:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    3174:	80 91 cf 30 	lds	r24, 0x30CF	; 0x8030cf <xTickCount>
    3178:	90 91 d0 30 	lds	r25, 0x30D0	; 0x8030d0 <xTickCount+0x1>
    317c:	a0 91 d1 30 	lds	r26, 0x30D1	; 0x8030d1 <xTickCount+0x2>
    3180:	b0 91 d2 30 	lds	r27, 0x30D2	; 0x8030d2 <xTickCount+0x3>
    3184:	8a 83       	std	Y+2, r24	; 0x02
    3186:	9b 83       	std	Y+3, r25	; 0x03
    3188:	ac 83       	std	Y+4, r26	; 0x04
    318a:	bd 83       	std	Y+5, r27	; 0x05
    318c:	8a 85       	ldd	r24, Y+10	; 0x0a
    318e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3190:	fc 01       	movw	r30, r24
    3192:	81 81       	ldd	r24, Z+1	; 0x01
    3194:	92 81       	ldd	r25, Z+2	; 0x02
    3196:	a3 81       	ldd	r26, Z+3	; 0x03
    3198:	b4 81       	ldd	r27, Z+4	; 0x04
    319a:	2a 81       	ldd	r18, Y+2	; 0x02
    319c:	3b 81       	ldd	r19, Y+3	; 0x03
    319e:	4c 81       	ldd	r20, Y+4	; 0x04
    31a0:	5d 81       	ldd	r21, Y+5	; 0x05
    31a2:	79 01       	movw	r14, r18
    31a4:	8a 01       	movw	r16, r20
    31a6:	e8 1a       	sub	r14, r24
    31a8:	f9 0a       	sbc	r15, r25
    31aa:	0a 0b       	sbc	r16, r26
    31ac:	1b 0b       	sbc	r17, r27
    31ae:	d8 01       	movw	r26, r16
    31b0:	c7 01       	movw	r24, r14
    31b2:	8e 83       	std	Y+6, r24	; 0x06
    31b4:	9f 83       	std	Y+7, r25	; 0x07
    31b6:	a8 87       	std	Y+8, r26	; 0x08
    31b8:	b9 87       	std	Y+9, r27	; 0x09
    31ba:	8c 85       	ldd	r24, Y+12	; 0x0c
    31bc:	9d 85       	ldd	r25, Y+13	; 0x0d
    31be:	fc 01       	movw	r30, r24
    31c0:	80 81       	ld	r24, Z
    31c2:	91 81       	ldd	r25, Z+1	; 0x01
    31c4:	a2 81       	ldd	r26, Z+2	; 0x02
    31c6:	b3 81       	ldd	r27, Z+3	; 0x03
    31c8:	8f 3f       	cpi	r24, 0xFF	; 255
    31ca:	9f 4f       	sbci	r25, 0xFF	; 255
    31cc:	af 4f       	sbci	r26, 0xFF	; 255
    31ce:	bf 4f       	sbci	r27, 0xFF	; 255
    31d0:	11 f4       	brne	.+4      	; 0x31d6 <xTaskCheckForTimeOut+0x8c>
    31d2:	19 82       	std	Y+1, r1	; 0x01
    31d4:	54 c0       	rjmp	.+168    	; 0x327e <xTaskCheckForTimeOut+0x134>
    31d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    31d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    31da:	fc 01       	movw	r30, r24
    31dc:	90 81       	ld	r25, Z
    31de:	80 91 d7 30 	lds	r24, 0x30D7	; 0x8030d7 <xNumOfOverflows>
    31e2:	98 17       	cp	r25, r24
    31e4:	99 f0       	breq	.+38     	; 0x320c <xTaskCheckForTimeOut+0xc2>
    31e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    31e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    31ea:	fc 01       	movw	r30, r24
    31ec:	21 81       	ldd	r18, Z+1	; 0x01
    31ee:	32 81       	ldd	r19, Z+2	; 0x02
    31f0:	43 81       	ldd	r20, Z+3	; 0x03
    31f2:	54 81       	ldd	r21, Z+4	; 0x04
    31f4:	8a 81       	ldd	r24, Y+2	; 0x02
    31f6:	9b 81       	ldd	r25, Y+3	; 0x03
    31f8:	ac 81       	ldd	r26, Y+4	; 0x04
    31fa:	bd 81       	ldd	r27, Y+5	; 0x05
    31fc:	82 17       	cp	r24, r18
    31fe:	93 07       	cpc	r25, r19
    3200:	a4 07       	cpc	r26, r20
    3202:	b5 07       	cpc	r27, r21
    3204:	18 f0       	brcs	.+6      	; 0x320c <xTaskCheckForTimeOut+0xc2>
    3206:	81 e0       	ldi	r24, 0x01	; 1
    3208:	89 83       	std	Y+1, r24	; 0x01
    320a:	39 c0       	rjmp	.+114    	; 0x327e <xTaskCheckForTimeOut+0x134>
    320c:	8c 85       	ldd	r24, Y+12	; 0x0c
    320e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3210:	fc 01       	movw	r30, r24
    3212:	20 81       	ld	r18, Z
    3214:	31 81       	ldd	r19, Z+1	; 0x01
    3216:	42 81       	ldd	r20, Z+2	; 0x02
    3218:	53 81       	ldd	r21, Z+3	; 0x03
    321a:	8e 81       	ldd	r24, Y+6	; 0x06
    321c:	9f 81       	ldd	r25, Y+7	; 0x07
    321e:	a8 85       	ldd	r26, Y+8	; 0x08
    3220:	b9 85       	ldd	r27, Y+9	; 0x09
    3222:	82 17       	cp	r24, r18
    3224:	93 07       	cpc	r25, r19
    3226:	a4 07       	cpc	r26, r20
    3228:	b5 07       	cpc	r27, r21
    322a:	00 f5       	brcc	.+64     	; 0x326c <xTaskCheckForTimeOut+0x122>
    322c:	8c 85       	ldd	r24, Y+12	; 0x0c
    322e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3230:	fc 01       	movw	r30, r24
    3232:	20 81       	ld	r18, Z
    3234:	31 81       	ldd	r19, Z+1	; 0x01
    3236:	42 81       	ldd	r20, Z+2	; 0x02
    3238:	53 81       	ldd	r21, Z+3	; 0x03
    323a:	8e 81       	ldd	r24, Y+6	; 0x06
    323c:	9f 81       	ldd	r25, Y+7	; 0x07
    323e:	a8 85       	ldd	r26, Y+8	; 0x08
    3240:	b9 85       	ldd	r27, Y+9	; 0x09
    3242:	79 01       	movw	r14, r18
    3244:	8a 01       	movw	r16, r20
    3246:	e8 1a       	sub	r14, r24
    3248:	f9 0a       	sbc	r15, r25
    324a:	0a 0b       	sbc	r16, r26
    324c:	1b 0b       	sbc	r17, r27
    324e:	d8 01       	movw	r26, r16
    3250:	c7 01       	movw	r24, r14
    3252:	2c 85       	ldd	r18, Y+12	; 0x0c
    3254:	3d 85       	ldd	r19, Y+13	; 0x0d
    3256:	f9 01       	movw	r30, r18
    3258:	80 83       	st	Z, r24
    325a:	91 83       	std	Z+1, r25	; 0x01
    325c:	a2 83       	std	Z+2, r26	; 0x02
    325e:	b3 83       	std	Z+3, r27	; 0x03
    3260:	8a 85       	ldd	r24, Y+10	; 0x0a
    3262:	9b 85       	ldd	r25, Y+11	; 0x0b
    3264:	0e 94 82 18 	call	0x3104	; 0x3104 <vTaskInternalSetTimeOutState>
    3268:	19 82       	std	Y+1, r1	; 0x01
    326a:	09 c0       	rjmp	.+18     	; 0x327e <xTaskCheckForTimeOut+0x134>
    326c:	8c 85       	ldd	r24, Y+12	; 0x0c
    326e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3270:	fc 01       	movw	r30, r24
    3272:	10 82       	st	Z, r1
    3274:	11 82       	std	Z+1, r1	; 0x01
    3276:	12 82       	std	Z+2, r1	; 0x02
    3278:	13 82       	std	Z+3, r1	; 0x03
    327a:	81 e0       	ldi	r24, 0x01	; 1
    327c:	89 83       	std	Y+1, r24	; 0x01
    327e:	ff 91       	pop	r31
    3280:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    3284:	89 81       	ldd	r24, Y+1	; 0x01
    3286:	2d 96       	adiw	r28, 0x0d	; 13
    3288:	cd bf       	out	0x3d, r28	; 61
    328a:	de bf       	out	0x3e, r29	; 62
    328c:	df 91       	pop	r29
    328e:	cf 91       	pop	r28
    3290:	1f 91       	pop	r17
    3292:	0f 91       	pop	r16
    3294:	ff 90       	pop	r15
    3296:	ef 90       	pop	r14
    3298:	08 95       	ret

0000329a <vTaskMissedYield>:
    329a:	cf 93       	push	r28
    329c:	df 93       	push	r29
    329e:	cd b7       	in	r28, 0x3d	; 61
    32a0:	de b7       	in	r29, 0x3e	; 62
    32a2:	81 e0       	ldi	r24, 0x01	; 1
    32a4:	80 93 d6 30 	sts	0x30D6, r24	; 0x8030d6 <xYieldPending>
    32a8:	00 00       	nop
    32aa:	df 91       	pop	r29
    32ac:	cf 91       	pop	r28
    32ae:	08 95       	ret

000032b0 <prvIdleTask>:
    32b0:	cf 93       	push	r28
    32b2:	df 93       	push	r29
    32b4:	1f 92       	push	r1
    32b6:	1f 92       	push	r1
    32b8:	cd b7       	in	r28, 0x3d	; 61
    32ba:	de b7       	in	r29, 0x3e	; 62
    32bc:	89 83       	std	Y+1, r24	; 0x01
    32be:	9a 83       	std	Y+2, r25	; 0x02
    32c0:	0e 94 a6 19 	call	0x334c	; 0x334c <prvCheckTasksWaitingTermination>
    32c4:	80 91 72 30 	lds	r24, 0x3072	; 0x803072 <pxReadyTasksLists>
    32c8:	82 30       	cpi	r24, 0x02	; 2
    32ca:	10 f0       	brcs	.+4      	; 0x32d0 <prvIdleTask+0x20>
    32cc:	0e 94 05 0b 	call	0x160a	; 0x160a <vPortYield>
    32d0:	0e 94 47 20 	call	0x408e	; 0x408e <vApplicationIdleHook>
    32d4:	f5 cf       	rjmp	.-22     	; 0x32c0 <prvIdleTask+0x10>

000032d6 <prvInitialiseTaskLists>:
    32d6:	cf 93       	push	r28
    32d8:	df 93       	push	r29
    32da:	1f 92       	push	r1
    32dc:	cd b7       	in	r28, 0x3d	; 61
    32de:	de b7       	in	r29, 0x3e	; 62
    32e0:	19 82       	std	Y+1, r1	; 0x01
    32e2:	10 c0       	rjmp	.+32     	; 0x3304 <prvInitialiseTaskLists+0x2e>
    32e4:	89 81       	ldd	r24, Y+1	; 0x01
    32e6:	28 2f       	mov	r18, r24
    32e8:	30 e0       	ldi	r19, 0x00	; 0
    32ea:	4b e0       	ldi	r20, 0x0B	; 11
    32ec:	42 9f       	mul	r20, r18
    32ee:	c0 01       	movw	r24, r0
    32f0:	43 9f       	mul	r20, r19
    32f2:	90 0d       	add	r25, r0
    32f4:	11 24       	eor	r1, r1
    32f6:	8e 58       	subi	r24, 0x8E	; 142
    32f8:	9f 4c       	sbci	r25, 0xCF	; 207
    32fa:	0e 94 6e 07 	call	0xedc	; 0xedc <vListInitialise>
    32fe:	89 81       	ldd	r24, Y+1	; 0x01
    3300:	8f 5f       	subi	r24, 0xFF	; 255
    3302:	89 83       	std	Y+1, r24	; 0x01
    3304:	89 81       	ldd	r24, Y+1	; 0x01
    3306:	84 30       	cpi	r24, 0x04	; 4
    3308:	68 f3       	brcs	.-38     	; 0x32e4 <prvInitialiseTaskLists+0xe>
    330a:	8e e9       	ldi	r24, 0x9E	; 158
    330c:	90 e3       	ldi	r25, 0x30	; 48
    330e:	0e 94 6e 07 	call	0xedc	; 0xedc <vListInitialise>
    3312:	89 ea       	ldi	r24, 0xA9	; 169
    3314:	90 e3       	ldi	r25, 0x30	; 48
    3316:	0e 94 6e 07 	call	0xedc	; 0xedc <vListInitialise>
    331a:	88 eb       	ldi	r24, 0xB8	; 184
    331c:	90 e3       	ldi	r25, 0x30	; 48
    331e:	0e 94 6e 07 	call	0xedc	; 0xedc <vListInitialise>
    3322:	83 ec       	ldi	r24, 0xC3	; 195
    3324:	90 e3       	ldi	r25, 0x30	; 48
    3326:	0e 94 6e 07 	call	0xedc	; 0xedc <vListInitialise>
    332a:	8e e9       	ldi	r24, 0x9E	; 158
    332c:	90 e3       	ldi	r25, 0x30	; 48
    332e:	80 93 b4 30 	sts	0x30B4, r24	; 0x8030b4 <pxDelayedTaskList>
    3332:	90 93 b5 30 	sts	0x30B5, r25	; 0x8030b5 <pxDelayedTaskList+0x1>
    3336:	89 ea       	ldi	r24, 0xA9	; 169
    3338:	90 e3       	ldi	r25, 0x30	; 48
    333a:	80 93 b6 30 	sts	0x30B6, r24	; 0x8030b6 <pxOverflowDelayedTaskList>
    333e:	90 93 b7 30 	sts	0x30B7, r25	; 0x8030b7 <pxOverflowDelayedTaskList+0x1>
    3342:	00 00       	nop
    3344:	0f 90       	pop	r0
    3346:	df 91       	pop	r29
    3348:	cf 91       	pop	r28
    334a:	08 95       	ret

0000334c <prvCheckTasksWaitingTermination>:
    334c:	cf 93       	push	r28
    334e:	df 93       	push	r29
    3350:	cd b7       	in	r28, 0x3d	; 61
    3352:	de b7       	in	r29, 0x3e	; 62
    3354:	00 00       	nop
    3356:	df 91       	pop	r29
    3358:	cf 91       	pop	r28
    335a:	08 95       	ret

0000335c <prvResetNextTaskUnblockTime>:
    335c:	cf 93       	push	r28
    335e:	df 93       	push	r29
    3360:	1f 92       	push	r1
    3362:	1f 92       	push	r1
    3364:	cd b7       	in	r28, 0x3d	; 61
    3366:	de b7       	in	r29, 0x3e	; 62
    3368:	80 91 b4 30 	lds	r24, 0x30B4	; 0x8030b4 <pxDelayedTaskList>
    336c:	90 91 b5 30 	lds	r25, 0x30B5	; 0x8030b5 <pxDelayedTaskList+0x1>
    3370:	fc 01       	movw	r30, r24
    3372:	80 81       	ld	r24, Z
    3374:	88 23       	and	r24, r24
    3376:	61 f4       	brne	.+24     	; 0x3390 <prvResetNextTaskUnblockTime+0x34>
    3378:	8f ef       	ldi	r24, 0xFF	; 255
    337a:	9f ef       	ldi	r25, 0xFF	; 255
    337c:	dc 01       	movw	r26, r24
    337e:	80 93 d9 30 	sts	0x30D9, r24	; 0x8030d9 <xNextTaskUnblockTime>
    3382:	90 93 da 30 	sts	0x30DA, r25	; 0x8030da <xNextTaskUnblockTime+0x1>
    3386:	a0 93 db 30 	sts	0x30DB, r26	; 0x8030db <xNextTaskUnblockTime+0x2>
    338a:	b0 93 dc 30 	sts	0x30DC, r27	; 0x8030dc <xNextTaskUnblockTime+0x3>
    338e:	1b c0       	rjmp	.+54     	; 0x33c6 <prvResetNextTaskUnblockTime+0x6a>
    3390:	80 91 b4 30 	lds	r24, 0x30B4	; 0x8030b4 <pxDelayedTaskList>
    3394:	90 91 b5 30 	lds	r25, 0x30B5	; 0x8030b5 <pxDelayedTaskList+0x1>
    3398:	fc 01       	movw	r30, r24
    339a:	87 81       	ldd	r24, Z+7	; 0x07
    339c:	90 85       	ldd	r25, Z+8	; 0x08
    339e:	fc 01       	movw	r30, r24
    33a0:	80 85       	ldd	r24, Z+8	; 0x08
    33a2:	91 85       	ldd	r25, Z+9	; 0x09
    33a4:	89 83       	std	Y+1, r24	; 0x01
    33a6:	9a 83       	std	Y+2, r25	; 0x02
    33a8:	89 81       	ldd	r24, Y+1	; 0x01
    33aa:	9a 81       	ldd	r25, Y+2	; 0x02
    33ac:	fc 01       	movw	r30, r24
    33ae:	82 81       	ldd	r24, Z+2	; 0x02
    33b0:	93 81       	ldd	r25, Z+3	; 0x03
    33b2:	a4 81       	ldd	r26, Z+4	; 0x04
    33b4:	b5 81       	ldd	r27, Z+5	; 0x05
    33b6:	80 93 d9 30 	sts	0x30D9, r24	; 0x8030d9 <xNextTaskUnblockTime>
    33ba:	90 93 da 30 	sts	0x30DA, r25	; 0x8030da <xNextTaskUnblockTime+0x1>
    33be:	a0 93 db 30 	sts	0x30DB, r26	; 0x8030db <xNextTaskUnblockTime+0x2>
    33c2:	b0 93 dc 30 	sts	0x30DC, r27	; 0x8030dc <xNextTaskUnblockTime+0x3>
    33c6:	00 00       	nop
    33c8:	0f 90       	pop	r0
    33ca:	0f 90       	pop	r0
    33cc:	df 91       	pop	r29
    33ce:	cf 91       	pop	r28
    33d0:	08 95       	ret

000033d2 <xTaskGetSchedulerState>:
    33d2:	cf 93       	push	r28
    33d4:	df 93       	push	r29
    33d6:	1f 92       	push	r1
    33d8:	cd b7       	in	r28, 0x3d	; 61
    33da:	de b7       	in	r29, 0x3e	; 62
    33dc:	80 91 d4 30 	lds	r24, 0x30D4	; 0x8030d4 <xSchedulerRunning>
    33e0:	88 23       	and	r24, r24
    33e2:	19 f4       	brne	.+6      	; 0x33ea <xTaskGetSchedulerState+0x18>
    33e4:	81 e0       	ldi	r24, 0x01	; 1
    33e6:	89 83       	std	Y+1, r24	; 0x01
    33e8:	08 c0       	rjmp	.+16     	; 0x33fa <xTaskGetSchedulerState+0x28>
    33ea:	80 91 df 30 	lds	r24, 0x30DF	; 0x8030df <uxSchedulerSuspended>
    33ee:	88 23       	and	r24, r24
    33f0:	19 f4       	brne	.+6      	; 0x33f8 <xTaskGetSchedulerState+0x26>
    33f2:	82 e0       	ldi	r24, 0x02	; 2
    33f4:	89 83       	std	Y+1, r24	; 0x01
    33f6:	01 c0       	rjmp	.+2      	; 0x33fa <xTaskGetSchedulerState+0x28>
    33f8:	19 82       	std	Y+1, r1	; 0x01
    33fa:	89 81       	ldd	r24, Y+1	; 0x01
    33fc:	0f 90       	pop	r0
    33fe:	df 91       	pop	r29
    3400:	cf 91       	pop	r28
    3402:	08 95       	ret

00003404 <uxTaskResetEventItemValue>:
    3404:	ef 92       	push	r14
    3406:	ff 92       	push	r15
    3408:	0f 93       	push	r16
    340a:	1f 93       	push	r17
    340c:	cf 93       	push	r28
    340e:	df 93       	push	r29
    3410:	00 d0       	rcall	.+0      	; 0x3412 <uxTaskResetEventItemValue+0xe>
    3412:	1f 92       	push	r1
    3414:	cd b7       	in	r28, 0x3d	; 61
    3416:	de b7       	in	r29, 0x3e	; 62
    3418:	80 91 70 30 	lds	r24, 0x3070	; 0x803070 <pxCurrentTCB>
    341c:	90 91 71 30 	lds	r25, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    3420:	fc 01       	movw	r30, r24
    3422:	86 85       	ldd	r24, Z+14	; 0x0e
    3424:	97 85       	ldd	r25, Z+15	; 0x0f
    3426:	a0 89       	ldd	r26, Z+16	; 0x10
    3428:	b1 89       	ldd	r27, Z+17	; 0x11
    342a:	89 83       	std	Y+1, r24	; 0x01
    342c:	9a 83       	std	Y+2, r25	; 0x02
    342e:	ab 83       	std	Y+3, r26	; 0x03
    3430:	bc 83       	std	Y+4, r27	; 0x04
    3432:	60 91 70 30 	lds	r22, 0x3070	; 0x803070 <pxCurrentTCB>
    3436:	70 91 71 30 	lds	r23, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    343a:	80 91 70 30 	lds	r24, 0x3070	; 0x803070 <pxCurrentTCB>
    343e:	90 91 71 30 	lds	r25, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    3442:	fc 01       	movw	r30, r24
    3444:	82 8d       	ldd	r24, Z+26	; 0x1a
    3446:	88 2f       	mov	r24, r24
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	a0 e0       	ldi	r26, 0x00	; 0
    344c:	b0 e0       	ldi	r27, 0x00	; 0
    344e:	24 e0       	ldi	r18, 0x04	; 4
    3450:	30 e0       	ldi	r19, 0x00	; 0
    3452:	40 e0       	ldi	r20, 0x00	; 0
    3454:	50 e0       	ldi	r21, 0x00	; 0
    3456:	79 01       	movw	r14, r18
    3458:	8a 01       	movw	r16, r20
    345a:	e8 1a       	sub	r14, r24
    345c:	f9 0a       	sbc	r15, r25
    345e:	0a 0b       	sbc	r16, r26
    3460:	1b 0b       	sbc	r17, r27
    3462:	d8 01       	movw	r26, r16
    3464:	c7 01       	movw	r24, r14
    3466:	fb 01       	movw	r30, r22
    3468:	86 87       	std	Z+14, r24	; 0x0e
    346a:	97 87       	std	Z+15, r25	; 0x0f
    346c:	a0 8b       	std	Z+16, r26	; 0x10
    346e:	b1 8b       	std	Z+17, r27	; 0x11
    3470:	89 81       	ldd	r24, Y+1	; 0x01
    3472:	9a 81       	ldd	r25, Y+2	; 0x02
    3474:	ab 81       	ldd	r26, Y+3	; 0x03
    3476:	bc 81       	ldd	r27, Y+4	; 0x04
    3478:	bc 01       	movw	r22, r24
    347a:	cd 01       	movw	r24, r26
    347c:	24 96       	adiw	r28, 0x04	; 4
    347e:	cd bf       	out	0x3d, r28	; 61
    3480:	de bf       	out	0x3e, r29	; 62
    3482:	df 91       	pop	r29
    3484:	cf 91       	pop	r28
    3486:	1f 91       	pop	r17
    3488:	0f 91       	pop	r16
    348a:	ff 90       	pop	r15
    348c:	ef 90       	pop	r14
    348e:	08 95       	ret

00003490 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    3490:	cf 93       	push	r28
    3492:	df 93       	push	r29
    3494:	cd b7       	in	r28, 0x3d	; 61
    3496:	de b7       	in	r29, 0x3e	; 62
    3498:	2d 97       	sbiw	r28, 0x0d	; 13
    349a:	cd bf       	out	0x3d, r28	; 61
    349c:	de bf       	out	0x3e, r29	; 62
    349e:	69 87       	std	Y+9, r22	; 0x09
    34a0:	7a 87       	std	Y+10, r23	; 0x0a
    34a2:	8b 87       	std	Y+11, r24	; 0x0b
    34a4:	9c 87       	std	Y+12, r25	; 0x0c
    34a6:	4d 87       	std	Y+13, r20	; 0x0d
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    34a8:	80 91 cf 30 	lds	r24, 0x30CF	; 0x8030cf <xTickCount>
    34ac:	90 91 d0 30 	lds	r25, 0x30D0	; 0x8030d0 <xTickCount+0x1>
    34b0:	a0 91 d1 30 	lds	r26, 0x30D1	; 0x8030d1 <xTickCount+0x2>
    34b4:	b0 91 d2 30 	lds	r27, 0x30D2	; 0x8030d2 <xTickCount+0x3>
    34b8:	89 83       	std	Y+1, r24	; 0x01
    34ba:	9a 83       	std	Y+2, r25	; 0x02
    34bc:	ab 83       	std	Y+3, r26	; 0x03
    34be:	bc 83       	std	Y+4, r27	; 0x04
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    34c0:	80 91 70 30 	lds	r24, 0x3070	; 0x803070 <pxCurrentTCB>
    34c4:	90 91 71 30 	lds	r25, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    34c8:	02 96       	adiw	r24, 0x02	; 2
    34ca:	0e 94 87 08 	call	0x110e	; 0x110e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    34ce:	89 85       	ldd	r24, Y+9	; 0x09
    34d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    34d2:	ab 85       	ldd	r26, Y+11	; 0x0b
    34d4:	bc 85       	ldd	r27, Y+12	; 0x0c
    34d6:	8f 3f       	cpi	r24, 0xFF	; 255
    34d8:	9f 4f       	sbci	r25, 0xFF	; 255
    34da:	af 4f       	sbci	r26, 0xFF	; 255
    34dc:	bf 4f       	sbci	r27, 0xFF	; 255
    34de:	71 f4       	brne	.+28     	; 0x34fc <prvAddCurrentTaskToDelayedList+0x6c>
    34e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    34e2:	88 23       	and	r24, r24
    34e4:	59 f0       	breq	.+22     	; 0x34fc <prvAddCurrentTaskToDelayedList+0x6c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    34e6:	80 91 70 30 	lds	r24, 0x3070	; 0x803070 <pxCurrentTCB>
    34ea:	90 91 71 30 	lds	r25, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    34ee:	02 96       	adiw	r24, 0x02	; 2
    34f0:	bc 01       	movw	r22, r24
    34f2:	83 ec       	ldi	r24, 0xC3	; 195
    34f4:	90 e3       	ldi	r25, 0x30	; 48
    34f6:	0e 94 bb 07 	call	0xf76	; 0xf76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    34fa:	64 c0       	rjmp	.+200    	; 0x35c4 <prvAddCurrentTaskToDelayedList+0x134>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    34fc:	29 81       	ldd	r18, Y+1	; 0x01
    34fe:	3a 81       	ldd	r19, Y+2	; 0x02
    3500:	4b 81       	ldd	r20, Y+3	; 0x03
    3502:	5c 81       	ldd	r21, Y+4	; 0x04
    3504:	89 85       	ldd	r24, Y+9	; 0x09
    3506:	9a 85       	ldd	r25, Y+10	; 0x0a
    3508:	ab 85       	ldd	r26, Y+11	; 0x0b
    350a:	bc 85       	ldd	r27, Y+12	; 0x0c
    350c:	82 0f       	add	r24, r18
    350e:	93 1f       	adc	r25, r19
    3510:	a4 1f       	adc	r26, r20
    3512:	b5 1f       	adc	r27, r21
    3514:	8d 83       	std	Y+5, r24	; 0x05
    3516:	9e 83       	std	Y+6, r25	; 0x06
    3518:	af 83       	std	Y+7, r26	; 0x07
    351a:	b8 87       	std	Y+8, r27	; 0x08

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    351c:	20 91 70 30 	lds	r18, 0x3070	; 0x803070 <pxCurrentTCB>
    3520:	30 91 71 30 	lds	r19, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    3524:	8d 81       	ldd	r24, Y+5	; 0x05
    3526:	9e 81       	ldd	r25, Y+6	; 0x06
    3528:	af 81       	ldd	r26, Y+7	; 0x07
    352a:	b8 85       	ldd	r27, Y+8	; 0x08
    352c:	f9 01       	movw	r30, r18
    352e:	82 83       	std	Z+2, r24	; 0x02
    3530:	93 83       	std	Z+3, r25	; 0x03
    3532:	a4 83       	std	Z+4, r26	; 0x04
    3534:	b5 83       	std	Z+5, r27	; 0x05

			if( xTimeToWake < xConstTickCount )
    3536:	2d 81       	ldd	r18, Y+5	; 0x05
    3538:	3e 81       	ldd	r19, Y+6	; 0x06
    353a:	4f 81       	ldd	r20, Y+7	; 0x07
    353c:	58 85       	ldd	r21, Y+8	; 0x08
    353e:	89 81       	ldd	r24, Y+1	; 0x01
    3540:	9a 81       	ldd	r25, Y+2	; 0x02
    3542:	ab 81       	ldd	r26, Y+3	; 0x03
    3544:	bc 81       	ldd	r27, Y+4	; 0x04
    3546:	28 17       	cp	r18, r24
    3548:	39 07       	cpc	r19, r25
    354a:	4a 07       	cpc	r20, r26
    354c:	5b 07       	cpc	r21, r27
    354e:	78 f4       	brcc	.+30     	; 0x356e <prvAddCurrentTaskToDelayedList+0xde>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3550:	80 91 70 30 	lds	r24, 0x3070	; 0x803070 <pxCurrentTCB>
    3554:	90 91 71 30 	lds	r25, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    3558:	9c 01       	movw	r18, r24
    355a:	2e 5f       	subi	r18, 0xFE	; 254
    355c:	3f 4f       	sbci	r19, 0xFF	; 255
    355e:	80 91 b6 30 	lds	r24, 0x30B6	; 0x8030b6 <pxOverflowDelayedTaskList>
    3562:	90 91 b7 30 	lds	r25, 0x30B7	; 0x8030b7 <pxOverflowDelayedTaskList+0x1>
    3566:	b9 01       	movw	r22, r18
    3568:	0e 94 06 08 	call	0x100c	; 0x100c <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    356c:	2b c0       	rjmp	.+86     	; 0x35c4 <prvAddCurrentTaskToDelayedList+0x134>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    356e:	80 91 70 30 	lds	r24, 0x3070	; 0x803070 <pxCurrentTCB>
    3572:	90 91 71 30 	lds	r25, 0x3071	; 0x803071 <pxCurrentTCB+0x1>
    3576:	9c 01       	movw	r18, r24
    3578:	2e 5f       	subi	r18, 0xFE	; 254
    357a:	3f 4f       	sbci	r19, 0xFF	; 255
    357c:	80 91 b4 30 	lds	r24, 0x30B4	; 0x8030b4 <pxDelayedTaskList>
    3580:	90 91 b5 30 	lds	r25, 0x30B5	; 0x8030b5 <pxDelayedTaskList+0x1>
    3584:	b9 01       	movw	r22, r18
    3586:	0e 94 06 08 	call	0x100c	; 0x100c <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    358a:	80 91 d9 30 	lds	r24, 0x30D9	; 0x8030d9 <xNextTaskUnblockTime>
    358e:	90 91 da 30 	lds	r25, 0x30DA	; 0x8030da <xNextTaskUnblockTime+0x1>
    3592:	a0 91 db 30 	lds	r26, 0x30DB	; 0x8030db <xNextTaskUnblockTime+0x2>
    3596:	b0 91 dc 30 	lds	r27, 0x30DC	; 0x8030dc <xNextTaskUnblockTime+0x3>
    359a:	2d 81       	ldd	r18, Y+5	; 0x05
    359c:	3e 81       	ldd	r19, Y+6	; 0x06
    359e:	4f 81       	ldd	r20, Y+7	; 0x07
    35a0:	58 85       	ldd	r21, Y+8	; 0x08
    35a2:	28 17       	cp	r18, r24
    35a4:	39 07       	cpc	r19, r25
    35a6:	4a 07       	cpc	r20, r26
    35a8:	5b 07       	cpc	r21, r27
    35aa:	60 f4       	brcc	.+24     	; 0x35c4 <prvAddCurrentTaskToDelayedList+0x134>
				{
					xNextTaskUnblockTime = xTimeToWake;
    35ac:	8d 81       	ldd	r24, Y+5	; 0x05
    35ae:	9e 81       	ldd	r25, Y+6	; 0x06
    35b0:	af 81       	ldd	r26, Y+7	; 0x07
    35b2:	b8 85       	ldd	r27, Y+8	; 0x08
    35b4:	80 93 d9 30 	sts	0x30D9, r24	; 0x8030d9 <xNextTaskUnblockTime>
    35b8:	90 93 da 30 	sts	0x30DA, r25	; 0x8030da <xNextTaskUnblockTime+0x1>
    35bc:	a0 93 db 30 	sts	0x30DB, r26	; 0x8030db <xNextTaskUnblockTime+0x2>
    35c0:	b0 93 dc 30 	sts	0x30DC, r27	; 0x8030dc <xNextTaskUnblockTime+0x3>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    35c4:	00 00       	nop
    35c6:	2d 96       	adiw	r28, 0x0d	; 13
    35c8:	cd bf       	out	0x3d, r28	; 61
    35ca:	de bf       	out	0x3e, r29	; 62
    35cc:	df 91       	pop	r29
    35ce:	cf 91       	pop	r28
    35d0:	08 95       	ret

000035d2 <xTimerCreateTimerTask>:
	taskENTER_CRITICAL();
	{
		pxTimer->pvTimerID = pvNewID;
	}
	taskEXIT_CRITICAL();
}
    35d2:	ef 92       	push	r14
    35d4:	ff 92       	push	r15
    35d6:	0f 93       	push	r16
    35d8:	cf 93       	push	r28
    35da:	df 93       	push	r29
    35dc:	1f 92       	push	r1
    35de:	cd b7       	in	r28, 0x3d	; 61
    35e0:	de b7       	in	r29, 0x3e	; 62
    35e2:	19 82       	std	Y+1, r1	; 0x01
    35e4:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <prvCheckForValidListAndQueue>
    35e8:	80 91 fa 30 	lds	r24, 0x30FA	; 0x8030fa <xTimerQueue>
    35ec:	90 91 fb 30 	lds	r25, 0x30FB	; 0x8030fb <xTimerQueue+0x1>
    35f0:	89 2b       	or	r24, r25
    35f2:	91 f0       	breq	.+36     	; 0x3618 <xTimerCreateTimerTask+0x46>
    35f4:	0f 2e       	mov	r0, r31
    35f6:	fc ef       	ldi	r31, 0xFC	; 252
    35f8:	ef 2e       	mov	r14, r31
    35fa:	f0 e3       	ldi	r31, 0x30	; 48
    35fc:	ff 2e       	mov	r15, r31
    35fe:	f0 2d       	mov	r31, r0
    3600:	03 e0       	ldi	r16, 0x03	; 3
    3602:	20 e0       	ldi	r18, 0x00	; 0
    3604:	30 e0       	ldi	r19, 0x00	; 0
    3606:	48 ec       	ldi	r20, 0xC8	; 200
    3608:	50 e0       	ldi	r21, 0x00	; 0
    360a:	69 e0       	ldi	r22, 0x09	; 9
    360c:	70 e2       	ldi	r23, 0x20	; 32
    360e:	8f ef       	ldi	r24, 0xFF	; 255
    3610:	9b e1       	ldi	r25, 0x1B	; 27
    3612:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <xTaskCreate>
    3616:	89 83       	std	Y+1, r24	; 0x01
    3618:	89 81       	ldd	r24, Y+1	; 0x01
    361a:	0f 90       	pop	r0
    361c:	df 91       	pop	r29
    361e:	cf 91       	pop	r28
    3620:	0f 91       	pop	r16
    3622:	ff 90       	pop	r15
    3624:	ef 90       	pop	r14
    3626:	08 95       	ret

00003628 <xTimerGenericCommand>:
    3628:	cf 92       	push	r12
    362a:	df 92       	push	r13
    362c:	ef 92       	push	r14
    362e:	ff 92       	push	r15
    3630:	0f 93       	push	r16
    3632:	1f 93       	push	r17
    3634:	cf 93       	push	r28
    3636:	df 93       	push	r29
    3638:	cd b7       	in	r28, 0x3d	; 61
    363a:	de b7       	in	r29, 0x3e	; 62
    363c:	67 97       	sbiw	r28, 0x17	; 23
    363e:	cd bf       	out	0x3d, r28	; 61
    3640:	de bf       	out	0x3e, r29	; 62
    3642:	8b 87       	std	Y+11, r24	; 0x0b
    3644:	9c 87       	std	Y+12, r25	; 0x0c
    3646:	6d 87       	std	Y+13, r22	; 0x0d
    3648:	2e 87       	std	Y+14, r18	; 0x0e
    364a:	3f 87       	std	Y+15, r19	; 0x0f
    364c:	48 8b       	std	Y+16, r20	; 0x10
    364e:	59 8b       	std	Y+17, r21	; 0x11
    3650:	0a 8b       	std	Y+18, r16	; 0x12
    3652:	1b 8b       	std	Y+19, r17	; 0x13
    3654:	cc 8a       	std	Y+20, r12	; 0x14
    3656:	dd 8a       	std	Y+21, r13	; 0x15
    3658:	ee 8a       	std	Y+22, r14	; 0x16
    365a:	ff 8a       	std	Y+23, r15	; 0x17
    365c:	19 82       	std	Y+1, r1	; 0x01
    365e:	80 91 fa 30 	lds	r24, 0x30FA	; 0x8030fa <xTimerQueue>
    3662:	90 91 fb 30 	lds	r25, 0x30FB	; 0x8030fb <xTimerQueue+0x1>
    3666:	89 2b       	or	r24, r25
    3668:	09 f4       	brne	.+2      	; 0x366c <xTimerGenericCommand+0x44>
    366a:	44 c0       	rjmp	.+136    	; 0x36f4 <xTimerGenericCommand+0xcc>
    366c:	8d 85       	ldd	r24, Y+13	; 0x0d
    366e:	8a 83       	std	Y+2, r24	; 0x02
    3670:	8e 85       	ldd	r24, Y+14	; 0x0e
    3672:	9f 85       	ldd	r25, Y+15	; 0x0f
    3674:	a8 89       	ldd	r26, Y+16	; 0x10
    3676:	b9 89       	ldd	r27, Y+17	; 0x11
    3678:	8b 83       	std	Y+3, r24	; 0x03
    367a:	9c 83       	std	Y+4, r25	; 0x04
    367c:	ad 83       	std	Y+5, r26	; 0x05
    367e:	be 83       	std	Y+6, r27	; 0x06
    3680:	8b 85       	ldd	r24, Y+11	; 0x0b
    3682:	9c 85       	ldd	r25, Y+12	; 0x0c
    3684:	8f 83       	std	Y+7, r24	; 0x07
    3686:	98 87       	std	Y+8, r25	; 0x08
    3688:	8d 85       	ldd	r24, Y+13	; 0x0d
    368a:	86 30       	cpi	r24, 0x06	; 6
    368c:	34 f5       	brge	.+76     	; 0x36da <xTimerGenericCommand+0xb2>
    368e:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <xTaskGetSchedulerState>
    3692:	82 30       	cpi	r24, 0x02	; 2
    3694:	99 f4       	brne	.+38     	; 0x36bc <xTimerGenericCommand+0x94>
    3696:	e0 91 fa 30 	lds	r30, 0x30FA	; 0x8030fa <xTimerQueue>
    369a:	f0 91 fb 30 	lds	r31, 0x30FB	; 0x8030fb <xTimerQueue+0x1>
    369e:	8c 89       	ldd	r24, Y+20	; 0x14
    36a0:	9d 89       	ldd	r25, Y+21	; 0x15
    36a2:	ae 89       	ldd	r26, Y+22	; 0x16
    36a4:	bf 89       	ldd	r27, Y+23	; 0x17
    36a6:	be 01       	movw	r22, r28
    36a8:	6e 5f       	subi	r22, 0xFE	; 254
    36aa:	7f 4f       	sbci	r23, 0xFF	; 255
    36ac:	00 e0       	ldi	r16, 0x00	; 0
    36ae:	9c 01       	movw	r18, r24
    36b0:	ad 01       	movw	r20, r26
    36b2:	cf 01       	movw	r24, r30
    36b4:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <xQueueGenericSend>
    36b8:	89 83       	std	Y+1, r24	; 0x01
    36ba:	1c c0       	rjmp	.+56     	; 0x36f4 <xTimerGenericCommand+0xcc>
    36bc:	80 91 fa 30 	lds	r24, 0x30FA	; 0x8030fa <xTimerQueue>
    36c0:	90 91 fb 30 	lds	r25, 0x30FB	; 0x8030fb <xTimerQueue+0x1>
    36c4:	be 01       	movw	r22, r28
    36c6:	6e 5f       	subi	r22, 0xFE	; 254
    36c8:	7f 4f       	sbci	r23, 0xFF	; 255
    36ca:	00 e0       	ldi	r16, 0x00	; 0
    36cc:	20 e0       	ldi	r18, 0x00	; 0
    36ce:	30 e0       	ldi	r19, 0x00	; 0
    36d0:	a9 01       	movw	r20, r18
    36d2:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <xQueueGenericSend>
    36d6:	89 83       	std	Y+1, r24	; 0x01
    36d8:	0d c0       	rjmp	.+26     	; 0x36f4 <xTimerGenericCommand+0xcc>
    36da:	80 91 fa 30 	lds	r24, 0x30FA	; 0x8030fa <xTimerQueue>
    36de:	90 91 fb 30 	lds	r25, 0x30FB	; 0x8030fb <xTimerQueue+0x1>
    36e2:	4a 89       	ldd	r20, Y+18	; 0x12
    36e4:	5b 89       	ldd	r21, Y+19	; 0x13
    36e6:	be 01       	movw	r22, r28
    36e8:	6e 5f       	subi	r22, 0xFE	; 254
    36ea:	7f 4f       	sbci	r23, 0xFF	; 255
    36ec:	20 e0       	ldi	r18, 0x00	; 0
    36ee:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <xQueueGenericSendFromISR>
    36f2:	89 83       	std	Y+1, r24	; 0x01
    36f4:	89 81       	ldd	r24, Y+1	; 0x01
    36f6:	67 96       	adiw	r28, 0x17	; 23
    36f8:	cd bf       	out	0x3d, r28	; 61
    36fa:	de bf       	out	0x3e, r29	; 62
    36fc:	df 91       	pop	r29
    36fe:	cf 91       	pop	r28
    3700:	1f 91       	pop	r17
    3702:	0f 91       	pop	r16
    3704:	ff 90       	pop	r15
    3706:	ef 90       	pop	r14
    3708:	df 90       	pop	r13
    370a:	cf 90       	pop	r12
    370c:	08 95       	ret

0000370e <prvProcessExpiredTimer>:
    370e:	cf 92       	push	r12
    3710:	df 92       	push	r13
    3712:	ef 92       	push	r14
    3714:	ff 92       	push	r15
    3716:	0f 93       	push	r16
    3718:	1f 93       	push	r17
    371a:	cf 93       	push	r28
    371c:	df 93       	push	r29
    371e:	cd b7       	in	r28, 0x3d	; 61
    3720:	de b7       	in	r29, 0x3e	; 62
    3722:	2b 97       	sbiw	r28, 0x0b	; 11
    3724:	cd bf       	out	0x3d, r28	; 61
    3726:	de bf       	out	0x3e, r29	; 62
    3728:	6c 83       	std	Y+4, r22	; 0x04
    372a:	7d 83       	std	Y+5, r23	; 0x05
    372c:	8e 83       	std	Y+6, r24	; 0x06
    372e:	9f 83       	std	Y+7, r25	; 0x07
    3730:	28 87       	std	Y+8, r18	; 0x08
    3732:	39 87       	std	Y+9, r19	; 0x09
    3734:	4a 87       	std	Y+10, r20	; 0x0a
    3736:	5b 87       	std	Y+11, r21	; 0x0b
    3738:	80 91 f6 30 	lds	r24, 0x30F6	; 0x8030f6 <pxCurrentTimerList>
    373c:	90 91 f7 30 	lds	r25, 0x30F7	; 0x8030f7 <pxCurrentTimerList+0x1>
    3740:	fc 01       	movw	r30, r24
    3742:	87 81       	ldd	r24, Z+7	; 0x07
    3744:	90 85       	ldd	r25, Z+8	; 0x08
    3746:	fc 01       	movw	r30, r24
    3748:	80 85       	ldd	r24, Z+8	; 0x08
    374a:	91 85       	ldd	r25, Z+9	; 0x09
    374c:	89 83       	std	Y+1, r24	; 0x01
    374e:	9a 83       	std	Y+2, r25	; 0x02
    3750:	89 81       	ldd	r24, Y+1	; 0x01
    3752:	9a 81       	ldd	r25, Y+2	; 0x02
    3754:	02 96       	adiw	r24, 0x02	; 2
    3756:	0e 94 87 08 	call	0x110e	; 0x110e <uxListRemove>
    375a:	89 81       	ldd	r24, Y+1	; 0x01
    375c:	9a 81       	ldd	r25, Y+2	; 0x02
    375e:	fc 01       	movw	r30, r24
    3760:	82 89       	ldd	r24, Z+18	; 0x12
    3762:	81 30       	cpi	r24, 0x01	; 1
    3764:	b1 f5       	brne	.+108    	; 0x37d2 <prvProcessExpiredTimer+0xc4>
    3766:	89 81       	ldd	r24, Y+1	; 0x01
    3768:	9a 81       	ldd	r25, Y+2	; 0x02
    376a:	fc 01       	movw	r30, r24
    376c:	26 85       	ldd	r18, Z+14	; 0x0e
    376e:	37 85       	ldd	r19, Z+15	; 0x0f
    3770:	40 89       	ldd	r20, Z+16	; 0x10
    3772:	51 89       	ldd	r21, Z+17	; 0x11
    3774:	8c 81       	ldd	r24, Y+4	; 0x04
    3776:	9d 81       	ldd	r25, Y+5	; 0x05
    3778:	ae 81       	ldd	r26, Y+6	; 0x06
    377a:	bf 81       	ldd	r27, Y+7	; 0x07
    377c:	82 0f       	add	r24, r18
    377e:	93 1f       	adc	r25, r19
    3780:	a4 1f       	adc	r26, r20
    3782:	b5 1f       	adc	r27, r21
    3784:	ec 80       	ldd	r14, Y+4	; 0x04
    3786:	fd 80       	ldd	r15, Y+5	; 0x05
    3788:	0e 81       	ldd	r16, Y+6	; 0x06
    378a:	1f 81       	ldd	r17, Y+7	; 0x07
    378c:	28 85       	ldd	r18, Y+8	; 0x08
    378e:	39 85       	ldd	r19, Y+9	; 0x09
    3790:	4a 85       	ldd	r20, Y+10	; 0x0a
    3792:	5b 85       	ldd	r21, Y+11	; 0x0b
    3794:	e9 81       	ldd	r30, Y+1	; 0x01
    3796:	fa 81       	ldd	r31, Y+2	; 0x02
    3798:	67 01       	movw	r12, r14
    379a:	78 01       	movw	r14, r16
    379c:	89 01       	movw	r16, r18
    379e:	9a 01       	movw	r18, r20
    37a0:	ac 01       	movw	r20, r24
    37a2:	bd 01       	movw	r22, r26
    37a4:	cf 01       	movw	r24, r30
    37a6:	0e 94 1d 1d 	call	0x3a3a	; 0x3a3a <prvInsertTimerInActiveList>
    37aa:	88 23       	and	r24, r24
    37ac:	91 f0       	breq	.+36     	; 0x37d2 <prvProcessExpiredTimer+0xc4>
    37ae:	8c 81       	ldd	r24, Y+4	; 0x04
    37b0:	9d 81       	ldd	r25, Y+5	; 0x05
    37b2:	ae 81       	ldd	r26, Y+6	; 0x06
    37b4:	bf 81       	ldd	r27, Y+7	; 0x07
    37b6:	e9 81       	ldd	r30, Y+1	; 0x01
    37b8:	fa 81       	ldd	r31, Y+2	; 0x02
    37ba:	c1 2c       	mov	r12, r1
    37bc:	d1 2c       	mov	r13, r1
    37be:	76 01       	movw	r14, r12
    37c0:	00 e0       	ldi	r16, 0x00	; 0
    37c2:	10 e0       	ldi	r17, 0x00	; 0
    37c4:	9c 01       	movw	r18, r24
    37c6:	ad 01       	movw	r20, r26
    37c8:	60 e0       	ldi	r22, 0x00	; 0
    37ca:	cf 01       	movw	r24, r30
    37cc:	0e 94 14 1b 	call	0x3628	; 0x3628 <xTimerGenericCommand>
    37d0:	8b 83       	std	Y+3, r24	; 0x03
    37d2:	89 81       	ldd	r24, Y+1	; 0x01
    37d4:	9a 81       	ldd	r25, Y+2	; 0x02
    37d6:	fc 01       	movw	r30, r24
    37d8:	25 89       	ldd	r18, Z+21	; 0x15
    37da:	36 89       	ldd	r19, Z+22	; 0x16
    37dc:	89 81       	ldd	r24, Y+1	; 0x01
    37de:	9a 81       	ldd	r25, Y+2	; 0x02
    37e0:	f9 01       	movw	r30, r18
    37e2:	19 95       	eicall
    37e4:	00 00       	nop
    37e6:	2b 96       	adiw	r28, 0x0b	; 11
    37e8:	cd bf       	out	0x3d, r28	; 61
    37ea:	de bf       	out	0x3e, r29	; 62
    37ec:	df 91       	pop	r29
    37ee:	cf 91       	pop	r28
    37f0:	1f 91       	pop	r17
    37f2:	0f 91       	pop	r16
    37f4:	ff 90       	pop	r15
    37f6:	ef 90       	pop	r14
    37f8:	df 90       	pop	r13
    37fa:	cf 90       	pop	r12
    37fc:	08 95       	ret

000037fe <prvTimerTask>:
    37fe:	cf 93       	push	r28
    3800:	df 93       	push	r29
    3802:	cd b7       	in	r28, 0x3d	; 61
    3804:	de b7       	in	r29, 0x3e	; 62
    3806:	27 97       	sbiw	r28, 0x07	; 7
    3808:	cd bf       	out	0x3d, r28	; 61
    380a:	de bf       	out	0x3e, r29	; 62
    380c:	8e 83       	std	Y+6, r24	; 0x06
    380e:	9f 83       	std	Y+7, r25	; 0x07
    3810:	ce 01       	movw	r24, r28
    3812:	05 96       	adiw	r24, 0x05	; 5
    3814:	0e 94 9a 1c 	call	0x3934	; 0x3934 <prvGetNextExpireTime>
    3818:	dc 01       	movw	r26, r24
    381a:	cb 01       	movw	r24, r22
    381c:	89 83       	std	Y+1, r24	; 0x01
    381e:	9a 83       	std	Y+2, r25	; 0x02
    3820:	ab 83       	std	Y+3, r26	; 0x03
    3822:	bc 83       	std	Y+4, r27	; 0x04
    3824:	2d 81       	ldd	r18, Y+5	; 0x05
    3826:	89 81       	ldd	r24, Y+1	; 0x01
    3828:	9a 81       	ldd	r25, Y+2	; 0x02
    382a:	ab 81       	ldd	r26, Y+3	; 0x03
    382c:	bc 81       	ldd	r27, Y+4	; 0x04
    382e:	42 2f       	mov	r20, r18
    3830:	bc 01       	movw	r22, r24
    3832:	cd 01       	movw	r24, r26
    3834:	0e 94 1f 1c 	call	0x383e	; 0x383e <prvProcessTimerOrBlockTask>
    3838:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <prvProcessReceivedCommands>
    383c:	e9 cf       	rjmp	.-46     	; 0x3810 <prvTimerTask+0x12>

0000383e <prvProcessTimerOrBlockTask>:
    383e:	ef 92       	push	r14
    3840:	ff 92       	push	r15
    3842:	0f 93       	push	r16
    3844:	1f 93       	push	r17
    3846:	cf 93       	push	r28
    3848:	df 93       	push	r29
    384a:	cd b7       	in	r28, 0x3d	; 61
    384c:	de b7       	in	r29, 0x3e	; 62
    384e:	2a 97       	sbiw	r28, 0x0a	; 10
    3850:	cd bf       	out	0x3d, r28	; 61
    3852:	de bf       	out	0x3e, r29	; 62
    3854:	6e 83       	std	Y+6, r22	; 0x06
    3856:	7f 83       	std	Y+7, r23	; 0x07
    3858:	88 87       	std	Y+8, r24	; 0x08
    385a:	99 87       	std	Y+9, r25	; 0x09
    385c:	4a 87       	std	Y+10, r20	; 0x0a
    385e:	0e 94 71 14 	call	0x28e2	; 0x28e2 <vTaskSuspendAll>
    3862:	ce 01       	movw	r24, r28
    3864:	05 96       	adiw	r24, 0x05	; 5
    3866:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <prvSampleTimeNow>
    386a:	dc 01       	movw	r26, r24
    386c:	cb 01       	movw	r24, r22
    386e:	89 83       	std	Y+1, r24	; 0x01
    3870:	9a 83       	std	Y+2, r25	; 0x02
    3872:	ab 83       	std	Y+3, r26	; 0x03
    3874:	bc 83       	std	Y+4, r27	; 0x04
    3876:	8d 81       	ldd	r24, Y+5	; 0x05
    3878:	88 23       	and	r24, r24
    387a:	09 f0       	breq	.+2      	; 0x387e <prvProcessTimerOrBlockTask+0x40>
    387c:	4e c0       	rjmp	.+156    	; 0x391a <prvProcessTimerOrBlockTask+0xdc>
    387e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3880:	88 23       	and	r24, r24
    3882:	e1 f4       	brne	.+56     	; 0x38bc <prvProcessTimerOrBlockTask+0x7e>
    3884:	2e 81       	ldd	r18, Y+6	; 0x06
    3886:	3f 81       	ldd	r19, Y+7	; 0x07
    3888:	48 85       	ldd	r20, Y+8	; 0x08
    388a:	59 85       	ldd	r21, Y+9	; 0x09
    388c:	89 81       	ldd	r24, Y+1	; 0x01
    388e:	9a 81       	ldd	r25, Y+2	; 0x02
    3890:	ab 81       	ldd	r26, Y+3	; 0x03
    3892:	bc 81       	ldd	r27, Y+4	; 0x04
    3894:	82 17       	cp	r24, r18
    3896:	93 07       	cpc	r25, r19
    3898:	a4 07       	cpc	r26, r20
    389a:	b5 07       	cpc	r27, r21
    389c:	78 f0       	brcs	.+30     	; 0x38bc <prvProcessTimerOrBlockTask+0x7e>
    389e:	0e 94 7e 14 	call	0x28fc	; 0x28fc <xTaskResumeAll>
    38a2:	29 81       	ldd	r18, Y+1	; 0x01
    38a4:	3a 81       	ldd	r19, Y+2	; 0x02
    38a6:	4b 81       	ldd	r20, Y+3	; 0x03
    38a8:	5c 81       	ldd	r21, Y+4	; 0x04
    38aa:	8e 81       	ldd	r24, Y+6	; 0x06
    38ac:	9f 81       	ldd	r25, Y+7	; 0x07
    38ae:	a8 85       	ldd	r26, Y+8	; 0x08
    38b0:	b9 85       	ldd	r27, Y+9	; 0x09
    38b2:	bc 01       	movw	r22, r24
    38b4:	cd 01       	movw	r24, r26
    38b6:	0e 94 87 1b 	call	0x370e	; 0x370e <prvProcessExpiredTimer>
    38ba:	31 c0       	rjmp	.+98     	; 0x391e <prvProcessTimerOrBlockTask+0xe0>
    38bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    38be:	88 23       	and	r24, r24
    38c0:	59 f0       	breq	.+22     	; 0x38d8 <prvProcessTimerOrBlockTask+0x9a>
    38c2:	80 91 f8 30 	lds	r24, 0x30F8	; 0x8030f8 <pxOverflowTimerList>
    38c6:	90 91 f9 30 	lds	r25, 0x30F9	; 0x8030f9 <pxOverflowTimerList+0x1>
    38ca:	fc 01       	movw	r30, r24
    38cc:	90 81       	ld	r25, Z
    38ce:	81 e0       	ldi	r24, 0x01	; 1
    38d0:	99 23       	and	r25, r25
    38d2:	09 f0       	breq	.+2      	; 0x38d6 <prvProcessTimerOrBlockTask+0x98>
    38d4:	80 e0       	ldi	r24, 0x00	; 0
    38d6:	8a 87       	std	Y+10, r24	; 0x0a
    38d8:	2e 81       	ldd	r18, Y+6	; 0x06
    38da:	3f 81       	ldd	r19, Y+7	; 0x07
    38dc:	48 85       	ldd	r20, Y+8	; 0x08
    38de:	59 85       	ldd	r21, Y+9	; 0x09
    38e0:	89 81       	ldd	r24, Y+1	; 0x01
    38e2:	9a 81       	ldd	r25, Y+2	; 0x02
    38e4:	ab 81       	ldd	r26, Y+3	; 0x03
    38e6:	bc 81       	ldd	r27, Y+4	; 0x04
    38e8:	79 01       	movw	r14, r18
    38ea:	8a 01       	movw	r16, r20
    38ec:	e8 1a       	sub	r14, r24
    38ee:	f9 0a       	sbc	r15, r25
    38f0:	0a 0b       	sbc	r16, r26
    38f2:	1b 0b       	sbc	r17, r27
    38f4:	d8 01       	movw	r26, r16
    38f6:	c7 01       	movw	r24, r14
    38f8:	e0 91 fa 30 	lds	r30, 0x30FA	; 0x8030fa <xTimerQueue>
    38fc:	f0 91 fb 30 	lds	r31, 0x30FB	; 0x8030fb <xTimerQueue+0x1>
    3900:	2a 85       	ldd	r18, Y+10	; 0x0a
    3902:	ac 01       	movw	r20, r24
    3904:	bd 01       	movw	r22, r26
    3906:	cf 01       	movw	r24, r30
    3908:	0e 94 1e 11 	call	0x223c	; 0x223c <vQueueWaitForMessageRestricted>
    390c:	0e 94 7e 14 	call	0x28fc	; 0x28fc <xTaskResumeAll>
    3910:	88 23       	and	r24, r24
    3912:	29 f4       	brne	.+10     	; 0x391e <prvProcessTimerOrBlockTask+0xe0>
    3914:	0e 94 05 0b 	call	0x160a	; 0x160a <vPortYield>
    3918:	02 c0       	rjmp	.+4      	; 0x391e <prvProcessTimerOrBlockTask+0xe0>
    391a:	0e 94 7e 14 	call	0x28fc	; 0x28fc <xTaskResumeAll>
    391e:	00 00       	nop
    3920:	2a 96       	adiw	r28, 0x0a	; 10
    3922:	cd bf       	out	0x3d, r28	; 61
    3924:	de bf       	out	0x3e, r29	; 62
    3926:	df 91       	pop	r29
    3928:	cf 91       	pop	r28
    392a:	1f 91       	pop	r17
    392c:	0f 91       	pop	r16
    392e:	ff 90       	pop	r15
    3930:	ef 90       	pop	r14
    3932:	08 95       	ret

00003934 <prvGetNextExpireTime>:
    3934:	cf 93       	push	r28
    3936:	df 93       	push	r29
    3938:	00 d0       	rcall	.+0      	; 0x393a <prvGetNextExpireTime+0x6>
    393a:	00 d0       	rcall	.+0      	; 0x393c <prvGetNextExpireTime+0x8>
    393c:	cd b7       	in	r28, 0x3d	; 61
    393e:	de b7       	in	r29, 0x3e	; 62
    3940:	8d 83       	std	Y+5, r24	; 0x05
    3942:	9e 83       	std	Y+6, r25	; 0x06
    3944:	80 91 f6 30 	lds	r24, 0x30F6	; 0x8030f6 <pxCurrentTimerList>
    3948:	90 91 f7 30 	lds	r25, 0x30F7	; 0x8030f7 <pxCurrentTimerList+0x1>
    394c:	fc 01       	movw	r30, r24
    394e:	90 81       	ld	r25, Z
    3950:	81 e0       	ldi	r24, 0x01	; 1
    3952:	99 23       	and	r25, r25
    3954:	09 f0       	breq	.+2      	; 0x3958 <prvGetNextExpireTime+0x24>
    3956:	80 e0       	ldi	r24, 0x00	; 0
    3958:	28 2f       	mov	r18, r24
    395a:	8d 81       	ldd	r24, Y+5	; 0x05
    395c:	9e 81       	ldd	r25, Y+6	; 0x06
    395e:	fc 01       	movw	r30, r24
    3960:	20 83       	st	Z, r18
    3962:	8d 81       	ldd	r24, Y+5	; 0x05
    3964:	9e 81       	ldd	r25, Y+6	; 0x06
    3966:	fc 01       	movw	r30, r24
    3968:	80 81       	ld	r24, Z
    396a:	88 23       	and	r24, r24
    396c:	89 f4       	brne	.+34     	; 0x3990 <prvGetNextExpireTime+0x5c>
    396e:	80 91 f6 30 	lds	r24, 0x30F6	; 0x8030f6 <pxCurrentTimerList>
    3972:	90 91 f7 30 	lds	r25, 0x30F7	; 0x8030f7 <pxCurrentTimerList+0x1>
    3976:	fc 01       	movw	r30, r24
    3978:	87 81       	ldd	r24, Z+7	; 0x07
    397a:	90 85       	ldd	r25, Z+8	; 0x08
    397c:	fc 01       	movw	r30, r24
    397e:	80 81       	ld	r24, Z
    3980:	91 81       	ldd	r25, Z+1	; 0x01
    3982:	a2 81       	ldd	r26, Z+2	; 0x02
    3984:	b3 81       	ldd	r27, Z+3	; 0x03
    3986:	89 83       	std	Y+1, r24	; 0x01
    3988:	9a 83       	std	Y+2, r25	; 0x02
    398a:	ab 83       	std	Y+3, r26	; 0x03
    398c:	bc 83       	std	Y+4, r27	; 0x04
    398e:	04 c0       	rjmp	.+8      	; 0x3998 <prvGetNextExpireTime+0x64>
    3990:	19 82       	std	Y+1, r1	; 0x01
    3992:	1a 82       	std	Y+2, r1	; 0x02
    3994:	1b 82       	std	Y+3, r1	; 0x03
    3996:	1c 82       	std	Y+4, r1	; 0x04
    3998:	89 81       	ldd	r24, Y+1	; 0x01
    399a:	9a 81       	ldd	r25, Y+2	; 0x02
    399c:	ab 81       	ldd	r26, Y+3	; 0x03
    399e:	bc 81       	ldd	r27, Y+4	; 0x04
    39a0:	bc 01       	movw	r22, r24
    39a2:	cd 01       	movw	r24, r26
    39a4:	26 96       	adiw	r28, 0x06	; 6
    39a6:	cd bf       	out	0x3d, r28	; 61
    39a8:	de bf       	out	0x3e, r29	; 62
    39aa:	df 91       	pop	r29
    39ac:	cf 91       	pop	r28
    39ae:	08 95       	ret

000039b0 <prvSampleTimeNow>:
    39b0:	cf 93       	push	r28
    39b2:	df 93       	push	r29
    39b4:	00 d0       	rcall	.+0      	; 0x39b6 <prvSampleTimeNow+0x6>
    39b6:	00 d0       	rcall	.+0      	; 0x39b8 <prvSampleTimeNow+0x8>
    39b8:	cd b7       	in	r28, 0x3d	; 61
    39ba:	de b7       	in	r29, 0x3e	; 62
    39bc:	8d 83       	std	Y+5, r24	; 0x05
    39be:	9e 83       	std	Y+6, r25	; 0x06
    39c0:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <xTaskGetTickCount>
    39c4:	dc 01       	movw	r26, r24
    39c6:	cb 01       	movw	r24, r22
    39c8:	89 83       	std	Y+1, r24	; 0x01
    39ca:	9a 83       	std	Y+2, r25	; 0x02
    39cc:	ab 83       	std	Y+3, r26	; 0x03
    39ce:	bc 83       	std	Y+4, r27	; 0x04
    39d0:	80 91 fe 30 	lds	r24, 0x30FE	; 0x8030fe <xLastTime.4745>
    39d4:	90 91 ff 30 	lds	r25, 0x30FF	; 0x8030ff <xLastTime.4745+0x1>
    39d8:	a0 91 00 31 	lds	r26, 0x3100	; 0x803100 <xLastTime.4745+0x2>
    39dc:	b0 91 01 31 	lds	r27, 0x3101	; 0x803101 <xLastTime.4745+0x3>
    39e0:	29 81       	ldd	r18, Y+1	; 0x01
    39e2:	3a 81       	ldd	r19, Y+2	; 0x02
    39e4:	4b 81       	ldd	r20, Y+3	; 0x03
    39e6:	5c 81       	ldd	r21, Y+4	; 0x04
    39e8:	28 17       	cp	r18, r24
    39ea:	39 07       	cpc	r19, r25
    39ec:	4a 07       	cpc	r20, r26
    39ee:	5b 07       	cpc	r21, r27
    39f0:	40 f4       	brcc	.+16     	; 0x3a02 <prvSampleTimeNow+0x52>
    39f2:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <prvSwitchTimerLists>
    39f6:	8d 81       	ldd	r24, Y+5	; 0x05
    39f8:	9e 81       	ldd	r25, Y+6	; 0x06
    39fa:	21 e0       	ldi	r18, 0x01	; 1
    39fc:	fc 01       	movw	r30, r24
    39fe:	20 83       	st	Z, r18
    3a00:	04 c0       	rjmp	.+8      	; 0x3a0a <prvSampleTimeNow+0x5a>
    3a02:	8d 81       	ldd	r24, Y+5	; 0x05
    3a04:	9e 81       	ldd	r25, Y+6	; 0x06
    3a06:	fc 01       	movw	r30, r24
    3a08:	10 82       	st	Z, r1
    3a0a:	89 81       	ldd	r24, Y+1	; 0x01
    3a0c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a0e:	ab 81       	ldd	r26, Y+3	; 0x03
    3a10:	bc 81       	ldd	r27, Y+4	; 0x04
    3a12:	80 93 fe 30 	sts	0x30FE, r24	; 0x8030fe <xLastTime.4745>
    3a16:	90 93 ff 30 	sts	0x30FF, r25	; 0x8030ff <xLastTime.4745+0x1>
    3a1a:	a0 93 00 31 	sts	0x3100, r26	; 0x803100 <xLastTime.4745+0x2>
    3a1e:	b0 93 01 31 	sts	0x3101, r27	; 0x803101 <xLastTime.4745+0x3>
    3a22:	89 81       	ldd	r24, Y+1	; 0x01
    3a24:	9a 81       	ldd	r25, Y+2	; 0x02
    3a26:	ab 81       	ldd	r26, Y+3	; 0x03
    3a28:	bc 81       	ldd	r27, Y+4	; 0x04
    3a2a:	bc 01       	movw	r22, r24
    3a2c:	cd 01       	movw	r24, r26
    3a2e:	26 96       	adiw	r28, 0x06	; 6
    3a30:	cd bf       	out	0x3d, r28	; 61
    3a32:	de bf       	out	0x3e, r29	; 62
    3a34:	df 91       	pop	r29
    3a36:	cf 91       	pop	r28
    3a38:	08 95       	ret

00003a3a <prvInsertTimerInActiveList>:
    3a3a:	cf 92       	push	r12
    3a3c:	df 92       	push	r13
    3a3e:	ef 92       	push	r14
    3a40:	ff 92       	push	r15
    3a42:	0f 93       	push	r16
    3a44:	1f 93       	push	r17
    3a46:	cf 93       	push	r28
    3a48:	df 93       	push	r29
    3a4a:	cd b7       	in	r28, 0x3d	; 61
    3a4c:	de b7       	in	r29, 0x3e	; 62
    3a4e:	2f 97       	sbiw	r28, 0x0f	; 15
    3a50:	cd bf       	out	0x3d, r28	; 61
    3a52:	de bf       	out	0x3e, r29	; 62
    3a54:	8a 83       	std	Y+2, r24	; 0x02
    3a56:	9b 83       	std	Y+3, r25	; 0x03
    3a58:	4c 83       	std	Y+4, r20	; 0x04
    3a5a:	5d 83       	std	Y+5, r21	; 0x05
    3a5c:	6e 83       	std	Y+6, r22	; 0x06
    3a5e:	7f 83       	std	Y+7, r23	; 0x07
    3a60:	08 87       	std	Y+8, r16	; 0x08
    3a62:	19 87       	std	Y+9, r17	; 0x09
    3a64:	2a 87       	std	Y+10, r18	; 0x0a
    3a66:	3b 87       	std	Y+11, r19	; 0x0b
    3a68:	cc 86       	std	Y+12, r12	; 0x0c
    3a6a:	dd 86       	std	Y+13, r13	; 0x0d
    3a6c:	ee 86       	std	Y+14, r14	; 0x0e
    3a6e:	ff 86       	std	Y+15, r15	; 0x0f
    3a70:	19 82       	std	Y+1, r1	; 0x01
    3a72:	2a 81       	ldd	r18, Y+2	; 0x02
    3a74:	3b 81       	ldd	r19, Y+3	; 0x03
    3a76:	8c 81       	ldd	r24, Y+4	; 0x04
    3a78:	9d 81       	ldd	r25, Y+5	; 0x05
    3a7a:	ae 81       	ldd	r26, Y+6	; 0x06
    3a7c:	bf 81       	ldd	r27, Y+7	; 0x07
    3a7e:	f9 01       	movw	r30, r18
    3a80:	82 83       	std	Z+2, r24	; 0x02
    3a82:	93 83       	std	Z+3, r25	; 0x03
    3a84:	a4 83       	std	Z+4, r26	; 0x04
    3a86:	b5 83       	std	Z+5, r27	; 0x05
    3a88:	8a 81       	ldd	r24, Y+2	; 0x02
    3a8a:	9b 81       	ldd	r25, Y+3	; 0x03
    3a8c:	2a 81       	ldd	r18, Y+2	; 0x02
    3a8e:	3b 81       	ldd	r19, Y+3	; 0x03
    3a90:	fc 01       	movw	r30, r24
    3a92:	22 87       	std	Z+10, r18	; 0x0a
    3a94:	33 87       	std	Z+11, r19	; 0x0b
    3a96:	2c 81       	ldd	r18, Y+4	; 0x04
    3a98:	3d 81       	ldd	r19, Y+5	; 0x05
    3a9a:	4e 81       	ldd	r20, Y+6	; 0x06
    3a9c:	5f 81       	ldd	r21, Y+7	; 0x07
    3a9e:	88 85       	ldd	r24, Y+8	; 0x08
    3aa0:	99 85       	ldd	r25, Y+9	; 0x09
    3aa2:	aa 85       	ldd	r26, Y+10	; 0x0a
    3aa4:	bb 85       	ldd	r27, Y+11	; 0x0b
    3aa6:	82 17       	cp	r24, r18
    3aa8:	93 07       	cpc	r25, r19
    3aaa:	a4 07       	cpc	r26, r20
    3aac:	b5 07       	cpc	r27, r21
    3aae:	40 f1       	brcs	.+80     	; 0x3b00 <prvInsertTimerInActiveList+0xc6>
    3ab0:	28 85       	ldd	r18, Y+8	; 0x08
    3ab2:	39 85       	ldd	r19, Y+9	; 0x09
    3ab4:	4a 85       	ldd	r20, Y+10	; 0x0a
    3ab6:	5b 85       	ldd	r21, Y+11	; 0x0b
    3ab8:	8c 85       	ldd	r24, Y+12	; 0x0c
    3aba:	9d 85       	ldd	r25, Y+13	; 0x0d
    3abc:	ae 85       	ldd	r26, Y+14	; 0x0e
    3abe:	bf 85       	ldd	r27, Y+15	; 0x0f
    3ac0:	28 1b       	sub	r18, r24
    3ac2:	39 0b       	sbc	r19, r25
    3ac4:	4a 0b       	sbc	r20, r26
    3ac6:	5b 0b       	sbc	r21, r27
    3ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    3aca:	9b 81       	ldd	r25, Y+3	; 0x03
    3acc:	fc 01       	movw	r30, r24
    3ace:	86 85       	ldd	r24, Z+14	; 0x0e
    3ad0:	97 85       	ldd	r25, Z+15	; 0x0f
    3ad2:	a0 89       	ldd	r26, Z+16	; 0x10
    3ad4:	b1 89       	ldd	r27, Z+17	; 0x11
    3ad6:	28 17       	cp	r18, r24
    3ad8:	39 07       	cpc	r19, r25
    3ada:	4a 07       	cpc	r20, r26
    3adc:	5b 07       	cpc	r21, r27
    3ade:	18 f0       	brcs	.+6      	; 0x3ae6 <prvInsertTimerInActiveList+0xac>
    3ae0:	81 e0       	ldi	r24, 0x01	; 1
    3ae2:	89 83       	std	Y+1, r24	; 0x01
    3ae4:	36 c0       	rjmp	.+108    	; 0x3b52 <prvInsertTimerInActiveList+0x118>
    3ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ae8:	9b 81       	ldd	r25, Y+3	; 0x03
    3aea:	9c 01       	movw	r18, r24
    3aec:	2e 5f       	subi	r18, 0xFE	; 254
    3aee:	3f 4f       	sbci	r19, 0xFF	; 255
    3af0:	80 91 f8 30 	lds	r24, 0x30F8	; 0x8030f8 <pxOverflowTimerList>
    3af4:	90 91 f9 30 	lds	r25, 0x30F9	; 0x8030f9 <pxOverflowTimerList+0x1>
    3af8:	b9 01       	movw	r22, r18
    3afa:	0e 94 06 08 	call	0x100c	; 0x100c <vListInsert>
    3afe:	29 c0       	rjmp	.+82     	; 0x3b52 <prvInsertTimerInActiveList+0x118>
    3b00:	28 85       	ldd	r18, Y+8	; 0x08
    3b02:	39 85       	ldd	r19, Y+9	; 0x09
    3b04:	4a 85       	ldd	r20, Y+10	; 0x0a
    3b06:	5b 85       	ldd	r21, Y+11	; 0x0b
    3b08:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b0a:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b0c:	ae 85       	ldd	r26, Y+14	; 0x0e
    3b0e:	bf 85       	ldd	r27, Y+15	; 0x0f
    3b10:	28 17       	cp	r18, r24
    3b12:	39 07       	cpc	r19, r25
    3b14:	4a 07       	cpc	r20, r26
    3b16:	5b 07       	cpc	r21, r27
    3b18:	80 f4       	brcc	.+32     	; 0x3b3a <prvInsertTimerInActiveList+0x100>
    3b1a:	2c 81       	ldd	r18, Y+4	; 0x04
    3b1c:	3d 81       	ldd	r19, Y+5	; 0x05
    3b1e:	4e 81       	ldd	r20, Y+6	; 0x06
    3b20:	5f 81       	ldd	r21, Y+7	; 0x07
    3b22:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b24:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b26:	ae 85       	ldd	r26, Y+14	; 0x0e
    3b28:	bf 85       	ldd	r27, Y+15	; 0x0f
    3b2a:	28 17       	cp	r18, r24
    3b2c:	39 07       	cpc	r19, r25
    3b2e:	4a 07       	cpc	r20, r26
    3b30:	5b 07       	cpc	r21, r27
    3b32:	18 f0       	brcs	.+6      	; 0x3b3a <prvInsertTimerInActiveList+0x100>
    3b34:	81 e0       	ldi	r24, 0x01	; 1
    3b36:	89 83       	std	Y+1, r24	; 0x01
    3b38:	0c c0       	rjmp	.+24     	; 0x3b52 <prvInsertTimerInActiveList+0x118>
    3b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b3c:	9b 81       	ldd	r25, Y+3	; 0x03
    3b3e:	9c 01       	movw	r18, r24
    3b40:	2e 5f       	subi	r18, 0xFE	; 254
    3b42:	3f 4f       	sbci	r19, 0xFF	; 255
    3b44:	80 91 f6 30 	lds	r24, 0x30F6	; 0x8030f6 <pxCurrentTimerList>
    3b48:	90 91 f7 30 	lds	r25, 0x30F7	; 0x8030f7 <pxCurrentTimerList+0x1>
    3b4c:	b9 01       	movw	r22, r18
    3b4e:	0e 94 06 08 	call	0x100c	; 0x100c <vListInsert>
    3b52:	89 81       	ldd	r24, Y+1	; 0x01
    3b54:	2f 96       	adiw	r28, 0x0f	; 15
    3b56:	cd bf       	out	0x3d, r28	; 61
    3b58:	de bf       	out	0x3e, r29	; 62
    3b5a:	df 91       	pop	r29
    3b5c:	cf 91       	pop	r28
    3b5e:	1f 91       	pop	r17
    3b60:	0f 91       	pop	r16
    3b62:	ff 90       	pop	r15
    3b64:	ef 90       	pop	r14
    3b66:	df 90       	pop	r13
    3b68:	cf 90       	pop	r12
    3b6a:	08 95       	ret

00003b6c <prvProcessReceivedCommands>:
    3b6c:	cf 92       	push	r12
    3b6e:	df 92       	push	r13
    3b70:	ef 92       	push	r14
    3b72:	ff 92       	push	r15
    3b74:	0f 93       	push	r16
    3b76:	1f 93       	push	r17
    3b78:	cf 93       	push	r28
    3b7a:	df 93       	push	r29
    3b7c:	cd b7       	in	r28, 0x3d	; 61
    3b7e:	de b7       	in	r29, 0x3e	; 62
    3b80:	65 97       	sbiw	r28, 0x15	; 21
    3b82:	cd bf       	out	0x3d, r28	; 61
    3b84:	de bf       	out	0x3e, r29	; 62
    3b86:	e0 c0       	rjmp	.+448    	; 0x3d48 <prvProcessReceivedCommands+0x1dc>
    3b88:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b8a:	88 23       	and	r24, r24
    3b8c:	fc f4       	brge	.+62     	; 0x3bcc <prvProcessReceivedCommands+0x60>
    3b8e:	ce 01       	movw	r24, r28
    3b90:	0a 96       	adiw	r24, 0x0a	; 10
    3b92:	01 96       	adiw	r24, 0x01	; 1
    3b94:	89 83       	std	Y+1, r24	; 0x01
    3b96:	9a 83       	std	Y+2, r25	; 0x02
    3b98:	89 81       	ldd	r24, Y+1	; 0x01
    3b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b9c:	fc 01       	movw	r30, r24
    3b9e:	20 81       	ld	r18, Z
    3ba0:	31 81       	ldd	r19, Z+1	; 0x01
    3ba2:	89 81       	ldd	r24, Y+1	; 0x01
    3ba4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ba6:	fc 01       	movw	r30, r24
    3ba8:	84 81       	ldd	r24, Z+4	; 0x04
    3baa:	95 81       	ldd	r25, Z+5	; 0x05
    3bac:	a6 81       	ldd	r26, Z+6	; 0x06
    3bae:	b7 81       	ldd	r27, Z+7	; 0x07
    3bb0:	49 81       	ldd	r20, Y+1	; 0x01
    3bb2:	5a 81       	ldd	r21, Y+2	; 0x02
    3bb4:	fa 01       	movw	r30, r20
    3bb6:	02 80       	ldd	r0, Z+2	; 0x02
    3bb8:	f3 81       	ldd	r31, Z+3	; 0x03
    3bba:	e0 2d       	mov	r30, r0
    3bbc:	ec 8b       	std	Y+20, r30	; 0x14
    3bbe:	fd 8b       	std	Y+21, r31	; 0x15
    3bc0:	ac 01       	movw	r20, r24
    3bc2:	bd 01       	movw	r22, r26
    3bc4:	8c 89       	ldd	r24, Y+20	; 0x14
    3bc6:	9d 89       	ldd	r25, Y+21	; 0x15
    3bc8:	f9 01       	movw	r30, r18
    3bca:	19 95       	eicall
    3bcc:	8a 85       	ldd	r24, Y+10	; 0x0a
    3bce:	88 23       	and	r24, r24
    3bd0:	0c f4       	brge	.+2      	; 0x3bd4 <prvProcessReceivedCommands+0x68>
    3bd2:	ba c0       	rjmp	.+372    	; 0x3d48 <prvProcessReceivedCommands+0x1dc>
    3bd4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bd6:	98 89       	ldd	r25, Y+16	; 0x10
    3bd8:	8b 83       	std	Y+3, r24	; 0x03
    3bda:	9c 83       	std	Y+4, r25	; 0x04
    3bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    3bde:	9c 81       	ldd	r25, Y+4	; 0x04
    3be0:	fc 01       	movw	r30, r24
    3be2:	84 85       	ldd	r24, Z+12	; 0x0c
    3be4:	95 85       	ldd	r25, Z+13	; 0x0d
    3be6:	89 2b       	or	r24, r25
    3be8:	29 f0       	breq	.+10     	; 0x3bf4 <prvProcessReceivedCommands+0x88>
    3bea:	8b 81       	ldd	r24, Y+3	; 0x03
    3bec:	9c 81       	ldd	r25, Y+4	; 0x04
    3bee:	02 96       	adiw	r24, 0x02	; 2
    3bf0:	0e 94 87 08 	call	0x110e	; 0x110e <uxListRemove>
    3bf4:	ce 01       	movw	r24, r28
    3bf6:	43 96       	adiw	r24, 0x13	; 19
    3bf8:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <prvSampleTimeNow>
    3bfc:	dc 01       	movw	r26, r24
    3bfe:	cb 01       	movw	r24, r22
    3c00:	8d 83       	std	Y+5, r24	; 0x05
    3c02:	9e 83       	std	Y+6, r25	; 0x06
    3c04:	af 83       	std	Y+7, r26	; 0x07
    3c06:	b8 87       	std	Y+8, r27	; 0x08
    3c08:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c0a:	08 2e       	mov	r0, r24
    3c0c:	00 0c       	add	r0, r0
    3c0e:	99 0b       	sbc	r25, r25
    3c10:	09 2e       	mov	r0, r25
    3c12:	00 0c       	add	r0, r0
    3c14:	aa 0b       	sbc	r26, r26
    3c16:	bb 0b       	sbc	r27, r27
    3c18:	40 e0       	ldi	r20, 0x00	; 0
    3c1a:	50 e0       	ldi	r21, 0x00	; 0
    3c1c:	29 e0       	ldi	r18, 0x09	; 9
    3c1e:	30 e0       	ldi	r19, 0x00	; 0
    3c20:	84 1b       	sub	r24, r20
    3c22:	95 0b       	sbc	r25, r21
    3c24:	28 17       	cp	r18, r24
    3c26:	39 07       	cpc	r19, r25
    3c28:	08 f4       	brcc	.+2      	; 0x3c2c <prvProcessReceivedCommands+0xc0>
    3c2a:	8d c0       	rjmp	.+282    	; 0x3d46 <prvProcessReceivedCommands+0x1da>
    3c2c:	fc 01       	movw	r30, r24
    3c2e:	88 27       	eor	r24, r24
    3c30:	e2 50       	subi	r30, 0x02	; 2
    3c32:	ff 4f       	sbci	r31, 0xFF	; 255
    3c34:	8f 4f       	sbci	r24, 0xFF	; 255
    3c36:	0c 94 3f 30 	jmp	0x607e	; 0x607e <__tablejump2__>
    3c3a:	eb 84       	ldd	r14, Y+11	; 0x0b
    3c3c:	fc 84       	ldd	r15, Y+12	; 0x0c
    3c3e:	0d 85       	ldd	r16, Y+13	; 0x0d
    3c40:	1e 85       	ldd	r17, Y+14	; 0x0e
    3c42:	2b 85       	ldd	r18, Y+11	; 0x0b
    3c44:	3c 85       	ldd	r19, Y+12	; 0x0c
    3c46:	4d 85       	ldd	r20, Y+13	; 0x0d
    3c48:	5e 85       	ldd	r21, Y+14	; 0x0e
    3c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c4c:	9c 81       	ldd	r25, Y+4	; 0x04
    3c4e:	fc 01       	movw	r30, r24
    3c50:	86 85       	ldd	r24, Z+14	; 0x0e
    3c52:	97 85       	ldd	r25, Z+15	; 0x0f
    3c54:	a0 89       	ldd	r26, Z+16	; 0x10
    3c56:	b1 89       	ldd	r27, Z+17	; 0x11
    3c58:	82 0f       	add	r24, r18
    3c5a:	93 1f       	adc	r25, r19
    3c5c:	a4 1f       	adc	r26, r20
    3c5e:	b5 1f       	adc	r27, r21
    3c60:	2d 81       	ldd	r18, Y+5	; 0x05
    3c62:	3e 81       	ldd	r19, Y+6	; 0x06
    3c64:	4f 81       	ldd	r20, Y+7	; 0x07
    3c66:	58 85       	ldd	r21, Y+8	; 0x08
    3c68:	eb 81       	ldd	r30, Y+3	; 0x03
    3c6a:	fc 81       	ldd	r31, Y+4	; 0x04
    3c6c:	67 01       	movw	r12, r14
    3c6e:	78 01       	movw	r14, r16
    3c70:	89 01       	movw	r16, r18
    3c72:	9a 01       	movw	r18, r20
    3c74:	ac 01       	movw	r20, r24
    3c76:	bd 01       	movw	r22, r26
    3c78:	cf 01       	movw	r24, r30
    3c7a:	0e 94 1d 1d 	call	0x3a3a	; 0x3a3a <prvInsertTimerInActiveList>
    3c7e:	88 23       	and	r24, r24
    3c80:	09 f4       	brne	.+2      	; 0x3c84 <prvProcessReceivedCommands+0x118>
    3c82:	62 c0       	rjmp	.+196    	; 0x3d48 <prvProcessReceivedCommands+0x1dc>
    3c84:	8b 81       	ldd	r24, Y+3	; 0x03
    3c86:	9c 81       	ldd	r25, Y+4	; 0x04
    3c88:	fc 01       	movw	r30, r24
    3c8a:	25 89       	ldd	r18, Z+21	; 0x15
    3c8c:	36 89       	ldd	r19, Z+22	; 0x16
    3c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c90:	9c 81       	ldd	r25, Y+4	; 0x04
    3c92:	f9 01       	movw	r30, r18
    3c94:	19 95       	eicall
    3c96:	8b 81       	ldd	r24, Y+3	; 0x03
    3c98:	9c 81       	ldd	r25, Y+4	; 0x04
    3c9a:	fc 01       	movw	r30, r24
    3c9c:	82 89       	ldd	r24, Z+18	; 0x12
    3c9e:	81 30       	cpi	r24, 0x01	; 1
    3ca0:	09 f0       	breq	.+2      	; 0x3ca4 <prvProcessReceivedCommands+0x138>
    3ca2:	52 c0       	rjmp	.+164    	; 0x3d48 <prvProcessReceivedCommands+0x1dc>
    3ca4:	2b 85       	ldd	r18, Y+11	; 0x0b
    3ca6:	3c 85       	ldd	r19, Y+12	; 0x0c
    3ca8:	4d 85       	ldd	r20, Y+13	; 0x0d
    3caa:	5e 85       	ldd	r21, Y+14	; 0x0e
    3cac:	8b 81       	ldd	r24, Y+3	; 0x03
    3cae:	9c 81       	ldd	r25, Y+4	; 0x04
    3cb0:	fc 01       	movw	r30, r24
    3cb2:	86 85       	ldd	r24, Z+14	; 0x0e
    3cb4:	97 85       	ldd	r25, Z+15	; 0x0f
    3cb6:	a0 89       	ldd	r26, Z+16	; 0x10
    3cb8:	b1 89       	ldd	r27, Z+17	; 0x11
    3cba:	82 0f       	add	r24, r18
    3cbc:	93 1f       	adc	r25, r19
    3cbe:	a4 1f       	adc	r26, r20
    3cc0:	b5 1f       	adc	r27, r21
    3cc2:	eb 81       	ldd	r30, Y+3	; 0x03
    3cc4:	fc 81       	ldd	r31, Y+4	; 0x04
    3cc6:	c1 2c       	mov	r12, r1
    3cc8:	d1 2c       	mov	r13, r1
    3cca:	76 01       	movw	r14, r12
    3ccc:	00 e0       	ldi	r16, 0x00	; 0
    3cce:	10 e0       	ldi	r17, 0x00	; 0
    3cd0:	9c 01       	movw	r18, r24
    3cd2:	ad 01       	movw	r20, r26
    3cd4:	60 e0       	ldi	r22, 0x00	; 0
    3cd6:	cf 01       	movw	r24, r30
    3cd8:	0e 94 14 1b 	call	0x3628	; 0x3628 <xTimerGenericCommand>
    3cdc:	89 87       	std	Y+9, r24	; 0x09
    3cde:	34 c0       	rjmp	.+104    	; 0x3d48 <prvProcessReceivedCommands+0x1dc>
    3ce0:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ce2:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ce4:	ad 85       	ldd	r26, Y+13	; 0x0d
    3ce6:	be 85       	ldd	r27, Y+14	; 0x0e
    3ce8:	2b 81       	ldd	r18, Y+3	; 0x03
    3cea:	3c 81       	ldd	r19, Y+4	; 0x04
    3cec:	f9 01       	movw	r30, r18
    3cee:	86 87       	std	Z+14, r24	; 0x0e
    3cf0:	97 87       	std	Z+15, r25	; 0x0f
    3cf2:	a0 8b       	std	Z+16, r26	; 0x10
    3cf4:	b1 8b       	std	Z+17, r27	; 0x11
    3cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    3cf8:	9c 81       	ldd	r25, Y+4	; 0x04
    3cfa:	fc 01       	movw	r30, r24
    3cfc:	26 85       	ldd	r18, Z+14	; 0x0e
    3cfe:	37 85       	ldd	r19, Z+15	; 0x0f
    3d00:	40 89       	ldd	r20, Z+16	; 0x10
    3d02:	51 89       	ldd	r21, Z+17	; 0x11
    3d04:	8d 81       	ldd	r24, Y+5	; 0x05
    3d06:	9e 81       	ldd	r25, Y+6	; 0x06
    3d08:	af 81       	ldd	r26, Y+7	; 0x07
    3d0a:	b8 85       	ldd	r27, Y+8	; 0x08
    3d0c:	82 0f       	add	r24, r18
    3d0e:	93 1f       	adc	r25, r19
    3d10:	a4 1f       	adc	r26, r20
    3d12:	b5 1f       	adc	r27, r21
    3d14:	ed 80       	ldd	r14, Y+5	; 0x05
    3d16:	fe 80       	ldd	r15, Y+6	; 0x06
    3d18:	0f 81       	ldd	r16, Y+7	; 0x07
    3d1a:	18 85       	ldd	r17, Y+8	; 0x08
    3d1c:	2d 81       	ldd	r18, Y+5	; 0x05
    3d1e:	3e 81       	ldd	r19, Y+6	; 0x06
    3d20:	4f 81       	ldd	r20, Y+7	; 0x07
    3d22:	58 85       	ldd	r21, Y+8	; 0x08
    3d24:	eb 81       	ldd	r30, Y+3	; 0x03
    3d26:	fc 81       	ldd	r31, Y+4	; 0x04
    3d28:	67 01       	movw	r12, r14
    3d2a:	78 01       	movw	r14, r16
    3d2c:	89 01       	movw	r16, r18
    3d2e:	9a 01       	movw	r18, r20
    3d30:	ac 01       	movw	r20, r24
    3d32:	bd 01       	movw	r22, r26
    3d34:	cf 01       	movw	r24, r30
    3d36:	0e 94 1d 1d 	call	0x3a3a	; 0x3a3a <prvInsertTimerInActiveList>
    3d3a:	06 c0       	rjmp	.+12     	; 0x3d48 <prvProcessReceivedCommands+0x1dc>
    3d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d3e:	9c 81       	ldd	r25, Y+4	; 0x04
    3d40:	0e 94 60 07 	call	0xec0	; 0xec0 <vPortFree>
    3d44:	01 c0       	rjmp	.+2      	; 0x3d48 <prvProcessReceivedCommands+0x1dc>
    3d46:	00 00       	nop
    3d48:	80 91 fa 30 	lds	r24, 0x30FA	; 0x8030fa <xTimerQueue>
    3d4c:	90 91 fb 30 	lds	r25, 0x30FB	; 0x8030fb <xTimerQueue+0x1>
    3d50:	be 01       	movw	r22, r28
    3d52:	66 5f       	subi	r22, 0xF6	; 246
    3d54:	7f 4f       	sbci	r23, 0xFF	; 255
    3d56:	20 e0       	ldi	r18, 0x00	; 0
    3d58:	30 e0       	ldi	r19, 0x00	; 0
    3d5a:	a9 01       	movw	r20, r18
    3d5c:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <xQueueReceive>
    3d60:	88 23       	and	r24, r24
    3d62:	09 f0       	breq	.+2      	; 0x3d66 <prvProcessReceivedCommands+0x1fa>
    3d64:	11 cf       	rjmp	.-478    	; 0x3b88 <prvProcessReceivedCommands+0x1c>
    3d66:	00 00       	nop
    3d68:	65 96       	adiw	r28, 0x15	; 21
    3d6a:	cd bf       	out	0x3d, r28	; 61
    3d6c:	de bf       	out	0x3e, r29	; 62
    3d6e:	df 91       	pop	r29
    3d70:	cf 91       	pop	r28
    3d72:	1f 91       	pop	r17
    3d74:	0f 91       	pop	r16
    3d76:	ff 90       	pop	r15
    3d78:	ef 90       	pop	r14
    3d7a:	df 90       	pop	r13
    3d7c:	cf 90       	pop	r12
    3d7e:	08 95       	ret

00003d80 <prvSwitchTimerLists>:
    3d80:	cf 92       	push	r12
    3d82:	df 92       	push	r13
    3d84:	ef 92       	push	r14
    3d86:	ff 92       	push	r15
    3d88:	0f 93       	push	r16
    3d8a:	1f 93       	push	r17
    3d8c:	cf 93       	push	r28
    3d8e:	df 93       	push	r29
    3d90:	cd b7       	in	r28, 0x3d	; 61
    3d92:	de b7       	in	r29, 0x3e	; 62
    3d94:	2d 97       	sbiw	r28, 0x0d	; 13
    3d96:	cd bf       	out	0x3d, r28	; 61
    3d98:	de bf       	out	0x3e, r29	; 62
    3d9a:	82 c0       	rjmp	.+260    	; 0x3ea0 <prvSwitchTimerLists+0x120>
    3d9c:	80 91 f6 30 	lds	r24, 0x30F6	; 0x8030f6 <pxCurrentTimerList>
    3da0:	90 91 f7 30 	lds	r25, 0x30F7	; 0x8030f7 <pxCurrentTimerList+0x1>
    3da4:	fc 01       	movw	r30, r24
    3da6:	87 81       	ldd	r24, Z+7	; 0x07
    3da8:	90 85       	ldd	r25, Z+8	; 0x08
    3daa:	fc 01       	movw	r30, r24
    3dac:	80 81       	ld	r24, Z
    3dae:	91 81       	ldd	r25, Z+1	; 0x01
    3db0:	a2 81       	ldd	r26, Z+2	; 0x02
    3db2:	b3 81       	ldd	r27, Z+3	; 0x03
    3db4:	89 83       	std	Y+1, r24	; 0x01
    3db6:	9a 83       	std	Y+2, r25	; 0x02
    3db8:	ab 83       	std	Y+3, r26	; 0x03
    3dba:	bc 83       	std	Y+4, r27	; 0x04
    3dbc:	80 91 f6 30 	lds	r24, 0x30F6	; 0x8030f6 <pxCurrentTimerList>
    3dc0:	90 91 f7 30 	lds	r25, 0x30F7	; 0x8030f7 <pxCurrentTimerList+0x1>
    3dc4:	fc 01       	movw	r30, r24
    3dc6:	87 81       	ldd	r24, Z+7	; 0x07
    3dc8:	90 85       	ldd	r25, Z+8	; 0x08
    3dca:	fc 01       	movw	r30, r24
    3dcc:	80 85       	ldd	r24, Z+8	; 0x08
    3dce:	91 85       	ldd	r25, Z+9	; 0x09
    3dd0:	8d 83       	std	Y+5, r24	; 0x05
    3dd2:	9e 83       	std	Y+6, r25	; 0x06
    3dd4:	8d 81       	ldd	r24, Y+5	; 0x05
    3dd6:	9e 81       	ldd	r25, Y+6	; 0x06
    3dd8:	02 96       	adiw	r24, 0x02	; 2
    3dda:	0e 94 87 08 	call	0x110e	; 0x110e <uxListRemove>
    3dde:	8d 81       	ldd	r24, Y+5	; 0x05
    3de0:	9e 81       	ldd	r25, Y+6	; 0x06
    3de2:	fc 01       	movw	r30, r24
    3de4:	25 89       	ldd	r18, Z+21	; 0x15
    3de6:	36 89       	ldd	r19, Z+22	; 0x16
    3de8:	8d 81       	ldd	r24, Y+5	; 0x05
    3dea:	9e 81       	ldd	r25, Y+6	; 0x06
    3dec:	f9 01       	movw	r30, r18
    3dee:	19 95       	eicall
    3df0:	8d 81       	ldd	r24, Y+5	; 0x05
    3df2:	9e 81       	ldd	r25, Y+6	; 0x06
    3df4:	fc 01       	movw	r30, r24
    3df6:	82 89       	ldd	r24, Z+18	; 0x12
    3df8:	81 30       	cpi	r24, 0x01	; 1
    3dfa:	09 f0       	breq	.+2      	; 0x3dfe <prvSwitchTimerLists+0x7e>
    3dfc:	51 c0       	rjmp	.+162    	; 0x3ea0 <prvSwitchTimerLists+0x120>
    3dfe:	8d 81       	ldd	r24, Y+5	; 0x05
    3e00:	9e 81       	ldd	r25, Y+6	; 0x06
    3e02:	fc 01       	movw	r30, r24
    3e04:	26 85       	ldd	r18, Z+14	; 0x0e
    3e06:	37 85       	ldd	r19, Z+15	; 0x0f
    3e08:	40 89       	ldd	r20, Z+16	; 0x10
    3e0a:	51 89       	ldd	r21, Z+17	; 0x11
    3e0c:	89 81       	ldd	r24, Y+1	; 0x01
    3e0e:	9a 81       	ldd	r25, Y+2	; 0x02
    3e10:	ab 81       	ldd	r26, Y+3	; 0x03
    3e12:	bc 81       	ldd	r27, Y+4	; 0x04
    3e14:	82 0f       	add	r24, r18
    3e16:	93 1f       	adc	r25, r19
    3e18:	a4 1f       	adc	r26, r20
    3e1a:	b5 1f       	adc	r27, r21
    3e1c:	8f 83       	std	Y+7, r24	; 0x07
    3e1e:	98 87       	std	Y+8, r25	; 0x08
    3e20:	a9 87       	std	Y+9, r26	; 0x09
    3e22:	ba 87       	std	Y+10, r27	; 0x0a
    3e24:	2f 81       	ldd	r18, Y+7	; 0x07
    3e26:	38 85       	ldd	r19, Y+8	; 0x08
    3e28:	49 85       	ldd	r20, Y+9	; 0x09
    3e2a:	5a 85       	ldd	r21, Y+10	; 0x0a
    3e2c:	89 81       	ldd	r24, Y+1	; 0x01
    3e2e:	9a 81       	ldd	r25, Y+2	; 0x02
    3e30:	ab 81       	ldd	r26, Y+3	; 0x03
    3e32:	bc 81       	ldd	r27, Y+4	; 0x04
    3e34:	82 17       	cp	r24, r18
    3e36:	93 07       	cpc	r25, r19
    3e38:	a4 07       	cpc	r26, r20
    3e3a:	b5 07       	cpc	r27, r21
    3e3c:	f8 f4       	brcc	.+62     	; 0x3e7c <prvSwitchTimerLists+0xfc>
    3e3e:	2d 81       	ldd	r18, Y+5	; 0x05
    3e40:	3e 81       	ldd	r19, Y+6	; 0x06
    3e42:	8f 81       	ldd	r24, Y+7	; 0x07
    3e44:	98 85       	ldd	r25, Y+8	; 0x08
    3e46:	a9 85       	ldd	r26, Y+9	; 0x09
    3e48:	ba 85       	ldd	r27, Y+10	; 0x0a
    3e4a:	f9 01       	movw	r30, r18
    3e4c:	82 83       	std	Z+2, r24	; 0x02
    3e4e:	93 83       	std	Z+3, r25	; 0x03
    3e50:	a4 83       	std	Z+4, r26	; 0x04
    3e52:	b5 83       	std	Z+5, r27	; 0x05
    3e54:	8d 81       	ldd	r24, Y+5	; 0x05
    3e56:	9e 81       	ldd	r25, Y+6	; 0x06
    3e58:	2d 81       	ldd	r18, Y+5	; 0x05
    3e5a:	3e 81       	ldd	r19, Y+6	; 0x06
    3e5c:	fc 01       	movw	r30, r24
    3e5e:	22 87       	std	Z+10, r18	; 0x0a
    3e60:	33 87       	std	Z+11, r19	; 0x0b
    3e62:	8d 81       	ldd	r24, Y+5	; 0x05
    3e64:	9e 81       	ldd	r25, Y+6	; 0x06
    3e66:	9c 01       	movw	r18, r24
    3e68:	2e 5f       	subi	r18, 0xFE	; 254
    3e6a:	3f 4f       	sbci	r19, 0xFF	; 255
    3e6c:	80 91 f6 30 	lds	r24, 0x30F6	; 0x8030f6 <pxCurrentTimerList>
    3e70:	90 91 f7 30 	lds	r25, 0x30F7	; 0x8030f7 <pxCurrentTimerList+0x1>
    3e74:	b9 01       	movw	r22, r18
    3e76:	0e 94 06 08 	call	0x100c	; 0x100c <vListInsert>
    3e7a:	12 c0       	rjmp	.+36     	; 0x3ea0 <prvSwitchTimerLists+0x120>
    3e7c:	89 81       	ldd	r24, Y+1	; 0x01
    3e7e:	9a 81       	ldd	r25, Y+2	; 0x02
    3e80:	ab 81       	ldd	r26, Y+3	; 0x03
    3e82:	bc 81       	ldd	r27, Y+4	; 0x04
    3e84:	ed 81       	ldd	r30, Y+5	; 0x05
    3e86:	fe 81       	ldd	r31, Y+6	; 0x06
    3e88:	c1 2c       	mov	r12, r1
    3e8a:	d1 2c       	mov	r13, r1
    3e8c:	76 01       	movw	r14, r12
    3e8e:	00 e0       	ldi	r16, 0x00	; 0
    3e90:	10 e0       	ldi	r17, 0x00	; 0
    3e92:	9c 01       	movw	r18, r24
    3e94:	ad 01       	movw	r20, r26
    3e96:	60 e0       	ldi	r22, 0x00	; 0
    3e98:	cf 01       	movw	r24, r30
    3e9a:	0e 94 14 1b 	call	0x3628	; 0x3628 <xTimerGenericCommand>
    3e9e:	8b 87       	std	Y+11, r24	; 0x0b
    3ea0:	80 91 f6 30 	lds	r24, 0x30F6	; 0x8030f6 <pxCurrentTimerList>
    3ea4:	90 91 f7 30 	lds	r25, 0x30F7	; 0x8030f7 <pxCurrentTimerList+0x1>
    3ea8:	fc 01       	movw	r30, r24
    3eaa:	80 81       	ld	r24, Z
    3eac:	88 23       	and	r24, r24
    3eae:	09 f0       	breq	.+2      	; 0x3eb2 <prvSwitchTimerLists+0x132>
    3eb0:	75 cf       	rjmp	.-278    	; 0x3d9c <prvSwitchTimerLists+0x1c>
    3eb2:	80 91 f6 30 	lds	r24, 0x30F6	; 0x8030f6 <pxCurrentTimerList>
    3eb6:	90 91 f7 30 	lds	r25, 0x30F7	; 0x8030f7 <pxCurrentTimerList+0x1>
    3eba:	8c 87       	std	Y+12, r24	; 0x0c
    3ebc:	9d 87       	std	Y+13, r25	; 0x0d
    3ebe:	80 91 f8 30 	lds	r24, 0x30F8	; 0x8030f8 <pxOverflowTimerList>
    3ec2:	90 91 f9 30 	lds	r25, 0x30F9	; 0x8030f9 <pxOverflowTimerList+0x1>
    3ec6:	80 93 f6 30 	sts	0x30F6, r24	; 0x8030f6 <pxCurrentTimerList>
    3eca:	90 93 f7 30 	sts	0x30F7, r25	; 0x8030f7 <pxCurrentTimerList+0x1>
    3ece:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ed0:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ed2:	80 93 f8 30 	sts	0x30F8, r24	; 0x8030f8 <pxOverflowTimerList>
    3ed6:	90 93 f9 30 	sts	0x30F9, r25	; 0x8030f9 <pxOverflowTimerList+0x1>
    3eda:	00 00       	nop
    3edc:	2d 96       	adiw	r28, 0x0d	; 13
    3ede:	cd bf       	out	0x3d, r28	; 61
    3ee0:	de bf       	out	0x3e, r29	; 62
    3ee2:	df 91       	pop	r29
    3ee4:	cf 91       	pop	r28
    3ee6:	1f 91       	pop	r17
    3ee8:	0f 91       	pop	r16
    3eea:	ff 90       	pop	r15
    3eec:	ef 90       	pop	r14
    3eee:	df 90       	pop	r13
    3ef0:	cf 90       	pop	r12
    3ef2:	08 95       	ret

00003ef4 <prvCheckForValidListAndQueue>:
    3ef4:	cf 93       	push	r28
    3ef6:	df 93       	push	r29
    3ef8:	cd b7       	in	r28, 0x3d	; 61
    3efa:	de b7       	in	r29, 0x3e	; 62
    3efc:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    3f00:	ff 93       	push	r31
    3f02:	f8 7f       	andi	r31, 0xF8	; 248
    3f04:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    3f08:	80 91 fa 30 	lds	r24, 0x30FA	; 0x8030fa <xTimerQueue>
    3f0c:	90 91 fb 30 	lds	r25, 0x30FB	; 0x8030fb <xTimerQueue+0x1>
    3f10:	89 2b       	or	r24, r25
    3f12:	e9 f4       	brne	.+58     	; 0x3f4e <prvCheckForValidListAndQueue+0x5a>
    3f14:	80 ee       	ldi	r24, 0xE0	; 224
    3f16:	90 e3       	ldi	r25, 0x30	; 48
    3f18:	0e 94 6e 07 	call	0xedc	; 0xedc <vListInitialise>
    3f1c:	8b ee       	ldi	r24, 0xEB	; 235
    3f1e:	90 e3       	ldi	r25, 0x30	; 48
    3f20:	0e 94 6e 07 	call	0xedc	; 0xedc <vListInitialise>
    3f24:	80 ee       	ldi	r24, 0xE0	; 224
    3f26:	90 e3       	ldi	r25, 0x30	; 48
    3f28:	80 93 f6 30 	sts	0x30F6, r24	; 0x8030f6 <pxCurrentTimerList>
    3f2c:	90 93 f7 30 	sts	0x30F7, r25	; 0x8030f7 <pxCurrentTimerList+0x1>
    3f30:	8b ee       	ldi	r24, 0xEB	; 235
    3f32:	90 e3       	ldi	r25, 0x30	; 48
    3f34:	80 93 f8 30 	sts	0x30F8, r24	; 0x8030f8 <pxOverflowTimerList>
    3f38:	90 93 f9 30 	sts	0x30F9, r25	; 0x8030f9 <pxOverflowTimerList+0x1>
    3f3c:	40 e0       	ldi	r20, 0x00	; 0
    3f3e:	69 e0       	ldi	r22, 0x09	; 9
    3f40:	85 e0       	ldi	r24, 0x05	; 5
    3f42:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <xQueueGenericCreate>
    3f46:	80 93 fa 30 	sts	0x30FA, r24	; 0x8030fa <xTimerQueue>
    3f4a:	90 93 fb 30 	sts	0x30FB, r25	; 0x8030fb <xTimerQueue+0x1>
    3f4e:	ff 91       	pop	r31
    3f50:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    3f54:	00 00       	nop
    3f56:	df 91       	pop	r29
    3f58:	cf 91       	pop	r28
    3f5a:	08 95       	ret

00003f5c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
    3f5c:	0f 93       	push	r16
    3f5e:	1f 93       	push	r17
    3f60:	cf 93       	push	r28
    3f62:	df 93       	push	r29
    3f64:	cd b7       	in	r28, 0x3d	; 61
    3f66:	de b7       	in	r29, 0x3e	; 62
    3f68:	64 97       	sbiw	r28, 0x14	; 20
    3f6a:	cd bf       	out	0x3d, r28	; 61
    3f6c:	de bf       	out	0x3e, r29	; 62
    3f6e:	8b 87       	std	Y+11, r24	; 0x0b
    3f70:	9c 87       	std	Y+12, r25	; 0x0c
    3f72:	6d 87       	std	Y+13, r22	; 0x0d
    3f74:	7e 87       	std	Y+14, r23	; 0x0e
    3f76:	2f 87       	std	Y+15, r18	; 0x0f
    3f78:	38 8b       	std	Y+16, r19	; 0x10
    3f7a:	49 8b       	std	Y+17, r20	; 0x11
    3f7c:	5a 8b       	std	Y+18, r21	; 0x12
    3f7e:	0b 8b       	std	Y+19, r16	; 0x13
    3f80:	1c 8b       	std	Y+20, r17	; 0x14
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
    3f82:	8e ef       	ldi	r24, 0xFE	; 254
    3f84:	8a 83       	std	Y+2, r24	; 0x02
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
    3f86:	8b 85       	ldd	r24, Y+11	; 0x0b
    3f88:	9c 85       	ldd	r25, Y+12	; 0x0c
    3f8a:	8b 83       	std	Y+3, r24	; 0x03
    3f8c:	9c 83       	std	Y+4, r25	; 0x04
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
    3f8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f90:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f92:	8d 83       	std	Y+5, r24	; 0x05
    3f94:	9e 83       	std	Y+6, r25	; 0x06
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
    3f96:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f98:	98 89       	ldd	r25, Y+16	; 0x10
    3f9a:	a9 89       	ldd	r26, Y+17	; 0x11
    3f9c:	ba 89       	ldd	r27, Y+18	; 0x12
    3f9e:	8f 83       	std	Y+7, r24	; 0x07
    3fa0:	98 87       	std	Y+8, r25	; 0x08
    3fa2:	a9 87       	std	Y+9, r26	; 0x09
    3fa4:	ba 87       	std	Y+10, r27	; 0x0a

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3fa6:	80 91 fa 30 	lds	r24, 0x30FA	; 0x8030fa <xTimerQueue>
    3faa:	90 91 fb 30 	lds	r25, 0x30FB	; 0x8030fb <xTimerQueue+0x1>
    3fae:	4b 89       	ldd	r20, Y+19	; 0x13
    3fb0:	5c 89       	ldd	r21, Y+20	; 0x14
    3fb2:	be 01       	movw	r22, r28
    3fb4:	6e 5f       	subi	r22, 0xFE	; 254
    3fb6:	7f 4f       	sbci	r23, 0xFF	; 255
    3fb8:	20 e0       	ldi	r18, 0x00	; 0
    3fba:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <xQueueGenericSendFromISR>
    3fbe:	89 83       	std	Y+1, r24	; 0x01

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
    3fc0:	89 81       	ldd	r24, Y+1	; 0x01
	}
    3fc2:	64 96       	adiw	r28, 0x14	; 20
    3fc4:	cd bf       	out	0x3d, r28	; 61
    3fc6:	de bf       	out	0x3e, r29	; 62
    3fc8:	df 91       	pop	r29
    3fca:	cf 91       	pop	r28
    3fcc:	1f 91       	pop	r17
    3fce:	0f 91       	pop	r16
    3fd0:	08 95       	ret

00003fd2 <vInitClock>:
#include "init.h"
#include "clksys_driver.h"


void vInitClock(void)
{
    3fd2:	cf 93       	push	r28
    3fd4:	df 93       	push	r29
    3fd6:	cd b7       	in	r28, 0x3d	; 61
    3fd8:	de b7       	in	r29, 0x3e	; 62
	CLKSYS_Enable( OSC_RC2MEN_bm );
    3fda:	80 e5       	ldi	r24, 0x50	; 80
    3fdc:	90 e0       	ldi	r25, 0x00	; 0
    3fde:	20 e5       	ldi	r18, 0x50	; 80
    3fe0:	30 e0       	ldi	r19, 0x00	; 0
    3fe2:	f9 01       	movw	r30, r18
    3fe4:	20 81       	ld	r18, Z
    3fe6:	21 60       	ori	r18, 0x01	; 1
    3fe8:	fc 01       	movw	r30, r24
    3fea:	20 83       	st	Z, r18
	do {} while ( CLKSYS_IsReady( OSC_RC2MRDY_bm ) == 0 );
    3fec:	80 e5       	ldi	r24, 0x50	; 80
    3fee:	90 e0       	ldi	r25, 0x00	; 0
    3ff0:	fc 01       	movw	r30, r24
    3ff2:	81 81       	ldd	r24, Z+1	; 0x01
    3ff4:	88 2f       	mov	r24, r24
    3ff6:	90 e0       	ldi	r25, 0x00	; 0
    3ff8:	81 70       	andi	r24, 0x01	; 1
    3ffa:	99 27       	eor	r25, r25
    3ffc:	89 2b       	or	r24, r25
    3ffe:	b1 f3       	breq	.-20     	; 0x3fec <vInitClock+0x1a>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC2M_gc );
    4000:	80 e0       	ldi	r24, 0x00	; 0
    4002:	0e 94 1f 03 	call	0x63e	; 0x63e <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC32KEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
    4006:	8e e1       	ldi	r24, 0x1E	; 30
    4008:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <CLKSYS_Disable>
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    400c:	60 e0       	ldi	r22, 0x00	; 0
    400e:	80 e0       	ldi	r24, 0x00	; 0
    4010:	0e 94 08 03 	call	0x610	; 0x610 <CLKSYS_Prescalers_Config>
	CLKSYS_XOSC_Config( OSC_FRQRANGE_2TO9_gc,false,OSC_XOSCSEL_XTAL_256CLK_gc );
    4014:	43 e0       	ldi	r20, 0x03	; 3
    4016:	60 e0       	ldi	r22, 0x00	; 0
    4018:	80 e4       	ldi	r24, 0x40	; 64
    401a:	0e 94 b3 02 	call	0x566	; 0x566 <CLKSYS_XOSC_Config>
	CLKSYS_Enable( OSC_XOSCEN_bm );
    401e:	80 e5       	ldi	r24, 0x50	; 80
    4020:	90 e0       	ldi	r25, 0x00	; 0
    4022:	20 e5       	ldi	r18, 0x50	; 80
    4024:	30 e0       	ldi	r19, 0x00	; 0
    4026:	f9 01       	movw	r30, r18
    4028:	20 81       	ld	r18, Z
    402a:	28 60       	ori	r18, 0x08	; 8
    402c:	fc 01       	movw	r30, r24
    402e:	20 83       	st	Z, r18
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
    4030:	80 e5       	ldi	r24, 0x50	; 80
    4032:	90 e0       	ldi	r25, 0x00	; 0
    4034:	fc 01       	movw	r30, r24
    4036:	81 81       	ldd	r24, Z+1	; 0x01
    4038:	88 2f       	mov	r24, r24
    403a:	90 e0       	ldi	r25, 0x00	; 0
    403c:	88 70       	andi	r24, 0x08	; 8
    403e:	99 27       	eor	r25, r25
    4040:	89 2b       	or	r24, r25
    4042:	b1 f3       	breq	.-20     	; 0x4030 <__stack+0x31>
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 4 );
    4044:	64 e0       	ldi	r22, 0x04	; 4
    4046:	80 ec       	ldi	r24, 0xC0	; 192
    4048:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
    404c:	80 e5       	ldi	r24, 0x50	; 80
    404e:	90 e0       	ldi	r25, 0x00	; 0
    4050:	20 e5       	ldi	r18, 0x50	; 80
    4052:	30 e0       	ldi	r19, 0x00	; 0
    4054:	f9 01       	movw	r30, r18
    4056:	20 81       	ld	r18, Z
    4058:	20 61       	ori	r18, 0x10	; 16
    405a:	fc 01       	movw	r30, r24
    405c:	20 83       	st	Z, r18
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    405e:	60 e0       	ldi	r22, 0x00	; 0
    4060:	80 e0       	ldi	r24, 0x00	; 0
    4062:	0e 94 08 03 	call	0x610	; 0x610 <CLKSYS_Prescalers_Config>
	do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
    4066:	80 e5       	ldi	r24, 0x50	; 80
    4068:	90 e0       	ldi	r25, 0x00	; 0
    406a:	fc 01       	movw	r30, r24
    406c:	81 81       	ldd	r24, Z+1	; 0x01
    406e:	88 2f       	mov	r24, r24
    4070:	90 e0       	ldi	r25, 0x00	; 0
    4072:	80 71       	andi	r24, 0x10	; 16
    4074:	99 27       	eor	r25, r25
    4076:	89 2b       	or	r24, r25
    4078:	b1 f3       	breq	.-20     	; 0x4066 <__stack+0x67>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
    407a:	84 e0       	ldi	r24, 0x04	; 4
    407c:	0e 94 1f 03 	call	0x63e	; 0x63e <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC2MEN_bm | OSC_RC32KEN_bm);
    4080:	87 e0       	ldi	r24, 0x07	; 7
    4082:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <CLKSYS_Disable>
    4086:	00 00       	nop
    4088:	df 91       	pop	r29
    408a:	cf 91       	pop	r28
    408c:	08 95       	ret

0000408e <vApplicationIdleHook>:
/*********************************************************************************
Idle Task
*********************************************************************************/

void vApplicationIdleHook( void )
{	
    408e:	cf 93       	push	r28
    4090:	df 93       	push	r29
    4092:	cd b7       	in	r28, 0x3d	; 61
    4094:	de b7       	in	r29, 0x3e	; 62
	
}
    4096:	00 00       	nop
    4098:	df 91       	pop	r29
    409a:	cf 91       	pop	r28
    409c:	08 95       	ret

0000409e <main>:
/*********************************************************************************
Main
*********************************************************************************/

int main(void)
{
    409e:	ef 92       	push	r14
    40a0:	ff 92       	push	r15
    40a2:	0f 93       	push	r16
    40a4:	cf 93       	push	r28
    40a6:	df 93       	push	r29
    40a8:	cd b7       	in	r28, 0x3d	; 61
    40aa:	de b7       	in	r29, 0x3e	; 62
	vInitClock();
    40ac:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <vInitClock>
	vInitDisplay();
    40b0:	0e 94 02 26 	call	0x4c04	; 0x4c04 <vInitDisplay>
	
	xTaskCreate(controllerTask, (const char *) "vControl_tsk", configMINIMAL_STACK_SIZE+150, NULL, 3, NULL);
    40b4:	e1 2c       	mov	r14, r1
    40b6:	f1 2c       	mov	r15, r1
    40b8:	03 e0       	ldi	r16, 0x03	; 3
    40ba:	20 e0       	ldi	r18, 0x00	; 0
    40bc:	30 e0       	ldi	r19, 0x00	; 0
    40be:	4e e5       	ldi	r20, 0x5E	; 94
    40c0:	51 e0       	ldi	r21, 0x01	; 1
    40c2:	61 e1       	ldi	r22, 0x11	; 17
    40c4:	70 e2       	ldi	r23, 0x20	; 32
    40c6:	80 ef       	ldi	r24, 0xF0	; 240
    40c8:	93 e2       	ldi	r25, 0x23	; 35
    40ca:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <xTaskCreate>
	xTaskCreate( vPiLeibniz, (const char *) "vLeibniz_tsk", configMINIMAL_STACK_SIZE+10, NULL, 2, NULL);
    40ce:	e1 2c       	mov	r14, r1
    40d0:	f1 2c       	mov	r15, r1
    40d2:	02 e0       	ldi	r16, 0x02	; 2
    40d4:	20 e0       	ldi	r18, 0x00	; 0
    40d6:	30 e0       	ldi	r19, 0x00	; 0
    40d8:	42 ed       	ldi	r20, 0xD2	; 210
    40da:	50 e0       	ldi	r21, 0x00	; 0
    40dc:	6e e1       	ldi	r22, 0x1E	; 30
    40de:	70 e2       	ldi	r23, 0x20	; 32
    40e0:	89 e1       	ldi	r24, 0x19	; 25
    40e2:	91 e2       	ldi	r25, 0x21	; 33
    40e4:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <xTaskCreate>
	xTaskCreate( vVietaPi, (const char *) "vVietaPi_tsk", configMINIMAL_STACK_SIZE+10, NULL, 2, NULL);
    40e8:	e1 2c       	mov	r14, r1
    40ea:	f1 2c       	mov	r15, r1
    40ec:	02 e0       	ldi	r16, 0x02	; 2
    40ee:	20 e0       	ldi	r18, 0x00	; 0
    40f0:	30 e0       	ldi	r19, 0x00	; 0
    40f2:	42 ed       	ldi	r20, 0xD2	; 210
    40f4:	50 e0       	ldi	r21, 0x00	; 0
    40f6:	6b e2       	ldi	r22, 0x2B	; 43
    40f8:	70 e2       	ldi	r23, 0x20	; 32
    40fa:	89 ea       	ldi	r24, 0xA9	; 169
    40fc:	91 e2       	ldi	r25, 0x21	; 33
    40fe:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <xTaskCreate>
	xTaskCreate( vCompare, (const char *) "vComp_tsk", configMINIMAL_STACK_SIZE+10, NULL, 3, NULL);
    4102:	e1 2c       	mov	r14, r1
    4104:	f1 2c       	mov	r15, r1
    4106:	03 e0       	ldi	r16, 0x03	; 3
    4108:	20 e0       	ldi	r18, 0x00	; 0
    410a:	30 e0       	ldi	r19, 0x00	; 0
    410c:	42 ed       	ldi	r20, 0xD2	; 210
    410e:	50 e0       	ldi	r21, 0x00	; 0
    4110:	68 e3       	ldi	r22, 0x38	; 56
    4112:	70 e2       	ldi	r23, 0x20	; 32
    4114:	86 e2       	ldi	r24, 0x26	; 38
    4116:	92 e2       	ldi	r25, 0x22	; 34
    4118:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <xTaskCreate>
	xTaskCreate( vDisplaytask, (const char *) "vDisp_tsk", configMINIMAL_STACK_SIZE+150, NULL, 2, NULL);
    411c:	e1 2c       	mov	r14, r1
    411e:	f1 2c       	mov	r15, r1
    4120:	02 e0       	ldi	r16, 0x02	; 2
    4122:	20 e0       	ldi	r18, 0x00	; 0
    4124:	30 e0       	ldi	r19, 0x00	; 0
    4126:	4e e5       	ldi	r20, 0x5E	; 94
    4128:	51 e0       	ldi	r21, 0x01	; 1
    412a:	62 e4       	ldi	r22, 0x42	; 66
    412c:	70 e2       	ldi	r23, 0x20	; 32
    412e:	86 eb       	ldi	r24, 0xB6	; 182
    4130:	92 e2       	ldi	r25, 0x22	; 34
    4132:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <xTaskCreate>
	xTaskCreate( vTimeMeasurement, (const char *) "vTimeMeasurement_tsk", configMINIMAL_STACK_SIZE+100, NULL, 3, NULL);
    4136:	e1 2c       	mov	r14, r1
    4138:	f1 2c       	mov	r15, r1
    413a:	03 e0       	ldi	r16, 0x03	; 3
    413c:	20 e0       	ldi	r18, 0x00	; 0
    413e:	30 e0       	ldi	r19, 0x00	; 0
    4140:	4c e2       	ldi	r20, 0x2C	; 44
    4142:	51 e0       	ldi	r21, 0x01	; 1
    4144:	6c e4       	ldi	r22, 0x4C	; 76
    4146:	70 e2       	ldi	r23, 0x20	; 32
    4148:	82 eb       	ldi	r24, 0xB2	; 178
    414a:	90 e2       	ldi	r25, 0x20	; 32
    414c:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <xTaskCreate>
	
	vTaskStartScheduler();
    4150:	0e 94 25 14 	call	0x284a	; 0x284a <vTaskStartScheduler>
	
	return 0;
    4154:	80 e0       	ldi	r24, 0x00	; 0
    4156:	90 e0       	ldi	r25, 0x00	; 0
}
    4158:	df 91       	pop	r29
    415a:	cf 91       	pop	r28
    415c:	0f 91       	pop	r16
    415e:	ff 90       	pop	r15
    4160:	ef 90       	pop	r14
    4162:	08 95       	ret

00004164 <vTimeMeasurement>:
/*********************************************************************************
Functions
*********************************************************************************/


void vTimeMeasurement(void* pvParameters){							//Time Function for measuring execution time
    4164:	cf 93       	push	r28
    4166:	df 93       	push	r29
    4168:	00 d0       	rcall	.+0      	; 0x416a <vTimeMeasurement+0x6>
    416a:	00 d0       	rcall	.+0      	; 0x416c <vTimeMeasurement+0x8>
    416c:	cd b7       	in	r28, 0x3d	; 61
    416e:	de b7       	in	r29, 0x3e	; 62
    4170:	8d 83       	std	Y+5, r24	; 0x05
    4172:	9e 83       	std	Y+6, r25	; 0x06
TickType_t lasttime = xTaskGetTickCount();
    4174:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <xTaskGetTickCount>
    4178:	dc 01       	movw	r26, r24
    417a:	cb 01       	movw	r24, r22
    417c:	89 83       	std	Y+1, r24	; 0x01
    417e:	9a 83       	std	Y+2, r25	; 0x02
    4180:	ab 83       	std	Y+3, r26	; 0x03
    4182:	bc 83       	std	Y+4, r27	; 0x04
	for(;;) {
		if (TimerRuning)
    4184:	80 91 11 31 	lds	r24, 0x3111	; 0x803111 <TimerRuning>
    4188:	88 23       	and	r24, r24
    418a:	d1 f1       	breq	.+116    	; 0x4200 <vTimeMeasurement+0x9c>
		{
			
			GlobalHunSec++;
    418c:	80 91 0e 31 	lds	r24, 0x310E	; 0x80310e <GlobalHunSec>
    4190:	90 91 0f 31 	lds	r25, 0x310F	; 0x80310f <GlobalHunSec+0x1>
    4194:	01 96       	adiw	r24, 0x01	; 1
    4196:	80 93 0e 31 	sts	0x310E, r24	; 0x80310e <GlobalHunSec>
    419a:	90 93 0f 31 	sts	0x310F, r25	; 0x80310f <GlobalHunSec+0x1>
			if(GlobalHunSec >= 100) {
    419e:	80 91 0e 31 	lds	r24, 0x310E	; 0x80310e <GlobalHunSec>
    41a2:	90 91 0f 31 	lds	r25, 0x310F	; 0x80310f <GlobalHunSec+0x1>
    41a6:	84 36       	cpi	r24, 0x64	; 100
    41a8:	91 05       	cpc	r25, r1
    41aa:	6c f0       	brlt	.+26     	; 0x41c6 <vTimeMeasurement+0x62>
				GlobalHunSec = 0;
    41ac:	10 92 0e 31 	sts	0x310E, r1	; 0x80310e <GlobalHunSec>
    41b0:	10 92 0f 31 	sts	0x310F, r1	; 0x80310f <GlobalHunSec+0x1>
				GlobalSec++;
    41b4:	80 91 0a 31 	lds	r24, 0x310A	; 0x80310a <GlobalSec>
    41b8:	90 91 0b 31 	lds	r25, 0x310B	; 0x80310b <GlobalSec+0x1>
    41bc:	01 96       	adiw	r24, 0x01	; 1
    41be:	80 93 0a 31 	sts	0x310A, r24	; 0x80310a <GlobalSec>
    41c2:	90 93 0b 31 	sts	0x310B, r25	; 0x80310b <GlobalSec+0x1>
			}
			if (GlobalSec >= 60){
    41c6:	80 91 0a 31 	lds	r24, 0x310A	; 0x80310a <GlobalSec>
    41ca:	90 91 0b 31 	lds	r25, 0x310B	; 0x80310b <GlobalSec+0x1>
    41ce:	cc 97       	sbiw	r24, 0x3c	; 60
    41d0:	6c f0       	brlt	.+26     	; 0x41ec <vTimeMeasurement+0x88>
				GlobalSec = 0;
    41d2:	10 92 0a 31 	sts	0x310A, r1	; 0x80310a <GlobalSec>
    41d6:	10 92 0b 31 	sts	0x310B, r1	; 0x80310b <GlobalSec+0x1>
				GlobalMin++;
    41da:	80 91 0c 31 	lds	r24, 0x310C	; 0x80310c <GlobalMin>
    41de:	90 91 0d 31 	lds	r25, 0x310D	; 0x80310d <GlobalMin+0x1>
    41e2:	01 96       	adiw	r24, 0x01	; 1
    41e4:	80 93 0c 31 	sts	0x310C, r24	; 0x80310c <GlobalMin>
    41e8:	90 93 0d 31 	sts	0x310D, r25	; 0x80310d <GlobalMin+0x1>
			}
			if(GlobalMin >= 60) {
    41ec:	80 91 0c 31 	lds	r24, 0x310C	; 0x80310c <GlobalMin>
    41f0:	90 91 0d 31 	lds	r25, 0x310D	; 0x80310d <GlobalMin+0x1>
    41f4:	cc 97       	sbiw	r24, 0x3c	; 60
    41f6:	24 f0       	brlt	.+8      	; 0x4200 <vTimeMeasurement+0x9c>
				GlobalMin = 0;
    41f8:	10 92 0c 31 	sts	0x310C, r1	; 0x80310c <GlobalMin>
    41fc:	10 92 0d 31 	sts	0x310D, r1	; 0x80310d <GlobalMin+0x1>
			}
		}
		if (Reset)
    4200:	80 91 10 31 	lds	r24, 0x3110	; 0x803110 <Reset>
    4204:	88 23       	and	r24, r24
    4206:	61 f0       	breq	.+24     	; 0x4220 <vTimeMeasurement+0xbc>
		{
			GlobalSec = 0;
    4208:	10 92 0a 31 	sts	0x310A, r1	; 0x80310a <GlobalSec>
    420c:	10 92 0b 31 	sts	0x310B, r1	; 0x80310b <GlobalSec+0x1>
			GlobalMin = 0;
    4210:	10 92 0c 31 	sts	0x310C, r1	; 0x80310c <GlobalMin>
    4214:	10 92 0d 31 	sts	0x310D, r1	; 0x80310d <GlobalMin+0x1>
			Reset = 0;
    4218:	10 92 10 31 	sts	0x3110, r1	; 0x803110 <Reset>
			TimerRuning = 0;
    421c:	10 92 11 31 	sts	0x3111, r1	; 0x803111 <TimerRuning>
		}
		vTaskDelayUntil(&lasttime, 10/portTICK_RATE_MS);
    4220:	4a e0       	ldi	r20, 0x0A	; 10
    4222:	50 e0       	ldi	r21, 0x00	; 0
    4224:	60 e0       	ldi	r22, 0x00	; 0
    4226:	70 e0       	ldi	r23, 0x00	; 0
    4228:	ce 01       	movw	r24, r28
    422a:	01 96       	adiw	r24, 0x01	; 1
    422c:	0e 94 3f 13 	call	0x267e	; 0x267e <vTaskDelayUntil>
	}
    4230:	a9 cf       	rjmp	.-174    	; 0x4184 <vTimeMeasurement+0x20>

00004232 <vPiLeibniz>:
}


void vPiLeibniz(void* pvParameters)												//Approximation of Pi by Leibniz Method
{
    4232:	ef 92       	push	r14
    4234:	ff 92       	push	r15
    4236:	0f 93       	push	r16
    4238:	1f 93       	push	r17
    423a:	cf 93       	push	r28
    423c:	df 93       	push	r29
    423e:	cd b7       	in	r28, 0x3d	; 61
    4240:	de b7       	in	r29, 0x3e	; 62
    4242:	2a 97       	sbiw	r28, 0x0a	; 10
    4244:	cd bf       	out	0x3d, r28	; 61
    4246:	de bf       	out	0x3e, r29	; 62
    4248:	89 87       	std	Y+9, r24	; 0x09
    424a:	9a 87       	std	Y+10, r25	; 0x0a
	uint32_t CurIterations = 0;
    424c:	19 82       	std	Y+1, r1	; 0x01
    424e:	1a 82       	std	Y+2, r1	; 0x02
    4250:	1b 82       	std	Y+3, r1	; 0x03
    4252:	1c 82       	std	Y+4, r1	; 0x04
	float NextSign = 1.0;
    4254:	80 e0       	ldi	r24, 0x00	; 0
    4256:	90 e0       	ldi	r25, 0x00	; 0
    4258:	a0 e8       	ldi	r26, 0x80	; 128
    425a:	bf e3       	ldi	r27, 0x3F	; 63
    425c:	8d 83       	std	Y+5, r24	; 0x05
    425e:	9e 83       	std	Y+6, r25	; 0x06
    4260:	af 83       	std	Y+7, r26	; 0x07
    4262:	b8 87       	std	Y+8, r27	; 0x08
		while (1)
		{
			if (State == RunLeibniz)
    4264:	80 91 12 31 	lds	r24, 0x3112	; 0x803112 <State>
    4268:	82 30       	cpi	r24, 0x02	; 2
    426a:	09 f0       	breq	.+2      	; 0x426e <vPiLeibniz+0x3c>
    426c:	53 c0       	rjmp	.+166    	; 0x4314 <vPiLeibniz+0xe2>
			{
				LeibnizPi = LeibnizPi + (NextSign / (2 * CurIterations + 1)) * 4;
    426e:	89 81       	ldd	r24, Y+1	; 0x01
    4270:	9a 81       	ldd	r25, Y+2	; 0x02
    4272:	ab 81       	ldd	r26, Y+3	; 0x03
    4274:	bc 81       	ldd	r27, Y+4	; 0x04
    4276:	88 0f       	add	r24, r24
    4278:	99 1f       	adc	r25, r25
    427a:	aa 1f       	adc	r26, r26
    427c:	bb 1f       	adc	r27, r27
    427e:	01 96       	adiw	r24, 0x01	; 1
    4280:	a1 1d       	adc	r26, r1
    4282:	b1 1d       	adc	r27, r1
    4284:	bc 01       	movw	r22, r24
    4286:	cd 01       	movw	r24, r26
    4288:	0e 94 c0 2e 	call	0x5d80	; 0x5d80 <__floatunsisf>
    428c:	dc 01       	movw	r26, r24
    428e:	cb 01       	movw	r24, r22
    4290:	9c 01       	movw	r18, r24
    4292:	ad 01       	movw	r20, r26
    4294:	6d 81       	ldd	r22, Y+5	; 0x05
    4296:	7e 81       	ldd	r23, Y+6	; 0x06
    4298:	8f 81       	ldd	r24, Y+7	; 0x07
    429a:	98 85       	ldd	r25, Y+8	; 0x08
    429c:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <__divsf3>
    42a0:	dc 01       	movw	r26, r24
    42a2:	cb 01       	movw	r24, r22
    42a4:	20 e0       	ldi	r18, 0x00	; 0
    42a6:	30 e0       	ldi	r19, 0x00	; 0
    42a8:	40 e8       	ldi	r20, 0x80	; 128
    42aa:	50 e4       	ldi	r21, 0x40	; 64
    42ac:	bc 01       	movw	r22, r24
    42ae:	cd 01       	movw	r24, r26
    42b0:	0e 94 77 2f 	call	0x5eee	; 0x5eee <__mulsf3>
    42b4:	dc 01       	movw	r26, r24
    42b6:	cb 01       	movw	r24, r22
    42b8:	7c 01       	movw	r14, r24
    42ba:	8d 01       	movw	r16, r26
    42bc:	80 91 02 31 	lds	r24, 0x3102	; 0x803102 <LeibnizPi>
    42c0:	90 91 03 31 	lds	r25, 0x3103	; 0x803103 <LeibnizPi+0x1>
    42c4:	a0 91 04 31 	lds	r26, 0x3104	; 0x803104 <LeibnizPi+0x2>
    42c8:	b0 91 05 31 	lds	r27, 0x3105	; 0x803105 <LeibnizPi+0x3>
    42cc:	9c 01       	movw	r18, r24
    42ce:	ad 01       	movw	r20, r26
    42d0:	c8 01       	movw	r24, r16
    42d2:	b7 01       	movw	r22, r14
    42d4:	0e 94 a7 2d 	call	0x5b4e	; 0x5b4e <__addsf3>
    42d8:	dc 01       	movw	r26, r24
    42da:	cb 01       	movw	r24, r22
    42dc:	80 93 02 31 	sts	0x3102, r24	; 0x803102 <LeibnizPi>
    42e0:	90 93 03 31 	sts	0x3103, r25	; 0x803103 <LeibnizPi+0x1>
    42e4:	a0 93 04 31 	sts	0x3104, r26	; 0x803104 <LeibnizPi+0x2>
    42e8:	b0 93 05 31 	sts	0x3105, r27	; 0x803105 <LeibnizPi+0x3>
				NextSign = - NextSign;
    42ec:	8d 81       	ldd	r24, Y+5	; 0x05
    42ee:	9e 81       	ldd	r25, Y+6	; 0x06
    42f0:	af 81       	ldd	r26, Y+7	; 0x07
    42f2:	b8 85       	ldd	r27, Y+8	; 0x08
    42f4:	b0 58       	subi	r27, 0x80	; 128
    42f6:	8d 83       	std	Y+5, r24	; 0x05
    42f8:	9e 83       	std	Y+6, r25	; 0x06
    42fa:	af 83       	std	Y+7, r26	; 0x07
    42fc:	b8 87       	std	Y+8, r27	; 0x08
				CurIterations++;
    42fe:	89 81       	ldd	r24, Y+1	; 0x01
    4300:	9a 81       	ldd	r25, Y+2	; 0x02
    4302:	ab 81       	ldd	r26, Y+3	; 0x03
    4304:	bc 81       	ldd	r27, Y+4	; 0x04
    4306:	01 96       	adiw	r24, 0x01	; 1
    4308:	a1 1d       	adc	r26, r1
    430a:	b1 1d       	adc	r27, r1
    430c:	89 83       	std	Y+1, r24	; 0x01
    430e:	9a 83       	std	Y+2, r25	; 0x02
    4310:	ab 83       	std	Y+3, r26	; 0x03
    4312:	bc 83       	std	Y+4, r27	; 0x04
			}
			if (Reset)
    4314:	80 91 10 31 	lds	r24, 0x3110	; 0x803110 <Reset>
    4318:	88 23       	and	r24, r24
    431a:	a1 f0       	breq	.+40     	; 0x4344 <vPiLeibniz+0x112>
			{
				LeibnizPi = 0;
    431c:	10 92 02 31 	sts	0x3102, r1	; 0x803102 <LeibnizPi>
    4320:	10 92 03 31 	sts	0x3103, r1	; 0x803103 <LeibnizPi+0x1>
    4324:	10 92 04 31 	sts	0x3104, r1	; 0x803104 <LeibnizPi+0x2>
    4328:	10 92 05 31 	sts	0x3105, r1	; 0x803105 <LeibnizPi+0x3>
				CurIterations = 0;
    432c:	19 82       	std	Y+1, r1	; 0x01
    432e:	1a 82       	std	Y+2, r1	; 0x02
    4330:	1b 82       	std	Y+3, r1	; 0x03
    4332:	1c 82       	std	Y+4, r1	; 0x04
				NextSign = 1.0;
    4334:	80 e0       	ldi	r24, 0x00	; 0
    4336:	90 e0       	ldi	r25, 0x00	; 0
    4338:	a0 e8       	ldi	r26, 0x80	; 128
    433a:	bf e3       	ldi	r27, 0x3F	; 63
    433c:	8d 83       	std	Y+5, r24	; 0x05
    433e:	9e 83       	std	Y+6, r25	; 0x06
    4340:	af 83       	std	Y+7, r26	; 0x07
    4342:	b8 87       	std	Y+8, r27	; 0x08
			}
			vTaskDelay(5/portTICK_RATE_MS);
    4344:	65 e0       	ldi	r22, 0x05	; 5
    4346:	70 e0       	ldi	r23, 0x00	; 0
    4348:	80 e0       	ldi	r24, 0x00	; 0
    434a:	90 e0       	ldi	r25, 0x00	; 0
    434c:	0e 94 f7 13 	call	0x27ee	; 0x27ee <vTaskDelay>
		}
    4350:	89 cf       	rjmp	.-238    	; 0x4264 <vPiLeibniz+0x32>

00004352 <vVietaPi>:
}

void vVietaPi(void* pvParameters)											//Approximation of Pi by Vieta Method
{
    4352:	cf 93       	push	r28
    4354:	df 93       	push	r29
    4356:	cd b7       	in	r28, 0x3d	; 61
    4358:	de b7       	in	r29, 0x3e	; 62
    435a:	2a 97       	sbiw	r28, 0x0a	; 10
    435c:	cd bf       	out	0x3d, r28	; 61
    435e:	de bf       	out	0x3e, r29	; 62
    4360:	89 87       	std	Y+9, r24	; 0x09
    4362:	9a 87       	std	Y+10, r25	; 0x0a

	double CurrentApprox = 1;
    4364:	80 e0       	ldi	r24, 0x00	; 0
    4366:	90 e0       	ldi	r25, 0x00	; 0
    4368:	a0 e8       	ldi	r26, 0x80	; 128
    436a:	bf e3       	ldi	r27, 0x3F	; 63
    436c:	89 83       	std	Y+1, r24	; 0x01
    436e:	9a 83       	std	Y+2, r25	; 0x02
    4370:	ab 83       	std	Y+3, r26	; 0x03
    4372:	bc 83       	std	Y+4, r27	; 0x04
	double CurrentSqrt = 0;
    4374:	1d 82       	std	Y+5, r1	; 0x05
    4376:	1e 82       	std	Y+6, r1	; 0x06
    4378:	1f 82       	std	Y+7, r1	; 0x07
    437a:	18 86       	std	Y+8, r1	; 0x08
	
	while(1)
	{
		
		if ( State == RunVieta)
    437c:	80 91 12 31 	lds	r24, 0x3112	; 0x803112 <State>
    4380:	83 30       	cpi	r24, 0x03	; 3
    4382:	09 f0       	breq	.+2      	; 0x4386 <vVietaPi+0x34>
    4384:	44 c0       	rjmp	.+136    	; 0x440e <vVietaPi+0xbc>
		{
			CurrentSqrt = sqrt(2 + CurrentSqrt); 
    4386:	20 e0       	ldi	r18, 0x00	; 0
    4388:	30 e0       	ldi	r19, 0x00	; 0
    438a:	40 e0       	ldi	r20, 0x00	; 0
    438c:	50 e4       	ldi	r21, 0x40	; 64
    438e:	6d 81       	ldd	r22, Y+5	; 0x05
    4390:	7e 81       	ldd	r23, Y+6	; 0x06
    4392:	8f 81       	ldd	r24, Y+7	; 0x07
    4394:	98 85       	ldd	r25, Y+8	; 0x08
    4396:	0e 94 a7 2d 	call	0x5b4e	; 0x5b4e <__addsf3>
    439a:	dc 01       	movw	r26, r24
    439c:	cb 01       	movw	r24, r22
    439e:	bc 01       	movw	r22, r24
    43a0:	cd 01       	movw	r24, r26
    43a2:	0e 94 ea 2f 	call	0x5fd4	; 0x5fd4 <sqrt>
    43a6:	dc 01       	movw	r26, r24
    43a8:	cb 01       	movw	r24, r22
    43aa:	8d 83       	std	Y+5, r24	; 0x05
    43ac:	9e 83       	std	Y+6, r25	; 0x06
    43ae:	af 83       	std	Y+7, r26	; 0x07
    43b0:	b8 87       	std	Y+8, r27	; 0x08
			CurrentApprox = CurrentApprox * (CurrentSqrt / 2.0);
    43b2:	20 e0       	ldi	r18, 0x00	; 0
    43b4:	30 e0       	ldi	r19, 0x00	; 0
    43b6:	40 e0       	ldi	r20, 0x00	; 0
    43b8:	50 e4       	ldi	r21, 0x40	; 64
    43ba:	6d 81       	ldd	r22, Y+5	; 0x05
    43bc:	7e 81       	ldd	r23, Y+6	; 0x06
    43be:	8f 81       	ldd	r24, Y+7	; 0x07
    43c0:	98 85       	ldd	r25, Y+8	; 0x08
    43c2:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <__divsf3>
    43c6:	dc 01       	movw	r26, r24
    43c8:	cb 01       	movw	r24, r22
    43ca:	9c 01       	movw	r18, r24
    43cc:	ad 01       	movw	r20, r26
    43ce:	69 81       	ldd	r22, Y+1	; 0x01
    43d0:	7a 81       	ldd	r23, Y+2	; 0x02
    43d2:	8b 81       	ldd	r24, Y+3	; 0x03
    43d4:	9c 81       	ldd	r25, Y+4	; 0x04
    43d6:	0e 94 77 2f 	call	0x5eee	; 0x5eee <__mulsf3>
    43da:	dc 01       	movw	r26, r24
    43dc:	cb 01       	movw	r24, r22
    43de:	89 83       	std	Y+1, r24	; 0x01
    43e0:	9a 83       	std	Y+2, r25	; 0x02
    43e2:	ab 83       	std	Y+3, r26	; 0x03
    43e4:	bc 83       	std	Y+4, r27	; 0x04
			VietaPi = 2 / CurrentApprox;
    43e6:	29 81       	ldd	r18, Y+1	; 0x01
    43e8:	3a 81       	ldd	r19, Y+2	; 0x02
    43ea:	4b 81       	ldd	r20, Y+3	; 0x03
    43ec:	5c 81       	ldd	r21, Y+4	; 0x04
    43ee:	60 e0       	ldi	r22, 0x00	; 0
    43f0:	70 e0       	ldi	r23, 0x00	; 0
    43f2:	80 e0       	ldi	r24, 0x00	; 0
    43f4:	90 e4       	ldi	r25, 0x40	; 64
    43f6:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <__divsf3>
    43fa:	dc 01       	movw	r26, r24
    43fc:	cb 01       	movw	r24, r22
    43fe:	80 93 06 31 	sts	0x3106, r24	; 0x803106 <VietaPi>
    4402:	90 93 07 31 	sts	0x3107, r25	; 0x803107 <VietaPi+0x1>
    4406:	a0 93 08 31 	sts	0x3108, r26	; 0x803108 <VietaPi+0x2>
    440a:	b0 93 09 31 	sts	0x3109, r27	; 0x803109 <VietaPi+0x3>
		}
		if (Reset)
    440e:	80 91 10 31 	lds	r24, 0x3110	; 0x803110 <Reset>
    4412:	88 23       	and	r24, r24
    4414:	a1 f0       	breq	.+40     	; 0x443e <vVietaPi+0xec>
			{
				CurrentApprox = 1;
    4416:	80 e0       	ldi	r24, 0x00	; 0
    4418:	90 e0       	ldi	r25, 0x00	; 0
    441a:	a0 e8       	ldi	r26, 0x80	; 128
    441c:	bf e3       	ldi	r27, 0x3F	; 63
    441e:	89 83       	std	Y+1, r24	; 0x01
    4420:	9a 83       	std	Y+2, r25	; 0x02
    4422:	ab 83       	std	Y+3, r26	; 0x03
    4424:	bc 83       	std	Y+4, r27	; 0x04
				CurrentSqrt = 0;
    4426:	1d 82       	std	Y+5, r1	; 0x05
    4428:	1e 82       	std	Y+6, r1	; 0x06
    442a:	1f 82       	std	Y+7, r1	; 0x07
    442c:	18 86       	std	Y+8, r1	; 0x08
				VietaPi = 0;
    442e:	10 92 06 31 	sts	0x3106, r1	; 0x803106 <VietaPi>
    4432:	10 92 07 31 	sts	0x3107, r1	; 0x803107 <VietaPi+0x1>
    4436:	10 92 08 31 	sts	0x3108, r1	; 0x803108 <VietaPi+0x2>
    443a:	10 92 09 31 	sts	0x3109, r1	; 0x803109 <VietaPi+0x3>
			}
		vTaskDelay(5/portTICK_RATE_MS);
    443e:	65 e0       	ldi	r22, 0x05	; 5
    4440:	70 e0       	ldi	r23, 0x00	; 0
    4442:	80 e0       	ldi	r24, 0x00	; 0
    4444:	90 e0       	ldi	r25, 0x00	; 0
    4446:	0e 94 f7 13 	call	0x27ee	; 0x27ee <vTaskDelay>
	}
    444a:	98 cf       	rjmp	.-208    	; 0x437c <vVietaPi+0x2a>

0000444c <vCompare>:
}


void vCompare(void* pvParameters)														//Comparing Approximated Pi with Reference
{
    444c:	cf 93       	push	r28
    444e:	df 93       	push	r29
    4450:	cd b7       	in	r28, 0x3d	; 61
    4452:	de b7       	in	r29, 0x3e	; 62
    4454:	2e 97       	sbiw	r28, 0x0e	; 14
    4456:	cd bf       	out	0x3d, r28	; 61
    4458:	de bf       	out	0x3e, r29	; 62
    445a:	8d 87       	std	Y+13, r24	; 0x0d
    445c:	9e 87       	std	Y+14, r25	; 0x0e
	uint32_t RoundVietaPi = 0;
    445e:	19 82       	std	Y+1, r1	; 0x01
    4460:	1a 82       	std	Y+2, r1	; 0x02
    4462:	1b 82       	std	Y+3, r1	; 0x03
    4464:	1c 82       	std	Y+4, r1	; 0x04
	uint32_t RoundLeibPi = 0;
    4466:	1d 82       	std	Y+5, r1	; 0x05
    4468:	1e 82       	std	Y+6, r1	; 0x06
    446a:	1f 82       	std	Y+7, r1	; 0x07
    446c:	18 86       	std	Y+8, r1	; 0x08
	uint32_t RoundRefPi = 0;
    446e:	19 86       	std	Y+9, r1	; 0x09
    4470:	1a 86       	std	Y+10, r1	; 0x0a
    4472:	1b 86       	std	Y+11, r1	; 0x0b
    4474:	1c 86       	std	Y+12, r1	; 0x0c
	while(1)
	{
		RoundVietaPi = (uint32_t) (VietaPi * 10e4);
    4476:	80 91 06 31 	lds	r24, 0x3106	; 0x803106 <VietaPi>
    447a:	90 91 07 31 	lds	r25, 0x3107	; 0x803107 <VietaPi+0x1>
    447e:	a0 91 08 31 	lds	r26, 0x3108	; 0x803108 <VietaPi+0x2>
    4482:	b0 91 09 31 	lds	r27, 0x3109	; 0x803109 <VietaPi+0x3>
    4486:	20 e0       	ldi	r18, 0x00	; 0
    4488:	30 e5       	ldi	r19, 0x50	; 80
    448a:	43 ec       	ldi	r20, 0xC3	; 195
    448c:	57 e4       	ldi	r21, 0x47	; 71
    448e:	bc 01       	movw	r22, r24
    4490:	cd 01       	movw	r24, r26
    4492:	0e 94 77 2f 	call	0x5eee	; 0x5eee <__mulsf3>
    4496:	dc 01       	movw	r26, r24
    4498:	cb 01       	movw	r24, r22
    449a:	bc 01       	movw	r22, r24
    449c:	cd 01       	movw	r24, r26
    449e:	0e 94 91 2e 	call	0x5d22	; 0x5d22 <__fixunssfsi>
    44a2:	dc 01       	movw	r26, r24
    44a4:	cb 01       	movw	r24, r22
    44a6:	89 83       	std	Y+1, r24	; 0x01
    44a8:	9a 83       	std	Y+2, r25	; 0x02
    44aa:	ab 83       	std	Y+3, r26	; 0x03
    44ac:	bc 83       	std	Y+4, r27	; 0x04
		RoundLeibPi = (uint32_t) (LeibnizPi * 10e4);
    44ae:	80 91 02 31 	lds	r24, 0x3102	; 0x803102 <LeibnizPi>
    44b2:	90 91 03 31 	lds	r25, 0x3103	; 0x803103 <LeibnizPi+0x1>
    44b6:	a0 91 04 31 	lds	r26, 0x3104	; 0x803104 <LeibnizPi+0x2>
    44ba:	b0 91 05 31 	lds	r27, 0x3105	; 0x803105 <LeibnizPi+0x3>
    44be:	20 e0       	ldi	r18, 0x00	; 0
    44c0:	30 e5       	ldi	r19, 0x50	; 80
    44c2:	43 ec       	ldi	r20, 0xC3	; 195
    44c4:	57 e4       	ldi	r21, 0x47	; 71
    44c6:	bc 01       	movw	r22, r24
    44c8:	cd 01       	movw	r24, r26
    44ca:	0e 94 77 2f 	call	0x5eee	; 0x5eee <__mulsf3>
    44ce:	dc 01       	movw	r26, r24
    44d0:	cb 01       	movw	r24, r22
    44d2:	bc 01       	movw	r22, r24
    44d4:	cd 01       	movw	r24, r26
    44d6:	0e 94 91 2e 	call	0x5d22	; 0x5d22 <__fixunssfsi>
    44da:	dc 01       	movw	r26, r24
    44dc:	cb 01       	movw	r24, r22
    44de:	8d 83       	std	Y+5, r24	; 0x05
    44e0:	9e 83       	std	Y+6, r25	; 0x06
    44e2:	af 83       	std	Y+7, r26	; 0x07
    44e4:	b8 87       	std	Y+8, r27	; 0x08
		RoundRefPi = (uint32_t) (RefPi * 10e4);
    44e6:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    44ea:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    44ee:	a0 91 02 20 	lds	r26, 0x2002	; 0x802002 <__DATA_REGION_ORIGIN__+0x2>
    44f2:	b0 91 03 20 	lds	r27, 0x2003	; 0x802003 <__DATA_REGION_ORIGIN__+0x3>
    44f6:	20 e0       	ldi	r18, 0x00	; 0
    44f8:	30 e5       	ldi	r19, 0x50	; 80
    44fa:	43 ec       	ldi	r20, 0xC3	; 195
    44fc:	57 e4       	ldi	r21, 0x47	; 71
    44fe:	bc 01       	movw	r22, r24
    4500:	cd 01       	movw	r24, r26
    4502:	0e 94 77 2f 	call	0x5eee	; 0x5eee <__mulsf3>
    4506:	dc 01       	movw	r26, r24
    4508:	cb 01       	movw	r24, r22
    450a:	bc 01       	movw	r22, r24
    450c:	cd 01       	movw	r24, r26
    450e:	0e 94 91 2e 	call	0x5d22	; 0x5d22 <__fixunssfsi>
    4512:	dc 01       	movw	r26, r24
    4514:	cb 01       	movw	r24, r22
    4516:	89 87       	std	Y+9, r24	; 0x09
    4518:	9a 87       	std	Y+10, r25	; 0x0a
    451a:	ab 87       	std	Y+11, r26	; 0x0b
    451c:	bc 87       	std	Y+12, r27	; 0x0c
		if (TimerRuning && (( RoundRefPi == RoundLeibPi) || ( RoundRefPi == RoundVietaPi)))
    451e:	80 91 11 31 	lds	r24, 0x3111	; 0x803111 <TimerRuning>
    4522:	88 23       	and	r24, r24
    4524:	e1 f0       	breq	.+56     	; 0x455e <vCompare+0x112>
    4526:	29 85       	ldd	r18, Y+9	; 0x09
    4528:	3a 85       	ldd	r19, Y+10	; 0x0a
    452a:	4b 85       	ldd	r20, Y+11	; 0x0b
    452c:	5c 85       	ldd	r21, Y+12	; 0x0c
    452e:	8d 81       	ldd	r24, Y+5	; 0x05
    4530:	9e 81       	ldd	r25, Y+6	; 0x06
    4532:	af 81       	ldd	r26, Y+7	; 0x07
    4534:	b8 85       	ldd	r27, Y+8	; 0x08
    4536:	28 17       	cp	r18, r24
    4538:	39 07       	cpc	r19, r25
    453a:	4a 07       	cpc	r20, r26
    453c:	5b 07       	cpc	r21, r27
    453e:	69 f0       	breq	.+26     	; 0x455a <vCompare+0x10e>
    4540:	29 85       	ldd	r18, Y+9	; 0x09
    4542:	3a 85       	ldd	r19, Y+10	; 0x0a
    4544:	4b 85       	ldd	r20, Y+11	; 0x0b
    4546:	5c 85       	ldd	r21, Y+12	; 0x0c
    4548:	89 81       	ldd	r24, Y+1	; 0x01
    454a:	9a 81       	ldd	r25, Y+2	; 0x02
    454c:	ab 81       	ldd	r26, Y+3	; 0x03
    454e:	bc 81       	ldd	r27, Y+4	; 0x04
    4550:	28 17       	cp	r18, r24
    4552:	39 07       	cpc	r19, r25
    4554:	4a 07       	cpc	r20, r26
    4556:	5b 07       	cpc	r21, r27
    4558:	11 f4       	brne	.+4      	; 0x455e <vCompare+0x112>
		{
			TimerRuning = 0;
    455a:	10 92 11 31 	sts	0x3111, r1	; 0x803111 <TimerRuning>
		}
		vTaskDelay(10/portTICK_RATE_MS);
    455e:	6a e0       	ldi	r22, 0x0A	; 10
    4560:	70 e0       	ldi	r23, 0x00	; 0
    4562:	80 e0       	ldi	r24, 0x00	; 0
    4564:	90 e0       	ldi	r25, 0x00	; 0
    4566:	0e 94 f7 13 	call	0x27ee	; 0x27ee <vTaskDelay>
	}
    456a:	85 cf       	rjmp	.-246    	; 0x4476 <vCompare+0x2a>

0000456c <vDisplaytask>:
}



void vDisplaytask(void* pvParameters)									//Display Task
{
    456c:	cf 93       	push	r28
    456e:	df 93       	push	r29
    4570:	cd b7       	in	r28, 0x3d	; 61
    4572:	de b7       	in	r29, 0x3e	; 62
    4574:	c6 55       	subi	r28, 0x56	; 86
    4576:	d1 09       	sbc	r29, r1
    4578:	cd bf       	out	0x3d, r28	; 61
    457a:	de bf       	out	0x3e, r29	; 62
    457c:	9e 01       	movw	r18, r28
    457e:	2b 5a       	subi	r18, 0xAB	; 171
    4580:	3f 4f       	sbci	r19, 0xFF	; 255
    4582:	f9 01       	movw	r30, r18
    4584:	80 83       	st	Z, r24
    4586:	91 83       	std	Z+1, r25	; 0x01
	TickType_t lasttime = xTaskGetTickCount();
    4588:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <xTaskGetTickCount>
    458c:	dc 01       	movw	r26, r24
    458e:	cb 01       	movw	r24, r22
    4590:	89 83       	std	Y+1, r24	; 0x01
    4592:	9a 83       	std	Y+2, r25	; 0x02
    4594:	ab 83       	std	Y+3, r26	; 0x03
    4596:	bc 83       	std	Y+4, r27	; 0x04
	char TitleString[20];
	char TimeString[20];
	
	while(1)
	{
		switch(State)
    4598:	80 91 12 31 	lds	r24, 0x3112	; 0x803112 <State>
    459c:	88 2f       	mov	r24, r24
    459e:	90 e0       	ldi	r25, 0x00	; 0
    45a0:	81 30       	cpi	r24, 0x01	; 1
    45a2:	91 05       	cpc	r25, r1
    45a4:	c9 f1       	breq	.+114    	; 0x4618 <vDisplaytask+0xac>
    45a6:	82 30       	cpi	r24, 0x02	; 2
    45a8:	91 05       	cpc	r25, r1
    45aa:	1c f4       	brge	.+6      	; 0x45b2 <vDisplaytask+0x46>
    45ac:	89 2b       	or	r24, r25
    45ae:	39 f0       	breq	.+14     	; 0x45be <vDisplaytask+0x52>
    45b0:	60 c0       	rjmp	.+192    	; 0x4672 <vDisplaytask+0x106>
    45b2:	82 30       	cpi	r24, 0x02	; 2
    45b4:	91 05       	cpc	r25, r1
    45b6:	19 f0       	breq	.+6      	; 0x45be <vDisplaytask+0x52>
    45b8:	03 97       	sbiw	r24, 0x03	; 3
    45ba:	71 f1       	breq	.+92     	; 0x4618 <vDisplaytask+0xac>
    45bc:	5a c0       	rjmp	.+180    	; 0x4672 <vDisplaytask+0x106>
		{
			
		case RunLeibniz:	
		case StopLeibniz:
			sprintf(&TitleString[0], "Leibniz Approx:");	
    45be:	ce 01       	movw	r24, r28
    45c0:	8d 96       	adiw	r24, 0x2d	; 45
    45c2:	20 e1       	ldi	r18, 0x10	; 16
    45c4:	e1 e6       	ldi	r30, 0x61	; 97
    45c6:	f0 e2       	ldi	r31, 0x20	; 32
    45c8:	dc 01       	movw	r26, r24
    45ca:	01 90       	ld	r0, Z+
    45cc:	0d 92       	st	X+, r0
    45ce:	2a 95       	dec	r18
    45d0:	e1 f7       	brne	.-8      	; 0x45ca <vDisplaytask+0x5e>
			sprintf(&ApproxPiString[0], "ApproxPI: %.8f", LeibnizPi);
    45d2:	80 91 02 31 	lds	r24, 0x3102	; 0x803102 <LeibnizPi>
    45d6:	90 91 03 31 	lds	r25, 0x3103	; 0x803103 <LeibnizPi+0x1>
    45da:	a0 91 04 31 	lds	r26, 0x3104	; 0x803104 <LeibnizPi+0x2>
    45de:	b0 91 05 31 	lds	r27, 0x3105	; 0x803105 <LeibnizPi+0x3>
    45e2:	2b 2f       	mov	r18, r27
    45e4:	2f 93       	push	r18
    45e6:	2a 2f       	mov	r18, r26
    45e8:	2f 93       	push	r18
    45ea:	29 2f       	mov	r18, r25
    45ec:	2f 93       	push	r18
    45ee:	8f 93       	push	r24
    45f0:	81 e7       	ldi	r24, 0x71	; 113
    45f2:	90 e2       	ldi	r25, 0x20	; 32
    45f4:	89 2f       	mov	r24, r25
    45f6:	8f 93       	push	r24
    45f8:	81 e7       	ldi	r24, 0x71	; 113
    45fa:	90 e2       	ldi	r25, 0x20	; 32
    45fc:	8f 93       	push	r24
    45fe:	ce 01       	movw	r24, r28
    4600:	05 96       	adiw	r24, 0x05	; 5
    4602:	29 2f       	mov	r18, r25
    4604:	2f 93       	push	r18
    4606:	8f 93       	push	r24
    4608:	0e 94 90 30 	call	0x6120	; 0x6120 <sprintf>
    460c:	8d b7       	in	r24, 0x3d	; 61
    460e:	9e b7       	in	r25, 0x3e	; 62
    4610:	08 96       	adiw	r24, 0x08	; 8
    4612:	cd bf       	out	0x3d, r28	; 61
    4614:	de bf       	out	0x3e, r29	; 62
			break;
    4616:	30 c0       	rjmp	.+96     	; 0x4678 <vDisplaytask+0x10c>
		case RunVieta:
		case StopVieta:
			sprintf(&TitleString[0], "Vieta Approx:  ");
    4618:	ce 01       	movw	r24, r28
    461a:	8d 96       	adiw	r24, 0x2d	; 45
    461c:	20 e1       	ldi	r18, 0x10	; 16
    461e:	e0 e8       	ldi	r30, 0x80	; 128
    4620:	f0 e2       	ldi	r31, 0x20	; 32
    4622:	dc 01       	movw	r26, r24
    4624:	01 90       	ld	r0, Z+
    4626:	0d 92       	st	X+, r0
    4628:	2a 95       	dec	r18
    462a:	e1 f7       	brne	.-8      	; 0x4624 <vDisplaytask+0xb8>
			sprintf(&ApproxPiString[0], "ApproxPI: %.8f", VietaPi);
    462c:	80 91 06 31 	lds	r24, 0x3106	; 0x803106 <VietaPi>
    4630:	90 91 07 31 	lds	r25, 0x3107	; 0x803107 <VietaPi+0x1>
    4634:	a0 91 08 31 	lds	r26, 0x3108	; 0x803108 <VietaPi+0x2>
    4638:	b0 91 09 31 	lds	r27, 0x3109	; 0x803109 <VietaPi+0x3>
    463c:	2b 2f       	mov	r18, r27
    463e:	2f 93       	push	r18
    4640:	2a 2f       	mov	r18, r26
    4642:	2f 93       	push	r18
    4644:	29 2f       	mov	r18, r25
    4646:	2f 93       	push	r18
    4648:	8f 93       	push	r24
    464a:	81 e7       	ldi	r24, 0x71	; 113
    464c:	90 e2       	ldi	r25, 0x20	; 32
    464e:	89 2f       	mov	r24, r25
    4650:	8f 93       	push	r24
    4652:	81 e7       	ldi	r24, 0x71	; 113
    4654:	90 e2       	ldi	r25, 0x20	; 32
    4656:	8f 93       	push	r24
    4658:	ce 01       	movw	r24, r28
    465a:	05 96       	adiw	r24, 0x05	; 5
    465c:	29 2f       	mov	r18, r25
    465e:	2f 93       	push	r18
    4660:	8f 93       	push	r24
    4662:	0e 94 90 30 	call	0x6120	; 0x6120 <sprintf>
    4666:	ed b7       	in	r30, 0x3d	; 61
    4668:	fe b7       	in	r31, 0x3e	; 62
    466a:	38 96       	adiw	r30, 0x08	; 8
    466c:	cd bf       	out	0x3d, r28	; 61
    466e:	de bf       	out	0x3e, r29	; 62
			break;
    4670:	03 c0       	rjmp	.+6      	; 0x4678 <vDisplaytask+0x10c>
		default:
			State = StopLeibniz;
    4672:	10 92 12 31 	sts	0x3112, r1	; 0x803112 <State>
			break;
    4676:	00 00       	nop
		}
	//sprintf(&RefPiString[0], "Refer PI: %.8f", RefPi);
	sprintf(&RefPiString[0], "Refer PI: %.8f", RefPi);
    4678:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    467c:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    4680:	a0 91 02 20 	lds	r26, 0x2002	; 0x802002 <__DATA_REGION_ORIGIN__+0x2>
    4684:	b0 91 03 20 	lds	r27, 0x2003	; 0x802003 <__DATA_REGION_ORIGIN__+0x3>
    4688:	2b 2f       	mov	r18, r27
    468a:	2f 93       	push	r18
    468c:	2a 2f       	mov	r18, r26
    468e:	2f 93       	push	r18
    4690:	29 2f       	mov	r18, r25
    4692:	2f 93       	push	r18
    4694:	8f 93       	push	r24
    4696:	80 e9       	ldi	r24, 0x90	; 144
    4698:	90 e2       	ldi	r25, 0x20	; 32
    469a:	89 2f       	mov	r24, r25
    469c:	8f 93       	push	r24
    469e:	80 e9       	ldi	r24, 0x90	; 144
    46a0:	90 e2       	ldi	r25, 0x20	; 32
    46a2:	8f 93       	push	r24
    46a4:	ce 01       	movw	r24, r28
    46a6:	49 96       	adiw	r24, 0x19	; 25
    46a8:	29 2f       	mov	r18, r25
    46aa:	2f 93       	push	r18
    46ac:	8f 93       	push	r24
    46ae:	0e 94 90 30 	call	0x6120	; 0x6120 <sprintf>
    46b2:	8d b7       	in	r24, 0x3d	; 61
    46b4:	9e b7       	in	r25, 0x3e	; 62
    46b6:	08 96       	adiw	r24, 0x08	; 8
    46b8:	cd bf       	out	0x3d, r28	; 61
    46ba:	de bf       	out	0x3e, r29	; 62
	sprintf(&TimeString[0], "Time: %.2i:%.2i:%.2i", GlobalMin, GlobalSec, GlobalHunSec);
    46bc:	40 91 0e 31 	lds	r20, 0x310E	; 0x80310e <GlobalHunSec>
    46c0:	50 91 0f 31 	lds	r21, 0x310F	; 0x80310f <GlobalHunSec+0x1>
    46c4:	20 91 0a 31 	lds	r18, 0x310A	; 0x80310a <GlobalSec>
    46c8:	30 91 0b 31 	lds	r19, 0x310B	; 0x80310b <GlobalSec+0x1>
    46cc:	80 91 0c 31 	lds	r24, 0x310C	; 0x80310c <GlobalMin>
    46d0:	90 91 0d 31 	lds	r25, 0x310D	; 0x80310d <GlobalMin+0x1>
    46d4:	65 2f       	mov	r22, r21
    46d6:	6f 93       	push	r22
    46d8:	4f 93       	push	r20
    46da:	43 2f       	mov	r20, r19
    46dc:	4f 93       	push	r20
    46de:	2f 93       	push	r18
    46e0:	29 2f       	mov	r18, r25
    46e2:	2f 93       	push	r18
    46e4:	8f 93       	push	r24
    46e6:	8f e9       	ldi	r24, 0x9F	; 159
    46e8:	90 e2       	ldi	r25, 0x20	; 32
    46ea:	89 2f       	mov	r24, r25
    46ec:	8f 93       	push	r24
    46ee:	8f e9       	ldi	r24, 0x9F	; 159
    46f0:	90 e2       	ldi	r25, 0x20	; 32
    46f2:	8f 93       	push	r24
    46f4:	ce 01       	movw	r24, r28
    46f6:	8f 5b       	subi	r24, 0xBF	; 191
    46f8:	9f 4f       	sbci	r25, 0xFF	; 255
    46fa:	29 2f       	mov	r18, r25
    46fc:	2f 93       	push	r18
    46fe:	8f 93       	push	r24
    4700:	0e 94 90 30 	call	0x6120	; 0x6120 <sprintf>
    4704:	ed b7       	in	r30, 0x3d	; 61
    4706:	fe b7       	in	r31, 0x3e	; 62
    4708:	3a 96       	adiw	r30, 0x0a	; 10
    470a:	cd bf       	out	0x3d, r28	; 61
    470c:	de bf       	out	0x3e, r29	; 62
	vDisplayWriteStringAtPos(0,0, "%s", TitleString);	
    470e:	ce 01       	movw	r24, r28
    4710:	8d 96       	adiw	r24, 0x2d	; 45
    4712:	29 2f       	mov	r18, r25
    4714:	2f 93       	push	r18
    4716:	8f 93       	push	r24
    4718:	84 eb       	ldi	r24, 0xB4	; 180
    471a:	90 e2       	ldi	r25, 0x20	; 32
    471c:	89 2f       	mov	r24, r25
    471e:	8f 93       	push	r24
    4720:	84 eb       	ldi	r24, 0xB4	; 180
    4722:	90 e2       	ldi	r25, 0x20	; 32
    4724:	8f 93       	push	r24
    4726:	1f 92       	push	r1
    4728:	1f 92       	push	r1
    472a:	1f 92       	push	r1
    472c:	1f 92       	push	r1
    472e:	0e 94 4d 28 	call	0x509a	; 0x509a <vDisplayWriteStringAtPos>
    4732:	8d b7       	in	r24, 0x3d	; 61
    4734:	9e b7       	in	r25, 0x3e	; 62
    4736:	08 96       	adiw	r24, 0x08	; 8
    4738:	cd bf       	out	0x3d, r28	; 61
    473a:	de bf       	out	0x3e, r29	; 62
	vDisplayWriteStringAtPos(1,0, "%s", ApproxPiString);	
    473c:	ce 01       	movw	r24, r28
    473e:	05 96       	adiw	r24, 0x05	; 5
    4740:	29 2f       	mov	r18, r25
    4742:	2f 93       	push	r18
    4744:	8f 93       	push	r24
    4746:	84 eb       	ldi	r24, 0xB4	; 180
    4748:	90 e2       	ldi	r25, 0x20	; 32
    474a:	89 2f       	mov	r24, r25
    474c:	8f 93       	push	r24
    474e:	84 eb       	ldi	r24, 0xB4	; 180
    4750:	90 e2       	ldi	r25, 0x20	; 32
    4752:	8f 93       	push	r24
    4754:	1f 92       	push	r1
    4756:	1f 92       	push	r1
    4758:	1f 92       	push	r1
    475a:	81 e0       	ldi	r24, 0x01	; 1
    475c:	8f 93       	push	r24
    475e:	0e 94 4d 28 	call	0x509a	; 0x509a <vDisplayWriteStringAtPos>
    4762:	ed b7       	in	r30, 0x3d	; 61
    4764:	fe b7       	in	r31, 0x3e	; 62
    4766:	38 96       	adiw	r30, 0x08	; 8
    4768:	cd bf       	out	0x3d, r28	; 61
    476a:	de bf       	out	0x3e, r29	; 62
	vDisplayWriteStringAtPos(2,0, "%s", RefPiString);	
    476c:	ce 01       	movw	r24, r28
    476e:	49 96       	adiw	r24, 0x19	; 25
    4770:	29 2f       	mov	r18, r25
    4772:	2f 93       	push	r18
    4774:	8f 93       	push	r24
    4776:	84 eb       	ldi	r24, 0xB4	; 180
    4778:	90 e2       	ldi	r25, 0x20	; 32
    477a:	89 2f       	mov	r24, r25
    477c:	8f 93       	push	r24
    477e:	84 eb       	ldi	r24, 0xB4	; 180
    4780:	90 e2       	ldi	r25, 0x20	; 32
    4782:	8f 93       	push	r24
    4784:	1f 92       	push	r1
    4786:	1f 92       	push	r1
    4788:	1f 92       	push	r1
    478a:	82 e0       	ldi	r24, 0x02	; 2
    478c:	8f 93       	push	r24
    478e:	0e 94 4d 28 	call	0x509a	; 0x509a <vDisplayWriteStringAtPos>
    4792:	8d b7       	in	r24, 0x3d	; 61
    4794:	9e b7       	in	r25, 0x3e	; 62
    4796:	08 96       	adiw	r24, 0x08	; 8
    4798:	cd bf       	out	0x3d, r28	; 61
    479a:	de bf       	out	0x3e, r29	; 62
	vDisplayWriteStringAtPos(3,0, "%s", TimeString);
    479c:	ce 01       	movw	r24, r28
    479e:	8f 5b       	subi	r24, 0xBF	; 191
    47a0:	9f 4f       	sbci	r25, 0xFF	; 255
    47a2:	29 2f       	mov	r18, r25
    47a4:	2f 93       	push	r18
    47a6:	8f 93       	push	r24
    47a8:	84 eb       	ldi	r24, 0xB4	; 180
    47aa:	90 e2       	ldi	r25, 0x20	; 32
    47ac:	89 2f       	mov	r24, r25
    47ae:	8f 93       	push	r24
    47b0:	84 eb       	ldi	r24, 0xB4	; 180
    47b2:	90 e2       	ldi	r25, 0x20	; 32
    47b4:	8f 93       	push	r24
    47b6:	1f 92       	push	r1
    47b8:	1f 92       	push	r1
    47ba:	1f 92       	push	r1
    47bc:	83 e0       	ldi	r24, 0x03	; 3
    47be:	8f 93       	push	r24
    47c0:	0e 94 4d 28 	call	0x509a	; 0x509a <vDisplayWriteStringAtPos>
    47c4:	ed b7       	in	r30, 0x3d	; 61
    47c6:	fe b7       	in	r31, 0x3e	; 62
    47c8:	38 96       	adiw	r30, 0x08	; 8
    47ca:	cd bf       	out	0x3d, r28	; 61
    47cc:	de bf       	out	0x3e, r29	; 62
	vTaskDelayUntil(&lasttime, 500/portTICK_RATE_MS);
    47ce:	44 ef       	ldi	r20, 0xF4	; 244
    47d0:	51 e0       	ldi	r21, 0x01	; 1
    47d2:	60 e0       	ldi	r22, 0x00	; 0
    47d4:	70 e0       	ldi	r23, 0x00	; 0
    47d6:	ce 01       	movw	r24, r28
    47d8:	01 96       	adiw	r24, 0x01	; 1
    47da:	0e 94 3f 13 	call	0x267e	; 0x267e <vTaskDelayUntil>
	}
    47de:	dc ce       	rjmp	.-584    	; 0x4598 <vDisplaytask+0x2c>

000047e0 <controllerTask>:

}


void controllerTask(void* pvParameters) {
    47e0:	cf 93       	push	r28
    47e2:	df 93       	push	r29
    47e4:	1f 92       	push	r1
    47e6:	1f 92       	push	r1
    47e8:	cd b7       	in	r28, 0x3d	; 61
    47ea:	de b7       	in	r29, 0x3e	; 62
    47ec:	89 83       	std	Y+1, r24	; 0x01
    47ee:	9a 83       	std	Y+2, r25	; 0x02
	initButtons();
    47f0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <initButtons>
	for(;;) {
		updateButtons();
    47f4:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <updateButtons>
		if(getButtonPress(BUTTON1) == SHORT_PRESSED) {
    47f8:	80 e0       	ldi	r24, 0x00	; 0
    47fa:	0e 94 5e 02 	call	0x4bc	; 0x4bc <getButtonPress>
    47fe:	81 30       	cpi	r24, 0x01	; 1
    4800:	a9 f4       	brne	.+42     	; 0x482c <controllerTask+0x4c>
			if (State == StopLeibniz)
    4802:	80 91 12 31 	lds	r24, 0x3112	; 0x803112 <State>
    4806:	88 23       	and	r24, r24
    4808:	39 f4       	brne	.+14     	; 0x4818 <controllerTask+0x38>
			{
				State = RunLeibniz;
    480a:	82 e0       	ldi	r24, 0x02	; 2
    480c:	80 93 12 31 	sts	0x3112, r24	; 0x803112 <State>
				TimerRuning = 1;
    4810:	81 e0       	ldi	r24, 0x01	; 1
    4812:	80 93 11 31 	sts	0x3111, r24	; 0x803111 <TimerRuning>
    4816:	0a c0       	rjmp	.+20     	; 0x482c <controllerTask+0x4c>
			}
			else if (State == StopVieta)
    4818:	80 91 12 31 	lds	r24, 0x3112	; 0x803112 <State>
    481c:	81 30       	cpi	r24, 0x01	; 1
    481e:	31 f4       	brne	.+12     	; 0x482c <controllerTask+0x4c>
			{
				State = RunVieta;
    4820:	83 e0       	ldi	r24, 0x03	; 3
    4822:	80 93 12 31 	sts	0x3112, r24	; 0x803112 <State>
				TimerRuning = 1;
    4826:	81 e0       	ldi	r24, 0x01	; 1
    4828:	80 93 11 31 	sts	0x3111, r24	; 0x803111 <TimerRuning>
			}
		}
		if(getButtonPress(BUTTON2) == SHORT_PRESSED) {
    482c:	81 e0       	ldi	r24, 0x01	; 1
    482e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <getButtonPress>
    4832:	81 30       	cpi	r24, 0x01	; 1
    4834:	91 f4       	brne	.+36     	; 0x485a <controllerTask+0x7a>
			if (State == RunLeibniz)
    4836:	80 91 12 31 	lds	r24, 0x3112	; 0x803112 <State>
    483a:	82 30       	cpi	r24, 0x02	; 2
    483c:	29 f4       	brne	.+10     	; 0x4848 <controllerTask+0x68>
			{
				State = StopLeibniz;
    483e:	10 92 12 31 	sts	0x3112, r1	; 0x803112 <State>
				TimerRuning = 0;
    4842:	10 92 11 31 	sts	0x3111, r1	; 0x803111 <TimerRuning>
    4846:	09 c0       	rjmp	.+18     	; 0x485a <controllerTask+0x7a>
			}
			else if (State == RunVieta)
    4848:	80 91 12 31 	lds	r24, 0x3112	; 0x803112 <State>
    484c:	83 30       	cpi	r24, 0x03	; 3
    484e:	29 f4       	brne	.+10     	; 0x485a <controllerTask+0x7a>
			{
				State = StopVieta;	
    4850:	81 e0       	ldi	r24, 0x01	; 1
    4852:	80 93 12 31 	sts	0x3112, r24	; 0x803112 <State>
				TimerRuning = 0;
    4856:	10 92 11 31 	sts	0x3111, r1	; 0x803111 <TimerRuning>
			}
		}
		if(getButtonPress(BUTTON3) == SHORT_PRESSED) {
    485a:	82 e0       	ldi	r24, 0x02	; 2
    485c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <getButtonPress>
    4860:	81 30       	cpi	r24, 0x01	; 1
    4862:	89 f4       	brne	.+34     	; 0x4886 <controllerTask+0xa6>
			Reset = 1;
    4864:	81 e0       	ldi	r24, 0x01	; 1
    4866:	80 93 10 31 	sts	0x3110, r24	; 0x803110 <Reset>
			if (State == RunLeibniz)
    486a:	80 91 12 31 	lds	r24, 0x3112	; 0x803112 <State>
    486e:	82 30       	cpi	r24, 0x02	; 2
    4870:	19 f4       	brne	.+6      	; 0x4878 <controllerTask+0x98>
			{
				State = StopLeibniz;
    4872:	10 92 12 31 	sts	0x3112, r1	; 0x803112 <State>
    4876:	07 c0       	rjmp	.+14     	; 0x4886 <controllerTask+0xa6>
			}
			else if (State == RunVieta)
    4878:	80 91 12 31 	lds	r24, 0x3112	; 0x803112 <State>
    487c:	83 30       	cpi	r24, 0x03	; 3
    487e:	19 f4       	brne	.+6      	; 0x4886 <controllerTask+0xa6>
			{
				State = StopVieta;	
    4880:	81 e0       	ldi	r24, 0x01	; 1
    4882:	80 93 12 31 	sts	0x3112, r24	; 0x803112 <State>
			}
		}
		if(getButtonPress(BUTTON4) == SHORT_PRESSED) {
    4886:	83 e0       	ldi	r24, 0x03	; 3
    4888:	0e 94 5e 02 	call	0x4bc	; 0x4bc <getButtonPress>
    488c:	81 30       	cpi	r24, 0x01	; 1
    488e:	f1 f4       	brne	.+60     	; 0x48cc <controllerTask+0xec>
			if(State == StopLeibniz)
    4890:	80 91 12 31 	lds	r24, 0x3112	; 0x803112 <State>
    4894:	88 23       	and	r24, r24
    4896:	21 f4       	brne	.+8      	; 0x48a0 <controllerTask+0xc0>
			{
				State = StopVieta;
    4898:	81 e0       	ldi	r24, 0x01	; 1
    489a:	80 93 12 31 	sts	0x3112, r24	; 0x803112 <State>
    489e:	16 c0       	rjmp	.+44     	; 0x48cc <controllerTask+0xec>
			}
			else if (State == StopVieta)
    48a0:	80 91 12 31 	lds	r24, 0x3112	; 0x803112 <State>
    48a4:	81 30       	cpi	r24, 0x01	; 1
    48a6:	19 f4       	brne	.+6      	; 0x48ae <controllerTask+0xce>
			{
				State = StopLeibniz;
    48a8:	10 92 12 31 	sts	0x3112, r1	; 0x803112 <State>
    48ac:	0f c0       	rjmp	.+30     	; 0x48cc <controllerTask+0xec>
			}
			else if(State == RunLeibniz)
    48ae:	80 91 12 31 	lds	r24, 0x3112	; 0x803112 <State>
    48b2:	82 30       	cpi	r24, 0x02	; 2
    48b4:	21 f4       	brne	.+8      	; 0x48be <controllerTask+0xde>
			{
				State = RunVieta;
    48b6:	83 e0       	ldi	r24, 0x03	; 3
    48b8:	80 93 12 31 	sts	0x3112, r24	; 0x803112 <State>
    48bc:	07 c0       	rjmp	.+14     	; 0x48cc <controllerTask+0xec>
			}
			else if (State == RunVieta)
    48be:	80 91 12 31 	lds	r24, 0x3112	; 0x803112 <State>
    48c2:	83 30       	cpi	r24, 0x03	; 3
    48c4:	19 f4       	brne	.+6      	; 0x48cc <controllerTask+0xec>
			{
				State = RunLeibniz;
    48c6:	82 e0       	ldi	r24, 0x02	; 2
    48c8:	80 93 12 31 	sts	0x3112, r24	; 0x803112 <State>
			}	
		}
		vTaskDelay(10/portTICK_RATE_MS);
    48cc:	6a e0       	ldi	r22, 0x0A	; 10
    48ce:	70 e0       	ldi	r23, 0x00	; 0
    48d0:	80 e0       	ldi	r24, 0x00	; 0
    48d2:	90 e0       	ldi	r25, 0x00	; 0
    48d4:	0e 94 f7 13 	call	0x27ee	; 0x27ee <vTaskDelay>
	}
    48d8:	8d cf       	rjmp	.-230    	; 0x47f4 <controllerTask+0x14>

000048da <__vector_108>:
 }
 

void vDisplayClear() {
	xEventGroupSetBits(egDisplayTiming, EG_DISPLAY_CLEAR);
}
    48da:	1f 92       	push	r1
    48dc:	0f 92       	push	r0
    48de:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7de03f>
    48e2:	0f 92       	push	r0
    48e4:	11 24       	eor	r1, r1
    48e6:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
    48ea:	0f 92       	push	r0
    48ec:	2f 93       	push	r18
    48ee:	3f 93       	push	r19
    48f0:	4f 93       	push	r20
    48f2:	5f 93       	push	r21
    48f4:	6f 93       	push	r22
    48f6:	7f 93       	push	r23
    48f8:	8f 93       	push	r24
    48fa:	9f 93       	push	r25
    48fc:	af 93       	push	r26
    48fe:	bf 93       	push	r27
    4900:	ef 93       	push	r30
    4902:	ff 93       	push	r31
    4904:	cf 93       	push	r28
    4906:	df 93       	push	r29
    4908:	1f 92       	push	r1
    490a:	cd b7       	in	r28, 0x3d	; 61
    490c:	de b7       	in	r29, 0x3e	; 62
    490e:	19 82       	std	Y+1, r1	; 0x01
    4910:	80 91 42 31 	lds	r24, 0x3142	; 0x803142 <egDisplayTiming>
    4914:	90 91 43 31 	lds	r25, 0x3143	; 0x803143 <egDisplayTiming+0x1>
    4918:	9e 01       	movw	r18, r28
    491a:	2f 5f       	subi	r18, 0xFF	; 255
    491c:	3f 4f       	sbci	r19, 0xFF	; 255
    491e:	41 e0       	ldi	r20, 0x01	; 1
    4920:	50 e0       	ldi	r21, 0x00	; 0
    4922:	60 e0       	ldi	r22, 0x00	; 0
    4924:	70 e0       	ldi	r23, 0x00	; 0
    4926:	0e 94 f2 06 	call	0xde4	; 0xde4 <xEventGroupSetBitsFromISR>
    492a:	60 e0       	ldi	r22, 0x00	; 0
    492c:	80 e0       	ldi	r24, 0x00	; 0
    492e:	9b e0       	ldi	r25, 0x0B	; 11
    4930:	0e 94 41 03 	call	0x682	; 0x682 <TC0_ConfigClockSource>
    4934:	80 e0       	ldi	r24, 0x00	; 0
    4936:	9b e0       	ldi	r25, 0x0B	; 11
    4938:	fc 01       	movw	r30, r24
    493a:	16 82       	std	Z+6, r1	; 0x06
    493c:	00 00       	nop
    493e:	0f 90       	pop	r0
    4940:	df 91       	pop	r29
    4942:	cf 91       	pop	r28
    4944:	ff 91       	pop	r31
    4946:	ef 91       	pop	r30
    4948:	bf 91       	pop	r27
    494a:	af 91       	pop	r26
    494c:	9f 91       	pop	r25
    494e:	8f 91       	pop	r24
    4950:	7f 91       	pop	r23
    4952:	6f 91       	pop	r22
    4954:	5f 91       	pop	r21
    4956:	4f 91       	pop	r20
    4958:	3f 91       	pop	r19
    495a:	2f 91       	pop	r18
    495c:	0f 90       	pop	r0
    495e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7de03b>
    4962:	0f 90       	pop	r0
    4964:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7de03f>
    4968:	0f 90       	pop	r0
    496a:	1f 90       	pop	r1
    496c:	18 95       	reti

0000496e <delayUS>:
    496e:	cf 92       	push	r12
    4970:	df 92       	push	r13
    4972:	ef 92       	push	r14
    4974:	ff 92       	push	r15
    4976:	0f 93       	push	r16
    4978:	cf 93       	push	r28
    497a:	df 93       	push	r29
    497c:	00 d0       	rcall	.+0      	; 0x497e <delayUS+0x10>
    497e:	1f 92       	push	r1
    4980:	cd b7       	in	r28, 0x3d	; 61
    4982:	de b7       	in	r29, 0x3e	; 62
    4984:	69 83       	std	Y+1, r22	; 0x01
    4986:	7a 83       	std	Y+2, r23	; 0x02
    4988:	8b 83       	std	Y+3, r24	; 0x03
    498a:	9c 83       	std	Y+4, r25	; 0x04
    498c:	89 81       	ldd	r24, Y+1	; 0x01
    498e:	9a 81       	ldd	r25, Y+2	; 0x02
    4990:	ab 81       	ldd	r26, Y+3	; 0x03
    4992:	bc 81       	ldd	r27, Y+4	; 0x04
    4994:	02 97       	sbiw	r24, 0x02	; 2
    4996:	a1 05       	cpc	r26, r1
    4998:	b1 05       	cpc	r27, r1
    499a:	40 f4       	brcc	.+16     	; 0x49ac <delayUS+0x3e>
    499c:	82 e0       	ldi	r24, 0x02	; 2
    499e:	90 e0       	ldi	r25, 0x00	; 0
    49a0:	a0 e0       	ldi	r26, 0x00	; 0
    49a2:	b0 e0       	ldi	r27, 0x00	; 0
    49a4:	89 83       	std	Y+1, r24	; 0x01
    49a6:	9a 83       	std	Y+2, r25	; 0x02
    49a8:	ab 83       	std	Y+3, r26	; 0x03
    49aa:	bc 83       	std	Y+4, r27	; 0x04
    49ac:	80 e0       	ldi	r24, 0x00	; 0
    49ae:	9b e0       	ldi	r25, 0x0B	; 11
    49b0:	21 e0       	ldi	r18, 0x01	; 1
    49b2:	fc 01       	movw	r30, r24
    49b4:	26 83       	std	Z+6, r18	; 0x06
    49b6:	80 e0       	ldi	r24, 0x00	; 0
    49b8:	9b e0       	ldi	r25, 0x0B	; 11
    49ba:	fc 01       	movw	r30, r24
    49bc:	10 a2       	std	Z+32, r1	; 0x20
    49be:	11 a2       	std	Z+33, r1	; 0x21
    49c0:	60 e0       	ldi	r22, 0x00	; 0
    49c2:	80 e0       	ldi	r24, 0x00	; 0
    49c4:	9b e0       	ldi	r25, 0x0B	; 11
    49c6:	0e 94 5d 03 	call	0x6ba	; 0x6ba <TC0_ConfigWGM>
    49ca:	89 81       	ldd	r24, Y+1	; 0x01
    49cc:	9a 81       	ldd	r25, Y+2	; 0x02
    49ce:	ab 81       	ldd	r26, Y+3	; 0x03
    49d0:	bc 81       	ldd	r27, Y+4	; 0x04
    49d2:	8e 3f       	cpi	r24, 0xFE	; 254
    49d4:	9f 4f       	sbci	r25, 0xFF	; 255
    49d6:	a1 05       	cpc	r26, r1
    49d8:	b1 05       	cpc	r27, r1
    49da:	98 f4       	brcc	.+38     	; 0x4a02 <delayUS+0x94>
    49dc:	20 e0       	ldi	r18, 0x00	; 0
    49de:	3b e0       	ldi	r19, 0x0B	; 11
    49e0:	89 81       	ldd	r24, Y+1	; 0x01
    49e2:	9a 81       	ldd	r25, Y+2	; 0x02
    49e4:	ab 81       	ldd	r26, Y+3	; 0x03
    49e6:	bc 81       	ldd	r27, Y+4	; 0x04
    49e8:	b6 95       	lsr	r27
    49ea:	a7 95       	ror	r26
    49ec:	97 95       	ror	r25
    49ee:	87 95       	ror	r24
    49f0:	f9 01       	movw	r30, r18
    49f2:	86 a3       	std	Z+38, r24	; 0x26
    49f4:	97 a3       	std	Z+39, r25	; 0x27
    49f6:	65 e0       	ldi	r22, 0x05	; 5
    49f8:	80 e0       	ldi	r24, 0x00	; 0
    49fa:	9b e0       	ldi	r25, 0x0B	; 11
    49fc:	0e 94 41 03 	call	0x682	; 0x682 <TC0_ConfigClockSource>
    4a00:	1f c0       	rjmp	.+62     	; 0x4a40 <delayUS+0xd2>
    4a02:	89 81       	ldd	r24, Y+1	; 0x01
    4a04:	9a 81       	ldd	r25, Y+2	; 0x02
    4a06:	ab 81       	ldd	r26, Y+3	; 0x03
    4a08:	bc 81       	ldd	r27, Y+4	; 0x04
    4a0a:	80 34       	cpi	r24, 0x40	; 64
    4a0c:	92 44       	sbci	r25, 0x42	; 66
    4a0e:	af 40       	sbci	r26, 0x0F	; 15
    4a10:	b1 05       	cpc	r27, r1
    4a12:	b0 f4       	brcc	.+44     	; 0x4a40 <delayUS+0xd2>
    4a14:	20 e0       	ldi	r18, 0x00	; 0
    4a16:	3b e0       	ldi	r19, 0x0B	; 11
    4a18:	89 81       	ldd	r24, Y+1	; 0x01
    4a1a:	9a 81       	ldd	r25, Y+2	; 0x02
    4a1c:	ab 81       	ldd	r26, Y+3	; 0x03
    4a1e:	bc 81       	ldd	r27, Y+4	; 0x04
    4a20:	68 94       	set
    4a22:	14 f8       	bld	r1, 4
    4a24:	b6 95       	lsr	r27
    4a26:	a7 95       	ror	r26
    4a28:	97 95       	ror	r25
    4a2a:	87 95       	ror	r24
    4a2c:	16 94       	lsr	r1
    4a2e:	d1 f7       	brne	.-12     	; 0x4a24 <delayUS+0xb6>
    4a30:	f9 01       	movw	r30, r18
    4a32:	86 a3       	std	Z+38, r24	; 0x26
    4a34:	97 a3       	std	Z+39, r25	; 0x27
    4a36:	67 e0       	ldi	r22, 0x07	; 7
    4a38:	80 e0       	ldi	r24, 0x00	; 0
    4a3a:	9b e0       	ldi	r25, 0x0B	; 11
    4a3c:	0e 94 41 03 	call	0x682	; 0x682 <TC0_ConfigClockSource>
    4a40:	80 91 42 31 	lds	r24, 0x3142	; 0x803142 <egDisplayTiming>
    4a44:	90 91 43 31 	lds	r25, 0x3143	; 0x803143 <egDisplayTiming+0x1>
    4a48:	0f 2e       	mov	r0, r31
    4a4a:	f4 ef       	ldi	r31, 0xF4	; 244
    4a4c:	cf 2e       	mov	r12, r31
    4a4e:	dd 24       	eor	r13, r13
    4a50:	d3 94       	inc	r13
    4a52:	e1 2c       	mov	r14, r1
    4a54:	f1 2c       	mov	r15, r1
    4a56:	f0 2d       	mov	r31, r0
    4a58:	00 e0       	ldi	r16, 0x00	; 0
    4a5a:	21 e0       	ldi	r18, 0x01	; 1
    4a5c:	41 e0       	ldi	r20, 0x01	; 1
    4a5e:	50 e0       	ldi	r21, 0x00	; 0
    4a60:	60 e0       	ldi	r22, 0x00	; 0
    4a62:	70 e0       	ldi	r23, 0x00	; 0
    4a64:	0e 94 02 04 	call	0x804	; 0x804 <xEventGroupWaitBits>
    4a68:	00 00       	nop
    4a6a:	24 96       	adiw	r28, 0x04	; 4
    4a6c:	cd bf       	out	0x3d, r28	; 61
    4a6e:	de bf       	out	0x3e, r29	; 62
    4a70:	df 91       	pop	r29
    4a72:	cf 91       	pop	r28
    4a74:	0f 91       	pop	r16
    4a76:	ff 90       	pop	r15
    4a78:	ef 90       	pop	r14
    4a7a:	df 90       	pop	r13
    4a7c:	cf 90       	pop	r12
    4a7e:	08 95       	ret

00004a80 <setPort>:
    4a80:	cf 93       	push	r28
    4a82:	df 93       	push	r29
    4a84:	1f 92       	push	r1
    4a86:	cd b7       	in	r28, 0x3d	; 61
    4a88:	de b7       	in	r29, 0x3e	; 62
    4a8a:	89 83       	std	Y+1, r24	; 0x01
    4a8c:	89 81       	ldd	r24, Y+1	; 0x01
    4a8e:	8f 70       	andi	r24, 0x0F	; 15
    4a90:	89 83       	std	Y+1, r24	; 0x01
    4a92:	89 81       	ldd	r24, Y+1	; 0x01
    4a94:	82 95       	swap	r24
    4a96:	80 7f       	andi	r24, 0xF0	; 240
    4a98:	89 83       	std	Y+1, r24	; 0x01
    4a9a:	80 e0       	ldi	r24, 0x00	; 0
    4a9c:	96 e0       	ldi	r25, 0x06	; 6
    4a9e:	20 e0       	ldi	r18, 0x00	; 0
    4aa0:	36 e0       	ldi	r19, 0x06	; 6
    4aa2:	f9 01       	movw	r30, r18
    4aa4:	34 81       	ldd	r19, Z+4	; 0x04
    4aa6:	29 81       	ldd	r18, Y+1	; 0x01
    4aa8:	2f 60       	ori	r18, 0x0F	; 15
    4aaa:	23 23       	and	r18, r19
    4aac:	fc 01       	movw	r30, r24
    4aae:	24 83       	std	Z+4, r18	; 0x04
    4ab0:	80 e0       	ldi	r24, 0x00	; 0
    4ab2:	96 e0       	ldi	r25, 0x06	; 6
    4ab4:	20 e0       	ldi	r18, 0x00	; 0
    4ab6:	36 e0       	ldi	r19, 0x06	; 6
    4ab8:	f9 01       	movw	r30, r18
    4aba:	34 81       	ldd	r19, Z+4	; 0x04
    4abc:	29 81       	ldd	r18, Y+1	; 0x01
    4abe:	23 2b       	or	r18, r19
    4ac0:	fc 01       	movw	r30, r24
    4ac2:	24 83       	std	Z+4, r18	; 0x04
    4ac4:	00 00       	nop
    4ac6:	0f 90       	pop	r0
    4ac8:	df 91       	pop	r29
    4aca:	cf 91       	pop	r28
    4acc:	08 95       	ret

00004ace <setRS>:
    4ace:	cf 93       	push	r28
    4ad0:	df 93       	push	r29
    4ad2:	1f 92       	push	r1
    4ad4:	cd b7       	in	r28, 0x3d	; 61
    4ad6:	de b7       	in	r29, 0x3e	; 62
    4ad8:	89 83       	std	Y+1, r24	; 0x01
    4ada:	89 81       	ldd	r24, Y+1	; 0x01
    4adc:	88 23       	and	r24, r24
    4ade:	31 f0       	breq	.+12     	; 0x4aec <setRS+0x1e>
    4ae0:	80 e6       	ldi	r24, 0x60	; 96
    4ae2:	96 e0       	ldi	r25, 0x06	; 6
    4ae4:	21 e0       	ldi	r18, 0x01	; 1
    4ae6:	fc 01       	movw	r30, r24
    4ae8:	25 83       	std	Z+5, r18	; 0x05
    4aea:	05 c0       	rjmp	.+10     	; 0x4af6 <setRS+0x28>
    4aec:	80 e6       	ldi	r24, 0x60	; 96
    4aee:	96 e0       	ldi	r25, 0x06	; 6
    4af0:	21 e0       	ldi	r18, 0x01	; 1
    4af2:	fc 01       	movw	r30, r24
    4af4:	26 83       	std	Z+6, r18	; 0x06
    4af6:	00 00       	nop
    4af8:	0f 90       	pop	r0
    4afa:	df 91       	pop	r29
    4afc:	cf 91       	pop	r28
    4afe:	08 95       	ret

00004b00 <setRW>:
    4b00:	cf 93       	push	r28
    4b02:	df 93       	push	r29
    4b04:	1f 92       	push	r1
    4b06:	cd b7       	in	r28, 0x3d	; 61
    4b08:	de b7       	in	r29, 0x3e	; 62
    4b0a:	89 83       	std	Y+1, r24	; 0x01
    4b0c:	89 81       	ldd	r24, Y+1	; 0x01
    4b0e:	88 23       	and	r24, r24
    4b10:	31 f0       	breq	.+12     	; 0x4b1e <setRW+0x1e>
    4b12:	80 e6       	ldi	r24, 0x60	; 96
    4b14:	96 e0       	ldi	r25, 0x06	; 6
    4b16:	22 e0       	ldi	r18, 0x02	; 2
    4b18:	fc 01       	movw	r30, r24
    4b1a:	25 83       	std	Z+5, r18	; 0x05
    4b1c:	05 c0       	rjmp	.+10     	; 0x4b28 <setRW+0x28>
    4b1e:	80 e6       	ldi	r24, 0x60	; 96
    4b20:	96 e0       	ldi	r25, 0x06	; 6
    4b22:	22 e0       	ldi	r18, 0x02	; 2
    4b24:	fc 01       	movw	r30, r24
    4b26:	26 83       	std	Z+6, r18	; 0x06
    4b28:	00 00       	nop
    4b2a:	0f 90       	pop	r0
    4b2c:	df 91       	pop	r29
    4b2e:	cf 91       	pop	r28
    4b30:	08 95       	ret

00004b32 <setE>:
    4b32:	cf 93       	push	r28
    4b34:	df 93       	push	r29
    4b36:	1f 92       	push	r1
    4b38:	cd b7       	in	r28, 0x3d	; 61
    4b3a:	de b7       	in	r29, 0x3e	; 62
    4b3c:	89 83       	std	Y+1, r24	; 0x01
    4b3e:	89 81       	ldd	r24, Y+1	; 0x01
    4b40:	88 23       	and	r24, r24
    4b42:	31 f0       	breq	.+12     	; 0x4b50 <setE+0x1e>
    4b44:	80 e6       	ldi	r24, 0x60	; 96
    4b46:	96 e0       	ldi	r25, 0x06	; 6
    4b48:	24 e0       	ldi	r18, 0x04	; 4
    4b4a:	fc 01       	movw	r30, r24
    4b4c:	25 83       	std	Z+5, r18	; 0x05
    4b4e:	05 c0       	rjmp	.+10     	; 0x4b5a <setE+0x28>
    4b50:	80 e6       	ldi	r24, 0x60	; 96
    4b52:	96 e0       	ldi	r25, 0x06	; 6
    4b54:	24 e0       	ldi	r18, 0x04	; 4
    4b56:	fc 01       	movw	r30, r24
    4b58:	26 83       	std	Z+6, r18	; 0x06
    4b5a:	00 00       	nop
    4b5c:	0f 90       	pop	r0
    4b5e:	df 91       	pop	r29
    4b60:	cf 91       	pop	r28
    4b62:	08 95       	ret

00004b64 <Nybble>:
    4b64:	cf 93       	push	r28
    4b66:	df 93       	push	r29
    4b68:	cd b7       	in	r28, 0x3d	; 61
    4b6a:	de b7       	in	r29, 0x3e	; 62
    4b6c:	81 e0       	ldi	r24, 0x01	; 1
    4b6e:	0e 94 99 25 	call	0x4b32	; 0x4b32 <setE>
    4b72:	61 e0       	ldi	r22, 0x01	; 1
    4b74:	70 e0       	ldi	r23, 0x00	; 0
    4b76:	80 e0       	ldi	r24, 0x00	; 0
    4b78:	90 e0       	ldi	r25, 0x00	; 0
    4b7a:	0e 94 b7 24 	call	0x496e	; 0x496e <delayUS>
    4b7e:	80 e0       	ldi	r24, 0x00	; 0
    4b80:	0e 94 99 25 	call	0x4b32	; 0x4b32 <setE>
    4b84:	00 00       	nop
    4b86:	df 91       	pop	r29
    4b88:	cf 91       	pop	r28
    4b8a:	08 95       	ret

00004b8c <command>:
    4b8c:	cf 93       	push	r28
    4b8e:	df 93       	push	r29
    4b90:	1f 92       	push	r1
    4b92:	cd b7       	in	r28, 0x3d	; 61
    4b94:	de b7       	in	r29, 0x3e	; 62
    4b96:	89 83       	std	Y+1, r24	; 0x01
    4b98:	89 81       	ldd	r24, Y+1	; 0x01
    4b9a:	82 95       	swap	r24
    4b9c:	8f 70       	andi	r24, 0x0F	; 15
    4b9e:	0e 94 40 25 	call	0x4a80	; 0x4a80 <setPort>
    4ba2:	80 e0       	ldi	r24, 0x00	; 0
    4ba4:	0e 94 67 25 	call	0x4ace	; 0x4ace <setRS>
    4ba8:	80 e0       	ldi	r24, 0x00	; 0
    4baa:	0e 94 80 25 	call	0x4b00	; 0x4b00 <setRW>
    4bae:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <Nybble>
    4bb2:	89 81       	ldd	r24, Y+1	; 0x01
    4bb4:	8f 70       	andi	r24, 0x0F	; 15
    4bb6:	0e 94 40 25 	call	0x4a80	; 0x4a80 <setPort>
    4bba:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <Nybble>
    4bbe:	00 00       	nop
    4bc0:	0f 90       	pop	r0
    4bc2:	df 91       	pop	r29
    4bc4:	cf 91       	pop	r28
    4bc6:	08 95       	ret

00004bc8 <write>:
    4bc8:	cf 93       	push	r28
    4bca:	df 93       	push	r29
    4bcc:	1f 92       	push	r1
    4bce:	cd b7       	in	r28, 0x3d	; 61
    4bd0:	de b7       	in	r29, 0x3e	; 62
    4bd2:	89 83       	std	Y+1, r24	; 0x01
    4bd4:	89 81       	ldd	r24, Y+1	; 0x01
    4bd6:	82 95       	swap	r24
    4bd8:	8f 70       	andi	r24, 0x0F	; 15
    4bda:	0e 94 40 25 	call	0x4a80	; 0x4a80 <setPort>
    4bde:	81 e0       	ldi	r24, 0x01	; 1
    4be0:	0e 94 67 25 	call	0x4ace	; 0x4ace <setRS>
    4be4:	80 e0       	ldi	r24, 0x00	; 0
    4be6:	0e 94 80 25 	call	0x4b00	; 0x4b00 <setRW>
    4bea:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <Nybble>
    4bee:	89 81       	ldd	r24, Y+1	; 0x01
    4bf0:	8f 70       	andi	r24, 0x0F	; 15
    4bf2:	0e 94 40 25 	call	0x4a80	; 0x4a80 <setPort>
    4bf6:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <Nybble>
    4bfa:	00 00       	nop
    4bfc:	0f 90       	pop	r0
    4bfe:	df 91       	pop	r29
    4c00:	cf 91       	pop	r28
    4c02:	08 95       	ret

00004c04 <vInitDisplay>:
    4c04:	ef 92       	push	r14
    4c06:	ff 92       	push	r15
    4c08:	0f 93       	push	r16
    4c0a:	cf 93       	push	r28
    4c0c:	df 93       	push	r29
    4c0e:	cd b7       	in	r28, 0x3d	; 61
    4c10:	de b7       	in	r29, 0x3e	; 62
    4c12:	80 e0       	ldi	r24, 0x00	; 0
    4c14:	96 e0       	ldi	r25, 0x06	; 6
    4c16:	20 e1       	ldi	r18, 0x10	; 16
    4c18:	fc 01       	movw	r30, r24
    4c1a:	21 83       	std	Z+1, r18	; 0x01
    4c1c:	80 e0       	ldi	r24, 0x00	; 0
    4c1e:	96 e0       	ldi	r25, 0x06	; 6
    4c20:	20 e2       	ldi	r18, 0x20	; 32
    4c22:	fc 01       	movw	r30, r24
    4c24:	21 83       	std	Z+1, r18	; 0x01
    4c26:	80 e0       	ldi	r24, 0x00	; 0
    4c28:	96 e0       	ldi	r25, 0x06	; 6
    4c2a:	20 e4       	ldi	r18, 0x40	; 64
    4c2c:	fc 01       	movw	r30, r24
    4c2e:	21 83       	std	Z+1, r18	; 0x01
    4c30:	80 e0       	ldi	r24, 0x00	; 0
    4c32:	96 e0       	ldi	r25, 0x06	; 6
    4c34:	20 e8       	ldi	r18, 0x80	; 128
    4c36:	fc 01       	movw	r30, r24
    4c38:	21 83       	std	Z+1, r18	; 0x01
    4c3a:	80 e6       	ldi	r24, 0x60	; 96
    4c3c:	96 e0       	ldi	r25, 0x06	; 6
    4c3e:	21 e0       	ldi	r18, 0x01	; 1
    4c40:	fc 01       	movw	r30, r24
    4c42:	21 83       	std	Z+1, r18	; 0x01
    4c44:	80 e6       	ldi	r24, 0x60	; 96
    4c46:	96 e0       	ldi	r25, 0x06	; 6
    4c48:	22 e0       	ldi	r18, 0x02	; 2
    4c4a:	fc 01       	movw	r30, r24
    4c4c:	21 83       	std	Z+1, r18	; 0x01
    4c4e:	80 e6       	ldi	r24, 0x60	; 96
    4c50:	96 e0       	ldi	r25, 0x06	; 6
    4c52:	24 e0       	ldi	r18, 0x04	; 4
    4c54:	fc 01       	movw	r30, r24
    4c56:	21 83       	std	Z+1, r18	; 0x01
    4c58:	80 e0       	ldi	r24, 0x00	; 0
    4c5a:	96 e0       	ldi	r25, 0x06	; 6
    4c5c:	20 e0       	ldi	r18, 0x00	; 0
    4c5e:	36 e0       	ldi	r19, 0x06	; 6
    4c60:	f9 01       	movw	r30, r18
    4c62:	24 81       	ldd	r18, Z+4	; 0x04
    4c64:	2f 70       	andi	r18, 0x0F	; 15
    4c66:	fc 01       	movw	r30, r24
    4c68:	24 83       	std	Z+4, r18	; 0x04
    4c6a:	80 e6       	ldi	r24, 0x60	; 96
    4c6c:	96 e0       	ldi	r25, 0x06	; 6
    4c6e:	20 e6       	ldi	r18, 0x60	; 96
    4c70:	36 e0       	ldi	r19, 0x06	; 6
    4c72:	f9 01       	movw	r30, r18
    4c74:	24 81       	ldd	r18, Z+4	; 0x04
    4c76:	28 7f       	andi	r18, 0xF8	; 248
    4c78:	fc 01       	movw	r30, r24
    4c7a:	24 83       	std	Z+4, r18	; 0x04
    4c7c:	40 e0       	ldi	r20, 0x00	; 0
    4c7e:	66 e1       	ldi	r22, 0x16	; 22
    4c80:	88 e0       	ldi	r24, 0x08	; 8
    4c82:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <xQueueGenericCreate>
    4c86:	80 93 40 31 	sts	0x3140, r24	; 0x803140 <displayLineQueue>
    4c8a:	90 93 41 31 	sts	0x3141, r25	; 0x803141 <displayLineQueue+0x1>
    4c8e:	0e 94 df 03 	call	0x7be	; 0x7be <xEventGroupCreate>
    4c92:	80 93 42 31 	sts	0x3142, r24	; 0x803142 <egDisplayTiming>
    4c96:	90 93 43 31 	sts	0x3143, r25	; 0x803143 <egDisplayTiming+0x1>
    4c9a:	e1 2c       	mov	r14, r1
    4c9c:	f1 2c       	mov	r15, r1
    4c9e:	01 e0       	ldi	r16, 0x01	; 1
    4ca0:	20 e0       	ldi	r18, 0x00	; 0
    4ca2:	30 e0       	ldi	r19, 0x00	; 0
    4ca4:	4e e5       	ldi	r20, 0x5E	; 94
    4ca6:	51 e0       	ldi	r21, 0x01	; 1
    4ca8:	67 eb       	ldi	r22, 0xB7	; 183
    4caa:	70 e2       	ldi	r23, 0x20	; 32
    4cac:	80 e0       	ldi	r24, 0x00	; 0
    4cae:	97 e2       	ldi	r25, 0x27	; 39
    4cb0:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <xTaskCreate>
    4cb4:	00 00       	nop
    4cb6:	df 91       	pop	r29
    4cb8:	cf 91       	pop	r28
    4cba:	0f 91       	pop	r16
    4cbc:	ff 90       	pop	r15
    4cbe:	ef 90       	pop	r14
    4cc0:	08 95       	ret

00004cc2 <_displaySetPos>:
    4cc2:	cf 93       	push	r28
    4cc4:	df 93       	push	r29
    4cc6:	00 d0       	rcall	.+0      	; 0x4cc8 <_displaySetPos+0x6>
    4cc8:	1f 92       	push	r1
    4cca:	cd b7       	in	r28, 0x3d	; 61
    4ccc:	de b7       	in	r29, 0x3e	; 62
    4cce:	89 83       	std	Y+1, r24	; 0x01
    4cd0:	9a 83       	std	Y+2, r25	; 0x02
    4cd2:	6b 83       	std	Y+3, r22	; 0x03
    4cd4:	7c 83       	std	Y+4, r23	; 0x04
    4cd6:	89 81       	ldd	r24, Y+1	; 0x01
    4cd8:	9a 81       	ldd	r25, Y+2	; 0x02
    4cda:	81 30       	cpi	r24, 0x01	; 1
    4cdc:	91 05       	cpc	r25, r1
    4cde:	89 f0       	breq	.+34     	; 0x4d02 <_displaySetPos+0x40>
    4ce0:	82 30       	cpi	r24, 0x02	; 2
    4ce2:	91 05       	cpc	r25, r1
    4ce4:	1c f4       	brge	.+6      	; 0x4cec <_displaySetPos+0x2a>
    4ce6:	89 2b       	or	r24, r25
    4ce8:	39 f0       	breq	.+14     	; 0x4cf8 <_displaySetPos+0x36>
    4cea:	1a c0       	rjmp	.+52     	; 0x4d20 <_displaySetPos+0x5e>
    4cec:	82 30       	cpi	r24, 0x02	; 2
    4cee:	91 05       	cpc	r25, r1
    4cf0:	69 f0       	breq	.+26     	; 0x4d0c <_displaySetPos+0x4a>
    4cf2:	03 97       	sbiw	r24, 0x03	; 3
    4cf4:	81 f0       	breq	.+32     	; 0x4d16 <_displaySetPos+0x54>
    4cf6:	14 c0       	rjmp	.+40     	; 0x4d20 <_displaySetPos+0x5e>
    4cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    4cfa:	80 58       	subi	r24, 0x80	; 128
    4cfc:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <command>
    4d00:	0f c0       	rjmp	.+30     	; 0x4d20 <_displaySetPos+0x5e>
    4d02:	8b 81       	ldd	r24, Y+3	; 0x03
    4d04:	80 54       	subi	r24, 0x40	; 64
    4d06:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <command>
    4d0a:	0a c0       	rjmp	.+20     	; 0x4d20 <_displaySetPos+0x5e>
    4d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    4d0e:	8c 56       	subi	r24, 0x6C	; 108
    4d10:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <command>
    4d14:	05 c0       	rjmp	.+10     	; 0x4d20 <_displaySetPos+0x5e>
    4d16:	8b 81       	ldd	r24, Y+3	; 0x03
    4d18:	8c 52       	subi	r24, 0x2C	; 44
    4d1a:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <command>
    4d1e:	00 00       	nop
    4d20:	67 e2       	ldi	r22, 0x27	; 39
    4d22:	70 e0       	ldi	r23, 0x00	; 0
    4d24:	80 e0       	ldi	r24, 0x00	; 0
    4d26:	90 e0       	ldi	r25, 0x00	; 0
    4d28:	0e 94 b7 24 	call	0x496e	; 0x496e <delayUS>
    4d2c:	00 00       	nop
    4d2e:	24 96       	adiw	r28, 0x04	; 4
    4d30:	cd bf       	out	0x3d, r28	; 61
    4d32:	de bf       	out	0x3e, r29	; 62
    4d34:	df 91       	pop	r29
    4d36:	cf 91       	pop	r28
    4d38:	08 95       	ret

00004d3a <_displayWriteChar>:
    4d3a:	cf 93       	push	r28
    4d3c:	df 93       	push	r29
    4d3e:	1f 92       	push	r1
    4d40:	cd b7       	in	r28, 0x3d	; 61
    4d42:	de b7       	in	r29, 0x3e	; 62
    4d44:	89 83       	std	Y+1, r24	; 0x01
    4d46:	89 81       	ldd	r24, Y+1	; 0x01
    4d48:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <write>
    4d4c:	6b e2       	ldi	r22, 0x2B	; 43
    4d4e:	70 e0       	ldi	r23, 0x00	; 0
    4d50:	80 e0       	ldi	r24, 0x00	; 0
    4d52:	90 e0       	ldi	r25, 0x00	; 0
    4d54:	0e 94 b7 24 	call	0x496e	; 0x496e <delayUS>
    4d58:	00 00       	nop
    4d5a:	0f 90       	pop	r0
    4d5c:	df 91       	pop	r29
    4d5e:	cf 91       	pop	r28
    4d60:	08 95       	ret

00004d62 <_displayWriteString>:
    4d62:	cf 93       	push	r28
    4d64:	df 93       	push	r29
    4d66:	00 d0       	rcall	.+0      	; 0x4d68 <_displayWriteString+0x6>
    4d68:	1f 92       	push	r1
    4d6a:	cd b7       	in	r28, 0x3d	; 61
    4d6c:	de b7       	in	r29, 0x3e	; 62
    4d6e:	8b 83       	std	Y+3, r24	; 0x03
    4d70:	9c 83       	std	Y+4, r25	; 0x04
    4d72:	19 82       	std	Y+1, r1	; 0x01
    4d74:	1a 82       	std	Y+2, r1	; 0x02
    4d76:	19 c0       	rjmp	.+50     	; 0x4daa <_displayWriteString+0x48>
    4d78:	89 81       	ldd	r24, Y+1	; 0x01
    4d7a:	9a 81       	ldd	r25, Y+2	; 0x02
    4d7c:	2b 81       	ldd	r18, Y+3	; 0x03
    4d7e:	3c 81       	ldd	r19, Y+4	; 0x04
    4d80:	82 0f       	add	r24, r18
    4d82:	93 1f       	adc	r25, r19
    4d84:	fc 01       	movw	r30, r24
    4d86:	80 81       	ld	r24, Z
    4d88:	88 23       	and	r24, r24
    4d8a:	a1 f0       	breq	.+40     	; 0x4db4 <_displayWriteString+0x52>
    4d8c:	89 81       	ldd	r24, Y+1	; 0x01
    4d8e:	9a 81       	ldd	r25, Y+2	; 0x02
    4d90:	2b 81       	ldd	r18, Y+3	; 0x03
    4d92:	3c 81       	ldd	r19, Y+4	; 0x04
    4d94:	82 0f       	add	r24, r18
    4d96:	93 1f       	adc	r25, r19
    4d98:	fc 01       	movw	r30, r24
    4d9a:	80 81       	ld	r24, Z
    4d9c:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <_displayWriteChar>
    4da0:	89 81       	ldd	r24, Y+1	; 0x01
    4da2:	9a 81       	ldd	r25, Y+2	; 0x02
    4da4:	01 96       	adiw	r24, 0x01	; 1
    4da6:	89 83       	std	Y+1, r24	; 0x01
    4da8:	9a 83       	std	Y+2, r25	; 0x02
    4daa:	89 81       	ldd	r24, Y+1	; 0x01
    4dac:	9a 81       	ldd	r25, Y+2	; 0x02
    4dae:	44 97       	sbiw	r24, 0x14	; 20
    4db0:	1c f3       	brlt	.-58     	; 0x4d78 <_displayWriteString+0x16>
    4db2:	01 c0       	rjmp	.+2      	; 0x4db6 <_displayWriteString+0x54>
    4db4:	00 00       	nop
    4db6:	00 00       	nop
    4db8:	24 96       	adiw	r28, 0x04	; 4
    4dba:	cd bf       	out	0x3d, r28	; 61
    4dbc:	de bf       	out	0x3e, r29	; 62
    4dbe:	df 91       	pop	r29
    4dc0:	cf 91       	pop	r28
    4dc2:	08 95       	ret

00004dc4 <_displayWriteStringAtPos>:
    4dc4:	cf 93       	push	r28
    4dc6:	df 93       	push	r29
    4dc8:	00 d0       	rcall	.+0      	; 0x4dca <_displayWriteStringAtPos+0x6>
    4dca:	00 d0       	rcall	.+0      	; 0x4dcc <_displayWriteStringAtPos+0x8>
    4dcc:	cd b7       	in	r28, 0x3d	; 61
    4dce:	de b7       	in	r29, 0x3e	; 62
    4dd0:	89 83       	std	Y+1, r24	; 0x01
    4dd2:	9a 83       	std	Y+2, r25	; 0x02
    4dd4:	6b 83       	std	Y+3, r22	; 0x03
    4dd6:	7c 83       	std	Y+4, r23	; 0x04
    4dd8:	4d 83       	std	Y+5, r20	; 0x05
    4dda:	5e 83       	std	Y+6, r21	; 0x06
    4ddc:	2b 81       	ldd	r18, Y+3	; 0x03
    4dde:	3c 81       	ldd	r19, Y+4	; 0x04
    4de0:	89 81       	ldd	r24, Y+1	; 0x01
    4de2:	9a 81       	ldd	r25, Y+2	; 0x02
    4de4:	b9 01       	movw	r22, r18
    4de6:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <_displaySetPos>
    4dea:	8d 81       	ldd	r24, Y+5	; 0x05
    4dec:	9e 81       	ldd	r25, Y+6	; 0x06
    4dee:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <_displayWriteString>
    4df2:	00 00       	nop
    4df4:	26 96       	adiw	r28, 0x06	; 6
    4df6:	cd bf       	out	0x3d, r28	; 61
    4df8:	de bf       	out	0x3e, r29	; 62
    4dfa:	df 91       	pop	r29
    4dfc:	cf 91       	pop	r28
    4dfe:	08 95       	ret

00004e00 <vDisplayUpdateTask>:
    4e00:	cf 93       	push	r28
    4e02:	df 93       	push	r29
    4e04:	cd b7       	in	r28, 0x3d	; 61
    4e06:	de b7       	in	r29, 0x3e	; 62
    4e08:	c0 57       	subi	r28, 0x70	; 112
    4e0a:	d1 09       	sbc	r29, r1
    4e0c:	cd bf       	out	0x3d, r28	; 61
    4e0e:	de bf       	out	0x3e, r29	; 62
    4e10:	9e 01       	movw	r18, r28
    4e12:	21 59       	subi	r18, 0x91	; 145
    4e14:	3f 4f       	sbci	r19, 0xFF	; 255
    4e16:	f9 01       	movw	r30, r18
    4e18:	80 83       	st	Z, r24
    4e1a:	91 83       	std	Z+1, r25	; 0x01
    4e1c:	19 82       	std	Y+1, r1	; 0x01
    4e1e:	1a 82       	std	Y+2, r1	; 0x02
    4e20:	1b 82       	std	Y+3, r1	; 0x03
    4e22:	1c 82       	std	Y+4, r1	; 0x04
    4e24:	1d 82       	std	Y+5, r1	; 0x05
    4e26:	1e 82       	std	Y+6, r1	; 0x06
    4e28:	26 c0       	rjmp	.+76     	; 0x4e76 <vDisplayUpdateTask+0x76>
    4e2a:	1f 82       	std	Y+7, r1	; 0x07
    4e2c:	18 86       	std	Y+8, r1	; 0x08
    4e2e:	1a c0       	rjmp	.+52     	; 0x4e64 <vDisplayUpdateTask+0x64>
    4e30:	2d 81       	ldd	r18, Y+5	; 0x05
    4e32:	3e 81       	ldd	r19, Y+6	; 0x06
    4e34:	44 e1       	ldi	r20, 0x14	; 20
    4e36:	42 9f       	mul	r20, r18
    4e38:	c0 01       	movw	r24, r0
    4e3a:	43 9f       	mul	r20, r19
    4e3c:	90 0d       	add	r25, r0
    4e3e:	11 24       	eor	r1, r1
    4e40:	9e 01       	movw	r18, r28
    4e42:	2f 5f       	subi	r18, 0xFF	; 255
    4e44:	3f 4f       	sbci	r19, 0xFF	; 255
    4e46:	28 0f       	add	r18, r24
    4e48:	39 1f       	adc	r19, r25
    4e4a:	8f 81       	ldd	r24, Y+7	; 0x07
    4e4c:	98 85       	ldd	r25, Y+8	; 0x08
    4e4e:	82 0f       	add	r24, r18
    4e50:	93 1f       	adc	r25, r19
    4e52:	08 96       	adiw	r24, 0x08	; 8
    4e54:	20 e2       	ldi	r18, 0x20	; 32
    4e56:	fc 01       	movw	r30, r24
    4e58:	20 83       	st	Z, r18
    4e5a:	8f 81       	ldd	r24, Y+7	; 0x07
    4e5c:	98 85       	ldd	r25, Y+8	; 0x08
    4e5e:	01 96       	adiw	r24, 0x01	; 1
    4e60:	8f 83       	std	Y+7, r24	; 0x07
    4e62:	98 87       	std	Y+8, r25	; 0x08
    4e64:	8f 81       	ldd	r24, Y+7	; 0x07
    4e66:	98 85       	ldd	r25, Y+8	; 0x08
    4e68:	44 97       	sbiw	r24, 0x14	; 20
    4e6a:	14 f3       	brlt	.-60     	; 0x4e30 <vDisplayUpdateTask+0x30>
    4e6c:	8d 81       	ldd	r24, Y+5	; 0x05
    4e6e:	9e 81       	ldd	r25, Y+6	; 0x06
    4e70:	01 96       	adiw	r24, 0x01	; 1
    4e72:	8d 83       	std	Y+5, r24	; 0x05
    4e74:	9e 83       	std	Y+6, r25	; 0x06
    4e76:	8d 81       	ldd	r24, Y+5	; 0x05
    4e78:	9e 81       	ldd	r25, Y+6	; 0x06
    4e7a:	04 97       	sbiw	r24, 0x04	; 4
    4e7c:	b4 f2       	brlt	.-84     	; 0x4e2a <vDisplayUpdateTask+0x2a>
    4e7e:	60 e4       	ldi	r22, 0x40	; 64
    4e80:	7c e9       	ldi	r23, 0x9C	; 156
    4e82:	80 e0       	ldi	r24, 0x00	; 0
    4e84:	90 e0       	ldi	r25, 0x00	; 0
    4e86:	0e 94 b7 24 	call	0x496e	; 0x496e <delayUS>
    4e8a:	83 e0       	ldi	r24, 0x03	; 3
    4e8c:	0e 94 40 25 	call	0x4a80	; 0x4a80 <setPort>
    4e90:	68 e8       	ldi	r22, 0x88	; 136
    4e92:	73 e1       	ldi	r23, 0x13	; 19
    4e94:	80 e0       	ldi	r24, 0x00	; 0
    4e96:	90 e0       	ldi	r25, 0x00	; 0
    4e98:	0e 94 b7 24 	call	0x496e	; 0x496e <delayUS>
    4e9c:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <Nybble>
    4ea0:	60 ea       	ldi	r22, 0xA0	; 160
    4ea2:	70 e0       	ldi	r23, 0x00	; 0
    4ea4:	80 e0       	ldi	r24, 0x00	; 0
    4ea6:	90 e0       	ldi	r25, 0x00	; 0
    4ea8:	0e 94 b7 24 	call	0x496e	; 0x496e <delayUS>
    4eac:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <Nybble>
    4eb0:	60 ea       	ldi	r22, 0xA0	; 160
    4eb2:	70 e0       	ldi	r23, 0x00	; 0
    4eb4:	80 e0       	ldi	r24, 0x00	; 0
    4eb6:	90 e0       	ldi	r25, 0x00	; 0
    4eb8:	0e 94 b7 24 	call	0x496e	; 0x496e <delayUS>
    4ebc:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <Nybble>
    4ec0:	60 ea       	ldi	r22, 0xA0	; 160
    4ec2:	70 e0       	ldi	r23, 0x00	; 0
    4ec4:	80 e0       	ldi	r24, 0x00	; 0
    4ec6:	90 e0       	ldi	r25, 0x00	; 0
    4ec8:	0e 94 b7 24 	call	0x496e	; 0x496e <delayUS>
    4ecc:	82 e0       	ldi	r24, 0x02	; 2
    4ece:	0e 94 40 25 	call	0x4a80	; 0x4a80 <setPort>
    4ed2:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <Nybble>
    4ed6:	88 e2       	ldi	r24, 0x28	; 40
    4ed8:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <command>
    4edc:	80 e1       	ldi	r24, 0x10	; 16
    4ede:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <command>
    4ee2:	8c e0       	ldi	r24, 0x0C	; 12
    4ee4:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <command>
    4ee8:	86 e0       	ldi	r24, 0x06	; 6
    4eea:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <command>
    4eee:	68 ec       	ldi	r22, 0xC8	; 200
    4ef0:	70 e0       	ldi	r23, 0x00	; 0
    4ef2:	80 e0       	ldi	r24, 0x00	; 0
    4ef4:	90 e0       	ldi	r25, 0x00	; 0
    4ef6:	0e 94 f7 13 	call	0x27ee	; 0x27ee <vTaskDelay>
    4efa:	80 91 42 31 	lds	r24, 0x3142	; 0x803142 <egDisplayTiming>
    4efe:	90 91 43 31 	lds	r25, 0x3143	; 0x803143 <egDisplayTiming+0x1>
    4f02:	40 e0       	ldi	r20, 0x00	; 0
    4f04:	50 e0       	ldi	r21, 0x00	; 0
    4f06:	ba 01       	movw	r22, r20
    4f08:	0e 94 3a 05 	call	0xa74	; 0xa74 <xEventGroupClearBits>
    4f0c:	dc 01       	movw	r26, r24
    4f0e:	cb 01       	movw	r24, r22
    4f10:	89 2b       	or	r24, r25
    4f12:	8a 2b       	or	r24, r26
    4f14:	8b 2b       	or	r24, r27
    4f16:	09 f4       	brne	.+2      	; 0x4f1a <vDisplayUpdateTask+0x11a>
    4f18:	96 c0       	rjmp	.+300    	; 0x5046 <vDisplayUpdateTask+0x246>
    4f1a:	80 91 42 31 	lds	r24, 0x3142	; 0x803142 <egDisplayTiming>
    4f1e:	90 91 43 31 	lds	r25, 0x3143	; 0x803143 <egDisplayTiming+0x1>
    4f22:	42 e0       	ldi	r20, 0x02	; 2
    4f24:	50 e0       	ldi	r21, 0x00	; 0
    4f26:	60 e0       	ldi	r22, 0x00	; 0
    4f28:	70 e0       	ldi	r23, 0x00	; 0
    4f2a:	0e 94 3a 05 	call	0xa74	; 0xa74 <xEventGroupClearBits>
    4f2e:	19 82       	std	Y+1, r1	; 0x01
    4f30:	1a 82       	std	Y+2, r1	; 0x02
    4f32:	26 c0       	rjmp	.+76     	; 0x4f80 <vDisplayUpdateTask+0x180>
    4f34:	1b 82       	std	Y+3, r1	; 0x03
    4f36:	1c 82       	std	Y+4, r1	; 0x04
    4f38:	1a c0       	rjmp	.+52     	; 0x4f6e <vDisplayUpdateTask+0x16e>
    4f3a:	29 81       	ldd	r18, Y+1	; 0x01
    4f3c:	3a 81       	ldd	r19, Y+2	; 0x02
    4f3e:	44 e1       	ldi	r20, 0x14	; 20
    4f40:	42 9f       	mul	r20, r18
    4f42:	c0 01       	movw	r24, r0
    4f44:	43 9f       	mul	r20, r19
    4f46:	90 0d       	add	r25, r0
    4f48:	11 24       	eor	r1, r1
    4f4a:	9e 01       	movw	r18, r28
    4f4c:	2f 5f       	subi	r18, 0xFF	; 255
    4f4e:	3f 4f       	sbci	r19, 0xFF	; 255
    4f50:	28 0f       	add	r18, r24
    4f52:	39 1f       	adc	r19, r25
    4f54:	8b 81       	ldd	r24, Y+3	; 0x03
    4f56:	9c 81       	ldd	r25, Y+4	; 0x04
    4f58:	82 0f       	add	r24, r18
    4f5a:	93 1f       	adc	r25, r19
    4f5c:	08 96       	adiw	r24, 0x08	; 8
    4f5e:	20 e2       	ldi	r18, 0x20	; 32
    4f60:	fc 01       	movw	r30, r24
    4f62:	20 83       	st	Z, r18
    4f64:	8b 81       	ldd	r24, Y+3	; 0x03
    4f66:	9c 81       	ldd	r25, Y+4	; 0x04
    4f68:	01 96       	adiw	r24, 0x01	; 1
    4f6a:	8b 83       	std	Y+3, r24	; 0x03
    4f6c:	9c 83       	std	Y+4, r25	; 0x04
    4f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    4f70:	9c 81       	ldd	r25, Y+4	; 0x04
    4f72:	44 97       	sbiw	r24, 0x14	; 20
    4f74:	14 f3       	brlt	.-60     	; 0x4f3a <vDisplayUpdateTask+0x13a>
    4f76:	89 81       	ldd	r24, Y+1	; 0x01
    4f78:	9a 81       	ldd	r25, Y+2	; 0x02
    4f7a:	01 96       	adiw	r24, 0x01	; 1
    4f7c:	89 83       	std	Y+1, r24	; 0x01
    4f7e:	9a 83       	std	Y+2, r25	; 0x02
    4f80:	89 81       	ldd	r24, Y+1	; 0x01
    4f82:	9a 81       	ldd	r25, Y+2	; 0x02
    4f84:	04 97       	sbiw	r24, 0x04	; 4
    4f86:	b4 f2       	brlt	.-84     	; 0x4f34 <vDisplayUpdateTask+0x134>
    4f88:	5e c0       	rjmp	.+188    	; 0x5046 <vDisplayUpdateTask+0x246>
    4f8a:	80 91 40 31 	lds	r24, 0x3140	; 0x803140 <displayLineQueue>
    4f8e:	90 91 41 31 	lds	r25, 0x3141	; 0x803141 <displayLineQueue+0x1>
    4f92:	be 01       	movw	r22, r28
    4f94:	67 5a       	subi	r22, 0xA7	; 167
    4f96:	7f 4f       	sbci	r23, 0xFF	; 255
    4f98:	2f ef       	ldi	r18, 0xFF	; 255
    4f9a:	3f ef       	ldi	r19, 0xFF	; 255
    4f9c:	a9 01       	movw	r20, r18
    4f9e:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <xQueueReceive>
    4fa2:	88 23       	and	r24, r24
    4fa4:	09 f4       	brne	.+2      	; 0x4fa8 <vDisplayUpdateTask+0x1a8>
    4fa6:	4f c0       	rjmp	.+158    	; 0x5046 <vDisplayUpdateTask+0x246>
    4fa8:	19 82       	std	Y+1, r1	; 0x01
    4faa:	1a 82       	std	Y+2, r1	; 0x02
    4fac:	32 c0       	rjmp	.+100    	; 0x5012 <vDisplayUpdateTask+0x212>
    4fae:	ce 01       	movw	r24, r28
    4fb0:	87 5a       	subi	r24, 0xA7	; 167
    4fb2:	9f 4f       	sbci	r25, 0xFF	; 255
    4fb4:	fc 01       	movw	r30, r24
    4fb6:	80 81       	ld	r24, Z
    4fb8:	48 2f       	mov	r20, r24
    4fba:	50 e0       	ldi	r21, 0x00	; 0
    4fbc:	ce 01       	movw	r24, r28
    4fbe:	87 5a       	subi	r24, 0xA7	; 167
    4fc0:	9f 4f       	sbci	r25, 0xFF	; 255
    4fc2:	fc 01       	movw	r30, r24
    4fc4:	81 81       	ldd	r24, Z+1	; 0x01
    4fc6:	28 2f       	mov	r18, r24
    4fc8:	30 e0       	ldi	r19, 0x00	; 0
    4fca:	89 81       	ldd	r24, Y+1	; 0x01
    4fcc:	9a 81       	ldd	r25, Y+2	; 0x02
    4fce:	82 0f       	add	r24, r18
    4fd0:	93 1f       	adc	r25, r19
    4fd2:	be 01       	movw	r22, r28
    4fd4:	67 5a       	subi	r22, 0xA7	; 167
    4fd6:	7f 4f       	sbci	r23, 0xFF	; 255
    4fd8:	29 81       	ldd	r18, Y+1	; 0x01
    4fda:	3a 81       	ldd	r19, Y+2	; 0x02
    4fdc:	26 0f       	add	r18, r22
    4fde:	37 1f       	adc	r19, r23
    4fe0:	2e 5f       	subi	r18, 0xFE	; 254
    4fe2:	3f 4f       	sbci	r19, 0xFF	; 255
    4fe4:	f9 01       	movw	r30, r18
    4fe6:	60 81       	ld	r22, Z
    4fe8:	74 e1       	ldi	r23, 0x14	; 20
    4fea:	74 9f       	mul	r23, r20
    4fec:	90 01       	movw	r18, r0
    4fee:	75 9f       	mul	r23, r21
    4ff0:	30 0d       	add	r19, r0
    4ff2:	11 24       	eor	r1, r1
    4ff4:	ae 01       	movw	r20, r28
    4ff6:	4f 5f       	subi	r20, 0xFF	; 255
    4ff8:	5f 4f       	sbci	r21, 0xFF	; 255
    4ffa:	24 0f       	add	r18, r20
    4ffc:	35 1f       	adc	r19, r21
    4ffe:	82 0f       	add	r24, r18
    5000:	93 1f       	adc	r25, r19
    5002:	08 96       	adiw	r24, 0x08	; 8
    5004:	fc 01       	movw	r30, r24
    5006:	60 83       	st	Z, r22
    5008:	89 81       	ldd	r24, Y+1	; 0x01
    500a:	9a 81       	ldd	r25, Y+2	; 0x02
    500c:	01 96       	adiw	r24, 0x01	; 1
    500e:	89 83       	std	Y+1, r24	; 0x01
    5010:	9a 83       	std	Y+2, r25	; 0x02
    5012:	ce 01       	movw	r24, r28
    5014:	87 5a       	subi	r24, 0xA7	; 167
    5016:	9f 4f       	sbci	r25, 0xFF	; 255
    5018:	fc 01       	movw	r30, r24
    501a:	81 81       	ldd	r24, Z+1	; 0x01
    501c:	28 2f       	mov	r18, r24
    501e:	30 e0       	ldi	r19, 0x00	; 0
    5020:	89 81       	ldd	r24, Y+1	; 0x01
    5022:	9a 81       	ldd	r25, Y+2	; 0x02
    5024:	82 0f       	add	r24, r18
    5026:	93 1f       	adc	r25, r19
    5028:	44 97       	sbiw	r24, 0x14	; 20
    502a:	6c f4       	brge	.+26     	; 0x5046 <vDisplayUpdateTask+0x246>
    502c:	9e 01       	movw	r18, r28
    502e:	27 5a       	subi	r18, 0xA7	; 167
    5030:	3f 4f       	sbci	r19, 0xFF	; 255
    5032:	89 81       	ldd	r24, Y+1	; 0x01
    5034:	9a 81       	ldd	r25, Y+2	; 0x02
    5036:	82 0f       	add	r24, r18
    5038:	93 1f       	adc	r25, r19
    503a:	02 96       	adiw	r24, 0x02	; 2
    503c:	fc 01       	movw	r30, r24
    503e:	80 81       	ld	r24, Z
    5040:	88 23       	and	r24, r24
    5042:	09 f0       	breq	.+2      	; 0x5046 <vDisplayUpdateTask+0x246>
    5044:	b4 cf       	rjmp	.-152    	; 0x4fae <vDisplayUpdateTask+0x1ae>
    5046:	80 91 40 31 	lds	r24, 0x3140	; 0x803140 <displayLineQueue>
    504a:	90 91 41 31 	lds	r25, 0x3141	; 0x803141 <displayLineQueue+0x1>
    504e:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <uxQueueMessagesWaiting>
    5052:	88 23       	and	r24, r24
    5054:	09 f0       	breq	.+2      	; 0x5058 <vDisplayUpdateTask+0x258>
    5056:	99 cf       	rjmp	.-206    	; 0x4f8a <vDisplayUpdateTask+0x18a>
    5058:	19 82       	std	Y+1, r1	; 0x01
    505a:	1a 82       	std	Y+2, r1	; 0x02
    505c:	19 c0       	rjmp	.+50     	; 0x5090 <vDisplayUpdateTask+0x290>
    505e:	9e 01       	movw	r18, r28
    5060:	27 5f       	subi	r18, 0xF7	; 247
    5062:	3f 4f       	sbci	r19, 0xFF	; 255
    5064:	49 81       	ldd	r20, Y+1	; 0x01
    5066:	5a 81       	ldd	r21, Y+2	; 0x02
    5068:	64 e1       	ldi	r22, 0x14	; 20
    506a:	64 9f       	mul	r22, r20
    506c:	c0 01       	movw	r24, r0
    506e:	65 9f       	mul	r22, r21
    5070:	90 0d       	add	r25, r0
    5072:	11 24       	eor	r1, r1
    5074:	28 0f       	add	r18, r24
    5076:	39 1f       	adc	r19, r25
    5078:	89 81       	ldd	r24, Y+1	; 0x01
    507a:	9a 81       	ldd	r25, Y+2	; 0x02
    507c:	a9 01       	movw	r20, r18
    507e:	60 e0       	ldi	r22, 0x00	; 0
    5080:	70 e0       	ldi	r23, 0x00	; 0
    5082:	0e 94 e2 26 	call	0x4dc4	; 0x4dc4 <_displayWriteStringAtPos>
    5086:	89 81       	ldd	r24, Y+1	; 0x01
    5088:	9a 81       	ldd	r25, Y+2	; 0x02
    508a:	01 96       	adiw	r24, 0x01	; 1
    508c:	89 83       	std	Y+1, r24	; 0x01
    508e:	9a 83       	std	Y+2, r25	; 0x02
    5090:	89 81       	ldd	r24, Y+1	; 0x01
    5092:	9a 81       	ldd	r25, Y+2	; 0x02
    5094:	04 97       	sbiw	r24, 0x04	; 4
    5096:	1c f3       	brlt	.-58     	; 0x505e <vDisplayUpdateTask+0x25e>
    5098:	2a cf       	rjmp	.-428    	; 0x4eee <vDisplayUpdateTask+0xee>

0000509a <vDisplayWriteStringAtPos>:

void vDisplayWriteStringAtPos(int line, int pos, char const *fmt, ...) {
    509a:	cf 93       	push	r28
    509c:	df 93       	push	r29
    509e:	1f 92       	push	r1
    50a0:	1f 92       	push	r1
    50a2:	cd b7       	in	r28, 0x3d	; 61
    50a4:	de b7       	in	r29, 0x3e	; 62
	va_list arg;	
	va_start(arg, fmt);
    50a6:	ce 01       	movw	r24, r28
    50a8:	0e 96       	adiw	r24, 0x0e	; 14
    50aa:	89 83       	std	Y+1, r24	; 0x01
    50ac:	9a 83       	std	Y+2, r25	; 0x02
	display_vprintf(line, pos, fmt, arg);
    50ae:	29 81       	ldd	r18, Y+1	; 0x01
    50b0:	3a 81       	ldd	r19, Y+2	; 0x02
    50b2:	4c 85       	ldd	r20, Y+12	; 0x0c
    50b4:	5d 85       	ldd	r21, Y+13	; 0x0d
    50b6:	6a 85       	ldd	r22, Y+10	; 0x0a
    50b8:	7b 85       	ldd	r23, Y+11	; 0x0b
    50ba:	88 85       	ldd	r24, Y+8	; 0x08
    50bc:	99 85       	ldd	r25, Y+9	; 0x09
    50be:	0e 94 67 28 	call	0x50ce	; 0x50ce <display_vprintf>
	va_end(arg);	
}
    50c2:	00 00       	nop
    50c4:	0f 90       	pop	r0
    50c6:	0f 90       	pop	r0
    50c8:	df 91       	pop	r29
    50ca:	cf 91       	pop	r28
    50cc:	08 95       	ret

000050ce <display_vprintf>:
 
static int display_vprintf(int line, int pos, char const *fmt, va_list arg) {
    50ce:	0f 93       	push	r16
    50d0:	cf 93       	push	r28
    50d2:	df 93       	push	r29
    50d4:	cd b7       	in	r28, 0x3d	; 61
    50d6:	de b7       	in	r29, 0x3e	; 62
    50d8:	ec 97       	sbiw	r28, 0x3c	; 60
    50da:	cd bf       	out	0x3d, r28	; 61
    50dc:	de bf       	out	0x3e, r29	; 62
    50de:	8d ab       	std	Y+53, r24	; 0x35
    50e0:	9e ab       	std	Y+54, r25	; 0x36
    50e2:	6f ab       	std	Y+55, r22	; 0x37
    50e4:	78 af       	std	Y+56, r23	; 0x38
    50e6:	49 af       	std	Y+57, r20	; 0x39
    50e8:	5a af       	std	Y+58, r21	; 0x3a
    50ea:	2b af       	std	Y+59, r18	; 0x3b
    50ec:	3c af       	std	Y+60, r19	; 0x3c
	int int_temp;
	char char_temp;
	char *string_temp;
	double double_temp;
	char ch;
	int length = 0;
    50ee:	19 82       	std	Y+1, r1	; 0x01
    50f0:	1a 82       	std	Y+2, r1	; 0x02

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
    50f2:	1b 82       	std	Y+3, r1	; 0x03
    50f4:	1c 82       	std	Y+4, r1	; 0x04
    50f6:	0b c0       	rjmp	.+22     	; 0x510e <display_vprintf+0x40>
		buffer[i] = 0x00;
    50f8:	8b 81       	ldd	r24, Y+3	; 0x03
    50fa:	9c 81       	ldd	r25, Y+4	; 0x04
    50fc:	8d 5e       	subi	r24, 0xED	; 237
    50fe:	9e 4c       	sbci	r25, 0xCE	; 206
    5100:	fc 01       	movw	r30, r24
    5102:	10 82       	st	Z, r1
	char ch;
	int length = 0;

	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
    5104:	8b 81       	ldd	r24, Y+3	; 0x03
    5106:	9c 81       	ldd	r25, Y+4	; 0x04
    5108:	01 96       	adiw	r24, 0x01	; 1
    510a:	8b 83       	std	Y+3, r24	; 0x03
    510c:	9c 83       	std	Y+4, r25	; 0x04
    510e:	8b 81       	ldd	r24, Y+3	; 0x03
    5110:	9c 81       	ldd	r25, Y+4	; 0x04
    5112:	44 97       	sbiw	r24, 0x14	; 20
    5114:	8c f3       	brlt	.-30     	; 0x50f8 <display_vprintf+0x2a>
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    5116:	1d 82       	std	Y+5, r1	; 0x05
    5118:	1e 82       	std	Y+6, r1	; 0x06
    511a:	0b c0       	rjmp	.+22     	; 0x5132 <display_vprintf+0x64>
		str[i] = 0x00;
    511c:	8d 81       	ldd	r24, Y+5	; 0x05
    511e:	9e 81       	ldd	r25, Y+6	; 0x06
    5120:	89 5d       	subi	r24, 0xD9	; 217
    5122:	9e 4c       	sbci	r25, 0xCE	; 206
    5124:	fc 01       	movw	r30, r24
    5126:	10 82       	st	Z, r1
	static char buffer[20];
	static char str[20];
	for(int i = 0; i < 20; i++) {
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
    5128:	8d 81       	ldd	r24, Y+5	; 0x05
    512a:	9e 81       	ldd	r25, Y+6	; 0x06
    512c:	01 96       	adiw	r24, 0x01	; 1
    512e:	8d 83       	std	Y+5, r24	; 0x05
    5130:	9e 83       	std	Y+6, r25	; 0x06
    5132:	8d 81       	ldd	r24, Y+5	; 0x05
    5134:	9e 81       	ldd	r25, Y+6	; 0x06
    5136:	44 97       	sbiw	r24, 0x14	; 20
    5138:	8c f3       	brlt	.-30     	; 0x511c <display_vprintf+0x4e>
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    513a:	be c1       	rjmp	.+892    	; 0x54b8 <display_vprintf+0x3ea>
		if ( '%' == ch ) {
    513c:	8d 89       	ldd	r24, Y+21	; 0x15
    513e:	85 32       	cpi	r24, 0x25	; 37
    5140:	09 f0       	breq	.+2      	; 0x5144 <display_vprintf+0x76>
    5142:	a0 c1       	rjmp	.+832    	; 0x5484 <display_vprintf+0x3b6>
			switch (ch = *fmt++) {
    5144:	89 ad       	ldd	r24, Y+57	; 0x39
    5146:	9a ad       	ldd	r25, Y+58	; 0x3a
    5148:	9c 01       	movw	r18, r24
    514a:	2f 5f       	subi	r18, 0xFF	; 255
    514c:	3f 4f       	sbci	r19, 0xFF	; 255
    514e:	29 af       	std	Y+57, r18	; 0x39
    5150:	3a af       	std	Y+58, r19	; 0x3a
    5152:	fc 01       	movw	r30, r24
    5154:	80 81       	ld	r24, Z
    5156:	8d 8b       	std	Y+21, r24	; 0x15
    5158:	8d 89       	ldd	r24, Y+21	; 0x15
    515a:	88 2f       	mov	r24, r24
    515c:	90 e0       	ldi	r25, 0x00	; 0
    515e:	85 36       	cpi	r24, 0x65	; 101
    5160:	91 05       	cpc	r25, r1
    5162:	09 f4       	brne	.+2      	; 0x5166 <display_vprintf+0x98>
    5164:	46 c1       	rjmp	.+652    	; 0x53f2 <display_vprintf+0x324>
    5166:	86 36       	cpi	r24, 0x66	; 102
    5168:	91 05       	cpc	r25, r1
    516a:	54 f4       	brge	.+20     	; 0x5180 <display_vprintf+0xb2>
    516c:	83 36       	cpi	r24, 0x63	; 99
    516e:	91 05       	cpc	r25, r1
    5170:	01 f1       	breq	.+64     	; 0x51b2 <display_vprintf+0xe4>
    5172:	84 36       	cpi	r24, 0x64	; 100
    5174:	91 05       	cpc	r25, r1
    5176:	0c f0       	brlt	.+2      	; 0x517a <display_vprintf+0xac>
    5178:	70 c0       	rjmp	.+224    	; 0x525a <display_vprintf+0x18c>
    517a:	85 97       	sbiw	r24, 0x25	; 37
    517c:	69 f0       	breq	.+26     	; 0x5198 <display_vprintf+0xca>
    517e:	9c c1       	rjmp	.+824    	; 0x54b8 <display_vprintf+0x3ea>
    5180:	83 37       	cpi	r24, 0x73	; 115
    5182:	91 05       	cpc	r25, r1
    5184:	71 f1       	breq	.+92     	; 0x51e2 <display_vprintf+0x114>
    5186:	88 37       	cpi	r24, 0x78	; 120
    5188:	91 05       	cpc	r25, r1
    518a:	09 f4       	brne	.+2      	; 0x518e <display_vprintf+0xc0>
    518c:	a8 c0       	rjmp	.+336    	; 0x52de <display_vprintf+0x210>
    518e:	86 36       	cpi	r24, 0x66	; 102
    5190:	91 05       	cpc	r25, r1
    5192:	09 f4       	brne	.+2      	; 0x5196 <display_vprintf+0xc8>
    5194:	e6 c0       	rjmp	.+460    	; 0x5362 <display_vprintf+0x294>
    5196:	90 c1       	rjmp	.+800    	; 0x54b8 <display_vprintf+0x3ea>
				/* %% - print out a single %    */
				case '%':
				str[length] = '%';
    5198:	89 81       	ldd	r24, Y+1	; 0x01
    519a:	9a 81       	ldd	r25, Y+2	; 0x02
    519c:	89 5d       	subi	r24, 0xD9	; 217
    519e:	9e 4c       	sbci	r25, 0xCE	; 206
    51a0:	25 e2       	ldi	r18, 0x25	; 37
    51a2:	fc 01       	movw	r30, r24
    51a4:	20 83       	st	Z, r18
				length++;
    51a6:	89 81       	ldd	r24, Y+1	; 0x01
    51a8:	9a 81       	ldd	r25, Y+2	; 0x02
    51aa:	01 96       	adiw	r24, 0x01	; 1
    51ac:	89 83       	std	Y+1, r24	; 0x01
    51ae:	9a 83       	std	Y+2, r25	; 0x02
				break;
    51b0:	83 c1       	rjmp	.+774    	; 0x54b8 <display_vprintf+0x3ea>

				/* %c: print out a character    */
				case 'c':
				char_temp = va_arg(arg, int);
    51b2:	8b ad       	ldd	r24, Y+59	; 0x3b
    51b4:	9c ad       	ldd	r25, Y+60	; 0x3c
    51b6:	9c 01       	movw	r18, r24
    51b8:	2e 5f       	subi	r18, 0xFE	; 254
    51ba:	3f 4f       	sbci	r19, 0xFF	; 255
    51bc:	2b af       	std	Y+59, r18	; 0x3b
    51be:	3c af       	std	Y+60, r19	; 0x3c
    51c0:	fc 01       	movw	r30, r24
    51c2:	80 81       	ld	r24, Z
    51c4:	91 81       	ldd	r25, Z+1	; 0x01
    51c6:	8e 8b       	std	Y+22, r24	; 0x16
				str[length] = char_temp;
    51c8:	89 81       	ldd	r24, Y+1	; 0x01
    51ca:	9a 81       	ldd	r25, Y+2	; 0x02
    51cc:	89 5d       	subi	r24, 0xD9	; 217
    51ce:	9e 4c       	sbci	r25, 0xCE	; 206
    51d0:	2e 89       	ldd	r18, Y+22	; 0x16
    51d2:	fc 01       	movw	r30, r24
    51d4:	20 83       	st	Z, r18
				length++;
    51d6:	89 81       	ldd	r24, Y+1	; 0x01
    51d8:	9a 81       	ldd	r25, Y+2	; 0x02
    51da:	01 96       	adiw	r24, 0x01	; 1
    51dc:	89 83       	std	Y+1, r24	; 0x01
    51de:	9a 83       	std	Y+2, r25	; 0x02
				break;
    51e0:	6b c1       	rjmp	.+726    	; 0x54b8 <display_vprintf+0x3ea>

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
    51e2:	8b ad       	ldd	r24, Y+59	; 0x3b
    51e4:	9c ad       	ldd	r25, Y+60	; 0x3c
    51e6:	9c 01       	movw	r18, r24
    51e8:	2e 5f       	subi	r18, 0xFE	; 254
    51ea:	3f 4f       	sbci	r19, 0xFF	; 255
    51ec:	2b af       	std	Y+59, r18	; 0x3b
    51ee:	3c af       	std	Y+60, r19	; 0x3c
    51f0:	fc 01       	movw	r30, r24
    51f2:	80 81       	ld	r24, Z
    51f4:	91 81       	ldd	r25, Z+1	; 0x01
    51f6:	8f 8b       	std	Y+23, r24	; 0x17
    51f8:	98 8f       	std	Y+24, r25	; 0x18
				for(int i = 0; i < strlen(string_temp);i++) {
    51fa:	1f 82       	std	Y+7, r1	; 0x07
    51fc:	18 86       	std	Y+8, r1	; 0x08
    51fe:	17 c0       	rjmp	.+46     	; 0x522e <display_vprintf+0x160>
					str[length+i] = string_temp[i];
    5200:	29 81       	ldd	r18, Y+1	; 0x01
    5202:	3a 81       	ldd	r19, Y+2	; 0x02
    5204:	8f 81       	ldd	r24, Y+7	; 0x07
    5206:	98 85       	ldd	r25, Y+8	; 0x08
    5208:	82 0f       	add	r24, r18
    520a:	93 1f       	adc	r25, r19
    520c:	2f 81       	ldd	r18, Y+7	; 0x07
    520e:	38 85       	ldd	r19, Y+8	; 0x08
    5210:	4f 89       	ldd	r20, Y+23	; 0x17
    5212:	58 8d       	ldd	r21, Y+24	; 0x18
    5214:	24 0f       	add	r18, r20
    5216:	35 1f       	adc	r19, r21
    5218:	f9 01       	movw	r30, r18
    521a:	20 81       	ld	r18, Z
    521c:	89 5d       	subi	r24, 0xD9	; 217
    521e:	9e 4c       	sbci	r25, 0xCE	; 206
    5220:	fc 01       	movw	r30, r24
    5222:	20 83       	st	Z, r18
				break;

				/* %s: print out a string       */
				case 's':
				string_temp = va_arg(arg, char *);
				for(int i = 0; i < strlen(string_temp);i++) {
    5224:	8f 81       	ldd	r24, Y+7	; 0x07
    5226:	98 85       	ldd	r25, Y+8	; 0x08
    5228:	01 96       	adiw	r24, 0x01	; 1
    522a:	8f 83       	std	Y+7, r24	; 0x07
    522c:	98 87       	std	Y+8, r25	; 0x08
    522e:	8f 89       	ldd	r24, Y+23	; 0x17
    5230:	98 8d       	ldd	r25, Y+24	; 0x18
    5232:	0e 94 57 30 	call	0x60ae	; 0x60ae <strlen>
    5236:	9c 01       	movw	r18, r24
    5238:	8f 81       	ldd	r24, Y+7	; 0x07
    523a:	98 85       	ldd	r25, Y+8	; 0x08
    523c:	82 17       	cp	r24, r18
    523e:	93 07       	cpc	r25, r19
    5240:	f8 f2       	brcs	.-66     	; 0x5200 <display_vprintf+0x132>
					str[length+i] = string_temp[i];
				}
				length += strlen(string_temp);
    5242:	8f 89       	ldd	r24, Y+23	; 0x17
    5244:	98 8d       	ldd	r25, Y+24	; 0x18
    5246:	0e 94 57 30 	call	0x60ae	; 0x60ae <strlen>
    524a:	9c 01       	movw	r18, r24
    524c:	89 81       	ldd	r24, Y+1	; 0x01
    524e:	9a 81       	ldd	r25, Y+2	; 0x02
    5250:	82 0f       	add	r24, r18
    5252:	93 1f       	adc	r25, r19
    5254:	89 83       	std	Y+1, r24	; 0x01
    5256:	9a 83       	std	Y+2, r25	; 0x02
				break;
    5258:	2f c1       	rjmp	.+606    	; 0x54b8 <display_vprintf+0x3ea>

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
    525a:	8b ad       	ldd	r24, Y+59	; 0x3b
    525c:	9c ad       	ldd	r25, Y+60	; 0x3c
    525e:	9c 01       	movw	r18, r24
    5260:	2e 5f       	subi	r18, 0xFE	; 254
    5262:	3f 4f       	sbci	r19, 0xFF	; 255
    5264:	2b af       	std	Y+59, r18	; 0x3b
    5266:	3c af       	std	Y+60, r19	; 0x3c
    5268:	fc 01       	movw	r30, r24
    526a:	80 81       	ld	r24, Z
    526c:	91 81       	ldd	r25, Z+1	; 0x01
    526e:	89 8f       	std	Y+25, r24	; 0x19
    5270:	9a 8f       	std	Y+26, r25	; 0x1a
				itoa(int_temp, buffer, 10);
    5272:	89 8d       	ldd	r24, Y+25	; 0x19
    5274:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5276:	4a e0       	ldi	r20, 0x0A	; 10
    5278:	50 e0       	ldi	r21, 0x00	; 0
    527a:	63 e1       	ldi	r22, 0x13	; 19
    527c:	71 e3       	ldi	r23, 0x31	; 49
    527e:	0e 94 60 30 	call	0x60c0	; 0x60c0 <itoa>
				for(int i = 0; i < strlen(buffer);i++) {
    5282:	19 86       	std	Y+9, r1	; 0x09
    5284:	1a 86       	std	Y+10, r1	; 0x0a
    5286:	15 c0       	rjmp	.+42     	; 0x52b2 <display_vprintf+0x1e4>
					str[length+i] = buffer[i];
    5288:	29 81       	ldd	r18, Y+1	; 0x01
    528a:	3a 81       	ldd	r19, Y+2	; 0x02
    528c:	89 85       	ldd	r24, Y+9	; 0x09
    528e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5290:	82 0f       	add	r24, r18
    5292:	93 1f       	adc	r25, r19
    5294:	29 85       	ldd	r18, Y+9	; 0x09
    5296:	3a 85       	ldd	r19, Y+10	; 0x0a
    5298:	2d 5e       	subi	r18, 0xED	; 237
    529a:	3e 4c       	sbci	r19, 0xCE	; 206
    529c:	f9 01       	movw	r30, r18
    529e:	20 81       	ld	r18, Z
    52a0:	89 5d       	subi	r24, 0xD9	; 217
    52a2:	9e 4c       	sbci	r25, 0xCE	; 206
    52a4:	fc 01       	movw	r30, r24
    52a6:	20 83       	st	Z, r18

				/* %d: print out an int         */
				case 'd':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 10);
				for(int i = 0; i < strlen(buffer);i++) {
    52a8:	89 85       	ldd	r24, Y+9	; 0x09
    52aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    52ac:	01 96       	adiw	r24, 0x01	; 1
    52ae:	89 87       	std	Y+9, r24	; 0x09
    52b0:	9a 87       	std	Y+10, r25	; 0x0a
    52b2:	83 e1       	ldi	r24, 0x13	; 19
    52b4:	91 e3       	ldi	r25, 0x31	; 49
    52b6:	0e 94 57 30 	call	0x60ae	; 0x60ae <strlen>
    52ba:	9c 01       	movw	r18, r24
    52bc:	89 85       	ldd	r24, Y+9	; 0x09
    52be:	9a 85       	ldd	r25, Y+10	; 0x0a
    52c0:	82 17       	cp	r24, r18
    52c2:	93 07       	cpc	r25, r19
    52c4:	08 f3       	brcs	.-62     	; 0x5288 <display_vprintf+0x1ba>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    52c6:	83 e1       	ldi	r24, 0x13	; 19
    52c8:	91 e3       	ldi	r25, 0x31	; 49
    52ca:	0e 94 57 30 	call	0x60ae	; 0x60ae <strlen>
    52ce:	9c 01       	movw	r18, r24
    52d0:	89 81       	ldd	r24, Y+1	; 0x01
    52d2:	9a 81       	ldd	r25, Y+2	; 0x02
    52d4:	82 0f       	add	r24, r18
    52d6:	93 1f       	adc	r25, r19
    52d8:	89 83       	std	Y+1, r24	; 0x01
    52da:	9a 83       	std	Y+2, r25	; 0x02
				break;
    52dc:	ed c0       	rjmp	.+474    	; 0x54b8 <display_vprintf+0x3ea>

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
    52de:	8b ad       	ldd	r24, Y+59	; 0x3b
    52e0:	9c ad       	ldd	r25, Y+60	; 0x3c
    52e2:	9c 01       	movw	r18, r24
    52e4:	2e 5f       	subi	r18, 0xFE	; 254
    52e6:	3f 4f       	sbci	r19, 0xFF	; 255
    52e8:	2b af       	std	Y+59, r18	; 0x3b
    52ea:	3c af       	std	Y+60, r19	; 0x3c
    52ec:	fc 01       	movw	r30, r24
    52ee:	80 81       	ld	r24, Z
    52f0:	91 81       	ldd	r25, Z+1	; 0x01
    52f2:	89 8f       	std	Y+25, r24	; 0x19
    52f4:	9a 8f       	std	Y+26, r25	; 0x1a
				itoa(int_temp, buffer, 16);
    52f6:	89 8d       	ldd	r24, Y+25	; 0x19
    52f8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    52fa:	40 e1       	ldi	r20, 0x10	; 16
    52fc:	50 e0       	ldi	r21, 0x00	; 0
    52fe:	63 e1       	ldi	r22, 0x13	; 19
    5300:	71 e3       	ldi	r23, 0x31	; 49
    5302:	0e 94 60 30 	call	0x60c0	; 0x60c0 <itoa>
				for(int i = 0; i < strlen(buffer);i++) {
    5306:	1b 86       	std	Y+11, r1	; 0x0b
    5308:	1c 86       	std	Y+12, r1	; 0x0c
    530a:	15 c0       	rjmp	.+42     	; 0x5336 <display_vprintf+0x268>
					str[length+i] = buffer[i];
    530c:	29 81       	ldd	r18, Y+1	; 0x01
    530e:	3a 81       	ldd	r19, Y+2	; 0x02
    5310:	8b 85       	ldd	r24, Y+11	; 0x0b
    5312:	9c 85       	ldd	r25, Y+12	; 0x0c
    5314:	82 0f       	add	r24, r18
    5316:	93 1f       	adc	r25, r19
    5318:	2b 85       	ldd	r18, Y+11	; 0x0b
    531a:	3c 85       	ldd	r19, Y+12	; 0x0c
    531c:	2d 5e       	subi	r18, 0xED	; 237
    531e:	3e 4c       	sbci	r19, 0xCE	; 206
    5320:	f9 01       	movw	r30, r18
    5322:	20 81       	ld	r18, Z
    5324:	89 5d       	subi	r24, 0xD9	; 217
    5326:	9e 4c       	sbci	r25, 0xCE	; 206
    5328:	fc 01       	movw	r30, r24
    532a:	20 83       	st	Z, r18

				/* %x: print out an int in hex  */
				case 'x':
				int_temp = va_arg(arg, int);
				itoa(int_temp, buffer, 16);
				for(int i = 0; i < strlen(buffer);i++) {
    532c:	8b 85       	ldd	r24, Y+11	; 0x0b
    532e:	9c 85       	ldd	r25, Y+12	; 0x0c
    5330:	01 96       	adiw	r24, 0x01	; 1
    5332:	8b 87       	std	Y+11, r24	; 0x0b
    5334:	9c 87       	std	Y+12, r25	; 0x0c
    5336:	83 e1       	ldi	r24, 0x13	; 19
    5338:	91 e3       	ldi	r25, 0x31	; 49
    533a:	0e 94 57 30 	call	0x60ae	; 0x60ae <strlen>
    533e:	9c 01       	movw	r18, r24
    5340:	8b 85       	ldd	r24, Y+11	; 0x0b
    5342:	9c 85       	ldd	r25, Y+12	; 0x0c
    5344:	82 17       	cp	r24, r18
    5346:	93 07       	cpc	r25, r19
    5348:	08 f3       	brcs	.-62     	; 0x530c <display_vprintf+0x23e>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    534a:	83 e1       	ldi	r24, 0x13	; 19
    534c:	91 e3       	ldi	r25, 0x31	; 49
    534e:	0e 94 57 30 	call	0x60ae	; 0x60ae <strlen>
    5352:	9c 01       	movw	r18, r24
    5354:	89 81       	ldd	r24, Y+1	; 0x01
    5356:	9a 81       	ldd	r25, Y+2	; 0x02
    5358:	82 0f       	add	r24, r18
    535a:	93 1f       	adc	r25, r19
    535c:	89 83       	std	Y+1, r24	; 0x01
    535e:	9a 83       	std	Y+2, r25	; 0x02
				break;
    5360:	ab c0       	rjmp	.+342    	; 0x54b8 <display_vprintf+0x3ea>

				case 'f':
				double_temp = va_arg(arg, double);
    5362:	8b ad       	ldd	r24, Y+59	; 0x3b
    5364:	9c ad       	ldd	r25, Y+60	; 0x3c
    5366:	9c 01       	movw	r18, r24
    5368:	2c 5f       	subi	r18, 0xFC	; 252
    536a:	3f 4f       	sbci	r19, 0xFF	; 255
    536c:	2b af       	std	Y+59, r18	; 0x3b
    536e:	3c af       	std	Y+60, r19	; 0x3c
    5370:	fc 01       	movw	r30, r24
    5372:	80 81       	ld	r24, Z
    5374:	91 81       	ldd	r25, Z+1	; 0x01
    5376:	a2 81       	ldd	r26, Z+2	; 0x02
    5378:	b3 81       	ldd	r27, Z+3	; 0x03
    537a:	8b 8f       	std	Y+27, r24	; 0x1b
    537c:	9c 8f       	std	Y+28, r25	; 0x1c
    537e:	ad 8f       	std	Y+29, r26	; 0x1d
    5380:	be 8f       	std	Y+30, r27	; 0x1e
				ftoa_fixed(buffer, double_temp);
    5382:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5384:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5386:	ad 8d       	ldd	r26, Y+29	; 0x1d
    5388:	be 8d       	ldd	r27, Y+30	; 0x1e
    538a:	ac 01       	movw	r20, r24
    538c:	bd 01       	movw	r22, r26
    538e:	83 e1       	ldi	r24, 0x13	; 19
    5390:	91 e3       	ldi	r25, 0x31	; 49
    5392:	0e 94 36 2b 	call	0x566c	; 0x566c <ftoa_fixed>
				for(int i = 0; i < strlen(buffer);i++) {
    5396:	1d 86       	std	Y+13, r1	; 0x0d
    5398:	1e 86       	std	Y+14, r1	; 0x0e
    539a:	15 c0       	rjmp	.+42     	; 0x53c6 <display_vprintf+0x2f8>
					str[length+i] = buffer[i];
    539c:	29 81       	ldd	r18, Y+1	; 0x01
    539e:	3a 81       	ldd	r19, Y+2	; 0x02
    53a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    53a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    53a4:	82 0f       	add	r24, r18
    53a6:	93 1f       	adc	r25, r19
    53a8:	2d 85       	ldd	r18, Y+13	; 0x0d
    53aa:	3e 85       	ldd	r19, Y+14	; 0x0e
    53ac:	2d 5e       	subi	r18, 0xED	; 237
    53ae:	3e 4c       	sbci	r19, 0xCE	; 206
    53b0:	f9 01       	movw	r30, r18
    53b2:	20 81       	ld	r18, Z
    53b4:	89 5d       	subi	r24, 0xD9	; 217
    53b6:	9e 4c       	sbci	r25, 0xCE	; 206
    53b8:	fc 01       	movw	r30, r24
    53ba:	20 83       	st	Z, r18
				break;

				case 'f':
				double_temp = va_arg(arg, double);
				ftoa_fixed(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    53bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    53be:	9e 85       	ldd	r25, Y+14	; 0x0e
    53c0:	01 96       	adiw	r24, 0x01	; 1
    53c2:	8d 87       	std	Y+13, r24	; 0x0d
    53c4:	9e 87       	std	Y+14, r25	; 0x0e
    53c6:	83 e1       	ldi	r24, 0x13	; 19
    53c8:	91 e3       	ldi	r25, 0x31	; 49
    53ca:	0e 94 57 30 	call	0x60ae	; 0x60ae <strlen>
    53ce:	9c 01       	movw	r18, r24
    53d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    53d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    53d4:	82 17       	cp	r24, r18
    53d6:	93 07       	cpc	r25, r19
    53d8:	08 f3       	brcs	.-62     	; 0x539c <display_vprintf+0x2ce>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    53da:	83 e1       	ldi	r24, 0x13	; 19
    53dc:	91 e3       	ldi	r25, 0x31	; 49
    53de:	0e 94 57 30 	call	0x60ae	; 0x60ae <strlen>
    53e2:	9c 01       	movw	r18, r24
    53e4:	89 81       	ldd	r24, Y+1	; 0x01
    53e6:	9a 81       	ldd	r25, Y+2	; 0x02
    53e8:	82 0f       	add	r24, r18
    53ea:	93 1f       	adc	r25, r19
    53ec:	89 83       	std	Y+1, r24	; 0x01
    53ee:	9a 83       	std	Y+2, r25	; 0x02
				break;
    53f0:	63 c0       	rjmp	.+198    	; 0x54b8 <display_vprintf+0x3ea>

				case 'e':
				double_temp = va_arg(arg, double);
    53f2:	8b ad       	ldd	r24, Y+59	; 0x3b
    53f4:	9c ad       	ldd	r25, Y+60	; 0x3c
    53f6:	9c 01       	movw	r18, r24
    53f8:	2c 5f       	subi	r18, 0xFC	; 252
    53fa:	3f 4f       	sbci	r19, 0xFF	; 255
    53fc:	2b af       	std	Y+59, r18	; 0x3b
    53fe:	3c af       	std	Y+60, r19	; 0x3c
    5400:	fc 01       	movw	r30, r24
    5402:	80 81       	ld	r24, Z
    5404:	91 81       	ldd	r25, Z+1	; 0x01
    5406:	a2 81       	ldd	r26, Z+2	; 0x02
    5408:	b3 81       	ldd	r27, Z+3	; 0x03
    540a:	8b 8f       	std	Y+27, r24	; 0x1b
    540c:	9c 8f       	std	Y+28, r25	; 0x1c
    540e:	ad 8f       	std	Y+29, r26	; 0x1d
    5410:	be 8f       	std	Y+30, r27	; 0x1e
				ftoa_sci(buffer, double_temp);
    5412:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5414:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5416:	ad 8d       	ldd	r26, Y+29	; 0x1d
    5418:	be 8d       	ldd	r27, Y+30	; 0x1e
    541a:	ac 01       	movw	r20, r24
    541c:	bd 01       	movw	r22, r26
    541e:	83 e1       	ldi	r24, 0x13	; 19
    5420:	91 e3       	ldi	r25, 0x31	; 49
    5422:	0e 94 85 2c 	call	0x590a	; 0x590a <ftoa_sci>
				for(int i = 0; i < strlen(buffer);i++) {
    5426:	1f 86       	std	Y+15, r1	; 0x0f
    5428:	18 8a       	std	Y+16, r1	; 0x10
    542a:	15 c0       	rjmp	.+42     	; 0x5456 <display_vprintf+0x388>
					str[length+i] = buffer[i];
    542c:	29 81       	ldd	r18, Y+1	; 0x01
    542e:	3a 81       	ldd	r19, Y+2	; 0x02
    5430:	8f 85       	ldd	r24, Y+15	; 0x0f
    5432:	98 89       	ldd	r25, Y+16	; 0x10
    5434:	82 0f       	add	r24, r18
    5436:	93 1f       	adc	r25, r19
    5438:	2f 85       	ldd	r18, Y+15	; 0x0f
    543a:	38 89       	ldd	r19, Y+16	; 0x10
    543c:	2d 5e       	subi	r18, 0xED	; 237
    543e:	3e 4c       	sbci	r19, 0xCE	; 206
    5440:	f9 01       	movw	r30, r18
    5442:	20 81       	ld	r18, Z
    5444:	89 5d       	subi	r24, 0xD9	; 217
    5446:	9e 4c       	sbci	r25, 0xCE	; 206
    5448:	fc 01       	movw	r30, r24
    544a:	20 83       	st	Z, r18
				break;

				case 'e':
				double_temp = va_arg(arg, double);
				ftoa_sci(buffer, double_temp);
				for(int i = 0; i < strlen(buffer);i++) {
    544c:	8f 85       	ldd	r24, Y+15	; 0x0f
    544e:	98 89       	ldd	r25, Y+16	; 0x10
    5450:	01 96       	adiw	r24, 0x01	; 1
    5452:	8f 87       	std	Y+15, r24	; 0x0f
    5454:	98 8b       	std	Y+16, r25	; 0x10
    5456:	83 e1       	ldi	r24, 0x13	; 19
    5458:	91 e3       	ldi	r25, 0x31	; 49
    545a:	0e 94 57 30 	call	0x60ae	; 0x60ae <strlen>
    545e:	9c 01       	movw	r18, r24
    5460:	8f 85       	ldd	r24, Y+15	; 0x0f
    5462:	98 89       	ldd	r25, Y+16	; 0x10
    5464:	82 17       	cp	r24, r18
    5466:	93 07       	cpc	r25, r19
    5468:	08 f3       	brcs	.-62     	; 0x542c <display_vprintf+0x35e>
					str[length+i] = buffer[i];
				}
				length += strlen(buffer);
    546a:	83 e1       	ldi	r24, 0x13	; 19
    546c:	91 e3       	ldi	r25, 0x31	; 49
    546e:	0e 94 57 30 	call	0x60ae	; 0x60ae <strlen>
    5472:	9c 01       	movw	r18, r24
    5474:	89 81       	ldd	r24, Y+1	; 0x01
    5476:	9a 81       	ldd	r25, Y+2	; 0x02
    5478:	82 0f       	add	r24, r18
    547a:	93 1f       	adc	r25, r19
    547c:	89 83       	std	Y+1, r24	; 0x01
    547e:	9a 83       	std	Y+2, r25	; 0x02
				break;
    5480:	00 00       	nop
    5482:	1a c0       	rjmp	.+52     	; 0x54b8 <display_vprintf+0x3ea>
			}
		}
		else {
			str[length] = ch;
    5484:	89 81       	ldd	r24, Y+1	; 0x01
    5486:	9a 81       	ldd	r25, Y+2	; 0x02
    5488:	89 5d       	subi	r24, 0xD9	; 217
    548a:	9e 4c       	sbci	r25, 0xCE	; 206
    548c:	2d 89       	ldd	r18, Y+21	; 0x15
    548e:	fc 01       	movw	r30, r24
    5490:	20 83       	st	Z, r18
			if(str[length] == '\n') {
    5492:	89 81       	ldd	r24, Y+1	; 0x01
    5494:	9a 81       	ldd	r25, Y+2	; 0x02
    5496:	89 5d       	subi	r24, 0xD9	; 217
    5498:	9e 4c       	sbci	r25, 0xCE	; 206
    549a:	fc 01       	movw	r30, r24
    549c:	80 81       	ld	r24, Z
    549e:	8a 30       	cpi	r24, 0x0A	; 10
    54a0:	31 f4       	brne	.+12     	; 0x54ae <display_vprintf+0x3e0>
				str[length] = '\0';				
    54a2:	89 81       	ldd	r24, Y+1	; 0x01
    54a4:	9a 81       	ldd	r25, Y+2	; 0x02
    54a6:	89 5d       	subi	r24, 0xD9	; 217
    54a8:	9e 4c       	sbci	r25, 0xCE	; 206
    54aa:	fc 01       	movw	r30, r24
    54ac:	10 82       	st	Z, r1
			}
			length++;
    54ae:	89 81       	ldd	r24, Y+1	; 0x01
    54b0:	9a 81       	ldd	r25, Y+2	; 0x02
    54b2:	01 96       	adiw	r24, 0x01	; 1
    54b4:	89 83       	std	Y+1, r24	; 0x01
    54b6:	9a 83       	std	Y+2, r25	; 0x02
		buffer[i] = 0x00;
	}
	for(int i = 0; i < 20; i++) {
		str[i] = 0x00;
	}
	while ((ch = *fmt++)!=false) {
    54b8:	89 ad       	ldd	r24, Y+57	; 0x39
    54ba:	9a ad       	ldd	r25, Y+58	; 0x3a
    54bc:	9c 01       	movw	r18, r24
    54be:	2f 5f       	subi	r18, 0xFF	; 255
    54c0:	3f 4f       	sbci	r19, 0xFF	; 255
    54c2:	29 af       	std	Y+57, r18	; 0x39
    54c4:	3a af       	std	Y+58, r19	; 0x3a
    54c6:	fc 01       	movw	r30, r24
    54c8:	80 81       	ld	r24, Z
    54ca:	8d 8b       	std	Y+21, r24	; 0x15
    54cc:	8d 89       	ldd	r24, Y+21	; 0x15
    54ce:	88 23       	and	r24, r24
    54d0:	09 f0       	breq	.+2      	; 0x54d4 <display_vprintf+0x406>
    54d2:	34 ce       	rjmp	.-920    	; 0x513c <display_vprintf+0x6e>
				str[length] = '\0';				
			}
			length++;
		}
	}
	if(length + pos >= 20) {
    54d4:	29 81       	ldd	r18, Y+1	; 0x01
    54d6:	3a 81       	ldd	r19, Y+2	; 0x02
    54d8:	8f a9       	ldd	r24, Y+55	; 0x37
    54da:	98 ad       	ldd	r25, Y+56	; 0x38
    54dc:	82 0f       	add	r24, r18
    54de:	93 1f       	adc	r25, r19
    54e0:	44 97       	sbiw	r24, 0x14	; 20
    54e2:	54 f0       	brlt	.+20     	; 0x54f8 <display_vprintf+0x42a>
		length = 20-pos;
    54e4:	24 e1       	ldi	r18, 0x14	; 20
    54e6:	30 e0       	ldi	r19, 0x00	; 0
    54e8:	8f a9       	ldd	r24, Y+55	; 0x37
    54ea:	98 ad       	ldd	r25, Y+56	; 0x38
    54ec:	a9 01       	movw	r20, r18
    54ee:	48 1b       	sub	r20, r24
    54f0:	59 0b       	sbc	r21, r25
    54f2:	ca 01       	movw	r24, r20
    54f4:	89 83       	std	Y+1, r24	; 0x01
    54f6:	9a 83       	std	Y+2, r25	; 0x02
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
    54f8:	19 8a       	std	Y+17, r1	; 0x11
    54fa:	1a 8a       	std	Y+18, r1	; 0x12
    54fc:	0e c0       	rjmp	.+28     	; 0x551a <display_vprintf+0x44c>
		newLine.displayBuffer[i] = 0x00;
    54fe:	9e 01       	movw	r18, r28
    5500:	2f 5d       	subi	r18, 0xDF	; 223
    5502:	3f 4f       	sbci	r19, 0xFF	; 255
    5504:	89 89       	ldd	r24, Y+17	; 0x11
    5506:	9a 89       	ldd	r25, Y+18	; 0x12
    5508:	82 0f       	add	r24, r18
    550a:	93 1f       	adc	r25, r19
    550c:	fc 01       	movw	r30, r24
    550e:	10 82       	st	Z, r1
	}
	if(length + pos >= 20) {
		length = 20-pos;
	}
	displayLine_t newLine;
	for(int i = 0; i < 20; i++) {
    5510:	89 89       	ldd	r24, Y+17	; 0x11
    5512:	9a 89       	ldd	r25, Y+18	; 0x12
    5514:	01 96       	adiw	r24, 0x01	; 1
    5516:	89 8b       	std	Y+17, r24	; 0x11
    5518:	9a 8b       	std	Y+18, r25	; 0x12
    551a:	89 89       	ldd	r24, Y+17	; 0x11
    551c:	9a 89       	ldd	r25, Y+18	; 0x12
    551e:	44 97       	sbiw	r24, 0x14	; 20
    5520:	74 f3       	brlt	.-36     	; 0x54fe <display_vprintf+0x430>
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
    5522:	8d a9       	ldd	r24, Y+53	; 0x35
    5524:	8f 8f       	std	Y+31, r24	; 0x1f
	newLine.displayPos = pos;
    5526:	8f a9       	ldd	r24, Y+55	; 0x37
    5528:	88 a3       	std	Y+32, r24	; 0x20
	for(int i = 0; i < length;i++) {
    552a:	1b 8a       	std	Y+19, r1	; 0x13
    552c:	1c 8a       	std	Y+20, r1	; 0x14
    552e:	14 c0       	rjmp	.+40     	; 0x5558 <display_vprintf+0x48a>
		newLine.displayBuffer[i] = str[i];
    5530:	8b 89       	ldd	r24, Y+19	; 0x13
    5532:	9c 89       	ldd	r25, Y+20	; 0x14
    5534:	89 5d       	subi	r24, 0xD9	; 217
    5536:	9e 4c       	sbci	r25, 0xCE	; 206
    5538:	fc 01       	movw	r30, r24
    553a:	40 81       	ld	r20, Z
    553c:	9e 01       	movw	r18, r28
    553e:	2f 5d       	subi	r18, 0xDF	; 223
    5540:	3f 4f       	sbci	r19, 0xFF	; 255
    5542:	8b 89       	ldd	r24, Y+19	; 0x13
    5544:	9c 89       	ldd	r25, Y+20	; 0x14
    5546:	82 0f       	add	r24, r18
    5548:	93 1f       	adc	r25, r19
    554a:	fc 01       	movw	r30, r24
    554c:	40 83       	st	Z, r20
	for(int i = 0; i < 20; i++) {
		newLine.displayBuffer[i] = 0x00;
	}
	newLine.displayLine = line;
	newLine.displayPos = pos;
	for(int i = 0; i < length;i++) {
    554e:	8b 89       	ldd	r24, Y+19	; 0x13
    5550:	9c 89       	ldd	r25, Y+20	; 0x14
    5552:	01 96       	adiw	r24, 0x01	; 1
    5554:	8b 8b       	std	Y+19, r24	; 0x13
    5556:	9c 8b       	std	Y+20, r25	; 0x14
    5558:	2b 89       	ldd	r18, Y+19	; 0x13
    555a:	3c 89       	ldd	r19, Y+20	; 0x14
    555c:	89 81       	ldd	r24, Y+1	; 0x01
    555e:	9a 81       	ldd	r25, Y+2	; 0x02
    5560:	28 17       	cp	r18, r24
    5562:	39 07       	cpc	r19, r25
    5564:	2c f3       	brlt	.-54     	; 0x5530 <display_vprintf+0x462>
		newLine.displayBuffer[i] = str[i];
	}	
	xQueueSend(displayLineQueue, (void *) &newLine, portMAX_DELAY);
    5566:	80 91 40 31 	lds	r24, 0x3140	; 0x803140 <displayLineQueue>
    556a:	90 91 41 31 	lds	r25, 0x3141	; 0x803141 <displayLineQueue+0x1>
    556e:	be 01       	movw	r22, r28
    5570:	61 5e       	subi	r22, 0xE1	; 225
    5572:	7f 4f       	sbci	r23, 0xFF	; 255
    5574:	00 e0       	ldi	r16, 0x00	; 0
    5576:	2f ef       	ldi	r18, 0xFF	; 255
    5578:	3f ef       	ldi	r19, 0xFF	; 255
    557a:	a9 01       	movw	r20, r18
    557c:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <xQueueGenericSend>
	
	
	return length;
    5580:	89 81       	ldd	r24, Y+1	; 0x01
    5582:	9a 81       	ldd	r25, Y+2	; 0x02
}
    5584:	ec 96       	adiw	r28, 0x3c	; 60
    5586:	cd bf       	out	0x3d, r28	; 61
    5588:	de bf       	out	0x3e, r29	; 62
    558a:	df 91       	pop	r29
    558c:	cf 91       	pop	r28
    558e:	0f 91       	pop	r16
    5590:	08 95       	ret

00005592 <normalize>:

static int normalize(double *val) {
    5592:	cf 93       	push	r28
    5594:	df 93       	push	r29
    5596:	cd b7       	in	r28, 0x3d	; 61
    5598:	de b7       	in	r29, 0x3e	; 62
    559a:	28 97       	sbiw	r28, 0x08	; 8
    559c:	cd bf       	out	0x3d, r28	; 61
    559e:	de bf       	out	0x3e, r29	; 62
    55a0:	8f 83       	std	Y+7, r24	; 0x07
    55a2:	98 87       	std	Y+8, r25	; 0x08
    int exponent = 0;
    55a4:	19 82       	std	Y+1, r1	; 0x01
    55a6:	1a 82       	std	Y+2, r1	; 0x02
    double value = *val;
    55a8:	8f 81       	ldd	r24, Y+7	; 0x07
    55aa:	98 85       	ldd	r25, Y+8	; 0x08
    55ac:	fc 01       	movw	r30, r24
    55ae:	80 81       	ld	r24, Z
    55b0:	91 81       	ldd	r25, Z+1	; 0x01
    55b2:	a2 81       	ldd	r26, Z+2	; 0x02
    55b4:	b3 81       	ldd	r27, Z+3	; 0x03
    55b6:	8b 83       	std	Y+3, r24	; 0x03
    55b8:	9c 83       	std	Y+4, r25	; 0x04
    55ba:	ad 83       	std	Y+5, r26	; 0x05
    55bc:	be 83       	std	Y+6, r27	; 0x06

    while (value >= 1.0) {
    55be:	15 c0       	rjmp	.+42     	; 0x55ea <normalize+0x58>
        value /= 10.0;
    55c0:	20 e0       	ldi	r18, 0x00	; 0
    55c2:	30 e0       	ldi	r19, 0x00	; 0
    55c4:	40 e2       	ldi	r20, 0x20	; 32
    55c6:	51 e4       	ldi	r21, 0x41	; 65
    55c8:	6b 81       	ldd	r22, Y+3	; 0x03
    55ca:	7c 81       	ldd	r23, Y+4	; 0x04
    55cc:	8d 81       	ldd	r24, Y+5	; 0x05
    55ce:	9e 81       	ldd	r25, Y+6	; 0x06
    55d0:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <__divsf3>
    55d4:	dc 01       	movw	r26, r24
    55d6:	cb 01       	movw	r24, r22
    55d8:	8b 83       	std	Y+3, r24	; 0x03
    55da:	9c 83       	std	Y+4, r25	; 0x04
    55dc:	ad 83       	std	Y+5, r26	; 0x05
    55de:	be 83       	std	Y+6, r27	; 0x06
        ++exponent;
    55e0:	89 81       	ldd	r24, Y+1	; 0x01
    55e2:	9a 81       	ldd	r25, Y+2	; 0x02
    55e4:	01 96       	adiw	r24, 0x01	; 1
    55e6:	89 83       	std	Y+1, r24	; 0x01
    55e8:	9a 83       	std	Y+2, r25	; 0x02

static int normalize(double *val) {
    int exponent = 0;
    double value = *val;

    while (value >= 1.0) {
    55ea:	20 e0       	ldi	r18, 0x00	; 0
    55ec:	30 e0       	ldi	r19, 0x00	; 0
    55ee:	40 e8       	ldi	r20, 0x80	; 128
    55f0:	5f e3       	ldi	r21, 0x3F	; 63
    55f2:	6b 81       	ldd	r22, Y+3	; 0x03
    55f4:	7c 81       	ldd	r23, Y+4	; 0x04
    55f6:	8d 81       	ldd	r24, Y+5	; 0x05
    55f8:	9e 81       	ldd	r25, Y+6	; 0x06
    55fa:	0e 94 72 2f 	call	0x5ee4	; 0x5ee4 <__gesf2>
    55fe:	88 23       	and	r24, r24
    5600:	fc f6       	brge	.-66     	; 0x55c0 <normalize+0x2e>
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    5602:	15 c0       	rjmp	.+42     	; 0x562e <normalize+0x9c>
        value *= 10.0;
    5604:	20 e0       	ldi	r18, 0x00	; 0
    5606:	30 e0       	ldi	r19, 0x00	; 0
    5608:	40 e2       	ldi	r20, 0x20	; 32
    560a:	51 e4       	ldi	r21, 0x41	; 65
    560c:	6b 81       	ldd	r22, Y+3	; 0x03
    560e:	7c 81       	ldd	r23, Y+4	; 0x04
    5610:	8d 81       	ldd	r24, Y+5	; 0x05
    5612:	9e 81       	ldd	r25, Y+6	; 0x06
    5614:	0e 94 77 2f 	call	0x5eee	; 0x5eee <__mulsf3>
    5618:	dc 01       	movw	r26, r24
    561a:	cb 01       	movw	r24, r22
    561c:	8b 83       	std	Y+3, r24	; 0x03
    561e:	9c 83       	std	Y+4, r25	; 0x04
    5620:	ad 83       	std	Y+5, r26	; 0x05
    5622:	be 83       	std	Y+6, r27	; 0x06
        --exponent;
    5624:	89 81       	ldd	r24, Y+1	; 0x01
    5626:	9a 81       	ldd	r25, Y+2	; 0x02
    5628:	01 97       	sbiw	r24, 0x01	; 1
    562a:	89 83       	std	Y+1, r24	; 0x01
    562c:	9a 83       	std	Y+2, r25	; 0x02
    while (value >= 1.0) {
        value /= 10.0;
        ++exponent;
    }

    while (value < 0.1) {
    562e:	2d ec       	ldi	r18, 0xCD	; 205
    5630:	3c ec       	ldi	r19, 0xCC	; 204
    5632:	4c ec       	ldi	r20, 0xCC	; 204
    5634:	5d e3       	ldi	r21, 0x3D	; 61
    5636:	6b 81       	ldd	r22, Y+3	; 0x03
    5638:	7c 81       	ldd	r23, Y+4	; 0x04
    563a:	8d 81       	ldd	r24, Y+5	; 0x05
    563c:	9e 81       	ldd	r25, Y+6	; 0x06
    563e:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__cmpsf2>
    5642:	88 23       	and	r24, r24
    5644:	fc f2       	brlt	.-66     	; 0x5604 <normalize+0x72>
        value *= 10.0;
        --exponent;
    }
    *val = value;
    5646:	2f 81       	ldd	r18, Y+7	; 0x07
    5648:	38 85       	ldd	r19, Y+8	; 0x08
    564a:	8b 81       	ldd	r24, Y+3	; 0x03
    564c:	9c 81       	ldd	r25, Y+4	; 0x04
    564e:	ad 81       	ldd	r26, Y+5	; 0x05
    5650:	be 81       	ldd	r27, Y+6	; 0x06
    5652:	f9 01       	movw	r30, r18
    5654:	80 83       	st	Z, r24
    5656:	91 83       	std	Z+1, r25	; 0x01
    5658:	a2 83       	std	Z+2, r26	; 0x02
    565a:	b3 83       	std	Z+3, r27	; 0x03
    return exponent;
    565c:	89 81       	ldd	r24, Y+1	; 0x01
    565e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    5660:	28 96       	adiw	r28, 0x08	; 8
    5662:	cd bf       	out	0x3d, r28	; 61
    5664:	de bf       	out	0x3e, r29	; 62
    5666:	df 91       	pop	r29
    5668:	cf 91       	pop	r28
    566a:	08 95       	ret

0000566c <ftoa_fixed>:

static void ftoa_fixed(char *buffer, double value) {  
    566c:	cf 92       	push	r12
    566e:	df 92       	push	r13
    5670:	ef 92       	push	r14
    5672:	ff 92       	push	r15
    5674:	cf 93       	push	r28
    5676:	df 93       	push	r29
    5678:	cd b7       	in	r28, 0x3d	; 61
    567a:	de b7       	in	r29, 0x3e	; 62
    567c:	2e 97       	sbiw	r28, 0x0e	; 14
    567e:	cd bf       	out	0x3d, r28	; 61
    5680:	de bf       	out	0x3e, r29	; 62
    5682:	89 87       	std	Y+9, r24	; 0x09
    5684:	9a 87       	std	Y+10, r25	; 0x0a
    5686:	4b 87       	std	Y+11, r20	; 0x0b
    5688:	5c 87       	std	Y+12, r21	; 0x0c
    568a:	6d 87       	std	Y+13, r22	; 0x0d
    568c:	7e 87       	std	Y+14, r23	; 0x0e
     * The largest value we expect is an IEEE 754 double precision real, with maximum magnitude of approximately
     * e+308. The C standard requires an implementation to allow a single conversion to produce up to 512 
     * characters, so that's what we really expect as the buffer size.     
     */

    int exponent = 0;
    568e:	19 82       	std	Y+1, r1	; 0x01
    5690:	1a 82       	std	Y+2, r1	; 0x02
    int places = 0;
    5692:	1b 82       	std	Y+3, r1	; 0x03
    5694:	1c 82       	std	Y+4, r1	; 0x04
    static const int width = 4;

    if (value == 0.0) {
    5696:	8b 85       	ldd	r24, Y+11	; 0x0b
    5698:	9c 85       	ldd	r25, Y+12	; 0x0c
    569a:	ad 85       	ldd	r26, Y+13	; 0x0d
    569c:	be 85       	ldd	r27, Y+14	; 0x0e
    569e:	20 e0       	ldi	r18, 0x00	; 0
    56a0:	30 e0       	ldi	r19, 0x00	; 0
    56a2:	a9 01       	movw	r20, r18
    56a4:	bc 01       	movw	r22, r24
    56a6:	cd 01       	movw	r24, r26
    56a8:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__cmpsf2>
    56ac:	88 23       	and	r24, r24
    56ae:	59 f4       	brne	.+22     	; 0x56c6 <ftoa_fixed+0x5a>
        buffer[0] = '0';
    56b0:	89 85       	ldd	r24, Y+9	; 0x09
    56b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    56b4:	20 e3       	ldi	r18, 0x30	; 48
    56b6:	fc 01       	movw	r30, r24
    56b8:	20 83       	st	Z, r18
        buffer[1] = '\0';
    56ba:	89 85       	ldd	r24, Y+9	; 0x09
    56bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    56be:	01 96       	adiw	r24, 0x01	; 1
    56c0:	fc 01       	movw	r30, r24
    56c2:	10 82       	st	Z, r1
        return;
    56c4:	18 c1       	rjmp	.+560    	; 0x58f6 <ftoa_fixed+0x28a>
    }         

    if (value < 0.0) {
    56c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    56c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    56ca:	ad 85       	ldd	r26, Y+13	; 0x0d
    56cc:	be 85       	ldd	r27, Y+14	; 0x0e
    56ce:	20 e0       	ldi	r18, 0x00	; 0
    56d0:	30 e0       	ldi	r19, 0x00	; 0
    56d2:	a9 01       	movw	r20, r18
    56d4:	bc 01       	movw	r22, r24
    56d6:	cd 01       	movw	r24, r26
    56d8:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__cmpsf2>
    56dc:	88 23       	and	r24, r24
    56de:	9c f4       	brge	.+38     	; 0x5706 <ftoa_fixed+0x9a>
        *buffer++ = '-';
    56e0:	89 85       	ldd	r24, Y+9	; 0x09
    56e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    56e4:	9c 01       	movw	r18, r24
    56e6:	2f 5f       	subi	r18, 0xFF	; 255
    56e8:	3f 4f       	sbci	r19, 0xFF	; 255
    56ea:	29 87       	std	Y+9, r18	; 0x09
    56ec:	3a 87       	std	Y+10, r19	; 0x0a
    56ee:	2d e2       	ldi	r18, 0x2D	; 45
    56f0:	fc 01       	movw	r30, r24
    56f2:	20 83       	st	Z, r18
        value = -value;
    56f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    56f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    56f8:	ad 85       	ldd	r26, Y+13	; 0x0d
    56fa:	be 85       	ldd	r27, Y+14	; 0x0e
    56fc:	b0 58       	subi	r27, 0x80	; 128
    56fe:	8b 87       	std	Y+11, r24	; 0x0b
    5700:	9c 87       	std	Y+12, r25	; 0x0c
    5702:	ad 87       	std	Y+13, r26	; 0x0d
    5704:	be 87       	std	Y+14, r27	; 0x0e
    }

    exponent = normalize(&value);
    5706:	ce 01       	movw	r24, r28
    5708:	0b 96       	adiw	r24, 0x0b	; 11
    570a:	0e 94 c9 2a 	call	0x5592	; 0x5592 <normalize>
    570e:	89 83       	std	Y+1, r24	; 0x01
    5710:	9a 83       	std	Y+2, r25	; 0x02

    while (exponent > 0) {
    5712:	53 c0       	rjmp	.+166    	; 0x57ba <ftoa_fixed+0x14e>
        int digit = value * 10;
    5714:	8b 85       	ldd	r24, Y+11	; 0x0b
    5716:	9c 85       	ldd	r25, Y+12	; 0x0c
    5718:	ad 85       	ldd	r26, Y+13	; 0x0d
    571a:	be 85       	ldd	r27, Y+14	; 0x0e
    571c:	20 e0       	ldi	r18, 0x00	; 0
    571e:	30 e0       	ldi	r19, 0x00	; 0
    5720:	40 e2       	ldi	r20, 0x20	; 32
    5722:	51 e4       	ldi	r21, 0x41	; 65
    5724:	bc 01       	movw	r22, r24
    5726:	cd 01       	movw	r24, r26
    5728:	0e 94 77 2f 	call	0x5eee	; 0x5eee <__mulsf3>
    572c:	dc 01       	movw	r26, r24
    572e:	cb 01       	movw	r24, r22
    5730:	bc 01       	movw	r22, r24
    5732:	cd 01       	movw	r24, r26
    5734:	0e 94 8a 2e 	call	0x5d14	; 0x5d14 <__fixsfsi>
    5738:	dc 01       	movw	r26, r24
    573a:	cb 01       	movw	r24, r22
    573c:	8d 83       	std	Y+5, r24	; 0x05
    573e:	9e 83       	std	Y+6, r25	; 0x06
        *buffer++ = digit + '0';
    5740:	89 85       	ldd	r24, Y+9	; 0x09
    5742:	9a 85       	ldd	r25, Y+10	; 0x0a
    5744:	9c 01       	movw	r18, r24
    5746:	2f 5f       	subi	r18, 0xFF	; 255
    5748:	3f 4f       	sbci	r19, 0xFF	; 255
    574a:	29 87       	std	Y+9, r18	; 0x09
    574c:	3a 87       	std	Y+10, r19	; 0x0a
    574e:	2d 81       	ldd	r18, Y+5	; 0x05
    5750:	20 5d       	subi	r18, 0xD0	; 208
    5752:	fc 01       	movw	r30, r24
    5754:	20 83       	st	Z, r18
        value = value * 10 - digit;
    5756:	8b 85       	ldd	r24, Y+11	; 0x0b
    5758:	9c 85       	ldd	r25, Y+12	; 0x0c
    575a:	ad 85       	ldd	r26, Y+13	; 0x0d
    575c:	be 85       	ldd	r27, Y+14	; 0x0e
    575e:	20 e0       	ldi	r18, 0x00	; 0
    5760:	30 e0       	ldi	r19, 0x00	; 0
    5762:	40 e2       	ldi	r20, 0x20	; 32
    5764:	51 e4       	ldi	r21, 0x41	; 65
    5766:	bc 01       	movw	r22, r24
    5768:	cd 01       	movw	r24, r26
    576a:	0e 94 77 2f 	call	0x5eee	; 0x5eee <__mulsf3>
    576e:	dc 01       	movw	r26, r24
    5770:	cb 01       	movw	r24, r22
    5772:	6c 01       	movw	r12, r24
    5774:	7d 01       	movw	r14, r26
    5776:	8d 81       	ldd	r24, Y+5	; 0x05
    5778:	9e 81       	ldd	r25, Y+6	; 0x06
    577a:	09 2e       	mov	r0, r25
    577c:	00 0c       	add	r0, r0
    577e:	aa 0b       	sbc	r26, r26
    5780:	bb 0b       	sbc	r27, r27
    5782:	bc 01       	movw	r22, r24
    5784:	cd 01       	movw	r24, r26
    5786:	0e 94 c2 2e 	call	0x5d84	; 0x5d84 <__floatsisf>
    578a:	dc 01       	movw	r26, r24
    578c:	cb 01       	movw	r24, r22
    578e:	9c 01       	movw	r18, r24
    5790:	ad 01       	movw	r20, r26
    5792:	c7 01       	movw	r24, r14
    5794:	b6 01       	movw	r22, r12
    5796:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__subsf3>
    579a:	dc 01       	movw	r26, r24
    579c:	cb 01       	movw	r24, r22
    579e:	8b 87       	std	Y+11, r24	; 0x0b
    57a0:	9c 87       	std	Y+12, r25	; 0x0c
    57a2:	ad 87       	std	Y+13, r26	; 0x0d
    57a4:	be 87       	std	Y+14, r27	; 0x0e
        ++places;
    57a6:	8b 81       	ldd	r24, Y+3	; 0x03
    57a8:	9c 81       	ldd	r25, Y+4	; 0x04
    57aa:	01 96       	adiw	r24, 0x01	; 1
    57ac:	8b 83       	std	Y+3, r24	; 0x03
    57ae:	9c 83       	std	Y+4, r25	; 0x04
        --exponent;
    57b0:	89 81       	ldd	r24, Y+1	; 0x01
    57b2:	9a 81       	ldd	r25, Y+2	; 0x02
    57b4:	01 97       	sbiw	r24, 0x01	; 1
    57b6:	89 83       	std	Y+1, r24	; 0x01
    57b8:	9a 83       	std	Y+2, r25	; 0x02
        value = -value;
    }

    exponent = normalize(&value);

    while (exponent > 0) {
    57ba:	89 81       	ldd	r24, Y+1	; 0x01
    57bc:	9a 81       	ldd	r25, Y+2	; 0x02
    57be:	18 16       	cp	r1, r24
    57c0:	19 06       	cpc	r1, r25
    57c2:	0c f4       	brge	.+2      	; 0x57c6 <ftoa_fixed+0x15a>
    57c4:	a7 cf       	rjmp	.-178    	; 0x5714 <ftoa_fixed+0xa8>
        value = value * 10 - digit;
        ++places;
        --exponent;
    }

    if (places == 0)
    57c6:	8b 81       	ldd	r24, Y+3	; 0x03
    57c8:	9c 81       	ldd	r25, Y+4	; 0x04
    57ca:	89 2b       	or	r24, r25
    57cc:	51 f4       	brne	.+20     	; 0x57e2 <ftoa_fixed+0x176>
        *buffer++ = '0';
    57ce:	89 85       	ldd	r24, Y+9	; 0x09
    57d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    57d2:	9c 01       	movw	r18, r24
    57d4:	2f 5f       	subi	r18, 0xFF	; 255
    57d6:	3f 4f       	sbci	r19, 0xFF	; 255
    57d8:	29 87       	std	Y+9, r18	; 0x09
    57da:	3a 87       	std	Y+10, r19	; 0x0a
    57dc:	20 e3       	ldi	r18, 0x30	; 48
    57de:	fc 01       	movw	r30, r24
    57e0:	20 83       	st	Z, r18

    *buffer++ = '.';
    57e2:	89 85       	ldd	r24, Y+9	; 0x09
    57e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    57e6:	9c 01       	movw	r18, r24
    57e8:	2f 5f       	subi	r18, 0xFF	; 255
    57ea:	3f 4f       	sbci	r19, 0xFF	; 255
    57ec:	29 87       	std	Y+9, r18	; 0x09
    57ee:	3a 87       	std	Y+10, r19	; 0x0a
    57f0:	2e e2       	ldi	r18, 0x2E	; 46
    57f2:	fc 01       	movw	r30, r24
    57f4:	20 83       	st	Z, r18

    while (exponent < 0 && places < width) {
    57f6:	14 c0       	rjmp	.+40     	; 0x5820 <ftoa_fixed+0x1b4>
        *buffer++ = '0';
    57f8:	89 85       	ldd	r24, Y+9	; 0x09
    57fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    57fc:	9c 01       	movw	r18, r24
    57fe:	2f 5f       	subi	r18, 0xFF	; 255
    5800:	3f 4f       	sbci	r19, 0xFF	; 255
    5802:	29 87       	std	Y+9, r18	; 0x09
    5804:	3a 87       	std	Y+10, r19	; 0x0a
    5806:	20 e3       	ldi	r18, 0x30	; 48
    5808:	fc 01       	movw	r30, r24
    580a:	20 83       	st	Z, r18
        --exponent;
    580c:	89 81       	ldd	r24, Y+1	; 0x01
    580e:	9a 81       	ldd	r25, Y+2	; 0x02
    5810:	01 97       	sbiw	r24, 0x01	; 1
    5812:	89 83       	std	Y+1, r24	; 0x01
    5814:	9a 83       	std	Y+2, r25	; 0x02
        ++places;
    5816:	8b 81       	ldd	r24, Y+3	; 0x03
    5818:	9c 81       	ldd	r25, Y+4	; 0x04
    581a:	01 96       	adiw	r24, 0x01	; 1
    581c:	8b 83       	std	Y+3, r24	; 0x03
    581e:	9c 83       	std	Y+4, r25	; 0x04
    if (places == 0)
        *buffer++ = '0';

    *buffer++ = '.';

    while (exponent < 0 && places < width) {
    5820:	89 81       	ldd	r24, Y+1	; 0x01
    5822:	9a 81       	ldd	r25, Y+2	; 0x02
    5824:	99 23       	and	r25, r25
    5826:	0c f0       	brlt	.+2      	; 0x582a <ftoa_fixed+0x1be>
    5828:	58 c0       	rjmp	.+176    	; 0x58da <ftoa_fixed+0x26e>
    582a:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <width.5062>
    582e:	90 91 c3 20 	lds	r25, 0x20C3	; 0x8020c3 <width.5062+0x1>
    5832:	2b 81       	ldd	r18, Y+3	; 0x03
    5834:	3c 81       	ldd	r19, Y+4	; 0x04
    5836:	28 17       	cp	r18, r24
    5838:	39 07       	cpc	r19, r25
    583a:	f4 f2       	brlt	.-68     	; 0x57f8 <ftoa_fixed+0x18c>
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    583c:	4e c0       	rjmp	.+156    	; 0x58da <ftoa_fixed+0x26e>
        int digit = value * 10.0;
    583e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5840:	9c 85       	ldd	r25, Y+12	; 0x0c
    5842:	ad 85       	ldd	r26, Y+13	; 0x0d
    5844:	be 85       	ldd	r27, Y+14	; 0x0e
    5846:	20 e0       	ldi	r18, 0x00	; 0
    5848:	30 e0       	ldi	r19, 0x00	; 0
    584a:	40 e2       	ldi	r20, 0x20	; 32
    584c:	51 e4       	ldi	r21, 0x41	; 65
    584e:	bc 01       	movw	r22, r24
    5850:	cd 01       	movw	r24, r26
    5852:	0e 94 77 2f 	call	0x5eee	; 0x5eee <__mulsf3>
    5856:	dc 01       	movw	r26, r24
    5858:	cb 01       	movw	r24, r22
    585a:	bc 01       	movw	r22, r24
    585c:	cd 01       	movw	r24, r26
    585e:	0e 94 8a 2e 	call	0x5d14	; 0x5d14 <__fixsfsi>
    5862:	dc 01       	movw	r26, r24
    5864:	cb 01       	movw	r24, r22
    5866:	8f 83       	std	Y+7, r24	; 0x07
    5868:	98 87       	std	Y+8, r25	; 0x08
        *buffer++ = digit + '0';
    586a:	89 85       	ldd	r24, Y+9	; 0x09
    586c:	9a 85       	ldd	r25, Y+10	; 0x0a
    586e:	9c 01       	movw	r18, r24
    5870:	2f 5f       	subi	r18, 0xFF	; 255
    5872:	3f 4f       	sbci	r19, 0xFF	; 255
    5874:	29 87       	std	Y+9, r18	; 0x09
    5876:	3a 87       	std	Y+10, r19	; 0x0a
    5878:	2f 81       	ldd	r18, Y+7	; 0x07
    587a:	20 5d       	subi	r18, 0xD0	; 208
    587c:	fc 01       	movw	r30, r24
    587e:	20 83       	st	Z, r18
        value = value * 10.0 - digit;
    5880:	8b 85       	ldd	r24, Y+11	; 0x0b
    5882:	9c 85       	ldd	r25, Y+12	; 0x0c
    5884:	ad 85       	ldd	r26, Y+13	; 0x0d
    5886:	be 85       	ldd	r27, Y+14	; 0x0e
    5888:	20 e0       	ldi	r18, 0x00	; 0
    588a:	30 e0       	ldi	r19, 0x00	; 0
    588c:	40 e2       	ldi	r20, 0x20	; 32
    588e:	51 e4       	ldi	r21, 0x41	; 65
    5890:	bc 01       	movw	r22, r24
    5892:	cd 01       	movw	r24, r26
    5894:	0e 94 77 2f 	call	0x5eee	; 0x5eee <__mulsf3>
    5898:	dc 01       	movw	r26, r24
    589a:	cb 01       	movw	r24, r22
    589c:	6c 01       	movw	r12, r24
    589e:	7d 01       	movw	r14, r26
    58a0:	8f 81       	ldd	r24, Y+7	; 0x07
    58a2:	98 85       	ldd	r25, Y+8	; 0x08
    58a4:	09 2e       	mov	r0, r25
    58a6:	00 0c       	add	r0, r0
    58a8:	aa 0b       	sbc	r26, r26
    58aa:	bb 0b       	sbc	r27, r27
    58ac:	bc 01       	movw	r22, r24
    58ae:	cd 01       	movw	r24, r26
    58b0:	0e 94 c2 2e 	call	0x5d84	; 0x5d84 <__floatsisf>
    58b4:	dc 01       	movw	r26, r24
    58b6:	cb 01       	movw	r24, r22
    58b8:	9c 01       	movw	r18, r24
    58ba:	ad 01       	movw	r20, r26
    58bc:	c7 01       	movw	r24, r14
    58be:	b6 01       	movw	r22, r12
    58c0:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__subsf3>
    58c4:	dc 01       	movw	r26, r24
    58c6:	cb 01       	movw	r24, r22
    58c8:	8b 87       	std	Y+11, r24	; 0x0b
    58ca:	9c 87       	std	Y+12, r25	; 0x0c
    58cc:	ad 87       	std	Y+13, r26	; 0x0d
    58ce:	be 87       	std	Y+14, r27	; 0x0e
        ++places;
    58d0:	8b 81       	ldd	r24, Y+3	; 0x03
    58d2:	9c 81       	ldd	r25, Y+4	; 0x04
    58d4:	01 96       	adiw	r24, 0x01	; 1
    58d6:	8b 83       	std	Y+3, r24	; 0x03
    58d8:	9c 83       	std	Y+4, r25	; 0x04
        *buffer++ = '0';
        --exponent;
        ++places;
    }

    while (places < width) {
    58da:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <width.5062>
    58de:	90 91 c3 20 	lds	r25, 0x20C3	; 0x8020c3 <width.5062+0x1>
    58e2:	2b 81       	ldd	r18, Y+3	; 0x03
    58e4:	3c 81       	ldd	r19, Y+4	; 0x04
    58e6:	28 17       	cp	r18, r24
    58e8:	39 07       	cpc	r19, r25
    58ea:	0c f4       	brge	.+2      	; 0x58ee <ftoa_fixed+0x282>
    58ec:	a8 cf       	rjmp	.-176    	; 0x583e <ftoa_fixed+0x1d2>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
        ++places;
    }
    *buffer = '\0';
    58ee:	89 85       	ldd	r24, Y+9	; 0x09
    58f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    58f2:	fc 01       	movw	r30, r24
    58f4:	10 82       	st	Z, r1
}
    58f6:	2e 96       	adiw	r28, 0x0e	; 14
    58f8:	cd bf       	out	0x3d, r28	; 61
    58fa:	de bf       	out	0x3e, r29	; 62
    58fc:	df 91       	pop	r29
    58fe:	cf 91       	pop	r28
    5900:	ff 90       	pop	r15
    5902:	ef 90       	pop	r14
    5904:	df 90       	pop	r13
    5906:	cf 90       	pop	r12
    5908:	08 95       	ret

0000590a <ftoa_sci>:

void ftoa_sci(char *buffer, double value) {
    590a:	cf 92       	push	r12
    590c:	df 92       	push	r13
    590e:	ef 92       	push	r14
    5910:	ff 92       	push	r15
    5912:	cf 93       	push	r28
    5914:	df 93       	push	r29
    5916:	cd b7       	in	r28, 0x3d	; 61
    5918:	de b7       	in	r29, 0x3e	; 62
    591a:	2e 97       	sbiw	r28, 0x0e	; 14
    591c:	cd bf       	out	0x3d, r28	; 61
    591e:	de bf       	out	0x3e, r29	; 62
    5920:	89 87       	std	Y+9, r24	; 0x09
    5922:	9a 87       	std	Y+10, r25	; 0x0a
    5924:	4b 87       	std	Y+11, r20	; 0x0b
    5926:	5c 87       	std	Y+12, r21	; 0x0c
    5928:	6d 87       	std	Y+13, r22	; 0x0d
    592a:	7e 87       	std	Y+14, r23	; 0x0e
    int exponent = 0;    
    592c:	1b 82       	std	Y+3, r1	; 0x03
    592e:	1c 82       	std	Y+4, r1	; 0x04
    static const int width = 4;

    if (value == 0.0) {
    5930:	8b 85       	ldd	r24, Y+11	; 0x0b
    5932:	9c 85       	ldd	r25, Y+12	; 0x0c
    5934:	ad 85       	ldd	r26, Y+13	; 0x0d
    5936:	be 85       	ldd	r27, Y+14	; 0x0e
    5938:	20 e0       	ldi	r18, 0x00	; 0
    593a:	30 e0       	ldi	r19, 0x00	; 0
    593c:	a9 01       	movw	r20, r18
    593e:	bc 01       	movw	r22, r24
    5940:	cd 01       	movw	r24, r26
    5942:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__cmpsf2>
    5946:	88 23       	and	r24, r24
    5948:	59 f4       	brne	.+22     	; 0x5960 <ftoa_sci+0x56>
        buffer[0] = '0';
    594a:	89 85       	ldd	r24, Y+9	; 0x09
    594c:	9a 85       	ldd	r25, Y+10	; 0x0a
    594e:	20 e3       	ldi	r18, 0x30	; 48
    5950:	fc 01       	movw	r30, r24
    5952:	20 83       	st	Z, r18
        buffer[1] = '\0';
    5954:	89 85       	ldd	r24, Y+9	; 0x09
    5956:	9a 85       	ldd	r25, Y+10	; 0x0a
    5958:	01 96       	adiw	r24, 0x01	; 1
    595a:	fc 01       	movw	r30, r24
    595c:	10 82       	st	Z, r1
        return;
    595e:	ec c0       	rjmp	.+472    	; 0x5b38 <ftoa_sci+0x22e>
    }

    if (value < 0.0) {
    5960:	8b 85       	ldd	r24, Y+11	; 0x0b
    5962:	9c 85       	ldd	r25, Y+12	; 0x0c
    5964:	ad 85       	ldd	r26, Y+13	; 0x0d
    5966:	be 85       	ldd	r27, Y+14	; 0x0e
    5968:	20 e0       	ldi	r18, 0x00	; 0
    596a:	30 e0       	ldi	r19, 0x00	; 0
    596c:	a9 01       	movw	r20, r18
    596e:	bc 01       	movw	r22, r24
    5970:	cd 01       	movw	r24, r26
    5972:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__cmpsf2>
    5976:	88 23       	and	r24, r24
    5978:	9c f4       	brge	.+38     	; 0x59a0 <ftoa_sci+0x96>
        *buffer++ = '-';
    597a:	89 85       	ldd	r24, Y+9	; 0x09
    597c:	9a 85       	ldd	r25, Y+10	; 0x0a
    597e:	9c 01       	movw	r18, r24
    5980:	2f 5f       	subi	r18, 0xFF	; 255
    5982:	3f 4f       	sbci	r19, 0xFF	; 255
    5984:	29 87       	std	Y+9, r18	; 0x09
    5986:	3a 87       	std	Y+10, r19	; 0x0a
    5988:	2d e2       	ldi	r18, 0x2D	; 45
    598a:	fc 01       	movw	r30, r24
    598c:	20 83       	st	Z, r18
        value = -value;
    598e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5990:	9c 85       	ldd	r25, Y+12	; 0x0c
    5992:	ad 85       	ldd	r26, Y+13	; 0x0d
    5994:	be 85       	ldd	r27, Y+14	; 0x0e
    5996:	b0 58       	subi	r27, 0x80	; 128
    5998:	8b 87       	std	Y+11, r24	; 0x0b
    599a:	9c 87       	std	Y+12, r25	; 0x0c
    599c:	ad 87       	std	Y+13, r26	; 0x0d
    599e:	be 87       	std	Y+14, r27	; 0x0e
    }

    exponent = normalize(&value);
    59a0:	ce 01       	movw	r24, r28
    59a2:	0b 96       	adiw	r24, 0x0b	; 11
    59a4:	0e 94 c9 2a 	call	0x5592	; 0x5592 <normalize>
    59a8:	8b 83       	std	Y+3, r24	; 0x03
    59aa:	9c 83       	std	Y+4, r25	; 0x04

    int digit = value * 10.0;
    59ac:	8b 85       	ldd	r24, Y+11	; 0x0b
    59ae:	9c 85       	ldd	r25, Y+12	; 0x0c
    59b0:	ad 85       	ldd	r26, Y+13	; 0x0d
    59b2:	be 85       	ldd	r27, Y+14	; 0x0e
    59b4:	20 e0       	ldi	r18, 0x00	; 0
    59b6:	30 e0       	ldi	r19, 0x00	; 0
    59b8:	40 e2       	ldi	r20, 0x20	; 32
    59ba:	51 e4       	ldi	r21, 0x41	; 65
    59bc:	bc 01       	movw	r22, r24
    59be:	cd 01       	movw	r24, r26
    59c0:	0e 94 77 2f 	call	0x5eee	; 0x5eee <__mulsf3>
    59c4:	dc 01       	movw	r26, r24
    59c6:	cb 01       	movw	r24, r22
    59c8:	bc 01       	movw	r22, r24
    59ca:	cd 01       	movw	r24, r26
    59cc:	0e 94 8a 2e 	call	0x5d14	; 0x5d14 <__fixsfsi>
    59d0:	dc 01       	movw	r26, r24
    59d2:	cb 01       	movw	r24, r22
    59d4:	8d 83       	std	Y+5, r24	; 0x05
    59d6:	9e 83       	std	Y+6, r25	; 0x06
    *buffer++ = digit + '0';
    59d8:	89 85       	ldd	r24, Y+9	; 0x09
    59da:	9a 85       	ldd	r25, Y+10	; 0x0a
    59dc:	9c 01       	movw	r18, r24
    59de:	2f 5f       	subi	r18, 0xFF	; 255
    59e0:	3f 4f       	sbci	r19, 0xFF	; 255
    59e2:	29 87       	std	Y+9, r18	; 0x09
    59e4:	3a 87       	std	Y+10, r19	; 0x0a
    59e6:	2d 81       	ldd	r18, Y+5	; 0x05
    59e8:	20 5d       	subi	r18, 0xD0	; 208
    59ea:	fc 01       	movw	r30, r24
    59ec:	20 83       	st	Z, r18
    value = value * 10.0 - digit;
    59ee:	8b 85       	ldd	r24, Y+11	; 0x0b
    59f0:	9c 85       	ldd	r25, Y+12	; 0x0c
    59f2:	ad 85       	ldd	r26, Y+13	; 0x0d
    59f4:	be 85       	ldd	r27, Y+14	; 0x0e
    59f6:	20 e0       	ldi	r18, 0x00	; 0
    59f8:	30 e0       	ldi	r19, 0x00	; 0
    59fa:	40 e2       	ldi	r20, 0x20	; 32
    59fc:	51 e4       	ldi	r21, 0x41	; 65
    59fe:	bc 01       	movw	r22, r24
    5a00:	cd 01       	movw	r24, r26
    5a02:	0e 94 77 2f 	call	0x5eee	; 0x5eee <__mulsf3>
    5a06:	dc 01       	movw	r26, r24
    5a08:	cb 01       	movw	r24, r22
    5a0a:	6c 01       	movw	r12, r24
    5a0c:	7d 01       	movw	r14, r26
    5a0e:	8d 81       	ldd	r24, Y+5	; 0x05
    5a10:	9e 81       	ldd	r25, Y+6	; 0x06
    5a12:	09 2e       	mov	r0, r25
    5a14:	00 0c       	add	r0, r0
    5a16:	aa 0b       	sbc	r26, r26
    5a18:	bb 0b       	sbc	r27, r27
    5a1a:	bc 01       	movw	r22, r24
    5a1c:	cd 01       	movw	r24, r26
    5a1e:	0e 94 c2 2e 	call	0x5d84	; 0x5d84 <__floatsisf>
    5a22:	dc 01       	movw	r26, r24
    5a24:	cb 01       	movw	r24, r22
    5a26:	9c 01       	movw	r18, r24
    5a28:	ad 01       	movw	r20, r26
    5a2a:	c7 01       	movw	r24, r14
    5a2c:	b6 01       	movw	r22, r12
    5a2e:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__subsf3>
    5a32:	dc 01       	movw	r26, r24
    5a34:	cb 01       	movw	r24, r22
    5a36:	8b 87       	std	Y+11, r24	; 0x0b
    5a38:	9c 87       	std	Y+12, r25	; 0x0c
    5a3a:	ad 87       	std	Y+13, r26	; 0x0d
    5a3c:	be 87       	std	Y+14, r27	; 0x0e
    --exponent;
    5a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    5a40:	9c 81       	ldd	r25, Y+4	; 0x04
    5a42:	01 97       	sbiw	r24, 0x01	; 1
    5a44:	8b 83       	std	Y+3, r24	; 0x03
    5a46:	9c 83       	std	Y+4, r25	; 0x04

    *buffer++ = '.';
    5a48:	89 85       	ldd	r24, Y+9	; 0x09
    5a4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a4c:	9c 01       	movw	r18, r24
    5a4e:	2f 5f       	subi	r18, 0xFF	; 255
    5a50:	3f 4f       	sbci	r19, 0xFF	; 255
    5a52:	29 87       	std	Y+9, r18	; 0x09
    5a54:	3a 87       	std	Y+10, r19	; 0x0a
    5a56:	2e e2       	ldi	r18, 0x2E	; 46
    5a58:	fc 01       	movw	r30, r24
    5a5a:	20 83       	st	Z, r18

    for (int i = 0; i < width; i++) {
    5a5c:	19 82       	std	Y+1, r1	; 0x01
    5a5e:	1a 82       	std	Y+2, r1	; 0x02
    5a60:	4e c0       	rjmp	.+156    	; 0x5afe <ftoa_sci+0x1f4>
        int digit = value * 10.0;
    5a62:	8b 85       	ldd	r24, Y+11	; 0x0b
    5a64:	9c 85       	ldd	r25, Y+12	; 0x0c
    5a66:	ad 85       	ldd	r26, Y+13	; 0x0d
    5a68:	be 85       	ldd	r27, Y+14	; 0x0e
    5a6a:	20 e0       	ldi	r18, 0x00	; 0
    5a6c:	30 e0       	ldi	r19, 0x00	; 0
    5a6e:	40 e2       	ldi	r20, 0x20	; 32
    5a70:	51 e4       	ldi	r21, 0x41	; 65
    5a72:	bc 01       	movw	r22, r24
    5a74:	cd 01       	movw	r24, r26
    5a76:	0e 94 77 2f 	call	0x5eee	; 0x5eee <__mulsf3>
    5a7a:	dc 01       	movw	r26, r24
    5a7c:	cb 01       	movw	r24, r22
    5a7e:	bc 01       	movw	r22, r24
    5a80:	cd 01       	movw	r24, r26
    5a82:	0e 94 8a 2e 	call	0x5d14	; 0x5d14 <__fixsfsi>
    5a86:	dc 01       	movw	r26, r24
    5a88:	cb 01       	movw	r24, r22
    5a8a:	8f 83       	std	Y+7, r24	; 0x07
    5a8c:	98 87       	std	Y+8, r25	; 0x08
        *buffer++ = digit + '0';
    5a8e:	89 85       	ldd	r24, Y+9	; 0x09
    5a90:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a92:	9c 01       	movw	r18, r24
    5a94:	2f 5f       	subi	r18, 0xFF	; 255
    5a96:	3f 4f       	sbci	r19, 0xFF	; 255
    5a98:	29 87       	std	Y+9, r18	; 0x09
    5a9a:	3a 87       	std	Y+10, r19	; 0x0a
    5a9c:	2f 81       	ldd	r18, Y+7	; 0x07
    5a9e:	20 5d       	subi	r18, 0xD0	; 208
    5aa0:	fc 01       	movw	r30, r24
    5aa2:	20 83       	st	Z, r18
        value = value * 10.0 - digit;
    5aa4:	8b 85       	ldd	r24, Y+11	; 0x0b
    5aa6:	9c 85       	ldd	r25, Y+12	; 0x0c
    5aa8:	ad 85       	ldd	r26, Y+13	; 0x0d
    5aaa:	be 85       	ldd	r27, Y+14	; 0x0e
    5aac:	20 e0       	ldi	r18, 0x00	; 0
    5aae:	30 e0       	ldi	r19, 0x00	; 0
    5ab0:	40 e2       	ldi	r20, 0x20	; 32
    5ab2:	51 e4       	ldi	r21, 0x41	; 65
    5ab4:	bc 01       	movw	r22, r24
    5ab6:	cd 01       	movw	r24, r26
    5ab8:	0e 94 77 2f 	call	0x5eee	; 0x5eee <__mulsf3>
    5abc:	dc 01       	movw	r26, r24
    5abe:	cb 01       	movw	r24, r22
    5ac0:	6c 01       	movw	r12, r24
    5ac2:	7d 01       	movw	r14, r26
    5ac4:	8f 81       	ldd	r24, Y+7	; 0x07
    5ac6:	98 85       	ldd	r25, Y+8	; 0x08
    5ac8:	09 2e       	mov	r0, r25
    5aca:	00 0c       	add	r0, r0
    5acc:	aa 0b       	sbc	r26, r26
    5ace:	bb 0b       	sbc	r27, r27
    5ad0:	bc 01       	movw	r22, r24
    5ad2:	cd 01       	movw	r24, r26
    5ad4:	0e 94 c2 2e 	call	0x5d84	; 0x5d84 <__floatsisf>
    5ad8:	dc 01       	movw	r26, r24
    5ada:	cb 01       	movw	r24, r22
    5adc:	9c 01       	movw	r18, r24
    5ade:	ad 01       	movw	r20, r26
    5ae0:	c7 01       	movw	r24, r14
    5ae2:	b6 01       	movw	r22, r12
    5ae4:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__subsf3>
    5ae8:	dc 01       	movw	r26, r24
    5aea:	cb 01       	movw	r24, r22
    5aec:	8b 87       	std	Y+11, r24	; 0x0b
    5aee:	9c 87       	std	Y+12, r25	; 0x0c
    5af0:	ad 87       	std	Y+13, r26	; 0x0d
    5af2:	be 87       	std	Y+14, r27	; 0x0e
    value = value * 10.0 - digit;
    --exponent;

    *buffer++ = '.';

    for (int i = 0; i < width; i++) {
    5af4:	89 81       	ldd	r24, Y+1	; 0x01
    5af6:	9a 81       	ldd	r25, Y+2	; 0x02
    5af8:	01 96       	adiw	r24, 0x01	; 1
    5afa:	89 83       	std	Y+1, r24	; 0x01
    5afc:	9a 83       	std	Y+2, r25	; 0x02
    5afe:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <width.5079>
    5b02:	90 91 c5 20 	lds	r25, 0x20C5	; 0x8020c5 <width.5079+0x1>
    5b06:	29 81       	ldd	r18, Y+1	; 0x01
    5b08:	3a 81       	ldd	r19, Y+2	; 0x02
    5b0a:	28 17       	cp	r18, r24
    5b0c:	39 07       	cpc	r19, r25
    5b0e:	0c f4       	brge	.+2      	; 0x5b12 <ftoa_sci+0x208>
    5b10:	a8 cf       	rjmp	.-176    	; 0x5a62 <ftoa_sci+0x158>
        int digit = value * 10.0;
        *buffer++ = digit + '0';
        value = value * 10.0 - digit;
    }

    *buffer++ = 'e';
    5b12:	89 85       	ldd	r24, Y+9	; 0x09
    5b14:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b16:	9c 01       	movw	r18, r24
    5b18:	2f 5f       	subi	r18, 0xFF	; 255
    5b1a:	3f 4f       	sbci	r19, 0xFF	; 255
    5b1c:	29 87       	std	Y+9, r18	; 0x09
    5b1e:	3a 87       	std	Y+10, r19	; 0x0a
    5b20:	25 e6       	ldi	r18, 0x65	; 101
    5b22:	fc 01       	movw	r30, r24
    5b24:	20 83       	st	Z, r18
    itoa(exponent, buffer, 10);
    5b26:	29 85       	ldd	r18, Y+9	; 0x09
    5b28:	3a 85       	ldd	r19, Y+10	; 0x0a
    5b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    5b2c:	9c 81       	ldd	r25, Y+4	; 0x04
    5b2e:	4a e0       	ldi	r20, 0x0A	; 10
    5b30:	50 e0       	ldi	r21, 0x00	; 0
    5b32:	b9 01       	movw	r22, r18
    5b34:	0e 94 60 30 	call	0x60c0	; 0x60c0 <itoa>
}
    5b38:	2e 96       	adiw	r28, 0x0e	; 14
    5b3a:	cd bf       	out	0x3d, r28	; 61
    5b3c:	de bf       	out	0x3e, r29	; 62
    5b3e:	df 91       	pop	r29
    5b40:	cf 91       	pop	r28
    5b42:	ff 90       	pop	r15
    5b44:	ef 90       	pop	r14
    5b46:	df 90       	pop	r13
    5b48:	cf 90       	pop	r12
    5b4a:	08 95       	ret

00005b4c <__subsf3>:
    5b4c:	50 58       	subi	r21, 0x80	; 128

00005b4e <__addsf3>:
    5b4e:	bb 27       	eor	r27, r27
    5b50:	aa 27       	eor	r26, r26
    5b52:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <__addsf3x>
    5b56:	0c 94 38 2f 	jmp	0x5e70	; 0x5e70 <__fp_round>
    5b5a:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <__fp_pscA>
    5b5e:	38 f0       	brcs	.+14     	; 0x5b6e <__addsf3+0x20>
    5b60:	0e 94 31 2f 	call	0x5e62	; 0x5e62 <__fp_pscB>
    5b64:	20 f0       	brcs	.+8      	; 0x5b6e <__addsf3+0x20>
    5b66:	39 f4       	brne	.+14     	; 0x5b76 <__addsf3+0x28>
    5b68:	9f 3f       	cpi	r25, 0xFF	; 255
    5b6a:	19 f4       	brne	.+6      	; 0x5b72 <__addsf3+0x24>
    5b6c:	26 f4       	brtc	.+8      	; 0x5b76 <__addsf3+0x28>
    5b6e:	0c 94 27 2f 	jmp	0x5e4e	; 0x5e4e <__fp_nan>
    5b72:	0e f4       	brtc	.+2      	; 0x5b76 <__addsf3+0x28>
    5b74:	e0 95       	com	r30
    5b76:	e7 fb       	bst	r30, 7
    5b78:	0c 94 21 2f 	jmp	0x5e42	; 0x5e42 <__fp_inf>

00005b7c <__addsf3x>:
    5b7c:	e9 2f       	mov	r30, r25
    5b7e:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <__fp_split3>
    5b82:	58 f3       	brcs	.-42     	; 0x5b5a <__addsf3+0xc>
    5b84:	ba 17       	cp	r27, r26
    5b86:	62 07       	cpc	r22, r18
    5b88:	73 07       	cpc	r23, r19
    5b8a:	84 07       	cpc	r24, r20
    5b8c:	95 07       	cpc	r25, r21
    5b8e:	20 f0       	brcs	.+8      	; 0x5b98 <__addsf3x+0x1c>
    5b90:	79 f4       	brne	.+30     	; 0x5bb0 <__addsf3x+0x34>
    5b92:	a6 f5       	brtc	.+104    	; 0x5bfc <__addsf3x+0x80>
    5b94:	0c 94 6b 2f 	jmp	0x5ed6	; 0x5ed6 <__fp_zero>
    5b98:	0e f4       	brtc	.+2      	; 0x5b9c <__addsf3x+0x20>
    5b9a:	e0 95       	com	r30
    5b9c:	0b 2e       	mov	r0, r27
    5b9e:	ba 2f       	mov	r27, r26
    5ba0:	a0 2d       	mov	r26, r0
    5ba2:	0b 01       	movw	r0, r22
    5ba4:	b9 01       	movw	r22, r18
    5ba6:	90 01       	movw	r18, r0
    5ba8:	0c 01       	movw	r0, r24
    5baa:	ca 01       	movw	r24, r20
    5bac:	a0 01       	movw	r20, r0
    5bae:	11 24       	eor	r1, r1
    5bb0:	ff 27       	eor	r31, r31
    5bb2:	59 1b       	sub	r21, r25
    5bb4:	99 f0       	breq	.+38     	; 0x5bdc <__addsf3x+0x60>
    5bb6:	59 3f       	cpi	r21, 0xF9	; 249
    5bb8:	50 f4       	brcc	.+20     	; 0x5bce <__addsf3x+0x52>
    5bba:	50 3e       	cpi	r21, 0xE0	; 224
    5bbc:	68 f1       	brcs	.+90     	; 0x5c18 <__addsf3x+0x9c>
    5bbe:	1a 16       	cp	r1, r26
    5bc0:	f0 40       	sbci	r31, 0x00	; 0
    5bc2:	a2 2f       	mov	r26, r18
    5bc4:	23 2f       	mov	r18, r19
    5bc6:	34 2f       	mov	r19, r20
    5bc8:	44 27       	eor	r20, r20
    5bca:	58 5f       	subi	r21, 0xF8	; 248
    5bcc:	f3 cf       	rjmp	.-26     	; 0x5bb4 <__addsf3x+0x38>
    5bce:	46 95       	lsr	r20
    5bd0:	37 95       	ror	r19
    5bd2:	27 95       	ror	r18
    5bd4:	a7 95       	ror	r26
    5bd6:	f0 40       	sbci	r31, 0x00	; 0
    5bd8:	53 95       	inc	r21
    5bda:	c9 f7       	brne	.-14     	; 0x5bce <__addsf3x+0x52>
    5bdc:	7e f4       	brtc	.+30     	; 0x5bfc <__addsf3x+0x80>
    5bde:	1f 16       	cp	r1, r31
    5be0:	ba 0b       	sbc	r27, r26
    5be2:	62 0b       	sbc	r22, r18
    5be4:	73 0b       	sbc	r23, r19
    5be6:	84 0b       	sbc	r24, r20
    5be8:	ba f0       	brmi	.+46     	; 0x5c18 <__addsf3x+0x9c>
    5bea:	91 50       	subi	r25, 0x01	; 1
    5bec:	a1 f0       	breq	.+40     	; 0x5c16 <__addsf3x+0x9a>
    5bee:	ff 0f       	add	r31, r31
    5bf0:	bb 1f       	adc	r27, r27
    5bf2:	66 1f       	adc	r22, r22
    5bf4:	77 1f       	adc	r23, r23
    5bf6:	88 1f       	adc	r24, r24
    5bf8:	c2 f7       	brpl	.-16     	; 0x5bea <__addsf3x+0x6e>
    5bfa:	0e c0       	rjmp	.+28     	; 0x5c18 <__addsf3x+0x9c>
    5bfc:	ba 0f       	add	r27, r26
    5bfe:	62 1f       	adc	r22, r18
    5c00:	73 1f       	adc	r23, r19
    5c02:	84 1f       	adc	r24, r20
    5c04:	48 f4       	brcc	.+18     	; 0x5c18 <__addsf3x+0x9c>
    5c06:	87 95       	ror	r24
    5c08:	77 95       	ror	r23
    5c0a:	67 95       	ror	r22
    5c0c:	b7 95       	ror	r27
    5c0e:	f7 95       	ror	r31
    5c10:	9e 3f       	cpi	r25, 0xFE	; 254
    5c12:	08 f0       	brcs	.+2      	; 0x5c16 <__addsf3x+0x9a>
    5c14:	b0 cf       	rjmp	.-160    	; 0x5b76 <__addsf3+0x28>
    5c16:	93 95       	inc	r25
    5c18:	88 0f       	add	r24, r24
    5c1a:	08 f0       	brcs	.+2      	; 0x5c1e <__addsf3x+0xa2>
    5c1c:	99 27       	eor	r25, r25
    5c1e:	ee 0f       	add	r30, r30
    5c20:	97 95       	ror	r25
    5c22:	87 95       	ror	r24
    5c24:	08 95       	ret

00005c26 <__cmpsf2>:
    5c26:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <__fp_cmp>
    5c2a:	08 f4       	brcc	.+2      	; 0x5c2e <__cmpsf2+0x8>
    5c2c:	81 e0       	ldi	r24, 0x01	; 1
    5c2e:	08 95       	ret

00005c30 <__divsf3>:
    5c30:	0e 94 2c 2e 	call	0x5c58	; 0x5c58 <__divsf3x>
    5c34:	0c 94 38 2f 	jmp	0x5e70	; 0x5e70 <__fp_round>
    5c38:	0e 94 31 2f 	call	0x5e62	; 0x5e62 <__fp_pscB>
    5c3c:	58 f0       	brcs	.+22     	; 0x5c54 <__divsf3+0x24>
    5c3e:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <__fp_pscA>
    5c42:	40 f0       	brcs	.+16     	; 0x5c54 <__divsf3+0x24>
    5c44:	29 f4       	brne	.+10     	; 0x5c50 <__divsf3+0x20>
    5c46:	5f 3f       	cpi	r21, 0xFF	; 255
    5c48:	29 f0       	breq	.+10     	; 0x5c54 <__divsf3+0x24>
    5c4a:	0c 94 21 2f 	jmp	0x5e42	; 0x5e42 <__fp_inf>
    5c4e:	51 11       	cpse	r21, r1
    5c50:	0c 94 6c 2f 	jmp	0x5ed8	; 0x5ed8 <__fp_szero>
    5c54:	0c 94 27 2f 	jmp	0x5e4e	; 0x5e4e <__fp_nan>

00005c58 <__divsf3x>:
    5c58:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <__fp_split3>
    5c5c:	68 f3       	brcs	.-38     	; 0x5c38 <__divsf3+0x8>

00005c5e <__divsf3_pse>:
    5c5e:	99 23       	and	r25, r25
    5c60:	b1 f3       	breq	.-20     	; 0x5c4e <__divsf3+0x1e>
    5c62:	55 23       	and	r21, r21
    5c64:	91 f3       	breq	.-28     	; 0x5c4a <__divsf3+0x1a>
    5c66:	95 1b       	sub	r25, r21
    5c68:	55 0b       	sbc	r21, r21
    5c6a:	bb 27       	eor	r27, r27
    5c6c:	aa 27       	eor	r26, r26
    5c6e:	62 17       	cp	r22, r18
    5c70:	73 07       	cpc	r23, r19
    5c72:	84 07       	cpc	r24, r20
    5c74:	38 f0       	brcs	.+14     	; 0x5c84 <__divsf3_pse+0x26>
    5c76:	9f 5f       	subi	r25, 0xFF	; 255
    5c78:	5f 4f       	sbci	r21, 0xFF	; 255
    5c7a:	22 0f       	add	r18, r18
    5c7c:	33 1f       	adc	r19, r19
    5c7e:	44 1f       	adc	r20, r20
    5c80:	aa 1f       	adc	r26, r26
    5c82:	a9 f3       	breq	.-22     	; 0x5c6e <__divsf3_pse+0x10>
    5c84:	35 d0       	rcall	.+106    	; 0x5cf0 <__divsf3_pse+0x92>
    5c86:	0e 2e       	mov	r0, r30
    5c88:	3a f0       	brmi	.+14     	; 0x5c98 <__divsf3_pse+0x3a>
    5c8a:	e0 e8       	ldi	r30, 0x80	; 128
    5c8c:	32 d0       	rcall	.+100    	; 0x5cf2 <__divsf3_pse+0x94>
    5c8e:	91 50       	subi	r25, 0x01	; 1
    5c90:	50 40       	sbci	r21, 0x00	; 0
    5c92:	e6 95       	lsr	r30
    5c94:	00 1c       	adc	r0, r0
    5c96:	ca f7       	brpl	.-14     	; 0x5c8a <__divsf3_pse+0x2c>
    5c98:	2b d0       	rcall	.+86     	; 0x5cf0 <__divsf3_pse+0x92>
    5c9a:	fe 2f       	mov	r31, r30
    5c9c:	29 d0       	rcall	.+82     	; 0x5cf0 <__divsf3_pse+0x92>
    5c9e:	66 0f       	add	r22, r22
    5ca0:	77 1f       	adc	r23, r23
    5ca2:	88 1f       	adc	r24, r24
    5ca4:	bb 1f       	adc	r27, r27
    5ca6:	26 17       	cp	r18, r22
    5ca8:	37 07       	cpc	r19, r23
    5caa:	48 07       	cpc	r20, r24
    5cac:	ab 07       	cpc	r26, r27
    5cae:	b0 e8       	ldi	r27, 0x80	; 128
    5cb0:	09 f0       	breq	.+2      	; 0x5cb4 <__divsf3_pse+0x56>
    5cb2:	bb 0b       	sbc	r27, r27
    5cb4:	80 2d       	mov	r24, r0
    5cb6:	bf 01       	movw	r22, r30
    5cb8:	ff 27       	eor	r31, r31
    5cba:	93 58       	subi	r25, 0x83	; 131
    5cbc:	5f 4f       	sbci	r21, 0xFF	; 255
    5cbe:	3a f0       	brmi	.+14     	; 0x5cce <__divsf3_pse+0x70>
    5cc0:	9e 3f       	cpi	r25, 0xFE	; 254
    5cc2:	51 05       	cpc	r21, r1
    5cc4:	78 f0       	brcs	.+30     	; 0x5ce4 <__divsf3_pse+0x86>
    5cc6:	0c 94 21 2f 	jmp	0x5e42	; 0x5e42 <__fp_inf>
    5cca:	0c 94 6c 2f 	jmp	0x5ed8	; 0x5ed8 <__fp_szero>
    5cce:	5f 3f       	cpi	r21, 0xFF	; 255
    5cd0:	e4 f3       	brlt	.-8      	; 0x5cca <__divsf3_pse+0x6c>
    5cd2:	98 3e       	cpi	r25, 0xE8	; 232
    5cd4:	d4 f3       	brlt	.-12     	; 0x5cca <__divsf3_pse+0x6c>
    5cd6:	86 95       	lsr	r24
    5cd8:	77 95       	ror	r23
    5cda:	67 95       	ror	r22
    5cdc:	b7 95       	ror	r27
    5cde:	f7 95       	ror	r31
    5ce0:	9f 5f       	subi	r25, 0xFF	; 255
    5ce2:	c9 f7       	brne	.-14     	; 0x5cd6 <__divsf3_pse+0x78>
    5ce4:	88 0f       	add	r24, r24
    5ce6:	91 1d       	adc	r25, r1
    5ce8:	96 95       	lsr	r25
    5cea:	87 95       	ror	r24
    5cec:	97 f9       	bld	r25, 7
    5cee:	08 95       	ret
    5cf0:	e1 e0       	ldi	r30, 0x01	; 1
    5cf2:	66 0f       	add	r22, r22
    5cf4:	77 1f       	adc	r23, r23
    5cf6:	88 1f       	adc	r24, r24
    5cf8:	bb 1f       	adc	r27, r27
    5cfa:	62 17       	cp	r22, r18
    5cfc:	73 07       	cpc	r23, r19
    5cfe:	84 07       	cpc	r24, r20
    5d00:	ba 07       	cpc	r27, r26
    5d02:	20 f0       	brcs	.+8      	; 0x5d0c <__divsf3_pse+0xae>
    5d04:	62 1b       	sub	r22, r18
    5d06:	73 0b       	sbc	r23, r19
    5d08:	84 0b       	sbc	r24, r20
    5d0a:	ba 0b       	sbc	r27, r26
    5d0c:	ee 1f       	adc	r30, r30
    5d0e:	88 f7       	brcc	.-30     	; 0x5cf2 <__divsf3_pse+0x94>
    5d10:	e0 95       	com	r30
    5d12:	08 95       	ret

00005d14 <__fixsfsi>:
    5d14:	0e 94 91 2e 	call	0x5d22	; 0x5d22 <__fixunssfsi>
    5d18:	68 94       	set
    5d1a:	b1 11       	cpse	r27, r1
    5d1c:	0c 94 6c 2f 	jmp	0x5ed8	; 0x5ed8 <__fp_szero>
    5d20:	08 95       	ret

00005d22 <__fixunssfsi>:
    5d22:	0e 94 51 2f 	call	0x5ea2	; 0x5ea2 <__fp_splitA>
    5d26:	88 f0       	brcs	.+34     	; 0x5d4a <__fixunssfsi+0x28>
    5d28:	9f 57       	subi	r25, 0x7F	; 127
    5d2a:	98 f0       	brcs	.+38     	; 0x5d52 <__fixunssfsi+0x30>
    5d2c:	b9 2f       	mov	r27, r25
    5d2e:	99 27       	eor	r25, r25
    5d30:	b7 51       	subi	r27, 0x17	; 23
    5d32:	b0 f0       	brcs	.+44     	; 0x5d60 <__fixunssfsi+0x3e>
    5d34:	e1 f0       	breq	.+56     	; 0x5d6e <__fixunssfsi+0x4c>
    5d36:	66 0f       	add	r22, r22
    5d38:	77 1f       	adc	r23, r23
    5d3a:	88 1f       	adc	r24, r24
    5d3c:	99 1f       	adc	r25, r25
    5d3e:	1a f0       	brmi	.+6      	; 0x5d46 <__fixunssfsi+0x24>
    5d40:	ba 95       	dec	r27
    5d42:	c9 f7       	brne	.-14     	; 0x5d36 <__fixunssfsi+0x14>
    5d44:	14 c0       	rjmp	.+40     	; 0x5d6e <__fixunssfsi+0x4c>
    5d46:	b1 30       	cpi	r27, 0x01	; 1
    5d48:	91 f0       	breq	.+36     	; 0x5d6e <__fixunssfsi+0x4c>
    5d4a:	0e 94 6b 2f 	call	0x5ed6	; 0x5ed6 <__fp_zero>
    5d4e:	b1 e0       	ldi	r27, 0x01	; 1
    5d50:	08 95       	ret
    5d52:	0c 94 6b 2f 	jmp	0x5ed6	; 0x5ed6 <__fp_zero>
    5d56:	67 2f       	mov	r22, r23
    5d58:	78 2f       	mov	r23, r24
    5d5a:	88 27       	eor	r24, r24
    5d5c:	b8 5f       	subi	r27, 0xF8	; 248
    5d5e:	39 f0       	breq	.+14     	; 0x5d6e <__fixunssfsi+0x4c>
    5d60:	b9 3f       	cpi	r27, 0xF9	; 249
    5d62:	cc f3       	brlt	.-14     	; 0x5d56 <__fixunssfsi+0x34>
    5d64:	86 95       	lsr	r24
    5d66:	77 95       	ror	r23
    5d68:	67 95       	ror	r22
    5d6a:	b3 95       	inc	r27
    5d6c:	d9 f7       	brne	.-10     	; 0x5d64 <__fixunssfsi+0x42>
    5d6e:	3e f4       	brtc	.+14     	; 0x5d7e <__fixunssfsi+0x5c>
    5d70:	90 95       	com	r25
    5d72:	80 95       	com	r24
    5d74:	70 95       	com	r23
    5d76:	61 95       	neg	r22
    5d78:	7f 4f       	sbci	r23, 0xFF	; 255
    5d7a:	8f 4f       	sbci	r24, 0xFF	; 255
    5d7c:	9f 4f       	sbci	r25, 0xFF	; 255
    5d7e:	08 95       	ret

00005d80 <__floatunsisf>:
    5d80:	e8 94       	clt
    5d82:	09 c0       	rjmp	.+18     	; 0x5d96 <__floatsisf+0x12>

00005d84 <__floatsisf>:
    5d84:	97 fb       	bst	r25, 7
    5d86:	3e f4       	brtc	.+14     	; 0x5d96 <__floatsisf+0x12>
    5d88:	90 95       	com	r25
    5d8a:	80 95       	com	r24
    5d8c:	70 95       	com	r23
    5d8e:	61 95       	neg	r22
    5d90:	7f 4f       	sbci	r23, 0xFF	; 255
    5d92:	8f 4f       	sbci	r24, 0xFF	; 255
    5d94:	9f 4f       	sbci	r25, 0xFF	; 255
    5d96:	99 23       	and	r25, r25
    5d98:	a9 f0       	breq	.+42     	; 0x5dc4 <__floatsisf+0x40>
    5d9a:	f9 2f       	mov	r31, r25
    5d9c:	96 e9       	ldi	r25, 0x96	; 150
    5d9e:	bb 27       	eor	r27, r27
    5da0:	93 95       	inc	r25
    5da2:	f6 95       	lsr	r31
    5da4:	87 95       	ror	r24
    5da6:	77 95       	ror	r23
    5da8:	67 95       	ror	r22
    5daa:	b7 95       	ror	r27
    5dac:	f1 11       	cpse	r31, r1
    5dae:	f8 cf       	rjmp	.-16     	; 0x5da0 <__floatsisf+0x1c>
    5db0:	fa f4       	brpl	.+62     	; 0x5df0 <__floatsisf+0x6c>
    5db2:	bb 0f       	add	r27, r27
    5db4:	11 f4       	brne	.+4      	; 0x5dba <__floatsisf+0x36>
    5db6:	60 ff       	sbrs	r22, 0
    5db8:	1b c0       	rjmp	.+54     	; 0x5df0 <__floatsisf+0x6c>
    5dba:	6f 5f       	subi	r22, 0xFF	; 255
    5dbc:	7f 4f       	sbci	r23, 0xFF	; 255
    5dbe:	8f 4f       	sbci	r24, 0xFF	; 255
    5dc0:	9f 4f       	sbci	r25, 0xFF	; 255
    5dc2:	16 c0       	rjmp	.+44     	; 0x5df0 <__floatsisf+0x6c>
    5dc4:	88 23       	and	r24, r24
    5dc6:	11 f0       	breq	.+4      	; 0x5dcc <__floatsisf+0x48>
    5dc8:	96 e9       	ldi	r25, 0x96	; 150
    5dca:	11 c0       	rjmp	.+34     	; 0x5dee <__floatsisf+0x6a>
    5dcc:	77 23       	and	r23, r23
    5dce:	21 f0       	breq	.+8      	; 0x5dd8 <__floatsisf+0x54>
    5dd0:	9e e8       	ldi	r25, 0x8E	; 142
    5dd2:	87 2f       	mov	r24, r23
    5dd4:	76 2f       	mov	r23, r22
    5dd6:	05 c0       	rjmp	.+10     	; 0x5de2 <__floatsisf+0x5e>
    5dd8:	66 23       	and	r22, r22
    5dda:	71 f0       	breq	.+28     	; 0x5df8 <__floatsisf+0x74>
    5ddc:	96 e8       	ldi	r25, 0x86	; 134
    5dde:	86 2f       	mov	r24, r22
    5de0:	70 e0       	ldi	r23, 0x00	; 0
    5de2:	60 e0       	ldi	r22, 0x00	; 0
    5de4:	2a f0       	brmi	.+10     	; 0x5df0 <__floatsisf+0x6c>
    5de6:	9a 95       	dec	r25
    5de8:	66 0f       	add	r22, r22
    5dea:	77 1f       	adc	r23, r23
    5dec:	88 1f       	adc	r24, r24
    5dee:	da f7       	brpl	.-10     	; 0x5de6 <__floatsisf+0x62>
    5df0:	88 0f       	add	r24, r24
    5df2:	96 95       	lsr	r25
    5df4:	87 95       	ror	r24
    5df6:	97 f9       	bld	r25, 7
    5df8:	08 95       	ret

00005dfa <__fp_cmp>:
    5dfa:	99 0f       	add	r25, r25
    5dfc:	00 08       	sbc	r0, r0
    5dfe:	55 0f       	add	r21, r21
    5e00:	aa 0b       	sbc	r26, r26
    5e02:	e0 e8       	ldi	r30, 0x80	; 128
    5e04:	fe ef       	ldi	r31, 0xFE	; 254
    5e06:	16 16       	cp	r1, r22
    5e08:	17 06       	cpc	r1, r23
    5e0a:	e8 07       	cpc	r30, r24
    5e0c:	f9 07       	cpc	r31, r25
    5e0e:	c0 f0       	brcs	.+48     	; 0x5e40 <__fp_cmp+0x46>
    5e10:	12 16       	cp	r1, r18
    5e12:	13 06       	cpc	r1, r19
    5e14:	e4 07       	cpc	r30, r20
    5e16:	f5 07       	cpc	r31, r21
    5e18:	98 f0       	brcs	.+38     	; 0x5e40 <__fp_cmp+0x46>
    5e1a:	62 1b       	sub	r22, r18
    5e1c:	73 0b       	sbc	r23, r19
    5e1e:	84 0b       	sbc	r24, r20
    5e20:	95 0b       	sbc	r25, r21
    5e22:	39 f4       	brne	.+14     	; 0x5e32 <__fp_cmp+0x38>
    5e24:	0a 26       	eor	r0, r26
    5e26:	61 f0       	breq	.+24     	; 0x5e40 <__fp_cmp+0x46>
    5e28:	23 2b       	or	r18, r19
    5e2a:	24 2b       	or	r18, r20
    5e2c:	25 2b       	or	r18, r21
    5e2e:	21 f4       	brne	.+8      	; 0x5e38 <__fp_cmp+0x3e>
    5e30:	08 95       	ret
    5e32:	0a 26       	eor	r0, r26
    5e34:	09 f4       	brne	.+2      	; 0x5e38 <__fp_cmp+0x3e>
    5e36:	a1 40       	sbci	r26, 0x01	; 1
    5e38:	a6 95       	lsr	r26
    5e3a:	8f ef       	ldi	r24, 0xFF	; 255
    5e3c:	81 1d       	adc	r24, r1
    5e3e:	81 1d       	adc	r24, r1
    5e40:	08 95       	ret

00005e42 <__fp_inf>:
    5e42:	97 f9       	bld	r25, 7
    5e44:	9f 67       	ori	r25, 0x7F	; 127
    5e46:	80 e8       	ldi	r24, 0x80	; 128
    5e48:	70 e0       	ldi	r23, 0x00	; 0
    5e4a:	60 e0       	ldi	r22, 0x00	; 0
    5e4c:	08 95       	ret

00005e4e <__fp_nan>:
    5e4e:	9f ef       	ldi	r25, 0xFF	; 255
    5e50:	80 ec       	ldi	r24, 0xC0	; 192
    5e52:	08 95       	ret

00005e54 <__fp_pscA>:
    5e54:	00 24       	eor	r0, r0
    5e56:	0a 94       	dec	r0
    5e58:	16 16       	cp	r1, r22
    5e5a:	17 06       	cpc	r1, r23
    5e5c:	18 06       	cpc	r1, r24
    5e5e:	09 06       	cpc	r0, r25
    5e60:	08 95       	ret

00005e62 <__fp_pscB>:
    5e62:	00 24       	eor	r0, r0
    5e64:	0a 94       	dec	r0
    5e66:	12 16       	cp	r1, r18
    5e68:	13 06       	cpc	r1, r19
    5e6a:	14 06       	cpc	r1, r20
    5e6c:	05 06       	cpc	r0, r21
    5e6e:	08 95       	ret

00005e70 <__fp_round>:
    5e70:	09 2e       	mov	r0, r25
    5e72:	03 94       	inc	r0
    5e74:	00 0c       	add	r0, r0
    5e76:	11 f4       	brne	.+4      	; 0x5e7c <__fp_round+0xc>
    5e78:	88 23       	and	r24, r24
    5e7a:	52 f0       	brmi	.+20     	; 0x5e90 <__fp_round+0x20>
    5e7c:	bb 0f       	add	r27, r27
    5e7e:	40 f4       	brcc	.+16     	; 0x5e90 <__fp_round+0x20>
    5e80:	bf 2b       	or	r27, r31
    5e82:	11 f4       	brne	.+4      	; 0x5e88 <__fp_round+0x18>
    5e84:	60 ff       	sbrs	r22, 0
    5e86:	04 c0       	rjmp	.+8      	; 0x5e90 <__fp_round+0x20>
    5e88:	6f 5f       	subi	r22, 0xFF	; 255
    5e8a:	7f 4f       	sbci	r23, 0xFF	; 255
    5e8c:	8f 4f       	sbci	r24, 0xFF	; 255
    5e8e:	9f 4f       	sbci	r25, 0xFF	; 255
    5e90:	08 95       	ret

00005e92 <__fp_split3>:
    5e92:	57 fd       	sbrc	r21, 7
    5e94:	90 58       	subi	r25, 0x80	; 128
    5e96:	44 0f       	add	r20, r20
    5e98:	55 1f       	adc	r21, r21
    5e9a:	59 f0       	breq	.+22     	; 0x5eb2 <__fp_splitA+0x10>
    5e9c:	5f 3f       	cpi	r21, 0xFF	; 255
    5e9e:	71 f0       	breq	.+28     	; 0x5ebc <__fp_splitA+0x1a>
    5ea0:	47 95       	ror	r20

00005ea2 <__fp_splitA>:
    5ea2:	88 0f       	add	r24, r24
    5ea4:	97 fb       	bst	r25, 7
    5ea6:	99 1f       	adc	r25, r25
    5ea8:	61 f0       	breq	.+24     	; 0x5ec2 <__fp_splitA+0x20>
    5eaa:	9f 3f       	cpi	r25, 0xFF	; 255
    5eac:	79 f0       	breq	.+30     	; 0x5ecc <__fp_splitA+0x2a>
    5eae:	87 95       	ror	r24
    5eb0:	08 95       	ret
    5eb2:	12 16       	cp	r1, r18
    5eb4:	13 06       	cpc	r1, r19
    5eb6:	14 06       	cpc	r1, r20
    5eb8:	55 1f       	adc	r21, r21
    5eba:	f2 cf       	rjmp	.-28     	; 0x5ea0 <__fp_split3+0xe>
    5ebc:	46 95       	lsr	r20
    5ebe:	f1 df       	rcall	.-30     	; 0x5ea2 <__fp_splitA>
    5ec0:	08 c0       	rjmp	.+16     	; 0x5ed2 <__fp_splitA+0x30>
    5ec2:	16 16       	cp	r1, r22
    5ec4:	17 06       	cpc	r1, r23
    5ec6:	18 06       	cpc	r1, r24
    5ec8:	99 1f       	adc	r25, r25
    5eca:	f1 cf       	rjmp	.-30     	; 0x5eae <__fp_splitA+0xc>
    5ecc:	86 95       	lsr	r24
    5ece:	71 05       	cpc	r23, r1
    5ed0:	61 05       	cpc	r22, r1
    5ed2:	08 94       	sec
    5ed4:	08 95       	ret

00005ed6 <__fp_zero>:
    5ed6:	e8 94       	clt

00005ed8 <__fp_szero>:
    5ed8:	bb 27       	eor	r27, r27
    5eda:	66 27       	eor	r22, r22
    5edc:	77 27       	eor	r23, r23
    5ede:	cb 01       	movw	r24, r22
    5ee0:	97 f9       	bld	r25, 7
    5ee2:	08 95       	ret

00005ee4 <__gesf2>:
    5ee4:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <__fp_cmp>
    5ee8:	08 f4       	brcc	.+2      	; 0x5eec <__gesf2+0x8>
    5eea:	8f ef       	ldi	r24, 0xFF	; 255
    5eec:	08 95       	ret

00005eee <__mulsf3>:
    5eee:	0e 94 8a 2f 	call	0x5f14	; 0x5f14 <__mulsf3x>
    5ef2:	0c 94 38 2f 	jmp	0x5e70	; 0x5e70 <__fp_round>
    5ef6:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <__fp_pscA>
    5efa:	38 f0       	brcs	.+14     	; 0x5f0a <__mulsf3+0x1c>
    5efc:	0e 94 31 2f 	call	0x5e62	; 0x5e62 <__fp_pscB>
    5f00:	20 f0       	brcs	.+8      	; 0x5f0a <__mulsf3+0x1c>
    5f02:	95 23       	and	r25, r21
    5f04:	11 f0       	breq	.+4      	; 0x5f0a <__mulsf3+0x1c>
    5f06:	0c 94 21 2f 	jmp	0x5e42	; 0x5e42 <__fp_inf>
    5f0a:	0c 94 27 2f 	jmp	0x5e4e	; 0x5e4e <__fp_nan>
    5f0e:	11 24       	eor	r1, r1
    5f10:	0c 94 6c 2f 	jmp	0x5ed8	; 0x5ed8 <__fp_szero>

00005f14 <__mulsf3x>:
    5f14:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <__fp_split3>
    5f18:	70 f3       	brcs	.-36     	; 0x5ef6 <__mulsf3+0x8>

00005f1a <__mulsf3_pse>:
    5f1a:	95 9f       	mul	r25, r21
    5f1c:	c1 f3       	breq	.-16     	; 0x5f0e <__mulsf3+0x20>
    5f1e:	95 0f       	add	r25, r21
    5f20:	50 e0       	ldi	r21, 0x00	; 0
    5f22:	55 1f       	adc	r21, r21
    5f24:	62 9f       	mul	r22, r18
    5f26:	f0 01       	movw	r30, r0
    5f28:	72 9f       	mul	r23, r18
    5f2a:	bb 27       	eor	r27, r27
    5f2c:	f0 0d       	add	r31, r0
    5f2e:	b1 1d       	adc	r27, r1
    5f30:	63 9f       	mul	r22, r19
    5f32:	aa 27       	eor	r26, r26
    5f34:	f0 0d       	add	r31, r0
    5f36:	b1 1d       	adc	r27, r1
    5f38:	aa 1f       	adc	r26, r26
    5f3a:	64 9f       	mul	r22, r20
    5f3c:	66 27       	eor	r22, r22
    5f3e:	b0 0d       	add	r27, r0
    5f40:	a1 1d       	adc	r26, r1
    5f42:	66 1f       	adc	r22, r22
    5f44:	82 9f       	mul	r24, r18
    5f46:	22 27       	eor	r18, r18
    5f48:	b0 0d       	add	r27, r0
    5f4a:	a1 1d       	adc	r26, r1
    5f4c:	62 1f       	adc	r22, r18
    5f4e:	73 9f       	mul	r23, r19
    5f50:	b0 0d       	add	r27, r0
    5f52:	a1 1d       	adc	r26, r1
    5f54:	62 1f       	adc	r22, r18
    5f56:	83 9f       	mul	r24, r19
    5f58:	a0 0d       	add	r26, r0
    5f5a:	61 1d       	adc	r22, r1
    5f5c:	22 1f       	adc	r18, r18
    5f5e:	74 9f       	mul	r23, r20
    5f60:	33 27       	eor	r19, r19
    5f62:	a0 0d       	add	r26, r0
    5f64:	61 1d       	adc	r22, r1
    5f66:	23 1f       	adc	r18, r19
    5f68:	84 9f       	mul	r24, r20
    5f6a:	60 0d       	add	r22, r0
    5f6c:	21 1d       	adc	r18, r1
    5f6e:	82 2f       	mov	r24, r18
    5f70:	76 2f       	mov	r23, r22
    5f72:	6a 2f       	mov	r22, r26
    5f74:	11 24       	eor	r1, r1
    5f76:	9f 57       	subi	r25, 0x7F	; 127
    5f78:	50 40       	sbci	r21, 0x00	; 0
    5f7a:	9a f0       	brmi	.+38     	; 0x5fa2 <__mulsf3_pse+0x88>
    5f7c:	f1 f0       	breq	.+60     	; 0x5fba <__mulsf3_pse+0xa0>
    5f7e:	88 23       	and	r24, r24
    5f80:	4a f0       	brmi	.+18     	; 0x5f94 <__mulsf3_pse+0x7a>
    5f82:	ee 0f       	add	r30, r30
    5f84:	ff 1f       	adc	r31, r31
    5f86:	bb 1f       	adc	r27, r27
    5f88:	66 1f       	adc	r22, r22
    5f8a:	77 1f       	adc	r23, r23
    5f8c:	88 1f       	adc	r24, r24
    5f8e:	91 50       	subi	r25, 0x01	; 1
    5f90:	50 40       	sbci	r21, 0x00	; 0
    5f92:	a9 f7       	brne	.-22     	; 0x5f7e <__mulsf3_pse+0x64>
    5f94:	9e 3f       	cpi	r25, 0xFE	; 254
    5f96:	51 05       	cpc	r21, r1
    5f98:	80 f0       	brcs	.+32     	; 0x5fba <__mulsf3_pse+0xa0>
    5f9a:	0c 94 21 2f 	jmp	0x5e42	; 0x5e42 <__fp_inf>
    5f9e:	0c 94 6c 2f 	jmp	0x5ed8	; 0x5ed8 <__fp_szero>
    5fa2:	5f 3f       	cpi	r21, 0xFF	; 255
    5fa4:	e4 f3       	brlt	.-8      	; 0x5f9e <__mulsf3_pse+0x84>
    5fa6:	98 3e       	cpi	r25, 0xE8	; 232
    5fa8:	d4 f3       	brlt	.-12     	; 0x5f9e <__mulsf3_pse+0x84>
    5faa:	86 95       	lsr	r24
    5fac:	77 95       	ror	r23
    5fae:	67 95       	ror	r22
    5fb0:	b7 95       	ror	r27
    5fb2:	f7 95       	ror	r31
    5fb4:	e7 95       	ror	r30
    5fb6:	9f 5f       	subi	r25, 0xFF	; 255
    5fb8:	c1 f7       	brne	.-16     	; 0x5faa <__mulsf3_pse+0x90>
    5fba:	fe 2b       	or	r31, r30
    5fbc:	88 0f       	add	r24, r24
    5fbe:	91 1d       	adc	r25, r1
    5fc0:	96 95       	lsr	r25
    5fc2:	87 95       	ror	r24
    5fc4:	97 f9       	bld	r25, 7
    5fc6:	08 95       	ret
    5fc8:	19 f4       	brne	.+6      	; 0x5fd0 <__mulsf3_pse+0xb6>
    5fca:	16 f4       	brtc	.+4      	; 0x5fd0 <__mulsf3_pse+0xb6>
    5fcc:	0c 94 27 2f 	jmp	0x5e4e	; 0x5e4e <__fp_nan>
    5fd0:	0c 94 2a 30 	jmp	0x6054	; 0x6054 <__fp_mpack>

00005fd4 <sqrt>:
    5fd4:	0e 94 51 2f 	call	0x5ea2	; 0x5ea2 <__fp_splitA>
    5fd8:	b8 f3       	brcs	.-18     	; 0x5fc8 <__mulsf3_pse+0xae>
    5fda:	99 23       	and	r25, r25
    5fdc:	c9 f3       	breq	.-14     	; 0x5fd0 <__mulsf3_pse+0xb6>
    5fde:	b6 f3       	brts	.-20     	; 0x5fcc <__mulsf3_pse+0xb2>
    5fe0:	9f 57       	subi	r25, 0x7F	; 127
    5fe2:	55 0b       	sbc	r21, r21
    5fe4:	87 ff       	sbrs	r24, 7
    5fe6:	0e 94 38 30 	call	0x6070	; 0x6070 <__fp_norm2>
    5fea:	00 24       	eor	r0, r0
    5fec:	a0 e6       	ldi	r26, 0x60	; 96
    5fee:	40 ea       	ldi	r20, 0xA0	; 160
    5ff0:	90 01       	movw	r18, r0
    5ff2:	80 58       	subi	r24, 0x80	; 128
    5ff4:	56 95       	lsr	r21
    5ff6:	97 95       	ror	r25
    5ff8:	28 f4       	brcc	.+10     	; 0x6004 <sqrt+0x30>
    5ffa:	80 5c       	subi	r24, 0xC0	; 192
    5ffc:	66 0f       	add	r22, r22
    5ffe:	77 1f       	adc	r23, r23
    6000:	88 1f       	adc	r24, r24
    6002:	20 f0       	brcs	.+8      	; 0x600c <sqrt+0x38>
    6004:	26 17       	cp	r18, r22
    6006:	37 07       	cpc	r19, r23
    6008:	48 07       	cpc	r20, r24
    600a:	30 f4       	brcc	.+12     	; 0x6018 <sqrt+0x44>
    600c:	62 1b       	sub	r22, r18
    600e:	73 0b       	sbc	r23, r19
    6010:	84 0b       	sbc	r24, r20
    6012:	20 29       	or	r18, r0
    6014:	31 29       	or	r19, r1
    6016:	4a 2b       	or	r20, r26
    6018:	a6 95       	lsr	r26
    601a:	17 94       	ror	r1
    601c:	07 94       	ror	r0
    601e:	20 25       	eor	r18, r0
    6020:	31 25       	eor	r19, r1
    6022:	4a 27       	eor	r20, r26
    6024:	58 f7       	brcc	.-42     	; 0x5ffc <sqrt+0x28>
    6026:	66 0f       	add	r22, r22
    6028:	77 1f       	adc	r23, r23
    602a:	88 1f       	adc	r24, r24
    602c:	20 f0       	brcs	.+8      	; 0x6036 <sqrt+0x62>
    602e:	26 17       	cp	r18, r22
    6030:	37 07       	cpc	r19, r23
    6032:	48 07       	cpc	r20, r24
    6034:	30 f4       	brcc	.+12     	; 0x6042 <sqrt+0x6e>
    6036:	62 0b       	sbc	r22, r18
    6038:	73 0b       	sbc	r23, r19
    603a:	84 0b       	sbc	r24, r20
    603c:	20 0d       	add	r18, r0
    603e:	31 1d       	adc	r19, r1
    6040:	41 1d       	adc	r20, r1
    6042:	a0 95       	com	r26
    6044:	81 f7       	brne	.-32     	; 0x6026 <sqrt+0x52>
    6046:	b9 01       	movw	r22, r18
    6048:	84 2f       	mov	r24, r20
    604a:	91 58       	subi	r25, 0x81	; 129
    604c:	88 0f       	add	r24, r24
    604e:	96 95       	lsr	r25
    6050:	87 95       	ror	r24
    6052:	08 95       	ret

00006054 <__fp_mpack>:
    6054:	9f 3f       	cpi	r25, 0xFF	; 255
    6056:	31 f0       	breq	.+12     	; 0x6064 <__fp_mpack_finite+0xc>

00006058 <__fp_mpack_finite>:
    6058:	91 50       	subi	r25, 0x01	; 1
    605a:	20 f4       	brcc	.+8      	; 0x6064 <__fp_mpack_finite+0xc>
    605c:	87 95       	ror	r24
    605e:	77 95       	ror	r23
    6060:	67 95       	ror	r22
    6062:	b7 95       	ror	r27
    6064:	88 0f       	add	r24, r24
    6066:	91 1d       	adc	r25, r1
    6068:	96 95       	lsr	r25
    606a:	87 95       	ror	r24
    606c:	97 f9       	bld	r25, 7
    606e:	08 95       	ret

00006070 <__fp_norm2>:
    6070:	91 50       	subi	r25, 0x01	; 1
    6072:	50 40       	sbci	r21, 0x00	; 0
    6074:	66 0f       	add	r22, r22
    6076:	77 1f       	adc	r23, r23
    6078:	88 1f       	adc	r24, r24
    607a:	d2 f7       	brpl	.-12     	; 0x6070 <__fp_norm2>
    607c:	08 95       	ret

0000607e <__tablejump2__>:
    607e:	ee 0f       	add	r30, r30
    6080:	ff 1f       	adc	r31, r31
    6082:	88 1f       	adc	r24, r24
    6084:	8b bf       	out	0x3b, r24	; 59
    6086:	07 90       	elpm	r0, Z+
    6088:	f6 91       	elpm	r31, Z
    608a:	e0 2d       	mov	r30, r0
    608c:	19 94       	eijmp

0000608e <memcpy>:
    608e:	fb 01       	movw	r30, r22
    6090:	dc 01       	movw	r26, r24
    6092:	02 c0       	rjmp	.+4      	; 0x6098 <memcpy+0xa>
    6094:	01 90       	ld	r0, Z+
    6096:	0d 92       	st	X+, r0
    6098:	41 50       	subi	r20, 0x01	; 1
    609a:	50 40       	sbci	r21, 0x00	; 0
    609c:	d8 f7       	brcc	.-10     	; 0x6094 <memcpy+0x6>
    609e:	08 95       	ret

000060a0 <memset>:
    60a0:	dc 01       	movw	r26, r24
    60a2:	01 c0       	rjmp	.+2      	; 0x60a6 <memset+0x6>
    60a4:	6d 93       	st	X+, r22
    60a6:	41 50       	subi	r20, 0x01	; 1
    60a8:	50 40       	sbci	r21, 0x00	; 0
    60aa:	e0 f7       	brcc	.-8      	; 0x60a4 <memset+0x4>
    60ac:	08 95       	ret

000060ae <strlen>:
    60ae:	fc 01       	movw	r30, r24
    60b0:	01 90       	ld	r0, Z+
    60b2:	00 20       	and	r0, r0
    60b4:	e9 f7       	brne	.-6      	; 0x60b0 <strlen+0x2>
    60b6:	80 95       	com	r24
    60b8:	90 95       	com	r25
    60ba:	8e 0f       	add	r24, r30
    60bc:	9f 1f       	adc	r25, r31
    60be:	08 95       	ret

000060c0 <itoa>:
    60c0:	45 32       	cpi	r20, 0x25	; 37
    60c2:	51 05       	cpc	r21, r1
    60c4:	20 f4       	brcc	.+8      	; 0x60ce <itoa+0xe>
    60c6:	42 30       	cpi	r20, 0x02	; 2
    60c8:	10 f0       	brcs	.+4      	; 0x60ce <itoa+0xe>
    60ca:	0c 94 6b 30 	jmp	0x60d6	; 0x60d6 <__itoa_ncheck>
    60ce:	fb 01       	movw	r30, r22
    60d0:	10 82       	st	Z, r1
    60d2:	cb 01       	movw	r24, r22
    60d4:	08 95       	ret

000060d6 <__itoa_ncheck>:
    60d6:	bb 27       	eor	r27, r27
    60d8:	4a 30       	cpi	r20, 0x0A	; 10
    60da:	31 f4       	brne	.+12     	; 0x60e8 <__itoa_ncheck+0x12>
    60dc:	99 23       	and	r25, r25
    60de:	22 f4       	brpl	.+8      	; 0x60e8 <__itoa_ncheck+0x12>
    60e0:	bd e2       	ldi	r27, 0x2D	; 45
    60e2:	90 95       	com	r25
    60e4:	81 95       	neg	r24
    60e6:	9f 4f       	sbci	r25, 0xFF	; 255
    60e8:	0c 94 77 30 	jmp	0x60ee	; 0x60ee <__utoa_common>

000060ec <__utoa_ncheck>:
    60ec:	bb 27       	eor	r27, r27

000060ee <__utoa_common>:
    60ee:	fb 01       	movw	r30, r22
    60f0:	55 27       	eor	r21, r21
    60f2:	aa 27       	eor	r26, r26
    60f4:	88 0f       	add	r24, r24
    60f6:	99 1f       	adc	r25, r25
    60f8:	aa 1f       	adc	r26, r26
    60fa:	a4 17       	cp	r26, r20
    60fc:	10 f0       	brcs	.+4      	; 0x6102 <__utoa_common+0x14>
    60fe:	a4 1b       	sub	r26, r20
    6100:	83 95       	inc	r24
    6102:	50 51       	subi	r21, 0x10	; 16
    6104:	b9 f7       	brne	.-18     	; 0x60f4 <__utoa_common+0x6>
    6106:	a0 5d       	subi	r26, 0xD0	; 208
    6108:	aa 33       	cpi	r26, 0x3A	; 58
    610a:	08 f0       	brcs	.+2      	; 0x610e <__utoa_common+0x20>
    610c:	a9 5d       	subi	r26, 0xD9	; 217
    610e:	a1 93       	st	Z+, r26
    6110:	00 97       	sbiw	r24, 0x00	; 0
    6112:	79 f7       	brne	.-34     	; 0x60f2 <__utoa_common+0x4>
    6114:	b1 11       	cpse	r27, r1
    6116:	b1 93       	st	Z+, r27
    6118:	11 92       	st	Z+, r1
    611a:	cb 01       	movw	r24, r22
    611c:	0c 94 d3 32 	jmp	0x65a6	; 0x65a6 <strrev>

00006120 <sprintf>:
    6120:	0f 93       	push	r16
    6122:	1f 93       	push	r17
    6124:	cf 93       	push	r28
    6126:	df 93       	push	r29
    6128:	cd b7       	in	r28, 0x3d	; 61
    612a:	de b7       	in	r29, 0x3e	; 62
    612c:	2e 97       	sbiw	r28, 0x0e	; 14
    612e:	cd bf       	out	0x3d, r28	; 61
    6130:	de bf       	out	0x3e, r29	; 62
    6132:	0e 89       	ldd	r16, Y+22	; 0x16
    6134:	1f 89       	ldd	r17, Y+23	; 0x17
    6136:	86 e0       	ldi	r24, 0x06	; 6
    6138:	8c 83       	std	Y+4, r24	; 0x04
    613a:	09 83       	std	Y+1, r16	; 0x01
    613c:	1a 83       	std	Y+2, r17	; 0x02
    613e:	8f ef       	ldi	r24, 0xFF	; 255
    6140:	9f e7       	ldi	r25, 0x7F	; 127
    6142:	8d 83       	std	Y+5, r24	; 0x05
    6144:	9e 83       	std	Y+6, r25	; 0x06
    6146:	ae 01       	movw	r20, r28
    6148:	46 5e       	subi	r20, 0xE6	; 230
    614a:	5f 4f       	sbci	r21, 0xFF	; 255
    614c:	68 8d       	ldd	r22, Y+24	; 0x18
    614e:	79 8d       	ldd	r23, Y+25	; 0x19
    6150:	ce 01       	movw	r24, r28
    6152:	01 96       	adiw	r24, 0x01	; 1
    6154:	0e 94 b9 30 	call	0x6172	; 0x6172 <vfprintf>
    6158:	ef 81       	ldd	r30, Y+7	; 0x07
    615a:	f8 85       	ldd	r31, Y+8	; 0x08
    615c:	e0 0f       	add	r30, r16
    615e:	f1 1f       	adc	r31, r17
    6160:	10 82       	st	Z, r1
    6162:	2e 96       	adiw	r28, 0x0e	; 14
    6164:	cd bf       	out	0x3d, r28	; 61
    6166:	de bf       	out	0x3e, r29	; 62
    6168:	df 91       	pop	r29
    616a:	cf 91       	pop	r28
    616c:	1f 91       	pop	r17
    616e:	0f 91       	pop	r16
    6170:	08 95       	ret

00006172 <vfprintf>:
    6172:	2f 92       	push	r2
    6174:	3f 92       	push	r3
    6176:	4f 92       	push	r4
    6178:	5f 92       	push	r5
    617a:	6f 92       	push	r6
    617c:	7f 92       	push	r7
    617e:	8f 92       	push	r8
    6180:	9f 92       	push	r9
    6182:	af 92       	push	r10
    6184:	bf 92       	push	r11
    6186:	cf 92       	push	r12
    6188:	df 92       	push	r13
    618a:	ef 92       	push	r14
    618c:	ff 92       	push	r15
    618e:	0f 93       	push	r16
    6190:	1f 93       	push	r17
    6192:	cf 93       	push	r28
    6194:	df 93       	push	r29
    6196:	cd b7       	in	r28, 0x3d	; 61
    6198:	de b7       	in	r29, 0x3e	; 62
    619a:	2b 97       	sbiw	r28, 0x0b	; 11
    619c:	cd bf       	out	0x3d, r28	; 61
    619e:	de bf       	out	0x3e, r29	; 62
    61a0:	6c 01       	movw	r12, r24
    61a2:	7b 01       	movw	r14, r22
    61a4:	8a 01       	movw	r16, r20
    61a6:	fc 01       	movw	r30, r24
    61a8:	16 82       	std	Z+6, r1	; 0x06
    61aa:	17 82       	std	Z+7, r1	; 0x07
    61ac:	83 81       	ldd	r24, Z+3	; 0x03
    61ae:	81 ff       	sbrs	r24, 1
    61b0:	cc c1       	rjmp	.+920    	; 0x654a <vfprintf+0x3d8>
    61b2:	ce 01       	movw	r24, r28
    61b4:	01 96       	adiw	r24, 0x01	; 1
    61b6:	3c 01       	movw	r6, r24
    61b8:	f6 01       	movw	r30, r12
    61ba:	93 81       	ldd	r25, Z+3	; 0x03
    61bc:	f7 01       	movw	r30, r14
    61be:	93 fd       	sbrc	r25, 3
    61c0:	85 91       	lpm	r24, Z+
    61c2:	93 ff       	sbrs	r25, 3
    61c4:	81 91       	ld	r24, Z+
    61c6:	7f 01       	movw	r14, r30
    61c8:	88 23       	and	r24, r24
    61ca:	09 f4       	brne	.+2      	; 0x61ce <vfprintf+0x5c>
    61cc:	ba c1       	rjmp	.+884    	; 0x6542 <vfprintf+0x3d0>
    61ce:	85 32       	cpi	r24, 0x25	; 37
    61d0:	39 f4       	brne	.+14     	; 0x61e0 <vfprintf+0x6e>
    61d2:	93 fd       	sbrc	r25, 3
    61d4:	85 91       	lpm	r24, Z+
    61d6:	93 ff       	sbrs	r25, 3
    61d8:	81 91       	ld	r24, Z+
    61da:	7f 01       	movw	r14, r30
    61dc:	85 32       	cpi	r24, 0x25	; 37
    61de:	29 f4       	brne	.+10     	; 0x61ea <vfprintf+0x78>
    61e0:	b6 01       	movw	r22, r12
    61e2:	90 e0       	ldi	r25, 0x00	; 0
    61e4:	0e 94 e3 32 	call	0x65c6	; 0x65c6 <fputc>
    61e8:	e7 cf       	rjmp	.-50     	; 0x61b8 <vfprintf+0x46>
    61ea:	91 2c       	mov	r9, r1
    61ec:	21 2c       	mov	r2, r1
    61ee:	31 2c       	mov	r3, r1
    61f0:	ff e1       	ldi	r31, 0x1F	; 31
    61f2:	f3 15       	cp	r31, r3
    61f4:	d8 f0       	brcs	.+54     	; 0x622c <vfprintf+0xba>
    61f6:	8b 32       	cpi	r24, 0x2B	; 43
    61f8:	79 f0       	breq	.+30     	; 0x6218 <vfprintf+0xa6>
    61fa:	38 f4       	brcc	.+14     	; 0x620a <vfprintf+0x98>
    61fc:	80 32       	cpi	r24, 0x20	; 32
    61fe:	79 f0       	breq	.+30     	; 0x621e <vfprintf+0xac>
    6200:	83 32       	cpi	r24, 0x23	; 35
    6202:	a1 f4       	brne	.+40     	; 0x622c <vfprintf+0xba>
    6204:	23 2d       	mov	r18, r3
    6206:	20 61       	ori	r18, 0x10	; 16
    6208:	1d c0       	rjmp	.+58     	; 0x6244 <vfprintf+0xd2>
    620a:	8d 32       	cpi	r24, 0x2D	; 45
    620c:	61 f0       	breq	.+24     	; 0x6226 <vfprintf+0xb4>
    620e:	80 33       	cpi	r24, 0x30	; 48
    6210:	69 f4       	brne	.+26     	; 0x622c <vfprintf+0xba>
    6212:	23 2d       	mov	r18, r3
    6214:	21 60       	ori	r18, 0x01	; 1
    6216:	16 c0       	rjmp	.+44     	; 0x6244 <vfprintf+0xd2>
    6218:	83 2d       	mov	r24, r3
    621a:	82 60       	ori	r24, 0x02	; 2
    621c:	38 2e       	mov	r3, r24
    621e:	e3 2d       	mov	r30, r3
    6220:	e4 60       	ori	r30, 0x04	; 4
    6222:	3e 2e       	mov	r3, r30
    6224:	2a c0       	rjmp	.+84     	; 0x627a <vfprintf+0x108>
    6226:	f3 2d       	mov	r31, r3
    6228:	f8 60       	ori	r31, 0x08	; 8
    622a:	1d c0       	rjmp	.+58     	; 0x6266 <vfprintf+0xf4>
    622c:	37 fc       	sbrc	r3, 7
    622e:	2d c0       	rjmp	.+90     	; 0x628a <vfprintf+0x118>
    6230:	20 ed       	ldi	r18, 0xD0	; 208
    6232:	28 0f       	add	r18, r24
    6234:	2a 30       	cpi	r18, 0x0A	; 10
    6236:	40 f0       	brcs	.+16     	; 0x6248 <vfprintf+0xd6>
    6238:	8e 32       	cpi	r24, 0x2E	; 46
    623a:	b9 f4       	brne	.+46     	; 0x626a <vfprintf+0xf8>
    623c:	36 fc       	sbrc	r3, 6
    623e:	81 c1       	rjmp	.+770    	; 0x6542 <vfprintf+0x3d0>
    6240:	23 2d       	mov	r18, r3
    6242:	20 64       	ori	r18, 0x40	; 64
    6244:	32 2e       	mov	r3, r18
    6246:	19 c0       	rjmp	.+50     	; 0x627a <vfprintf+0x108>
    6248:	36 fe       	sbrs	r3, 6
    624a:	06 c0       	rjmp	.+12     	; 0x6258 <vfprintf+0xe6>
    624c:	8a e0       	ldi	r24, 0x0A	; 10
    624e:	98 9e       	mul	r9, r24
    6250:	20 0d       	add	r18, r0
    6252:	11 24       	eor	r1, r1
    6254:	92 2e       	mov	r9, r18
    6256:	11 c0       	rjmp	.+34     	; 0x627a <vfprintf+0x108>
    6258:	ea e0       	ldi	r30, 0x0A	; 10
    625a:	2e 9e       	mul	r2, r30
    625c:	20 0d       	add	r18, r0
    625e:	11 24       	eor	r1, r1
    6260:	22 2e       	mov	r2, r18
    6262:	f3 2d       	mov	r31, r3
    6264:	f0 62       	ori	r31, 0x20	; 32
    6266:	3f 2e       	mov	r3, r31
    6268:	08 c0       	rjmp	.+16     	; 0x627a <vfprintf+0x108>
    626a:	8c 36       	cpi	r24, 0x6C	; 108
    626c:	21 f4       	brne	.+8      	; 0x6276 <vfprintf+0x104>
    626e:	83 2d       	mov	r24, r3
    6270:	80 68       	ori	r24, 0x80	; 128
    6272:	38 2e       	mov	r3, r24
    6274:	02 c0       	rjmp	.+4      	; 0x627a <vfprintf+0x108>
    6276:	88 36       	cpi	r24, 0x68	; 104
    6278:	41 f4       	brne	.+16     	; 0x628a <vfprintf+0x118>
    627a:	f7 01       	movw	r30, r14
    627c:	93 fd       	sbrc	r25, 3
    627e:	85 91       	lpm	r24, Z+
    6280:	93 ff       	sbrs	r25, 3
    6282:	81 91       	ld	r24, Z+
    6284:	7f 01       	movw	r14, r30
    6286:	81 11       	cpse	r24, r1
    6288:	b3 cf       	rjmp	.-154    	; 0x61f0 <vfprintf+0x7e>
    628a:	98 2f       	mov	r25, r24
    628c:	9f 7d       	andi	r25, 0xDF	; 223
    628e:	95 54       	subi	r25, 0x45	; 69
    6290:	93 30       	cpi	r25, 0x03	; 3
    6292:	28 f4       	brcc	.+10     	; 0x629e <vfprintf+0x12c>
    6294:	0c 5f       	subi	r16, 0xFC	; 252
    6296:	1f 4f       	sbci	r17, 0xFF	; 255
    6298:	9f e3       	ldi	r25, 0x3F	; 63
    629a:	99 83       	std	Y+1, r25	; 0x01
    629c:	0d c0       	rjmp	.+26     	; 0x62b8 <vfprintf+0x146>
    629e:	83 36       	cpi	r24, 0x63	; 99
    62a0:	31 f0       	breq	.+12     	; 0x62ae <vfprintf+0x13c>
    62a2:	83 37       	cpi	r24, 0x73	; 115
    62a4:	71 f0       	breq	.+28     	; 0x62c2 <vfprintf+0x150>
    62a6:	83 35       	cpi	r24, 0x53	; 83
    62a8:	09 f0       	breq	.+2      	; 0x62ac <vfprintf+0x13a>
    62aa:	59 c0       	rjmp	.+178    	; 0x635e <vfprintf+0x1ec>
    62ac:	21 c0       	rjmp	.+66     	; 0x62f0 <vfprintf+0x17e>
    62ae:	f8 01       	movw	r30, r16
    62b0:	80 81       	ld	r24, Z
    62b2:	89 83       	std	Y+1, r24	; 0x01
    62b4:	0e 5f       	subi	r16, 0xFE	; 254
    62b6:	1f 4f       	sbci	r17, 0xFF	; 255
    62b8:	88 24       	eor	r8, r8
    62ba:	83 94       	inc	r8
    62bc:	91 2c       	mov	r9, r1
    62be:	53 01       	movw	r10, r6
    62c0:	13 c0       	rjmp	.+38     	; 0x62e8 <vfprintf+0x176>
    62c2:	28 01       	movw	r4, r16
    62c4:	f2 e0       	ldi	r31, 0x02	; 2
    62c6:	4f 0e       	add	r4, r31
    62c8:	51 1c       	adc	r5, r1
    62ca:	f8 01       	movw	r30, r16
    62cc:	a0 80       	ld	r10, Z
    62ce:	b1 80       	ldd	r11, Z+1	; 0x01
    62d0:	36 fe       	sbrs	r3, 6
    62d2:	03 c0       	rjmp	.+6      	; 0x62da <vfprintf+0x168>
    62d4:	69 2d       	mov	r22, r9
    62d6:	70 e0       	ldi	r23, 0x00	; 0
    62d8:	02 c0       	rjmp	.+4      	; 0x62de <vfprintf+0x16c>
    62da:	6f ef       	ldi	r22, 0xFF	; 255
    62dc:	7f ef       	ldi	r23, 0xFF	; 255
    62de:	c5 01       	movw	r24, r10
    62e0:	0e 94 c8 32 	call	0x6590	; 0x6590 <strnlen>
    62e4:	4c 01       	movw	r8, r24
    62e6:	82 01       	movw	r16, r4
    62e8:	f3 2d       	mov	r31, r3
    62ea:	ff 77       	andi	r31, 0x7F	; 127
    62ec:	3f 2e       	mov	r3, r31
    62ee:	16 c0       	rjmp	.+44     	; 0x631c <vfprintf+0x1aa>
    62f0:	28 01       	movw	r4, r16
    62f2:	22 e0       	ldi	r18, 0x02	; 2
    62f4:	42 0e       	add	r4, r18
    62f6:	51 1c       	adc	r5, r1
    62f8:	f8 01       	movw	r30, r16
    62fa:	a0 80       	ld	r10, Z
    62fc:	b1 80       	ldd	r11, Z+1	; 0x01
    62fe:	36 fe       	sbrs	r3, 6
    6300:	03 c0       	rjmp	.+6      	; 0x6308 <vfprintf+0x196>
    6302:	69 2d       	mov	r22, r9
    6304:	70 e0       	ldi	r23, 0x00	; 0
    6306:	02 c0       	rjmp	.+4      	; 0x630c <vfprintf+0x19a>
    6308:	6f ef       	ldi	r22, 0xFF	; 255
    630a:	7f ef       	ldi	r23, 0xFF	; 255
    630c:	c5 01       	movw	r24, r10
    630e:	0e 94 bd 32 	call	0x657a	; 0x657a <strnlen_P>
    6312:	4c 01       	movw	r8, r24
    6314:	f3 2d       	mov	r31, r3
    6316:	f0 68       	ori	r31, 0x80	; 128
    6318:	3f 2e       	mov	r3, r31
    631a:	82 01       	movw	r16, r4
    631c:	33 fc       	sbrc	r3, 3
    631e:	1b c0       	rjmp	.+54     	; 0x6356 <vfprintf+0x1e4>
    6320:	82 2d       	mov	r24, r2
    6322:	90 e0       	ldi	r25, 0x00	; 0
    6324:	88 16       	cp	r8, r24
    6326:	99 06       	cpc	r9, r25
    6328:	b0 f4       	brcc	.+44     	; 0x6356 <vfprintf+0x1e4>
    632a:	b6 01       	movw	r22, r12
    632c:	80 e2       	ldi	r24, 0x20	; 32
    632e:	90 e0       	ldi	r25, 0x00	; 0
    6330:	0e 94 e3 32 	call	0x65c6	; 0x65c6 <fputc>
    6334:	2a 94       	dec	r2
    6336:	f4 cf       	rjmp	.-24     	; 0x6320 <vfprintf+0x1ae>
    6338:	f5 01       	movw	r30, r10
    633a:	37 fc       	sbrc	r3, 7
    633c:	85 91       	lpm	r24, Z+
    633e:	37 fe       	sbrs	r3, 7
    6340:	81 91       	ld	r24, Z+
    6342:	5f 01       	movw	r10, r30
    6344:	b6 01       	movw	r22, r12
    6346:	90 e0       	ldi	r25, 0x00	; 0
    6348:	0e 94 e3 32 	call	0x65c6	; 0x65c6 <fputc>
    634c:	21 10       	cpse	r2, r1
    634e:	2a 94       	dec	r2
    6350:	21 e0       	ldi	r18, 0x01	; 1
    6352:	82 1a       	sub	r8, r18
    6354:	91 08       	sbc	r9, r1
    6356:	81 14       	cp	r8, r1
    6358:	91 04       	cpc	r9, r1
    635a:	71 f7       	brne	.-36     	; 0x6338 <vfprintf+0x1c6>
    635c:	e8 c0       	rjmp	.+464    	; 0x652e <vfprintf+0x3bc>
    635e:	84 36       	cpi	r24, 0x64	; 100
    6360:	11 f0       	breq	.+4      	; 0x6366 <vfprintf+0x1f4>
    6362:	89 36       	cpi	r24, 0x69	; 105
    6364:	41 f5       	brne	.+80     	; 0x63b6 <vfprintf+0x244>
    6366:	f8 01       	movw	r30, r16
    6368:	37 fe       	sbrs	r3, 7
    636a:	07 c0       	rjmp	.+14     	; 0x637a <vfprintf+0x208>
    636c:	60 81       	ld	r22, Z
    636e:	71 81       	ldd	r23, Z+1	; 0x01
    6370:	82 81       	ldd	r24, Z+2	; 0x02
    6372:	93 81       	ldd	r25, Z+3	; 0x03
    6374:	0c 5f       	subi	r16, 0xFC	; 252
    6376:	1f 4f       	sbci	r17, 0xFF	; 255
    6378:	08 c0       	rjmp	.+16     	; 0x638a <vfprintf+0x218>
    637a:	60 81       	ld	r22, Z
    637c:	71 81       	ldd	r23, Z+1	; 0x01
    637e:	07 2e       	mov	r0, r23
    6380:	00 0c       	add	r0, r0
    6382:	88 0b       	sbc	r24, r24
    6384:	99 0b       	sbc	r25, r25
    6386:	0e 5f       	subi	r16, 0xFE	; 254
    6388:	1f 4f       	sbci	r17, 0xFF	; 255
    638a:	f3 2d       	mov	r31, r3
    638c:	ff 76       	andi	r31, 0x6F	; 111
    638e:	3f 2e       	mov	r3, r31
    6390:	97 ff       	sbrs	r25, 7
    6392:	09 c0       	rjmp	.+18     	; 0x63a6 <vfprintf+0x234>
    6394:	90 95       	com	r25
    6396:	80 95       	com	r24
    6398:	70 95       	com	r23
    639a:	61 95       	neg	r22
    639c:	7f 4f       	sbci	r23, 0xFF	; 255
    639e:	8f 4f       	sbci	r24, 0xFF	; 255
    63a0:	9f 4f       	sbci	r25, 0xFF	; 255
    63a2:	f0 68       	ori	r31, 0x80	; 128
    63a4:	3f 2e       	mov	r3, r31
    63a6:	2a e0       	ldi	r18, 0x0A	; 10
    63a8:	30 e0       	ldi	r19, 0x00	; 0
    63aa:	a3 01       	movw	r20, r6
    63ac:	0e 94 1f 33 	call	0x663e	; 0x663e <__ultoa_invert>
    63b0:	88 2e       	mov	r8, r24
    63b2:	86 18       	sub	r8, r6
    63b4:	45 c0       	rjmp	.+138    	; 0x6440 <vfprintf+0x2ce>
    63b6:	85 37       	cpi	r24, 0x75	; 117
    63b8:	31 f4       	brne	.+12     	; 0x63c6 <vfprintf+0x254>
    63ba:	23 2d       	mov	r18, r3
    63bc:	2f 7e       	andi	r18, 0xEF	; 239
    63be:	b2 2e       	mov	r11, r18
    63c0:	2a e0       	ldi	r18, 0x0A	; 10
    63c2:	30 e0       	ldi	r19, 0x00	; 0
    63c4:	25 c0       	rjmp	.+74     	; 0x6410 <vfprintf+0x29e>
    63c6:	93 2d       	mov	r25, r3
    63c8:	99 7f       	andi	r25, 0xF9	; 249
    63ca:	b9 2e       	mov	r11, r25
    63cc:	8f 36       	cpi	r24, 0x6F	; 111
    63ce:	c1 f0       	breq	.+48     	; 0x6400 <vfprintf+0x28e>
    63d0:	18 f4       	brcc	.+6      	; 0x63d8 <vfprintf+0x266>
    63d2:	88 35       	cpi	r24, 0x58	; 88
    63d4:	79 f0       	breq	.+30     	; 0x63f4 <vfprintf+0x282>
    63d6:	b5 c0       	rjmp	.+362    	; 0x6542 <vfprintf+0x3d0>
    63d8:	80 37       	cpi	r24, 0x70	; 112
    63da:	19 f0       	breq	.+6      	; 0x63e2 <vfprintf+0x270>
    63dc:	88 37       	cpi	r24, 0x78	; 120
    63de:	21 f0       	breq	.+8      	; 0x63e8 <vfprintf+0x276>
    63e0:	b0 c0       	rjmp	.+352    	; 0x6542 <vfprintf+0x3d0>
    63e2:	e9 2f       	mov	r30, r25
    63e4:	e0 61       	ori	r30, 0x10	; 16
    63e6:	be 2e       	mov	r11, r30
    63e8:	b4 fe       	sbrs	r11, 4
    63ea:	0d c0       	rjmp	.+26     	; 0x6406 <vfprintf+0x294>
    63ec:	fb 2d       	mov	r31, r11
    63ee:	f4 60       	ori	r31, 0x04	; 4
    63f0:	bf 2e       	mov	r11, r31
    63f2:	09 c0       	rjmp	.+18     	; 0x6406 <vfprintf+0x294>
    63f4:	34 fe       	sbrs	r3, 4
    63f6:	0a c0       	rjmp	.+20     	; 0x640c <vfprintf+0x29a>
    63f8:	29 2f       	mov	r18, r25
    63fa:	26 60       	ori	r18, 0x06	; 6
    63fc:	b2 2e       	mov	r11, r18
    63fe:	06 c0       	rjmp	.+12     	; 0x640c <vfprintf+0x29a>
    6400:	28 e0       	ldi	r18, 0x08	; 8
    6402:	30 e0       	ldi	r19, 0x00	; 0
    6404:	05 c0       	rjmp	.+10     	; 0x6410 <vfprintf+0x29e>
    6406:	20 e1       	ldi	r18, 0x10	; 16
    6408:	30 e0       	ldi	r19, 0x00	; 0
    640a:	02 c0       	rjmp	.+4      	; 0x6410 <vfprintf+0x29e>
    640c:	20 e1       	ldi	r18, 0x10	; 16
    640e:	32 e0       	ldi	r19, 0x02	; 2
    6410:	f8 01       	movw	r30, r16
    6412:	b7 fe       	sbrs	r11, 7
    6414:	07 c0       	rjmp	.+14     	; 0x6424 <vfprintf+0x2b2>
    6416:	60 81       	ld	r22, Z
    6418:	71 81       	ldd	r23, Z+1	; 0x01
    641a:	82 81       	ldd	r24, Z+2	; 0x02
    641c:	93 81       	ldd	r25, Z+3	; 0x03
    641e:	0c 5f       	subi	r16, 0xFC	; 252
    6420:	1f 4f       	sbci	r17, 0xFF	; 255
    6422:	06 c0       	rjmp	.+12     	; 0x6430 <vfprintf+0x2be>
    6424:	60 81       	ld	r22, Z
    6426:	71 81       	ldd	r23, Z+1	; 0x01
    6428:	80 e0       	ldi	r24, 0x00	; 0
    642a:	90 e0       	ldi	r25, 0x00	; 0
    642c:	0e 5f       	subi	r16, 0xFE	; 254
    642e:	1f 4f       	sbci	r17, 0xFF	; 255
    6430:	a3 01       	movw	r20, r6
    6432:	0e 94 1f 33 	call	0x663e	; 0x663e <__ultoa_invert>
    6436:	88 2e       	mov	r8, r24
    6438:	86 18       	sub	r8, r6
    643a:	fb 2d       	mov	r31, r11
    643c:	ff 77       	andi	r31, 0x7F	; 127
    643e:	3f 2e       	mov	r3, r31
    6440:	36 fe       	sbrs	r3, 6
    6442:	0d c0       	rjmp	.+26     	; 0x645e <vfprintf+0x2ec>
    6444:	23 2d       	mov	r18, r3
    6446:	2e 7f       	andi	r18, 0xFE	; 254
    6448:	a2 2e       	mov	r10, r18
    644a:	89 14       	cp	r8, r9
    644c:	58 f4       	brcc	.+22     	; 0x6464 <vfprintf+0x2f2>
    644e:	34 fe       	sbrs	r3, 4
    6450:	0b c0       	rjmp	.+22     	; 0x6468 <vfprintf+0x2f6>
    6452:	32 fc       	sbrc	r3, 2
    6454:	09 c0       	rjmp	.+18     	; 0x6468 <vfprintf+0x2f6>
    6456:	83 2d       	mov	r24, r3
    6458:	8e 7e       	andi	r24, 0xEE	; 238
    645a:	a8 2e       	mov	r10, r24
    645c:	05 c0       	rjmp	.+10     	; 0x6468 <vfprintf+0x2f6>
    645e:	b8 2c       	mov	r11, r8
    6460:	a3 2c       	mov	r10, r3
    6462:	03 c0       	rjmp	.+6      	; 0x646a <vfprintf+0x2f8>
    6464:	b8 2c       	mov	r11, r8
    6466:	01 c0       	rjmp	.+2      	; 0x646a <vfprintf+0x2f8>
    6468:	b9 2c       	mov	r11, r9
    646a:	a4 fe       	sbrs	r10, 4
    646c:	0f c0       	rjmp	.+30     	; 0x648c <vfprintf+0x31a>
    646e:	fe 01       	movw	r30, r28
    6470:	e8 0d       	add	r30, r8
    6472:	f1 1d       	adc	r31, r1
    6474:	80 81       	ld	r24, Z
    6476:	80 33       	cpi	r24, 0x30	; 48
    6478:	21 f4       	brne	.+8      	; 0x6482 <vfprintf+0x310>
    647a:	9a 2d       	mov	r25, r10
    647c:	99 7e       	andi	r25, 0xE9	; 233
    647e:	a9 2e       	mov	r10, r25
    6480:	09 c0       	rjmp	.+18     	; 0x6494 <vfprintf+0x322>
    6482:	a2 fe       	sbrs	r10, 2
    6484:	06 c0       	rjmp	.+12     	; 0x6492 <vfprintf+0x320>
    6486:	b3 94       	inc	r11
    6488:	b3 94       	inc	r11
    648a:	04 c0       	rjmp	.+8      	; 0x6494 <vfprintf+0x322>
    648c:	8a 2d       	mov	r24, r10
    648e:	86 78       	andi	r24, 0x86	; 134
    6490:	09 f0       	breq	.+2      	; 0x6494 <vfprintf+0x322>
    6492:	b3 94       	inc	r11
    6494:	a3 fc       	sbrc	r10, 3
    6496:	11 c0       	rjmp	.+34     	; 0x64ba <vfprintf+0x348>
    6498:	a0 fe       	sbrs	r10, 0
    649a:	06 c0       	rjmp	.+12     	; 0x64a8 <vfprintf+0x336>
    649c:	b2 14       	cp	r11, r2
    649e:	88 f4       	brcc	.+34     	; 0x64c2 <vfprintf+0x350>
    64a0:	28 0c       	add	r2, r8
    64a2:	92 2c       	mov	r9, r2
    64a4:	9b 18       	sub	r9, r11
    64a6:	0e c0       	rjmp	.+28     	; 0x64c4 <vfprintf+0x352>
    64a8:	b2 14       	cp	r11, r2
    64aa:	60 f4       	brcc	.+24     	; 0x64c4 <vfprintf+0x352>
    64ac:	b6 01       	movw	r22, r12
    64ae:	80 e2       	ldi	r24, 0x20	; 32
    64b0:	90 e0       	ldi	r25, 0x00	; 0
    64b2:	0e 94 e3 32 	call	0x65c6	; 0x65c6 <fputc>
    64b6:	b3 94       	inc	r11
    64b8:	f7 cf       	rjmp	.-18     	; 0x64a8 <vfprintf+0x336>
    64ba:	b2 14       	cp	r11, r2
    64bc:	18 f4       	brcc	.+6      	; 0x64c4 <vfprintf+0x352>
    64be:	2b 18       	sub	r2, r11
    64c0:	02 c0       	rjmp	.+4      	; 0x64c6 <vfprintf+0x354>
    64c2:	98 2c       	mov	r9, r8
    64c4:	21 2c       	mov	r2, r1
    64c6:	a4 fe       	sbrs	r10, 4
    64c8:	10 c0       	rjmp	.+32     	; 0x64ea <vfprintf+0x378>
    64ca:	b6 01       	movw	r22, r12
    64cc:	80 e3       	ldi	r24, 0x30	; 48
    64ce:	90 e0       	ldi	r25, 0x00	; 0
    64d0:	0e 94 e3 32 	call	0x65c6	; 0x65c6 <fputc>
    64d4:	a2 fe       	sbrs	r10, 2
    64d6:	17 c0       	rjmp	.+46     	; 0x6506 <vfprintf+0x394>
    64d8:	a1 fc       	sbrc	r10, 1
    64da:	03 c0       	rjmp	.+6      	; 0x64e2 <vfprintf+0x370>
    64dc:	88 e7       	ldi	r24, 0x78	; 120
    64de:	90 e0       	ldi	r25, 0x00	; 0
    64e0:	02 c0       	rjmp	.+4      	; 0x64e6 <vfprintf+0x374>
    64e2:	88 e5       	ldi	r24, 0x58	; 88
    64e4:	90 e0       	ldi	r25, 0x00	; 0
    64e6:	b6 01       	movw	r22, r12
    64e8:	0c c0       	rjmp	.+24     	; 0x6502 <vfprintf+0x390>
    64ea:	8a 2d       	mov	r24, r10
    64ec:	86 78       	andi	r24, 0x86	; 134
    64ee:	59 f0       	breq	.+22     	; 0x6506 <vfprintf+0x394>
    64f0:	a1 fe       	sbrs	r10, 1
    64f2:	02 c0       	rjmp	.+4      	; 0x64f8 <vfprintf+0x386>
    64f4:	8b e2       	ldi	r24, 0x2B	; 43
    64f6:	01 c0       	rjmp	.+2      	; 0x64fa <vfprintf+0x388>
    64f8:	80 e2       	ldi	r24, 0x20	; 32
    64fa:	a7 fc       	sbrc	r10, 7
    64fc:	8d e2       	ldi	r24, 0x2D	; 45
    64fe:	b6 01       	movw	r22, r12
    6500:	90 e0       	ldi	r25, 0x00	; 0
    6502:	0e 94 e3 32 	call	0x65c6	; 0x65c6 <fputc>
    6506:	89 14       	cp	r8, r9
    6508:	38 f4       	brcc	.+14     	; 0x6518 <vfprintf+0x3a6>
    650a:	b6 01       	movw	r22, r12
    650c:	80 e3       	ldi	r24, 0x30	; 48
    650e:	90 e0       	ldi	r25, 0x00	; 0
    6510:	0e 94 e3 32 	call	0x65c6	; 0x65c6 <fputc>
    6514:	9a 94       	dec	r9
    6516:	f7 cf       	rjmp	.-18     	; 0x6506 <vfprintf+0x394>
    6518:	8a 94       	dec	r8
    651a:	f3 01       	movw	r30, r6
    651c:	e8 0d       	add	r30, r8
    651e:	f1 1d       	adc	r31, r1
    6520:	80 81       	ld	r24, Z
    6522:	b6 01       	movw	r22, r12
    6524:	90 e0       	ldi	r25, 0x00	; 0
    6526:	0e 94 e3 32 	call	0x65c6	; 0x65c6 <fputc>
    652a:	81 10       	cpse	r8, r1
    652c:	f5 cf       	rjmp	.-22     	; 0x6518 <vfprintf+0x3a6>
    652e:	22 20       	and	r2, r2
    6530:	09 f4       	brne	.+2      	; 0x6534 <vfprintf+0x3c2>
    6532:	42 ce       	rjmp	.-892    	; 0x61b8 <vfprintf+0x46>
    6534:	b6 01       	movw	r22, r12
    6536:	80 e2       	ldi	r24, 0x20	; 32
    6538:	90 e0       	ldi	r25, 0x00	; 0
    653a:	0e 94 e3 32 	call	0x65c6	; 0x65c6 <fputc>
    653e:	2a 94       	dec	r2
    6540:	f6 cf       	rjmp	.-20     	; 0x652e <vfprintf+0x3bc>
    6542:	f6 01       	movw	r30, r12
    6544:	86 81       	ldd	r24, Z+6	; 0x06
    6546:	97 81       	ldd	r25, Z+7	; 0x07
    6548:	02 c0       	rjmp	.+4      	; 0x654e <vfprintf+0x3dc>
    654a:	8f ef       	ldi	r24, 0xFF	; 255
    654c:	9f ef       	ldi	r25, 0xFF	; 255
    654e:	2b 96       	adiw	r28, 0x0b	; 11
    6550:	cd bf       	out	0x3d, r28	; 61
    6552:	de bf       	out	0x3e, r29	; 62
    6554:	df 91       	pop	r29
    6556:	cf 91       	pop	r28
    6558:	1f 91       	pop	r17
    655a:	0f 91       	pop	r16
    655c:	ff 90       	pop	r15
    655e:	ef 90       	pop	r14
    6560:	df 90       	pop	r13
    6562:	cf 90       	pop	r12
    6564:	bf 90       	pop	r11
    6566:	af 90       	pop	r10
    6568:	9f 90       	pop	r9
    656a:	8f 90       	pop	r8
    656c:	7f 90       	pop	r7
    656e:	6f 90       	pop	r6
    6570:	5f 90       	pop	r5
    6572:	4f 90       	pop	r4
    6574:	3f 90       	pop	r3
    6576:	2f 90       	pop	r2
    6578:	08 95       	ret

0000657a <strnlen_P>:
    657a:	fc 01       	movw	r30, r24
    657c:	05 90       	lpm	r0, Z+
    657e:	61 50       	subi	r22, 0x01	; 1
    6580:	70 40       	sbci	r23, 0x00	; 0
    6582:	01 10       	cpse	r0, r1
    6584:	d8 f7       	brcc	.-10     	; 0x657c <strnlen_P+0x2>
    6586:	80 95       	com	r24
    6588:	90 95       	com	r25
    658a:	8e 0f       	add	r24, r30
    658c:	9f 1f       	adc	r25, r31
    658e:	08 95       	ret

00006590 <strnlen>:
    6590:	fc 01       	movw	r30, r24
    6592:	61 50       	subi	r22, 0x01	; 1
    6594:	70 40       	sbci	r23, 0x00	; 0
    6596:	01 90       	ld	r0, Z+
    6598:	01 10       	cpse	r0, r1
    659a:	d8 f7       	brcc	.-10     	; 0x6592 <strnlen+0x2>
    659c:	80 95       	com	r24
    659e:	90 95       	com	r25
    65a0:	8e 0f       	add	r24, r30
    65a2:	9f 1f       	adc	r25, r31
    65a4:	08 95       	ret

000065a6 <strrev>:
    65a6:	dc 01       	movw	r26, r24
    65a8:	fc 01       	movw	r30, r24
    65aa:	67 2f       	mov	r22, r23
    65ac:	71 91       	ld	r23, Z+
    65ae:	77 23       	and	r23, r23
    65b0:	e1 f7       	brne	.-8      	; 0x65aa <strrev+0x4>
    65b2:	32 97       	sbiw	r30, 0x02	; 2
    65b4:	04 c0       	rjmp	.+8      	; 0x65be <strrev+0x18>
    65b6:	7c 91       	ld	r23, X
    65b8:	6d 93       	st	X+, r22
    65ba:	70 83       	st	Z, r23
    65bc:	62 91       	ld	r22, -Z
    65be:	ae 17       	cp	r26, r30
    65c0:	bf 07       	cpc	r27, r31
    65c2:	c8 f3       	brcs	.-14     	; 0x65b6 <strrev+0x10>
    65c4:	08 95       	ret

000065c6 <fputc>:
    65c6:	0f 93       	push	r16
    65c8:	1f 93       	push	r17
    65ca:	cf 93       	push	r28
    65cc:	df 93       	push	r29
    65ce:	fb 01       	movw	r30, r22
    65d0:	23 81       	ldd	r18, Z+3	; 0x03
    65d2:	21 fd       	sbrc	r18, 1
    65d4:	03 c0       	rjmp	.+6      	; 0x65dc <fputc+0x16>
    65d6:	8f ef       	ldi	r24, 0xFF	; 255
    65d8:	9f ef       	ldi	r25, 0xFF	; 255
    65da:	2c c0       	rjmp	.+88     	; 0x6634 <fputc+0x6e>
    65dc:	22 ff       	sbrs	r18, 2
    65de:	16 c0       	rjmp	.+44     	; 0x660c <fputc+0x46>
    65e0:	46 81       	ldd	r20, Z+6	; 0x06
    65e2:	57 81       	ldd	r21, Z+7	; 0x07
    65e4:	24 81       	ldd	r18, Z+4	; 0x04
    65e6:	35 81       	ldd	r19, Z+5	; 0x05
    65e8:	42 17       	cp	r20, r18
    65ea:	53 07       	cpc	r21, r19
    65ec:	44 f4       	brge	.+16     	; 0x65fe <fputc+0x38>
    65ee:	a0 81       	ld	r26, Z
    65f0:	b1 81       	ldd	r27, Z+1	; 0x01
    65f2:	9d 01       	movw	r18, r26
    65f4:	2f 5f       	subi	r18, 0xFF	; 255
    65f6:	3f 4f       	sbci	r19, 0xFF	; 255
    65f8:	20 83       	st	Z, r18
    65fa:	31 83       	std	Z+1, r19	; 0x01
    65fc:	8c 93       	st	X, r24
    65fe:	26 81       	ldd	r18, Z+6	; 0x06
    6600:	37 81       	ldd	r19, Z+7	; 0x07
    6602:	2f 5f       	subi	r18, 0xFF	; 255
    6604:	3f 4f       	sbci	r19, 0xFF	; 255
    6606:	26 83       	std	Z+6, r18	; 0x06
    6608:	37 83       	std	Z+7, r19	; 0x07
    660a:	14 c0       	rjmp	.+40     	; 0x6634 <fputc+0x6e>
    660c:	8b 01       	movw	r16, r22
    660e:	ec 01       	movw	r28, r24
    6610:	fb 01       	movw	r30, r22
    6612:	00 84       	ldd	r0, Z+8	; 0x08
    6614:	f1 85       	ldd	r31, Z+9	; 0x09
    6616:	e0 2d       	mov	r30, r0
    6618:	19 95       	eicall
    661a:	89 2b       	or	r24, r25
    661c:	e1 f6       	brne	.-72     	; 0x65d6 <fputc+0x10>
    661e:	d8 01       	movw	r26, r16
    6620:	16 96       	adiw	r26, 0x06	; 6
    6622:	8d 91       	ld	r24, X+
    6624:	9c 91       	ld	r25, X
    6626:	17 97       	sbiw	r26, 0x07	; 7
    6628:	01 96       	adiw	r24, 0x01	; 1
    662a:	16 96       	adiw	r26, 0x06	; 6
    662c:	8d 93       	st	X+, r24
    662e:	9c 93       	st	X, r25
    6630:	17 97       	sbiw	r26, 0x07	; 7
    6632:	ce 01       	movw	r24, r28
    6634:	df 91       	pop	r29
    6636:	cf 91       	pop	r28
    6638:	1f 91       	pop	r17
    663a:	0f 91       	pop	r16
    663c:	08 95       	ret

0000663e <__ultoa_invert>:
    663e:	fa 01       	movw	r30, r20
    6640:	aa 27       	eor	r26, r26
    6642:	28 30       	cpi	r18, 0x08	; 8
    6644:	51 f1       	breq	.+84     	; 0x669a <__ultoa_invert+0x5c>
    6646:	20 31       	cpi	r18, 0x10	; 16
    6648:	81 f1       	breq	.+96     	; 0x66aa <__ultoa_invert+0x6c>
    664a:	e8 94       	clt
    664c:	6f 93       	push	r22
    664e:	6e 7f       	andi	r22, 0xFE	; 254
    6650:	6e 5f       	subi	r22, 0xFE	; 254
    6652:	7f 4f       	sbci	r23, 0xFF	; 255
    6654:	8f 4f       	sbci	r24, 0xFF	; 255
    6656:	9f 4f       	sbci	r25, 0xFF	; 255
    6658:	af 4f       	sbci	r26, 0xFF	; 255
    665a:	b1 e0       	ldi	r27, 0x01	; 1
    665c:	3e d0       	rcall	.+124    	; 0x66da <__ultoa_invert+0x9c>
    665e:	b4 e0       	ldi	r27, 0x04	; 4
    6660:	3c d0       	rcall	.+120    	; 0x66da <__ultoa_invert+0x9c>
    6662:	67 0f       	add	r22, r23
    6664:	78 1f       	adc	r23, r24
    6666:	89 1f       	adc	r24, r25
    6668:	9a 1f       	adc	r25, r26
    666a:	a1 1d       	adc	r26, r1
    666c:	68 0f       	add	r22, r24
    666e:	79 1f       	adc	r23, r25
    6670:	8a 1f       	adc	r24, r26
    6672:	91 1d       	adc	r25, r1
    6674:	a1 1d       	adc	r26, r1
    6676:	6a 0f       	add	r22, r26
    6678:	71 1d       	adc	r23, r1
    667a:	81 1d       	adc	r24, r1
    667c:	91 1d       	adc	r25, r1
    667e:	a1 1d       	adc	r26, r1
    6680:	20 d0       	rcall	.+64     	; 0x66c2 <__ultoa_invert+0x84>
    6682:	09 f4       	brne	.+2      	; 0x6686 <__ultoa_invert+0x48>
    6684:	68 94       	set
    6686:	3f 91       	pop	r19
    6688:	2a e0       	ldi	r18, 0x0A	; 10
    668a:	26 9f       	mul	r18, r22
    668c:	11 24       	eor	r1, r1
    668e:	30 19       	sub	r19, r0
    6690:	30 5d       	subi	r19, 0xD0	; 208
    6692:	31 93       	st	Z+, r19
    6694:	de f6       	brtc	.-74     	; 0x664c <__ultoa_invert+0xe>
    6696:	cf 01       	movw	r24, r30
    6698:	08 95       	ret
    669a:	46 2f       	mov	r20, r22
    669c:	47 70       	andi	r20, 0x07	; 7
    669e:	40 5d       	subi	r20, 0xD0	; 208
    66a0:	41 93       	st	Z+, r20
    66a2:	b3 e0       	ldi	r27, 0x03	; 3
    66a4:	0f d0       	rcall	.+30     	; 0x66c4 <__ultoa_invert+0x86>
    66a6:	c9 f7       	brne	.-14     	; 0x669a <__ultoa_invert+0x5c>
    66a8:	f6 cf       	rjmp	.-20     	; 0x6696 <__ultoa_invert+0x58>
    66aa:	46 2f       	mov	r20, r22
    66ac:	4f 70       	andi	r20, 0x0F	; 15
    66ae:	40 5d       	subi	r20, 0xD0	; 208
    66b0:	4a 33       	cpi	r20, 0x3A	; 58
    66b2:	18 f0       	brcs	.+6      	; 0x66ba <__ultoa_invert+0x7c>
    66b4:	49 5d       	subi	r20, 0xD9	; 217
    66b6:	31 fd       	sbrc	r19, 1
    66b8:	40 52       	subi	r20, 0x20	; 32
    66ba:	41 93       	st	Z+, r20
    66bc:	02 d0       	rcall	.+4      	; 0x66c2 <__ultoa_invert+0x84>
    66be:	a9 f7       	brne	.-22     	; 0x66aa <__ultoa_invert+0x6c>
    66c0:	ea cf       	rjmp	.-44     	; 0x6696 <__ultoa_invert+0x58>
    66c2:	b4 e0       	ldi	r27, 0x04	; 4
    66c4:	a6 95       	lsr	r26
    66c6:	97 95       	ror	r25
    66c8:	87 95       	ror	r24
    66ca:	77 95       	ror	r23
    66cc:	67 95       	ror	r22
    66ce:	ba 95       	dec	r27
    66d0:	c9 f7       	brne	.-14     	; 0x66c4 <__ultoa_invert+0x86>
    66d2:	00 97       	sbiw	r24, 0x00	; 0
    66d4:	61 05       	cpc	r22, r1
    66d6:	71 05       	cpc	r23, r1
    66d8:	08 95       	ret
    66da:	9b 01       	movw	r18, r22
    66dc:	ac 01       	movw	r20, r24
    66de:	0a 2e       	mov	r0, r26
    66e0:	06 94       	lsr	r0
    66e2:	57 95       	ror	r21
    66e4:	47 95       	ror	r20
    66e6:	37 95       	ror	r19
    66e8:	27 95       	ror	r18
    66ea:	ba 95       	dec	r27
    66ec:	c9 f7       	brne	.-14     	; 0x66e0 <__ultoa_invert+0xa2>
    66ee:	62 0f       	add	r22, r18
    66f0:	73 1f       	adc	r23, r19
    66f2:	84 1f       	adc	r24, r20
    66f4:	95 1f       	adc	r25, r21
    66f6:	a0 1d       	adc	r26, r0
    66f8:	08 95       	ret

000066fa <_exit>:
    66fa:	f8 94       	cli

000066fc <__stop_program>:
    66fc:	ff cf       	rjmp	.-2      	; 0x66fc <__stop_program>
