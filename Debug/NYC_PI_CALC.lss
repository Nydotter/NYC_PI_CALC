
NYC_PI_CALC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004058  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000050  00802000  00004058  000040ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000c89  00802050  00802050  0000413c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000413c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004198  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007e8  00000000  00000000  000041d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000dfcb  00000000  00000000  000049c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004cb5  00000000  00000000  0001298b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004f96  00000000  00000000  00017640  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001af0  00000000  00000000  0001c5d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000055ce  00000000  00000000  0001e0c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008a18  00000000  00000000  00023696  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007c8  00000000  00000000  0002c0ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 20 01 	jmp	0x240	; 0x240 <__ctors_end>
       4:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
       8:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
       c:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      10:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      14:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      18:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      1c:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      20:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      24:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      28:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      2c:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      30:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      34:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      38:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__vector_14>
      3c:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      40:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      44:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      48:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      4c:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      50:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      54:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      58:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      5c:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      60:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      64:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      68:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      6c:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      70:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      74:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      78:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      7c:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      80:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      84:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      88:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      8c:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      90:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      94:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      98:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      9c:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      a0:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      a4:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      a8:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      ac:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      b0:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      b4:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      b8:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      bc:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      c0:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      c4:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      c8:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      cc:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      d0:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      d4:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      d8:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      dc:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      e0:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      e4:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      e8:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      ec:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      f0:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      f4:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      f8:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
      fc:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     100:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     104:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     108:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     10c:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     110:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     114:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     118:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     11c:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     120:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     124:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     128:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     12c:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     130:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     134:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     138:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     13c:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     140:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     144:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     148:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     14c:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     150:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     154:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     158:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     15c:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     160:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     164:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     168:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     16c:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     170:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     174:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     178:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     17c:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     180:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     184:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     188:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     18c:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     190:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     194:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     198:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     19c:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     1a0:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     1a4:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     1a8:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     1ac:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     1b0:	0c 94 5b 17 	jmp	0x2eb6	; 0x2eb6 <__vector_108>
     1b4:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     1b8:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     1bc:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     1c0:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     1c4:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     1c8:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     1cc:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     1d0:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     1d4:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     1d8:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     1dc:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     1e0:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     1e4:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     1e8:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     1ec:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     1f0:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     1f4:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     1f8:	0c 94 49 01 	jmp	0x292	; 0x292 <__bad_interrupt>
     1fc:	e1 11       	cpse	r30, r1
     1fe:	e1 11       	cpse	r30, r1
     200:	e1 11       	cpse	r30, r1
     202:	2e 12       	cpse	r2, r30
     204:	16 12       	cpse	r1, r22
     206:	2b 12       	cpse	r2, r27
     208:	e1 11       	cpse	r30, r1
     20a:	e1 11       	cpse	r30, r1
     20c:	2e 12       	cpse	r2, r30
     20e:	16 12       	cpse	r1, r22

00000210 <__trampolines_start>:
     210:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <VKreisflaeche>
     214:	0c 94 38 0b 	jmp	0x1670	; 0x1670 <prvIdleTask>
     218:	0c 94 fe 12 	jmp	0x25fc	; 0x25fc <vButtonTask>
     21c:	0c 94 16 12 	jmp	0x242c	; 0x242c <prvProcessReceivedCommands+0xf2>
     220:	0c 94 2e 12 	jmp	0x245c	; 0x245c <prvProcessReceivedCommands+0x122>
     224:	0c 94 4a 12 	jmp	0x2494	; 0x2494 <prvTimerTask>
     228:	0c 94 0f 13 	jmp	0x261e	; 0x261e <controllerTask>
     22c:	0c 94 b8 12 	jmp	0x2570	; 0x2570 <vPiLeibniz>
     230:	0c 94 e1 11 	jmp	0x23c2	; 0x23c2 <prvProcessReceivedCommands+0x88>
     234:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <prvProcessReceivedCommands+0x11c>
     238:	0c 94 06 04 	jmp	0x80c	; 0x80c <vEventGroupSetBitsCallback>
     23c:	0c 94 ff 18 	jmp	0x31fe	; 0x31fe <vDisplayUpdateTask>

00000240 <__ctors_end>:
     240:	11 24       	eor	r1, r1
     242:	1f be       	out	0x3f, r1	; 63
     244:	cf ef       	ldi	r28, 0xFF	; 255
     246:	cd bf       	out	0x3d, r28	; 61
     248:	df e3       	ldi	r29, 0x3F	; 63
     24a:	de bf       	out	0x3e, r29	; 62
     24c:	00 e0       	ldi	r16, 0x00	; 0
     24e:	0c bf       	out	0x3c, r16	; 60

00000250 <init_mem>:
// !!! Never call this function, it is part of .init-Code
void __attribute__ ((naked, section(".init3"))) init_mem (void);
void init_mem (void)
{
   //  Use inline assembler so it works even with optimization turned off
   __asm volatile (
     250:	e9 ed       	ldi	r30, 0xD9	; 217
     252:	fc e2       	ldi	r31, 0x2C	; 44
     254:	8a ea       	ldi	r24, 0xAA	; 170
     256:	90 e4       	ldi	r25, 0x40	; 64
     258:	81 93       	st	Z+, r24
     25a:	e0 30       	cpi	r30, 0x00	; 0
     25c:	f9 07       	cpc	r31, r25
     25e:	e0 f3       	brcs	.-8      	; 0x258 <init_mem+0x8>

00000260 <__do_copy_data>:
     260:	10 e2       	ldi	r17, 0x20	; 32
     262:	a0 e0       	ldi	r26, 0x00	; 0
     264:	b0 e2       	ldi	r27, 0x20	; 32
     266:	e8 e5       	ldi	r30, 0x58	; 88
     268:	f0 e4       	ldi	r31, 0x40	; 64
     26a:	00 e0       	ldi	r16, 0x00	; 0
     26c:	0b bf       	out	0x3b, r16	; 59
     26e:	02 c0       	rjmp	.+4      	; 0x274 <__do_copy_data+0x14>
     270:	07 90       	elpm	r0, Z+
     272:	0d 92       	st	X+, r0
     274:	a0 35       	cpi	r26, 0x50	; 80
     276:	b1 07       	cpc	r27, r17
     278:	d9 f7       	brne	.-10     	; 0x270 <__do_copy_data+0x10>

0000027a <__do_clear_bss>:
     27a:	2c e2       	ldi	r18, 0x2C	; 44
     27c:	a0 e5       	ldi	r26, 0x50	; 80
     27e:	b0 e2       	ldi	r27, 0x20	; 32
     280:	01 c0       	rjmp	.+2      	; 0x284 <.do_clear_bss_start>

00000282 <.do_clear_bss_loop>:
     282:	1d 92       	st	X+, r1

00000284 <.do_clear_bss_start>:
     284:	a9 3d       	cpi	r26, 0xD9	; 217
     286:	b2 07       	cpc	r27, r18
     288:	e1 f7       	brne	.-8      	; 0x282 <.do_clear_bss_loop>
     28a:	0e 94 5e 13 	call	0x26bc	; 0x26bc <main>
     28e:	0c 94 2a 20 	jmp	0x4054	; 0x4054 <_exit>

00000292 <__bad_interrupt>:
     292:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000296 <initButtons>:
 #define BUTTON_PRESS_LONG			500

 

 void initButtons(void) {
	PORTF.DIRCLR = PIN4_bm; //SW1
     296:	e0 ea       	ldi	r30, 0xA0	; 160
     298:	f6 e0       	ldi	r31, 0x06	; 6
     29a:	80 e1       	ldi	r24, 0x10	; 16
     29c:	82 83       	std	Z+2, r24	; 0x02
	PORTF.DIRCLR = PIN5_bm; //SW2
     29e:	80 e2       	ldi	r24, 0x20	; 32
     2a0:	82 83       	std	Z+2, r24	; 0x02
	PORTF.DIRCLR = PIN6_bm; //SW3
     2a2:	80 e4       	ldi	r24, 0x40	; 64
     2a4:	82 83       	std	Z+2, r24	; 0x02
	PORTF.DIRCLR = PIN7_bm; //SW4
     2a6:	80 e8       	ldi	r24, 0x80	; 128
     2a8:	82 83       	std	Z+2, r24	; 0x02
     2aa:	08 95       	ret

000002ac <updateButtons>:
 void updateButtons(void) {
	static uint16_t b1Count = 0;
	static uint16_t b2Count = 0;
	static uint16_t b3Count = 0;
	static uint16_t b4Count = 0;
	if(Button1_Value == 0) {
     2ac:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7de6a8>
     2b0:	84 fd       	sbrc	r24, 4
     2b2:	0e c0       	rjmp	.+28     	; 0x2d0 <updateButtons+0x24>
		if(b1Count < 60000) {
     2b4:	80 91 56 20 	lds	r24, 0x2056	; 0x802056 <b1Count.3829>
     2b8:	90 91 57 20 	lds	r25, 0x2057	; 0x802057 <b1Count.3829+0x1>
     2bc:	80 36       	cpi	r24, 0x60	; 96
     2be:	2a ee       	ldi	r18, 0xEA	; 234
     2c0:	92 07       	cpc	r25, r18
     2c2:	e8 f4       	brcc	.+58     	; 0x2fe <updateButtons+0x52>
			b1Count++;
     2c4:	01 96       	adiw	r24, 0x01	; 1
     2c6:	80 93 56 20 	sts	0x2056, r24	; 0x802056 <b1Count.3829>
     2ca:	90 93 57 20 	sts	0x2057, r25	; 0x802057 <b1Count.3829+0x1>
     2ce:	17 c0       	rjmp	.+46     	; 0x2fe <updateButtons+0x52>
		}
	} else {
		if(b1Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     2d0:	80 91 56 20 	lds	r24, 0x2056	; 0x802056 <b1Count.3829>
     2d4:	90 91 57 20 	lds	r25, 0x2057	; 0x802057 <b1Count.3829+0x1>
     2d8:	8b 30       	cpi	r24, 0x0B	; 11
     2da:	91 05       	cpc	r25, r1
     2dc:	48 f0       	brcs	.+18     	; 0x2f0 <updateButtons+0x44>
			if(b1Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     2de:	c3 97       	sbiw	r24, 0x33	; 51
     2e0:	18 f0       	brcs	.+6      	; 0x2e8 <updateButtons+0x3c>
				//Button was pressed Long
				b1Status = LONG_PRESSED;
     2e2:	10 92 d0 2c 	sts	0x2CD0, r1	; 0x802cd0 <b1Status>
     2e6:	07 c0       	rjmp	.+14     	; 0x2f6 <updateButtons+0x4a>
			} else {
				//Button was pressed Short	
				b1Status = SHORT_PRESSED;
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	80 93 d0 2c 	sts	0x2CD0, r24	; 0x802cd0 <b1Status>
     2ee:	03 c0       	rjmp	.+6      	; 0x2f6 <updateButtons+0x4a>
			}
		} else {
			b1Status = NOT_PRESSED;
     2f0:	82 e0       	ldi	r24, 0x02	; 2
     2f2:	80 93 d0 2c 	sts	0x2CD0, r24	; 0x802cd0 <b1Status>
		}
		b1Count = 0;
     2f6:	10 92 56 20 	sts	0x2056, r1	; 0x802056 <b1Count.3829>
     2fa:	10 92 57 20 	sts	0x2057, r1	; 0x802057 <b1Count.3829+0x1>
	}
	if(Button2_Value == 0) {
     2fe:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7de6a8>
     302:	85 fd       	sbrc	r24, 5
     304:	0e c0       	rjmp	.+28     	; 0x322 <updateButtons+0x76>
		if(b2Count < 60000) {
     306:	80 91 54 20 	lds	r24, 0x2054	; 0x802054 <b2Count.3830>
     30a:	90 91 55 20 	lds	r25, 0x2055	; 0x802055 <b2Count.3830+0x1>
     30e:	80 36       	cpi	r24, 0x60	; 96
     310:	2a ee       	ldi	r18, 0xEA	; 234
     312:	92 07       	cpc	r25, r18
     314:	e8 f4       	brcc	.+58     	; 0x350 <updateButtons+0xa4>
			b2Count++;
     316:	01 96       	adiw	r24, 0x01	; 1
     318:	80 93 54 20 	sts	0x2054, r24	; 0x802054 <b2Count.3830>
     31c:	90 93 55 20 	sts	0x2055, r25	; 0x802055 <b2Count.3830+0x1>
     320:	17 c0       	rjmp	.+46     	; 0x350 <updateButtons+0xa4>
		}
	} else {
		if(b2Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     322:	80 91 54 20 	lds	r24, 0x2054	; 0x802054 <b2Count.3830>
     326:	90 91 55 20 	lds	r25, 0x2055	; 0x802055 <b2Count.3830+0x1>
     32a:	8b 30       	cpi	r24, 0x0B	; 11
     32c:	91 05       	cpc	r25, r1
     32e:	48 f0       	brcs	.+18     	; 0x342 <updateButtons+0x96>
			if(b2Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     330:	c3 97       	sbiw	r24, 0x33	; 51
     332:	18 f0       	brcs	.+6      	; 0x33a <updateButtons+0x8e>
				//Button was pressed Long
				b2Status = LONG_PRESSED;
     334:	10 92 d1 2c 	sts	0x2CD1, r1	; 0x802cd1 <b2Status>
     338:	07 c0       	rjmp	.+14     	; 0x348 <updateButtons+0x9c>
				} else {
				//Button was pressed Short
				b2Status = SHORT_PRESSED;
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	80 93 d1 2c 	sts	0x2CD1, r24	; 0x802cd1 <b2Status>
     340:	03 c0       	rjmp	.+6      	; 0x348 <updateButtons+0x9c>
			}
		} else {
			b2Status = NOT_PRESSED;			
     342:	82 e0       	ldi	r24, 0x02	; 2
     344:	80 93 d1 2c 	sts	0x2CD1, r24	; 0x802cd1 <b2Status>
		}
		b2Count = 0;
     348:	10 92 54 20 	sts	0x2054, r1	; 0x802054 <b2Count.3830>
     34c:	10 92 55 20 	sts	0x2055, r1	; 0x802055 <b2Count.3830+0x1>
	}
	if(Button3_Value == 0) {
     350:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7de6a8>
     354:	86 fd       	sbrc	r24, 6
     356:	0e c0       	rjmp	.+28     	; 0x374 <updateButtons+0xc8>
		if(b3Count < 60000) {
     358:	80 91 52 20 	lds	r24, 0x2052	; 0x802052 <b3Count.3831>
     35c:	90 91 53 20 	lds	r25, 0x2053	; 0x802053 <b3Count.3831+0x1>
     360:	80 36       	cpi	r24, 0x60	; 96
     362:	2a ee       	ldi	r18, 0xEA	; 234
     364:	92 07       	cpc	r25, r18
     366:	e8 f4       	brcc	.+58     	; 0x3a2 <updateButtons+0xf6>
			b3Count++;
     368:	01 96       	adiw	r24, 0x01	; 1
     36a:	80 93 52 20 	sts	0x2052, r24	; 0x802052 <b3Count.3831>
     36e:	90 93 53 20 	sts	0x2053, r25	; 0x802053 <b3Count.3831+0x1>
     372:	17 c0       	rjmp	.+46     	; 0x3a2 <updateButtons+0xf6>
		}
	} else {
		if(b3Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     374:	80 91 52 20 	lds	r24, 0x2052	; 0x802052 <b3Count.3831>
     378:	90 91 53 20 	lds	r25, 0x2053	; 0x802053 <b3Count.3831+0x1>
     37c:	8b 30       	cpi	r24, 0x0B	; 11
     37e:	91 05       	cpc	r25, r1
     380:	48 f0       	brcs	.+18     	; 0x394 <updateButtons+0xe8>
			if(b3Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     382:	c3 97       	sbiw	r24, 0x33	; 51
     384:	18 f0       	brcs	.+6      	; 0x38c <updateButtons+0xe0>
				//Button was pressed Long
				b3Status = LONG_PRESSED;
     386:	10 92 d2 2c 	sts	0x2CD2, r1	; 0x802cd2 <b3Status>
     38a:	07 c0       	rjmp	.+14     	; 0x39a <updateButtons+0xee>
				} else {
				//Button was pressed Short
				b3Status = SHORT_PRESSED;
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	80 93 d2 2c 	sts	0x2CD2, r24	; 0x802cd2 <b3Status>
     392:	03 c0       	rjmp	.+6      	; 0x39a <updateButtons+0xee>
			}
		} else {
			b3Status = NOT_PRESSED;
     394:	82 e0       	ldi	r24, 0x02	; 2
     396:	80 93 d2 2c 	sts	0x2CD2, r24	; 0x802cd2 <b3Status>
		}
		b3Count = 0;
     39a:	10 92 52 20 	sts	0x2052, r1	; 0x802052 <b3Count.3831>
     39e:	10 92 53 20 	sts	0x2053, r1	; 0x802053 <b3Count.3831+0x1>
	}
	if(Button4_Value == 0) {
     3a2:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7de6a8>
     3a6:	88 23       	and	r24, r24
     3a8:	74 f0       	brlt	.+28     	; 0x3c6 <updateButtons+0x11a>
		if(b4Count < 60000) {
     3aa:	80 91 50 20 	lds	r24, 0x2050	; 0x802050 <__data_end>
     3ae:	90 91 51 20 	lds	r25, 0x2051	; 0x802051 <__data_end+0x1>
     3b2:	80 36       	cpi	r24, 0x60	; 96
     3b4:	2a ee       	ldi	r18, 0xEA	; 234
     3b6:	92 07       	cpc	r25, r18
     3b8:	e8 f4       	brcc	.+58     	; 0x3f4 <updateButtons+0x148>
			b4Count++;
     3ba:	01 96       	adiw	r24, 0x01	; 1
     3bc:	80 93 50 20 	sts	0x2050, r24	; 0x802050 <__data_end>
     3c0:	90 93 51 20 	sts	0x2051, r25	; 0x802051 <__data_end+0x1>
     3c4:	08 95       	ret
		}
	} else {
		if(b4Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     3c6:	80 91 50 20 	lds	r24, 0x2050	; 0x802050 <__data_end>
     3ca:	90 91 51 20 	lds	r25, 0x2051	; 0x802051 <__data_end+0x1>
     3ce:	8b 30       	cpi	r24, 0x0B	; 11
     3d0:	91 05       	cpc	r25, r1
     3d2:	48 f0       	brcs	.+18     	; 0x3e6 <updateButtons+0x13a>
			if(b4Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     3d4:	c3 97       	sbiw	r24, 0x33	; 51
     3d6:	18 f0       	brcs	.+6      	; 0x3de <updateButtons+0x132>
				//Button was pressed Long
				b4Status = LONG_PRESSED;
     3d8:	10 92 d3 2c 	sts	0x2CD3, r1	; 0x802cd3 <b4Status>
     3dc:	07 c0       	rjmp	.+14     	; 0x3ec <updateButtons+0x140>
				} else {
				//Button was pressed Short
				b4Status = SHORT_PRESSED;
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	80 93 d3 2c 	sts	0x2CD3, r24	; 0x802cd3 <b4Status>
     3e4:	03 c0       	rjmp	.+6      	; 0x3ec <updateButtons+0x140>
			}
		} else {
			b4Status = NOT_PRESSED;
     3e6:	82 e0       	ldi	r24, 0x02	; 2
     3e8:	80 93 d3 2c 	sts	0x2CD3, r24	; 0x802cd3 <b4Status>
		}
		b4Count = 0;
     3ec:	10 92 50 20 	sts	0x2050, r1	; 0x802050 <__data_end>
     3f0:	10 92 51 20 	sts	0x2051, r1	; 0x802051 <__data_end+0x1>
     3f4:	08 95       	ret

000003f6 <getButtonPress>:
	}
 }

 button_press_t getButtonPress(button_t button) {
	switch(button) {
     3f6:	81 30       	cpi	r24, 0x01	; 1
     3f8:	49 f0       	breq	.+18     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     3fa:	28 f0       	brcs	.+10     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3fc:	82 30       	cpi	r24, 0x02	; 2
     3fe:	49 f0       	breq	.+18     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     400:	83 30       	cpi	r24, 0x03	; 3
     402:	51 f0       	breq	.+20     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     404:	0c c0       	rjmp	.+24     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
		case BUTTON1:
			return b1Status;
     406:	80 91 d0 2c 	lds	r24, 0x2CD0	; 0x802cd0 <b1Status>
     40a:	08 95       	ret
		break;
		case BUTTON2:
			return b2Status;
     40c:	80 91 d1 2c 	lds	r24, 0x2CD1	; 0x802cd1 <b2Status>
     410:	08 95       	ret
		break;
		case BUTTON3:
			return b3Status;
     412:	80 91 d2 2c 	lds	r24, 0x2CD2	; 0x802cd2 <b3Status>
     416:	08 95       	ret
		break;
		case BUTTON4:
			return b4Status;
     418:	80 91 d3 2c 	lds	r24, 0x2CD3	; 0x802cd3 <b4Status>
     41c:	08 95       	ret
		break;
	}
	return NOT_PRESSED;
     41e:	82 e0       	ldi	r24, 0x02	; 2
     420:	08 95       	ret

00000422 <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
     422:	0f 93       	push	r16
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
     428:	1f 92       	push	r1
     42a:	cd b7       	in	r28, 0x3d	; 61
     42c:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
     42e:	2f b7       	in	r18, 0x3f	; 63
     430:	29 83       	std	Y+1, r18	; 0x01
     432:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
     434:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
     436:	fc 01       	movw	r30, r24
     438:	08 ed       	ldi	r16, 0xD8	; 216
     43a:	04 bf       	out	0x34, r16	; 52
     43c:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
     43e:	89 81       	ldd	r24, Y+1	; 0x01
     440:	8f bf       	out	0x3f, r24	; 63
#endif
}
     442:	0f 90       	pop	r0
     444:	df 91       	pop	r29
     446:	cf 91       	pop	r28
     448:	0f 91       	pop	r16
     44a:	08 95       	ret

0000044c <CLKSYS_XOSC_Config>:
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
	OSC.XOSCCTRL = (uint8_t) freqRange |
     44c:	66 23       	and	r22, r22
     44e:	11 f0       	breq	.+4      	; 0x454 <CLKSYS_XOSC_Config+0x8>
     450:	90 e2       	ldi	r25, 0x20	; 32
     452:	01 c0       	rjmp	.+2      	; 0x456 <CLKSYS_XOSC_Config+0xa>
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	89 2b       	or	r24, r25
     458:	48 2b       	or	r20, r24
     45a:	40 93 52 00 	sts	0x0052, r20	; 0x800052 <__TEXT_REGION_LENGTH__+0x7de052>
     45e:	08 95       	ret

00000460 <CLKSYS_PLL_Config>:
 *  \param  factor      PLL multiplication factor, must be
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
	factor &= OSC_PLLFAC_gm;
     460:	6f 71       	andi	r22, 0x1F	; 31
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
     462:	86 2b       	or	r24, r22
     464:	80 93 55 00 	sts	0x0055, r24	; 0x800055 <__TEXT_REGION_LENGTH__+0x7de055>
     468:	08 95       	ret

0000046a <CLKSYS_Disable>:
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
     46a:	e0 e5       	ldi	r30, 0x50	; 80
     46c:	f0 e0       	ldi	r31, 0x00	; 0
     46e:	90 81       	ld	r25, Z
     470:	28 2f       	mov	r18, r24
     472:	20 95       	com	r18
     474:	92 23       	and	r25, r18
     476:	90 83       	st	Z, r25
	uint8_t clkEnabled = OSC.CTRL & oscSel;
     478:	90 81       	ld	r25, Z
	return clkEnabled;
}
     47a:	89 23       	and	r24, r25
     47c:	08 95       	ret

0000047e <CLKSYS_Prescalers_Config>:
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
     47e:	68 2b       	or	r22, r24
	CCPWrite( &CLK.PSCTRL, PSconfig );
     480:	81 e4       	ldi	r24, 0x41	; 65
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	0e 94 11 02 	call	0x422	; 0x422 <CCPWrite>
     488:	08 95       	ret

0000048a <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     48a:	0f 93       	push	r16
     48c:	1f 93       	push	r17
     48e:	cf 93       	push	r28
     490:	c8 2f       	mov	r28, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     492:	00 e4       	ldi	r16, 0x40	; 64
     494:	10 e0       	ldi	r17, 0x00	; 0
     496:	f8 01       	movw	r30, r16
     498:	60 81       	ld	r22, Z
     49a:	68 7f       	andi	r22, 0xF8	; 248
     49c:	68 2b       	or	r22, r24
	CCPWrite( &CLK.CTRL, clkCtrl );
     49e:	80 e4       	ldi	r24, 0x40	; 64
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	0e 94 11 02 	call	0x422	; 0x422 <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
     4a6:	f8 01       	movw	r30, r16
     4a8:	80 81       	ld	r24, Z
	return clkCtrl;
}
     4aa:	8c 23       	and	r24, r28
     4ac:	cf 91       	pop	r28
     4ae:	1f 91       	pop	r17
     4b0:	0f 91       	pop	r16
     4b2:	08 95       	ret

000004b4 <TC0_ConfigClockSource>:
{
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
     4b4:	fc 01       	movw	r30, r24
     4b6:	90 81       	ld	r25, Z
     4b8:	90 7f       	andi	r25, 0xF0	; 240
     4ba:	69 2b       	or	r22, r25
     4bc:	60 83       	st	Z, r22
     4be:	08 95       	ret

000004c0 <TC0_ConfigWGM>:
     4c0:	fc 01       	movw	r30, r24
     4c2:	91 81       	ldd	r25, Z+1	; 0x01
     4c4:	98 7f       	andi	r25, 0xF8	; 248
     4c6:	69 2b       	or	r22, r25
     4c8:	61 83       	std	Z+1, r22	; 0x01
     4ca:	08 95       	ret

000004cc <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
     4cc:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
     4ce:	96 81       	ldd	r25, Z+6	; 0x06
     4d0:	9c 7f       	andi	r25, 0xFC	; 252
     4d2:	69 2b       	or	r22, r25
     4d4:	66 83       	std	Z+6, r22	; 0x06
     4d6:	08 95       	ret

000004d8 <software_reset>:
 //----------------------------------------------
 // catch heap overflow
 //
 void vApplicationMallocFailedHook( void )
 {
	 error(ERR_LOW_HEAP_SPACE);
     4d8:	00 00       	nop
     4da:	88 ed       	ldi	r24, 0xD8	; 216
     4dc:	84 bf       	out	0x34, r24	; 52
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <__TEXT_REGION_LENGTH__+0x7de079>
     4e4:	08 95       	ret

000004e6 <error>:
     4e6:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <software_reset>
     4ea:	08 95       	ret

000004ec <vApplicationStackOverflowHook>:
 {
	 /* Just to stop compiler warnings. */
	 (void) pxTask;
	 (void) pcTaskName;

	 error(ERR_STACK_OVERFLOW);
     4ec:	8b e2       	ldi	r24, 0x2B	; 43
     4ee:	0e 94 73 02 	call	0x4e6	; 0x4e6 <error>
     4f2:	08 95       	ret

000004f4 <prvTestWaitCondition>:
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
}
     4f4:	0f 93       	push	r16
     4f6:	01 11       	cpse	r16, r1
     4f8:	0c c0       	rjmp	.+24     	; 0x512 <prvTestWaitCondition+0x1e>
     4fa:	dc 01       	movw	r26, r24
     4fc:	cb 01       	movw	r24, r22
     4fe:	82 23       	and	r24, r18
     500:	93 23       	and	r25, r19
     502:	a4 23       	and	r26, r20
     504:	b5 23       	and	r27, r21
     506:	89 2b       	or	r24, r25
     508:	8a 2b       	or	r24, r26
     50a:	8b 2b       	or	r24, r27
     50c:	79 f4       	brne	.+30     	; 0x52c <prvTestWaitCondition+0x38>
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	10 c0       	rjmp	.+32     	; 0x532 <prvTestWaitCondition+0x3e>
     512:	dc 01       	movw	r26, r24
     514:	cb 01       	movw	r24, r22
     516:	82 23       	and	r24, r18
     518:	93 23       	and	r25, r19
     51a:	a4 23       	and	r26, r20
     51c:	b5 23       	and	r27, r21
     51e:	28 17       	cp	r18, r24
     520:	39 07       	cpc	r19, r25
     522:	4a 07       	cpc	r20, r26
     524:	5b 07       	cpc	r21, r27
     526:	21 f0       	breq	.+8      	; 0x530 <prvTestWaitCondition+0x3c>
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	03 c0       	rjmp	.+6      	; 0x532 <prvTestWaitCondition+0x3e>
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	01 c0       	rjmp	.+2      	; 0x532 <prvTestWaitCondition+0x3e>
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	0f 91       	pop	r16
     534:	08 95       	ret

00000536 <xEventGroupCreate>:
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
     53a:	80 e1       	ldi	r24, 0x10	; 16
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	0e 94 16 04 	call	0x82c	; 0x82c <pvPortMalloc>
     542:	ec 01       	movw	r28, r24
     544:	00 97       	sbiw	r24, 0x00	; 0
     546:	41 f0       	breq	.+16     	; 0x558 <xEventGroupCreate+0x22>
     548:	fc 01       	movw	r30, r24
     54a:	11 92       	st	Z+, r1
     54c:	11 92       	st	Z+, r1
     54e:	11 92       	st	Z+, r1
     550:	11 92       	st	Z+, r1
     552:	cf 01       	movw	r24, r30
     554:	0e 94 3d 04 	call	0x87a	; 0x87a <vListInitialise>
     558:	ce 01       	movw	r24, r28
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	08 95       	ret

00000560 <xEventGroupWaitBits>:
     560:	2f 92       	push	r2
     562:	3f 92       	push	r3
     564:	4f 92       	push	r4
     566:	5f 92       	push	r5
     568:	6f 92       	push	r6
     56a:	7f 92       	push	r7
     56c:	8f 92       	push	r8
     56e:	9f 92       	push	r9
     570:	af 92       	push	r10
     572:	bf 92       	push	r11
     574:	cf 92       	push	r12
     576:	df 92       	push	r13
     578:	ef 92       	push	r14
     57a:	ff 92       	push	r15
     57c:	0f 93       	push	r16
     57e:	1f 93       	push	r17
     580:	cf 93       	push	r28
     582:	df 93       	push	r29
     584:	ec 01       	movw	r28, r24
     586:	4a 01       	movw	r8, r20
     588:	5b 01       	movw	r10, r22
     58a:	62 2e       	mov	r6, r18
     58c:	70 2e       	mov	r7, r16
     58e:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <vTaskSuspendAll>
     592:	28 80       	ld	r2, Y
     594:	39 80       	ldd	r3, Y+1	; 0x01
     596:	4a 80       	ldd	r4, Y+2	; 0x02
     598:	5b 80       	ldd	r5, Y+3	; 0x03
     59a:	a5 01       	movw	r20, r10
     59c:	94 01       	movw	r18, r8
     59e:	c2 01       	movw	r24, r4
     5a0:	b1 01       	movw	r22, r2
     5a2:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <prvTestWaitCondition>
     5a6:	88 23       	and	r24, r24
     5a8:	a1 f0       	breq	.+40     	; 0x5d2 <xEventGroupWaitBits+0x72>
     5aa:	66 20       	and	r6, r6
     5ac:	89 f1       	breq	.+98     	; 0x610 <xEventGroupWaitBits+0xb0>
     5ae:	d5 01       	movw	r26, r10
     5b0:	c4 01       	movw	r24, r8
     5b2:	80 95       	com	r24
     5b4:	90 95       	com	r25
     5b6:	a0 95       	com	r26
     5b8:	b0 95       	com	r27
     5ba:	82 21       	and	r24, r2
     5bc:	93 21       	and	r25, r3
     5be:	a4 21       	and	r26, r4
     5c0:	b5 21       	and	r27, r5
     5c2:	88 83       	st	Y, r24
     5c4:	99 83       	std	Y+1, r25	; 0x01
     5c6:	aa 83       	std	Y+2, r26	; 0x02
     5c8:	bb 83       	std	Y+3, r27	; 0x03
     5ca:	c1 2c       	mov	r12, r1
     5cc:	d1 2c       	mov	r13, r1
     5ce:	76 01       	movw	r14, r12
     5d0:	22 c0       	rjmp	.+68     	; 0x616 <xEventGroupWaitBits+0xb6>
     5d2:	c1 14       	cp	r12, r1
     5d4:	d1 04       	cpc	r13, r1
     5d6:	e1 04       	cpc	r14, r1
     5d8:	f1 04       	cpc	r15, r1
     5da:	e9 f0       	breq	.+58     	; 0x616 <xEventGroupWaitBits+0xb6>
     5dc:	61 10       	cpse	r6, r1
     5de:	04 c0       	rjmp	.+8      	; 0x5e8 <xEventGroupWaitBits+0x88>
     5e0:	40 e0       	ldi	r20, 0x00	; 0
     5e2:	50 e0       	ldi	r21, 0x00	; 0
     5e4:	ba 01       	movw	r22, r20
     5e6:	04 c0       	rjmp	.+8      	; 0x5f0 <xEventGroupWaitBits+0x90>
     5e8:	40 e0       	ldi	r20, 0x00	; 0
     5ea:	50 e0       	ldi	r21, 0x00	; 0
     5ec:	60 e0       	ldi	r22, 0x00	; 0
     5ee:	71 e0       	ldi	r23, 0x01	; 1
     5f0:	71 10       	cpse	r7, r1
     5f2:	74 60       	ori	r23, 0x04	; 4
     5f4:	48 29       	or	r20, r8
     5f6:	59 29       	or	r21, r9
     5f8:	6a 29       	or	r22, r10
     5fa:	7b 29       	or	r23, r11
     5fc:	97 01       	movw	r18, r14
     5fe:	86 01       	movw	r16, r12
     600:	ce 01       	movw	r24, r28
     602:	04 96       	adiw	r24, 0x04	; 4
     604:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <vTaskPlaceOnUnorderedEventList>
     608:	21 2c       	mov	r2, r1
     60a:	31 2c       	mov	r3, r1
     60c:	21 01       	movw	r4, r2
     60e:	03 c0       	rjmp	.+6      	; 0x616 <xEventGroupWaitBits+0xb6>
     610:	c1 2c       	mov	r12, r1
     612:	d1 2c       	mov	r13, r1
     614:	76 01       	movw	r14, r12
     616:	0e 94 b8 0c 	call	0x1970	; 0x1970 <xTaskResumeAll>
     61a:	cd 28       	or	r12, r13
     61c:	ce 28       	or	r12, r14
     61e:	cf 28       	or	r12, r15
     620:	89 f1       	breq	.+98     	; 0x684 <xEventGroupWaitBits+0x124>
     622:	81 11       	cpse	r24, r1
     624:	02 c0       	rjmp	.+4      	; 0x62a <xEventGroupWaitBits+0xca>
     626:	0e 94 a8 05 	call	0xb50	; 0xb50 <vPortYield>
     62a:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <uxTaskResetEventItemValue>
     62e:	6b 01       	movw	r12, r22
     630:	7c 01       	movw	r14, r24
     632:	91 fd       	sbrc	r25, 1
     634:	24 c0       	rjmp	.+72     	; 0x67e <xEventGroupWaitBits+0x11e>
     636:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     63a:	ff 93       	push	r31
     63c:	f8 7f       	andi	r31, 0xF8	; 248
     63e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     642:	c8 80       	ld	r12, Y
     644:	d9 80       	ldd	r13, Y+1	; 0x01
     646:	ea 80       	ldd	r14, Y+2	; 0x02
     648:	fb 80       	ldd	r15, Y+3	; 0x03
     64a:	07 2d       	mov	r16, r7
     64c:	a5 01       	movw	r20, r10
     64e:	94 01       	movw	r18, r8
     650:	c7 01       	movw	r24, r14
     652:	b6 01       	movw	r22, r12
     654:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <prvTestWaitCondition>
     658:	88 23       	and	r24, r24
     65a:	71 f0       	breq	.+28     	; 0x678 <xEventGroupWaitBits+0x118>
     65c:	66 20       	and	r6, r6
     65e:	61 f0       	breq	.+24     	; 0x678 <xEventGroupWaitBits+0x118>
     660:	80 94       	com	r8
     662:	90 94       	com	r9
     664:	a0 94       	com	r10
     666:	b0 94       	com	r11
     668:	8c 20       	and	r8, r12
     66a:	9d 20       	and	r9, r13
     66c:	ae 20       	and	r10, r14
     66e:	bf 20       	and	r11, r15
     670:	88 82       	st	Y, r8
     672:	99 82       	std	Y+1, r9	; 0x01
     674:	aa 82       	std	Y+2, r10	; 0x02
     676:	bb 82       	std	Y+3, r11	; 0x03
     678:	ff 91       	pop	r31
     67a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     67e:	16 01       	movw	r2, r12
     680:	27 01       	movw	r4, r14
     682:	55 24       	eor	r5, r5
     684:	c2 01       	movw	r24, r4
     686:	b1 01       	movw	r22, r2
     688:	df 91       	pop	r29
     68a:	cf 91       	pop	r28
     68c:	1f 91       	pop	r17
     68e:	0f 91       	pop	r16
     690:	ff 90       	pop	r15
     692:	ef 90       	pop	r14
     694:	df 90       	pop	r13
     696:	cf 90       	pop	r12
     698:	bf 90       	pop	r11
     69a:	af 90       	pop	r10
     69c:	9f 90       	pop	r9
     69e:	8f 90       	pop	r8
     6a0:	7f 90       	pop	r7
     6a2:	6f 90       	pop	r6
     6a4:	5f 90       	pop	r5
     6a6:	4f 90       	pop	r4
     6a8:	3f 90       	pop	r3
     6aa:	2f 90       	pop	r2
     6ac:	08 95       	ret

000006ae <xEventGroupClearBits>:
     6ae:	0f 93       	push	r16
     6b0:	1f 93       	push	r17
     6b2:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     6b6:	ff 93       	push	r31
     6b8:	f8 7f       	andi	r31, 0xF8	; 248
     6ba:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     6be:	fc 01       	movw	r30, r24
     6c0:	00 81       	ld	r16, Z
     6c2:	11 81       	ldd	r17, Z+1	; 0x01
     6c4:	22 81       	ldd	r18, Z+2	; 0x02
     6c6:	33 81       	ldd	r19, Z+3	; 0x03
     6c8:	40 95       	com	r20
     6ca:	50 95       	com	r21
     6cc:	60 95       	com	r22
     6ce:	70 95       	com	r23
     6d0:	40 23       	and	r20, r16
     6d2:	51 23       	and	r21, r17
     6d4:	62 23       	and	r22, r18
     6d6:	73 23       	and	r23, r19
     6d8:	40 83       	st	Z, r20
     6da:	51 83       	std	Z+1, r21	; 0x01
     6dc:	62 83       	std	Z+2, r22	; 0x02
     6de:	73 83       	std	Z+3, r23	; 0x03
     6e0:	ff 91       	pop	r31
     6e2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     6e6:	c9 01       	movw	r24, r18
     6e8:	b8 01       	movw	r22, r16
     6ea:	1f 91       	pop	r17
     6ec:	0f 91       	pop	r16
     6ee:	08 95       	ret

000006f0 <xEventGroupSetBits>:
     6f0:	4f 92       	push	r4
     6f2:	5f 92       	push	r5
     6f4:	6f 92       	push	r6
     6f6:	7f 92       	push	r7
     6f8:	af 92       	push	r10
     6fa:	bf 92       	push	r11
     6fc:	cf 92       	push	r12
     6fe:	df 92       	push	r13
     700:	ef 92       	push	r14
     702:	ff 92       	push	r15
     704:	0f 93       	push	r16
     706:	1f 93       	push	r17
     708:	cf 93       	push	r28
     70a:	df 93       	push	r29
     70c:	ec 01       	movw	r28, r24
     70e:	6a 01       	movw	r12, r20
     710:	7b 01       	movw	r14, r22
     712:	8c 01       	movw	r16, r24
     714:	09 5f       	subi	r16, 0xF9	; 249
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <vTaskSuspendAll>
     71c:	eb 85       	ldd	r30, Y+11	; 0x0b
     71e:	fc 85       	ldd	r31, Y+12	; 0x0c
     720:	88 81       	ld	r24, Y
     722:	99 81       	ldd	r25, Y+1	; 0x01
     724:	aa 81       	ldd	r26, Y+2	; 0x02
     726:	bb 81       	ldd	r27, Y+3	; 0x03
     728:	c8 2a       	or	r12, r24
     72a:	d9 2a       	or	r13, r25
     72c:	ea 2a       	or	r14, r26
     72e:	fb 2a       	or	r15, r27
     730:	c8 82       	st	Y, r12
     732:	d9 82       	std	Y+1, r13	; 0x01
     734:	ea 82       	std	Y+2, r14	; 0x02
     736:	fb 82       	std	Y+3, r15	; 0x03
     738:	c1 2c       	mov	r12, r1
     73a:	d1 2c       	mov	r13, r1
     73c:	76 01       	movw	r14, r12
     73e:	3d c0       	rjmp	.+122    	; 0x7ba <xEventGroupSetBits+0xca>
     740:	a4 80       	ldd	r10, Z+4	; 0x04
     742:	b5 80       	ldd	r11, Z+5	; 0x05
     744:	80 81       	ld	r24, Z
     746:	91 81       	ldd	r25, Z+1	; 0x01
     748:	a2 81       	ldd	r26, Z+2	; 0x02
     74a:	b3 81       	ldd	r27, Z+3	; 0x03
     74c:	ac 01       	movw	r20, r24
     74e:	bd 01       	movw	r22, r26
     750:	77 27       	eor	r23, r23
     752:	b2 fd       	sbrc	r27, 2
     754:	0e c0       	rjmp	.+28     	; 0x772 <xEventGroupSetBits+0x82>
     756:	48 80       	ld	r4, Y
     758:	59 80       	ldd	r5, Y+1	; 0x01
     75a:	6a 80       	ldd	r6, Y+2	; 0x02
     75c:	7b 80       	ldd	r7, Y+3	; 0x03
     75e:	44 22       	and	r4, r20
     760:	55 22       	and	r5, r21
     762:	66 22       	and	r6, r22
     764:	77 22       	and	r7, r23
     766:	45 28       	or	r4, r5
     768:	46 28       	or	r4, r6
     76a:	47 28       	or	r4, r7
     76c:	89 f4       	brne	.+34     	; 0x790 <xEventGroupSetBits+0xa0>
     76e:	20 e0       	ldi	r18, 0x00	; 0
     770:	12 c0       	rjmp	.+36     	; 0x796 <xEventGroupSetBits+0xa6>
     772:	48 80       	ld	r4, Y
     774:	59 80       	ldd	r5, Y+1	; 0x01
     776:	6a 80       	ldd	r6, Y+2	; 0x02
     778:	7b 80       	ldd	r7, Y+3	; 0x03
     77a:	44 22       	and	r4, r20
     77c:	55 22       	and	r5, r21
     77e:	66 22       	and	r6, r22
     780:	77 22       	and	r7, r23
     782:	44 15       	cp	r20, r4
     784:	55 05       	cpc	r21, r5
     786:	66 05       	cpc	r22, r6
     788:	77 05       	cpc	r23, r7
     78a:	21 f0       	breq	.+8      	; 0x794 <xEventGroupSetBits+0xa4>
     78c:	20 e0       	ldi	r18, 0x00	; 0
     78e:	03 c0       	rjmp	.+6      	; 0x796 <xEventGroupSetBits+0xa6>
     790:	21 e0       	ldi	r18, 0x01	; 1
     792:	01 c0       	rjmp	.+2      	; 0x796 <xEventGroupSetBits+0xa6>
     794:	21 e0       	ldi	r18, 0x01	; 1
     796:	22 23       	and	r18, r18
     798:	71 f0       	breq	.+28     	; 0x7b6 <xEventGroupSetBits+0xc6>
     79a:	b0 ff       	sbrs	r27, 0
     79c:	04 c0       	rjmp	.+8      	; 0x7a6 <xEventGroupSetBits+0xb6>
     79e:	c4 2a       	or	r12, r20
     7a0:	d5 2a       	or	r13, r21
     7a2:	e6 2a       	or	r14, r22
     7a4:	f7 2a       	or	r15, r23
     7a6:	48 81       	ld	r20, Y
     7a8:	59 81       	ldd	r21, Y+1	; 0x01
     7aa:	6a 81       	ldd	r22, Y+2	; 0x02
     7ac:	7b 81       	ldd	r23, Y+3	; 0x03
     7ae:	72 60       	ori	r23, 0x02	; 2
     7b0:	cf 01       	movw	r24, r30
     7b2:	0e 94 67 0e 	call	0x1cce	; 0x1cce <vTaskRemoveFromUnorderedEventList>
     7b6:	ea 2d       	mov	r30, r10
     7b8:	fb 2d       	mov	r31, r11
     7ba:	e0 17       	cp	r30, r16
     7bc:	f1 07       	cpc	r31, r17
     7be:	09 f0       	breq	.+2      	; 0x7c2 <xEventGroupSetBits+0xd2>
     7c0:	bf cf       	rjmp	.-130    	; 0x740 <xEventGroupSetBits+0x50>
     7c2:	c0 94       	com	r12
     7c4:	d0 94       	com	r13
     7c6:	e0 94       	com	r14
     7c8:	f0 94       	com	r15
     7ca:	88 81       	ld	r24, Y
     7cc:	99 81       	ldd	r25, Y+1	; 0x01
     7ce:	aa 81       	ldd	r26, Y+2	; 0x02
     7d0:	bb 81       	ldd	r27, Y+3	; 0x03
     7d2:	c8 22       	and	r12, r24
     7d4:	d9 22       	and	r13, r25
     7d6:	ea 22       	and	r14, r26
     7d8:	fb 22       	and	r15, r27
     7da:	c8 82       	st	Y, r12
     7dc:	d9 82       	std	Y+1, r13	; 0x01
     7de:	ea 82       	std	Y+2, r14	; 0x02
     7e0:	fb 82       	std	Y+3, r15	; 0x03
     7e2:	0e 94 b8 0c 	call	0x1970	; 0x1970 <xTaskResumeAll>
     7e6:	68 81       	ld	r22, Y
     7e8:	79 81       	ldd	r23, Y+1	; 0x01
     7ea:	8a 81       	ldd	r24, Y+2	; 0x02
     7ec:	9b 81       	ldd	r25, Y+3	; 0x03
     7ee:	df 91       	pop	r29
     7f0:	cf 91       	pop	r28
     7f2:	1f 91       	pop	r17
     7f4:	0f 91       	pop	r16
     7f6:	ff 90       	pop	r15
     7f8:	ef 90       	pop	r14
     7fa:	df 90       	pop	r13
     7fc:	cf 90       	pop	r12
     7fe:	bf 90       	pop	r11
     800:	af 90       	pop	r10
     802:	7f 90       	pop	r7
     804:	6f 90       	pop	r6
     806:	5f 90       	pop	r5
     808:	4f 90       	pop	r4
     80a:	08 95       	ret

0000080c <vEventGroupSetBitsCallback>:
     80c:	0e 94 78 03 	call	0x6f0	; 0x6f0 <xEventGroupSetBits>
     810:	08 95       	ret

00000812 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
     812:	0f 93       	push	r16
     814:	1f 93       	push	r17
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
     816:	89 01       	movw	r16, r18
     818:	9a 01       	movw	r18, r20
     81a:	ab 01       	movw	r20, r22
     81c:	bc 01       	movw	r22, r24
     81e:	86 e0       	ldi	r24, 0x06	; 6
     820:	94 e0       	ldi	r25, 0x04	; 4
     822:	0e 94 59 12 	call	0x24b2	; 0x24b2 <xTimerPendFunctionCallFromISR>

		return xReturn;
	}
     826:	1f 91       	pop	r17
     828:	0f 91       	pop	r16
     82a:	08 95       	ret

0000082c <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     832:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     836:	20 91 58 20 	lds	r18, 0x2058	; 0x802058 <xNextFreeByte>
     83a:	30 91 59 20 	lds	r19, 0x2059	; 0x802059 <xNextFreeByte+0x1>
     83e:	c9 01       	movw	r24, r18
     840:	8c 0f       	add	r24, r28
     842:	9d 1f       	adc	r25, r29
     844:	88 3b       	cpi	r24, 0xB8	; 184
     846:	4b e0       	ldi	r20, 0x0B	; 11
     848:	94 07       	cpc	r25, r20
     84a:	58 f4       	brcc	.+22     	; 0x862 <pvPortMalloc+0x36>
     84c:	28 17       	cp	r18, r24
     84e:	39 07       	cpc	r19, r25
     850:	58 f4       	brcc	.+22     	; 0x868 <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     852:	e9 01       	movw	r28, r18
     854:	c6 5a       	subi	r28, 0xA6	; 166
     856:	df 4d       	sbci	r29, 0xDF	; 223
			xNextFreeByte += xWantedSize;			
     858:	80 93 58 20 	sts	0x2058, r24	; 0x802058 <xNextFreeByte>
     85c:	90 93 59 20 	sts	0x2059, r25	; 0x802059 <xNextFreeByte+0x1>
     860:	05 c0       	rjmp	.+10     	; 0x86c <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
     862:	c0 e0       	ldi	r28, 0x00	; 0
     864:	d0 e0       	ldi	r29, 0x00	; 0
     866:	02 c0       	rjmp	.+4      	; 0x86c <pvPortMalloc+0x40>
     868:	c0 e0       	ldi	r28, 0x00	; 0
     86a:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     86c:	0e 94 b8 0c 	call	0x1970	; 0x1970 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     870:	ce 01       	movw	r24, r28
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	08 95       	ret

00000878 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     878:	08 95       	ret

0000087a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     87a:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     87c:	03 96       	adiw	r24, 0x03	; 3
     87e:	81 83       	std	Z+1, r24	; 0x01
     880:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     882:	4f ef       	ldi	r20, 0xFF	; 255
     884:	5f ef       	ldi	r21, 0xFF	; 255
     886:	ba 01       	movw	r22, r20
     888:	43 83       	std	Z+3, r20	; 0x03
     88a:	54 83       	std	Z+4, r21	; 0x04
     88c:	65 83       	std	Z+5, r22	; 0x05
     88e:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     890:	87 83       	std	Z+7, r24	; 0x07
     892:	90 87       	std	Z+8, r25	; 0x08
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     894:	81 87       	std	Z+9, r24	; 0x09
     896:	92 87       	std	Z+10, r25	; 0x0a

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     898:	10 82       	st	Z, r1
     89a:	08 95       	ret

0000089c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     89c:	fc 01       	movw	r30, r24
     89e:	12 86       	std	Z+10, r1	; 0x0a
     8a0:	13 86       	std	Z+11, r1	; 0x0b
     8a2:	08 95       	ret

000008a4 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
     8a8:	9c 01       	movw	r18, r24
     8aa:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     8ac:	dc 01       	movw	r26, r24
     8ae:	11 96       	adiw	r26, 0x01	; 1
     8b0:	cd 91       	ld	r28, X+
     8b2:	dc 91       	ld	r29, X
     8b4:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     8b6:	c4 83       	std	Z+4, r28	; 0x04
     8b8:	d5 83       	std	Z+5, r29	; 0x05
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     8ba:	8e 81       	ldd	r24, Y+6	; 0x06
     8bc:	9f 81       	ldd	r25, Y+7	; 0x07
     8be:	86 83       	std	Z+6, r24	; 0x06
     8c0:	97 83       	std	Z+7, r25	; 0x07

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     8c2:	8e 81       	ldd	r24, Y+6	; 0x06
     8c4:	9f 81       	ldd	r25, Y+7	; 0x07
     8c6:	dc 01       	movw	r26, r24
     8c8:	14 96       	adiw	r26, 0x04	; 4
     8ca:	6d 93       	st	X+, r22
     8cc:	7c 93       	st	X, r23
     8ce:	15 97       	sbiw	r26, 0x05	; 5
	pxIndex->pxPrevious = pxNewListItem;
     8d0:	6e 83       	std	Y+6, r22	; 0x06
     8d2:	7f 83       	std	Y+7, r23	; 0x07

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     8d4:	22 87       	std	Z+10, r18	; 0x0a
     8d6:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
     8d8:	f9 01       	movw	r30, r18
     8da:	80 81       	ld	r24, Z
     8dc:	8f 5f       	subi	r24, 0xFF	; 255
     8de:	80 83       	st	Z, r24
}
     8e0:	df 91       	pop	r29
     8e2:	cf 91       	pop	r28
     8e4:	08 95       	ret

000008e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     8e6:	0f 93       	push	r16
     8e8:	1f 93       	push	r17
     8ea:	cf 93       	push	r28
     8ec:	df 93       	push	r29
     8ee:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     8f0:	08 81       	ld	r16, Y
     8f2:	19 81       	ldd	r17, Y+1	; 0x01
     8f4:	2a 81       	ldd	r18, Y+2	; 0x02
     8f6:	3b 81       	ldd	r19, Y+3	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     8f8:	0f 3f       	cpi	r16, 0xFF	; 255
     8fa:	4f ef       	ldi	r20, 0xFF	; 255
     8fc:	14 07       	cpc	r17, r20
     8fe:	24 07       	cpc	r18, r20
     900:	34 07       	cpc	r19, r20
     902:	21 f4       	brne	.+8      	; 0x90c <vListInsert+0x26>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     904:	fc 01       	movw	r30, r24
     906:	a1 85       	ldd	r26, Z+9	; 0x09
     908:	b2 85       	ldd	r27, Z+10	; 0x0a
     90a:	11 c0       	rjmp	.+34     	; 0x92e <vListInsert+0x48>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     90c:	dc 01       	movw	r26, r24
     90e:	13 96       	adiw	r26, 0x03	; 3
     910:	01 c0       	rjmp	.+2      	; 0x914 <vListInsert+0x2e>
     912:	df 01       	movw	r26, r30
     914:	14 96       	adiw	r26, 0x04	; 4
     916:	ed 91       	ld	r30, X+
     918:	fc 91       	ld	r31, X
     91a:	15 97       	sbiw	r26, 0x05	; 5
     91c:	40 81       	ld	r20, Z
     91e:	51 81       	ldd	r21, Z+1	; 0x01
     920:	62 81       	ldd	r22, Z+2	; 0x02
     922:	73 81       	ldd	r23, Z+3	; 0x03
     924:	04 17       	cp	r16, r20
     926:	15 07       	cpc	r17, r21
     928:	26 07       	cpc	r18, r22
     92a:	37 07       	cpc	r19, r23
     92c:	90 f7       	brcc	.-28     	; 0x912 <vListInsert+0x2c>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     92e:	14 96       	adiw	r26, 0x04	; 4
     930:	ed 91       	ld	r30, X+
     932:	fc 91       	ld	r31, X
     934:	15 97       	sbiw	r26, 0x05	; 5
     936:	ec 83       	std	Y+4, r30	; 0x04
     938:	fd 83       	std	Y+5, r31	; 0x05
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     93a:	c6 83       	std	Z+6, r28	; 0x06
     93c:	d7 83       	std	Z+7, r29	; 0x07
	pxNewListItem->pxPrevious = pxIterator;
     93e:	ae 83       	std	Y+6, r26	; 0x06
     940:	bf 83       	std	Y+7, r27	; 0x07
	pxIterator->pxNext = pxNewListItem;
     942:	14 96       	adiw	r26, 0x04	; 4
     944:	cd 93       	st	X+, r28
     946:	dc 93       	st	X, r29
     948:	15 97       	sbiw	r26, 0x05	; 5

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     94a:	8a 87       	std	Y+10, r24	; 0x0a
     94c:	9b 87       	std	Y+11, r25	; 0x0b

	( pxList->uxNumberOfItems )++;
     94e:	fc 01       	movw	r30, r24
     950:	20 81       	ld	r18, Z
     952:	2f 5f       	subi	r18, 0xFF	; 255
     954:	20 83       	st	Z, r18
}
     956:	df 91       	pop	r29
     958:	cf 91       	pop	r28
     95a:	1f 91       	pop	r17
     95c:	0f 91       	pop	r16
     95e:	08 95       	ret

00000960 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     960:	cf 93       	push	r28
     962:	df 93       	push	r29
     964:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     966:	a2 85       	ldd	r26, Z+10	; 0x0a
     968:	b3 85       	ldd	r27, Z+11	; 0x0b

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     96a:	c4 81       	ldd	r28, Z+4	; 0x04
     96c:	d5 81       	ldd	r29, Z+5	; 0x05
     96e:	86 81       	ldd	r24, Z+6	; 0x06
     970:	97 81       	ldd	r25, Z+7	; 0x07
     972:	8e 83       	std	Y+6, r24	; 0x06
     974:	9f 83       	std	Y+7, r25	; 0x07
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     976:	c6 81       	ldd	r28, Z+6	; 0x06
     978:	d7 81       	ldd	r29, Z+7	; 0x07
     97a:	84 81       	ldd	r24, Z+4	; 0x04
     97c:	95 81       	ldd	r25, Z+5	; 0x05
     97e:	8c 83       	std	Y+4, r24	; 0x04
     980:	9d 83       	std	Y+5, r25	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     982:	11 96       	adiw	r26, 0x01	; 1
     984:	8d 91       	ld	r24, X+
     986:	9c 91       	ld	r25, X
     988:	12 97       	sbiw	r26, 0x02	; 2
     98a:	e8 17       	cp	r30, r24
     98c:	f9 07       	cpc	r31, r25
     98e:	31 f4       	brne	.+12     	; 0x99c <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     990:	86 81       	ldd	r24, Z+6	; 0x06
     992:	97 81       	ldd	r25, Z+7	; 0x07
     994:	11 96       	adiw	r26, 0x01	; 1
     996:	8d 93       	st	X+, r24
     998:	9c 93       	st	X, r25
     99a:	12 97       	sbiw	r26, 0x02	; 2
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     99c:	12 86       	std	Z+10, r1	; 0x0a
     99e:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
     9a0:	8c 91       	ld	r24, X
     9a2:	81 50       	subi	r24, 0x01	; 1
     9a4:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
     9a6:	8c 91       	ld	r24, X
}
     9a8:	df 91       	pop	r29
     9aa:	cf 91       	pop	r28
     9ac:	08 95       	ret

000009ae <prvSetupTimerInterrupt>:
}

/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     9ae:	83 ef       	ldi	r24, 0xF3	; 243
     9b0:	91 e0       	ldi	r25, 0x01	; 1
     9b2:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x7de826>
     9b6:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x7de827>
     9ba:	65 e0       	ldi	r22, 0x05	; 5
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	98 e0       	ldi	r25, 0x08	; 8
     9c0:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <TC0_ConfigClockSource>
     9c4:	61 e0       	ldi	r22, 0x01	; 1
     9c6:	80 e0       	ldi	r24, 0x00	; 0
     9c8:	98 e0       	ldi	r25, 0x08	; 8
     9ca:	0e 94 66 02 	call	0x4cc	; 0x4cc <TC0_SetOverflowIntLevel>
     9ce:	08 95       	ret

000009d0 <_portSetInterruptMaskFromIsr>:
     9d0:	e0 ea       	ldi	r30, 0xA0	; 160
     9d2:	f0 e0       	ldi	r31, 0x00	; 0
     9d4:	82 81       	ldd	r24, Z+2	; 0x02
     9d6:	92 81       	ldd	r25, Z+2	; 0x02
     9d8:	98 7f       	andi	r25, 0xF8	; 248
     9da:	92 83       	std	Z+2, r25	; 0x02
     9dc:	08 95       	ret

000009de <portTaskIncrementTick>:
     9de:	cf 93       	push	r28
     9e0:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <_portSetInterruptMaskFromIsr>
     9e4:	c8 2f       	mov	r28, r24
     9e6:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <xTaskIncrementTick>
     9ea:	c0 93 a2 00 	sts	0x00A2, r28	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     9ee:	cf 91       	pop	r28
     9f0:	08 95       	ret

000009f2 <pxPortInitialiseStack>:
     9f2:	cf 92       	push	r12
     9f4:	df 92       	push	r13
     9f6:	ef 92       	push	r14
     9f8:	ff 92       	push	r15
     9fa:	31 e1       	ldi	r19, 0x11	; 17
     9fc:	fc 01       	movw	r30, r24
     9fe:	30 83       	st	Z, r19
     a00:	31 97       	sbiw	r30, 0x01	; 1
     a02:	22 e2       	ldi	r18, 0x22	; 34
     a04:	20 83       	st	Z, r18
     a06:	31 97       	sbiw	r30, 0x01	; 1
     a08:	a3 e3       	ldi	r26, 0x33	; 51
     a0a:	a0 83       	st	Z, r26
     a0c:	6b 01       	movw	r12, r22
     a0e:	e1 2c       	mov	r14, r1
     a10:	f1 2c       	mov	r15, r1
     a12:	31 97       	sbiw	r30, 0x01	; 1
     a14:	60 83       	st	Z, r22
     a16:	31 97       	sbiw	r30, 0x01	; 1
     a18:	d0 82       	st	Z, r13
     a1a:	31 97       	sbiw	r30, 0x01	; 1
     a1c:	e0 82       	st	Z, r14
     a1e:	31 97       	sbiw	r30, 0x01	; 1
     a20:	61 e3       	ldi	r22, 0x31	; 49
     a22:	60 83       	st	Z, r22
     a24:	31 97       	sbiw	r30, 0x01	; 1
     a26:	60 e8       	ldi	r22, 0x80	; 128
     a28:	60 83       	st	Z, r22
     a2a:	31 97       	sbiw	r30, 0x01	; 1
     a2c:	67 e8       	ldi	r22, 0x87	; 135
     a2e:	60 83       	st	Z, r22
     a30:	31 97       	sbiw	r30, 0x01	; 1
     a32:	10 82       	st	Z, r1
     a34:	31 97       	sbiw	r30, 0x01	; 1
     a36:	10 82       	st	Z, r1
     a38:	31 97       	sbiw	r30, 0x01	; 1
     a3a:	62 e0       	ldi	r22, 0x02	; 2
     a3c:	60 83       	st	Z, r22
     a3e:	31 97       	sbiw	r30, 0x01	; 1
     a40:	63 e0       	ldi	r22, 0x03	; 3
     a42:	60 83       	st	Z, r22
     a44:	31 97       	sbiw	r30, 0x01	; 1
     a46:	64 e0       	ldi	r22, 0x04	; 4
     a48:	60 83       	st	Z, r22
     a4a:	31 97       	sbiw	r30, 0x01	; 1
     a4c:	65 e0       	ldi	r22, 0x05	; 5
     a4e:	60 83       	st	Z, r22
     a50:	31 97       	sbiw	r30, 0x01	; 1
     a52:	66 e0       	ldi	r22, 0x06	; 6
     a54:	60 83       	st	Z, r22
     a56:	31 97       	sbiw	r30, 0x01	; 1
     a58:	67 e0       	ldi	r22, 0x07	; 7
     a5a:	60 83       	st	Z, r22
     a5c:	31 97       	sbiw	r30, 0x01	; 1
     a5e:	68 e0       	ldi	r22, 0x08	; 8
     a60:	60 83       	st	Z, r22
     a62:	31 97       	sbiw	r30, 0x01	; 1
     a64:	69 e0       	ldi	r22, 0x09	; 9
     a66:	60 83       	st	Z, r22
     a68:	31 97       	sbiw	r30, 0x01	; 1
     a6a:	60 e1       	ldi	r22, 0x10	; 16
     a6c:	60 83       	st	Z, r22
     a6e:	31 97       	sbiw	r30, 0x01	; 1
     a70:	30 83       	st	Z, r19
     a72:	31 97       	sbiw	r30, 0x01	; 1
     a74:	32 e1       	ldi	r19, 0x12	; 18
     a76:	30 83       	st	Z, r19
     a78:	31 97       	sbiw	r30, 0x01	; 1
     a7a:	33 e1       	ldi	r19, 0x13	; 19
     a7c:	30 83       	st	Z, r19
     a7e:	31 97       	sbiw	r30, 0x01	; 1
     a80:	34 e1       	ldi	r19, 0x14	; 20
     a82:	30 83       	st	Z, r19
     a84:	31 97       	sbiw	r30, 0x01	; 1
     a86:	35 e1       	ldi	r19, 0x15	; 21
     a88:	30 83       	st	Z, r19
     a8a:	31 97       	sbiw	r30, 0x01	; 1
     a8c:	36 e1       	ldi	r19, 0x16	; 22
     a8e:	30 83       	st	Z, r19
     a90:	31 97       	sbiw	r30, 0x01	; 1
     a92:	37 e1       	ldi	r19, 0x17	; 23
     a94:	30 83       	st	Z, r19
     a96:	31 97       	sbiw	r30, 0x01	; 1
     a98:	38 e1       	ldi	r19, 0x18	; 24
     a9a:	30 83       	st	Z, r19
     a9c:	31 97       	sbiw	r30, 0x01	; 1
     a9e:	39 e1       	ldi	r19, 0x19	; 25
     aa0:	30 83       	st	Z, r19
     aa2:	31 97       	sbiw	r30, 0x01	; 1
     aa4:	30 e2       	ldi	r19, 0x20	; 32
     aa6:	30 83       	st	Z, r19
     aa8:	31 97       	sbiw	r30, 0x01	; 1
     aaa:	31 e2       	ldi	r19, 0x21	; 33
     aac:	30 83       	st	Z, r19
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	20 83       	st	Z, r18
     ab2:	31 97       	sbiw	r30, 0x01	; 1
     ab4:	23 e2       	ldi	r18, 0x23	; 35
     ab6:	20 83       	st	Z, r18
     ab8:	6a 01       	movw	r12, r20
     aba:	31 97       	sbiw	r30, 0x01	; 1
     abc:	40 83       	st	Z, r20
     abe:	31 97       	sbiw	r30, 0x01	; 1
     ac0:	d0 82       	st	Z, r13
     ac2:	31 97       	sbiw	r30, 0x01	; 1
     ac4:	26 e2       	ldi	r18, 0x26	; 38
     ac6:	20 83       	st	Z, r18
     ac8:	31 97       	sbiw	r30, 0x01	; 1
     aca:	27 e2       	ldi	r18, 0x27	; 39
     acc:	20 83       	st	Z, r18
     ace:	31 97       	sbiw	r30, 0x01	; 1
     ad0:	28 e2       	ldi	r18, 0x28	; 40
     ad2:	20 83       	st	Z, r18
     ad4:	31 97       	sbiw	r30, 0x01	; 1
     ad6:	29 e2       	ldi	r18, 0x29	; 41
     ad8:	20 83       	st	Z, r18
     ada:	31 97       	sbiw	r30, 0x01	; 1
     adc:	20 e3       	ldi	r18, 0x30	; 48
     ade:	20 83       	st	Z, r18
     ae0:	88 97       	sbiw	r24, 0x28	; 40
     ae2:	ff 90       	pop	r15
     ae4:	ef 90       	pop	r14
     ae6:	df 90       	pop	r13
     ae8:	cf 90       	pop	r12
     aea:	08 95       	ret

00000aec <xPortStartScheduler>:
     aec:	0e 94 d7 04 	call	0x9ae	; 0x9ae <prvSetupTimerInterrupt>
     af0:	a0 91 80 2c 	lds	r26, 0x2C80	; 0x802c80 <pxCurrentTCB>
     af4:	b0 91 81 2c 	lds	r27, 0x2C81	; 0x802c81 <pxCurrentTCB+0x1>
     af8:	0d 90       	ld	r0, X+
     afa:	0d be       	out	0x3d, r0	; 61
     afc:	0d 90       	ld	r0, X+
     afe:	0e be       	out	0x3e, r0	; 62
     b00:	ef 91       	pop	r30
     b02:	df 91       	pop	r29
     b04:	cf 91       	pop	r28
     b06:	bf 91       	pop	r27
     b08:	af 91       	pop	r26
     b0a:	9f 91       	pop	r25
     b0c:	8f 91       	pop	r24
     b0e:	7f 91       	pop	r23
     b10:	6f 91       	pop	r22
     b12:	5f 91       	pop	r21
     b14:	4f 91       	pop	r20
     b16:	3f 91       	pop	r19
     b18:	2f 91       	pop	r18
     b1a:	1f 91       	pop	r17
     b1c:	0f 91       	pop	r16
     b1e:	ff 90       	pop	r15
     b20:	ef 90       	pop	r14
     b22:	df 90       	pop	r13
     b24:	cf 90       	pop	r12
     b26:	bf 90       	pop	r11
     b28:	af 90       	pop	r10
     b2a:	9f 90       	pop	r9
     b2c:	8f 90       	pop	r8
     b2e:	7f 90       	pop	r7
     b30:	6f 90       	pop	r6
     b32:	5f 90       	pop	r5
     b34:	4f 90       	pop	r4
     b36:	3f 90       	pop	r3
     b38:	2f 90       	pop	r2
     b3a:	1f 90       	pop	r1
     b3c:	0f 90       	pop	r0
     b3e:	ff 91       	pop	r31
     b40:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     b44:	ff 91       	pop	r31
     b46:	ff bf       	out	0x3f, r31	; 63
     b48:	ff 91       	pop	r31
     b4a:	08 95       	ret
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	08 95       	ret

00000b50 <vPortYield>:
// 
//
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     b50:	ff 93       	push	r31
     b52:	ff b7       	in	r31, 0x3f	; 63
     b54:	ff 93       	push	r31
     b56:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     b5a:	ff 93       	push	r31
     b5c:	f8 7f       	andi	r31, 0xF8	; 248
     b5e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     b62:	0f 92       	push	r0
     b64:	1f 92       	push	r1
     b66:	11 24       	eor	r1, r1
     b68:	2f 92       	push	r2
     b6a:	3f 92       	push	r3
     b6c:	4f 92       	push	r4
     b6e:	5f 92       	push	r5
     b70:	6f 92       	push	r6
     b72:	7f 92       	push	r7
     b74:	8f 92       	push	r8
     b76:	9f 92       	push	r9
     b78:	af 92       	push	r10
     b7a:	bf 92       	push	r11
     b7c:	cf 92       	push	r12
     b7e:	df 92       	push	r13
     b80:	ef 92       	push	r14
     b82:	ff 92       	push	r15
     b84:	0f 93       	push	r16
     b86:	1f 93       	push	r17
     b88:	2f 93       	push	r18
     b8a:	3f 93       	push	r19
     b8c:	4f 93       	push	r20
     b8e:	5f 93       	push	r21
     b90:	6f 93       	push	r22
     b92:	7f 93       	push	r23
     b94:	8f 93       	push	r24
     b96:	9f 93       	push	r25
     b98:	af 93       	push	r26
     b9a:	bf 93       	push	r27
     b9c:	cf 93       	push	r28
     b9e:	df 93       	push	r29
     ba0:	ef 93       	push	r30
     ba2:	a0 91 80 2c 	lds	r26, 0x2C80	; 0x802c80 <pxCurrentTCB>
     ba6:	b0 91 81 2c 	lds	r27, 0x2C81	; 0x802c81 <pxCurrentTCB+0x1>
     baa:	0d b6       	in	r0, 0x3d	; 61
     bac:	0d 92       	st	X+, r0
     bae:	0e b6       	in	r0, 0x3e	; 62
     bb0:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     bb2:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     bb6:	a0 91 80 2c 	lds	r26, 0x2C80	; 0x802c80 <pxCurrentTCB>
     bba:	b0 91 81 2c 	lds	r27, 0x2C81	; 0x802c81 <pxCurrentTCB+0x1>
     bbe:	0d 90       	ld	r0, X+
     bc0:	0d be       	out	0x3d, r0	; 61
     bc2:	0d 90       	ld	r0, X+
     bc4:	0e be       	out	0x3e, r0	; 62
     bc6:	ef 91       	pop	r30
     bc8:	df 91       	pop	r29
     bca:	cf 91       	pop	r28
     bcc:	bf 91       	pop	r27
     bce:	af 91       	pop	r26
     bd0:	9f 91       	pop	r25
     bd2:	8f 91       	pop	r24
     bd4:	7f 91       	pop	r23
     bd6:	6f 91       	pop	r22
     bd8:	5f 91       	pop	r21
     bda:	4f 91       	pop	r20
     bdc:	3f 91       	pop	r19
     bde:	2f 91       	pop	r18
     be0:	1f 91       	pop	r17
     be2:	0f 91       	pop	r16
     be4:	ff 90       	pop	r15
     be6:	ef 90       	pop	r14
     be8:	df 90       	pop	r13
     bea:	cf 90       	pop	r12
     bec:	bf 90       	pop	r11
     bee:	af 90       	pop	r10
     bf0:	9f 90       	pop	r9
     bf2:	8f 90       	pop	r8
     bf4:	7f 90       	pop	r7
     bf6:	6f 90       	pop	r6
     bf8:	5f 90       	pop	r5
     bfa:	4f 90       	pop	r4
     bfc:	3f 90       	pop	r3
     bfe:	2f 90       	pop	r2
     c00:	1f 90       	pop	r1
     c02:	0f 90       	pop	r0
     c04:	ff 91       	pop	r31
     c06:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     c0a:	ff 91       	pop	r31
     c0c:	ff bf       	out	0x3f, r31	; 63
     c0e:	ff 91       	pop	r31
	asm volatile ( "ret" );
     c10:	08 95       	ret

00000c12 <portTaskSwitchContext>:
	//-----------------------------------------------------------
	//
	// The task switch is deferred until there is no more nesting.
	//
	void portTaskSwitchContext(signed portBASE_TYPE xSwitchRequired)
	{
     c12:	cf 93       	push	r28
		intTaskSwitchPending |= xSwitchRequired;					
     c14:	90 91 d4 2c 	lds	r25, 0x2CD4	; 0x802cd4 <intTaskSwitchPending>
     c18:	89 2b       	or	r24, r25
     c1a:	80 93 d4 2c 	sts	0x2CD4, r24	; 0x802cd4 <intTaskSwitchPending>
																
		if(NOT_NESTING() && intTaskSwitchPending)					
     c1e:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7de0a0>
     c22:	91 30       	cpi	r25, 0x01	; 1
     c24:	41 f0       	breq	.+16     	; 0xc36 <portTaskSwitchContext+0x24>
     c26:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7de0a0>
     c2a:	92 30       	cpi	r25, 0x02	; 2
     c2c:	21 f0       	breq	.+8      	; 0xc36 <portTaskSwitchContext+0x24>
     c2e:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7de0a0>
     c32:	94 30       	cpi	r25, 0x04	; 4
     c34:	59 f4       	brne	.+22     	; 0xc4c <portTaskSwitchContext+0x3a>
     c36:	88 23       	and	r24, r24
     c38:	49 f0       	breq	.+18     	; 0xc4c <portTaskSwitchContext+0x3a>
		{															
			register unsigned portBASE_TYPE uxSavedPmicCtrlReg; 				
			extern void vTaskSwitchContext(void);   				
																
			// Critical section used, because vTaskSwitchContext handles FreeRTOS internal data structures.
 			uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR(); 
     c3a:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <_portSetInterruptMaskFromIsr>
     c3e:	c8 2f       	mov	r28, r24
			intTaskSwitchPending = 0;								
     c40:	10 92 d4 2c 	sts	0x2CD4, r1	; 0x802cd4 <intTaskSwitchPending>
			vTaskSwitchContext();                   				
     c44:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <vTaskSwitchContext>
			portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedPmicCtrlReg);
     c48:	c0 93 a2 00 	sts	0x00A2, r28	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
		}                                          					
	}
     c4c:	cf 91       	pop	r28
     c4e:	08 95       	ret

00000c50 <__vector_14>:
	// the context is saved at the start of vPortYieldFromTick().  The tick
	// count is incremented after the context is saved.
	//
	ISR(TCC0_OVF_vect, ISR_NAKED)
	{
		portSTART_ISR();
     c50:	ff 93       	push	r31
     c52:	ff b7       	in	r31, 0x3f	; 63
     c54:	ff 93       	push	r31
     c56:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     c5a:	ff 93       	push	r31
     c5c:	f8 7f       	andi	r31, 0xF8	; 248
     c5e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     c62:	0f 92       	push	r0
     c64:	1f 92       	push	r1
     c66:	11 24       	eor	r1, r1
     c68:	2f 92       	push	r2
     c6a:	3f 92       	push	r3
     c6c:	4f 92       	push	r4
     c6e:	5f 92       	push	r5
     c70:	6f 92       	push	r6
     c72:	7f 92       	push	r7
     c74:	8f 92       	push	r8
     c76:	9f 92       	push	r9
     c78:	af 92       	push	r10
     c7a:	bf 92       	push	r11
     c7c:	cf 92       	push	r12
     c7e:	df 92       	push	r13
     c80:	ef 92       	push	r14
     c82:	ff 92       	push	r15
     c84:	0f 93       	push	r16
     c86:	1f 93       	push	r17
     c88:	2f 93       	push	r18
     c8a:	3f 93       	push	r19
     c8c:	4f 93       	push	r20
     c8e:	5f 93       	push	r21
     c90:	6f 93       	push	r22
     c92:	7f 93       	push	r23
     c94:	8f 93       	push	r24
     c96:	9f 93       	push	r25
     c98:	af 93       	push	r26
     c9a:	bf 93       	push	r27
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	ef 93       	push	r30
     ca2:	a0 91 80 2c 	lds	r26, 0x2C80	; 0x802c80 <pxCurrentTCB>
     ca6:	b0 91 81 2c 	lds	r27, 0x2C81	; 0x802c81 <pxCurrentTCB+0x1>
     caa:	0d b6       	in	r0, 0x3d	; 61
     cac:	0d 92       	st	X+, r0
     cae:	0e b6       	in	r0, 0x3e	; 62
     cb0:	0d 92       	st	X+, r0
		portTaskIncrementTick();
     cb2:	0e 94 ef 04 	call	0x9de	; 0x9de <portTaskIncrementTick>
		//always try a task switch, but only if on kernel interrupt level
		portEND_SWITCHING_ISR(pdTRUE); 
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	0e 94 09 06 	call	0xc12	; 0xc12 <portTaskSwitchContext>
     cbc:	a0 91 80 2c 	lds	r26, 0x2C80	; 0x802c80 <pxCurrentTCB>
     cc0:	b0 91 81 2c 	lds	r27, 0x2C81	; 0x802c81 <pxCurrentTCB+0x1>
     cc4:	0d 90       	ld	r0, X+
     cc6:	0d be       	out	0x3d, r0	; 61
     cc8:	0d 90       	ld	r0, X+
     cca:	0e be       	out	0x3e, r0	; 62
     ccc:	ef 91       	pop	r30
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	bf 91       	pop	r27
     cd4:	af 91       	pop	r26
     cd6:	9f 91       	pop	r25
     cd8:	8f 91       	pop	r24
     cda:	7f 91       	pop	r23
     cdc:	6f 91       	pop	r22
     cde:	5f 91       	pop	r21
     ce0:	4f 91       	pop	r20
     ce2:	3f 91       	pop	r19
     ce4:	2f 91       	pop	r18
     ce6:	1f 91       	pop	r17
     ce8:	0f 91       	pop	r16
     cea:	ff 90       	pop	r15
     cec:	ef 90       	pop	r14
     cee:	df 90       	pop	r13
     cf0:	cf 90       	pop	r12
     cf2:	bf 90       	pop	r11
     cf4:	af 90       	pop	r10
     cf6:	9f 90       	pop	r9
     cf8:	8f 90       	pop	r8
     cfa:	7f 90       	pop	r7
     cfc:	6f 90       	pop	r6
     cfe:	5f 90       	pop	r5
     d00:	4f 90       	pop	r4
     d02:	3f 90       	pop	r3
     d04:	2f 90       	pop	r2
     d06:	1f 90       	pop	r1
     d08:	0f 90       	pop	r0
     d0a:	ff 91       	pop	r31
     d0c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     d10:	ff 91       	pop	r31
     d12:	ff bf       	out	0x3f, r31	; 63
     d14:	ff 91       	pop	r31
     d16:	18 95       	reti

00000d18 <prvIsQueueEmpty>:
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
     d18:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     d1c:	ff 93       	push	r31
     d1e:	f8 7f       	andi	r31, 0xF8	; 248
     d20:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     d24:	fc 01       	movw	r30, r24
     d26:	86 8d       	ldd	r24, Z+30	; 0x1e
     d28:	81 11       	cpse	r24, r1
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <prvIsQueueEmpty+0x18>
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	01 c0       	rjmp	.+2      	; 0xd32 <prvIsQueueEmpty+0x1a>
     d30:	80 e0       	ldi	r24, 0x00	; 0
     d32:	ff 91       	pop	r31
     d34:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     d38:	08 95       	ret

00000d3a <prvIsQueueFull>:
     d3a:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     d3e:	ff 93       	push	r31
     d40:	f8 7f       	andi	r31, 0xF8	; 248
     d42:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     d46:	fc 01       	movw	r30, r24
     d48:	26 8d       	ldd	r18, Z+30	; 0x1e
     d4a:	87 8d       	ldd	r24, Z+31	; 0x1f
     d4c:	28 13       	cpse	r18, r24
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <prvIsQueueFull+0x1a>
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	01 c0       	rjmp	.+2      	; 0xd56 <prvIsQueueFull+0x1c>
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	ff 91       	pop	r31
     d58:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     d5c:	08 95       	ret

00000d5e <prvCopyDataToQueue>:
     d5e:	0f 93       	push	r16
     d60:	1f 93       	push	r17
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
     d66:	ec 01       	movw	r28, r24
     d68:	04 2f       	mov	r16, r20
     d6a:	1e 8d       	ldd	r17, Y+30	; 0x1e
     d6c:	48 a1       	ldd	r20, Y+32	; 0x20
     d6e:	44 23       	and	r20, r20
     d70:	b9 f1       	breq	.+110    	; 0xde0 <prvCopyDataToQueue+0x82>
     d72:	01 11       	cpse	r16, r1
     d74:	16 c0       	rjmp	.+44     	; 0xda2 <prvCopyDataToQueue+0x44>
     d76:	50 e0       	ldi	r21, 0x00	; 0
     d78:	8c 81       	ldd	r24, Y+4	; 0x04
     d7a:	9d 81       	ldd	r25, Y+5	; 0x05
     d7c:	0e 94 a5 1c 	call	0x394a	; 0x394a <memcpy>
     d80:	28 a1       	ldd	r18, Y+32	; 0x20
     d82:	8c 81       	ldd	r24, Y+4	; 0x04
     d84:	9d 81       	ldd	r25, Y+5	; 0x05
     d86:	82 0f       	add	r24, r18
     d88:	91 1d       	adc	r25, r1
     d8a:	8c 83       	std	Y+4, r24	; 0x04
     d8c:	9d 83       	std	Y+5, r25	; 0x05
     d8e:	2a 81       	ldd	r18, Y+2	; 0x02
     d90:	3b 81       	ldd	r19, Y+3	; 0x03
     d92:	82 17       	cp	r24, r18
     d94:	93 07       	cpc	r25, r19
     d96:	20 f1       	brcs	.+72     	; 0xde0 <prvCopyDataToQueue+0x82>
     d98:	88 81       	ld	r24, Y
     d9a:	99 81       	ldd	r25, Y+1	; 0x01
     d9c:	8c 83       	std	Y+4, r24	; 0x04
     d9e:	9d 83       	std	Y+5, r25	; 0x05
     da0:	1f c0       	rjmp	.+62     	; 0xde0 <prvCopyDataToQueue+0x82>
     da2:	50 e0       	ldi	r21, 0x00	; 0
     da4:	8e 81       	ldd	r24, Y+6	; 0x06
     da6:	9f 81       	ldd	r25, Y+7	; 0x07
     da8:	0e 94 a5 1c 	call	0x394a	; 0x394a <memcpy>
     dac:	88 a1       	ldd	r24, Y+32	; 0x20
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	91 95       	neg	r25
     db2:	81 95       	neg	r24
     db4:	91 09       	sbc	r25, r1
     db6:	2e 81       	ldd	r18, Y+6	; 0x06
     db8:	3f 81       	ldd	r19, Y+7	; 0x07
     dba:	28 0f       	add	r18, r24
     dbc:	39 1f       	adc	r19, r25
     dbe:	2e 83       	std	Y+6, r18	; 0x06
     dc0:	3f 83       	std	Y+7, r19	; 0x07
     dc2:	48 81       	ld	r20, Y
     dc4:	59 81       	ldd	r21, Y+1	; 0x01
     dc6:	24 17       	cp	r18, r20
     dc8:	35 07       	cpc	r19, r21
     dca:	30 f4       	brcc	.+12     	; 0xdd8 <prvCopyDataToQueue+0x7a>
     dcc:	2a 81       	ldd	r18, Y+2	; 0x02
     dce:	3b 81       	ldd	r19, Y+3	; 0x03
     dd0:	82 0f       	add	r24, r18
     dd2:	93 1f       	adc	r25, r19
     dd4:	8e 83       	std	Y+6, r24	; 0x06
     dd6:	9f 83       	std	Y+7, r25	; 0x07
     dd8:	02 30       	cpi	r16, 0x02	; 2
     dda:	11 f4       	brne	.+4      	; 0xde0 <prvCopyDataToQueue+0x82>
     ddc:	11 11       	cpse	r17, r1
     dde:	11 50       	subi	r17, 0x01	; 1
     de0:	1f 5f       	subi	r17, 0xFF	; 255
     de2:	1e 8f       	std	Y+30, r17	; 0x1e
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	1f 91       	pop	r17
     dec:	0f 91       	pop	r16
     dee:	08 95       	ret

00000df0 <prvCopyDataFromQueue>:
     df0:	fc 01       	movw	r30, r24
     df2:	40 a1       	ldd	r20, Z+32	; 0x20
     df4:	44 23       	and	r20, r20
     df6:	a9 f0       	breq	.+42     	; 0xe22 <prvCopyDataFromQueue+0x32>
     df8:	50 e0       	ldi	r21, 0x00	; 0
     dfa:	26 81       	ldd	r18, Z+6	; 0x06
     dfc:	37 81       	ldd	r19, Z+7	; 0x07
     dfe:	24 0f       	add	r18, r20
     e00:	35 1f       	adc	r19, r21
     e02:	26 83       	std	Z+6, r18	; 0x06
     e04:	37 83       	std	Z+7, r19	; 0x07
     e06:	82 81       	ldd	r24, Z+2	; 0x02
     e08:	93 81       	ldd	r25, Z+3	; 0x03
     e0a:	28 17       	cp	r18, r24
     e0c:	39 07       	cpc	r19, r25
     e0e:	20 f0       	brcs	.+8      	; 0xe18 <prvCopyDataFromQueue+0x28>
     e10:	80 81       	ld	r24, Z
     e12:	91 81       	ldd	r25, Z+1	; 0x01
     e14:	86 83       	std	Z+6, r24	; 0x06
     e16:	97 83       	std	Z+7, r25	; 0x07
     e18:	cb 01       	movw	r24, r22
     e1a:	66 81       	ldd	r22, Z+6	; 0x06
     e1c:	77 81       	ldd	r23, Z+7	; 0x07
     e1e:	0e 94 a5 1c 	call	0x394a	; 0x394a <memcpy>
     e22:	08 95       	ret

00000e24 <prvUnlockQueue>:
     e24:	1f 93       	push	r17
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	ec 01       	movw	r28, r24
     e2c:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     e30:	ff 93       	push	r31
     e32:	f8 7f       	andi	r31, 0xF8	; 248
     e34:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     e38:	1a a1       	ldd	r17, Y+34	; 0x22
     e3a:	0b c0       	rjmp	.+22     	; 0xe52 <prvUnlockQueue+0x2e>
     e3c:	8b 89       	ldd	r24, Y+19	; 0x13
     e3e:	88 23       	and	r24, r24
     e40:	51 f0       	breq	.+20     	; 0xe56 <prvUnlockQueue+0x32>
     e42:	ce 01       	movw	r24, r28
     e44:	43 96       	adiw	r24, 0x13	; 19
     e46:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <xTaskRemoveFromEventList>
     e4a:	81 11       	cpse	r24, r1
     e4c:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <vTaskMissedYield>
     e50:	11 50       	subi	r17, 0x01	; 1
     e52:	11 16       	cp	r1, r17
     e54:	9c f3       	brlt	.-26     	; 0xe3c <prvUnlockQueue+0x18>
     e56:	8f ef       	ldi	r24, 0xFF	; 255
     e58:	8a a3       	std	Y+34, r24	; 0x22
     e5a:	ff 91       	pop	r31
     e5c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     e60:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     e64:	ff 93       	push	r31
     e66:	f8 7f       	andi	r31, 0xF8	; 248
     e68:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     e6c:	19 a1       	ldd	r17, Y+33	; 0x21
     e6e:	0b c0       	rjmp	.+22     	; 0xe86 <prvUnlockQueue+0x62>
     e70:	88 85       	ldd	r24, Y+8	; 0x08
     e72:	88 23       	and	r24, r24
     e74:	51 f0       	breq	.+20     	; 0xe8a <prvUnlockQueue+0x66>
     e76:	ce 01       	movw	r24, r28
     e78:	08 96       	adiw	r24, 0x08	; 8
     e7a:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <xTaskRemoveFromEventList>
     e7e:	81 11       	cpse	r24, r1
     e80:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <vTaskMissedYield>
     e84:	11 50       	subi	r17, 0x01	; 1
     e86:	11 16       	cp	r1, r17
     e88:	9c f3       	brlt	.-26     	; 0xe70 <prvUnlockQueue+0x4c>
     e8a:	8f ef       	ldi	r24, 0xFF	; 255
     e8c:	89 a3       	std	Y+33, r24	; 0x21
     e8e:	ff 91       	pop	r31
     e90:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     e94:	df 91       	pop	r29
     e96:	cf 91       	pop	r28
     e98:	1f 91       	pop	r17
     e9a:	08 95       	ret

00000e9c <xQueueGenericReset>:
     e9c:	cf 93       	push	r28
     e9e:	df 93       	push	r29
     ea0:	ec 01       	movw	r28, r24
     ea2:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     ea6:	ff 93       	push	r31
     ea8:	f8 7f       	andi	r31, 0xF8	; 248
     eaa:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     eae:	e8 81       	ld	r30, Y
     eb0:	f9 81       	ldd	r31, Y+1	; 0x01
     eb2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	28 a1       	ldd	r18, Y+32	; 0x20
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	82 9f       	mul	r24, r18
     ebc:	a0 01       	movw	r20, r0
     ebe:	83 9f       	mul	r24, r19
     ec0:	50 0d       	add	r21, r0
     ec2:	92 9f       	mul	r25, r18
     ec4:	50 0d       	add	r21, r0
     ec6:	11 24       	eor	r1, r1
     ec8:	4e 0f       	add	r20, r30
     eca:	5f 1f       	adc	r21, r31
     ecc:	4a 83       	std	Y+2, r20	; 0x02
     ece:	5b 83       	std	Y+3, r21	; 0x03
     ed0:	1e 8e       	std	Y+30, r1	; 0x1e
     ed2:	ec 83       	std	Y+4, r30	; 0x04
     ed4:	fd 83       	std	Y+5, r31	; 0x05
     ed6:	01 97       	sbiw	r24, 0x01	; 1
     ed8:	28 9f       	mul	r18, r24
     eda:	a0 01       	movw	r20, r0
     edc:	29 9f       	mul	r18, r25
     ede:	50 0d       	add	r21, r0
     ee0:	38 9f       	mul	r19, r24
     ee2:	50 0d       	add	r21, r0
     ee4:	11 24       	eor	r1, r1
     ee6:	cf 01       	movw	r24, r30
     ee8:	84 0f       	add	r24, r20
     eea:	95 1f       	adc	r25, r21
     eec:	8e 83       	std	Y+6, r24	; 0x06
     eee:	9f 83       	std	Y+7, r25	; 0x07
     ef0:	8f ef       	ldi	r24, 0xFF	; 255
     ef2:	89 a3       	std	Y+33, r24	; 0x21
     ef4:	8a a3       	std	Y+34, r24	; 0x22
     ef6:	61 11       	cpse	r22, r1
     ef8:	0c c0       	rjmp	.+24     	; 0xf12 <xQueueGenericReset+0x76>
     efa:	88 85       	ldd	r24, Y+8	; 0x08
     efc:	88 23       	and	r24, r24
     efe:	89 f0       	breq	.+34     	; 0xf22 <xQueueGenericReset+0x86>
     f00:	ce 01       	movw	r24, r28
     f02:	08 96       	adiw	r24, 0x08	; 8
     f04:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <xTaskRemoveFromEventList>
     f08:	88 23       	and	r24, r24
     f0a:	59 f0       	breq	.+22     	; 0xf22 <xQueueGenericReset+0x86>
     f0c:	0e 94 a8 05 	call	0xb50	; 0xb50 <vPortYield>
     f10:	08 c0       	rjmp	.+16     	; 0xf22 <xQueueGenericReset+0x86>
     f12:	ce 01       	movw	r24, r28
     f14:	08 96       	adiw	r24, 0x08	; 8
     f16:	0e 94 3d 04 	call	0x87a	; 0x87a <vListInitialise>
     f1a:	ce 01       	movw	r24, r28
     f1c:	43 96       	adiw	r24, 0x13	; 19
     f1e:	0e 94 3d 04 	call	0x87a	; 0x87a <vListInitialise>
     f22:	ff 91       	pop	r31
     f24:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	08 95       	ret

00000f30 <prvInitialiseNewQueue>:
     f30:	ff 92       	push	r15
     f32:	0f 93       	push	r16
     f34:	1f 93       	push	r17
     f36:	cf 93       	push	r28
     f38:	df 93       	push	r29
     f3a:	f2 2e       	mov	r15, r18
     f3c:	e8 01       	movw	r28, r16
     f3e:	61 11       	cpse	r22, r1
     f40:	03 c0       	rjmp	.+6      	; 0xf48 <prvInitialiseNewQueue+0x18>
     f42:	08 83       	st	Y, r16
     f44:	19 83       	std	Y+1, r17	; 0x01
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <prvInitialiseNewQueue+0x1c>
     f48:	48 83       	st	Y, r20
     f4a:	59 83       	std	Y+1, r21	; 0x01
     f4c:	8f 8f       	std	Y+31, r24	; 0x1f
     f4e:	68 a3       	std	Y+32, r22	; 0x20
     f50:	61 e0       	ldi	r22, 0x01	; 1
     f52:	ce 01       	movw	r24, r28
     f54:	0e 94 4e 07 	call	0xe9c	; 0xe9c <xQueueGenericReset>
     f58:	fc a2       	std	Y+36, r15	; 0x24
     f5a:	df 91       	pop	r29
     f5c:	cf 91       	pop	r28
     f5e:	1f 91       	pop	r17
     f60:	0f 91       	pop	r16
     f62:	ff 90       	pop	r15
     f64:	08 95       	ret

00000f66 <xQueueGenericCreate>:
     f66:	df 92       	push	r13
     f68:	ef 92       	push	r14
     f6a:	ff 92       	push	r15
     f6c:	0f 93       	push	r16
     f6e:	1f 93       	push	r17
     f70:	cf 93       	push	r28
     f72:	df 93       	push	r29
     f74:	e8 2e       	mov	r14, r24
     f76:	f6 2e       	mov	r15, r22
     f78:	d4 2e       	mov	r13, r20
     f7a:	66 23       	and	r22, r22
     f7c:	21 f0       	breq	.+8      	; 0xf86 <xQueueGenericCreate+0x20>
     f7e:	86 9f       	mul	r24, r22
     f80:	c0 01       	movw	r24, r0
     f82:	11 24       	eor	r1, r1
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <xQueueGenericCreate+0x24>
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	85 96       	adiw	r24, 0x25	; 37
     f8c:	0e 94 16 04 	call	0x82c	; 0x82c <pvPortMalloc>
     f90:	ec 01       	movw	r28, r24
     f92:	00 97       	sbiw	r24, 0x00	; 0
     f94:	49 f0       	breq	.+18     	; 0xfa8 <xQueueGenericCreate+0x42>
     f96:	8c 01       	movw	r16, r24
     f98:	2d 2d       	mov	r18, r13
     f9a:	ac 01       	movw	r20, r24
     f9c:	4b 5d       	subi	r20, 0xDB	; 219
     f9e:	5f 4f       	sbci	r21, 0xFF	; 255
     fa0:	6f 2d       	mov	r22, r15
     fa2:	8e 2d       	mov	r24, r14
     fa4:	0e 94 98 07 	call	0xf30	; 0xf30 <prvInitialiseNewQueue>
     fa8:	ce 01       	movw	r24, r28
     faa:	df 91       	pop	r29
     fac:	cf 91       	pop	r28
     fae:	1f 91       	pop	r17
     fb0:	0f 91       	pop	r16
     fb2:	ff 90       	pop	r15
     fb4:	ef 90       	pop	r14
     fb6:	df 90       	pop	r13
     fb8:	08 95       	ret

00000fba <xQueueGenericSend>:
     fba:	cf 92       	push	r12
     fbc:	df 92       	push	r13
     fbe:	ef 92       	push	r14
     fc0:	ff 92       	push	r15
     fc2:	0f 93       	push	r16
     fc4:	1f 93       	push	r17
     fc6:	cf 93       	push	r28
     fc8:	df 93       	push	r29
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
     fce:	29 97       	sbiw	r28, 0x09	; 9
     fd0:	cd bf       	out	0x3d, r28	; 61
     fd2:	de bf       	out	0x3e, r29	; 62
     fd4:	7c 01       	movw	r14, r24
     fd6:	6b 01       	movw	r12, r22
     fd8:	2e 83       	std	Y+6, r18	; 0x06
     fda:	3f 83       	std	Y+7, r19	; 0x07
     fdc:	48 87       	std	Y+8, r20	; 0x08
     fde:	59 87       	std	Y+9, r21	; 0x09
     fe0:	10 e0       	ldi	r17, 0x00	; 0
     fe2:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     fe6:	ff 93       	push	r31
     fe8:	f8 7f       	andi	r31, 0xF8	; 248
     fea:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     fee:	f7 01       	movw	r30, r14
     ff0:	96 8d       	ldd	r25, Z+30	; 0x1e
     ff2:	87 8d       	ldd	r24, Z+31	; 0x1f
     ff4:	98 17       	cp	r25, r24
     ff6:	10 f0       	brcs	.+4      	; 0xffc <xQueueGenericSend+0x42>
     ff8:	02 30       	cpi	r16, 0x02	; 2
     ffa:	d1 f4       	brne	.+52     	; 0x1030 <xQueueGenericSend+0x76>
     ffc:	40 2f       	mov	r20, r16
     ffe:	b6 01       	movw	r22, r12
    1000:	c7 01       	movw	r24, r14
    1002:	0e 94 af 06 	call	0xd5e	; 0xd5e <prvCopyDataToQueue>
    1006:	f7 01       	movw	r30, r14
    1008:	93 89       	ldd	r25, Z+19	; 0x13
    100a:	99 23       	and	r25, r25
    100c:	49 f0       	breq	.+18     	; 0x1020 <xQueueGenericSend+0x66>
    100e:	c7 01       	movw	r24, r14
    1010:	43 96       	adiw	r24, 0x13	; 19
    1012:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <xTaskRemoveFromEventList>
    1016:	88 23       	and	r24, r24
    1018:	31 f0       	breq	.+12     	; 0x1026 <xQueueGenericSend+0x6c>
    101a:	0e 94 a8 05 	call	0xb50	; 0xb50 <vPortYield>
    101e:	03 c0       	rjmp	.+6      	; 0x1026 <xQueueGenericSend+0x6c>
    1020:	81 11       	cpse	r24, r1
    1022:	0e 94 a8 05 	call	0xb50	; 0xb50 <vPortYield>
    1026:	ff 91       	pop	r31
    1028:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	58 c0       	rjmp	.+176    	; 0x10e0 <xQueueGenericSend+0x126>
    1030:	8e 81       	ldd	r24, Y+6	; 0x06
    1032:	9f 81       	ldd	r25, Y+7	; 0x07
    1034:	a8 85       	ldd	r26, Y+8	; 0x08
    1036:	b9 85       	ldd	r27, Y+9	; 0x09
    1038:	89 2b       	or	r24, r25
    103a:	8a 2b       	or	r24, r26
    103c:	8b 2b       	or	r24, r27
    103e:	29 f4       	brne	.+10     	; 0x104a <xQueueGenericSend+0x90>
    1040:	ff 91       	pop	r31
    1042:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	4b c0       	rjmp	.+150    	; 0x10e0 <xQueueGenericSend+0x126>
    104a:	11 11       	cpse	r17, r1
    104c:	05 c0       	rjmp	.+10     	; 0x1058 <xQueueGenericSend+0x9e>
    104e:	ce 01       	movw	r24, r28
    1050:	01 96       	adiw	r24, 0x01	; 1
    1052:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <vTaskInternalSetTimeOutState>
    1056:	11 e0       	ldi	r17, 0x01	; 1
    1058:	ff 91       	pop	r31
    105a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    105e:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <vTaskSuspendAll>
    1062:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1066:	ff 93       	push	r31
    1068:	f8 7f       	andi	r31, 0xF8	; 248
    106a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    106e:	f7 01       	movw	r30, r14
    1070:	81 a1       	ldd	r24, Z+33	; 0x21
    1072:	8f 3f       	cpi	r24, 0xFF	; 255
    1074:	09 f4       	brne	.+2      	; 0x1078 <xQueueGenericSend+0xbe>
    1076:	11 a2       	std	Z+33, r1	; 0x21
    1078:	f7 01       	movw	r30, r14
    107a:	82 a1       	ldd	r24, Z+34	; 0x22
    107c:	8f 3f       	cpi	r24, 0xFF	; 255
    107e:	09 f4       	brne	.+2      	; 0x1082 <xQueueGenericSend+0xc8>
    1080:	12 a2       	std	Z+34, r1	; 0x22
    1082:	ff 91       	pop	r31
    1084:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1088:	be 01       	movw	r22, r28
    108a:	6a 5f       	subi	r22, 0xFA	; 250
    108c:	7f 4f       	sbci	r23, 0xFF	; 255
    108e:	ce 01       	movw	r24, r28
    1090:	01 96       	adiw	r24, 0x01	; 1
    1092:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <xTaskCheckForTimeOut>
    1096:	81 11       	cpse	r24, r1
    1098:	1d c0       	rjmp	.+58     	; 0x10d4 <xQueueGenericSend+0x11a>
    109a:	c7 01       	movw	r24, r14
    109c:	0e 94 9d 06 	call	0xd3a	; 0xd3a <prvIsQueueFull>
    10a0:	88 23       	and	r24, r24
    10a2:	91 f0       	breq	.+36     	; 0x10c8 <xQueueGenericSend+0x10e>
    10a4:	4e 81       	ldd	r20, Y+6	; 0x06
    10a6:	5f 81       	ldd	r21, Y+7	; 0x07
    10a8:	68 85       	ldd	r22, Y+8	; 0x08
    10aa:	79 85       	ldd	r23, Y+9	; 0x09
    10ac:	c7 01       	movw	r24, r14
    10ae:	08 96       	adiw	r24, 0x08	; 8
    10b0:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <vTaskPlaceOnEventList>
    10b4:	c7 01       	movw	r24, r14
    10b6:	0e 94 12 07 	call	0xe24	; 0xe24 <prvUnlockQueue>
    10ba:	0e 94 b8 0c 	call	0x1970	; 0x1970 <xTaskResumeAll>
    10be:	81 11       	cpse	r24, r1
    10c0:	90 cf       	rjmp	.-224    	; 0xfe2 <xQueueGenericSend+0x28>
    10c2:	0e 94 a8 05 	call	0xb50	; 0xb50 <vPortYield>
    10c6:	8d cf       	rjmp	.-230    	; 0xfe2 <xQueueGenericSend+0x28>
    10c8:	c7 01       	movw	r24, r14
    10ca:	0e 94 12 07 	call	0xe24	; 0xe24 <prvUnlockQueue>
    10ce:	0e 94 b8 0c 	call	0x1970	; 0x1970 <xTaskResumeAll>
    10d2:	87 cf       	rjmp	.-242    	; 0xfe2 <xQueueGenericSend+0x28>
    10d4:	c7 01       	movw	r24, r14
    10d6:	0e 94 12 07 	call	0xe24	; 0xe24 <prvUnlockQueue>
    10da:	0e 94 b8 0c 	call	0x1970	; 0x1970 <xTaskResumeAll>
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	29 96       	adiw	r28, 0x09	; 9
    10e2:	cd bf       	out	0x3d, r28	; 61
    10e4:	de bf       	out	0x3e, r29	; 62
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	1f 91       	pop	r17
    10ec:	0f 91       	pop	r16
    10ee:	ff 90       	pop	r15
    10f0:	ef 90       	pop	r14
    10f2:	df 90       	pop	r13
    10f4:	cf 90       	pop	r12
    10f6:	08 95       	ret

000010f8 <xQueueGenericSendFromISR>:
    10f8:	af 92       	push	r10
    10fa:	bf 92       	push	r11
    10fc:	cf 92       	push	r12
    10fe:	df 92       	push	r13
    1100:	ff 92       	push	r15
    1102:	0f 93       	push	r16
    1104:	1f 93       	push	r17
    1106:	cf 93       	push	r28
    1108:	df 93       	push	r29
    110a:	ec 01       	movw	r28, r24
    110c:	6b 01       	movw	r12, r22
    110e:	5a 01       	movw	r10, r20
    1110:	02 2f       	mov	r16, r18
    1112:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <_portSetInterruptMaskFromIsr>
    1116:	f8 2e       	mov	r15, r24
    1118:	9e 8d       	ldd	r25, Y+30	; 0x1e
    111a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    111c:	98 17       	cp	r25, r24
    111e:	10 f0       	brcs	.+4      	; 0x1124 <xQueueGenericSendFromISR+0x2c>
    1120:	02 30       	cpi	r16, 0x02	; 2
    1122:	e1 f4       	brne	.+56     	; 0x115c <xQueueGenericSendFromISR+0x64>
    1124:	1a a1       	ldd	r17, Y+34	; 0x22
    1126:	40 2f       	mov	r20, r16
    1128:	b6 01       	movw	r22, r12
    112a:	ce 01       	movw	r24, r28
    112c:	0e 94 af 06 	call	0xd5e	; 0xd5e <prvCopyDataToQueue>
    1130:	1f 3f       	cpi	r17, 0xFF	; 255
    1132:	81 f4       	brne	.+32     	; 0x1154 <xQueueGenericSendFromISR+0x5c>
    1134:	8b 89       	ldd	r24, Y+19	; 0x13
    1136:	88 23       	and	r24, r24
    1138:	99 f0       	breq	.+38     	; 0x1160 <xQueueGenericSendFromISR+0x68>
    113a:	ce 01       	movw	r24, r28
    113c:	43 96       	adiw	r24, 0x13	; 19
    113e:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <xTaskRemoveFromEventList>
    1142:	88 23       	and	r24, r24
    1144:	79 f0       	breq	.+30     	; 0x1164 <xQueueGenericSendFromISR+0x6c>
    1146:	a1 14       	cp	r10, r1
    1148:	b1 04       	cpc	r11, r1
    114a:	71 f0       	breq	.+28     	; 0x1168 <xQueueGenericSendFromISR+0x70>
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	f5 01       	movw	r30, r10
    1150:	80 83       	st	Z, r24
    1152:	0b c0       	rjmp	.+22     	; 0x116a <xQueueGenericSendFromISR+0x72>
    1154:	1f 5f       	subi	r17, 0xFF	; 255
    1156:	1a a3       	std	Y+34, r17	; 0x22
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	07 c0       	rjmp	.+14     	; 0x116a <xQueueGenericSendFromISR+0x72>
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	05 c0       	rjmp	.+10     	; 0x116a <xQueueGenericSendFromISR+0x72>
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	03 c0       	rjmp	.+6      	; 0x116a <xQueueGenericSendFromISR+0x72>
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	01 c0       	rjmp	.+2      	; 0x116a <xQueueGenericSendFromISR+0x72>
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	f0 92 a2 00 	sts	0x00A2, r15	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    116e:	df 91       	pop	r29
    1170:	cf 91       	pop	r28
    1172:	1f 91       	pop	r17
    1174:	0f 91       	pop	r16
    1176:	ff 90       	pop	r15
    1178:	df 90       	pop	r13
    117a:	cf 90       	pop	r12
    117c:	bf 90       	pop	r11
    117e:	af 90       	pop	r10
    1180:	08 95       	ret

00001182 <xQueueReceive>:
    1182:	cf 92       	push	r12
    1184:	df 92       	push	r13
    1186:	ef 92       	push	r14
    1188:	ff 92       	push	r15
    118a:	0f 93       	push	r16
    118c:	1f 93       	push	r17
    118e:	cf 93       	push	r28
    1190:	df 93       	push	r29
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
    1196:	29 97       	sbiw	r28, 0x09	; 9
    1198:	cd bf       	out	0x3d, r28	; 61
    119a:	de bf       	out	0x3e, r29	; 62
    119c:	8c 01       	movw	r16, r24
    119e:	6b 01       	movw	r12, r22
    11a0:	2e 83       	std	Y+6, r18	; 0x06
    11a2:	3f 83       	std	Y+7, r19	; 0x07
    11a4:	48 87       	std	Y+8, r20	; 0x08
    11a6:	59 87       	std	Y+9, r21	; 0x09
    11a8:	e1 2c       	mov	r14, r1
    11aa:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    11ae:	ff 93       	push	r31
    11b0:	f8 7f       	andi	r31, 0xF8	; 248
    11b2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    11b6:	f8 01       	movw	r30, r16
    11b8:	f6 8c       	ldd	r15, Z+30	; 0x1e
    11ba:	ff 20       	and	r15, r15
    11bc:	b1 f0       	breq	.+44     	; 0x11ea <xQueueReceive+0x68>
    11be:	b6 01       	movw	r22, r12
    11c0:	c8 01       	movw	r24, r16
    11c2:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <prvCopyDataFromQueue>
    11c6:	fa 94       	dec	r15
    11c8:	f8 01       	movw	r30, r16
    11ca:	f6 8e       	std	Z+30, r15	; 0x1e
    11cc:	80 85       	ldd	r24, Z+8	; 0x08
    11ce:	88 23       	and	r24, r24
    11d0:	39 f0       	breq	.+14     	; 0x11e0 <xQueueReceive+0x5e>
    11d2:	c8 01       	movw	r24, r16
    11d4:	08 96       	adiw	r24, 0x08	; 8
    11d6:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <xTaskRemoveFromEventList>
    11da:	81 11       	cpse	r24, r1
    11dc:	0e 94 a8 05 	call	0xb50	; 0xb50 <vPortYield>
    11e0:	ff 91       	pop	r31
    11e2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	5f c0       	rjmp	.+190    	; 0x12a8 <xQueueReceive+0x126>
    11ea:	8e 81       	ldd	r24, Y+6	; 0x06
    11ec:	9f 81       	ldd	r25, Y+7	; 0x07
    11ee:	a8 85       	ldd	r26, Y+8	; 0x08
    11f0:	b9 85       	ldd	r27, Y+9	; 0x09
    11f2:	89 2b       	or	r24, r25
    11f4:	8a 2b       	or	r24, r26
    11f6:	8b 2b       	or	r24, r27
    11f8:	29 f4       	brne	.+10     	; 0x1204 <xQueueReceive+0x82>
    11fa:	ff 91       	pop	r31
    11fc:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	52 c0       	rjmp	.+164    	; 0x12a8 <xQueueReceive+0x126>
    1204:	e1 10       	cpse	r14, r1
    1206:	06 c0       	rjmp	.+12     	; 0x1214 <xQueueReceive+0x92>
    1208:	ce 01       	movw	r24, r28
    120a:	01 96       	adiw	r24, 0x01	; 1
    120c:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <vTaskInternalSetTimeOutState>
    1210:	ee 24       	eor	r14, r14
    1212:	e3 94       	inc	r14
    1214:	ff 91       	pop	r31
    1216:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    121a:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <vTaskSuspendAll>
    121e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1222:	ff 93       	push	r31
    1224:	f8 7f       	andi	r31, 0xF8	; 248
    1226:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    122a:	f8 01       	movw	r30, r16
    122c:	81 a1       	ldd	r24, Z+33	; 0x21
    122e:	8f 3f       	cpi	r24, 0xFF	; 255
    1230:	09 f4       	brne	.+2      	; 0x1234 <xQueueReceive+0xb2>
    1232:	11 a2       	std	Z+33, r1	; 0x21
    1234:	f8 01       	movw	r30, r16
    1236:	82 a1       	ldd	r24, Z+34	; 0x22
    1238:	8f 3f       	cpi	r24, 0xFF	; 255
    123a:	09 f4       	brne	.+2      	; 0x123e <xQueueReceive+0xbc>
    123c:	12 a2       	std	Z+34, r1	; 0x22
    123e:	ff 91       	pop	r31
    1240:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1244:	be 01       	movw	r22, r28
    1246:	6a 5f       	subi	r22, 0xFA	; 250
    1248:	7f 4f       	sbci	r23, 0xFF	; 255
    124a:	ce 01       	movw	r24, r28
    124c:	01 96       	adiw	r24, 0x01	; 1
    124e:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <xTaskCheckForTimeOut>
    1252:	81 11       	cpse	r24, r1
    1254:	1d c0       	rjmp	.+58     	; 0x1290 <xQueueReceive+0x10e>
    1256:	c8 01       	movw	r24, r16
    1258:	0e 94 8c 06 	call	0xd18	; 0xd18 <prvIsQueueEmpty>
    125c:	88 23       	and	r24, r24
    125e:	91 f0       	breq	.+36     	; 0x1284 <xQueueReceive+0x102>
    1260:	4e 81       	ldd	r20, Y+6	; 0x06
    1262:	5f 81       	ldd	r21, Y+7	; 0x07
    1264:	68 85       	ldd	r22, Y+8	; 0x08
    1266:	79 85       	ldd	r23, Y+9	; 0x09
    1268:	c8 01       	movw	r24, r16
    126a:	43 96       	adiw	r24, 0x13	; 19
    126c:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <vTaskPlaceOnEventList>
    1270:	c8 01       	movw	r24, r16
    1272:	0e 94 12 07 	call	0xe24	; 0xe24 <prvUnlockQueue>
    1276:	0e 94 b8 0c 	call	0x1970	; 0x1970 <xTaskResumeAll>
    127a:	81 11       	cpse	r24, r1
    127c:	96 cf       	rjmp	.-212    	; 0x11aa <xQueueReceive+0x28>
    127e:	0e 94 a8 05 	call	0xb50	; 0xb50 <vPortYield>
    1282:	93 cf       	rjmp	.-218    	; 0x11aa <xQueueReceive+0x28>
    1284:	c8 01       	movw	r24, r16
    1286:	0e 94 12 07 	call	0xe24	; 0xe24 <prvUnlockQueue>
    128a:	0e 94 b8 0c 	call	0x1970	; 0x1970 <xTaskResumeAll>
    128e:	8d cf       	rjmp	.-230    	; 0x11aa <xQueueReceive+0x28>
    1290:	c8 01       	movw	r24, r16
    1292:	0e 94 12 07 	call	0xe24	; 0xe24 <prvUnlockQueue>
    1296:	0e 94 b8 0c 	call	0x1970	; 0x1970 <xTaskResumeAll>
    129a:	c8 01       	movw	r24, r16
    129c:	0e 94 8c 06 	call	0xd18	; 0xd18 <prvIsQueueEmpty>
    12a0:	88 23       	and	r24, r24
    12a2:	09 f4       	brne	.+2      	; 0x12a6 <xQueueReceive+0x124>
    12a4:	82 cf       	rjmp	.-252    	; 0x11aa <xQueueReceive+0x28>
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	29 96       	adiw	r28, 0x09	; 9
    12aa:	cd bf       	out	0x3d, r28	; 61
    12ac:	de bf       	out	0x3e, r29	; 62
    12ae:	df 91       	pop	r29
    12b0:	cf 91       	pop	r28
    12b2:	1f 91       	pop	r17
    12b4:	0f 91       	pop	r16
    12b6:	ff 90       	pop	r15
    12b8:	ef 90       	pop	r14
    12ba:	df 90       	pop	r13
    12bc:	cf 90       	pop	r12
    12be:	08 95       	ret

000012c0 <uxQueueMessagesWaiting>:
    12c0:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    12c4:	ff 93       	push	r31
    12c6:	f8 7f       	andi	r31, 0xF8	; 248
    12c8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    12cc:	fc 01       	movw	r30, r24
    12ce:	86 8d       	ldd	r24, Z+30	; 0x1e
    12d0:	ff 91       	pop	r31
    12d2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    12d6:	08 95       	ret

000012d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    12d8:	cf 93       	push	r28
    12da:	df 93       	push	r29
    12dc:	ec 01       	movw	r28, r24
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    12de:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    12e2:	ff 93       	push	r31
    12e4:	f8 7f       	andi	r31, 0xF8	; 248
    12e6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    12ea:	89 a1       	ldd	r24, Y+33	; 0x21
    12ec:	8f 3f       	cpi	r24, 0xFF	; 255
    12ee:	09 f4       	brne	.+2      	; 0x12f2 <vQueueWaitForMessageRestricted+0x1a>
    12f0:	19 a2       	std	Y+33, r1	; 0x21
    12f2:	8a a1       	ldd	r24, Y+34	; 0x22
    12f4:	8f 3f       	cpi	r24, 0xFF	; 255
    12f6:	09 f4       	brne	.+2      	; 0x12fa <vQueueWaitForMessageRestricted+0x22>
    12f8:	1a a2       	std	Y+34, r1	; 0x22
    12fa:	ff 91       	pop	r31
    12fc:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1300:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1302:	81 11       	cpse	r24, r1
    1304:	04 c0       	rjmp	.+8      	; 0x130e <vQueueWaitForMessageRestricted+0x36>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1306:	ce 01       	movw	r24, r28
    1308:	43 96       	adiw	r24, 0x13	; 19
    130a:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    130e:	ce 01       	movw	r24, r28
    1310:	0e 94 12 07 	call	0xe24	; 0xe24 <prvUnlockQueue>
	}
    1314:	df 91       	pop	r29
    1316:	cf 91       	pop	r28
    1318:	08 95       	ret

0000131a <prvResetNextTaskUnblockTime>:
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;

		return xReturn;
	}
    131a:	e0 91 3c 2c 	lds	r30, 0x2C3C	; 0x802c3c <pxDelayedTaskList>
    131e:	f0 91 3d 2c 	lds	r31, 0x2C3D	; 0x802c3d <pxDelayedTaskList+0x1>
    1322:	80 81       	ld	r24, Z
    1324:	81 11       	cpse	r24, r1
    1326:	0c c0       	rjmp	.+24     	; 0x1340 <prvResetNextTaskUnblockTime+0x26>
    1328:	8f ef       	ldi	r24, 0xFF	; 255
    132a:	9f ef       	ldi	r25, 0xFF	; 255
    132c:	dc 01       	movw	r26, r24
    132e:	80 93 15 2c 	sts	0x2C15, r24	; 0x802c15 <xNextTaskUnblockTime>
    1332:	90 93 16 2c 	sts	0x2C16, r25	; 0x802c16 <xNextTaskUnblockTime+0x1>
    1336:	a0 93 17 2c 	sts	0x2C17, r26	; 0x802c17 <xNextTaskUnblockTime+0x2>
    133a:	b0 93 18 2c 	sts	0x2C18, r27	; 0x802c18 <xNextTaskUnblockTime+0x3>
    133e:	08 95       	ret
    1340:	e0 91 3c 2c 	lds	r30, 0x2C3C	; 0x802c3c <pxDelayedTaskList>
    1344:	f0 91 3d 2c 	lds	r31, 0x2C3D	; 0x802c3d <pxDelayedTaskList+0x1>
    1348:	07 80       	ldd	r0, Z+7	; 0x07
    134a:	f0 85       	ldd	r31, Z+8	; 0x08
    134c:	e0 2d       	mov	r30, r0
    134e:	00 84       	ldd	r0, Z+8	; 0x08
    1350:	f1 85       	ldd	r31, Z+9	; 0x09
    1352:	e0 2d       	mov	r30, r0
    1354:	82 81       	ldd	r24, Z+2	; 0x02
    1356:	93 81       	ldd	r25, Z+3	; 0x03
    1358:	a4 81       	ldd	r26, Z+4	; 0x04
    135a:	b5 81       	ldd	r27, Z+5	; 0x05
    135c:	80 93 15 2c 	sts	0x2C15, r24	; 0x802c15 <xNextTaskUnblockTime>
    1360:	90 93 16 2c 	sts	0x2C16, r25	; 0x802c16 <xNextTaskUnblockTime+0x1>
    1364:	a0 93 17 2c 	sts	0x2C17, r26	; 0x802c17 <xNextTaskUnblockTime+0x2>
    1368:	b0 93 18 2c 	sts	0x2C18, r27	; 0x802c18 <xNextTaskUnblockTime+0x3>
    136c:	08 95       	ret

0000136e <prvInitialiseNewTask>:
    136e:	2f 92       	push	r2
    1370:	3f 92       	push	r3
    1372:	4f 92       	push	r4
    1374:	5f 92       	push	r5
    1376:	6f 92       	push	r6
    1378:	7f 92       	push	r7
    137a:	8f 92       	push	r8
    137c:	9f 92       	push	r9
    137e:	af 92       	push	r10
    1380:	bf 92       	push	r11
    1382:	cf 92       	push	r12
    1384:	df 92       	push	r13
    1386:	ef 92       	push	r14
    1388:	0f 93       	push	r16
    138a:	1f 93       	push	r17
    138c:	cf 93       	push	r28
    138e:	df 93       	push	r29
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
    1394:	1c 01       	movw	r2, r24
    1396:	4b 01       	movw	r8, r22
    1398:	29 01       	movw	r4, r18
    139a:	3a 01       	movw	r6, r20
    139c:	a9 01       	movw	r20, r18
    139e:	65 ea       	ldi	r22, 0xA5	; 165
    13a0:	70 e0       	ldi	r23, 0x00	; 0
    13a2:	f5 01       	movw	r30, r10
    13a4:	83 8d       	ldd	r24, Z+27	; 0x1b
    13a6:	94 8d       	ldd	r25, Z+28	; 0x1c
    13a8:	0e 94 ae 1c 	call	0x395c	; 0x395c <memset>
    13ac:	f5 01       	movw	r30, r10
    13ae:	83 8d       	ldd	r24, Z+27	; 0x1b
    13b0:	94 8d       	ldd	r25, Z+28	; 0x1c
    13b2:	f1 e0       	ldi	r31, 0x01	; 1
    13b4:	4f 1a       	sub	r4, r31
    13b6:	51 08       	sbc	r5, r1
    13b8:	48 0e       	add	r4, r24
    13ba:	59 1e       	adc	r5, r25
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	0f c0       	rjmp	.+30     	; 0x13de <prvInitialiseNewTask+0x70>
    13c0:	82 2f       	mov	r24, r18
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	f4 01       	movw	r30, r8
    13c6:	e8 0f       	add	r30, r24
    13c8:	f9 1f       	adc	r31, r25
    13ca:	30 81       	ld	r19, Z
    13cc:	d5 01       	movw	r26, r10
    13ce:	a8 0f       	add	r26, r24
    13d0:	b9 1f       	adc	r27, r25
    13d2:	5d 96       	adiw	r26, 0x1d	; 29
    13d4:	3c 93       	st	X, r19
    13d6:	80 81       	ld	r24, Z
    13d8:	88 23       	and	r24, r24
    13da:	19 f0       	breq	.+6      	; 0x13e2 <prvInitialiseNewTask+0x74>
    13dc:	2f 5f       	subi	r18, 0xFF	; 255
    13de:	28 30       	cpi	r18, 0x08	; 8
    13e0:	78 f3       	brcs	.-34     	; 0x13c0 <prvInitialiseNewTask+0x52>
    13e2:	f5 01       	movw	r30, r10
    13e4:	14 a2       	std	Z+36, r1	; 0x24
    13e6:	f3 e0       	ldi	r31, 0x03	; 3
    13e8:	fe 15       	cp	r31, r14
    13ea:	20 f4       	brcc	.+8      	; 0x13f4 <prvInitialiseNewTask+0x86>
    13ec:	0f 2e       	mov	r0, r31
    13ee:	f3 e0       	ldi	r31, 0x03	; 3
    13f0:	ef 2e       	mov	r14, r31
    13f2:	f0 2d       	mov	r31, r0
    13f4:	f5 01       	movw	r30, r10
    13f6:	e2 8e       	std	Z+26, r14	; 0x1a
    13f8:	c5 01       	movw	r24, r10
    13fa:	02 96       	adiw	r24, 0x02	; 2
    13fc:	0e 94 4e 04 	call	0x89c	; 0x89c <vListInitialiseItem>
    1400:	c5 01       	movw	r24, r10
    1402:	0e 96       	adiw	r24, 0x0e	; 14
    1404:	0e 94 4e 04 	call	0x89c	; 0x89c <vListInitialiseItem>
    1408:	f5 01       	movw	r30, r10
    140a:	a2 86       	std	Z+10, r10	; 0x0a
    140c:	b3 86       	std	Z+11, r11	; 0x0b
    140e:	84 e0       	ldi	r24, 0x04	; 4
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	a0 e0       	ldi	r26, 0x00	; 0
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	8e 19       	sub	r24, r14
    1418:	91 09       	sbc	r25, r1
    141a:	a1 09       	sbc	r26, r1
    141c:	b1 09       	sbc	r27, r1
    141e:	86 87       	std	Z+14, r24	; 0x0e
    1420:	97 87       	std	Z+15, r25	; 0x0f
    1422:	a0 8b       	std	Z+16, r26	; 0x10
    1424:	b1 8b       	std	Z+17, r27	; 0x11
    1426:	a6 8a       	std	Z+22, r10	; 0x16
    1428:	b7 8a       	std	Z+23, r11	; 0x17
    142a:	17 a2       	std	Z+39, r1	; 0x27
    142c:	10 a6       	std	Z+40, r1	; 0x28
    142e:	11 a6       	std	Z+41, r1	; 0x29
    1430:	12 a6       	std	Z+42, r1	; 0x2a
    1432:	13 a6       	std	Z+43, r1	; 0x2b
    1434:	a8 01       	movw	r20, r16
    1436:	b1 01       	movw	r22, r2
    1438:	c2 01       	movw	r24, r4
    143a:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <pxPortInitialiseStack>
    143e:	f5 01       	movw	r30, r10
    1440:	80 83       	st	Z, r24
    1442:	91 83       	std	Z+1, r25	; 0x01
    1444:	c1 14       	cp	r12, r1
    1446:	d1 04       	cpc	r13, r1
    1448:	19 f0       	breq	.+6      	; 0x1450 <prvInitialiseNewTask+0xe2>
    144a:	f6 01       	movw	r30, r12
    144c:	a0 82       	st	Z, r10
    144e:	b1 82       	std	Z+1, r11	; 0x01
    1450:	df 91       	pop	r29
    1452:	cf 91       	pop	r28
    1454:	1f 91       	pop	r17
    1456:	0f 91       	pop	r16
    1458:	ef 90       	pop	r14
    145a:	df 90       	pop	r13
    145c:	cf 90       	pop	r12
    145e:	bf 90       	pop	r11
    1460:	af 90       	pop	r10
    1462:	9f 90       	pop	r9
    1464:	8f 90       	pop	r8
    1466:	7f 90       	pop	r7
    1468:	6f 90       	pop	r6
    146a:	5f 90       	pop	r5
    146c:	4f 90       	pop	r4
    146e:	3f 90       	pop	r3
    1470:	2f 90       	pop	r2
    1472:	08 95       	ret

00001474 <prvInitialiseTaskLists>:
    1474:	cf 93       	push	r28
    1476:	c0 e0       	ldi	r28, 0x00	; 0
    1478:	09 c0       	rjmp	.+18     	; 0x148c <prvInitialiseTaskLists+0x18>
    147a:	2b e0       	ldi	r18, 0x0B	; 11
    147c:	c2 9f       	mul	r28, r18
    147e:	c0 01       	movw	r24, r0
    1480:	11 24       	eor	r1, r1
    1482:	8c 5a       	subi	r24, 0xAC	; 172
    1484:	93 4d       	sbci	r25, 0xD3	; 211
    1486:	0e 94 3d 04 	call	0x87a	; 0x87a <vListInitialise>
    148a:	cf 5f       	subi	r28, 0xFF	; 255
    148c:	c4 30       	cpi	r28, 0x04	; 4
    148e:	a8 f3       	brcs	.-22     	; 0x147a <prvInitialiseTaskLists+0x6>
    1490:	89 e4       	ldi	r24, 0x49	; 73
    1492:	9c e2       	ldi	r25, 0x2C	; 44
    1494:	0e 94 3d 04 	call	0x87a	; 0x87a <vListInitialise>
    1498:	8e e3       	ldi	r24, 0x3E	; 62
    149a:	9c e2       	ldi	r25, 0x2C	; 44
    149c:	0e 94 3d 04 	call	0x87a	; 0x87a <vListInitialise>
    14a0:	8f e2       	ldi	r24, 0x2F	; 47
    14a2:	9c e2       	ldi	r25, 0x2C	; 44
    14a4:	0e 94 3d 04 	call	0x87a	; 0x87a <vListInitialise>
    14a8:	84 e2       	ldi	r24, 0x24	; 36
    14aa:	9c e2       	ldi	r25, 0x2C	; 44
    14ac:	0e 94 3d 04 	call	0x87a	; 0x87a <vListInitialise>
    14b0:	89 e4       	ldi	r24, 0x49	; 73
    14b2:	9c e2       	ldi	r25, 0x2C	; 44
    14b4:	80 93 3c 2c 	sts	0x2C3C, r24	; 0x802c3c <pxDelayedTaskList>
    14b8:	90 93 3d 2c 	sts	0x2C3D, r25	; 0x802c3d <pxDelayedTaskList+0x1>
    14bc:	8e e3       	ldi	r24, 0x3E	; 62
    14be:	9c e2       	ldi	r25, 0x2C	; 44
    14c0:	80 93 3a 2c 	sts	0x2C3A, r24	; 0x802c3a <pxOverflowDelayedTaskList>
    14c4:	90 93 3b 2c 	sts	0x2C3B, r25	; 0x802c3b <pxOverflowDelayedTaskList+0x1>
    14c8:	cf 91       	pop	r28
    14ca:	08 95       	ret

000014cc <prvAddNewTaskToReadyList>:
    14cc:	cf 93       	push	r28
    14ce:	df 93       	push	r29
    14d0:	ec 01       	movw	r28, r24
    14d2:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    14d6:	ff 93       	push	r31
    14d8:	f8 7f       	andi	r31, 0xF8	; 248
    14da:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    14de:	80 91 23 2c 	lds	r24, 0x2C23	; 0x802c23 <uxCurrentNumberOfTasks>
    14e2:	8f 5f       	subi	r24, 0xFF	; 255
    14e4:	80 93 23 2c 	sts	0x2C23, r24	; 0x802c23 <uxCurrentNumberOfTasks>
    14e8:	80 91 80 2c 	lds	r24, 0x2C80	; 0x802c80 <pxCurrentTCB>
    14ec:	90 91 81 2c 	lds	r25, 0x2C81	; 0x802c81 <pxCurrentTCB+0x1>
    14f0:	89 2b       	or	r24, r25
    14f2:	59 f4       	brne	.+22     	; 0x150a <prvAddNewTaskToReadyList+0x3e>
    14f4:	c0 93 80 2c 	sts	0x2C80, r28	; 0x802c80 <pxCurrentTCB>
    14f8:	d0 93 81 2c 	sts	0x2C81, r29	; 0x802c81 <pxCurrentTCB+0x1>
    14fc:	80 91 23 2c 	lds	r24, 0x2C23	; 0x802c23 <uxCurrentNumberOfTasks>
    1500:	81 30       	cpi	r24, 0x01	; 1
    1502:	99 f4       	brne	.+38     	; 0x152a <prvAddNewTaskToReadyList+0x5e>
    1504:	0e 94 3a 0a 	call	0x1474	; 0x1474 <prvInitialiseTaskLists>
    1508:	10 c0       	rjmp	.+32     	; 0x152a <prvAddNewTaskToReadyList+0x5e>
    150a:	80 91 1d 2c 	lds	r24, 0x2C1D	; 0x802c1d <xSchedulerRunning>
    150e:	81 11       	cpse	r24, r1
    1510:	0c c0       	rjmp	.+24     	; 0x152a <prvAddNewTaskToReadyList+0x5e>
    1512:	e0 91 80 2c 	lds	r30, 0x2C80	; 0x802c80 <pxCurrentTCB>
    1516:	f0 91 81 2c 	lds	r31, 0x2C81	; 0x802c81 <pxCurrentTCB+0x1>
    151a:	92 8d       	ldd	r25, Z+26	; 0x1a
    151c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    151e:	89 17       	cp	r24, r25
    1520:	20 f0       	brcs	.+8      	; 0x152a <prvAddNewTaskToReadyList+0x5e>
    1522:	c0 93 80 2c 	sts	0x2C80, r28	; 0x802c80 <pxCurrentTCB>
    1526:	d0 93 81 2c 	sts	0x2C81, r29	; 0x802c81 <pxCurrentTCB+0x1>
    152a:	80 91 19 2c 	lds	r24, 0x2C19	; 0x802c19 <uxTaskNumber>
    152e:	8f 5f       	subi	r24, 0xFF	; 255
    1530:	80 93 19 2c 	sts	0x2C19, r24	; 0x802c19 <uxTaskNumber>
    1534:	8d a3       	std	Y+37, r24	; 0x25
    1536:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1538:	90 91 1e 2c 	lds	r25, 0x2C1E	; 0x802c1e <uxTopReadyPriority>
    153c:	98 17       	cp	r25, r24
    153e:	10 f4       	brcc	.+4      	; 0x1544 <prvAddNewTaskToReadyList+0x78>
    1540:	80 93 1e 2c 	sts	0x2C1E, r24	; 0x802c1e <uxTopReadyPriority>
    1544:	2b e0       	ldi	r18, 0x0B	; 11
    1546:	82 9f       	mul	r24, r18
    1548:	c0 01       	movw	r24, r0
    154a:	11 24       	eor	r1, r1
    154c:	be 01       	movw	r22, r28
    154e:	6e 5f       	subi	r22, 0xFE	; 254
    1550:	7f 4f       	sbci	r23, 0xFF	; 255
    1552:	8c 5a       	subi	r24, 0xAC	; 172
    1554:	93 4d       	sbci	r25, 0xD3	; 211
    1556:	0e 94 52 04 	call	0x8a4	; 0x8a4 <vListInsertEnd>
    155a:	ff 91       	pop	r31
    155c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1560:	80 91 1d 2c 	lds	r24, 0x2C1D	; 0x802c1d <xSchedulerRunning>
    1564:	88 23       	and	r24, r24
    1566:	51 f0       	breq	.+20     	; 0x157c <prvAddNewTaskToReadyList+0xb0>
    1568:	e0 91 80 2c 	lds	r30, 0x2C80	; 0x802c80 <pxCurrentTCB>
    156c:	f0 91 81 2c 	lds	r31, 0x2C81	; 0x802c81 <pxCurrentTCB+0x1>
    1570:	92 8d       	ldd	r25, Z+26	; 0x1a
    1572:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1574:	98 17       	cp	r25, r24
    1576:	10 f4       	brcc	.+4      	; 0x157c <prvAddNewTaskToReadyList+0xb0>
    1578:	0e 94 a8 05 	call	0xb50	; 0xb50 <vPortYield>
    157c:	df 91       	pop	r29
    157e:	cf 91       	pop	r28
    1580:	08 95       	ret

00001582 <prvAddCurrentTaskToDelayedList>:
    1582:	8f 92       	push	r8
    1584:	9f 92       	push	r9
    1586:	af 92       	push	r10
    1588:	bf 92       	push	r11
    158a:	cf 92       	push	r12
    158c:	df 92       	push	r13
    158e:	ef 92       	push	r14
    1590:	ff 92       	push	r15
    1592:	cf 93       	push	r28
    1594:	6b 01       	movw	r12, r22
    1596:	7c 01       	movw	r14, r24
    1598:	c4 2f       	mov	r28, r20
    159a:	80 90 1f 2c 	lds	r8, 0x2C1F	; 0x802c1f <xTickCount>
    159e:	90 90 20 2c 	lds	r9, 0x2C20	; 0x802c20 <xTickCount+0x1>
    15a2:	a0 90 21 2c 	lds	r10, 0x2C21	; 0x802c21 <xTickCount+0x2>
    15a6:	b0 90 22 2c 	lds	r11, 0x2C22	; 0x802c22 <xTickCount+0x3>
    15aa:	80 91 80 2c 	lds	r24, 0x2C80	; 0x802c80 <pxCurrentTCB>
    15ae:	90 91 81 2c 	lds	r25, 0x2C81	; 0x802c81 <pxCurrentTCB+0x1>
    15b2:	02 96       	adiw	r24, 0x02	; 2
    15b4:	0e 94 b0 04 	call	0x960	; 0x960 <uxListRemove>
    15b8:	8f ef       	ldi	r24, 0xFF	; 255
    15ba:	c8 16       	cp	r12, r24
    15bc:	d8 06       	cpc	r13, r24
    15be:	e8 06       	cpc	r14, r24
    15c0:	f8 06       	cpc	r15, r24
    15c2:	69 f4       	brne	.+26     	; 0x15de <prvAddCurrentTaskToDelayedList+0x5c>
    15c4:	cc 23       	and	r28, r28
    15c6:	59 f0       	breq	.+22     	; 0x15de <prvAddCurrentTaskToDelayedList+0x5c>
    15c8:	60 91 80 2c 	lds	r22, 0x2C80	; 0x802c80 <pxCurrentTCB>
    15cc:	70 91 81 2c 	lds	r23, 0x2C81	; 0x802c81 <pxCurrentTCB+0x1>
    15d0:	6e 5f       	subi	r22, 0xFE	; 254
    15d2:	7f 4f       	sbci	r23, 0xFF	; 255
    15d4:	84 e2       	ldi	r24, 0x24	; 36
    15d6:	9c e2       	ldi	r25, 0x2C	; 44
    15d8:	0e 94 52 04 	call	0x8a4	; 0x8a4 <vListInsertEnd>
    15dc:	3f c0       	rjmp	.+126    	; 0x165c <prvAddCurrentTaskToDelayedList+0xda>
    15de:	c8 0c       	add	r12, r8
    15e0:	d9 1c       	adc	r13, r9
    15e2:	ea 1c       	adc	r14, r10
    15e4:	fb 1c       	adc	r15, r11
    15e6:	e0 91 80 2c 	lds	r30, 0x2C80	; 0x802c80 <pxCurrentTCB>
    15ea:	f0 91 81 2c 	lds	r31, 0x2C81	; 0x802c81 <pxCurrentTCB+0x1>
    15ee:	c2 82       	std	Z+2, r12	; 0x02
    15f0:	d3 82       	std	Z+3, r13	; 0x03
    15f2:	e4 82       	std	Z+4, r14	; 0x04
    15f4:	f5 82       	std	Z+5, r15	; 0x05
    15f6:	c8 14       	cp	r12, r8
    15f8:	d9 04       	cpc	r13, r9
    15fa:	ea 04       	cpc	r14, r10
    15fc:	fb 04       	cpc	r15, r11
    15fe:	68 f4       	brcc	.+26     	; 0x161a <prvAddCurrentTaskToDelayedList+0x98>
    1600:	60 91 80 2c 	lds	r22, 0x2C80	; 0x802c80 <pxCurrentTCB>
    1604:	70 91 81 2c 	lds	r23, 0x2C81	; 0x802c81 <pxCurrentTCB+0x1>
    1608:	80 91 3a 2c 	lds	r24, 0x2C3A	; 0x802c3a <pxOverflowDelayedTaskList>
    160c:	90 91 3b 2c 	lds	r25, 0x2C3B	; 0x802c3b <pxOverflowDelayedTaskList+0x1>
    1610:	6e 5f       	subi	r22, 0xFE	; 254
    1612:	7f 4f       	sbci	r23, 0xFF	; 255
    1614:	0e 94 73 04 	call	0x8e6	; 0x8e6 <vListInsert>
    1618:	21 c0       	rjmp	.+66     	; 0x165c <prvAddCurrentTaskToDelayedList+0xda>
    161a:	60 91 80 2c 	lds	r22, 0x2C80	; 0x802c80 <pxCurrentTCB>
    161e:	70 91 81 2c 	lds	r23, 0x2C81	; 0x802c81 <pxCurrentTCB+0x1>
    1622:	80 91 3c 2c 	lds	r24, 0x2C3C	; 0x802c3c <pxDelayedTaskList>
    1626:	90 91 3d 2c 	lds	r25, 0x2C3D	; 0x802c3d <pxDelayedTaskList+0x1>
    162a:	6e 5f       	subi	r22, 0xFE	; 254
    162c:	7f 4f       	sbci	r23, 0xFF	; 255
    162e:	0e 94 73 04 	call	0x8e6	; 0x8e6 <vListInsert>
    1632:	80 91 15 2c 	lds	r24, 0x2C15	; 0x802c15 <xNextTaskUnblockTime>
    1636:	90 91 16 2c 	lds	r25, 0x2C16	; 0x802c16 <xNextTaskUnblockTime+0x1>
    163a:	a0 91 17 2c 	lds	r26, 0x2C17	; 0x802c17 <xNextTaskUnblockTime+0x2>
    163e:	b0 91 18 2c 	lds	r27, 0x2C18	; 0x802c18 <xNextTaskUnblockTime+0x3>
    1642:	c8 16       	cp	r12, r24
    1644:	d9 06       	cpc	r13, r25
    1646:	ea 06       	cpc	r14, r26
    1648:	fb 06       	cpc	r15, r27
    164a:	40 f4       	brcc	.+16     	; 0x165c <prvAddCurrentTaskToDelayedList+0xda>
    164c:	c0 92 15 2c 	sts	0x2C15, r12	; 0x802c15 <xNextTaskUnblockTime>
    1650:	d0 92 16 2c 	sts	0x2C16, r13	; 0x802c16 <xNextTaskUnblockTime+0x1>
    1654:	e0 92 17 2c 	sts	0x2C17, r14	; 0x802c17 <xNextTaskUnblockTime+0x2>
    1658:	f0 92 18 2c 	sts	0x2C18, r15	; 0x802c18 <xNextTaskUnblockTime+0x3>
    165c:	cf 91       	pop	r28
    165e:	ff 90       	pop	r15
    1660:	ef 90       	pop	r14
    1662:	df 90       	pop	r13
    1664:	cf 90       	pop	r12
    1666:	bf 90       	pop	r11
    1668:	af 90       	pop	r10
    166a:	9f 90       	pop	r9
    166c:	8f 90       	pop	r8
    166e:	08 95       	ret

00001670 <prvIdleTask>:
    1670:	80 91 54 2c 	lds	r24, 0x2C54	; 0x802c54 <pxReadyTasksLists>
    1674:	82 30       	cpi	r24, 0x02	; 2
    1676:	10 f0       	brcs	.+4      	; 0x167c <prvIdleTask+0xc>
    1678:	0e 94 a8 05 	call	0xb50	; 0xb50 <vPortYield>
    167c:	0e 94 5d 13 	call	0x26ba	; 0x26ba <vApplicationIdleHook>
    1680:	f7 cf       	rjmp	.-18     	; 0x1670 <prvIdleTask>

00001682 <xTaskCreate>:
    1682:	2f 92       	push	r2
    1684:	3f 92       	push	r3
    1686:	4f 92       	push	r4
    1688:	5f 92       	push	r5
    168a:	6f 92       	push	r6
    168c:	7f 92       	push	r7
    168e:	8f 92       	push	r8
    1690:	9f 92       	push	r9
    1692:	af 92       	push	r10
    1694:	bf 92       	push	r11
    1696:	cf 92       	push	r12
    1698:	df 92       	push	r13
    169a:	ef 92       	push	r14
    169c:	ff 92       	push	r15
    169e:	0f 93       	push	r16
    16a0:	1f 93       	push	r17
    16a2:	cf 93       	push	r28
    16a4:	df 93       	push	r29
    16a6:	3c 01       	movw	r6, r24
    16a8:	1b 01       	movw	r2, r22
    16aa:	5a 01       	movw	r10, r20
    16ac:	29 01       	movw	r4, r18
    16ae:	ca 01       	movw	r24, r20
    16b0:	0e 94 16 04 	call	0x82c	; 0x82c <pvPortMalloc>
    16b4:	6c 01       	movw	r12, r24
    16b6:	89 2b       	or	r24, r25
    16b8:	71 f0       	breq	.+28     	; 0x16d6 <xTaskCreate+0x54>
    16ba:	8c e2       	ldi	r24, 0x2C	; 44
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	0e 94 16 04 	call	0x82c	; 0x82c <pvPortMalloc>
    16c2:	ec 01       	movw	r28, r24
    16c4:	89 2b       	or	r24, r25
    16c6:	19 f0       	breq	.+6      	; 0x16ce <xTaskCreate+0x4c>
    16c8:	cb 8e       	std	Y+27, r12	; 0x1b
    16ca:	dc 8e       	std	Y+28, r13	; 0x1c
    16cc:	06 c0       	rjmp	.+12     	; 0x16da <xTaskCreate+0x58>
    16ce:	c6 01       	movw	r24, r12
    16d0:	0e 94 3c 04 	call	0x878	; 0x878 <vPortFree>
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <xTaskCreate+0x58>
    16d6:	c0 e0       	ldi	r28, 0x00	; 0
    16d8:	d0 e0       	ldi	r29, 0x00	; 0
    16da:	20 97       	sbiw	r28, 0x00	; 0
    16dc:	91 f0       	breq	.+36     	; 0x1702 <xTaskCreate+0x80>
    16de:	95 01       	movw	r18, r10
    16e0:	40 e0       	ldi	r20, 0x00	; 0
    16e2:	50 e0       	ldi	r21, 0x00	; 0
    16e4:	81 2c       	mov	r8, r1
    16e6:	91 2c       	mov	r9, r1
    16e8:	5e 01       	movw	r10, r28
    16ea:	67 01       	movw	r12, r14
    16ec:	e0 2e       	mov	r14, r16
    16ee:	82 01       	movw	r16, r4
    16f0:	b1 01       	movw	r22, r2
    16f2:	c3 01       	movw	r24, r6
    16f4:	0e 94 b7 09 	call	0x136e	; 0x136e <prvInitialiseNewTask>
    16f8:	ce 01       	movw	r24, r28
    16fa:	0e 94 66 0a 	call	0x14cc	; 0x14cc <prvAddNewTaskToReadyList>
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	01 c0       	rjmp	.+2      	; 0x1704 <xTaskCreate+0x82>
    1702:	8f ef       	ldi	r24, 0xFF	; 255
    1704:	df 91       	pop	r29
    1706:	cf 91       	pop	r28
    1708:	1f 91       	pop	r17
    170a:	0f 91       	pop	r16
    170c:	ff 90       	pop	r15
    170e:	ef 90       	pop	r14
    1710:	df 90       	pop	r13
    1712:	cf 90       	pop	r12
    1714:	bf 90       	pop	r11
    1716:	af 90       	pop	r10
    1718:	9f 90       	pop	r9
    171a:	8f 90       	pop	r8
    171c:	7f 90       	pop	r7
    171e:	6f 90       	pop	r6
    1720:	5f 90       	pop	r5
    1722:	4f 90       	pop	r4
    1724:	3f 90       	pop	r3
    1726:	2f 90       	pop	r2
    1728:	08 95       	ret

0000172a <vTaskStartScheduler>:
    172a:	ef 92       	push	r14
    172c:	ff 92       	push	r15
    172e:	0f 93       	push	r16
    1730:	0f 2e       	mov	r0, r31
    1732:	f3 e1       	ldi	r31, 0x13	; 19
    1734:	ef 2e       	mov	r14, r31
    1736:	fc e2       	ldi	r31, 0x2C	; 44
    1738:	ff 2e       	mov	r15, r31
    173a:	f0 2d       	mov	r31, r0
    173c:	00 e0       	ldi	r16, 0x00	; 0
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	48 ec       	ldi	r20, 0xC8	; 200
    1744:	50 e0       	ldi	r21, 0x00	; 0
    1746:	64 e0       	ldi	r22, 0x04	; 4
    1748:	70 e2       	ldi	r23, 0x20	; 32
    174a:	88 e3       	ldi	r24, 0x38	; 56
    174c:	9b e0       	ldi	r25, 0x0B	; 11
    174e:	0e 94 41 0b 	call	0x1682	; 0x1682 <xTaskCreate>
    1752:	81 30       	cpi	r24, 0x01	; 1
    1754:	11 f4       	brne	.+4      	; 0x175a <vTaskStartScheduler+0x30>
    1756:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <xTimerCreateTimerTask>
    175a:	81 30       	cpi	r24, 0x01	; 1
    175c:	e9 f4       	brne	.+58     	; 0x1798 <vTaskStartScheduler+0x6e>
    175e:	e0 ea       	ldi	r30, 0xA0	; 160
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	82 81       	ldd	r24, Z+2	; 0x02
    1764:	88 7f       	andi	r24, 0xF8	; 248
    1766:	82 83       	std	Z+2, r24	; 0x02
    1768:	8f ef       	ldi	r24, 0xFF	; 255
    176a:	9f ef       	ldi	r25, 0xFF	; 255
    176c:	dc 01       	movw	r26, r24
    176e:	80 93 15 2c 	sts	0x2C15, r24	; 0x802c15 <xNextTaskUnblockTime>
    1772:	90 93 16 2c 	sts	0x2C16, r25	; 0x802c16 <xNextTaskUnblockTime+0x1>
    1776:	a0 93 17 2c 	sts	0x2C17, r26	; 0x802c17 <xNextTaskUnblockTime+0x2>
    177a:	b0 93 18 2c 	sts	0x2C18, r27	; 0x802c18 <xNextTaskUnblockTime+0x3>
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	80 93 1d 2c 	sts	0x2C1D, r24	; 0x802c1d <xSchedulerRunning>
    1784:	10 92 1f 2c 	sts	0x2C1F, r1	; 0x802c1f <xTickCount>
    1788:	10 92 20 2c 	sts	0x2C20, r1	; 0x802c20 <xTickCount+0x1>
    178c:	10 92 21 2c 	sts	0x2C21, r1	; 0x802c21 <xTickCount+0x2>
    1790:	10 92 22 2c 	sts	0x2C22, r1	; 0x802c22 <xTickCount+0x3>
    1794:	0e 94 76 05 	call	0xaec	; 0xaec <xPortStartScheduler>
    1798:	0f 91       	pop	r16
    179a:	ff 90       	pop	r15
    179c:	ef 90       	pop	r14
    179e:	08 95       	ret

000017a0 <vTaskSuspendAll>:
    17a0:	80 91 12 2c 	lds	r24, 0x2C12	; 0x802c12 <uxSchedulerSuspended>
    17a4:	8f 5f       	subi	r24, 0xFF	; 255
    17a6:	80 93 12 2c 	sts	0x2C12, r24	; 0x802c12 <uxSchedulerSuspended>
    17aa:	08 95       	ret

000017ac <xTaskGetTickCount>:
    17ac:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    17b0:	ff 93       	push	r31
    17b2:	f8 7f       	andi	r31, 0xF8	; 248
    17b4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    17b8:	60 91 1f 2c 	lds	r22, 0x2C1F	; 0x802c1f <xTickCount>
    17bc:	70 91 20 2c 	lds	r23, 0x2C20	; 0x802c20 <xTickCount+0x1>
    17c0:	80 91 21 2c 	lds	r24, 0x2C21	; 0x802c21 <xTickCount+0x2>
    17c4:	90 91 22 2c 	lds	r25, 0x2C22	; 0x802c22 <xTickCount+0x3>
    17c8:	ff 91       	pop	r31
    17ca:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    17ce:	08 95       	ret

000017d0 <xTaskIncrementTick>:
    17d0:	bf 92       	push	r11
    17d2:	cf 92       	push	r12
    17d4:	df 92       	push	r13
    17d6:	ef 92       	push	r14
    17d8:	ff 92       	push	r15
    17da:	0f 93       	push	r16
    17dc:	1f 93       	push	r17
    17de:	cf 93       	push	r28
    17e0:	df 93       	push	r29
    17e2:	80 91 12 2c 	lds	r24, 0x2C12	; 0x802c12 <uxSchedulerSuspended>
    17e6:	81 11       	cpse	r24, r1
    17e8:	a9 c0       	rjmp	.+338    	; 0x193c <xTaskIncrementTick+0x16c>
    17ea:	c0 90 1f 2c 	lds	r12, 0x2C1F	; 0x802c1f <xTickCount>
    17ee:	d0 90 20 2c 	lds	r13, 0x2C20	; 0x802c20 <xTickCount+0x1>
    17f2:	e0 90 21 2c 	lds	r14, 0x2C21	; 0x802c21 <xTickCount+0x2>
    17f6:	f0 90 22 2c 	lds	r15, 0x2C22	; 0x802c22 <xTickCount+0x3>
    17fa:	2f ef       	ldi	r18, 0xFF	; 255
    17fc:	c2 1a       	sub	r12, r18
    17fe:	d2 0a       	sbc	r13, r18
    1800:	e2 0a       	sbc	r14, r18
    1802:	f2 0a       	sbc	r15, r18
    1804:	c0 92 1f 2c 	sts	0x2C1F, r12	; 0x802c1f <xTickCount>
    1808:	d0 92 20 2c 	sts	0x2C20, r13	; 0x802c20 <xTickCount+0x1>
    180c:	e0 92 21 2c 	sts	0x2C21, r14	; 0x802c21 <xTickCount+0x2>
    1810:	f0 92 22 2c 	sts	0x2C22, r15	; 0x802c22 <xTickCount+0x3>
    1814:	c1 14       	cp	r12, r1
    1816:	d1 04       	cpc	r13, r1
    1818:	e1 04       	cpc	r14, r1
    181a:	f1 04       	cpc	r15, r1
    181c:	b9 f4       	brne	.+46     	; 0x184c <xTaskIncrementTick+0x7c>
    181e:	80 91 3c 2c 	lds	r24, 0x2C3C	; 0x802c3c <pxDelayedTaskList>
    1822:	90 91 3d 2c 	lds	r25, 0x2C3D	; 0x802c3d <pxDelayedTaskList+0x1>
    1826:	20 91 3a 2c 	lds	r18, 0x2C3A	; 0x802c3a <pxOverflowDelayedTaskList>
    182a:	30 91 3b 2c 	lds	r19, 0x2C3B	; 0x802c3b <pxOverflowDelayedTaskList+0x1>
    182e:	20 93 3c 2c 	sts	0x2C3C, r18	; 0x802c3c <pxDelayedTaskList>
    1832:	30 93 3d 2c 	sts	0x2C3D, r19	; 0x802c3d <pxDelayedTaskList+0x1>
    1836:	80 93 3a 2c 	sts	0x2C3A, r24	; 0x802c3a <pxOverflowDelayedTaskList>
    183a:	90 93 3b 2c 	sts	0x2C3B, r25	; 0x802c3b <pxOverflowDelayedTaskList+0x1>
    183e:	80 91 1a 2c 	lds	r24, 0x2C1A	; 0x802c1a <xNumOfOverflows>
    1842:	8f 5f       	subi	r24, 0xFF	; 255
    1844:	80 93 1a 2c 	sts	0x2C1A, r24	; 0x802c1a <xNumOfOverflows>
    1848:	0e 94 8d 09 	call	0x131a	; 0x131a <prvResetNextTaskUnblockTime>
    184c:	80 91 15 2c 	lds	r24, 0x2C15	; 0x802c15 <xNextTaskUnblockTime>
    1850:	90 91 16 2c 	lds	r25, 0x2C16	; 0x802c16 <xNextTaskUnblockTime+0x1>
    1854:	a0 91 17 2c 	lds	r26, 0x2C17	; 0x802c17 <xNextTaskUnblockTime+0x2>
    1858:	b0 91 18 2c 	lds	r27, 0x2C18	; 0x802c18 <xNextTaskUnblockTime+0x3>
    185c:	c8 16       	cp	r12, r24
    185e:	d9 06       	cpc	r13, r25
    1860:	ea 06       	cpc	r14, r26
    1862:	fb 06       	cpc	r15, r27
    1864:	28 f4       	brcc	.+10     	; 0x1870 <xTaskIncrementTick+0xa0>
    1866:	b1 2c       	mov	r11, r1
    1868:	5a c0       	rjmp	.+180    	; 0x191e <xTaskIncrementTick+0x14e>
    186a:	bb 24       	eor	r11, r11
    186c:	b3 94       	inc	r11
    186e:	01 c0       	rjmp	.+2      	; 0x1872 <xTaskIncrementTick+0xa2>
    1870:	b1 2c       	mov	r11, r1
    1872:	e0 91 3c 2c 	lds	r30, 0x2C3C	; 0x802c3c <pxDelayedTaskList>
    1876:	f0 91 3d 2c 	lds	r31, 0x2C3D	; 0x802c3d <pxDelayedTaskList+0x1>
    187a:	80 81       	ld	r24, Z
    187c:	81 11       	cpse	r24, r1
    187e:	0c c0       	rjmp	.+24     	; 0x1898 <xTaskIncrementTick+0xc8>
    1880:	8f ef       	ldi	r24, 0xFF	; 255
    1882:	9f ef       	ldi	r25, 0xFF	; 255
    1884:	dc 01       	movw	r26, r24
    1886:	80 93 15 2c 	sts	0x2C15, r24	; 0x802c15 <xNextTaskUnblockTime>
    188a:	90 93 16 2c 	sts	0x2C16, r25	; 0x802c16 <xNextTaskUnblockTime+0x1>
    188e:	a0 93 17 2c 	sts	0x2C17, r26	; 0x802c17 <xNextTaskUnblockTime+0x2>
    1892:	b0 93 18 2c 	sts	0x2C18, r27	; 0x802c18 <xNextTaskUnblockTime+0x3>
    1896:	43 c0       	rjmp	.+134    	; 0x191e <xTaskIncrementTick+0x14e>
    1898:	e0 91 3c 2c 	lds	r30, 0x2C3C	; 0x802c3c <pxDelayedTaskList>
    189c:	f0 91 3d 2c 	lds	r31, 0x2C3D	; 0x802c3d <pxDelayedTaskList+0x1>
    18a0:	07 80       	ldd	r0, Z+7	; 0x07
    18a2:	f0 85       	ldd	r31, Z+8	; 0x08
    18a4:	e0 2d       	mov	r30, r0
    18a6:	c0 85       	ldd	r28, Z+8	; 0x08
    18a8:	d1 85       	ldd	r29, Z+9	; 0x09
    18aa:	8a 81       	ldd	r24, Y+2	; 0x02
    18ac:	9b 81       	ldd	r25, Y+3	; 0x03
    18ae:	ac 81       	ldd	r26, Y+4	; 0x04
    18b0:	bd 81       	ldd	r27, Y+5	; 0x05
    18b2:	c8 16       	cp	r12, r24
    18b4:	d9 06       	cpc	r13, r25
    18b6:	ea 06       	cpc	r14, r26
    18b8:	fb 06       	cpc	r15, r27
    18ba:	48 f4       	brcc	.+18     	; 0x18ce <xTaskIncrementTick+0xfe>
    18bc:	80 93 15 2c 	sts	0x2C15, r24	; 0x802c15 <xNextTaskUnblockTime>
    18c0:	90 93 16 2c 	sts	0x2C16, r25	; 0x802c16 <xNextTaskUnblockTime+0x1>
    18c4:	a0 93 17 2c 	sts	0x2C17, r26	; 0x802c17 <xNextTaskUnblockTime+0x2>
    18c8:	b0 93 18 2c 	sts	0x2C18, r27	; 0x802c18 <xNextTaskUnblockTime+0x3>
    18cc:	28 c0       	rjmp	.+80     	; 0x191e <xTaskIncrementTick+0x14e>
    18ce:	8e 01       	movw	r16, r28
    18d0:	0e 5f       	subi	r16, 0xFE	; 254
    18d2:	1f 4f       	sbci	r17, 0xFF	; 255
    18d4:	c8 01       	movw	r24, r16
    18d6:	0e 94 b0 04 	call	0x960	; 0x960 <uxListRemove>
    18da:	88 8d       	ldd	r24, Y+24	; 0x18
    18dc:	99 8d       	ldd	r25, Y+25	; 0x19
    18de:	89 2b       	or	r24, r25
    18e0:	21 f0       	breq	.+8      	; 0x18ea <xTaskIncrementTick+0x11a>
    18e2:	ce 01       	movw	r24, r28
    18e4:	0e 96       	adiw	r24, 0x0e	; 14
    18e6:	0e 94 b0 04 	call	0x960	; 0x960 <uxListRemove>
    18ea:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18ec:	90 91 1e 2c 	lds	r25, 0x2C1E	; 0x802c1e <uxTopReadyPriority>
    18f0:	98 17       	cp	r25, r24
    18f2:	10 f4       	brcc	.+4      	; 0x18f8 <xTaskIncrementTick+0x128>
    18f4:	80 93 1e 2c 	sts	0x2C1E, r24	; 0x802c1e <uxTopReadyPriority>
    18f8:	2b e0       	ldi	r18, 0x0B	; 11
    18fa:	82 9f       	mul	r24, r18
    18fc:	c0 01       	movw	r24, r0
    18fe:	11 24       	eor	r1, r1
    1900:	b8 01       	movw	r22, r16
    1902:	8c 5a       	subi	r24, 0xAC	; 172
    1904:	93 4d       	sbci	r25, 0xD3	; 211
    1906:	0e 94 52 04 	call	0x8a4	; 0x8a4 <vListInsertEnd>
    190a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    190c:	e0 91 80 2c 	lds	r30, 0x2C80	; 0x802c80 <pxCurrentTCB>
    1910:	f0 91 81 2c 	lds	r31, 0x2C81	; 0x802c81 <pxCurrentTCB+0x1>
    1914:	82 8d       	ldd	r24, Z+26	; 0x1a
    1916:	98 17       	cp	r25, r24
    1918:	08 f0       	brcs	.+2      	; 0x191c <xTaskIncrementTick+0x14c>
    191a:	a7 cf       	rjmp	.-178    	; 0x186a <xTaskIncrementTick+0x9a>
    191c:	aa cf       	rjmp	.-172    	; 0x1872 <xTaskIncrementTick+0xa2>
    191e:	e0 91 80 2c 	lds	r30, 0x2C80	; 0x802c80 <pxCurrentTCB>
    1922:	f0 91 81 2c 	lds	r31, 0x2C81	; 0x802c81 <pxCurrentTCB+0x1>
    1926:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1928:	8b e0       	ldi	r24, 0x0B	; 11
    192a:	e8 9f       	mul	r30, r24
    192c:	f0 01       	movw	r30, r0
    192e:	11 24       	eor	r1, r1
    1930:	ec 5a       	subi	r30, 0xAC	; 172
    1932:	f3 4d       	sbci	r31, 0xD3	; 211
    1934:	80 81       	ld	r24, Z
    1936:	82 30       	cpi	r24, 0x02	; 2
    1938:	40 f4       	brcc	.+16     	; 0x194a <xTaskIncrementTick+0x17a>
    193a:	09 c0       	rjmp	.+18     	; 0x194e <xTaskIncrementTick+0x17e>
    193c:	80 91 1c 2c 	lds	r24, 0x2C1C	; 0x802c1c <uxPendedTicks>
    1940:	8f 5f       	subi	r24, 0xFF	; 255
    1942:	80 93 1c 2c 	sts	0x2C1C, r24	; 0x802c1c <uxPendedTicks>
    1946:	b1 2c       	mov	r11, r1
    1948:	02 c0       	rjmp	.+4      	; 0x194e <xTaskIncrementTick+0x17e>
    194a:	bb 24       	eor	r11, r11
    194c:	b3 94       	inc	r11
    194e:	80 91 1b 2c 	lds	r24, 0x2C1B	; 0x802c1b <xYieldPending>
    1952:	88 23       	and	r24, r24
    1954:	11 f0       	breq	.+4      	; 0x195a <xTaskIncrementTick+0x18a>
    1956:	bb 24       	eor	r11, r11
    1958:	b3 94       	inc	r11
    195a:	8b 2d       	mov	r24, r11
    195c:	df 91       	pop	r29
    195e:	cf 91       	pop	r28
    1960:	1f 91       	pop	r17
    1962:	0f 91       	pop	r16
    1964:	ff 90       	pop	r15
    1966:	ef 90       	pop	r14
    1968:	df 90       	pop	r13
    196a:	cf 90       	pop	r12
    196c:	bf 90       	pop	r11
    196e:	08 95       	ret

00001970 <xTaskResumeAll>:
    1970:	0f 93       	push	r16
    1972:	1f 93       	push	r17
    1974:	cf 93       	push	r28
    1976:	df 93       	push	r29
    1978:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    197c:	ff 93       	push	r31
    197e:	f8 7f       	andi	r31, 0xF8	; 248
    1980:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1984:	80 91 12 2c 	lds	r24, 0x2C12	; 0x802c12 <uxSchedulerSuspended>
    1988:	81 50       	subi	r24, 0x01	; 1
    198a:	80 93 12 2c 	sts	0x2C12, r24	; 0x802c12 <uxSchedulerSuspended>
    198e:	80 91 12 2c 	lds	r24, 0x2C12	; 0x802c12 <uxSchedulerSuspended>
    1992:	81 11       	cpse	r24, r1
    1994:	52 c0       	rjmp	.+164    	; 0x1a3a <xTaskResumeAll+0xca>
    1996:	80 91 23 2c 	lds	r24, 0x2C23	; 0x802c23 <uxCurrentNumberOfTasks>
    199a:	81 11       	cpse	r24, r1
    199c:	2d c0       	rjmp	.+90     	; 0x19f8 <xTaskResumeAll+0x88>
    199e:	50 c0       	rjmp	.+160    	; 0x1a40 <xTaskResumeAll+0xd0>
    19a0:	e0 91 36 2c 	lds	r30, 0x2C36	; 0x802c36 <xPendingReadyList+0x7>
    19a4:	f0 91 37 2c 	lds	r31, 0x2C37	; 0x802c37 <xPendingReadyList+0x8>
    19a8:	c0 85       	ldd	r28, Z+8	; 0x08
    19aa:	d1 85       	ldd	r29, Z+9	; 0x09
    19ac:	ce 01       	movw	r24, r28
    19ae:	0e 96       	adiw	r24, 0x0e	; 14
    19b0:	0e 94 b0 04 	call	0x960	; 0x960 <uxListRemove>
    19b4:	8e 01       	movw	r16, r28
    19b6:	0e 5f       	subi	r16, 0xFE	; 254
    19b8:	1f 4f       	sbci	r17, 0xFF	; 255
    19ba:	c8 01       	movw	r24, r16
    19bc:	0e 94 b0 04 	call	0x960	; 0x960 <uxListRemove>
    19c0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    19c2:	90 91 1e 2c 	lds	r25, 0x2C1E	; 0x802c1e <uxTopReadyPriority>
    19c6:	98 17       	cp	r25, r24
    19c8:	10 f4       	brcc	.+4      	; 0x19ce <xTaskResumeAll+0x5e>
    19ca:	80 93 1e 2c 	sts	0x2C1E, r24	; 0x802c1e <uxTopReadyPriority>
    19ce:	2b e0       	ldi	r18, 0x0B	; 11
    19d0:	82 9f       	mul	r24, r18
    19d2:	c0 01       	movw	r24, r0
    19d4:	11 24       	eor	r1, r1
    19d6:	b8 01       	movw	r22, r16
    19d8:	8c 5a       	subi	r24, 0xAC	; 172
    19da:	93 4d       	sbci	r25, 0xD3	; 211
    19dc:	0e 94 52 04 	call	0x8a4	; 0x8a4 <vListInsertEnd>
    19e0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    19e2:	e0 91 80 2c 	lds	r30, 0x2C80	; 0x802c80 <pxCurrentTCB>
    19e6:	f0 91 81 2c 	lds	r31, 0x2C81	; 0x802c81 <pxCurrentTCB+0x1>
    19ea:	82 8d       	ldd	r24, Z+26	; 0x1a
    19ec:	98 17       	cp	r25, r24
    19ee:	30 f0       	brcs	.+12     	; 0x19fc <xTaskResumeAll+0x8c>
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	80 93 1b 2c 	sts	0x2C1B, r24	; 0x802c1b <xYieldPending>
    19f6:	02 c0       	rjmp	.+4      	; 0x19fc <xTaskResumeAll+0x8c>
    19f8:	c0 e0       	ldi	r28, 0x00	; 0
    19fa:	d0 e0       	ldi	r29, 0x00	; 0
    19fc:	80 91 2f 2c 	lds	r24, 0x2C2F	; 0x802c2f <xPendingReadyList>
    1a00:	81 11       	cpse	r24, r1
    1a02:	ce cf       	rjmp	.-100    	; 0x19a0 <xTaskResumeAll+0x30>
    1a04:	cd 2b       	or	r28, r29
    1a06:	11 f0       	breq	.+4      	; 0x1a0c <xTaskResumeAll+0x9c>
    1a08:	0e 94 8d 09 	call	0x131a	; 0x131a <prvResetNextTaskUnblockTime>
    1a0c:	c0 91 1c 2c 	lds	r28, 0x2C1C	; 0x802c1c <uxPendedTicks>
    1a10:	cc 23       	and	r28, r28
    1a12:	59 f0       	breq	.+22     	; 0x1a2a <xTaskResumeAll+0xba>
    1a14:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <xTaskIncrementTick>
    1a18:	88 23       	and	r24, r24
    1a1a:	19 f0       	breq	.+6      	; 0x1a22 <xTaskResumeAll+0xb2>
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	80 93 1b 2c 	sts	0x2C1B, r24	; 0x802c1b <xYieldPending>
    1a22:	c1 50       	subi	r28, 0x01	; 1
    1a24:	b9 f7       	brne	.-18     	; 0x1a14 <xTaskResumeAll+0xa4>
    1a26:	10 92 1c 2c 	sts	0x2C1C, r1	; 0x802c1c <uxPendedTicks>
    1a2a:	80 91 1b 2c 	lds	r24, 0x2C1B	; 0x802c1b <xYieldPending>
    1a2e:	88 23       	and	r24, r24
    1a30:	31 f0       	breq	.+12     	; 0x1a3e <xTaskResumeAll+0xce>
    1a32:	0e 94 a8 05 	call	0xb50	; 0xb50 <vPortYield>
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	03 c0       	rjmp	.+6      	; 0x1a40 <xTaskResumeAll+0xd0>
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	01 c0       	rjmp	.+2      	; 0x1a40 <xTaskResumeAll+0xd0>
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	ff 91       	pop	r31
    1a42:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1a46:	df 91       	pop	r29
    1a48:	cf 91       	pop	r28
    1a4a:	1f 91       	pop	r17
    1a4c:	0f 91       	pop	r16
    1a4e:	08 95       	ret

00001a50 <vTaskDelay>:
    1a50:	cf 92       	push	r12
    1a52:	df 92       	push	r13
    1a54:	ef 92       	push	r14
    1a56:	ff 92       	push	r15
    1a58:	6b 01       	movw	r12, r22
    1a5a:	7c 01       	movw	r14, r24
    1a5c:	67 2b       	or	r22, r23
    1a5e:	68 2b       	or	r22, r24
    1a60:	69 2b       	or	r22, r25
    1a62:	51 f0       	breq	.+20     	; 0x1a78 <vTaskDelay+0x28>
    1a64:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <vTaskSuspendAll>
    1a68:	40 e0       	ldi	r20, 0x00	; 0
    1a6a:	c7 01       	movw	r24, r14
    1a6c:	b6 01       	movw	r22, r12
    1a6e:	0e 94 c1 0a 	call	0x1582	; 0x1582 <prvAddCurrentTaskToDelayedList>
    1a72:	0e 94 b8 0c 	call	0x1970	; 0x1970 <xTaskResumeAll>
    1a76:	01 c0       	rjmp	.+2      	; 0x1a7a <vTaskDelay+0x2a>
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	81 11       	cpse	r24, r1
    1a7c:	02 c0       	rjmp	.+4      	; 0x1a82 <vTaskDelay+0x32>
    1a7e:	0e 94 a8 05 	call	0xb50	; 0xb50 <vPortYield>
    1a82:	ff 90       	pop	r15
    1a84:	ef 90       	pop	r14
    1a86:	df 90       	pop	r13
    1a88:	cf 90       	pop	r12
    1a8a:	08 95       	ret

00001a8c <vTaskSwitchContext>:
    1a8c:	80 91 12 2c 	lds	r24, 0x2C12	; 0x802c12 <uxSchedulerSuspended>
    1a90:	88 23       	and	r24, r24
    1a92:	21 f0       	breq	.+8      	; 0x1a9c <vTaskSwitchContext+0x10>
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	80 93 1b 2c 	sts	0x2C1B, r24	; 0x802c1b <xYieldPending>
    1a9a:	08 95       	ret
    1a9c:	10 92 1b 2c 	sts	0x2C1B, r1	; 0x802c1b <xYieldPending>
    1aa0:	e0 91 80 2c 	lds	r30, 0x2C80	; 0x802c80 <pxCurrentTCB>
    1aa4:	f0 91 81 2c 	lds	r31, 0x2C81	; 0x802c81 <pxCurrentTCB+0x1>
    1aa8:	03 8c       	ldd	r0, Z+27	; 0x1b
    1aaa:	f4 8d       	ldd	r31, Z+28	; 0x1c
    1aac:	e0 2d       	mov	r30, r0
    1aae:	80 81       	ld	r24, Z
    1ab0:	91 81       	ldd	r25, Z+1	; 0x01
    1ab2:	a2 81       	ldd	r26, Z+2	; 0x02
    1ab4:	b3 81       	ldd	r27, Z+3	; 0x03
    1ab6:	85 3a       	cpi	r24, 0xA5	; 165
    1ab8:	95 4a       	sbci	r25, 0xA5	; 165
    1aba:	a5 4a       	sbci	r26, 0xA5	; 165
    1abc:	b5 4a       	sbci	r27, 0xA5	; 165
    1abe:	d9 f4       	brne	.+54     	; 0x1af6 <vTaskSwitchContext+0x6a>
    1ac0:	84 81       	ldd	r24, Z+4	; 0x04
    1ac2:	95 81       	ldd	r25, Z+5	; 0x05
    1ac4:	a6 81       	ldd	r26, Z+6	; 0x06
    1ac6:	b7 81       	ldd	r27, Z+7	; 0x07
    1ac8:	85 3a       	cpi	r24, 0xA5	; 165
    1aca:	95 4a       	sbci	r25, 0xA5	; 165
    1acc:	a5 4a       	sbci	r26, 0xA5	; 165
    1ace:	b5 4a       	sbci	r27, 0xA5	; 165
    1ad0:	91 f4       	brne	.+36     	; 0x1af6 <vTaskSwitchContext+0x6a>
    1ad2:	80 85       	ldd	r24, Z+8	; 0x08
    1ad4:	91 85       	ldd	r25, Z+9	; 0x09
    1ad6:	a2 85       	ldd	r26, Z+10	; 0x0a
    1ad8:	b3 85       	ldd	r27, Z+11	; 0x0b
    1ada:	85 3a       	cpi	r24, 0xA5	; 165
    1adc:	95 4a       	sbci	r25, 0xA5	; 165
    1ade:	a5 4a       	sbci	r26, 0xA5	; 165
    1ae0:	b5 4a       	sbci	r27, 0xA5	; 165
    1ae2:	49 f4       	brne	.+18     	; 0x1af6 <vTaskSwitchContext+0x6a>
    1ae4:	84 85       	ldd	r24, Z+12	; 0x0c
    1ae6:	95 85       	ldd	r25, Z+13	; 0x0d
    1ae8:	a6 85       	ldd	r26, Z+14	; 0x0e
    1aea:	b7 85       	ldd	r27, Z+15	; 0x0f
    1aec:	85 3a       	cpi	r24, 0xA5	; 165
    1aee:	95 4a       	sbci	r25, 0xA5	; 165
    1af0:	a5 4a       	sbci	r26, 0xA5	; 165
    1af2:	b5 4a       	sbci	r27, 0xA5	; 165
    1af4:	61 f0       	breq	.+24     	; 0x1b0e <vTaskSwitchContext+0x82>
    1af6:	60 91 80 2c 	lds	r22, 0x2C80	; 0x802c80 <pxCurrentTCB>
    1afa:	70 91 81 2c 	lds	r23, 0x2C81	; 0x802c81 <pxCurrentTCB+0x1>
    1afe:	63 5e       	subi	r22, 0xE3	; 227
    1b00:	7f 4f       	sbci	r23, 0xFF	; 255
    1b02:	80 91 80 2c 	lds	r24, 0x2C80	; 0x802c80 <pxCurrentTCB>
    1b06:	90 91 81 2c 	lds	r25, 0x2C81	; 0x802c81 <pxCurrentTCB+0x1>
    1b0a:	0e 94 76 02 	call	0x4ec	; 0x4ec <vApplicationStackOverflowHook>
    1b0e:	80 91 1e 2c 	lds	r24, 0x2C1E	; 0x802c1e <uxTopReadyPriority>
    1b12:	01 c0       	rjmp	.+2      	; 0x1b16 <vTaskSwitchContext+0x8a>
    1b14:	81 50       	subi	r24, 0x01	; 1
    1b16:	28 2f       	mov	r18, r24
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	9b e0       	ldi	r25, 0x0B	; 11
    1b1c:	92 9f       	mul	r25, r18
    1b1e:	f0 01       	movw	r30, r0
    1b20:	93 9f       	mul	r25, r19
    1b22:	f0 0d       	add	r31, r0
    1b24:	11 24       	eor	r1, r1
    1b26:	ec 5a       	subi	r30, 0xAC	; 172
    1b28:	f3 4d       	sbci	r31, 0xD3	; 211
    1b2a:	90 81       	ld	r25, Z
    1b2c:	99 23       	and	r25, r25
    1b2e:	91 f3       	breq	.-28     	; 0x1b14 <vTaskSwitchContext+0x88>
    1b30:	9b e0       	ldi	r25, 0x0B	; 11
    1b32:	92 9f       	mul	r25, r18
    1b34:	a0 01       	movw	r20, r0
    1b36:	93 9f       	mul	r25, r19
    1b38:	50 0d       	add	r21, r0
    1b3a:	11 24       	eor	r1, r1
    1b3c:	df 01       	movw	r26, r30
    1b3e:	01 80       	ldd	r0, Z+1	; 0x01
    1b40:	f2 81       	ldd	r31, Z+2	; 0x02
    1b42:	e0 2d       	mov	r30, r0
    1b44:	04 80       	ldd	r0, Z+4	; 0x04
    1b46:	f5 81       	ldd	r31, Z+5	; 0x05
    1b48:	e0 2d       	mov	r30, r0
    1b4a:	11 96       	adiw	r26, 0x01	; 1
    1b4c:	ed 93       	st	X+, r30
    1b4e:	fc 93       	st	X, r31
    1b50:	12 97       	sbiw	r26, 0x02	; 2
    1b52:	49 5a       	subi	r20, 0xA9	; 169
    1b54:	53 4d       	sbci	r21, 0xD3	; 211
    1b56:	e4 17       	cp	r30, r20
    1b58:	f5 07       	cpc	r31, r21
    1b5a:	29 f4       	brne	.+10     	; 0x1b66 <vTaskSwitchContext+0xda>
    1b5c:	44 81       	ldd	r20, Z+4	; 0x04
    1b5e:	55 81       	ldd	r21, Z+5	; 0x05
    1b60:	fd 01       	movw	r30, r26
    1b62:	41 83       	std	Z+1, r20	; 0x01
    1b64:	52 83       	std	Z+2, r21	; 0x02
    1b66:	9b e0       	ldi	r25, 0x0B	; 11
    1b68:	92 9f       	mul	r25, r18
    1b6a:	f0 01       	movw	r30, r0
    1b6c:	93 9f       	mul	r25, r19
    1b6e:	f0 0d       	add	r31, r0
    1b70:	11 24       	eor	r1, r1
    1b72:	ec 5a       	subi	r30, 0xAC	; 172
    1b74:	f3 4d       	sbci	r31, 0xD3	; 211
    1b76:	01 80       	ldd	r0, Z+1	; 0x01
    1b78:	f2 81       	ldd	r31, Z+2	; 0x02
    1b7a:	e0 2d       	mov	r30, r0
    1b7c:	20 85       	ldd	r18, Z+8	; 0x08
    1b7e:	31 85       	ldd	r19, Z+9	; 0x09
    1b80:	20 93 80 2c 	sts	0x2C80, r18	; 0x802c80 <pxCurrentTCB>
    1b84:	30 93 81 2c 	sts	0x2C81, r19	; 0x802c81 <pxCurrentTCB+0x1>
    1b88:	80 93 1e 2c 	sts	0x2C1E, r24	; 0x802c1e <uxTopReadyPriority>
    1b8c:	08 95       	ret

00001b8e <vTaskPlaceOnEventList>:
    1b8e:	cf 92       	push	r12
    1b90:	df 92       	push	r13
    1b92:	ef 92       	push	r14
    1b94:	ff 92       	push	r15
    1b96:	6a 01       	movw	r12, r20
    1b98:	7b 01       	movw	r14, r22
    1b9a:	60 91 80 2c 	lds	r22, 0x2C80	; 0x802c80 <pxCurrentTCB>
    1b9e:	70 91 81 2c 	lds	r23, 0x2C81	; 0x802c81 <pxCurrentTCB+0x1>
    1ba2:	62 5f       	subi	r22, 0xF2	; 242
    1ba4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba6:	0e 94 73 04 	call	0x8e6	; 0x8e6 <vListInsert>
    1baa:	41 e0       	ldi	r20, 0x01	; 1
    1bac:	c7 01       	movw	r24, r14
    1bae:	b6 01       	movw	r22, r12
    1bb0:	0e 94 c1 0a 	call	0x1582	; 0x1582 <prvAddCurrentTaskToDelayedList>
    1bb4:	ff 90       	pop	r15
    1bb6:	ef 90       	pop	r14
    1bb8:	df 90       	pop	r13
    1bba:	cf 90       	pop	r12
    1bbc:	08 95       	ret

00001bbe <vTaskPlaceOnUnorderedEventList>:
    1bbe:	cf 92       	push	r12
    1bc0:	df 92       	push	r13
    1bc2:	ef 92       	push	r14
    1bc4:	ff 92       	push	r15
    1bc6:	0f 93       	push	r16
    1bc8:	1f 93       	push	r17
    1bca:	68 01       	movw	r12, r16
    1bcc:	79 01       	movw	r14, r18
    1bce:	e0 91 80 2c 	lds	r30, 0x2C80	; 0x802c80 <pxCurrentTCB>
    1bd2:	f0 91 81 2c 	lds	r31, 0x2C81	; 0x802c81 <pxCurrentTCB+0x1>
    1bd6:	70 68       	ori	r23, 0x80	; 128
    1bd8:	46 87       	std	Z+14, r20	; 0x0e
    1bda:	57 87       	std	Z+15, r21	; 0x0f
    1bdc:	60 8b       	std	Z+16, r22	; 0x10
    1bde:	71 8b       	std	Z+17, r23	; 0x11
    1be0:	60 91 80 2c 	lds	r22, 0x2C80	; 0x802c80 <pxCurrentTCB>
    1be4:	70 91 81 2c 	lds	r23, 0x2C81	; 0x802c81 <pxCurrentTCB+0x1>
    1be8:	62 5f       	subi	r22, 0xF2	; 242
    1bea:	7f 4f       	sbci	r23, 0xFF	; 255
    1bec:	0e 94 52 04 	call	0x8a4	; 0x8a4 <vListInsertEnd>
    1bf0:	41 e0       	ldi	r20, 0x01	; 1
    1bf2:	c7 01       	movw	r24, r14
    1bf4:	b6 01       	movw	r22, r12
    1bf6:	0e 94 c1 0a 	call	0x1582	; 0x1582 <prvAddCurrentTaskToDelayedList>
    1bfa:	1f 91       	pop	r17
    1bfc:	0f 91       	pop	r16
    1bfe:	ff 90       	pop	r15
    1c00:	ef 90       	pop	r14
    1c02:	df 90       	pop	r13
    1c04:	cf 90       	pop	r12
    1c06:	08 95       	ret

00001c08 <vTaskPlaceOnEventListRestricted>:
    1c08:	cf 92       	push	r12
    1c0a:	df 92       	push	r13
    1c0c:	ef 92       	push	r14
    1c0e:	ff 92       	push	r15
    1c10:	cf 93       	push	r28
    1c12:	6a 01       	movw	r12, r20
    1c14:	7b 01       	movw	r14, r22
    1c16:	c2 2f       	mov	r28, r18
    1c18:	60 91 80 2c 	lds	r22, 0x2C80	; 0x802c80 <pxCurrentTCB>
    1c1c:	70 91 81 2c 	lds	r23, 0x2C81	; 0x802c81 <pxCurrentTCB+0x1>
    1c20:	62 5f       	subi	r22, 0xF2	; 242
    1c22:	7f 4f       	sbci	r23, 0xFF	; 255
    1c24:	0e 94 52 04 	call	0x8a4	; 0x8a4 <vListInsertEnd>
    1c28:	cc 23       	and	r28, r28
    1c2a:	21 f0       	breq	.+8      	; 0x1c34 <vTaskPlaceOnEventListRestricted+0x2c>
    1c2c:	cc 24       	eor	r12, r12
    1c2e:	ca 94       	dec	r12
    1c30:	dc 2c       	mov	r13, r12
    1c32:	76 01       	movw	r14, r12
    1c34:	4c 2f       	mov	r20, r28
    1c36:	c7 01       	movw	r24, r14
    1c38:	b6 01       	movw	r22, r12
    1c3a:	0e 94 c1 0a 	call	0x1582	; 0x1582 <prvAddCurrentTaskToDelayedList>
    1c3e:	cf 91       	pop	r28
    1c40:	ff 90       	pop	r15
    1c42:	ef 90       	pop	r14
    1c44:	df 90       	pop	r13
    1c46:	cf 90       	pop	r12
    1c48:	08 95       	ret

00001c4a <xTaskRemoveFromEventList>:
    1c4a:	0f 93       	push	r16
    1c4c:	1f 93       	push	r17
    1c4e:	cf 93       	push	r28
    1c50:	df 93       	push	r29
    1c52:	dc 01       	movw	r26, r24
    1c54:	17 96       	adiw	r26, 0x07	; 7
    1c56:	ed 91       	ld	r30, X+
    1c58:	fc 91       	ld	r31, X
    1c5a:	18 97       	sbiw	r26, 0x08	; 8
    1c5c:	c0 85       	ldd	r28, Z+8	; 0x08
    1c5e:	d1 85       	ldd	r29, Z+9	; 0x09
    1c60:	8e 01       	movw	r16, r28
    1c62:	02 5f       	subi	r16, 0xF2	; 242
    1c64:	1f 4f       	sbci	r17, 0xFF	; 255
    1c66:	c8 01       	movw	r24, r16
    1c68:	0e 94 b0 04 	call	0x960	; 0x960 <uxListRemove>
    1c6c:	80 91 12 2c 	lds	r24, 0x2C12	; 0x802c12 <uxSchedulerSuspended>
    1c70:	81 11       	cpse	r24, r1
    1c72:	16 c0       	rjmp	.+44     	; 0x1ca0 <xTaskRemoveFromEventList+0x56>
    1c74:	0c 50       	subi	r16, 0x0C	; 12
    1c76:	11 09       	sbc	r17, r1
    1c78:	c8 01       	movw	r24, r16
    1c7a:	0e 94 b0 04 	call	0x960	; 0x960 <uxListRemove>
    1c7e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c80:	90 91 1e 2c 	lds	r25, 0x2C1E	; 0x802c1e <uxTopReadyPriority>
    1c84:	98 17       	cp	r25, r24
    1c86:	10 f4       	brcc	.+4      	; 0x1c8c <xTaskRemoveFromEventList+0x42>
    1c88:	80 93 1e 2c 	sts	0x2C1E, r24	; 0x802c1e <uxTopReadyPriority>
    1c8c:	bb e0       	ldi	r27, 0x0B	; 11
    1c8e:	8b 9f       	mul	r24, r27
    1c90:	c0 01       	movw	r24, r0
    1c92:	11 24       	eor	r1, r1
    1c94:	b8 01       	movw	r22, r16
    1c96:	8c 5a       	subi	r24, 0xAC	; 172
    1c98:	93 4d       	sbci	r25, 0xD3	; 211
    1c9a:	0e 94 52 04 	call	0x8a4	; 0x8a4 <vListInsertEnd>
    1c9e:	05 c0       	rjmp	.+10     	; 0x1caa <xTaskRemoveFromEventList+0x60>
    1ca0:	b8 01       	movw	r22, r16
    1ca2:	8f e2       	ldi	r24, 0x2F	; 47
    1ca4:	9c e2       	ldi	r25, 0x2C	; 44
    1ca6:	0e 94 52 04 	call	0x8a4	; 0x8a4 <vListInsertEnd>
    1caa:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1cac:	e0 91 80 2c 	lds	r30, 0x2C80	; 0x802c80 <pxCurrentTCB>
    1cb0:	f0 91 81 2c 	lds	r31, 0x2C81	; 0x802c81 <pxCurrentTCB+0x1>
    1cb4:	82 8d       	ldd	r24, Z+26	; 0x1a
    1cb6:	89 17       	cp	r24, r25
    1cb8:	20 f4       	brcc	.+8      	; 0x1cc2 <xTaskRemoveFromEventList+0x78>
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	80 93 1b 2c 	sts	0x2C1B, r24	; 0x802c1b <xYieldPending>
    1cc0:	01 c0       	rjmp	.+2      	; 0x1cc4 <xTaskRemoveFromEventList+0x7a>
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	df 91       	pop	r29
    1cc6:	cf 91       	pop	r28
    1cc8:	1f 91       	pop	r17
    1cca:	0f 91       	pop	r16
    1ccc:	08 95       	ret

00001cce <vTaskRemoveFromUnorderedEventList>:
    1cce:	0f 93       	push	r16
    1cd0:	1f 93       	push	r17
    1cd2:	cf 93       	push	r28
    1cd4:	df 93       	push	r29
    1cd6:	70 68       	ori	r23, 0x80	; 128
    1cd8:	fc 01       	movw	r30, r24
    1cda:	40 83       	st	Z, r20
    1cdc:	51 83       	std	Z+1, r21	; 0x01
    1cde:	62 83       	std	Z+2, r22	; 0x02
    1ce0:	73 83       	std	Z+3, r23	; 0x03
    1ce2:	c0 85       	ldd	r28, Z+8	; 0x08
    1ce4:	d1 85       	ldd	r29, Z+9	; 0x09
    1ce6:	0e 94 b0 04 	call	0x960	; 0x960 <uxListRemove>
    1cea:	8e 01       	movw	r16, r28
    1cec:	0e 5f       	subi	r16, 0xFE	; 254
    1cee:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf0:	c8 01       	movw	r24, r16
    1cf2:	0e 94 b0 04 	call	0x960	; 0x960 <uxListRemove>
    1cf6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1cf8:	90 91 1e 2c 	lds	r25, 0x2C1E	; 0x802c1e <uxTopReadyPriority>
    1cfc:	98 17       	cp	r25, r24
    1cfe:	10 f4       	brcc	.+4      	; 0x1d04 <vTaskRemoveFromUnorderedEventList+0x36>
    1d00:	80 93 1e 2c 	sts	0x2C1E, r24	; 0x802c1e <uxTopReadyPriority>
    1d04:	fb e0       	ldi	r31, 0x0B	; 11
    1d06:	8f 9f       	mul	r24, r31
    1d08:	c0 01       	movw	r24, r0
    1d0a:	11 24       	eor	r1, r1
    1d0c:	b8 01       	movw	r22, r16
    1d0e:	8c 5a       	subi	r24, 0xAC	; 172
    1d10:	93 4d       	sbci	r25, 0xD3	; 211
    1d12:	0e 94 52 04 	call	0x8a4	; 0x8a4 <vListInsertEnd>
    1d16:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1d18:	e0 91 80 2c 	lds	r30, 0x2C80	; 0x802c80 <pxCurrentTCB>
    1d1c:	f0 91 81 2c 	lds	r31, 0x2C81	; 0x802c81 <pxCurrentTCB+0x1>
    1d20:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d22:	89 17       	cp	r24, r25
    1d24:	18 f4       	brcc	.+6      	; 0x1d2c <vTaskRemoveFromUnorderedEventList+0x5e>
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	80 93 1b 2c 	sts	0x2C1B, r24	; 0x802c1b <xYieldPending>
    1d2c:	df 91       	pop	r29
    1d2e:	cf 91       	pop	r28
    1d30:	1f 91       	pop	r17
    1d32:	0f 91       	pop	r16
    1d34:	08 95       	ret

00001d36 <vTaskInternalSetTimeOutState>:
    1d36:	20 91 1a 2c 	lds	r18, 0x2C1A	; 0x802c1a <xNumOfOverflows>
    1d3a:	fc 01       	movw	r30, r24
    1d3c:	20 83       	st	Z, r18
    1d3e:	40 91 1f 2c 	lds	r20, 0x2C1F	; 0x802c1f <xTickCount>
    1d42:	50 91 20 2c 	lds	r21, 0x2C20	; 0x802c20 <xTickCount+0x1>
    1d46:	60 91 21 2c 	lds	r22, 0x2C21	; 0x802c21 <xTickCount+0x2>
    1d4a:	70 91 22 2c 	lds	r23, 0x2C22	; 0x802c22 <xTickCount+0x3>
    1d4e:	41 83       	std	Z+1, r20	; 0x01
    1d50:	52 83       	std	Z+2, r21	; 0x02
    1d52:	63 83       	std	Z+3, r22	; 0x03
    1d54:	74 83       	std	Z+4, r23	; 0x04
    1d56:	08 95       	ret

00001d58 <xTaskCheckForTimeOut>:
    1d58:	8f 92       	push	r8
    1d5a:	9f 92       	push	r9
    1d5c:	af 92       	push	r10
    1d5e:	bf 92       	push	r11
    1d60:	cf 92       	push	r12
    1d62:	df 92       	push	r13
    1d64:	ef 92       	push	r14
    1d66:	ff 92       	push	r15
    1d68:	0f 93       	push	r16
    1d6a:	1f 93       	push	r17
    1d6c:	cf 93       	push	r28
    1d6e:	df 93       	push	r29
    1d70:	db 01       	movw	r26, r22
    1d72:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1d76:	ff 93       	push	r31
    1d78:	f8 7f       	andi	r31, 0xF8	; 248
    1d7a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1d7e:	c0 90 1f 2c 	lds	r12, 0x2C1F	; 0x802c1f <xTickCount>
    1d82:	d0 90 20 2c 	lds	r13, 0x2C20	; 0x802c20 <xTickCount+0x1>
    1d86:	e0 90 21 2c 	lds	r14, 0x2C21	; 0x802c21 <xTickCount+0x2>
    1d8a:	f0 90 22 2c 	lds	r15, 0x2C22	; 0x802c22 <xTickCount+0x3>
    1d8e:	ec 01       	movw	r28, r24
    1d90:	09 81       	ldd	r16, Y+1	; 0x01
    1d92:	1a 81       	ldd	r17, Y+2	; 0x02
    1d94:	2b 81       	ldd	r18, Y+3	; 0x03
    1d96:	3c 81       	ldd	r19, Y+4	; 0x04
    1d98:	46 01       	movw	r8, r12
    1d9a:	57 01       	movw	r10, r14
    1d9c:	80 1a       	sub	r8, r16
    1d9e:	91 0a       	sbc	r9, r17
    1da0:	a2 0a       	sbc	r10, r18
    1da2:	b3 0a       	sbc	r11, r19
    1da4:	4d 91       	ld	r20, X+
    1da6:	5d 91       	ld	r21, X+
    1da8:	6d 91       	ld	r22, X+
    1daa:	7c 91       	ld	r23, X
    1dac:	13 97       	sbiw	r26, 0x03	; 3
    1dae:	4f 3f       	cpi	r20, 0xFF	; 255
    1db0:	df ef       	ldi	r29, 0xFF	; 255
    1db2:	5d 07       	cpc	r21, r29
    1db4:	6d 07       	cpc	r22, r29
    1db6:	7d 07       	cpc	r23, r29
    1db8:	21 f1       	breq	.+72     	; 0x1e02 <xTaskCheckForTimeOut+0xaa>
    1dba:	ec 01       	movw	r28, r24
    1dbc:	f8 81       	ld	r31, Y
    1dbe:	e0 91 1a 2c 	lds	r30, 0x2C1A	; 0x802c1a <xNumOfOverflows>
    1dc2:	fe 17       	cp	r31, r30
    1dc4:	29 f0       	breq	.+10     	; 0x1dd0 <xTaskCheckForTimeOut+0x78>
    1dc6:	c0 16       	cp	r12, r16
    1dc8:	d1 06       	cpc	r13, r17
    1dca:	e2 06       	cpc	r14, r18
    1dcc:	f3 06       	cpc	r15, r19
    1dce:	d8 f4       	brcc	.+54     	; 0x1e06 <xTaskCheckForTimeOut+0xae>
    1dd0:	84 16       	cp	r8, r20
    1dd2:	95 06       	cpc	r9, r21
    1dd4:	a6 06       	cpc	r10, r22
    1dd6:	b7 06       	cpc	r11, r23
    1dd8:	68 f4       	brcc	.+26     	; 0x1df4 <xTaskCheckForTimeOut+0x9c>
    1dda:	48 19       	sub	r20, r8
    1ddc:	59 09       	sbc	r21, r9
    1dde:	6a 09       	sbc	r22, r10
    1de0:	7b 09       	sbc	r23, r11
    1de2:	4d 93       	st	X+, r20
    1de4:	5d 93       	st	X+, r21
    1de6:	6d 93       	st	X+, r22
    1de8:	7c 93       	st	X, r23
    1dea:	13 97       	sbiw	r26, 0x03	; 3
    1dec:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <vTaskInternalSetTimeOutState>
    1df0:	80 e0       	ldi	r24, 0x00	; 0
    1df2:	0a c0       	rjmp	.+20     	; 0x1e08 <xTaskCheckForTimeOut+0xb0>
    1df4:	1d 92       	st	X+, r1
    1df6:	1d 92       	st	X+, r1
    1df8:	1d 92       	st	X+, r1
    1dfa:	1c 92       	st	X, r1
    1dfc:	13 97       	sbiw	r26, 0x03	; 3
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	03 c0       	rjmp	.+6      	; 0x1e08 <xTaskCheckForTimeOut+0xb0>
    1e02:	80 e0       	ldi	r24, 0x00	; 0
    1e04:	01 c0       	rjmp	.+2      	; 0x1e08 <xTaskCheckForTimeOut+0xb0>
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	ff 91       	pop	r31
    1e0a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1e0e:	df 91       	pop	r29
    1e10:	cf 91       	pop	r28
    1e12:	1f 91       	pop	r17
    1e14:	0f 91       	pop	r16
    1e16:	ff 90       	pop	r15
    1e18:	ef 90       	pop	r14
    1e1a:	df 90       	pop	r13
    1e1c:	cf 90       	pop	r12
    1e1e:	bf 90       	pop	r11
    1e20:	af 90       	pop	r10
    1e22:	9f 90       	pop	r9
    1e24:	8f 90       	pop	r8
    1e26:	08 95       	ret

00001e28 <vTaskMissedYield>:
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	80 93 1b 2c 	sts	0x2C1B, r24	; 0x802c1b <xYieldPending>
    1e2e:	08 95       	ret

00001e30 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    1e30:	80 91 1d 2c 	lds	r24, 0x2C1D	; 0x802c1d <xSchedulerRunning>
    1e34:	88 23       	and	r24, r24
    1e36:	31 f0       	breq	.+12     	; 0x1e44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1e38:	80 91 12 2c 	lds	r24, 0x2C12	; 0x802c12 <uxSchedulerSuspended>
    1e3c:	81 11       	cpse	r24, r1
    1e3e:	04 c0       	rjmp	.+8      	; 0x1e48 <xTaskGetSchedulerState+0x18>
			{
				xReturn = taskSCHEDULER_RUNNING;
    1e40:	82 e0       	ldi	r24, 0x02	; 2
    1e42:	08 95       	ret
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	08 95       	ret
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    1e48:	80 e0       	ldi	r24, 0x00	; 0
			}
		}

		return xReturn;
	}
    1e4a:	08 95       	ret

00001e4c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    1e4c:	cf 92       	push	r12
    1e4e:	df 92       	push	r13
    1e50:	ef 92       	push	r14
    1e52:	ff 92       	push	r15
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    1e54:	e0 91 80 2c 	lds	r30, 0x2C80	; 0x802c80 <pxCurrentTCB>
    1e58:	f0 91 81 2c 	lds	r31, 0x2C81	; 0x802c81 <pxCurrentTCB+0x1>
    1e5c:	66 85       	ldd	r22, Z+14	; 0x0e
    1e5e:	77 85       	ldd	r23, Z+15	; 0x0f
    1e60:	80 89       	ldd	r24, Z+16	; 0x10
    1e62:	91 89       	ldd	r25, Z+17	; 0x11

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1e64:	e0 91 80 2c 	lds	r30, 0x2C80	; 0x802c80 <pxCurrentTCB>
    1e68:	f0 91 81 2c 	lds	r31, 0x2C81	; 0x802c81 <pxCurrentTCB+0x1>
    1e6c:	a0 91 80 2c 	lds	r26, 0x2C80	; 0x802c80 <pxCurrentTCB>
    1e70:	b0 91 81 2c 	lds	r27, 0x2C81	; 0x802c81 <pxCurrentTCB+0x1>
    1e74:	5a 96       	adiw	r26, 0x1a	; 26
    1e76:	2c 91       	ld	r18, X
    1e78:	c1 2c       	mov	r12, r1
    1e7a:	d1 2c       	mov	r13, r1
    1e7c:	76 01       	movw	r14, r12
    1e7e:	68 94       	set
    1e80:	c2 f8       	bld	r12, 2
    1e82:	c2 1a       	sub	r12, r18
    1e84:	d1 08       	sbc	r13, r1
    1e86:	e1 08       	sbc	r14, r1
    1e88:	f1 08       	sbc	r15, r1
    1e8a:	c6 86       	std	Z+14, r12	; 0x0e
    1e8c:	d7 86       	std	Z+15, r13	; 0x0f
    1e8e:	e0 8a       	std	Z+16, r14	; 0x10
    1e90:	f1 8a       	std	Z+17, r15	; 0x11

	return uxReturn;
}
    1e92:	ff 90       	pop	r15
    1e94:	ef 90       	pop	r14
    1e96:	df 90       	pop	r13
    1e98:	cf 90       	pop	r12
    1e9a:	08 95       	ret

00001e9c <prvGetNextExpireTime>:

	taskENTER_CRITICAL();
	{
		pxTimer->pvTimerID = pvNewID;
	}
	taskEXIT_CRITICAL();
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	e0 91 8c 2c 	lds	r30, 0x2C8C	; 0x802c8c <pxCurrentTimerList>
    1ea2:	f0 91 8d 2c 	lds	r31, 0x2C8D	; 0x802c8d <pxCurrentTimerList+0x1>
    1ea6:	80 81       	ld	r24, Z
    1ea8:	91 e0       	ldi	r25, 0x01	; 1
    1eaa:	81 11       	cpse	r24, r1
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	9c 93       	st	X, r25
    1eb0:	91 11       	cpse	r25, r1
    1eb2:	08 c0       	rjmp	.+16     	; 0x1ec4 <prvGetNextExpireTime+0x28>
    1eb4:	07 80       	ldd	r0, Z+7	; 0x07
    1eb6:	f0 85       	ldd	r31, Z+8	; 0x08
    1eb8:	e0 2d       	mov	r30, r0
    1eba:	60 81       	ld	r22, Z
    1ebc:	71 81       	ldd	r23, Z+1	; 0x01
    1ebe:	82 81       	ldd	r24, Z+2	; 0x02
    1ec0:	93 81       	ldd	r25, Z+3	; 0x03
    1ec2:	08 95       	ret
    1ec4:	60 e0       	ldi	r22, 0x00	; 0
    1ec6:	70 e0       	ldi	r23, 0x00	; 0
    1ec8:	cb 01       	movw	r24, r22
    1eca:	08 95       	ret

00001ecc <prvInsertTimerInActiveList>:
    1ecc:	cf 92       	push	r12
    1ece:	df 92       	push	r13
    1ed0:	ef 92       	push	r14
    1ed2:	ff 92       	push	r15
    1ed4:	0f 93       	push	r16
    1ed6:	1f 93       	push	r17
    1ed8:	fc 01       	movw	r30, r24
    1eda:	42 83       	std	Z+2, r20	; 0x02
    1edc:	53 83       	std	Z+3, r21	; 0x03
    1ede:	64 83       	std	Z+4, r22	; 0x04
    1ee0:	75 83       	std	Z+5, r23	; 0x05
    1ee2:	82 87       	std	Z+10, r24	; 0x0a
    1ee4:	93 87       	std	Z+11, r25	; 0x0b
    1ee6:	04 17       	cp	r16, r20
    1ee8:	15 07       	cpc	r17, r21
    1eea:	26 07       	cpc	r18, r22
    1eec:	37 07       	cpc	r19, r23
    1eee:	c0 f0       	brcs	.+48     	; 0x1f20 <prvInsertTimerInActiveList+0x54>
    1ef0:	0c 19       	sub	r16, r12
    1ef2:	1d 09       	sbc	r17, r13
    1ef4:	2e 09       	sbc	r18, r14
    1ef6:	3f 09       	sbc	r19, r15
    1ef8:	86 85       	ldd	r24, Z+14	; 0x0e
    1efa:	97 85       	ldd	r25, Z+15	; 0x0f
    1efc:	a0 89       	ldd	r26, Z+16	; 0x10
    1efe:	b1 89       	ldd	r27, Z+17	; 0x11
    1f00:	08 17       	cp	r16, r24
    1f02:	19 07       	cpc	r17, r25
    1f04:	2a 07       	cpc	r18, r26
    1f06:	3b 07       	cpc	r19, r27
    1f08:	00 f5       	brcc	.+64     	; 0x1f4a <prvInsertTimerInActiveList+0x7e>
    1f0a:	bf 01       	movw	r22, r30
    1f0c:	6e 5f       	subi	r22, 0xFE	; 254
    1f0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f10:	80 91 8a 2c 	lds	r24, 0x2C8A	; 0x802c8a <pxOverflowTimerList>
    1f14:	90 91 8b 2c 	lds	r25, 0x2C8B	; 0x802c8b <pxOverflowTimerList+0x1>
    1f18:	0e 94 73 04 	call	0x8e6	; 0x8e6 <vListInsert>
    1f1c:	80 e0       	ldi	r24, 0x00	; 0
    1f1e:	18 c0       	rjmp	.+48     	; 0x1f50 <prvInsertTimerInActiveList+0x84>
    1f20:	0c 15       	cp	r16, r12
    1f22:	1d 05       	cpc	r17, r13
    1f24:	2e 05       	cpc	r18, r14
    1f26:	3f 05       	cpc	r19, r15
    1f28:	28 f4       	brcc	.+10     	; 0x1f34 <prvInsertTimerInActiveList+0x68>
    1f2a:	4c 15       	cp	r20, r12
    1f2c:	5d 05       	cpc	r21, r13
    1f2e:	6e 05       	cpc	r22, r14
    1f30:	7f 05       	cpc	r23, r15
    1f32:	68 f4       	brcc	.+26     	; 0x1f4e <prvInsertTimerInActiveList+0x82>
    1f34:	bf 01       	movw	r22, r30
    1f36:	6e 5f       	subi	r22, 0xFE	; 254
    1f38:	7f 4f       	sbci	r23, 0xFF	; 255
    1f3a:	80 91 8c 2c 	lds	r24, 0x2C8C	; 0x802c8c <pxCurrentTimerList>
    1f3e:	90 91 8d 2c 	lds	r25, 0x2C8D	; 0x802c8d <pxCurrentTimerList+0x1>
    1f42:	0e 94 73 04 	call	0x8e6	; 0x8e6 <vListInsert>
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	03 c0       	rjmp	.+6      	; 0x1f50 <prvInsertTimerInActiveList+0x84>
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	01 c0       	rjmp	.+2      	; 0x1f50 <prvInsertTimerInActiveList+0x84>
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	1f 91       	pop	r17
    1f52:	0f 91       	pop	r16
    1f54:	ff 90       	pop	r15
    1f56:	ef 90       	pop	r14
    1f58:	df 90       	pop	r13
    1f5a:	cf 90       	pop	r12
    1f5c:	08 95       	ret

00001f5e <prvCheckForValidListAndQueue>:
    1f5e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1f62:	ff 93       	push	r31
    1f64:	f8 7f       	andi	r31, 0xF8	; 248
    1f66:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1f6a:	80 91 88 2c 	lds	r24, 0x2C88	; 0x802c88 <xTimerQueue>
    1f6e:	90 91 89 2c 	lds	r25, 0x2C89	; 0x802c89 <xTimerQueue+0x1>
    1f72:	89 2b       	or	r24, r25
    1f74:	e9 f4       	brne	.+58     	; 0x1fb0 <prvCheckForValidListAndQueue+0x52>
    1f76:	89 e9       	ldi	r24, 0x99	; 153
    1f78:	9c e2       	ldi	r25, 0x2C	; 44
    1f7a:	0e 94 3d 04 	call	0x87a	; 0x87a <vListInitialise>
    1f7e:	8e e8       	ldi	r24, 0x8E	; 142
    1f80:	9c e2       	ldi	r25, 0x2C	; 44
    1f82:	0e 94 3d 04 	call	0x87a	; 0x87a <vListInitialise>
    1f86:	89 e9       	ldi	r24, 0x99	; 153
    1f88:	9c e2       	ldi	r25, 0x2C	; 44
    1f8a:	80 93 8c 2c 	sts	0x2C8C, r24	; 0x802c8c <pxCurrentTimerList>
    1f8e:	90 93 8d 2c 	sts	0x2C8D, r25	; 0x802c8d <pxCurrentTimerList+0x1>
    1f92:	8e e8       	ldi	r24, 0x8E	; 142
    1f94:	9c e2       	ldi	r25, 0x2C	; 44
    1f96:	80 93 8a 2c 	sts	0x2C8A, r24	; 0x802c8a <pxOverflowTimerList>
    1f9a:	90 93 8b 2c 	sts	0x2C8B, r25	; 0x802c8b <pxOverflowTimerList+0x1>
    1f9e:	40 e0       	ldi	r20, 0x00	; 0
    1fa0:	69 e0       	ldi	r22, 0x09	; 9
    1fa2:	85 e0       	ldi	r24, 0x05	; 5
    1fa4:	0e 94 b3 07 	call	0xf66	; 0xf66 <xQueueGenericCreate>
    1fa8:	80 93 88 2c 	sts	0x2C88, r24	; 0x802c88 <xTimerQueue>
    1fac:	90 93 89 2c 	sts	0x2C89, r25	; 0x802c89 <xTimerQueue+0x1>
    1fb0:	ff 91       	pop	r31
    1fb2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1fb6:	08 95       	ret

00001fb8 <xTimerCreateTimerTask>:
    1fb8:	ef 92       	push	r14
    1fba:	ff 92       	push	r15
    1fbc:	0f 93       	push	r16
    1fbe:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <prvCheckForValidListAndQueue>
    1fc2:	80 91 88 2c 	lds	r24, 0x2C88	; 0x802c88 <xTimerQueue>
    1fc6:	90 91 89 2c 	lds	r25, 0x2C89	; 0x802c89 <xTimerQueue+0x1>
    1fca:	89 2b       	or	r24, r25
    1fcc:	91 f0       	breq	.+36     	; 0x1ff2 <xTimerCreateTimerTask+0x3a>
    1fce:	0f 2e       	mov	r0, r31
    1fd0:	f6 e8       	ldi	r31, 0x86	; 134
    1fd2:	ef 2e       	mov	r14, r31
    1fd4:	fc e2       	ldi	r31, 0x2C	; 44
    1fd6:	ff 2e       	mov	r15, r31
    1fd8:	f0 2d       	mov	r31, r0
    1fda:	03 e0       	ldi	r16, 0x03	; 3
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	48 ec       	ldi	r20, 0xC8	; 200
    1fe2:	50 e0       	ldi	r21, 0x00	; 0
    1fe4:	69 e0       	ldi	r22, 0x09	; 9
    1fe6:	70 e2       	ldi	r23, 0x20	; 32
    1fe8:	8a e4       	ldi	r24, 0x4A	; 74
    1fea:	92 e1       	ldi	r25, 0x12	; 18
    1fec:	0e 94 41 0b 	call	0x1682	; 0x1682 <xTaskCreate>
    1ff0:	01 c0       	rjmp	.+2      	; 0x1ff4 <xTimerCreateTimerTask+0x3c>
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	0f 91       	pop	r16
    1ff6:	ff 90       	pop	r15
    1ff8:	ef 90       	pop	r14
    1ffa:	08 95       	ret

00001ffc <xTimerGenericCommand>:
    1ffc:	8f 92       	push	r8
    1ffe:	9f 92       	push	r9
    2000:	af 92       	push	r10
    2002:	bf 92       	push	r11
    2004:	cf 92       	push	r12
    2006:	df 92       	push	r13
    2008:	ef 92       	push	r14
    200a:	ff 92       	push	r15
    200c:	0f 93       	push	r16
    200e:	1f 93       	push	r17
    2010:	cf 93       	push	r28
    2012:	df 93       	push	r29
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
    2018:	29 97       	sbiw	r28, 0x09	; 9
    201a:	cd bf       	out	0x3d, r28	; 61
    201c:	de bf       	out	0x3e, r29	; 62
    201e:	e0 91 88 2c 	lds	r30, 0x2C88	; 0x802c88 <xTimerQueue>
    2022:	f0 91 89 2c 	lds	r31, 0x2C89	; 0x802c89 <xTimerQueue+0x1>
    2026:	30 97       	sbiw	r30, 0x00	; 0
    2028:	89 f1       	breq	.+98     	; 0x208c <__DATA_REGION_LENGTH__+0x8c>
    202a:	69 83       	std	Y+1, r22	; 0x01
    202c:	2a 83       	std	Y+2, r18	; 0x02
    202e:	3b 83       	std	Y+3, r19	; 0x03
    2030:	4c 83       	std	Y+4, r20	; 0x04
    2032:	5d 83       	std	Y+5, r21	; 0x05
    2034:	8e 83       	std	Y+6, r24	; 0x06
    2036:	9f 83       	std	Y+7, r25	; 0x07
    2038:	66 30       	cpi	r22, 0x06	; 6
    203a:	fc f4       	brge	.+62     	; 0x207a <__DATA_REGION_LENGTH__+0x7a>
    203c:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <xTaskGetSchedulerState>
    2040:	82 30       	cpi	r24, 0x02	; 2
    2042:	69 f4       	brne	.+26     	; 0x205e <__DATA_REGION_LENGTH__+0x5e>
    2044:	00 e0       	ldi	r16, 0x00	; 0
    2046:	a7 01       	movw	r20, r14
    2048:	96 01       	movw	r18, r12
    204a:	be 01       	movw	r22, r28
    204c:	6f 5f       	subi	r22, 0xFF	; 255
    204e:	7f 4f       	sbci	r23, 0xFF	; 255
    2050:	80 91 88 2c 	lds	r24, 0x2C88	; 0x802c88 <xTimerQueue>
    2054:	90 91 89 2c 	lds	r25, 0x2C89	; 0x802c89 <xTimerQueue+0x1>
    2058:	0e 94 dd 07 	call	0xfba	; 0xfba <xQueueGenericSend>
    205c:	18 c0       	rjmp	.+48     	; 0x208e <__DATA_REGION_LENGTH__+0x8e>
    205e:	00 e0       	ldi	r16, 0x00	; 0
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	a9 01       	movw	r20, r18
    2066:	be 01       	movw	r22, r28
    2068:	6f 5f       	subi	r22, 0xFF	; 255
    206a:	7f 4f       	sbci	r23, 0xFF	; 255
    206c:	80 91 88 2c 	lds	r24, 0x2C88	; 0x802c88 <xTimerQueue>
    2070:	90 91 89 2c 	lds	r25, 0x2C89	; 0x802c89 <xTimerQueue+0x1>
    2074:	0e 94 dd 07 	call	0xfba	; 0xfba <xQueueGenericSend>
    2078:	0a c0       	rjmp	.+20     	; 0x208e <__DATA_REGION_LENGTH__+0x8e>
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	a8 01       	movw	r20, r16
    207e:	be 01       	movw	r22, r28
    2080:	6f 5f       	subi	r22, 0xFF	; 255
    2082:	7f 4f       	sbci	r23, 0xFF	; 255
    2084:	cf 01       	movw	r24, r30
    2086:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <xQueueGenericSendFromISR>
    208a:	01 c0       	rjmp	.+2      	; 0x208e <__DATA_REGION_LENGTH__+0x8e>
    208c:	80 e0       	ldi	r24, 0x00	; 0
    208e:	29 96       	adiw	r28, 0x09	; 9
    2090:	cd bf       	out	0x3d, r28	; 61
    2092:	de bf       	out	0x3e, r29	; 62
    2094:	df 91       	pop	r29
    2096:	cf 91       	pop	r28
    2098:	1f 91       	pop	r17
    209a:	0f 91       	pop	r16
    209c:	ff 90       	pop	r15
    209e:	ef 90       	pop	r14
    20a0:	df 90       	pop	r13
    20a2:	cf 90       	pop	r12
    20a4:	bf 90       	pop	r11
    20a6:	af 90       	pop	r10
    20a8:	9f 90       	pop	r9
    20aa:	8f 90       	pop	r8
    20ac:	08 95       	ret

000020ae <prvSwitchTimerLists>:
    20ae:	8f 92       	push	r8
    20b0:	9f 92       	push	r9
    20b2:	af 92       	push	r10
    20b4:	bf 92       	push	r11
    20b6:	cf 92       	push	r12
    20b8:	df 92       	push	r13
    20ba:	ef 92       	push	r14
    20bc:	ff 92       	push	r15
    20be:	0f 93       	push	r16
    20c0:	1f 93       	push	r17
    20c2:	cf 93       	push	r28
    20c4:	df 93       	push	r29
    20c6:	3c c0       	rjmp	.+120    	; 0x2140 <prvSwitchTimerLists+0x92>
    20c8:	07 80       	ldd	r0, Z+7	; 0x07
    20ca:	f0 85       	ldd	r31, Z+8	; 0x08
    20cc:	e0 2d       	mov	r30, r0
    20ce:	80 80       	ld	r8, Z
    20d0:	91 80       	ldd	r9, Z+1	; 0x01
    20d2:	a2 80       	ldd	r10, Z+2	; 0x02
    20d4:	b3 80       	ldd	r11, Z+3	; 0x03
    20d6:	c0 85       	ldd	r28, Z+8	; 0x08
    20d8:	d1 85       	ldd	r29, Z+9	; 0x09
    20da:	8e 01       	movw	r16, r28
    20dc:	0e 5f       	subi	r16, 0xFE	; 254
    20de:	1f 4f       	sbci	r17, 0xFF	; 255
    20e0:	c8 01       	movw	r24, r16
    20e2:	0e 94 b0 04 	call	0x960	; 0x960 <uxListRemove>
    20e6:	ed 89       	ldd	r30, Y+21	; 0x15
    20e8:	fe 89       	ldd	r31, Y+22	; 0x16
    20ea:	ce 01       	movw	r24, r28
    20ec:	19 95       	eicall
    20ee:	8a 89       	ldd	r24, Y+18	; 0x12
    20f0:	81 30       	cpi	r24, 0x01	; 1
    20f2:	31 f5       	brne	.+76     	; 0x2140 <prvSwitchTimerLists+0x92>
    20f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    20f6:	9f 85       	ldd	r25, Y+15	; 0x0f
    20f8:	a8 89       	ldd	r26, Y+16	; 0x10
    20fa:	b9 89       	ldd	r27, Y+17	; 0x11
    20fc:	88 0d       	add	r24, r8
    20fe:	99 1d       	adc	r25, r9
    2100:	aa 1d       	adc	r26, r10
    2102:	bb 1d       	adc	r27, r11
    2104:	88 16       	cp	r8, r24
    2106:	99 06       	cpc	r9, r25
    2108:	aa 06       	cpc	r10, r26
    210a:	bb 06       	cpc	r11, r27
    210c:	70 f4       	brcc	.+28     	; 0x212a <prvSwitchTimerLists+0x7c>
    210e:	8a 83       	std	Y+2, r24	; 0x02
    2110:	9b 83       	std	Y+3, r25	; 0x03
    2112:	ac 83       	std	Y+4, r26	; 0x04
    2114:	bd 83       	std	Y+5, r27	; 0x05
    2116:	ca 87       	std	Y+10, r28	; 0x0a
    2118:	db 87       	std	Y+11, r29	; 0x0b
    211a:	b8 01       	movw	r22, r16
    211c:	80 91 8c 2c 	lds	r24, 0x2C8C	; 0x802c8c <pxCurrentTimerList>
    2120:	90 91 8d 2c 	lds	r25, 0x2C8D	; 0x802c8d <pxCurrentTimerList+0x1>
    2124:	0e 94 73 04 	call	0x8e6	; 0x8e6 <vListInsert>
    2128:	0b c0       	rjmp	.+22     	; 0x2140 <prvSwitchTimerLists+0x92>
    212a:	c1 2c       	mov	r12, r1
    212c:	d1 2c       	mov	r13, r1
    212e:	76 01       	movw	r14, r12
    2130:	00 e0       	ldi	r16, 0x00	; 0
    2132:	10 e0       	ldi	r17, 0x00	; 0
    2134:	a5 01       	movw	r20, r10
    2136:	94 01       	movw	r18, r8
    2138:	60 e0       	ldi	r22, 0x00	; 0
    213a:	ce 01       	movw	r24, r28
    213c:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <xTimerGenericCommand>
    2140:	e0 91 8c 2c 	lds	r30, 0x2C8C	; 0x802c8c <pxCurrentTimerList>
    2144:	f0 91 8d 2c 	lds	r31, 0x2C8D	; 0x802c8d <pxCurrentTimerList+0x1>
    2148:	80 81       	ld	r24, Z
    214a:	81 11       	cpse	r24, r1
    214c:	bd cf       	rjmp	.-134    	; 0x20c8 <prvSwitchTimerLists+0x1a>
    214e:	80 91 8a 2c 	lds	r24, 0x2C8A	; 0x802c8a <pxOverflowTimerList>
    2152:	90 91 8b 2c 	lds	r25, 0x2C8B	; 0x802c8b <pxOverflowTimerList+0x1>
    2156:	80 93 8c 2c 	sts	0x2C8C, r24	; 0x802c8c <pxCurrentTimerList>
    215a:	90 93 8d 2c 	sts	0x2C8D, r25	; 0x802c8d <pxCurrentTimerList+0x1>
    215e:	e0 93 8a 2c 	sts	0x2C8A, r30	; 0x802c8a <pxOverflowTimerList>
    2162:	f0 93 8b 2c 	sts	0x2C8B, r31	; 0x802c8b <pxOverflowTimerList+0x1>
    2166:	df 91       	pop	r29
    2168:	cf 91       	pop	r28
    216a:	1f 91       	pop	r17
    216c:	0f 91       	pop	r16
    216e:	ff 90       	pop	r15
    2170:	ef 90       	pop	r14
    2172:	df 90       	pop	r13
    2174:	cf 90       	pop	r12
    2176:	bf 90       	pop	r11
    2178:	af 90       	pop	r10
    217a:	9f 90       	pop	r9
    217c:	8f 90       	pop	r8
    217e:	08 95       	ret

00002180 <prvSampleTimeNow>:
    2180:	cf 92       	push	r12
    2182:	df 92       	push	r13
    2184:	ef 92       	push	r14
    2186:	ff 92       	push	r15
    2188:	cf 93       	push	r28
    218a:	df 93       	push	r29
    218c:	ec 01       	movw	r28, r24
    218e:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <xTaskGetTickCount>
    2192:	6b 01       	movw	r12, r22
    2194:	7c 01       	movw	r14, r24
    2196:	80 91 82 2c 	lds	r24, 0x2C82	; 0x802c82 <xLastTime.4745>
    219a:	90 91 83 2c 	lds	r25, 0x2C83	; 0x802c83 <xLastTime.4745+0x1>
    219e:	a0 91 84 2c 	lds	r26, 0x2C84	; 0x802c84 <xLastTime.4745+0x2>
    21a2:	b0 91 85 2c 	lds	r27, 0x2C85	; 0x802c85 <xLastTime.4745+0x3>
    21a6:	c8 16       	cp	r12, r24
    21a8:	d9 06       	cpc	r13, r25
    21aa:	ea 06       	cpc	r14, r26
    21ac:	fb 06       	cpc	r15, r27
    21ae:	28 f4       	brcc	.+10     	; 0x21ba <prvSampleTimeNow+0x3a>
    21b0:	0e 94 57 10 	call	0x20ae	; 0x20ae <prvSwitchTimerLists>
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	88 83       	st	Y, r24
    21b8:	01 c0       	rjmp	.+2      	; 0x21bc <prvSampleTimeNow+0x3c>
    21ba:	18 82       	st	Y, r1
    21bc:	c0 92 82 2c 	sts	0x2C82, r12	; 0x802c82 <xLastTime.4745>
    21c0:	d0 92 83 2c 	sts	0x2C83, r13	; 0x802c83 <xLastTime.4745+0x1>
    21c4:	e0 92 84 2c 	sts	0x2C84, r14	; 0x802c84 <xLastTime.4745+0x2>
    21c8:	f0 92 85 2c 	sts	0x2C85, r15	; 0x802c85 <xLastTime.4745+0x3>
    21cc:	c7 01       	movw	r24, r14
    21ce:	b6 01       	movw	r22, r12
    21d0:	df 91       	pop	r29
    21d2:	cf 91       	pop	r28
    21d4:	ff 90       	pop	r15
    21d6:	ef 90       	pop	r14
    21d8:	df 90       	pop	r13
    21da:	cf 90       	pop	r12
    21dc:	08 95       	ret

000021de <prvProcessExpiredTimer>:
    21de:	4f 92       	push	r4
    21e0:	5f 92       	push	r5
    21e2:	6f 92       	push	r6
    21e4:	7f 92       	push	r7
    21e6:	8f 92       	push	r8
    21e8:	9f 92       	push	r9
    21ea:	af 92       	push	r10
    21ec:	bf 92       	push	r11
    21ee:	cf 92       	push	r12
    21f0:	df 92       	push	r13
    21f2:	ef 92       	push	r14
    21f4:	ff 92       	push	r15
    21f6:	0f 93       	push	r16
    21f8:	1f 93       	push	r17
    21fa:	cf 93       	push	r28
    21fc:	df 93       	push	r29
    21fe:	4b 01       	movw	r8, r22
    2200:	5c 01       	movw	r10, r24
    2202:	29 01       	movw	r4, r18
    2204:	3a 01       	movw	r6, r20
    2206:	e0 91 8c 2c 	lds	r30, 0x2C8C	; 0x802c8c <pxCurrentTimerList>
    220a:	f0 91 8d 2c 	lds	r31, 0x2C8D	; 0x802c8d <pxCurrentTimerList+0x1>
    220e:	07 80       	ldd	r0, Z+7	; 0x07
    2210:	f0 85       	ldd	r31, Z+8	; 0x08
    2212:	e0 2d       	mov	r30, r0
    2214:	c0 85       	ldd	r28, Z+8	; 0x08
    2216:	d1 85       	ldd	r29, Z+9	; 0x09
    2218:	ce 01       	movw	r24, r28
    221a:	02 96       	adiw	r24, 0x02	; 2
    221c:	0e 94 b0 04 	call	0x960	; 0x960 <uxListRemove>
    2220:	8a 89       	ldd	r24, Y+18	; 0x12
    2222:	81 30       	cpi	r24, 0x01	; 1
    2224:	e1 f4       	brne	.+56     	; 0x225e <prvProcessExpiredTimer+0x80>
    2226:	4e 85       	ldd	r20, Y+14	; 0x0e
    2228:	5f 85       	ldd	r21, Y+15	; 0x0f
    222a:	68 89       	ldd	r22, Y+16	; 0x10
    222c:	79 89       	ldd	r23, Y+17	; 0x11
    222e:	48 0d       	add	r20, r8
    2230:	59 1d       	adc	r21, r9
    2232:	6a 1d       	adc	r22, r10
    2234:	7b 1d       	adc	r23, r11
    2236:	75 01       	movw	r14, r10
    2238:	64 01       	movw	r12, r8
    223a:	93 01       	movw	r18, r6
    223c:	82 01       	movw	r16, r4
    223e:	ce 01       	movw	r24, r28
    2240:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <prvInsertTimerInActiveList>
    2244:	88 23       	and	r24, r24
    2246:	59 f0       	breq	.+22     	; 0x225e <prvProcessExpiredTimer+0x80>
    2248:	c1 2c       	mov	r12, r1
    224a:	d1 2c       	mov	r13, r1
    224c:	76 01       	movw	r14, r12
    224e:	00 e0       	ldi	r16, 0x00	; 0
    2250:	10 e0       	ldi	r17, 0x00	; 0
    2252:	a5 01       	movw	r20, r10
    2254:	94 01       	movw	r18, r8
    2256:	60 e0       	ldi	r22, 0x00	; 0
    2258:	ce 01       	movw	r24, r28
    225a:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <xTimerGenericCommand>
    225e:	ed 89       	ldd	r30, Y+21	; 0x15
    2260:	fe 89       	ldd	r31, Y+22	; 0x16
    2262:	ce 01       	movw	r24, r28
    2264:	19 95       	eicall
    2266:	df 91       	pop	r29
    2268:	cf 91       	pop	r28
    226a:	1f 91       	pop	r17
    226c:	0f 91       	pop	r16
    226e:	ff 90       	pop	r15
    2270:	ef 90       	pop	r14
    2272:	df 90       	pop	r13
    2274:	cf 90       	pop	r12
    2276:	bf 90       	pop	r11
    2278:	af 90       	pop	r10
    227a:	9f 90       	pop	r9
    227c:	8f 90       	pop	r8
    227e:	7f 90       	pop	r7
    2280:	6f 90       	pop	r6
    2282:	5f 90       	pop	r5
    2284:	4f 90       	pop	r4
    2286:	08 95       	ret

00002288 <prvProcessTimerOrBlockTask>:
    2288:	8f 92       	push	r8
    228a:	9f 92       	push	r9
    228c:	af 92       	push	r10
    228e:	bf 92       	push	r11
    2290:	cf 92       	push	r12
    2292:	df 92       	push	r13
    2294:	ef 92       	push	r14
    2296:	ff 92       	push	r15
    2298:	1f 93       	push	r17
    229a:	cf 93       	push	r28
    229c:	df 93       	push	r29
    229e:	1f 92       	push	r1
    22a0:	cd b7       	in	r28, 0x3d	; 61
    22a2:	de b7       	in	r29, 0x3e	; 62
    22a4:	6b 01       	movw	r12, r22
    22a6:	7c 01       	movw	r14, r24
    22a8:	14 2f       	mov	r17, r20
    22aa:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <vTaskSuspendAll>
    22ae:	ce 01       	movw	r24, r28
    22b0:	01 96       	adiw	r24, 0x01	; 1
    22b2:	0e 94 c0 10 	call	0x2180	; 0x2180 <prvSampleTimeNow>
    22b6:	4b 01       	movw	r8, r22
    22b8:	5c 01       	movw	r10, r24
    22ba:	89 81       	ldd	r24, Y+1	; 0x01
    22bc:	81 11       	cpse	r24, r1
    22be:	2e c0       	rjmp	.+92     	; 0x231c <prvProcessTimerOrBlockTask+0x94>
    22c0:	11 11       	cpse	r17, r1
    22c2:	0e c0       	rjmp	.+28     	; 0x22e0 <prvProcessTimerOrBlockTask+0x58>
    22c4:	8c 14       	cp	r8, r12
    22c6:	9d 04       	cpc	r9, r13
    22c8:	ae 04       	cpc	r10, r14
    22ca:	bf 04       	cpc	r11, r15
    22cc:	48 f0       	brcs	.+18     	; 0x22e0 <prvProcessTimerOrBlockTask+0x58>
    22ce:	0e 94 b8 0c 	call	0x1970	; 0x1970 <xTaskResumeAll>
    22d2:	a5 01       	movw	r20, r10
    22d4:	94 01       	movw	r18, r8
    22d6:	c7 01       	movw	r24, r14
    22d8:	b6 01       	movw	r22, r12
    22da:	0e 94 ef 10 	call	0x21de	; 0x21de <prvProcessExpiredTimer>
    22de:	20 c0       	rjmp	.+64     	; 0x2320 <prvProcessTimerOrBlockTask+0x98>
    22e0:	11 23       	and	r17, r17
    22e2:	41 f0       	breq	.+16     	; 0x22f4 <prvProcessTimerOrBlockTask+0x6c>
    22e4:	e0 91 8a 2c 	lds	r30, 0x2C8A	; 0x802c8a <pxOverflowTimerList>
    22e8:	f0 91 8b 2c 	lds	r31, 0x2C8B	; 0x802c8b <pxOverflowTimerList+0x1>
    22ec:	80 81       	ld	r24, Z
    22ee:	11 e0       	ldi	r17, 0x01	; 1
    22f0:	81 11       	cpse	r24, r1
    22f2:	10 e0       	ldi	r17, 0x00	; 0
    22f4:	b7 01       	movw	r22, r14
    22f6:	a6 01       	movw	r20, r12
    22f8:	48 19       	sub	r20, r8
    22fa:	59 09       	sbc	r21, r9
    22fc:	6a 09       	sbc	r22, r10
    22fe:	7b 09       	sbc	r23, r11
    2300:	21 2f       	mov	r18, r17
    2302:	80 91 88 2c 	lds	r24, 0x2C88	; 0x802c88 <xTimerQueue>
    2306:	90 91 89 2c 	lds	r25, 0x2C89	; 0x802c89 <xTimerQueue+0x1>
    230a:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <vQueueWaitForMessageRestricted>
    230e:	0e 94 b8 0c 	call	0x1970	; 0x1970 <xTaskResumeAll>
    2312:	81 11       	cpse	r24, r1
    2314:	05 c0       	rjmp	.+10     	; 0x2320 <prvProcessTimerOrBlockTask+0x98>
    2316:	0e 94 a8 05 	call	0xb50	; 0xb50 <vPortYield>
    231a:	02 c0       	rjmp	.+4      	; 0x2320 <prvProcessTimerOrBlockTask+0x98>
    231c:	0e 94 b8 0c 	call	0x1970	; 0x1970 <xTaskResumeAll>
    2320:	0f 90       	pop	r0
    2322:	df 91       	pop	r29
    2324:	cf 91       	pop	r28
    2326:	1f 91       	pop	r17
    2328:	ff 90       	pop	r15
    232a:	ef 90       	pop	r14
    232c:	df 90       	pop	r13
    232e:	cf 90       	pop	r12
    2330:	bf 90       	pop	r11
    2332:	af 90       	pop	r10
    2334:	9f 90       	pop	r9
    2336:	8f 90       	pop	r8
    2338:	08 95       	ret

0000233a <prvProcessReceivedCommands>:
    233a:	af 92       	push	r10
    233c:	bf 92       	push	r11
    233e:	cf 92       	push	r12
    2340:	df 92       	push	r13
    2342:	ef 92       	push	r14
    2344:	ff 92       	push	r15
    2346:	0f 93       	push	r16
    2348:	1f 93       	push	r17
    234a:	cf 93       	push	r28
    234c:	df 93       	push	r29
    234e:	cd b7       	in	r28, 0x3d	; 61
    2350:	de b7       	in	r29, 0x3e	; 62
    2352:	2a 97       	sbiw	r28, 0x0a	; 10
    2354:	cd bf       	out	0x3d, r28	; 61
    2356:	de bf       	out	0x3e, r29	; 62
    2358:	81 c0       	rjmp	.+258    	; 0x245c <prvProcessReceivedCommands+0x122>
    235a:	89 81       	ldd	r24, Y+1	; 0x01
    235c:	88 23       	and	r24, r24
    235e:	4c f4       	brge	.+18     	; 0x2372 <prvProcessReceivedCommands+0x38>
    2360:	ea 81       	ldd	r30, Y+2	; 0x02
    2362:	fb 81       	ldd	r31, Y+3	; 0x03
    2364:	4e 81       	ldd	r20, Y+6	; 0x06
    2366:	5f 81       	ldd	r21, Y+7	; 0x07
    2368:	68 85       	ldd	r22, Y+8	; 0x08
    236a:	79 85       	ldd	r23, Y+9	; 0x09
    236c:	8c 81       	ldd	r24, Y+4	; 0x04
    236e:	9d 81       	ldd	r25, Y+5	; 0x05
    2370:	19 95       	eicall
    2372:	89 81       	ldd	r24, Y+1	; 0x01
    2374:	88 23       	and	r24, r24
    2376:	0c f4       	brge	.+2      	; 0x237a <prvProcessReceivedCommands+0x40>
    2378:	71 c0       	rjmp	.+226    	; 0x245c <prvProcessReceivedCommands+0x122>
    237a:	ae 80       	ldd	r10, Y+6	; 0x06
    237c:	bf 80       	ldd	r11, Y+7	; 0x07
    237e:	d5 01       	movw	r26, r10
    2380:	1c 96       	adiw	r26, 0x0c	; 12
    2382:	8d 91       	ld	r24, X+
    2384:	9c 91       	ld	r25, X
    2386:	1d 97       	sbiw	r26, 0x0d	; 13
    2388:	89 2b       	or	r24, r25
    238a:	21 f0       	breq	.+8      	; 0x2394 <prvProcessReceivedCommands+0x5a>
    238c:	c5 01       	movw	r24, r10
    238e:	02 96       	adiw	r24, 0x02	; 2
    2390:	0e 94 b0 04 	call	0x960	; 0x960 <uxListRemove>
    2394:	ce 01       	movw	r24, r28
    2396:	0a 96       	adiw	r24, 0x0a	; 10
    2398:	0e 94 c0 10 	call	0x2180	; 0x2180 <prvSampleTimeNow>
    239c:	8b 01       	movw	r16, r22
    239e:	9c 01       	movw	r18, r24
    23a0:	89 81       	ldd	r24, Y+1	; 0x01
    23a2:	08 2e       	mov	r0, r24
    23a4:	00 0c       	add	r0, r0
    23a6:	99 0b       	sbc	r25, r25
    23a8:	aa 0b       	sbc	r26, r26
    23aa:	bb 0b       	sbc	r27, r27
    23ac:	8a 30       	cpi	r24, 0x0A	; 10
    23ae:	91 05       	cpc	r25, r1
    23b0:	08 f0       	brcs	.+2      	; 0x23b4 <prvProcessReceivedCommands+0x7a>
    23b2:	54 c0       	rjmp	.+168    	; 0x245c <prvProcessReceivedCommands+0x122>
    23b4:	fc 01       	movw	r30, r24
    23b6:	88 27       	eor	r24, r24
    23b8:	e2 50       	subi	r30, 0x02	; 2
    23ba:	ff 4f       	sbci	r31, 0xFF	; 255
    23bc:	8f 4f       	sbci	r24, 0xFF	; 255
    23be:	0c 94 43 1c 	jmp	0x3886	; 0x3886 <__tablejump2__>
    23c2:	ca 80       	ldd	r12, Y+2	; 0x02
    23c4:	db 80       	ldd	r13, Y+3	; 0x03
    23c6:	ec 80       	ldd	r14, Y+4	; 0x04
    23c8:	fd 80       	ldd	r15, Y+5	; 0x05
    23ca:	f5 01       	movw	r30, r10
    23cc:	46 85       	ldd	r20, Z+14	; 0x0e
    23ce:	57 85       	ldd	r21, Z+15	; 0x0f
    23d0:	60 89       	ldd	r22, Z+16	; 0x10
    23d2:	71 89       	ldd	r23, Z+17	; 0x11
    23d4:	4c 0d       	add	r20, r12
    23d6:	5d 1d       	adc	r21, r13
    23d8:	6e 1d       	adc	r22, r14
    23da:	7f 1d       	adc	r23, r15
    23dc:	c5 01       	movw	r24, r10
    23de:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <prvInsertTimerInActiveList>
    23e2:	88 23       	and	r24, r24
    23e4:	d9 f1       	breq	.+118    	; 0x245c <prvProcessReceivedCommands+0x122>
    23e6:	d5 01       	movw	r26, r10
    23e8:	55 96       	adiw	r26, 0x15	; 21
    23ea:	ed 91       	ld	r30, X+
    23ec:	fc 91       	ld	r31, X
    23ee:	56 97       	sbiw	r26, 0x16	; 22
    23f0:	c5 01       	movw	r24, r10
    23f2:	19 95       	eicall
    23f4:	f5 01       	movw	r30, r10
    23f6:	82 89       	ldd	r24, Z+18	; 0x12
    23f8:	81 30       	cpi	r24, 0x01	; 1
    23fa:	81 f5       	brne	.+96     	; 0x245c <prvProcessReceivedCommands+0x122>
    23fc:	4a 81       	ldd	r20, Y+2	; 0x02
    23fe:	5b 81       	ldd	r21, Y+3	; 0x03
    2400:	6c 81       	ldd	r22, Y+4	; 0x04
    2402:	7d 81       	ldd	r23, Y+5	; 0x05
    2404:	86 85       	ldd	r24, Z+14	; 0x0e
    2406:	97 85       	ldd	r25, Z+15	; 0x0f
    2408:	a0 89       	ldd	r26, Z+16	; 0x10
    240a:	b1 89       	ldd	r27, Z+17	; 0x11
    240c:	9a 01       	movw	r18, r20
    240e:	ab 01       	movw	r20, r22
    2410:	28 0f       	add	r18, r24
    2412:	39 1f       	adc	r19, r25
    2414:	4a 1f       	adc	r20, r26
    2416:	5b 1f       	adc	r21, r27
    2418:	c1 2c       	mov	r12, r1
    241a:	d1 2c       	mov	r13, r1
    241c:	76 01       	movw	r14, r12
    241e:	00 e0       	ldi	r16, 0x00	; 0
    2420:	10 e0       	ldi	r17, 0x00	; 0
    2422:	60 e0       	ldi	r22, 0x00	; 0
    2424:	c5 01       	movw	r24, r10
    2426:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <xTimerGenericCommand>
    242a:	18 c0       	rjmp	.+48     	; 0x245c <prvProcessReceivedCommands+0x122>
    242c:	4a 81       	ldd	r20, Y+2	; 0x02
    242e:	5b 81       	ldd	r21, Y+3	; 0x03
    2430:	6c 81       	ldd	r22, Y+4	; 0x04
    2432:	7d 81       	ldd	r23, Y+5	; 0x05
    2434:	d5 01       	movw	r26, r10
    2436:	1e 96       	adiw	r26, 0x0e	; 14
    2438:	4d 93       	st	X+, r20
    243a:	5d 93       	st	X+, r21
    243c:	6d 93       	st	X+, r22
    243e:	7c 93       	st	X, r23
    2440:	51 97       	sbiw	r26, 0x11	; 17
    2442:	40 0f       	add	r20, r16
    2444:	51 1f       	adc	r21, r17
    2446:	62 1f       	adc	r22, r18
    2448:	73 1f       	adc	r23, r19
    244a:	68 01       	movw	r12, r16
    244c:	79 01       	movw	r14, r18
    244e:	c5 01       	movw	r24, r10
    2450:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <prvInsertTimerInActiveList>
    2454:	03 c0       	rjmp	.+6      	; 0x245c <prvProcessReceivedCommands+0x122>
    2456:	c5 01       	movw	r24, r10
    2458:	0e 94 3c 04 	call	0x878	; 0x878 <vPortFree>
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	a9 01       	movw	r20, r18
    2462:	be 01       	movw	r22, r28
    2464:	6f 5f       	subi	r22, 0xFF	; 255
    2466:	7f 4f       	sbci	r23, 0xFF	; 255
    2468:	80 91 88 2c 	lds	r24, 0x2C88	; 0x802c88 <xTimerQueue>
    246c:	90 91 89 2c 	lds	r25, 0x2C89	; 0x802c89 <xTimerQueue+0x1>
    2470:	0e 94 c1 08 	call	0x1182	; 0x1182 <xQueueReceive>
    2474:	81 11       	cpse	r24, r1
    2476:	71 cf       	rjmp	.-286    	; 0x235a <prvProcessReceivedCommands+0x20>
    2478:	2a 96       	adiw	r28, 0x0a	; 10
    247a:	cd bf       	out	0x3d, r28	; 61
    247c:	de bf       	out	0x3e, r29	; 62
    247e:	df 91       	pop	r29
    2480:	cf 91       	pop	r28
    2482:	1f 91       	pop	r17
    2484:	0f 91       	pop	r16
    2486:	ff 90       	pop	r15
    2488:	ef 90       	pop	r14
    248a:	df 90       	pop	r13
    248c:	cf 90       	pop	r12
    248e:	bf 90       	pop	r11
    2490:	af 90       	pop	r10
    2492:	08 95       	ret

00002494 <prvTimerTask>:
    2494:	cf 93       	push	r28
    2496:	df 93       	push	r29
    2498:	1f 92       	push	r1
    249a:	cd b7       	in	r28, 0x3d	; 61
    249c:	de b7       	in	r29, 0x3e	; 62
    249e:	ce 01       	movw	r24, r28
    24a0:	01 96       	adiw	r24, 0x01	; 1
    24a2:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <prvGetNextExpireTime>
    24a6:	49 81       	ldd	r20, Y+1	; 0x01
    24a8:	0e 94 44 11 	call	0x2288	; 0x2288 <prvProcessTimerOrBlockTask>
    24ac:	0e 94 9d 11 	call	0x233a	; 0x233a <prvProcessReceivedCommands>
    24b0:	f6 cf       	rjmp	.-20     	; 0x249e <prvTimerTask+0xa>

000024b2 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
    24b2:	0f 93       	push	r16
    24b4:	1f 93       	push	r17
    24b6:	cf 93       	push	r28
    24b8:	df 93       	push	r29
    24ba:	cd b7       	in	r28, 0x3d	; 61
    24bc:	de b7       	in	r29, 0x3e	; 62
    24be:	29 97       	sbiw	r28, 0x09	; 9
    24c0:	cd bf       	out	0x3d, r28	; 61
    24c2:	de bf       	out	0x3e, r29	; 62
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
    24c4:	ee ef       	ldi	r30, 0xFE	; 254
    24c6:	e9 83       	std	Y+1, r30	; 0x01
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
    24c8:	8a 83       	std	Y+2, r24	; 0x02
    24ca:	9b 83       	std	Y+3, r25	; 0x03
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
    24cc:	6c 83       	std	Y+4, r22	; 0x04
    24ce:	7d 83       	std	Y+5, r23	; 0x05
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
    24d0:	2e 83       	std	Y+6, r18	; 0x06
    24d2:	3f 83       	std	Y+7, r19	; 0x07
    24d4:	48 87       	std	Y+8, r20	; 0x08
    24d6:	59 87       	std	Y+9, r21	; 0x09

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	a8 01       	movw	r20, r16
    24dc:	be 01       	movw	r22, r28
    24de:	6f 5f       	subi	r22, 0xFF	; 255
    24e0:	7f 4f       	sbci	r23, 0xFF	; 255
    24e2:	80 91 88 2c 	lds	r24, 0x2C88	; 0x802c88 <xTimerQueue>
    24e6:	90 91 89 2c 	lds	r25, 0x2C89	; 0x802c89 <xTimerQueue+0x1>
    24ea:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
    24ee:	29 96       	adiw	r28, 0x09	; 9
    24f0:	cd bf       	out	0x3d, r28	; 61
    24f2:	de bf       	out	0x3e, r29	; 62
    24f4:	df 91       	pop	r29
    24f6:	cf 91       	pop	r28
    24f8:	1f 91       	pop	r17
    24fa:	0f 91       	pop	r16
    24fc:	08 95       	ret

000024fe <vInitClock>:
#include "clksys_driver.h"


void vInitClock(void)
{
	CLKSYS_Enable( OSC_RC2MEN_bm );
    24fe:	e0 e5       	ldi	r30, 0x50	; 80
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	80 81       	ld	r24, Z
    2504:	81 60       	ori	r24, 0x01	; 1
    2506:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_RC2MRDY_bm ) == 0 );
    2508:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
    250c:	80 ff       	sbrs	r24, 0
    250e:	fc cf       	rjmp	.-8      	; 0x2508 <vInitClock+0xa>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC2M_gc );
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	0e 94 45 02 	call	0x48a	; 0x48a <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC32KEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
    2516:	8e e1       	ldi	r24, 0x1E	; 30
    2518:	0e 94 35 02 	call	0x46a	; 0x46a <CLKSYS_Disable>
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    251c:	60 e0       	ldi	r22, 0x00	; 0
    251e:	80 e0       	ldi	r24, 0x00	; 0
    2520:	0e 94 3f 02 	call	0x47e	; 0x47e <CLKSYS_Prescalers_Config>
	CLKSYS_XOSC_Config( OSC_FRQRANGE_2TO9_gc,false,OSC_XOSCSEL_XTAL_256CLK_gc );
    2524:	43 e0       	ldi	r20, 0x03	; 3
    2526:	60 e0       	ldi	r22, 0x00	; 0
    2528:	80 e4       	ldi	r24, 0x40	; 64
    252a:	0e 94 26 02 	call	0x44c	; 0x44c <CLKSYS_XOSC_Config>
	CLKSYS_Enable( OSC_XOSCEN_bm );
    252e:	e0 e5       	ldi	r30, 0x50	; 80
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	80 81       	ld	r24, Z
    2534:	88 60       	ori	r24, 0x08	; 8
    2536:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
    2538:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
    253c:	83 ff       	sbrs	r24, 3
    253e:	fc cf       	rjmp	.-8      	; 0x2538 <vInitClock+0x3a>
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 4 );
    2540:	64 e0       	ldi	r22, 0x04	; 4
    2542:	80 ec       	ldi	r24, 0xC0	; 192
    2544:	0e 94 30 02 	call	0x460	; 0x460 <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
    2548:	e0 e5       	ldi	r30, 0x50	; 80
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	80 81       	ld	r24, Z
    254e:	80 61       	ori	r24, 0x10	; 16
    2550:	80 83       	st	Z, r24
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    2552:	60 e0       	ldi	r22, 0x00	; 0
    2554:	80 e0       	ldi	r24, 0x00	; 0
    2556:	0e 94 3f 02 	call	0x47e	; 0x47e <CLKSYS_Prescalers_Config>
	do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
    255a:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
    255e:	84 ff       	sbrs	r24, 4
    2560:	fc cf       	rjmp	.-8      	; 0x255a <vInitClock+0x5c>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
    2562:	84 e0       	ldi	r24, 0x04	; 4
    2564:	0e 94 45 02 	call	0x48a	; 0x48a <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC2MEN_bm | OSC_RC32KEN_bm);
    2568:	87 e0       	ldi	r24, 0x07	; 7
    256a:	0e 94 35 02 	call	0x46a	; 0x46a <CLKSYS_Disable>
    256e:	08 95       	ret

00002570 <vPiLeibniz>:
}

void vPiLeibniz(void* pvParameters)
{
	uint32_t CurIterations = 0;
	float NextSign = 1.0;
    2570:	0f 2e       	mov	r0, r31
    2572:	81 2c       	mov	r8, r1
    2574:	91 2c       	mov	r9, r1
    2576:	f0 e8       	ldi	r31, 0x80	; 128
    2578:	af 2e       	mov	r10, r31
    257a:	ff e3       	ldi	r31, 0x3F	; 63
    257c:	bf 2e       	mov	r11, r31
    257e:	f0 2d       	mov	r31, r0
	return 0;
}

void vPiLeibniz(void* pvParameters)
{
	uint32_t CurIterations = 0;
    2580:	c1 2c       	mov	r12, r1
    2582:	d1 2c       	mov	r13, r1
    2584:	76 01       	movw	r14, r12
	float NextSign = 1.0;
		while (1)
		{
			
			LeibnizPi = LeibnizPi + (NextSign / (2 * CurIterations + 1)) * 4;
    2586:	d7 01       	movw	r26, r14
    2588:	c6 01       	movw	r24, r12
    258a:	88 0f       	add	r24, r24
    258c:	99 1f       	adc	r25, r25
    258e:	aa 1f       	adc	r26, r26
    2590:	bb 1f       	adc	r27, r27
    2592:	bc 01       	movw	r22, r24
    2594:	cd 01       	movw	r24, r26
    2596:	6f 5f       	subi	r22, 0xFF	; 255
    2598:	7f 4f       	sbci	r23, 0xFF	; 255
    259a:	8f 4f       	sbci	r24, 0xFF	; 255
    259c:	9f 4f       	sbci	r25, 0xFF	; 255
    259e:	0e 94 1f 1b 	call	0x363e	; 0x363e <__floatunsisf>
    25a2:	9b 01       	movw	r18, r22
    25a4:	ac 01       	movw	r20, r24
    25a6:	c5 01       	movw	r24, r10
    25a8:	b4 01       	movw	r22, r8
    25aa:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__divsf3>
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	40 e8       	ldi	r20, 0x80	; 128
    25b4:	50 e4       	ldi	r21, 0x40	; 64
    25b6:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <__mulsf3>
    25ba:	20 91 a4 2c 	lds	r18, 0x2CA4	; 0x802ca4 <LeibnizPi>
    25be:	30 91 a5 2c 	lds	r19, 0x2CA5	; 0x802ca5 <LeibnizPi+0x1>
    25c2:	40 91 a6 2c 	lds	r20, 0x2CA6	; 0x802ca6 <LeibnizPi+0x2>
    25c6:	50 91 a7 2c 	lds	r21, 0x2CA7	; 0x802ca7 <LeibnizPi+0x3>
    25ca:	0e 94 06 1a 	call	0x340c	; 0x340c <__addsf3>
    25ce:	60 93 a4 2c 	sts	0x2CA4, r22	; 0x802ca4 <LeibnizPi>
    25d2:	70 93 a5 2c 	sts	0x2CA5, r23	; 0x802ca5 <LeibnizPi+0x1>
    25d6:	80 93 a6 2c 	sts	0x2CA6, r24	; 0x802ca6 <LeibnizPi+0x2>
    25da:	90 93 a7 2c 	sts	0x2CA7, r25	; 0x802ca7 <LeibnizPi+0x3>
			NextSign = -NextSign;
    25de:	b7 fa       	bst	r11, 7
    25e0:	b0 94       	com	r11
    25e2:	b7 f8       	bld	r11, 7
    25e4:	b0 94       	com	r11
			CurIterations++;
    25e6:	8f ef       	ldi	r24, 0xFF	; 255
    25e8:	c8 1a       	sub	r12, r24
    25ea:	d8 0a       	sbc	r13, r24
    25ec:	e8 0a       	sbc	r14, r24
    25ee:	f8 0a       	sbc	r15, r24
    25f0:	ca cf       	rjmp	.-108    	; 0x2586 <vPiLeibniz+0x16>

000025f2 <VKreisflaeche>:
	uint32_t L = 0;
	uint32_t Ratio = 0;
	while (1)
	{

		RandX = rand();
    25f2:	0e 94 96 1c 	call	0x392c	; 0x392c <rand>
		RandX %= 51;
		Randy = rand();
    25f6:	0e 94 96 1c 	call	0x392c	; 0x392c <rand>
    25fa:	fb cf       	rjmp	.-10     	; 0x25f2 <VKreisflaeche>

000025fc <vButtonTask>:




void vButtonTask(void *pvParameters) {
	initButtons();
    25fc:	0e 94 4b 01 	call	0x296	; 0x296 <initButtons>
	vTaskDelay(3000);
    2600:	68 eb       	ldi	r22, 0xB8	; 184
    2602:	7b e0       	ldi	r23, 0x0B	; 11
    2604:	80 e0       	ldi	r24, 0x00	; 0
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <vTaskDelay>
	for(;;) {
		updateButtons();
    260c:	0e 94 56 01 	call	0x2ac	; 0x2ac <updateButtons>
		vTaskDelay((100/BUTTON_UPDATE_FREQUENCY_HZ)/portTICK_RATE_MS);
    2610:	61 e0       	ldi	r22, 0x01	; 1
    2612:	70 e0       	ldi	r23, 0x00	; 0
    2614:	80 e0       	ldi	r24, 0x00	; 0
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <vTaskDelay>
    261c:	f7 cf       	rjmp	.-18     	; 0x260c <vButtonTask+0x10>

0000261e <controllerTask>:
	}

}

void controllerTask(void* pvParameters) {
    261e:	cf 93       	push	r28
    2620:	df 93       	push	r29
    2622:	cd b7       	in	r28, 0x3d	; 61
    2624:	de b7       	in	r29, 0x3e	; 62
    2626:	2c 97       	sbiw	r28, 0x0c	; 12
    2628:	cd bf       	out	0x3d, r28	; 61
    262a:	de bf       	out	0x3e, r29	; 62
	initButtons();
    262c:	0e 94 4b 01 	call	0x296	; 0x296 <initButtons>
	for(;;) {
		updateButtons();
    2630:	0e 94 56 01 	call	0x2ac	; 0x2ac <updateButtons>
		if(getButtonPress(BUTTON1) == SHORT_PRESSED) {
    2634:	80 e0       	ldi	r24, 0x00	; 0
    2636:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <getButtonPress>
    263a:	81 30       	cpi	r24, 0x01	; 1
    263c:	11 f5       	brne	.+68     	; 0x2682 <controllerTask+0x64>
			char pistring[12];
			sprintf(&pistring[0], "PI: %.8f", M_PI);
    263e:	80 e4       	ldi	r24, 0x40	; 64
    2640:	8f 93       	push	r24
    2642:	89 e4       	ldi	r24, 0x49	; 73
    2644:	8f 93       	push	r24
    2646:	8f e0       	ldi	r24, 0x0F	; 15
    2648:	8f 93       	push	r24
    264a:	8b ed       	ldi	r24, 0xDB	; 219
    264c:	8f 93       	push	r24
    264e:	81 e1       	ldi	r24, 0x11	; 17
    2650:	90 e2       	ldi	r25, 0x20	; 32
    2652:	9f 93       	push	r25
    2654:	8f 93       	push	r24
    2656:	8e 01       	movw	r16, r28
    2658:	0f 5f       	subi	r16, 0xFF	; 255
    265a:	1f 4f       	sbci	r17, 0xFF	; 255
    265c:	1f 93       	push	r17
    265e:	0f 93       	push	r16
    2660:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <sprintf>
			vDisplayWriteStringAtPos(1,0, "%s", pistring);
    2664:	1f 93       	push	r17
    2666:	0f 93       	push	r16
    2668:	8a e1       	ldi	r24, 0x1A	; 26
    266a:	90 e2       	ldi	r25, 0x20	; 32
    266c:	9f 93       	push	r25
    266e:	8f 93       	push	r24
    2670:	1f 92       	push	r1
    2672:	1f 92       	push	r1
    2674:	1f 92       	push	r1
    2676:	81 e0       	ldi	r24, 0x01	; 1
    2678:	8f 93       	push	r24
    267a:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <vDisplayWriteStringAtPos>
    267e:	cd bf       	out	0x3d, r28	; 61
    2680:	de bf       	out	0x3e, r29	; 62
		}
		if(getButtonPress(BUTTON2) == SHORT_PRESSED) {
    2682:	81 e0       	ldi	r24, 0x01	; 1
    2684:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <getButtonPress>
			
		}
		if(getButtonPress(BUTTON3) == SHORT_PRESSED) {
    2688:	82 e0       	ldi	r24, 0x02	; 2
    268a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <getButtonPress>
			
		}
		if(getButtonPress(BUTTON4) == SHORT_PRESSED) {
    268e:	83 e0       	ldi	r24, 0x03	; 3
    2690:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <getButtonPress>
			
		}
		if(getButtonPress(BUTTON1) == LONG_PRESSED) {
    2694:	80 e0       	ldi	r24, 0x00	; 0
    2696:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <getButtonPress>
			
		}
		if(getButtonPress(BUTTON2) == LONG_PRESSED) {
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <getButtonPress>
			
		}
		if(getButtonPress(BUTTON3) == LONG_PRESSED) {
    26a0:	82 e0       	ldi	r24, 0x02	; 2
    26a2:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <getButtonPress>
			
		}
		if(getButtonPress(BUTTON4) == LONG_PRESSED) {
    26a6:	83 e0       	ldi	r24, 0x03	; 3
    26a8:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <getButtonPress>
			
		}
		vTaskDelay(10/portTICK_RATE_MS);
    26ac:	6a e0       	ldi	r22, 0x0A	; 10
    26ae:	70 e0       	ldi	r23, 0x00	; 0
    26b0:	80 e0       	ldi	r24, 0x00	; 0
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <vTaskDelay>
	}
    26b8:	bb cf       	rjmp	.-138    	; 0x2630 <controllerTask+0x12>

000026ba <vApplicationIdleHook>:
void VKreisflaeche(void* pvParameters);

TaskHandle_t ledTask;

void vApplicationIdleHook( void )
{	
    26ba:	08 95       	ret

000026bc <main>:
	
}

int main(void)
{
    26bc:	ef 92       	push	r14
    26be:	ff 92       	push	r15
    26c0:	0f 93       	push	r16
	vInitClock();
    26c2:	0e 94 7f 12 	call	0x24fe	; 0x24fe <vInitClock>
	vInitDisplay();
    26c6:	0e 94 67 18 	call	0x30ce	; 0x30ce <vInitDisplay>
	
	xTaskCreate(controllerTask, (const char *) "control_tsk", configMINIMAL_STACK_SIZE+150, NULL, 3, NULL);
    26ca:	e1 2c       	mov	r14, r1
    26cc:	f1 2c       	mov	r15, r1
    26ce:	03 e0       	ldi	r16, 0x03	; 3
    26d0:	20 e0       	ldi	r18, 0x00	; 0
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	4e e5       	ldi	r20, 0x5E	; 94
    26d6:	51 e0       	ldi	r21, 0x01	; 1
    26d8:	6d e1       	ldi	r22, 0x1D	; 29
    26da:	70 e2       	ldi	r23, 0x20	; 32
    26dc:	8f e0       	ldi	r24, 0x0F	; 15
    26de:	93 e1       	ldi	r25, 0x13	; 19
    26e0:	0e 94 41 0b 	call	0x1682	; 0x1682 <xTaskCreate>
	xTaskCreate(vButtonTask, (const char *) "btTask", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
    26e4:	02 e0       	ldi	r16, 0x02	; 2
    26e6:	20 e0       	ldi	r18, 0x00	; 0
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	48 ec       	ldi	r20, 0xC8	; 200
    26ec:	50 e0       	ldi	r21, 0x00	; 0
    26ee:	69 e2       	ldi	r22, 0x29	; 41
    26f0:	70 e2       	ldi	r23, 0x20	; 32
    26f2:	8e ef       	ldi	r24, 0xFE	; 254
    26f4:	92 e1       	ldi	r25, 0x12	; 18
    26f6:	0e 94 41 0b 	call	0x1682	; 0x1682 <xTaskCreate>
	//xTaskCreate( vTimeMeasurement, (const char *) "TimeMeasurement", configMINIMAL_STACK_SIZE+10, NULL, 1, &TimeMeasurement);
	xTaskCreate( vPiLeibniz, (const char *) "Leibniz_tsk", configMINIMAL_STACK_SIZE+10, NULL, 2, NULL);
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	42 ed       	ldi	r20, 0xD2	; 210
    2700:	50 e0       	ldi	r21, 0x00	; 0
    2702:	60 e3       	ldi	r22, 0x30	; 48
    2704:	70 e2       	ldi	r23, 0x20	; 32
    2706:	88 eb       	ldi	r24, 0xB8	; 184
    2708:	92 e1       	ldi	r25, 0x12	; 18
    270a:	0e 94 41 0b 	call	0x1682	; 0x1682 <xTaskCreate>
	xTaskCreate( VKreisflaeche, (const char *) "KFL_tsk", configMINIMAL_STACK_SIZE+10, NULL, 1, NULL);
    270e:	01 e0       	ldi	r16, 0x01	; 1
    2710:	20 e0       	ldi	r18, 0x00	; 0
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	42 ed       	ldi	r20, 0xD2	; 210
    2716:	50 e0       	ldi	r21, 0x00	; 0
    2718:	6c e3       	ldi	r22, 0x3C	; 60
    271a:	70 e2       	ldi	r23, 0x20	; 32
    271c:	89 ef       	ldi	r24, 0xF9	; 249
    271e:	92 e1       	ldi	r25, 0x12	; 18
    2720:	0e 94 41 0b 	call	0x1682	; 0x1682 <xTaskCreate>
	
	vTaskStartScheduler();
    2724:	0e 94 95 0b 	call	0x172a	; 0x172a <vTaskStartScheduler>
	
	return 0;
}
    2728:	80 e0       	ldi	r24, 0x00	; 0
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	0f 91       	pop	r16
    272e:	ff 90       	pop	r15
    2730:	ef 90       	pop	r14
    2732:	08 95       	ret

00002734 <normalize>:
	 }
 }
 

void vDisplayClear() {
	xEventGroupSetBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    2734:	cf 92       	push	r12
    2736:	df 92       	push	r13
    2738:	ef 92       	push	r14
    273a:	ff 92       	push	r15
    273c:	0f 93       	push	r16
    273e:	1f 93       	push	r17
    2740:	cf 93       	push	r28
    2742:	df 93       	push	r29
    2744:	8c 01       	movw	r16, r24
    2746:	fc 01       	movw	r30, r24
    2748:	c0 80       	ld	r12, Z
    274a:	d1 80       	ldd	r13, Z+1	; 0x01
    274c:	e2 80       	ldd	r14, Z+2	; 0x02
    274e:	f3 80       	ldd	r15, Z+3	; 0x03
    2750:	c0 e0       	ldi	r28, 0x00	; 0
    2752:	d0 e0       	ldi	r29, 0x00	; 0
    2754:	0b c0       	rjmp	.+22     	; 0x276c <normalize+0x38>
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	40 e2       	ldi	r20, 0x20	; 32
    275c:	51 e4       	ldi	r21, 0x41	; 65
    275e:	c7 01       	movw	r24, r14
    2760:	b6 01       	movw	r22, r12
    2762:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__divsf3>
    2766:	6b 01       	movw	r12, r22
    2768:	7c 01       	movw	r14, r24
    276a:	21 96       	adiw	r28, 0x01	; 1
    276c:	20 e0       	ldi	r18, 0x00	; 0
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	40 e8       	ldi	r20, 0x80	; 128
    2772:	5f e3       	ldi	r21, 0x3F	; 63
    2774:	c7 01       	movw	r24, r14
    2776:	b6 01       	movw	r22, r12
    2778:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <__gesf2>
    277c:	88 23       	and	r24, r24
    277e:	5c f7       	brge	.-42     	; 0x2756 <normalize+0x22>
    2780:	0b c0       	rjmp	.+22     	; 0x2798 <normalize+0x64>
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	40 e2       	ldi	r20, 0x20	; 32
    2788:	51 e4       	ldi	r21, 0x41	; 65
    278a:	c7 01       	movw	r24, r14
    278c:	b6 01       	movw	r22, r12
    278e:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <__mulsf3>
    2792:	6b 01       	movw	r12, r22
    2794:	7c 01       	movw	r14, r24
    2796:	21 97       	sbiw	r28, 0x01	; 1
    2798:	2d ec       	ldi	r18, 0xCD	; 205
    279a:	3c ec       	ldi	r19, 0xCC	; 204
    279c:	4c ec       	ldi	r20, 0xCC	; 204
    279e:	5d e3       	ldi	r21, 0x3D	; 61
    27a0:	c7 01       	movw	r24, r14
    27a2:	b6 01       	movw	r22, r12
    27a4:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <__cmpsf2>
    27a8:	88 23       	and	r24, r24
    27aa:	5c f3       	brlt	.-42     	; 0x2782 <normalize+0x4e>
    27ac:	f8 01       	movw	r30, r16
    27ae:	c0 82       	st	Z, r12
    27b0:	d1 82       	std	Z+1, r13	; 0x01
    27b2:	e2 82       	std	Z+2, r14	; 0x02
    27b4:	f3 82       	std	Z+3, r15	; 0x03
    27b6:	ce 01       	movw	r24, r28
    27b8:	df 91       	pop	r29
    27ba:	cf 91       	pop	r28
    27bc:	1f 91       	pop	r17
    27be:	0f 91       	pop	r16
    27c0:	ff 90       	pop	r15
    27c2:	ef 90       	pop	r14
    27c4:	df 90       	pop	r13
    27c6:	cf 90       	pop	r12
    27c8:	08 95       	ret

000027ca <ftoa_fixed>:
    27ca:	4f 92       	push	r4
    27cc:	5f 92       	push	r5
    27ce:	6f 92       	push	r6
    27d0:	7f 92       	push	r7
    27d2:	8f 92       	push	r8
    27d4:	9f 92       	push	r9
    27d6:	af 92       	push	r10
    27d8:	bf 92       	push	r11
    27da:	cf 92       	push	r12
    27dc:	df 92       	push	r13
    27de:	ef 92       	push	r14
    27e0:	ff 92       	push	r15
    27e2:	0f 93       	push	r16
    27e4:	1f 93       	push	r17
    27e6:	cf 93       	push	r28
    27e8:	df 93       	push	r29
    27ea:	00 d0       	rcall	.+0      	; 0x27ec <ftoa_fixed+0x22>
    27ec:	1f 92       	push	r1
    27ee:	cd b7       	in	r28, 0x3d	; 61
    27f0:	de b7       	in	r29, 0x3e	; 62
    27f2:	5c 01       	movw	r10, r24
    27f4:	e4 2e       	mov	r14, r20
    27f6:	f5 2e       	mov	r15, r21
    27f8:	06 2f       	mov	r16, r22
    27fa:	17 2f       	mov	r17, r23
    27fc:	49 83       	std	Y+1, r20	; 0x01
    27fe:	5a 83       	std	Y+2, r21	; 0x02
    2800:	6b 83       	std	Y+3, r22	; 0x03
    2802:	7c 83       	std	Y+4, r23	; 0x04
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	a9 01       	movw	r20, r18
    280a:	6e 2d       	mov	r22, r14
    280c:	7f 2d       	mov	r23, r15
    280e:	80 2f       	mov	r24, r16
    2810:	91 2f       	mov	r25, r17
    2812:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <__cmpsf2>
    2816:	81 11       	cpse	r24, r1
    2818:	05 c0       	rjmp	.+10     	; 0x2824 <ftoa_fixed+0x5a>
    281a:	80 e3       	ldi	r24, 0x30	; 48
    281c:	f5 01       	movw	r30, r10
    281e:	80 83       	st	Z, r24
    2820:	11 82       	std	Z+1, r1	; 0x01
    2822:	b9 c0       	rjmp	.+370    	; 0x2996 <ftoa_fixed+0x1cc>
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	a9 01       	movw	r20, r18
    282a:	6e 2d       	mov	r22, r14
    282c:	7f 2d       	mov	r23, r15
    282e:	80 2f       	mov	r24, r16
    2830:	91 2f       	mov	r25, r17
    2832:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <__cmpsf2>
    2836:	88 23       	and	r24, r24
    2838:	7c f4       	brge	.+30     	; 0x2858 <ftoa_fixed+0x8e>
    283a:	8d e2       	ldi	r24, 0x2D	; 45
    283c:	f5 01       	movw	r30, r10
    283e:	80 83       	st	Z, r24
    2840:	89 81       	ldd	r24, Y+1	; 0x01
    2842:	9a 81       	ldd	r25, Y+2	; 0x02
    2844:	ab 81       	ldd	r26, Y+3	; 0x03
    2846:	bc 81       	ldd	r27, Y+4	; 0x04
    2848:	b0 58       	subi	r27, 0x80	; 128
    284a:	89 83       	std	Y+1, r24	; 0x01
    284c:	9a 83       	std	Y+2, r25	; 0x02
    284e:	ab 83       	std	Y+3, r26	; 0x03
    2850:	bc 83       	std	Y+4, r27	; 0x04
    2852:	c5 01       	movw	r24, r10
    2854:	01 96       	adiw	r24, 0x01	; 1
    2856:	5c 01       	movw	r10, r24
    2858:	ce 01       	movw	r24, r28
    285a:	01 96       	adiw	r24, 0x01	; 1
    285c:	0e 94 9a 13 	call	0x2734	; 0x2734 <normalize>
    2860:	7c 01       	movw	r14, r24
    2862:	00 e0       	ldi	r16, 0x00	; 0
    2864:	10 e0       	ldi	r17, 0x00	; 0
    2866:	38 c0       	rjmp	.+112    	; 0x28d8 <ftoa_fixed+0x10e>
    2868:	20 e0       	ldi	r18, 0x00	; 0
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	40 e2       	ldi	r20, 0x20	; 32
    286e:	51 e4       	ldi	r21, 0x41	; 65
    2870:	69 81       	ldd	r22, Y+1	; 0x01
    2872:	7a 81       	ldd	r23, Y+2	; 0x02
    2874:	8b 81       	ldd	r24, Y+3	; 0x03
    2876:	9c 81       	ldd	r25, Y+4	; 0x04
    2878:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <__mulsf3>
    287c:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__fixsfsi>
    2880:	2b 01       	movw	r4, r22
    2882:	3c 01       	movw	r6, r24
    2884:	65 01       	movw	r12, r10
    2886:	9f ef       	ldi	r25, 0xFF	; 255
    2888:	c9 1a       	sub	r12, r25
    288a:	d9 0a       	sbc	r13, r25
    288c:	80 e3       	ldi	r24, 0x30	; 48
    288e:	84 0d       	add	r24, r4
    2890:	f5 01       	movw	r30, r10
    2892:	80 83       	st	Z, r24
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	40 e2       	ldi	r20, 0x20	; 32
    289a:	51 e4       	ldi	r21, 0x41	; 65
    289c:	69 81       	ldd	r22, Y+1	; 0x01
    289e:	7a 81       	ldd	r23, Y+2	; 0x02
    28a0:	8b 81       	ldd	r24, Y+3	; 0x03
    28a2:	9c 81       	ldd	r25, Y+4	; 0x04
    28a4:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <__mulsf3>
    28a8:	4b 01       	movw	r8, r22
    28aa:	5c 01       	movw	r10, r24
    28ac:	b2 01       	movw	r22, r4
    28ae:	55 0c       	add	r5, r5
    28b0:	88 0b       	sbc	r24, r24
    28b2:	99 0b       	sbc	r25, r25
    28b4:	0e 94 21 1b 	call	0x3642	; 0x3642 <__floatsisf>
    28b8:	9b 01       	movw	r18, r22
    28ba:	ac 01       	movw	r20, r24
    28bc:	c5 01       	movw	r24, r10
    28be:	b4 01       	movw	r22, r8
    28c0:	0e 94 05 1a 	call	0x340a	; 0x340a <__subsf3>
    28c4:	69 83       	std	Y+1, r22	; 0x01
    28c6:	7a 83       	std	Y+2, r23	; 0x02
    28c8:	8b 83       	std	Y+3, r24	; 0x03
    28ca:	9c 83       	std	Y+4, r25	; 0x04
    28cc:	0f 5f       	subi	r16, 0xFF	; 255
    28ce:	1f 4f       	sbci	r17, 0xFF	; 255
    28d0:	f1 e0       	ldi	r31, 0x01	; 1
    28d2:	ef 1a       	sub	r14, r31
    28d4:	f1 08       	sbc	r15, r1
    28d6:	56 01       	movw	r10, r12
    28d8:	1e 14       	cp	r1, r14
    28da:	1f 04       	cpc	r1, r15
    28dc:	2c f2       	brlt	.-118    	; 0x2868 <ftoa_fixed+0x9e>
    28de:	01 15       	cp	r16, r1
    28e0:	11 05       	cpc	r17, r1
    28e2:	31 f4       	brne	.+12     	; 0x28f0 <ftoa_fixed+0x126>
    28e4:	80 e3       	ldi	r24, 0x30	; 48
    28e6:	f5 01       	movw	r30, r10
    28e8:	80 83       	st	Z, r24
    28ea:	c5 01       	movw	r24, r10
    28ec:	01 96       	adiw	r24, 0x01	; 1
    28ee:	5c 01       	movw	r10, r24
    28f0:	65 01       	movw	r12, r10
    28f2:	9f ef       	ldi	r25, 0xFF	; 255
    28f4:	c9 1a       	sub	r12, r25
    28f6:	d9 0a       	sbc	r13, r25
    28f8:	8e e2       	ldi	r24, 0x2E	; 46
    28fa:	f5 01       	movw	r30, r10
    28fc:	80 83       	st	Z, r24
    28fe:	0b c0       	rjmp	.+22     	; 0x2916 <ftoa_fixed+0x14c>
    2900:	80 e3       	ldi	r24, 0x30	; 48
    2902:	f6 01       	movw	r30, r12
    2904:	80 83       	st	Z, r24
    2906:	f1 e0       	ldi	r31, 0x01	; 1
    2908:	ef 1a       	sub	r14, r31
    290a:	f1 08       	sbc	r15, r1
    290c:	0f 5f       	subi	r16, 0xFF	; 255
    290e:	1f 4f       	sbci	r17, 0xFF	; 255
    2910:	c6 01       	movw	r24, r12
    2912:	01 96       	adiw	r24, 0x01	; 1
    2914:	6c 01       	movw	r12, r24
    2916:	ff 20       	and	r15, r15
    2918:	cc f5       	brge	.+114    	; 0x298c <ftoa_fixed+0x1c2>
    291a:	04 30       	cpi	r16, 0x04	; 4
    291c:	11 05       	cpc	r17, r1
    291e:	84 f3       	brlt	.-32     	; 0x2900 <ftoa_fixed+0x136>
    2920:	35 c0       	rjmp	.+106    	; 0x298c <ftoa_fixed+0x1c2>
    2922:	20 e0       	ldi	r18, 0x00	; 0
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	40 e2       	ldi	r20, 0x20	; 32
    2928:	51 e4       	ldi	r21, 0x41	; 65
    292a:	69 81       	ldd	r22, Y+1	; 0x01
    292c:	7a 81       	ldd	r23, Y+2	; 0x02
    292e:	8b 81       	ldd	r24, Y+3	; 0x03
    2930:	9c 81       	ldd	r25, Y+4	; 0x04
    2932:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <__mulsf3>
    2936:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__fixsfsi>
    293a:	4b 01       	movw	r8, r22
    293c:	5c 01       	movw	r10, r24
    293e:	76 01       	movw	r14, r12
    2940:	9f ef       	ldi	r25, 0xFF	; 255
    2942:	e9 1a       	sub	r14, r25
    2944:	f9 0a       	sbc	r15, r25
    2946:	80 e3       	ldi	r24, 0x30	; 48
    2948:	88 0d       	add	r24, r8
    294a:	f6 01       	movw	r30, r12
    294c:	80 83       	st	Z, r24
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	40 e2       	ldi	r20, 0x20	; 32
    2954:	51 e4       	ldi	r21, 0x41	; 65
    2956:	69 81       	ldd	r22, Y+1	; 0x01
    2958:	7a 81       	ldd	r23, Y+2	; 0x02
    295a:	8b 81       	ldd	r24, Y+3	; 0x03
    295c:	9c 81       	ldd	r25, Y+4	; 0x04
    295e:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <__mulsf3>
    2962:	2b 01       	movw	r4, r22
    2964:	3c 01       	movw	r6, r24
    2966:	b4 01       	movw	r22, r8
    2968:	99 0c       	add	r9, r9
    296a:	88 0b       	sbc	r24, r24
    296c:	99 0b       	sbc	r25, r25
    296e:	0e 94 21 1b 	call	0x3642	; 0x3642 <__floatsisf>
    2972:	9b 01       	movw	r18, r22
    2974:	ac 01       	movw	r20, r24
    2976:	c3 01       	movw	r24, r6
    2978:	b2 01       	movw	r22, r4
    297a:	0e 94 05 1a 	call	0x340a	; 0x340a <__subsf3>
    297e:	69 83       	std	Y+1, r22	; 0x01
    2980:	7a 83       	std	Y+2, r23	; 0x02
    2982:	8b 83       	std	Y+3, r24	; 0x03
    2984:	9c 83       	std	Y+4, r25	; 0x04
    2986:	0f 5f       	subi	r16, 0xFF	; 255
    2988:	1f 4f       	sbci	r17, 0xFF	; 255
    298a:	67 01       	movw	r12, r14
    298c:	04 30       	cpi	r16, 0x04	; 4
    298e:	11 05       	cpc	r17, r1
    2990:	44 f2       	brlt	.-112    	; 0x2922 <ftoa_fixed+0x158>
    2992:	f6 01       	movw	r30, r12
    2994:	10 82       	st	Z, r1
    2996:	24 96       	adiw	r28, 0x04	; 4
    2998:	cd bf       	out	0x3d, r28	; 61
    299a:	de bf       	out	0x3e, r29	; 62
    299c:	df 91       	pop	r29
    299e:	cf 91       	pop	r28
    29a0:	1f 91       	pop	r17
    29a2:	0f 91       	pop	r16
    29a4:	ff 90       	pop	r15
    29a6:	ef 90       	pop	r14
    29a8:	df 90       	pop	r13
    29aa:	cf 90       	pop	r12
    29ac:	bf 90       	pop	r11
    29ae:	af 90       	pop	r10
    29b0:	9f 90       	pop	r9
    29b2:	8f 90       	pop	r8
    29b4:	7f 90       	pop	r7
    29b6:	6f 90       	pop	r6
    29b8:	5f 90       	pop	r5
    29ba:	4f 90       	pop	r4
    29bc:	08 95       	ret

000029be <ftoa_sci>:
    29be:	2f 92       	push	r2
    29c0:	3f 92       	push	r3
    29c2:	4f 92       	push	r4
    29c4:	5f 92       	push	r5
    29c6:	6f 92       	push	r6
    29c8:	7f 92       	push	r7
    29ca:	8f 92       	push	r8
    29cc:	9f 92       	push	r9
    29ce:	af 92       	push	r10
    29d0:	bf 92       	push	r11
    29d2:	cf 92       	push	r12
    29d4:	df 92       	push	r13
    29d6:	ef 92       	push	r14
    29d8:	ff 92       	push	r15
    29da:	0f 93       	push	r16
    29dc:	1f 93       	push	r17
    29de:	cf 93       	push	r28
    29e0:	df 93       	push	r29
    29e2:	cd b7       	in	r28, 0x3d	; 61
    29e4:	de b7       	in	r29, 0x3e	; 62
    29e6:	28 97       	sbiw	r28, 0x08	; 8
    29e8:	cd bf       	out	0x3d, r28	; 61
    29ea:	de bf       	out	0x3e, r29	; 62
    29ec:	7c 01       	movw	r14, r24
    29ee:	c4 2e       	mov	r12, r20
    29f0:	d5 2e       	mov	r13, r21
    29f2:	06 2f       	mov	r16, r22
    29f4:	17 2f       	mov	r17, r23
    29f6:	49 83       	std	Y+1, r20	; 0x01
    29f8:	5a 83       	std	Y+2, r21	; 0x02
    29fa:	6b 83       	std	Y+3, r22	; 0x03
    29fc:	7c 83       	std	Y+4, r23	; 0x04
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	a9 01       	movw	r20, r18
    2a04:	6c 2d       	mov	r22, r12
    2a06:	7d 2d       	mov	r23, r13
    2a08:	80 2f       	mov	r24, r16
    2a0a:	91 2f       	mov	r25, r17
    2a0c:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <__cmpsf2>
    2a10:	81 11       	cpse	r24, r1
    2a12:	05 c0       	rjmp	.+10     	; 0x2a1e <ftoa_sci+0x60>
    2a14:	80 e3       	ldi	r24, 0x30	; 48
    2a16:	f7 01       	movw	r30, r14
    2a18:	80 83       	st	Z, r24
    2a1a:	11 82       	std	Z+1, r1	; 0x01
    2a1c:	a2 c0       	rjmp	.+324    	; 0x2b62 <ftoa_sci+0x1a4>
    2a1e:	20 e0       	ldi	r18, 0x00	; 0
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	a9 01       	movw	r20, r18
    2a24:	6c 2d       	mov	r22, r12
    2a26:	7d 2d       	mov	r23, r13
    2a28:	80 2f       	mov	r24, r16
    2a2a:	91 2f       	mov	r25, r17
    2a2c:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <__cmpsf2>
    2a30:	88 23       	and	r24, r24
    2a32:	7c f4       	brge	.+30     	; 0x2a52 <ftoa_sci+0x94>
    2a34:	8d e2       	ldi	r24, 0x2D	; 45
    2a36:	f7 01       	movw	r30, r14
    2a38:	80 83       	st	Z, r24
    2a3a:	89 81       	ldd	r24, Y+1	; 0x01
    2a3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a3e:	ab 81       	ldd	r26, Y+3	; 0x03
    2a40:	bc 81       	ldd	r27, Y+4	; 0x04
    2a42:	b0 58       	subi	r27, 0x80	; 128
    2a44:	89 83       	std	Y+1, r24	; 0x01
    2a46:	9a 83       	std	Y+2, r25	; 0x02
    2a48:	ab 83       	std	Y+3, r26	; 0x03
    2a4a:	bc 83       	std	Y+4, r27	; 0x04
    2a4c:	c7 01       	movw	r24, r14
    2a4e:	01 96       	adiw	r24, 0x01	; 1
    2a50:	7c 01       	movw	r14, r24
    2a52:	ce 01       	movw	r24, r28
    2a54:	01 96       	adiw	r24, 0x01	; 1
    2a56:	0e 94 9a 13 	call	0x2734	; 0x2734 <normalize>
    2a5a:	5c 01       	movw	r10, r24
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	40 e2       	ldi	r20, 0x20	; 32
    2a62:	51 e4       	ldi	r21, 0x41	; 65
    2a64:	69 81       	ldd	r22, Y+1	; 0x01
    2a66:	7a 81       	ldd	r23, Y+2	; 0x02
    2a68:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a6c:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <__mulsf3>
    2a70:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__fixsfsi>
    2a74:	2b 01       	movw	r4, r22
    2a76:	3c 01       	movw	r6, r24
    2a78:	80 e3       	ldi	r24, 0x30	; 48
    2a7a:	84 0d       	add	r24, r4
    2a7c:	f7 01       	movw	r30, r14
    2a7e:	80 83       	st	Z, r24
    2a80:	20 e0       	ldi	r18, 0x00	; 0
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	40 e2       	ldi	r20, 0x20	; 32
    2a86:	51 e4       	ldi	r21, 0x41	; 65
    2a88:	69 81       	ldd	r22, Y+1	; 0x01
    2a8a:	7a 81       	ldd	r23, Y+2	; 0x02
    2a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a90:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <__mulsf3>
    2a94:	6d 83       	std	Y+5, r22	; 0x05
    2a96:	7e 83       	std	Y+6, r23	; 0x06
    2a98:	8f 83       	std	Y+7, r24	; 0x07
    2a9a:	98 87       	std	Y+8, r25	; 0x08
    2a9c:	b2 01       	movw	r22, r4
    2a9e:	55 0c       	add	r5, r5
    2aa0:	88 0b       	sbc	r24, r24
    2aa2:	99 0b       	sbc	r25, r25
    2aa4:	0e 94 21 1b 	call	0x3642	; 0x3642 <__floatsisf>
    2aa8:	9b 01       	movw	r18, r22
    2aaa:	ac 01       	movw	r20, r24
    2aac:	6d 81       	ldd	r22, Y+5	; 0x05
    2aae:	7e 81       	ldd	r23, Y+6	; 0x06
    2ab0:	8f 81       	ldd	r24, Y+7	; 0x07
    2ab2:	98 85       	ldd	r25, Y+8	; 0x08
    2ab4:	0e 94 05 1a 	call	0x340a	; 0x340a <__subsf3>
    2ab8:	69 83       	std	Y+1, r22	; 0x01
    2aba:	7a 83       	std	Y+2, r23	; 0x02
    2abc:	8b 83       	std	Y+3, r24	; 0x03
    2abe:	9c 83       	std	Y+4, r25	; 0x04
    2ac0:	15 01       	movw	r2, r10
    2ac2:	f1 e0       	ldi	r31, 0x01	; 1
    2ac4:	2f 1a       	sub	r2, r31
    2ac6:	31 08       	sbc	r3, r1
    2ac8:	87 01       	movw	r16, r14
    2aca:	0e 5f       	subi	r16, 0xFE	; 254
    2acc:	1f 4f       	sbci	r17, 0xFF	; 255
    2ace:	8e e2       	ldi	r24, 0x2E	; 46
    2ad0:	f7 01       	movw	r30, r14
    2ad2:	81 83       	std	Z+1, r24	; 0x01
    2ad4:	e1 2c       	mov	r14, r1
    2ad6:	f1 2c       	mov	r15, r1
    2ad8:	36 c0       	rjmp	.+108    	; 0x2b46 <ftoa_sci+0x188>
    2ada:	20 e0       	ldi	r18, 0x00	; 0
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	40 e2       	ldi	r20, 0x20	; 32
    2ae0:	51 e4       	ldi	r21, 0x41	; 65
    2ae2:	69 81       	ldd	r22, Y+1	; 0x01
    2ae4:	7a 81       	ldd	r23, Y+2	; 0x02
    2ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae8:	9c 81       	ldd	r25, Y+4	; 0x04
    2aea:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <__mulsf3>
    2aee:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <__fixsfsi>
    2af2:	2b 01       	movw	r4, r22
    2af4:	3c 01       	movw	r6, r24
    2af6:	68 01       	movw	r12, r16
    2af8:	ff ef       	ldi	r31, 0xFF	; 255
    2afa:	cf 1a       	sub	r12, r31
    2afc:	df 0a       	sbc	r13, r31
    2afe:	80 e3       	ldi	r24, 0x30	; 48
    2b00:	84 0d       	add	r24, r4
    2b02:	f8 01       	movw	r30, r16
    2b04:	80 83       	st	Z, r24
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	40 e2       	ldi	r20, 0x20	; 32
    2b0c:	51 e4       	ldi	r21, 0x41	; 65
    2b0e:	69 81       	ldd	r22, Y+1	; 0x01
    2b10:	7a 81       	ldd	r23, Y+2	; 0x02
    2b12:	8b 81       	ldd	r24, Y+3	; 0x03
    2b14:	9c 81       	ldd	r25, Y+4	; 0x04
    2b16:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <__mulsf3>
    2b1a:	4b 01       	movw	r8, r22
    2b1c:	5c 01       	movw	r10, r24
    2b1e:	b2 01       	movw	r22, r4
    2b20:	55 0c       	add	r5, r5
    2b22:	88 0b       	sbc	r24, r24
    2b24:	99 0b       	sbc	r25, r25
    2b26:	0e 94 21 1b 	call	0x3642	; 0x3642 <__floatsisf>
    2b2a:	9b 01       	movw	r18, r22
    2b2c:	ac 01       	movw	r20, r24
    2b2e:	c5 01       	movw	r24, r10
    2b30:	b4 01       	movw	r22, r8
    2b32:	0e 94 05 1a 	call	0x340a	; 0x340a <__subsf3>
    2b36:	69 83       	std	Y+1, r22	; 0x01
    2b38:	7a 83       	std	Y+2, r23	; 0x02
    2b3a:	8b 83       	std	Y+3, r24	; 0x03
    2b3c:	9c 83       	std	Y+4, r25	; 0x04
    2b3e:	ff ef       	ldi	r31, 0xFF	; 255
    2b40:	ef 1a       	sub	r14, r31
    2b42:	ff 0a       	sbc	r15, r31
    2b44:	86 01       	movw	r16, r12
    2b46:	84 e0       	ldi	r24, 0x04	; 4
    2b48:	e8 16       	cp	r14, r24
    2b4a:	f1 04       	cpc	r15, r1
    2b4c:	34 f2       	brlt	.-116    	; 0x2ada <ftoa_sci+0x11c>
    2b4e:	b8 01       	movw	r22, r16
    2b50:	6f 5f       	subi	r22, 0xFF	; 255
    2b52:	7f 4f       	sbci	r23, 0xFF	; 255
    2b54:	85 e6       	ldi	r24, 0x65	; 101
    2b56:	f8 01       	movw	r30, r16
    2b58:	80 83       	st	Z, r24
    2b5a:	4a e0       	ldi	r20, 0x0A	; 10
    2b5c:	c1 01       	movw	r24, r2
    2b5e:	0e 94 b5 1c 	call	0x396a	; 0x396a <__itoa_ncheck>
    2b62:	28 96       	adiw	r28, 0x08	; 8
    2b64:	cd bf       	out	0x3d, r28	; 61
    2b66:	de bf       	out	0x3e, r29	; 62
    2b68:	df 91       	pop	r29
    2b6a:	cf 91       	pop	r28
    2b6c:	1f 91       	pop	r17
    2b6e:	0f 91       	pop	r16
    2b70:	ff 90       	pop	r15
    2b72:	ef 90       	pop	r14
    2b74:	df 90       	pop	r13
    2b76:	cf 90       	pop	r12
    2b78:	bf 90       	pop	r11
    2b7a:	af 90       	pop	r10
    2b7c:	9f 90       	pop	r9
    2b7e:	8f 90       	pop	r8
    2b80:	7f 90       	pop	r7
    2b82:	6f 90       	pop	r6
    2b84:	5f 90       	pop	r5
    2b86:	4f 90       	pop	r4
    2b88:	3f 90       	pop	r3
    2b8a:	2f 90       	pop	r2
    2b8c:	08 95       	ret

00002b8e <display_vprintf>:
    2b8e:	6f 92       	push	r6
    2b90:	7f 92       	push	r7
    2b92:	8f 92       	push	r8
    2b94:	9f 92       	push	r9
    2b96:	bf 92       	push	r11
    2b98:	cf 92       	push	r12
    2b9a:	df 92       	push	r13
    2b9c:	ef 92       	push	r14
    2b9e:	ff 92       	push	r15
    2ba0:	0f 93       	push	r16
    2ba2:	1f 93       	push	r17
    2ba4:	cf 93       	push	r28
    2ba6:	df 93       	push	r29
    2ba8:	cd b7       	in	r28, 0x3d	; 61
    2baa:	de b7       	in	r29, 0x3e	; 62
    2bac:	66 97       	sbiw	r28, 0x16	; 22
    2bae:	cd bf       	out	0x3d, r28	; 61
    2bb0:	de bf       	out	0x3e, r29	; 62
    2bb2:	b8 2e       	mov	r11, r24
    2bb4:	8b 01       	movw	r16, r22
    2bb6:	da 01       	movw	r26, r20
    2bb8:	39 01       	movw	r6, r18
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	05 c0       	rjmp	.+10     	; 0x2bca <display_vprintf+0x3c>
    2bc0:	fc 01       	movw	r30, r24
    2bc2:	e4 54       	subi	r30, 0x44	; 68
    2bc4:	f3 4d       	sbci	r31, 0xD3	; 211
    2bc6:	10 82       	st	Z, r1
    2bc8:	01 96       	adiw	r24, 0x01	; 1
    2bca:	84 31       	cpi	r24, 0x14	; 20
    2bcc:	91 05       	cpc	r25, r1
    2bce:	c4 f3       	brlt	.-16     	; 0x2bc0 <display_vprintf+0x32>
    2bd0:	80 e0       	ldi	r24, 0x00	; 0
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	05 c0       	rjmp	.+10     	; 0x2be0 <display_vprintf+0x52>
    2bd6:	fc 01       	movw	r30, r24
    2bd8:	e8 55       	subi	r30, 0x58	; 88
    2bda:	f3 4d       	sbci	r31, 0xD3	; 211
    2bdc:	10 82       	st	Z, r1
    2bde:	01 96       	adiw	r24, 0x01	; 1
    2be0:	84 31       	cpi	r24, 0x14	; 20
    2be2:	91 05       	cpc	r25, r1
    2be4:	c4 f3       	brlt	.-16     	; 0x2bd6 <display_vprintf+0x48>
    2be6:	e1 2c       	mov	r14, r1
    2be8:	f1 2c       	mov	r15, r1
    2bea:	14 c1       	rjmp	.+552    	; 0x2e14 <display_vprintf+0x286>
    2bec:	85 32       	cpi	r24, 0x25	; 37
    2bee:	09 f0       	breq	.+2      	; 0x2bf2 <display_vprintf+0x64>
    2bf0:	01 c1       	rjmp	.+514    	; 0x2df4 <display_vprintf+0x266>
    2bf2:	6d 01       	movw	r12, r26
    2bf4:	82 e0       	ldi	r24, 0x02	; 2
    2bf6:	c8 0e       	add	r12, r24
    2bf8:	d1 1c       	adc	r13, r1
    2bfa:	11 96       	adiw	r26, 0x01	; 1
    2bfc:	8c 91       	ld	r24, X
    2bfe:	85 36       	cpi	r24, 0x65	; 101
    2c00:	09 f4       	brne	.+2      	; 0x2c04 <display_vprintf+0x76>
    2c02:	cd c0       	rjmp	.+410    	; 0x2d9e <display_vprintf+0x210>
    2c04:	38 f4       	brcc	.+14     	; 0x2c14 <display_vprintf+0x86>
    2c06:	83 36       	cpi	r24, 0x63	; 99
    2c08:	c1 f0       	breq	.+48     	; 0x2c3a <display_vprintf+0xac>
    2c0a:	08 f0       	brcs	.+2      	; 0x2c0e <display_vprintf+0x80>
    2c0c:	49 c0       	rjmp	.+146    	; 0x2ca0 <display_vprintf+0x112>
    2c0e:	85 32       	cpi	r24, 0x25	; 37
    2c10:	51 f0       	breq	.+20     	; 0x2c26 <display_vprintf+0x98>
    2c12:	ff c0       	rjmp	.+510    	; 0x2e12 <display_vprintf+0x284>
    2c14:	83 37       	cpi	r24, 0x73	; 115
    2c16:	f9 f0       	breq	.+62     	; 0x2c56 <display_vprintf+0xc8>
    2c18:	88 37       	cpi	r24, 0x78	; 120
    2c1a:	09 f4       	brne	.+2      	; 0x2c1e <display_vprintf+0x90>
    2c1c:	6b c0       	rjmp	.+214    	; 0x2cf4 <display_vprintf+0x166>
    2c1e:	86 36       	cpi	r24, 0x66	; 102
    2c20:	09 f0       	breq	.+2      	; 0x2c24 <display_vprintf+0x96>
    2c22:	f7 c0       	rjmp	.+494    	; 0x2e12 <display_vprintf+0x284>
    2c24:	91 c0       	rjmp	.+290    	; 0x2d48 <display_vprintf+0x1ba>
    2c26:	d7 01       	movw	r26, r14
    2c28:	a8 55       	subi	r26, 0x58	; 88
    2c2a:	b3 4d       	sbci	r27, 0xD3	; 211
    2c2c:	85 e2       	ldi	r24, 0x25	; 37
    2c2e:	8c 93       	st	X, r24
    2c30:	9f ef       	ldi	r25, 0xFF	; 255
    2c32:	e9 1a       	sub	r14, r25
    2c34:	f9 0a       	sbc	r15, r25
    2c36:	d6 01       	movw	r26, r12
    2c38:	ed c0       	rjmp	.+474    	; 0x2e14 <display_vprintf+0x286>
    2c3a:	f3 01       	movw	r30, r6
    2c3c:	80 81       	ld	r24, Z
    2c3e:	d7 01       	movw	r26, r14
    2c40:	a8 55       	subi	r26, 0x58	; 88
    2c42:	b3 4d       	sbci	r27, 0xD3	; 211
    2c44:	8c 93       	st	X, r24
    2c46:	ff ef       	ldi	r31, 0xFF	; 255
    2c48:	ef 1a       	sub	r14, r31
    2c4a:	ff 0a       	sbc	r15, r31
    2c4c:	c3 01       	movw	r24, r6
    2c4e:	02 96       	adiw	r24, 0x02	; 2
    2c50:	3c 01       	movw	r6, r24
    2c52:	d6 01       	movw	r26, r12
    2c54:	df c0       	rjmp	.+446    	; 0x2e14 <display_vprintf+0x286>
    2c56:	93 01       	movw	r18, r6
    2c58:	2e 5f       	subi	r18, 0xFE	; 254
    2c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c5c:	f3 01       	movw	r30, r6
    2c5e:	a0 81       	ld	r26, Z
    2c60:	b1 81       	ldd	r27, Z+1	; 0x01
    2c62:	80 e0       	ldi	r24, 0x00	; 0
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	0d c0       	rjmp	.+26     	; 0x2c82 <display_vprintf+0xf4>
    2c68:	b7 01       	movw	r22, r14
    2c6a:	68 0f       	add	r22, r24
    2c6c:	79 1f       	adc	r23, r25
    2c6e:	ad 01       	movw	r20, r26
    2c70:	48 0f       	add	r20, r24
    2c72:	59 1f       	adc	r21, r25
    2c74:	fa 01       	movw	r30, r20
    2c76:	40 81       	ld	r20, Z
    2c78:	fb 01       	movw	r30, r22
    2c7a:	e8 55       	subi	r30, 0x58	; 88
    2c7c:	f3 4d       	sbci	r31, 0xD3	; 211
    2c7e:	40 83       	st	Z, r20
    2c80:	01 96       	adiw	r24, 0x01	; 1
    2c82:	fd 01       	movw	r30, r26
    2c84:	01 90       	ld	r0, Z+
    2c86:	00 20       	and	r0, r0
    2c88:	e9 f7       	brne	.-6      	; 0x2c84 <display_vprintf+0xf6>
    2c8a:	31 97       	sbiw	r30, 0x01	; 1
    2c8c:	ea 1b       	sub	r30, r26
    2c8e:	fb 0b       	sbc	r31, r27
    2c90:	8e 17       	cp	r24, r30
    2c92:	9f 07       	cpc	r25, r31
    2c94:	48 f3       	brcs	.-46     	; 0x2c68 <display_vprintf+0xda>
    2c96:	ee 0e       	add	r14, r30
    2c98:	ff 1e       	adc	r15, r31
    2c9a:	39 01       	movw	r6, r18
    2c9c:	d6 01       	movw	r26, r12
    2c9e:	ba c0       	rjmp	.+372    	; 0x2e14 <display_vprintf+0x286>
    2ca0:	43 01       	movw	r8, r6
    2ca2:	f2 e0       	ldi	r31, 0x02	; 2
    2ca4:	8f 0e       	add	r8, r31
    2ca6:	91 1c       	adc	r9, r1
    2ca8:	4a e0       	ldi	r20, 0x0A	; 10
    2caa:	6c eb       	ldi	r22, 0xBC	; 188
    2cac:	7c e2       	ldi	r23, 0x2C	; 44
    2cae:	f3 01       	movw	r30, r6
    2cb0:	80 81       	ld	r24, Z
    2cb2:	91 81       	ldd	r25, Z+1	; 0x01
    2cb4:	0e 94 b5 1c 	call	0x396a	; 0x396a <__itoa_ncheck>
    2cb8:	80 e0       	ldi	r24, 0x00	; 0
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	0b c0       	rjmp	.+22     	; 0x2cd4 <display_vprintf+0x146>
    2cbe:	f7 01       	movw	r30, r14
    2cc0:	e8 0f       	add	r30, r24
    2cc2:	f9 1f       	adc	r31, r25
    2cc4:	dc 01       	movw	r26, r24
    2cc6:	a4 54       	subi	r26, 0x44	; 68
    2cc8:	b3 4d       	sbci	r27, 0xD3	; 211
    2cca:	2c 91       	ld	r18, X
    2ccc:	e8 55       	subi	r30, 0x58	; 88
    2cce:	f3 4d       	sbci	r31, 0xD3	; 211
    2cd0:	20 83       	st	Z, r18
    2cd2:	01 96       	adiw	r24, 0x01	; 1
    2cd4:	ec eb       	ldi	r30, 0xBC	; 188
    2cd6:	fc e2       	ldi	r31, 0x2C	; 44
    2cd8:	01 90       	ld	r0, Z+
    2cda:	00 20       	and	r0, r0
    2cdc:	e9 f7       	brne	.-6      	; 0x2cd8 <display_vprintf+0x14a>
    2cde:	31 97       	sbiw	r30, 0x01	; 1
    2ce0:	ec 5b       	subi	r30, 0xBC	; 188
    2ce2:	fc 42       	sbci	r31, 0x2C	; 44
    2ce4:	8e 17       	cp	r24, r30
    2ce6:	9f 07       	cpc	r25, r31
    2ce8:	50 f3       	brcs	.-44     	; 0x2cbe <display_vprintf+0x130>
    2cea:	ee 0e       	add	r14, r30
    2cec:	ff 1e       	adc	r15, r31
    2cee:	34 01       	movw	r6, r8
    2cf0:	d6 01       	movw	r26, r12
    2cf2:	90 c0       	rjmp	.+288    	; 0x2e14 <display_vprintf+0x286>
    2cf4:	43 01       	movw	r8, r6
    2cf6:	f2 e0       	ldi	r31, 0x02	; 2
    2cf8:	8f 0e       	add	r8, r31
    2cfa:	91 1c       	adc	r9, r1
    2cfc:	40 e1       	ldi	r20, 0x10	; 16
    2cfe:	6c eb       	ldi	r22, 0xBC	; 188
    2d00:	7c e2       	ldi	r23, 0x2C	; 44
    2d02:	f3 01       	movw	r30, r6
    2d04:	80 81       	ld	r24, Z
    2d06:	91 81       	ldd	r25, Z+1	; 0x01
    2d08:	0e 94 b5 1c 	call	0x396a	; 0x396a <__itoa_ncheck>
    2d0c:	80 e0       	ldi	r24, 0x00	; 0
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	0b c0       	rjmp	.+22     	; 0x2d28 <display_vprintf+0x19a>
    2d12:	f7 01       	movw	r30, r14
    2d14:	e8 0f       	add	r30, r24
    2d16:	f9 1f       	adc	r31, r25
    2d18:	dc 01       	movw	r26, r24
    2d1a:	a4 54       	subi	r26, 0x44	; 68
    2d1c:	b3 4d       	sbci	r27, 0xD3	; 211
    2d1e:	2c 91       	ld	r18, X
    2d20:	e8 55       	subi	r30, 0x58	; 88
    2d22:	f3 4d       	sbci	r31, 0xD3	; 211
    2d24:	20 83       	st	Z, r18
    2d26:	01 96       	adiw	r24, 0x01	; 1
    2d28:	ec eb       	ldi	r30, 0xBC	; 188
    2d2a:	fc e2       	ldi	r31, 0x2C	; 44
    2d2c:	01 90       	ld	r0, Z+
    2d2e:	00 20       	and	r0, r0
    2d30:	e9 f7       	brne	.-6      	; 0x2d2c <display_vprintf+0x19e>
    2d32:	31 97       	sbiw	r30, 0x01	; 1
    2d34:	ec 5b       	subi	r30, 0xBC	; 188
    2d36:	fc 42       	sbci	r31, 0x2C	; 44
    2d38:	8e 17       	cp	r24, r30
    2d3a:	9f 07       	cpc	r25, r31
    2d3c:	50 f3       	brcs	.-44     	; 0x2d12 <display_vprintf+0x184>
    2d3e:	ee 0e       	add	r14, r30
    2d40:	ff 1e       	adc	r15, r31
    2d42:	34 01       	movw	r6, r8
    2d44:	d6 01       	movw	r26, r12
    2d46:	66 c0       	rjmp	.+204    	; 0x2e14 <display_vprintf+0x286>
    2d48:	43 01       	movw	r8, r6
    2d4a:	f4 e0       	ldi	r31, 0x04	; 4
    2d4c:	8f 0e       	add	r8, r31
    2d4e:	91 1c       	adc	r9, r1
    2d50:	f3 01       	movw	r30, r6
    2d52:	40 81       	ld	r20, Z
    2d54:	51 81       	ldd	r21, Z+1	; 0x01
    2d56:	62 81       	ldd	r22, Z+2	; 0x02
    2d58:	73 81       	ldd	r23, Z+3	; 0x03
    2d5a:	8c eb       	ldi	r24, 0xBC	; 188
    2d5c:	9c e2       	ldi	r25, 0x2C	; 44
    2d5e:	0e 94 e5 13 	call	0x27ca	; 0x27ca <ftoa_fixed>
    2d62:	80 e0       	ldi	r24, 0x00	; 0
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	0b c0       	rjmp	.+22     	; 0x2d7e <display_vprintf+0x1f0>
    2d68:	f7 01       	movw	r30, r14
    2d6a:	e8 0f       	add	r30, r24
    2d6c:	f9 1f       	adc	r31, r25
    2d6e:	dc 01       	movw	r26, r24
    2d70:	a4 54       	subi	r26, 0x44	; 68
    2d72:	b3 4d       	sbci	r27, 0xD3	; 211
    2d74:	2c 91       	ld	r18, X
    2d76:	e8 55       	subi	r30, 0x58	; 88
    2d78:	f3 4d       	sbci	r31, 0xD3	; 211
    2d7a:	20 83       	st	Z, r18
    2d7c:	01 96       	adiw	r24, 0x01	; 1
    2d7e:	ec eb       	ldi	r30, 0xBC	; 188
    2d80:	fc e2       	ldi	r31, 0x2C	; 44
    2d82:	01 90       	ld	r0, Z+
    2d84:	00 20       	and	r0, r0
    2d86:	e9 f7       	brne	.-6      	; 0x2d82 <display_vprintf+0x1f4>
    2d88:	31 97       	sbiw	r30, 0x01	; 1
    2d8a:	ec 5b       	subi	r30, 0xBC	; 188
    2d8c:	fc 42       	sbci	r31, 0x2C	; 44
    2d8e:	8e 17       	cp	r24, r30
    2d90:	9f 07       	cpc	r25, r31
    2d92:	50 f3       	brcs	.-44     	; 0x2d68 <display_vprintf+0x1da>
    2d94:	ee 0e       	add	r14, r30
    2d96:	ff 1e       	adc	r15, r31
    2d98:	34 01       	movw	r6, r8
    2d9a:	d6 01       	movw	r26, r12
    2d9c:	3b c0       	rjmp	.+118    	; 0x2e14 <display_vprintf+0x286>
    2d9e:	43 01       	movw	r8, r6
    2da0:	f4 e0       	ldi	r31, 0x04	; 4
    2da2:	8f 0e       	add	r8, r31
    2da4:	91 1c       	adc	r9, r1
    2da6:	f3 01       	movw	r30, r6
    2da8:	40 81       	ld	r20, Z
    2daa:	51 81       	ldd	r21, Z+1	; 0x01
    2dac:	62 81       	ldd	r22, Z+2	; 0x02
    2dae:	73 81       	ldd	r23, Z+3	; 0x03
    2db0:	8c eb       	ldi	r24, 0xBC	; 188
    2db2:	9c e2       	ldi	r25, 0x2C	; 44
    2db4:	0e 94 df 14 	call	0x29be	; 0x29be <ftoa_sci>
    2db8:	80 e0       	ldi	r24, 0x00	; 0
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	0b c0       	rjmp	.+22     	; 0x2dd4 <display_vprintf+0x246>
    2dbe:	f7 01       	movw	r30, r14
    2dc0:	e8 0f       	add	r30, r24
    2dc2:	f9 1f       	adc	r31, r25
    2dc4:	dc 01       	movw	r26, r24
    2dc6:	a4 54       	subi	r26, 0x44	; 68
    2dc8:	b3 4d       	sbci	r27, 0xD3	; 211
    2dca:	2c 91       	ld	r18, X
    2dcc:	e8 55       	subi	r30, 0x58	; 88
    2dce:	f3 4d       	sbci	r31, 0xD3	; 211
    2dd0:	20 83       	st	Z, r18
    2dd2:	01 96       	adiw	r24, 0x01	; 1
    2dd4:	ec eb       	ldi	r30, 0xBC	; 188
    2dd6:	fc e2       	ldi	r31, 0x2C	; 44
    2dd8:	01 90       	ld	r0, Z+
    2dda:	00 20       	and	r0, r0
    2ddc:	e9 f7       	brne	.-6      	; 0x2dd8 <display_vprintf+0x24a>
    2dde:	31 97       	sbiw	r30, 0x01	; 1
    2de0:	ec 5b       	subi	r30, 0xBC	; 188
    2de2:	fc 42       	sbci	r31, 0x2C	; 44
    2de4:	8e 17       	cp	r24, r30
    2de6:	9f 07       	cpc	r25, r31
    2de8:	50 f3       	brcs	.-44     	; 0x2dbe <display_vprintf+0x230>
    2dea:	ee 0e       	add	r14, r30
    2dec:	ff 1e       	adc	r15, r31
    2dee:	34 01       	movw	r6, r8
    2df0:	d6 01       	movw	r26, r12
    2df2:	10 c0       	rjmp	.+32     	; 0x2e14 <display_vprintf+0x286>
    2df4:	d7 01       	movw	r26, r14
    2df6:	a8 55       	subi	r26, 0x58	; 88
    2df8:	b3 4d       	sbci	r27, 0xD3	; 211
    2dfa:	8c 93       	st	X, r24
    2dfc:	8a 30       	cpi	r24, 0x0A	; 10
    2dfe:	21 f4       	brne	.+8      	; 0x2e08 <display_vprintf+0x27a>
    2e00:	d7 01       	movw	r26, r14
    2e02:	a8 55       	subi	r26, 0x58	; 88
    2e04:	b3 4d       	sbci	r27, 0xD3	; 211
    2e06:	1c 92       	st	X, r1
    2e08:	ff ef       	ldi	r31, 0xFF	; 255
    2e0a:	ef 1a       	sub	r14, r31
    2e0c:	ff 0a       	sbc	r15, r31
    2e0e:	d9 01       	movw	r26, r18
    2e10:	01 c0       	rjmp	.+2      	; 0x2e14 <display_vprintf+0x286>
    2e12:	d6 01       	movw	r26, r12
    2e14:	9d 01       	movw	r18, r26
    2e16:	2f 5f       	subi	r18, 0xFF	; 255
    2e18:	3f 4f       	sbci	r19, 0xFF	; 255
    2e1a:	8c 91       	ld	r24, X
    2e1c:	81 11       	cpse	r24, r1
    2e1e:	e6 ce       	rjmp	.-564    	; 0x2bec <display_vprintf+0x5e>
    2e20:	c7 01       	movw	r24, r14
    2e22:	80 0f       	add	r24, r16
    2e24:	91 1f       	adc	r25, r17
    2e26:	44 97       	sbiw	r24, 0x14	; 20
    2e28:	2c f0       	brlt	.+10     	; 0x2e34 <display_vprintf+0x2a6>
    2e2a:	84 e1       	ldi	r24, 0x14	; 20
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	7c 01       	movw	r14, r24
    2e30:	e0 1a       	sub	r14, r16
    2e32:	f1 0a       	sbc	r15, r17
    2e34:	80 e0       	ldi	r24, 0x00	; 0
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	08 c0       	rjmp	.+16     	; 0x2e4a <display_vprintf+0x2bc>
    2e3a:	e3 e0       	ldi	r30, 0x03	; 3
    2e3c:	f0 e0       	ldi	r31, 0x00	; 0
    2e3e:	ec 0f       	add	r30, r28
    2e40:	fd 1f       	adc	r31, r29
    2e42:	e8 0f       	add	r30, r24
    2e44:	f9 1f       	adc	r31, r25
    2e46:	10 82       	st	Z, r1
    2e48:	01 96       	adiw	r24, 0x01	; 1
    2e4a:	84 31       	cpi	r24, 0x14	; 20
    2e4c:	91 05       	cpc	r25, r1
    2e4e:	ac f3       	brlt	.-22     	; 0x2e3a <display_vprintf+0x2ac>
    2e50:	b9 82       	std	Y+1, r11	; 0x01
    2e52:	0a 83       	std	Y+2, r16	; 0x02
    2e54:	80 e0       	ldi	r24, 0x00	; 0
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	0c c0       	rjmp	.+24     	; 0x2e72 <display_vprintf+0x2e4>
    2e5a:	fc 01       	movw	r30, r24
    2e5c:	e8 55       	subi	r30, 0x58	; 88
    2e5e:	f3 4d       	sbci	r31, 0xD3	; 211
    2e60:	20 81       	ld	r18, Z
    2e62:	e3 e0       	ldi	r30, 0x03	; 3
    2e64:	f0 e0       	ldi	r31, 0x00	; 0
    2e66:	ec 0f       	add	r30, r28
    2e68:	fd 1f       	adc	r31, r29
    2e6a:	e8 0f       	add	r30, r24
    2e6c:	f9 1f       	adc	r31, r25
    2e6e:	20 83       	st	Z, r18
    2e70:	01 96       	adiw	r24, 0x01	; 1
    2e72:	8e 15       	cp	r24, r14
    2e74:	9f 05       	cpc	r25, r15
    2e76:	8c f3       	brlt	.-30     	; 0x2e5a <display_vprintf+0x2cc>
    2e78:	00 e0       	ldi	r16, 0x00	; 0
    2e7a:	2f ef       	ldi	r18, 0xFF	; 255
    2e7c:	3f ef       	ldi	r19, 0xFF	; 255
    2e7e:	a9 01       	movw	r20, r18
    2e80:	be 01       	movw	r22, r28
    2e82:	6f 5f       	subi	r22, 0xFF	; 255
    2e84:	7f 4f       	sbci	r23, 0xFF	; 255
    2e86:	80 91 d5 2c 	lds	r24, 0x2CD5	; 0x802cd5 <displayLineQueue>
    2e8a:	90 91 d6 2c 	lds	r25, 0x2CD6	; 0x802cd6 <displayLineQueue+0x1>
    2e8e:	0e 94 dd 07 	call	0xfba	; 0xfba <xQueueGenericSend>
    2e92:	c7 01       	movw	r24, r14
    2e94:	66 96       	adiw	r28, 0x16	; 22
    2e96:	cd bf       	out	0x3d, r28	; 61
    2e98:	de bf       	out	0x3e, r29	; 62
    2e9a:	df 91       	pop	r29
    2e9c:	cf 91       	pop	r28
    2e9e:	1f 91       	pop	r17
    2ea0:	0f 91       	pop	r16
    2ea2:	ff 90       	pop	r15
    2ea4:	ef 90       	pop	r14
    2ea6:	df 90       	pop	r13
    2ea8:	cf 90       	pop	r12
    2eaa:	bf 90       	pop	r11
    2eac:	9f 90       	pop	r9
    2eae:	8f 90       	pop	r8
    2eb0:	7f 90       	pop	r7
    2eb2:	6f 90       	pop	r6
    2eb4:	08 95       	ret

00002eb6 <__vector_108>:
    2eb6:	1f 92       	push	r1
    2eb8:	0f 92       	push	r0
    2eba:	0f b6       	in	r0, 0x3f	; 63
    2ebc:	0f 92       	push	r0
    2ebe:	11 24       	eor	r1, r1
    2ec0:	0b b6       	in	r0, 0x3b	; 59
    2ec2:	0f 92       	push	r0
    2ec4:	2f 93       	push	r18
    2ec6:	3f 93       	push	r19
    2ec8:	4f 93       	push	r20
    2eca:	5f 93       	push	r21
    2ecc:	6f 93       	push	r22
    2ece:	7f 93       	push	r23
    2ed0:	8f 93       	push	r24
    2ed2:	9f 93       	push	r25
    2ed4:	af 93       	push	r26
    2ed6:	bf 93       	push	r27
    2ed8:	ef 93       	push	r30
    2eda:	ff 93       	push	r31
    2edc:	cf 93       	push	r28
    2ede:	df 93       	push	r29
    2ee0:	1f 92       	push	r1
    2ee2:	cd b7       	in	r28, 0x3d	; 61
    2ee4:	de b7       	in	r29, 0x3e	; 62
    2ee6:	19 82       	std	Y+1, r1	; 0x01
    2ee8:	9e 01       	movw	r18, r28
    2eea:	2f 5f       	subi	r18, 0xFF	; 255
    2eec:	3f 4f       	sbci	r19, 0xFF	; 255
    2eee:	41 e0       	ldi	r20, 0x01	; 1
    2ef0:	50 e0       	ldi	r21, 0x00	; 0
    2ef2:	60 e0       	ldi	r22, 0x00	; 0
    2ef4:	70 e0       	ldi	r23, 0x00	; 0
    2ef6:	80 91 d7 2c 	lds	r24, 0x2CD7	; 0x802cd7 <egDisplayTiming>
    2efa:	90 91 d8 2c 	lds	r25, 0x2CD8	; 0x802cd8 <egDisplayTiming+0x1>
    2efe:	0e 94 09 04 	call	0x812	; 0x812 <xEventGroupSetBitsFromISR>
    2f02:	60 e0       	ldi	r22, 0x00	; 0
    2f04:	80 e0       	ldi	r24, 0x00	; 0
    2f06:	9b e0       	ldi	r25, 0x0B	; 11
    2f08:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <TC0_ConfigClockSource>
    2f0c:	10 92 06 0b 	sts	0x0B06, r1	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7deb06>
    2f10:	0f 90       	pop	r0
    2f12:	df 91       	pop	r29
    2f14:	cf 91       	pop	r28
    2f16:	ff 91       	pop	r31
    2f18:	ef 91       	pop	r30
    2f1a:	bf 91       	pop	r27
    2f1c:	af 91       	pop	r26
    2f1e:	9f 91       	pop	r25
    2f20:	8f 91       	pop	r24
    2f22:	7f 91       	pop	r23
    2f24:	6f 91       	pop	r22
    2f26:	5f 91       	pop	r21
    2f28:	4f 91       	pop	r20
    2f2a:	3f 91       	pop	r19
    2f2c:	2f 91       	pop	r18
    2f2e:	0f 90       	pop	r0
    2f30:	0b be       	out	0x3b, r0	; 59
    2f32:	0f 90       	pop	r0
    2f34:	0f be       	out	0x3f, r0	; 63
    2f36:	0f 90       	pop	r0
    2f38:	1f 90       	pop	r1
    2f3a:	18 95       	reti

00002f3c <delayUS>:
    2f3c:	cf 92       	push	r12
    2f3e:	df 92       	push	r13
    2f40:	ef 92       	push	r14
    2f42:	ff 92       	push	r15
    2f44:	0f 93       	push	r16
    2f46:	6b 01       	movw	r12, r22
    2f48:	7c 01       	movw	r14, r24
    2f4a:	82 e0       	ldi	r24, 0x02	; 2
    2f4c:	c8 16       	cp	r12, r24
    2f4e:	d1 04       	cpc	r13, r1
    2f50:	e1 04       	cpc	r14, r1
    2f52:	f1 04       	cpc	r15, r1
    2f54:	28 f4       	brcc	.+10     	; 0x2f60 <delayUS+0x24>
    2f56:	c1 2c       	mov	r12, r1
    2f58:	d1 2c       	mov	r13, r1
    2f5a:	76 01       	movw	r14, r12
    2f5c:	68 94       	set
    2f5e:	c1 f8       	bld	r12, 1
    2f60:	e0 e0       	ldi	r30, 0x00	; 0
    2f62:	fb e0       	ldi	r31, 0x0B	; 11
    2f64:	81 e0       	ldi	r24, 0x01	; 1
    2f66:	86 83       	std	Z+6, r24	; 0x06
    2f68:	10 a2       	std	Z+32, r1	; 0x20
    2f6a:	11 a2       	std	Z+33, r1	; 0x21
    2f6c:	60 e0       	ldi	r22, 0x00	; 0
    2f6e:	80 e0       	ldi	r24, 0x00	; 0
    2f70:	9b e0       	ldi	r25, 0x0B	; 11
    2f72:	0e 94 60 02 	call	0x4c0	; 0x4c0 <TC0_ConfigWGM>
    2f76:	8e ef       	ldi	r24, 0xFE	; 254
    2f78:	c8 16       	cp	r12, r24
    2f7a:	8f ef       	ldi	r24, 0xFF	; 255
    2f7c:	d8 06       	cpc	r13, r24
    2f7e:	e1 04       	cpc	r14, r1
    2f80:	f1 04       	cpc	r15, r1
    2f82:	70 f4       	brcc	.+28     	; 0x2fa0 <delayUS+0x64>
    2f84:	f6 94       	lsr	r15
    2f86:	e7 94       	ror	r14
    2f88:	d7 94       	ror	r13
    2f8a:	c7 94       	ror	r12
    2f8c:	c0 92 26 0b 	sts	0x0B26, r12	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7deb26>
    2f90:	d0 92 27 0b 	sts	0x0B27, r13	; 0x800b27 <__TEXT_REGION_LENGTH__+0x7deb27>
    2f94:	65 e0       	ldi	r22, 0x05	; 5
    2f96:	80 e0       	ldi	r24, 0x00	; 0
    2f98:	9b e0       	ldi	r25, 0x0B	; 11
    2f9a:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <TC0_ConfigClockSource>
    2f9e:	19 c0       	rjmp	.+50     	; 0x2fd2 <delayUS+0x96>
    2fa0:	80 e4       	ldi	r24, 0x40	; 64
    2fa2:	c8 16       	cp	r12, r24
    2fa4:	82 e4       	ldi	r24, 0x42	; 66
    2fa6:	d8 06       	cpc	r13, r24
    2fa8:	8f e0       	ldi	r24, 0x0F	; 15
    2faa:	e8 06       	cpc	r14, r24
    2fac:	f1 04       	cpc	r15, r1
    2fae:	88 f4       	brcc	.+34     	; 0x2fd2 <delayUS+0x96>
    2fb0:	68 94       	set
    2fb2:	14 f8       	bld	r1, 4
    2fb4:	f6 94       	lsr	r15
    2fb6:	e7 94       	ror	r14
    2fb8:	d7 94       	ror	r13
    2fba:	c7 94       	ror	r12
    2fbc:	16 94       	lsr	r1
    2fbe:	d1 f7       	brne	.-12     	; 0x2fb4 <delayUS+0x78>
    2fc0:	c0 92 26 0b 	sts	0x0B26, r12	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7deb26>
    2fc4:	d0 92 27 0b 	sts	0x0B27, r13	; 0x800b27 <__TEXT_REGION_LENGTH__+0x7deb27>
    2fc8:	67 e0       	ldi	r22, 0x07	; 7
    2fca:	80 e0       	ldi	r24, 0x00	; 0
    2fcc:	9b e0       	ldi	r25, 0x0B	; 11
    2fce:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <TC0_ConfigClockSource>
    2fd2:	0f 2e       	mov	r0, r31
    2fd4:	f4 ef       	ldi	r31, 0xF4	; 244
    2fd6:	cf 2e       	mov	r12, r31
    2fd8:	dd 24       	eor	r13, r13
    2fda:	d3 94       	inc	r13
    2fdc:	e1 2c       	mov	r14, r1
    2fde:	f1 2c       	mov	r15, r1
    2fe0:	f0 2d       	mov	r31, r0
    2fe2:	00 e0       	ldi	r16, 0x00	; 0
    2fe4:	21 e0       	ldi	r18, 0x01	; 1
    2fe6:	41 e0       	ldi	r20, 0x01	; 1
    2fe8:	50 e0       	ldi	r21, 0x00	; 0
    2fea:	60 e0       	ldi	r22, 0x00	; 0
    2fec:	70 e0       	ldi	r23, 0x00	; 0
    2fee:	80 91 d7 2c 	lds	r24, 0x2CD7	; 0x802cd7 <egDisplayTiming>
    2ff2:	90 91 d8 2c 	lds	r25, 0x2CD8	; 0x802cd8 <egDisplayTiming+0x1>
    2ff6:	0e 94 b0 02 	call	0x560	; 0x560 <xEventGroupWaitBits>
    2ffa:	0f 91       	pop	r16
    2ffc:	ff 90       	pop	r15
    2ffe:	ef 90       	pop	r14
    3000:	df 90       	pop	r13
    3002:	cf 90       	pop	r12
    3004:	08 95       	ret

00003006 <setPort>:
    3006:	82 95       	swap	r24
    3008:	80 7f       	andi	r24, 0xF0	; 240
    300a:	e0 e0       	ldi	r30, 0x00	; 0
    300c:	f6 e0       	ldi	r31, 0x06	; 6
    300e:	94 81       	ldd	r25, Z+4	; 0x04
    3010:	28 2f       	mov	r18, r24
    3012:	2f 60       	ori	r18, 0x0F	; 15
    3014:	92 23       	and	r25, r18
    3016:	94 83       	std	Z+4, r25	; 0x04
    3018:	94 81       	ldd	r25, Z+4	; 0x04
    301a:	89 2b       	or	r24, r25
    301c:	84 83       	std	Z+4, r24	; 0x04
    301e:	08 95       	ret

00003020 <setRS>:
    3020:	88 23       	and	r24, r24
    3022:	21 f0       	breq	.+8      	; 0x302c <setRS+0xc>
    3024:	81 e0       	ldi	r24, 0x01	; 1
    3026:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x7de665>
    302a:	08 95       	ret
    302c:	81 e0       	ldi	r24, 0x01	; 1
    302e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7de666>
    3032:	08 95       	ret

00003034 <setRW>:
    3034:	88 23       	and	r24, r24
    3036:	21 f0       	breq	.+8      	; 0x3040 <setRW+0xc>
    3038:	82 e0       	ldi	r24, 0x02	; 2
    303a:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x7de665>
    303e:	08 95       	ret
    3040:	82 e0       	ldi	r24, 0x02	; 2
    3042:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7de666>
    3046:	08 95       	ret

00003048 <setE>:
    3048:	88 23       	and	r24, r24
    304a:	21 f0       	breq	.+8      	; 0x3054 <setE+0xc>
    304c:	84 e0       	ldi	r24, 0x04	; 4
    304e:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x7de665>
    3052:	08 95       	ret
    3054:	84 e0       	ldi	r24, 0x04	; 4
    3056:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7de666>
    305a:	08 95       	ret

0000305c <Nybble>:
    305c:	81 e0       	ldi	r24, 0x01	; 1
    305e:	0e 94 24 18 	call	0x3048	; 0x3048 <setE>
    3062:	61 e0       	ldi	r22, 0x01	; 1
    3064:	70 e0       	ldi	r23, 0x00	; 0
    3066:	80 e0       	ldi	r24, 0x00	; 0
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <delayUS>
    306e:	80 e0       	ldi	r24, 0x00	; 0
    3070:	0e 94 24 18 	call	0x3048	; 0x3048 <setE>
    3074:	08 95       	ret

00003076 <command>:
    3076:	cf 93       	push	r28
    3078:	c8 2f       	mov	r28, r24
    307a:	82 95       	swap	r24
    307c:	8f 70       	andi	r24, 0x0F	; 15
    307e:	0e 94 03 18 	call	0x3006	; 0x3006 <setPort>
    3082:	80 e0       	ldi	r24, 0x00	; 0
    3084:	0e 94 10 18 	call	0x3020	; 0x3020 <setRS>
    3088:	80 e0       	ldi	r24, 0x00	; 0
    308a:	0e 94 1a 18 	call	0x3034	; 0x3034 <setRW>
    308e:	0e 94 2e 18 	call	0x305c	; 0x305c <Nybble>
    3092:	8c 2f       	mov	r24, r28
    3094:	8f 70       	andi	r24, 0x0F	; 15
    3096:	0e 94 03 18 	call	0x3006	; 0x3006 <setPort>
    309a:	0e 94 2e 18 	call	0x305c	; 0x305c <Nybble>
    309e:	cf 91       	pop	r28
    30a0:	08 95       	ret

000030a2 <write>:
    30a2:	cf 93       	push	r28
    30a4:	c8 2f       	mov	r28, r24
    30a6:	82 95       	swap	r24
    30a8:	8f 70       	andi	r24, 0x0F	; 15
    30aa:	0e 94 03 18 	call	0x3006	; 0x3006 <setPort>
    30ae:	81 e0       	ldi	r24, 0x01	; 1
    30b0:	0e 94 10 18 	call	0x3020	; 0x3020 <setRS>
    30b4:	80 e0       	ldi	r24, 0x00	; 0
    30b6:	0e 94 1a 18 	call	0x3034	; 0x3034 <setRW>
    30ba:	0e 94 2e 18 	call	0x305c	; 0x305c <Nybble>
    30be:	8c 2f       	mov	r24, r28
    30c0:	8f 70       	andi	r24, 0x0F	; 15
    30c2:	0e 94 03 18 	call	0x3006	; 0x3006 <setPort>
    30c6:	0e 94 2e 18 	call	0x305c	; 0x305c <Nybble>
    30ca:	cf 91       	pop	r28
    30cc:	08 95       	ret

000030ce <vInitDisplay>:
    30ce:	ef 92       	push	r14
    30d0:	ff 92       	push	r15
    30d2:	0f 93       	push	r16
    30d4:	e0 e0       	ldi	r30, 0x00	; 0
    30d6:	f6 e0       	ldi	r31, 0x06	; 6
    30d8:	80 e1       	ldi	r24, 0x10	; 16
    30da:	81 83       	std	Z+1, r24	; 0x01
    30dc:	80 e2       	ldi	r24, 0x20	; 32
    30de:	81 83       	std	Z+1, r24	; 0x01
    30e0:	80 e4       	ldi	r24, 0x40	; 64
    30e2:	81 83       	std	Z+1, r24	; 0x01
    30e4:	80 e8       	ldi	r24, 0x80	; 128
    30e6:	81 83       	std	Z+1, r24	; 0x01
    30e8:	a0 e6       	ldi	r26, 0x60	; 96
    30ea:	b6 e0       	ldi	r27, 0x06	; 6
    30ec:	81 e0       	ldi	r24, 0x01	; 1
    30ee:	11 96       	adiw	r26, 0x01	; 1
    30f0:	8c 93       	st	X, r24
    30f2:	11 97       	sbiw	r26, 0x01	; 1
    30f4:	82 e0       	ldi	r24, 0x02	; 2
    30f6:	11 96       	adiw	r26, 0x01	; 1
    30f8:	8c 93       	st	X, r24
    30fa:	11 97       	sbiw	r26, 0x01	; 1
    30fc:	84 e0       	ldi	r24, 0x04	; 4
    30fe:	11 96       	adiw	r26, 0x01	; 1
    3100:	8c 93       	st	X, r24
    3102:	11 97       	sbiw	r26, 0x01	; 1
    3104:	84 81       	ldd	r24, Z+4	; 0x04
    3106:	8f 70       	andi	r24, 0x0F	; 15
    3108:	84 83       	std	Z+4, r24	; 0x04
    310a:	14 96       	adiw	r26, 0x04	; 4
    310c:	8c 91       	ld	r24, X
    310e:	14 97       	sbiw	r26, 0x04	; 4
    3110:	88 7f       	andi	r24, 0xF8	; 248
    3112:	14 96       	adiw	r26, 0x04	; 4
    3114:	8c 93       	st	X, r24
    3116:	40 e0       	ldi	r20, 0x00	; 0
    3118:	66 e1       	ldi	r22, 0x16	; 22
    311a:	88 e0       	ldi	r24, 0x08	; 8
    311c:	0e 94 b3 07 	call	0xf66	; 0xf66 <xQueueGenericCreate>
    3120:	80 93 d5 2c 	sts	0x2CD5, r24	; 0x802cd5 <displayLineQueue>
    3124:	90 93 d6 2c 	sts	0x2CD6, r25	; 0x802cd6 <displayLineQueue+0x1>
    3128:	0e 94 9b 02 	call	0x536	; 0x536 <xEventGroupCreate>
    312c:	80 93 d7 2c 	sts	0x2CD7, r24	; 0x802cd7 <egDisplayTiming>
    3130:	90 93 d8 2c 	sts	0x2CD8, r25	; 0x802cd8 <egDisplayTiming+0x1>
    3134:	e1 2c       	mov	r14, r1
    3136:	f1 2c       	mov	r15, r1
    3138:	01 e0       	ldi	r16, 0x01	; 1
    313a:	20 e0       	ldi	r18, 0x00	; 0
    313c:	30 e0       	ldi	r19, 0x00	; 0
    313e:	4e e5       	ldi	r20, 0x5E	; 94
    3140:	51 e0       	ldi	r21, 0x01	; 1
    3142:	64 e4       	ldi	r22, 0x44	; 68
    3144:	70 e2       	ldi	r23, 0x20	; 32
    3146:	8f ef       	ldi	r24, 0xFF	; 255
    3148:	98 e1       	ldi	r25, 0x18	; 24
    314a:	0e 94 41 0b 	call	0x1682	; 0x1682 <xTaskCreate>
    314e:	0f 91       	pop	r16
    3150:	ff 90       	pop	r15
    3152:	ef 90       	pop	r14
    3154:	08 95       	ret

00003156 <_displaySetPos>:
    3156:	81 30       	cpi	r24, 0x01	; 1
    3158:	91 05       	cpc	r25, r1
    315a:	79 f0       	breq	.+30     	; 0x317a <_displaySetPos+0x24>
    315c:	1c f4       	brge	.+6      	; 0x3164 <_displaySetPos+0xe>
    315e:	89 2b       	or	r24, r25
    3160:	39 f0       	breq	.+14     	; 0x3170 <_displaySetPos+0x1a>
    3162:	19 c0       	rjmp	.+50     	; 0x3196 <_displaySetPos+0x40>
    3164:	82 30       	cpi	r24, 0x02	; 2
    3166:	91 05       	cpc	r25, r1
    3168:	69 f0       	breq	.+26     	; 0x3184 <_displaySetPos+0x2e>
    316a:	03 97       	sbiw	r24, 0x03	; 3
    316c:	81 f0       	breq	.+32     	; 0x318e <_displaySetPos+0x38>
    316e:	13 c0       	rjmp	.+38     	; 0x3196 <_displaySetPos+0x40>
    3170:	80 e8       	ldi	r24, 0x80	; 128
    3172:	86 0f       	add	r24, r22
    3174:	0e 94 3b 18 	call	0x3076	; 0x3076 <command>
    3178:	0e c0       	rjmp	.+28     	; 0x3196 <_displaySetPos+0x40>
    317a:	80 ec       	ldi	r24, 0xC0	; 192
    317c:	86 0f       	add	r24, r22
    317e:	0e 94 3b 18 	call	0x3076	; 0x3076 <command>
    3182:	09 c0       	rjmp	.+18     	; 0x3196 <_displaySetPos+0x40>
    3184:	84 e9       	ldi	r24, 0x94	; 148
    3186:	86 0f       	add	r24, r22
    3188:	0e 94 3b 18 	call	0x3076	; 0x3076 <command>
    318c:	04 c0       	rjmp	.+8      	; 0x3196 <_displaySetPos+0x40>
    318e:	84 ed       	ldi	r24, 0xD4	; 212
    3190:	86 0f       	add	r24, r22
    3192:	0e 94 3b 18 	call	0x3076	; 0x3076 <command>
    3196:	67 e2       	ldi	r22, 0x27	; 39
    3198:	70 e0       	ldi	r23, 0x00	; 0
    319a:	80 e0       	ldi	r24, 0x00	; 0
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <delayUS>
    31a2:	08 95       	ret

000031a4 <_displayWriteChar>:
    31a4:	0e 94 51 18 	call	0x30a2	; 0x30a2 <write>
    31a8:	6b e2       	ldi	r22, 0x2B	; 43
    31aa:	70 e0       	ldi	r23, 0x00	; 0
    31ac:	80 e0       	ldi	r24, 0x00	; 0
    31ae:	90 e0       	ldi	r25, 0x00	; 0
    31b0:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <delayUS>
    31b4:	08 95       	ret

000031b6 <_displayWriteString>:
    31b6:	0f 93       	push	r16
    31b8:	1f 93       	push	r17
    31ba:	cf 93       	push	r28
    31bc:	df 93       	push	r29
    31be:	8c 01       	movw	r16, r24
    31c0:	c0 e0       	ldi	r28, 0x00	; 0
    31c2:	d0 e0       	ldi	r29, 0x00	; 0
    31c4:	09 c0       	rjmp	.+18     	; 0x31d8 <_displayWriteString+0x22>
    31c6:	f8 01       	movw	r30, r16
    31c8:	ec 0f       	add	r30, r28
    31ca:	fd 1f       	adc	r31, r29
    31cc:	80 81       	ld	r24, Z
    31ce:	88 23       	and	r24, r24
    31d0:	31 f0       	breq	.+12     	; 0x31de <_displayWriteString+0x28>
    31d2:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <_displayWriteChar>
    31d6:	21 96       	adiw	r28, 0x01	; 1
    31d8:	c4 31       	cpi	r28, 0x14	; 20
    31da:	d1 05       	cpc	r29, r1
    31dc:	a4 f3       	brlt	.-24     	; 0x31c6 <_displayWriteString+0x10>
    31de:	df 91       	pop	r29
    31e0:	cf 91       	pop	r28
    31e2:	1f 91       	pop	r17
    31e4:	0f 91       	pop	r16
    31e6:	08 95       	ret

000031e8 <_displayWriteStringAtPos>:
    31e8:	cf 93       	push	r28
    31ea:	df 93       	push	r29
    31ec:	ea 01       	movw	r28, r20
    31ee:	0e 94 ab 18 	call	0x3156	; 0x3156 <_displaySetPos>
    31f2:	ce 01       	movw	r24, r28
    31f4:	0e 94 db 18 	call	0x31b6	; 0x31b6 <_displayWriteString>
    31f8:	df 91       	pop	r29
    31fa:	cf 91       	pop	r28
    31fc:	08 95       	ret

000031fe <vDisplayUpdateTask>:
    31fe:	cf 93       	push	r28
    3200:	df 93       	push	r29
    3202:	cd b7       	in	r28, 0x3d	; 61
    3204:	de b7       	in	r29, 0x3e	; 62
    3206:	c6 56       	subi	r28, 0x66	; 102
    3208:	d1 09       	sbc	r29, r1
    320a:	cd bf       	out	0x3d, r28	; 61
    320c:	de bf       	out	0x3e, r29	; 62
    320e:	80 e0       	ldi	r24, 0x00	; 0
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	19 c0       	rjmp	.+50     	; 0x3246 <vDisplayUpdateTask+0x48>
    3214:	44 e1       	ldi	r20, 0x14	; 20
    3216:	48 9f       	mul	r20, r24
    3218:	f0 01       	movw	r30, r0
    321a:	49 9f       	mul	r20, r25
    321c:	f0 0d       	add	r31, r0
    321e:	11 24       	eor	r1, r1
    3220:	41 e0       	ldi	r20, 0x01	; 1
    3222:	50 e0       	ldi	r21, 0x00	; 0
    3224:	4c 0f       	add	r20, r28
    3226:	5d 1f       	adc	r21, r29
    3228:	e4 0f       	add	r30, r20
    322a:	f5 1f       	adc	r31, r21
    322c:	e2 0f       	add	r30, r18
    322e:	f3 1f       	adc	r31, r19
    3230:	40 e2       	ldi	r20, 0x20	; 32
    3232:	40 83       	st	Z, r20
    3234:	2f 5f       	subi	r18, 0xFF	; 255
    3236:	3f 4f       	sbci	r19, 0xFF	; 255
    3238:	02 c0       	rjmp	.+4      	; 0x323e <vDisplayUpdateTask+0x40>
    323a:	20 e0       	ldi	r18, 0x00	; 0
    323c:	30 e0       	ldi	r19, 0x00	; 0
    323e:	24 31       	cpi	r18, 0x14	; 20
    3240:	31 05       	cpc	r19, r1
    3242:	44 f3       	brlt	.-48     	; 0x3214 <vDisplayUpdateTask+0x16>
    3244:	01 96       	adiw	r24, 0x01	; 1
    3246:	84 30       	cpi	r24, 0x04	; 4
    3248:	91 05       	cpc	r25, r1
    324a:	bc f3       	brlt	.-18     	; 0x323a <vDisplayUpdateTask+0x3c>
    324c:	60 e4       	ldi	r22, 0x40	; 64
    324e:	7c e9       	ldi	r23, 0x9C	; 156
    3250:	80 e0       	ldi	r24, 0x00	; 0
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <delayUS>
    3258:	83 e0       	ldi	r24, 0x03	; 3
    325a:	0e 94 03 18 	call	0x3006	; 0x3006 <setPort>
    325e:	68 e8       	ldi	r22, 0x88	; 136
    3260:	73 e1       	ldi	r23, 0x13	; 19
    3262:	80 e0       	ldi	r24, 0x00	; 0
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <delayUS>
    326a:	0e 94 2e 18 	call	0x305c	; 0x305c <Nybble>
    326e:	60 ea       	ldi	r22, 0xA0	; 160
    3270:	70 e0       	ldi	r23, 0x00	; 0
    3272:	80 e0       	ldi	r24, 0x00	; 0
    3274:	90 e0       	ldi	r25, 0x00	; 0
    3276:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <delayUS>
    327a:	0e 94 2e 18 	call	0x305c	; 0x305c <Nybble>
    327e:	60 ea       	ldi	r22, 0xA0	; 160
    3280:	70 e0       	ldi	r23, 0x00	; 0
    3282:	80 e0       	ldi	r24, 0x00	; 0
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <delayUS>
    328a:	0e 94 2e 18 	call	0x305c	; 0x305c <Nybble>
    328e:	60 ea       	ldi	r22, 0xA0	; 160
    3290:	70 e0       	ldi	r23, 0x00	; 0
    3292:	80 e0       	ldi	r24, 0x00	; 0
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <delayUS>
    329a:	82 e0       	ldi	r24, 0x02	; 2
    329c:	0e 94 03 18 	call	0x3006	; 0x3006 <setPort>
    32a0:	0e 94 2e 18 	call	0x305c	; 0x305c <Nybble>
    32a4:	88 e2       	ldi	r24, 0x28	; 40
    32a6:	0e 94 3b 18 	call	0x3076	; 0x3076 <command>
    32aa:	80 e1       	ldi	r24, 0x10	; 16
    32ac:	0e 94 3b 18 	call	0x3076	; 0x3076 <command>
    32b0:	8c e0       	ldi	r24, 0x0C	; 12
    32b2:	0e 94 3b 18 	call	0x3076	; 0x3076 <command>
    32b6:	86 e0       	ldi	r24, 0x06	; 6
    32b8:	0e 94 3b 18 	call	0x3076	; 0x3076 <command>
    32bc:	68 ec       	ldi	r22, 0xC8	; 200
    32be:	70 e0       	ldi	r23, 0x00	; 0
    32c0:	80 e0       	ldi	r24, 0x00	; 0
    32c2:	90 e0       	ldi	r25, 0x00	; 0
    32c4:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <vTaskDelay>
    32c8:	40 e0       	ldi	r20, 0x00	; 0
    32ca:	50 e0       	ldi	r21, 0x00	; 0
    32cc:	ba 01       	movw	r22, r20
    32ce:	80 91 d7 2c 	lds	r24, 0x2CD7	; 0x802cd7 <egDisplayTiming>
    32d2:	90 91 d8 2c 	lds	r25, 0x2CD8	; 0x802cd8 <egDisplayTiming+0x1>
    32d6:	0e 94 57 03 	call	0x6ae	; 0x6ae <xEventGroupClearBits>
    32da:	67 2b       	or	r22, r23
    32dc:	68 2b       	or	r22, r24
    32de:	69 2b       	or	r22, r25
    32e0:	09 f4       	brne	.+2      	; 0x32e4 <vDisplayUpdateTask+0xe6>
    32e2:	5f c0       	rjmp	.+190    	; 0x33a2 <vDisplayUpdateTask+0x1a4>
    32e4:	42 e0       	ldi	r20, 0x02	; 2
    32e6:	50 e0       	ldi	r21, 0x00	; 0
    32e8:	60 e0       	ldi	r22, 0x00	; 0
    32ea:	70 e0       	ldi	r23, 0x00	; 0
    32ec:	80 91 d7 2c 	lds	r24, 0x2CD7	; 0x802cd7 <egDisplayTiming>
    32f0:	90 91 d8 2c 	lds	r25, 0x2CD8	; 0x802cd8 <egDisplayTiming+0x1>
    32f4:	0e 94 57 03 	call	0x6ae	; 0x6ae <xEventGroupClearBits>
    32f8:	40 e0       	ldi	r20, 0x00	; 0
    32fa:	50 e0       	ldi	r21, 0x00	; 0
    32fc:	19 c0       	rjmp	.+50     	; 0x3330 <vDisplayUpdateTask+0x132>
    32fe:	24 e1       	ldi	r18, 0x14	; 20
    3300:	24 9f       	mul	r18, r20
    3302:	f0 01       	movw	r30, r0
    3304:	25 9f       	mul	r18, r21
    3306:	f0 0d       	add	r31, r0
    3308:	11 24       	eor	r1, r1
    330a:	21 e0       	ldi	r18, 0x01	; 1
    330c:	30 e0       	ldi	r19, 0x00	; 0
    330e:	2c 0f       	add	r18, r28
    3310:	3d 1f       	adc	r19, r29
    3312:	e2 0f       	add	r30, r18
    3314:	f3 1f       	adc	r31, r19
    3316:	e8 0f       	add	r30, r24
    3318:	f9 1f       	adc	r31, r25
    331a:	20 e2       	ldi	r18, 0x20	; 32
    331c:	20 83       	st	Z, r18
    331e:	01 96       	adiw	r24, 0x01	; 1
    3320:	02 c0       	rjmp	.+4      	; 0x3326 <vDisplayUpdateTask+0x128>
    3322:	80 e0       	ldi	r24, 0x00	; 0
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	84 31       	cpi	r24, 0x14	; 20
    3328:	91 05       	cpc	r25, r1
    332a:	4c f3       	brlt	.-46     	; 0x32fe <vDisplayUpdateTask+0x100>
    332c:	4f 5f       	subi	r20, 0xFF	; 255
    332e:	5f 4f       	sbci	r21, 0xFF	; 255
    3330:	44 30       	cpi	r20, 0x04	; 4
    3332:	51 05       	cpc	r21, r1
    3334:	b4 f3       	brlt	.-20     	; 0x3322 <vDisplayUpdateTask+0x124>
    3336:	35 c0       	rjmp	.+106    	; 0x33a2 <vDisplayUpdateTask+0x1a4>
    3338:	2f ef       	ldi	r18, 0xFF	; 255
    333a:	3f ef       	ldi	r19, 0xFF	; 255
    333c:	a9 01       	movw	r20, r18
    333e:	be 01       	movw	r22, r28
    3340:	6f 5a       	subi	r22, 0xAF	; 175
    3342:	7f 4f       	sbci	r23, 0xFF	; 255
    3344:	80 91 d5 2c 	lds	r24, 0x2CD5	; 0x802cd5 <displayLineQueue>
    3348:	90 91 d6 2c 	lds	r25, 0x2CD6	; 0x802cd6 <displayLineQueue+0x1>
    334c:	0e 94 c1 08 	call	0x1182	; 0x1182 <xQueueReceive>
    3350:	88 23       	and	r24, r24
    3352:	39 f1       	breq	.+78     	; 0x33a2 <vDisplayUpdateTask+0x1a4>
    3354:	12 c0       	rjmp	.+36     	; 0x337a <vDisplayUpdateTask+0x17c>
    3356:	62 96       	adiw	r28, 0x12	; 18
    3358:	4f ad       	ldd	r20, Y+63	; 0x3f
    335a:	62 97       	sbiw	r28, 0x12	; 18
    335c:	e1 e0       	ldi	r30, 0x01	; 1
    335e:	f0 e0       	ldi	r31, 0x00	; 0
    3360:	ec 0f       	add	r30, r28
    3362:	fd 1f       	adc	r31, r29
    3364:	74 e1       	ldi	r23, 0x14	; 20
    3366:	47 9f       	mul	r20, r23
    3368:	e0 0d       	add	r30, r0
    336a:	f1 1d       	adc	r31, r1
    336c:	11 24       	eor	r1, r1
    336e:	e8 0f       	add	r30, r24
    3370:	f9 1f       	adc	r31, r25
    3372:	60 83       	st	Z, r22
    3374:	2f 5f       	subi	r18, 0xFF	; 255
    3376:	3f 4f       	sbci	r19, 0xFF	; 255
    3378:	02 c0       	rjmp	.+4      	; 0x337e <vDisplayUpdateTask+0x180>
    337a:	20 e0       	ldi	r18, 0x00	; 0
    337c:	30 e0       	ldi	r19, 0x00	; 0
    337e:	63 96       	adiw	r28, 0x13	; 19
    3380:	8f ad       	ldd	r24, Y+63	; 0x3f
    3382:	63 97       	sbiw	r28, 0x13	; 19
    3384:	f9 01       	movw	r30, r18
    3386:	e8 0f       	add	r30, r24
    3388:	f1 1d       	adc	r31, r1
    338a:	cf 01       	movw	r24, r30
    338c:	74 97       	sbiw	r30, 0x14	; 20
    338e:	4c f4       	brge	.+18     	; 0x33a2 <vDisplayUpdateTask+0x1a4>
    3390:	e1 e5       	ldi	r30, 0x51	; 81
    3392:	f0 e0       	ldi	r31, 0x00	; 0
    3394:	ec 0f       	add	r30, r28
    3396:	fd 1f       	adc	r31, r29
    3398:	e2 0f       	add	r30, r18
    339a:	f3 1f       	adc	r31, r19
    339c:	62 81       	ldd	r22, Z+2	; 0x02
    339e:	61 11       	cpse	r22, r1
    33a0:	da cf       	rjmp	.-76     	; 0x3356 <vDisplayUpdateTask+0x158>
    33a2:	80 91 d5 2c 	lds	r24, 0x2CD5	; 0x802cd5 <displayLineQueue>
    33a6:	90 91 d6 2c 	lds	r25, 0x2CD6	; 0x802cd6 <displayLineQueue+0x1>
    33aa:	0e 94 60 09 	call	0x12c0	; 0x12c0 <uxQueueMessagesWaiting>
    33ae:	81 11       	cpse	r24, r1
    33b0:	c3 cf       	rjmp	.-122    	; 0x3338 <vDisplayUpdateTask+0x13a>
    33b2:	00 e0       	ldi	r16, 0x00	; 0
    33b4:	10 e0       	ldi	r17, 0x00	; 0
    33b6:	13 c0       	rjmp	.+38     	; 0x33de <vDisplayUpdateTask+0x1e0>
    33b8:	84 e1       	ldi	r24, 0x14	; 20
    33ba:	80 9f       	mul	r24, r16
    33bc:	a0 01       	movw	r20, r0
    33be:	81 9f       	mul	r24, r17
    33c0:	50 0d       	add	r21, r0
    33c2:	11 24       	eor	r1, r1
    33c4:	21 e0       	ldi	r18, 0x01	; 1
    33c6:	30 e0       	ldi	r19, 0x00	; 0
    33c8:	2c 0f       	add	r18, r28
    33ca:	3d 1f       	adc	r19, r29
    33cc:	42 0f       	add	r20, r18
    33ce:	53 1f       	adc	r21, r19
    33d0:	60 e0       	ldi	r22, 0x00	; 0
    33d2:	70 e0       	ldi	r23, 0x00	; 0
    33d4:	c8 01       	movw	r24, r16
    33d6:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <_displayWriteStringAtPos>
    33da:	0f 5f       	subi	r16, 0xFF	; 255
    33dc:	1f 4f       	sbci	r17, 0xFF	; 255
    33de:	04 30       	cpi	r16, 0x04	; 4
    33e0:	11 05       	cpc	r17, r1
    33e2:	54 f3       	brlt	.-44     	; 0x33b8 <vDisplayUpdateTask+0x1ba>
    33e4:	6b cf       	rjmp	.-298    	; 0x32bc <vDisplayUpdateTask+0xbe>

000033e6 <vDisplayWriteStringAtPos>:
}

void vDisplayWriteStringAtPos(int line, int pos, char const *fmt, ...) {
    33e6:	cf 93       	push	r28
    33e8:	df 93       	push	r29
    33ea:	cd b7       	in	r28, 0x3d	; 61
    33ec:	de b7       	in	r29, 0x3e	; 62
	va_list arg;	
	va_start(arg, fmt);
	display_vprintf(line, pos, fmt, arg);
    33ee:	9e 01       	movw	r18, r28
    33f0:	24 5f       	subi	r18, 0xF4	; 244
    33f2:	3f 4f       	sbci	r19, 0xFF	; 255
    33f4:	4a 85       	ldd	r20, Y+10	; 0x0a
    33f6:	5b 85       	ldd	r21, Y+11	; 0x0b
    33f8:	68 85       	ldd	r22, Y+8	; 0x08
    33fa:	79 85       	ldd	r23, Y+9	; 0x09
    33fc:	8e 81       	ldd	r24, Y+6	; 0x06
    33fe:	9f 81       	ldd	r25, Y+7	; 0x07
    3400:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <display_vprintf>
	va_end(arg);	
}
    3404:	df 91       	pop	r29
    3406:	cf 91       	pop	r28
    3408:	08 95       	ret

0000340a <__subsf3>:
    340a:	50 58       	subi	r21, 0x80	; 128

0000340c <__addsf3>:
    340c:	bb 27       	eor	r27, r27
    340e:	aa 27       	eor	r26, r26
    3410:	0e 94 1d 1a 	call	0x343a	; 0x343a <__addsf3x>
    3414:	0c 94 97 1b 	jmp	0x372e	; 0x372e <__fp_round>
    3418:	0e 94 89 1b 	call	0x3712	; 0x3712 <__fp_pscA>
    341c:	38 f0       	brcs	.+14     	; 0x342c <__addsf3+0x20>
    341e:	0e 94 90 1b 	call	0x3720	; 0x3720 <__fp_pscB>
    3422:	20 f0       	brcs	.+8      	; 0x342c <__addsf3+0x20>
    3424:	39 f4       	brne	.+14     	; 0x3434 <__addsf3+0x28>
    3426:	9f 3f       	cpi	r25, 0xFF	; 255
    3428:	19 f4       	brne	.+6      	; 0x3430 <__addsf3+0x24>
    342a:	26 f4       	brtc	.+8      	; 0x3434 <__addsf3+0x28>
    342c:	0c 94 86 1b 	jmp	0x370c	; 0x370c <__fp_nan>
    3430:	0e f4       	brtc	.+2      	; 0x3434 <__addsf3+0x28>
    3432:	e0 95       	com	r30
    3434:	e7 fb       	bst	r30, 7
    3436:	0c 94 80 1b 	jmp	0x3700	; 0x3700 <__fp_inf>

0000343a <__addsf3x>:
    343a:	e9 2f       	mov	r30, r25
    343c:	0e 94 a8 1b 	call	0x3750	; 0x3750 <__fp_split3>
    3440:	58 f3       	brcs	.-42     	; 0x3418 <__addsf3+0xc>
    3442:	ba 17       	cp	r27, r26
    3444:	62 07       	cpc	r22, r18
    3446:	73 07       	cpc	r23, r19
    3448:	84 07       	cpc	r24, r20
    344a:	95 07       	cpc	r25, r21
    344c:	20 f0       	brcs	.+8      	; 0x3456 <__addsf3x+0x1c>
    344e:	79 f4       	brne	.+30     	; 0x346e <__addsf3x+0x34>
    3450:	a6 f5       	brtc	.+104    	; 0x34ba <__addsf3x+0x80>
    3452:	0c 94 ca 1b 	jmp	0x3794	; 0x3794 <__fp_zero>
    3456:	0e f4       	brtc	.+2      	; 0x345a <__addsf3x+0x20>
    3458:	e0 95       	com	r30
    345a:	0b 2e       	mov	r0, r27
    345c:	ba 2f       	mov	r27, r26
    345e:	a0 2d       	mov	r26, r0
    3460:	0b 01       	movw	r0, r22
    3462:	b9 01       	movw	r22, r18
    3464:	90 01       	movw	r18, r0
    3466:	0c 01       	movw	r0, r24
    3468:	ca 01       	movw	r24, r20
    346a:	a0 01       	movw	r20, r0
    346c:	11 24       	eor	r1, r1
    346e:	ff 27       	eor	r31, r31
    3470:	59 1b       	sub	r21, r25
    3472:	99 f0       	breq	.+38     	; 0x349a <__addsf3x+0x60>
    3474:	59 3f       	cpi	r21, 0xF9	; 249
    3476:	50 f4       	brcc	.+20     	; 0x348c <__addsf3x+0x52>
    3478:	50 3e       	cpi	r21, 0xE0	; 224
    347a:	68 f1       	brcs	.+90     	; 0x34d6 <__addsf3x+0x9c>
    347c:	1a 16       	cp	r1, r26
    347e:	f0 40       	sbci	r31, 0x00	; 0
    3480:	a2 2f       	mov	r26, r18
    3482:	23 2f       	mov	r18, r19
    3484:	34 2f       	mov	r19, r20
    3486:	44 27       	eor	r20, r20
    3488:	58 5f       	subi	r21, 0xF8	; 248
    348a:	f3 cf       	rjmp	.-26     	; 0x3472 <__addsf3x+0x38>
    348c:	46 95       	lsr	r20
    348e:	37 95       	ror	r19
    3490:	27 95       	ror	r18
    3492:	a7 95       	ror	r26
    3494:	f0 40       	sbci	r31, 0x00	; 0
    3496:	53 95       	inc	r21
    3498:	c9 f7       	brne	.-14     	; 0x348c <__addsf3x+0x52>
    349a:	7e f4       	brtc	.+30     	; 0x34ba <__addsf3x+0x80>
    349c:	1f 16       	cp	r1, r31
    349e:	ba 0b       	sbc	r27, r26
    34a0:	62 0b       	sbc	r22, r18
    34a2:	73 0b       	sbc	r23, r19
    34a4:	84 0b       	sbc	r24, r20
    34a6:	ba f0       	brmi	.+46     	; 0x34d6 <__addsf3x+0x9c>
    34a8:	91 50       	subi	r25, 0x01	; 1
    34aa:	a1 f0       	breq	.+40     	; 0x34d4 <__addsf3x+0x9a>
    34ac:	ff 0f       	add	r31, r31
    34ae:	bb 1f       	adc	r27, r27
    34b0:	66 1f       	adc	r22, r22
    34b2:	77 1f       	adc	r23, r23
    34b4:	88 1f       	adc	r24, r24
    34b6:	c2 f7       	brpl	.-16     	; 0x34a8 <__addsf3x+0x6e>
    34b8:	0e c0       	rjmp	.+28     	; 0x34d6 <__addsf3x+0x9c>
    34ba:	ba 0f       	add	r27, r26
    34bc:	62 1f       	adc	r22, r18
    34be:	73 1f       	adc	r23, r19
    34c0:	84 1f       	adc	r24, r20
    34c2:	48 f4       	brcc	.+18     	; 0x34d6 <__addsf3x+0x9c>
    34c4:	87 95       	ror	r24
    34c6:	77 95       	ror	r23
    34c8:	67 95       	ror	r22
    34ca:	b7 95       	ror	r27
    34cc:	f7 95       	ror	r31
    34ce:	9e 3f       	cpi	r25, 0xFE	; 254
    34d0:	08 f0       	brcs	.+2      	; 0x34d4 <__addsf3x+0x9a>
    34d2:	b0 cf       	rjmp	.-160    	; 0x3434 <__addsf3+0x28>
    34d4:	93 95       	inc	r25
    34d6:	88 0f       	add	r24, r24
    34d8:	08 f0       	brcs	.+2      	; 0x34dc <__addsf3x+0xa2>
    34da:	99 27       	eor	r25, r25
    34dc:	ee 0f       	add	r30, r30
    34de:	97 95       	ror	r25
    34e0:	87 95       	ror	r24
    34e2:	08 95       	ret

000034e4 <__cmpsf2>:
    34e4:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <__fp_cmp>
    34e8:	08 f4       	brcc	.+2      	; 0x34ec <__cmpsf2+0x8>
    34ea:	81 e0       	ldi	r24, 0x01	; 1
    34ec:	08 95       	ret

000034ee <__divsf3>:
    34ee:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__divsf3x>
    34f2:	0c 94 97 1b 	jmp	0x372e	; 0x372e <__fp_round>
    34f6:	0e 94 90 1b 	call	0x3720	; 0x3720 <__fp_pscB>
    34fa:	58 f0       	brcs	.+22     	; 0x3512 <__divsf3+0x24>
    34fc:	0e 94 89 1b 	call	0x3712	; 0x3712 <__fp_pscA>
    3500:	40 f0       	brcs	.+16     	; 0x3512 <__divsf3+0x24>
    3502:	29 f4       	brne	.+10     	; 0x350e <__divsf3+0x20>
    3504:	5f 3f       	cpi	r21, 0xFF	; 255
    3506:	29 f0       	breq	.+10     	; 0x3512 <__divsf3+0x24>
    3508:	0c 94 80 1b 	jmp	0x3700	; 0x3700 <__fp_inf>
    350c:	51 11       	cpse	r21, r1
    350e:	0c 94 cb 1b 	jmp	0x3796	; 0x3796 <__fp_szero>
    3512:	0c 94 86 1b 	jmp	0x370c	; 0x370c <__fp_nan>

00003516 <__divsf3x>:
    3516:	0e 94 a8 1b 	call	0x3750	; 0x3750 <__fp_split3>
    351a:	68 f3       	brcs	.-38     	; 0x34f6 <__divsf3+0x8>

0000351c <__divsf3_pse>:
    351c:	99 23       	and	r25, r25
    351e:	b1 f3       	breq	.-20     	; 0x350c <__divsf3+0x1e>
    3520:	55 23       	and	r21, r21
    3522:	91 f3       	breq	.-28     	; 0x3508 <__divsf3+0x1a>
    3524:	95 1b       	sub	r25, r21
    3526:	55 0b       	sbc	r21, r21
    3528:	bb 27       	eor	r27, r27
    352a:	aa 27       	eor	r26, r26
    352c:	62 17       	cp	r22, r18
    352e:	73 07       	cpc	r23, r19
    3530:	84 07       	cpc	r24, r20
    3532:	38 f0       	brcs	.+14     	; 0x3542 <__divsf3_pse+0x26>
    3534:	9f 5f       	subi	r25, 0xFF	; 255
    3536:	5f 4f       	sbci	r21, 0xFF	; 255
    3538:	22 0f       	add	r18, r18
    353a:	33 1f       	adc	r19, r19
    353c:	44 1f       	adc	r20, r20
    353e:	aa 1f       	adc	r26, r26
    3540:	a9 f3       	breq	.-22     	; 0x352c <__divsf3_pse+0x10>
    3542:	35 d0       	rcall	.+106    	; 0x35ae <__divsf3_pse+0x92>
    3544:	0e 2e       	mov	r0, r30
    3546:	3a f0       	brmi	.+14     	; 0x3556 <__divsf3_pse+0x3a>
    3548:	e0 e8       	ldi	r30, 0x80	; 128
    354a:	32 d0       	rcall	.+100    	; 0x35b0 <__divsf3_pse+0x94>
    354c:	91 50       	subi	r25, 0x01	; 1
    354e:	50 40       	sbci	r21, 0x00	; 0
    3550:	e6 95       	lsr	r30
    3552:	00 1c       	adc	r0, r0
    3554:	ca f7       	brpl	.-14     	; 0x3548 <__divsf3_pse+0x2c>
    3556:	2b d0       	rcall	.+86     	; 0x35ae <__divsf3_pse+0x92>
    3558:	fe 2f       	mov	r31, r30
    355a:	29 d0       	rcall	.+82     	; 0x35ae <__divsf3_pse+0x92>
    355c:	66 0f       	add	r22, r22
    355e:	77 1f       	adc	r23, r23
    3560:	88 1f       	adc	r24, r24
    3562:	bb 1f       	adc	r27, r27
    3564:	26 17       	cp	r18, r22
    3566:	37 07       	cpc	r19, r23
    3568:	48 07       	cpc	r20, r24
    356a:	ab 07       	cpc	r26, r27
    356c:	b0 e8       	ldi	r27, 0x80	; 128
    356e:	09 f0       	breq	.+2      	; 0x3572 <__divsf3_pse+0x56>
    3570:	bb 0b       	sbc	r27, r27
    3572:	80 2d       	mov	r24, r0
    3574:	bf 01       	movw	r22, r30
    3576:	ff 27       	eor	r31, r31
    3578:	93 58       	subi	r25, 0x83	; 131
    357a:	5f 4f       	sbci	r21, 0xFF	; 255
    357c:	3a f0       	brmi	.+14     	; 0x358c <__divsf3_pse+0x70>
    357e:	9e 3f       	cpi	r25, 0xFE	; 254
    3580:	51 05       	cpc	r21, r1
    3582:	78 f0       	brcs	.+30     	; 0x35a2 <__divsf3_pse+0x86>
    3584:	0c 94 80 1b 	jmp	0x3700	; 0x3700 <__fp_inf>
    3588:	0c 94 cb 1b 	jmp	0x3796	; 0x3796 <__fp_szero>
    358c:	5f 3f       	cpi	r21, 0xFF	; 255
    358e:	e4 f3       	brlt	.-8      	; 0x3588 <__divsf3_pse+0x6c>
    3590:	98 3e       	cpi	r25, 0xE8	; 232
    3592:	d4 f3       	brlt	.-12     	; 0x3588 <__divsf3_pse+0x6c>
    3594:	86 95       	lsr	r24
    3596:	77 95       	ror	r23
    3598:	67 95       	ror	r22
    359a:	b7 95       	ror	r27
    359c:	f7 95       	ror	r31
    359e:	9f 5f       	subi	r25, 0xFF	; 255
    35a0:	c9 f7       	brne	.-14     	; 0x3594 <__divsf3_pse+0x78>
    35a2:	88 0f       	add	r24, r24
    35a4:	91 1d       	adc	r25, r1
    35a6:	96 95       	lsr	r25
    35a8:	87 95       	ror	r24
    35aa:	97 f9       	bld	r25, 7
    35ac:	08 95       	ret
    35ae:	e1 e0       	ldi	r30, 0x01	; 1
    35b0:	66 0f       	add	r22, r22
    35b2:	77 1f       	adc	r23, r23
    35b4:	88 1f       	adc	r24, r24
    35b6:	bb 1f       	adc	r27, r27
    35b8:	62 17       	cp	r22, r18
    35ba:	73 07       	cpc	r23, r19
    35bc:	84 07       	cpc	r24, r20
    35be:	ba 07       	cpc	r27, r26
    35c0:	20 f0       	brcs	.+8      	; 0x35ca <__divsf3_pse+0xae>
    35c2:	62 1b       	sub	r22, r18
    35c4:	73 0b       	sbc	r23, r19
    35c6:	84 0b       	sbc	r24, r20
    35c8:	ba 0b       	sbc	r27, r26
    35ca:	ee 1f       	adc	r30, r30
    35cc:	88 f7       	brcc	.-30     	; 0x35b0 <__divsf3_pse+0x94>
    35ce:	e0 95       	com	r30
    35d0:	08 95       	ret

000035d2 <__fixsfsi>:
    35d2:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <__fixunssfsi>
    35d6:	68 94       	set
    35d8:	b1 11       	cpse	r27, r1
    35da:	0c 94 cb 1b 	jmp	0x3796	; 0x3796 <__fp_szero>
    35de:	08 95       	ret

000035e0 <__fixunssfsi>:
    35e0:	0e 94 b0 1b 	call	0x3760	; 0x3760 <__fp_splitA>
    35e4:	88 f0       	brcs	.+34     	; 0x3608 <__fixunssfsi+0x28>
    35e6:	9f 57       	subi	r25, 0x7F	; 127
    35e8:	98 f0       	brcs	.+38     	; 0x3610 <__fixunssfsi+0x30>
    35ea:	b9 2f       	mov	r27, r25
    35ec:	99 27       	eor	r25, r25
    35ee:	b7 51       	subi	r27, 0x17	; 23
    35f0:	b0 f0       	brcs	.+44     	; 0x361e <__fixunssfsi+0x3e>
    35f2:	e1 f0       	breq	.+56     	; 0x362c <__fixunssfsi+0x4c>
    35f4:	66 0f       	add	r22, r22
    35f6:	77 1f       	adc	r23, r23
    35f8:	88 1f       	adc	r24, r24
    35fa:	99 1f       	adc	r25, r25
    35fc:	1a f0       	brmi	.+6      	; 0x3604 <__fixunssfsi+0x24>
    35fe:	ba 95       	dec	r27
    3600:	c9 f7       	brne	.-14     	; 0x35f4 <__fixunssfsi+0x14>
    3602:	14 c0       	rjmp	.+40     	; 0x362c <__fixunssfsi+0x4c>
    3604:	b1 30       	cpi	r27, 0x01	; 1
    3606:	91 f0       	breq	.+36     	; 0x362c <__fixunssfsi+0x4c>
    3608:	0e 94 ca 1b 	call	0x3794	; 0x3794 <__fp_zero>
    360c:	b1 e0       	ldi	r27, 0x01	; 1
    360e:	08 95       	ret
    3610:	0c 94 ca 1b 	jmp	0x3794	; 0x3794 <__fp_zero>
    3614:	67 2f       	mov	r22, r23
    3616:	78 2f       	mov	r23, r24
    3618:	88 27       	eor	r24, r24
    361a:	b8 5f       	subi	r27, 0xF8	; 248
    361c:	39 f0       	breq	.+14     	; 0x362c <__fixunssfsi+0x4c>
    361e:	b9 3f       	cpi	r27, 0xF9	; 249
    3620:	cc f3       	brlt	.-14     	; 0x3614 <__fixunssfsi+0x34>
    3622:	86 95       	lsr	r24
    3624:	77 95       	ror	r23
    3626:	67 95       	ror	r22
    3628:	b3 95       	inc	r27
    362a:	d9 f7       	brne	.-10     	; 0x3622 <__fixunssfsi+0x42>
    362c:	3e f4       	brtc	.+14     	; 0x363c <__fixunssfsi+0x5c>
    362e:	90 95       	com	r25
    3630:	80 95       	com	r24
    3632:	70 95       	com	r23
    3634:	61 95       	neg	r22
    3636:	7f 4f       	sbci	r23, 0xFF	; 255
    3638:	8f 4f       	sbci	r24, 0xFF	; 255
    363a:	9f 4f       	sbci	r25, 0xFF	; 255
    363c:	08 95       	ret

0000363e <__floatunsisf>:
    363e:	e8 94       	clt
    3640:	09 c0       	rjmp	.+18     	; 0x3654 <__floatsisf+0x12>

00003642 <__floatsisf>:
    3642:	97 fb       	bst	r25, 7
    3644:	3e f4       	brtc	.+14     	; 0x3654 <__floatsisf+0x12>
    3646:	90 95       	com	r25
    3648:	80 95       	com	r24
    364a:	70 95       	com	r23
    364c:	61 95       	neg	r22
    364e:	7f 4f       	sbci	r23, 0xFF	; 255
    3650:	8f 4f       	sbci	r24, 0xFF	; 255
    3652:	9f 4f       	sbci	r25, 0xFF	; 255
    3654:	99 23       	and	r25, r25
    3656:	a9 f0       	breq	.+42     	; 0x3682 <__floatsisf+0x40>
    3658:	f9 2f       	mov	r31, r25
    365a:	96 e9       	ldi	r25, 0x96	; 150
    365c:	bb 27       	eor	r27, r27
    365e:	93 95       	inc	r25
    3660:	f6 95       	lsr	r31
    3662:	87 95       	ror	r24
    3664:	77 95       	ror	r23
    3666:	67 95       	ror	r22
    3668:	b7 95       	ror	r27
    366a:	f1 11       	cpse	r31, r1
    366c:	f8 cf       	rjmp	.-16     	; 0x365e <__floatsisf+0x1c>
    366e:	fa f4       	brpl	.+62     	; 0x36ae <__floatsisf+0x6c>
    3670:	bb 0f       	add	r27, r27
    3672:	11 f4       	brne	.+4      	; 0x3678 <__floatsisf+0x36>
    3674:	60 ff       	sbrs	r22, 0
    3676:	1b c0       	rjmp	.+54     	; 0x36ae <__floatsisf+0x6c>
    3678:	6f 5f       	subi	r22, 0xFF	; 255
    367a:	7f 4f       	sbci	r23, 0xFF	; 255
    367c:	8f 4f       	sbci	r24, 0xFF	; 255
    367e:	9f 4f       	sbci	r25, 0xFF	; 255
    3680:	16 c0       	rjmp	.+44     	; 0x36ae <__floatsisf+0x6c>
    3682:	88 23       	and	r24, r24
    3684:	11 f0       	breq	.+4      	; 0x368a <__floatsisf+0x48>
    3686:	96 e9       	ldi	r25, 0x96	; 150
    3688:	11 c0       	rjmp	.+34     	; 0x36ac <__floatsisf+0x6a>
    368a:	77 23       	and	r23, r23
    368c:	21 f0       	breq	.+8      	; 0x3696 <__floatsisf+0x54>
    368e:	9e e8       	ldi	r25, 0x8E	; 142
    3690:	87 2f       	mov	r24, r23
    3692:	76 2f       	mov	r23, r22
    3694:	05 c0       	rjmp	.+10     	; 0x36a0 <__floatsisf+0x5e>
    3696:	66 23       	and	r22, r22
    3698:	71 f0       	breq	.+28     	; 0x36b6 <__floatsisf+0x74>
    369a:	96 e8       	ldi	r25, 0x86	; 134
    369c:	86 2f       	mov	r24, r22
    369e:	70 e0       	ldi	r23, 0x00	; 0
    36a0:	60 e0       	ldi	r22, 0x00	; 0
    36a2:	2a f0       	brmi	.+10     	; 0x36ae <__floatsisf+0x6c>
    36a4:	9a 95       	dec	r25
    36a6:	66 0f       	add	r22, r22
    36a8:	77 1f       	adc	r23, r23
    36aa:	88 1f       	adc	r24, r24
    36ac:	da f7       	brpl	.-10     	; 0x36a4 <__floatsisf+0x62>
    36ae:	88 0f       	add	r24, r24
    36b0:	96 95       	lsr	r25
    36b2:	87 95       	ror	r24
    36b4:	97 f9       	bld	r25, 7
    36b6:	08 95       	ret

000036b8 <__fp_cmp>:
    36b8:	99 0f       	add	r25, r25
    36ba:	00 08       	sbc	r0, r0
    36bc:	55 0f       	add	r21, r21
    36be:	aa 0b       	sbc	r26, r26
    36c0:	e0 e8       	ldi	r30, 0x80	; 128
    36c2:	fe ef       	ldi	r31, 0xFE	; 254
    36c4:	16 16       	cp	r1, r22
    36c6:	17 06       	cpc	r1, r23
    36c8:	e8 07       	cpc	r30, r24
    36ca:	f9 07       	cpc	r31, r25
    36cc:	c0 f0       	brcs	.+48     	; 0x36fe <__fp_cmp+0x46>
    36ce:	12 16       	cp	r1, r18
    36d0:	13 06       	cpc	r1, r19
    36d2:	e4 07       	cpc	r30, r20
    36d4:	f5 07       	cpc	r31, r21
    36d6:	98 f0       	brcs	.+38     	; 0x36fe <__fp_cmp+0x46>
    36d8:	62 1b       	sub	r22, r18
    36da:	73 0b       	sbc	r23, r19
    36dc:	84 0b       	sbc	r24, r20
    36de:	95 0b       	sbc	r25, r21
    36e0:	39 f4       	brne	.+14     	; 0x36f0 <__fp_cmp+0x38>
    36e2:	0a 26       	eor	r0, r26
    36e4:	61 f0       	breq	.+24     	; 0x36fe <__fp_cmp+0x46>
    36e6:	23 2b       	or	r18, r19
    36e8:	24 2b       	or	r18, r20
    36ea:	25 2b       	or	r18, r21
    36ec:	21 f4       	brne	.+8      	; 0x36f6 <__fp_cmp+0x3e>
    36ee:	08 95       	ret
    36f0:	0a 26       	eor	r0, r26
    36f2:	09 f4       	brne	.+2      	; 0x36f6 <__fp_cmp+0x3e>
    36f4:	a1 40       	sbci	r26, 0x01	; 1
    36f6:	a6 95       	lsr	r26
    36f8:	8f ef       	ldi	r24, 0xFF	; 255
    36fa:	81 1d       	adc	r24, r1
    36fc:	81 1d       	adc	r24, r1
    36fe:	08 95       	ret

00003700 <__fp_inf>:
    3700:	97 f9       	bld	r25, 7
    3702:	9f 67       	ori	r25, 0x7F	; 127
    3704:	80 e8       	ldi	r24, 0x80	; 128
    3706:	70 e0       	ldi	r23, 0x00	; 0
    3708:	60 e0       	ldi	r22, 0x00	; 0
    370a:	08 95       	ret

0000370c <__fp_nan>:
    370c:	9f ef       	ldi	r25, 0xFF	; 255
    370e:	80 ec       	ldi	r24, 0xC0	; 192
    3710:	08 95       	ret

00003712 <__fp_pscA>:
    3712:	00 24       	eor	r0, r0
    3714:	0a 94       	dec	r0
    3716:	16 16       	cp	r1, r22
    3718:	17 06       	cpc	r1, r23
    371a:	18 06       	cpc	r1, r24
    371c:	09 06       	cpc	r0, r25
    371e:	08 95       	ret

00003720 <__fp_pscB>:
    3720:	00 24       	eor	r0, r0
    3722:	0a 94       	dec	r0
    3724:	12 16       	cp	r1, r18
    3726:	13 06       	cpc	r1, r19
    3728:	14 06       	cpc	r1, r20
    372a:	05 06       	cpc	r0, r21
    372c:	08 95       	ret

0000372e <__fp_round>:
    372e:	09 2e       	mov	r0, r25
    3730:	03 94       	inc	r0
    3732:	00 0c       	add	r0, r0
    3734:	11 f4       	brne	.+4      	; 0x373a <__fp_round+0xc>
    3736:	88 23       	and	r24, r24
    3738:	52 f0       	brmi	.+20     	; 0x374e <__fp_round+0x20>
    373a:	bb 0f       	add	r27, r27
    373c:	40 f4       	brcc	.+16     	; 0x374e <__fp_round+0x20>
    373e:	bf 2b       	or	r27, r31
    3740:	11 f4       	brne	.+4      	; 0x3746 <__fp_round+0x18>
    3742:	60 ff       	sbrs	r22, 0
    3744:	04 c0       	rjmp	.+8      	; 0x374e <__fp_round+0x20>
    3746:	6f 5f       	subi	r22, 0xFF	; 255
    3748:	7f 4f       	sbci	r23, 0xFF	; 255
    374a:	8f 4f       	sbci	r24, 0xFF	; 255
    374c:	9f 4f       	sbci	r25, 0xFF	; 255
    374e:	08 95       	ret

00003750 <__fp_split3>:
    3750:	57 fd       	sbrc	r21, 7
    3752:	90 58       	subi	r25, 0x80	; 128
    3754:	44 0f       	add	r20, r20
    3756:	55 1f       	adc	r21, r21
    3758:	59 f0       	breq	.+22     	; 0x3770 <__fp_splitA+0x10>
    375a:	5f 3f       	cpi	r21, 0xFF	; 255
    375c:	71 f0       	breq	.+28     	; 0x377a <__fp_splitA+0x1a>
    375e:	47 95       	ror	r20

00003760 <__fp_splitA>:
    3760:	88 0f       	add	r24, r24
    3762:	97 fb       	bst	r25, 7
    3764:	99 1f       	adc	r25, r25
    3766:	61 f0       	breq	.+24     	; 0x3780 <__fp_splitA+0x20>
    3768:	9f 3f       	cpi	r25, 0xFF	; 255
    376a:	79 f0       	breq	.+30     	; 0x378a <__fp_splitA+0x2a>
    376c:	87 95       	ror	r24
    376e:	08 95       	ret
    3770:	12 16       	cp	r1, r18
    3772:	13 06       	cpc	r1, r19
    3774:	14 06       	cpc	r1, r20
    3776:	55 1f       	adc	r21, r21
    3778:	f2 cf       	rjmp	.-28     	; 0x375e <__fp_split3+0xe>
    377a:	46 95       	lsr	r20
    377c:	f1 df       	rcall	.-30     	; 0x3760 <__fp_splitA>
    377e:	08 c0       	rjmp	.+16     	; 0x3790 <__fp_splitA+0x30>
    3780:	16 16       	cp	r1, r22
    3782:	17 06       	cpc	r1, r23
    3784:	18 06       	cpc	r1, r24
    3786:	99 1f       	adc	r25, r25
    3788:	f1 cf       	rjmp	.-30     	; 0x376c <__fp_splitA+0xc>
    378a:	86 95       	lsr	r24
    378c:	71 05       	cpc	r23, r1
    378e:	61 05       	cpc	r22, r1
    3790:	08 94       	sec
    3792:	08 95       	ret

00003794 <__fp_zero>:
    3794:	e8 94       	clt

00003796 <__fp_szero>:
    3796:	bb 27       	eor	r27, r27
    3798:	66 27       	eor	r22, r22
    379a:	77 27       	eor	r23, r23
    379c:	cb 01       	movw	r24, r22
    379e:	97 f9       	bld	r25, 7
    37a0:	08 95       	ret

000037a2 <__gesf2>:
    37a2:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <__fp_cmp>
    37a6:	08 f4       	brcc	.+2      	; 0x37aa <__gesf2+0x8>
    37a8:	8f ef       	ldi	r24, 0xFF	; 255
    37aa:	08 95       	ret

000037ac <__mulsf3>:
    37ac:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <__mulsf3x>
    37b0:	0c 94 97 1b 	jmp	0x372e	; 0x372e <__fp_round>
    37b4:	0e 94 89 1b 	call	0x3712	; 0x3712 <__fp_pscA>
    37b8:	38 f0       	brcs	.+14     	; 0x37c8 <__mulsf3+0x1c>
    37ba:	0e 94 90 1b 	call	0x3720	; 0x3720 <__fp_pscB>
    37be:	20 f0       	brcs	.+8      	; 0x37c8 <__mulsf3+0x1c>
    37c0:	95 23       	and	r25, r21
    37c2:	11 f0       	breq	.+4      	; 0x37c8 <__mulsf3+0x1c>
    37c4:	0c 94 80 1b 	jmp	0x3700	; 0x3700 <__fp_inf>
    37c8:	0c 94 86 1b 	jmp	0x370c	; 0x370c <__fp_nan>
    37cc:	11 24       	eor	r1, r1
    37ce:	0c 94 cb 1b 	jmp	0x3796	; 0x3796 <__fp_szero>

000037d2 <__mulsf3x>:
    37d2:	0e 94 a8 1b 	call	0x3750	; 0x3750 <__fp_split3>
    37d6:	70 f3       	brcs	.-36     	; 0x37b4 <__mulsf3+0x8>

000037d8 <__mulsf3_pse>:
    37d8:	95 9f       	mul	r25, r21
    37da:	c1 f3       	breq	.-16     	; 0x37cc <__mulsf3+0x20>
    37dc:	95 0f       	add	r25, r21
    37de:	50 e0       	ldi	r21, 0x00	; 0
    37e0:	55 1f       	adc	r21, r21
    37e2:	62 9f       	mul	r22, r18
    37e4:	f0 01       	movw	r30, r0
    37e6:	72 9f       	mul	r23, r18
    37e8:	bb 27       	eor	r27, r27
    37ea:	f0 0d       	add	r31, r0
    37ec:	b1 1d       	adc	r27, r1
    37ee:	63 9f       	mul	r22, r19
    37f0:	aa 27       	eor	r26, r26
    37f2:	f0 0d       	add	r31, r0
    37f4:	b1 1d       	adc	r27, r1
    37f6:	aa 1f       	adc	r26, r26
    37f8:	64 9f       	mul	r22, r20
    37fa:	66 27       	eor	r22, r22
    37fc:	b0 0d       	add	r27, r0
    37fe:	a1 1d       	adc	r26, r1
    3800:	66 1f       	adc	r22, r22
    3802:	82 9f       	mul	r24, r18
    3804:	22 27       	eor	r18, r18
    3806:	b0 0d       	add	r27, r0
    3808:	a1 1d       	adc	r26, r1
    380a:	62 1f       	adc	r22, r18
    380c:	73 9f       	mul	r23, r19
    380e:	b0 0d       	add	r27, r0
    3810:	a1 1d       	adc	r26, r1
    3812:	62 1f       	adc	r22, r18
    3814:	83 9f       	mul	r24, r19
    3816:	a0 0d       	add	r26, r0
    3818:	61 1d       	adc	r22, r1
    381a:	22 1f       	adc	r18, r18
    381c:	74 9f       	mul	r23, r20
    381e:	33 27       	eor	r19, r19
    3820:	a0 0d       	add	r26, r0
    3822:	61 1d       	adc	r22, r1
    3824:	23 1f       	adc	r18, r19
    3826:	84 9f       	mul	r24, r20
    3828:	60 0d       	add	r22, r0
    382a:	21 1d       	adc	r18, r1
    382c:	82 2f       	mov	r24, r18
    382e:	76 2f       	mov	r23, r22
    3830:	6a 2f       	mov	r22, r26
    3832:	11 24       	eor	r1, r1
    3834:	9f 57       	subi	r25, 0x7F	; 127
    3836:	50 40       	sbci	r21, 0x00	; 0
    3838:	9a f0       	brmi	.+38     	; 0x3860 <__mulsf3_pse+0x88>
    383a:	f1 f0       	breq	.+60     	; 0x3878 <__mulsf3_pse+0xa0>
    383c:	88 23       	and	r24, r24
    383e:	4a f0       	brmi	.+18     	; 0x3852 <__mulsf3_pse+0x7a>
    3840:	ee 0f       	add	r30, r30
    3842:	ff 1f       	adc	r31, r31
    3844:	bb 1f       	adc	r27, r27
    3846:	66 1f       	adc	r22, r22
    3848:	77 1f       	adc	r23, r23
    384a:	88 1f       	adc	r24, r24
    384c:	91 50       	subi	r25, 0x01	; 1
    384e:	50 40       	sbci	r21, 0x00	; 0
    3850:	a9 f7       	brne	.-22     	; 0x383c <__mulsf3_pse+0x64>
    3852:	9e 3f       	cpi	r25, 0xFE	; 254
    3854:	51 05       	cpc	r21, r1
    3856:	80 f0       	brcs	.+32     	; 0x3878 <__mulsf3_pse+0xa0>
    3858:	0c 94 80 1b 	jmp	0x3700	; 0x3700 <__fp_inf>
    385c:	0c 94 cb 1b 	jmp	0x3796	; 0x3796 <__fp_szero>
    3860:	5f 3f       	cpi	r21, 0xFF	; 255
    3862:	e4 f3       	brlt	.-8      	; 0x385c <__mulsf3_pse+0x84>
    3864:	98 3e       	cpi	r25, 0xE8	; 232
    3866:	d4 f3       	brlt	.-12     	; 0x385c <__mulsf3_pse+0x84>
    3868:	86 95       	lsr	r24
    386a:	77 95       	ror	r23
    386c:	67 95       	ror	r22
    386e:	b7 95       	ror	r27
    3870:	f7 95       	ror	r31
    3872:	e7 95       	ror	r30
    3874:	9f 5f       	subi	r25, 0xFF	; 255
    3876:	c1 f7       	brne	.-16     	; 0x3868 <__mulsf3_pse+0x90>
    3878:	fe 2b       	or	r31, r30
    387a:	88 0f       	add	r24, r24
    387c:	91 1d       	adc	r25, r1
    387e:	96 95       	lsr	r25
    3880:	87 95       	ror	r24
    3882:	97 f9       	bld	r25, 7
    3884:	08 95       	ret

00003886 <__tablejump2__>:
    3886:	ee 0f       	add	r30, r30
    3888:	ff 1f       	adc	r31, r31
    388a:	88 1f       	adc	r24, r24
    388c:	8b bf       	out	0x3b, r24	; 59
    388e:	07 90       	elpm	r0, Z+
    3890:	f6 91       	elpm	r31, Z
    3892:	e0 2d       	mov	r30, r0
    3894:	19 94       	eijmp

00003896 <do_rand>:
    3896:	8f 92       	push	r8
    3898:	9f 92       	push	r9
    389a:	af 92       	push	r10
    389c:	bf 92       	push	r11
    389e:	cf 92       	push	r12
    38a0:	df 92       	push	r13
    38a2:	ef 92       	push	r14
    38a4:	ff 92       	push	r15
    38a6:	cf 93       	push	r28
    38a8:	df 93       	push	r29
    38aa:	ec 01       	movw	r28, r24
    38ac:	68 81       	ld	r22, Y
    38ae:	79 81       	ldd	r23, Y+1	; 0x01
    38b0:	8a 81       	ldd	r24, Y+2	; 0x02
    38b2:	9b 81       	ldd	r25, Y+3	; 0x03
    38b4:	61 15       	cp	r22, r1
    38b6:	71 05       	cpc	r23, r1
    38b8:	81 05       	cpc	r24, r1
    38ba:	91 05       	cpc	r25, r1
    38bc:	21 f4       	brne	.+8      	; 0x38c6 <do_rand+0x30>
    38be:	64 e2       	ldi	r22, 0x24	; 36
    38c0:	79 ed       	ldi	r23, 0xD9	; 217
    38c2:	8b e5       	ldi	r24, 0x5B	; 91
    38c4:	97 e0       	ldi	r25, 0x07	; 7
    38c6:	2d e1       	ldi	r18, 0x1D	; 29
    38c8:	33 ef       	ldi	r19, 0xF3	; 243
    38ca:	41 e0       	ldi	r20, 0x01	; 1
    38cc:	50 e0       	ldi	r21, 0x00	; 0
    38ce:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <__divmodsi4>
    38d2:	49 01       	movw	r8, r18
    38d4:	5a 01       	movw	r10, r20
    38d6:	9b 01       	movw	r18, r22
    38d8:	ac 01       	movw	r20, r24
    38da:	a7 ea       	ldi	r26, 0xA7	; 167
    38dc:	b1 e4       	ldi	r27, 0x41	; 65
    38de:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <__muluhisi3>
    38e2:	6b 01       	movw	r12, r22
    38e4:	7c 01       	movw	r14, r24
    38e6:	ac ee       	ldi	r26, 0xEC	; 236
    38e8:	b4 ef       	ldi	r27, 0xF4	; 244
    38ea:	a5 01       	movw	r20, r10
    38ec:	94 01       	movw	r18, r8
    38ee:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <__mulohisi3>
    38f2:	dc 01       	movw	r26, r24
    38f4:	cb 01       	movw	r24, r22
    38f6:	8c 0d       	add	r24, r12
    38f8:	9d 1d       	adc	r25, r13
    38fa:	ae 1d       	adc	r26, r14
    38fc:	bf 1d       	adc	r27, r15
    38fe:	b7 ff       	sbrs	r27, 7
    3900:	03 c0       	rjmp	.+6      	; 0x3908 <do_rand+0x72>
    3902:	01 97       	sbiw	r24, 0x01	; 1
    3904:	a1 09       	sbc	r26, r1
    3906:	b0 48       	sbci	r27, 0x80	; 128
    3908:	88 83       	st	Y, r24
    390a:	99 83       	std	Y+1, r25	; 0x01
    390c:	aa 83       	std	Y+2, r26	; 0x02
    390e:	bb 83       	std	Y+3, r27	; 0x03
    3910:	9f 77       	andi	r25, 0x7F	; 127
    3912:	df 91       	pop	r29
    3914:	cf 91       	pop	r28
    3916:	ff 90       	pop	r15
    3918:	ef 90       	pop	r14
    391a:	df 90       	pop	r13
    391c:	cf 90       	pop	r12
    391e:	bf 90       	pop	r11
    3920:	af 90       	pop	r10
    3922:	9f 90       	pop	r9
    3924:	8f 90       	pop	r8
    3926:	08 95       	ret

00003928 <rand_r>:
    3928:	0c 94 4b 1c 	jmp	0x3896	; 0x3896 <do_rand>

0000392c <rand>:
    392c:	80 e0       	ldi	r24, 0x00	; 0
    392e:	90 e2       	ldi	r25, 0x20	; 32
    3930:	0c 94 4b 1c 	jmp	0x3896	; 0x3896 <do_rand>

00003934 <srand>:
    3934:	a0 e0       	ldi	r26, 0x00	; 0
    3936:	b0 e0       	ldi	r27, 0x00	; 0
    3938:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
    393c:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    3940:	a0 93 02 20 	sts	0x2002, r26	; 0x802002 <__DATA_REGION_ORIGIN__+0x2>
    3944:	b0 93 03 20 	sts	0x2003, r27	; 0x802003 <__DATA_REGION_ORIGIN__+0x3>
    3948:	08 95       	ret

0000394a <memcpy>:
    394a:	fb 01       	movw	r30, r22
    394c:	dc 01       	movw	r26, r24
    394e:	02 c0       	rjmp	.+4      	; 0x3954 <memcpy+0xa>
    3950:	01 90       	ld	r0, Z+
    3952:	0d 92       	st	X+, r0
    3954:	41 50       	subi	r20, 0x01	; 1
    3956:	50 40       	sbci	r21, 0x00	; 0
    3958:	d8 f7       	brcc	.-10     	; 0x3950 <memcpy+0x6>
    395a:	08 95       	ret

0000395c <memset>:
    395c:	dc 01       	movw	r26, r24
    395e:	01 c0       	rjmp	.+2      	; 0x3962 <memset+0x6>
    3960:	6d 93       	st	X+, r22
    3962:	41 50       	subi	r20, 0x01	; 1
    3964:	50 40       	sbci	r21, 0x00	; 0
    3966:	e0 f7       	brcc	.-8      	; 0x3960 <memset+0x4>
    3968:	08 95       	ret

0000396a <__itoa_ncheck>:
    396a:	bb 27       	eor	r27, r27
    396c:	4a 30       	cpi	r20, 0x0A	; 10
    396e:	31 f4       	brne	.+12     	; 0x397c <__itoa_ncheck+0x12>
    3970:	99 23       	and	r25, r25
    3972:	22 f4       	brpl	.+8      	; 0x397c <__itoa_ncheck+0x12>
    3974:	bd e2       	ldi	r27, 0x2D	; 45
    3976:	90 95       	com	r25
    3978:	81 95       	neg	r24
    397a:	9f 4f       	sbci	r25, 0xFF	; 255
    397c:	0c 94 c1 1c 	jmp	0x3982	; 0x3982 <__utoa_common>

00003980 <__utoa_ncheck>:
    3980:	bb 27       	eor	r27, r27

00003982 <__utoa_common>:
    3982:	fb 01       	movw	r30, r22
    3984:	55 27       	eor	r21, r21
    3986:	aa 27       	eor	r26, r26
    3988:	88 0f       	add	r24, r24
    398a:	99 1f       	adc	r25, r25
    398c:	aa 1f       	adc	r26, r26
    398e:	a4 17       	cp	r26, r20
    3990:	10 f0       	brcs	.+4      	; 0x3996 <__utoa_common+0x14>
    3992:	a4 1b       	sub	r26, r20
    3994:	83 95       	inc	r24
    3996:	50 51       	subi	r21, 0x10	; 16
    3998:	b9 f7       	brne	.-18     	; 0x3988 <__utoa_common+0x6>
    399a:	a0 5d       	subi	r26, 0xD0	; 208
    399c:	aa 33       	cpi	r26, 0x3A	; 58
    399e:	08 f0       	brcs	.+2      	; 0x39a2 <__utoa_common+0x20>
    39a0:	a9 5d       	subi	r26, 0xD9	; 217
    39a2:	a1 93       	st	Z+, r26
    39a4:	00 97       	sbiw	r24, 0x00	; 0
    39a6:	79 f7       	brne	.-34     	; 0x3986 <__utoa_common+0x4>
    39a8:	b1 11       	cpse	r27, r1
    39aa:	b1 93       	st	Z+, r27
    39ac:	11 92       	st	Z+, r1
    39ae:	cb 01       	movw	r24, r22
    39b0:	0c 94 1d 1f 	jmp	0x3e3a	; 0x3e3a <strrev>

000039b4 <sprintf>:
    39b4:	0f 93       	push	r16
    39b6:	1f 93       	push	r17
    39b8:	cf 93       	push	r28
    39ba:	df 93       	push	r29
    39bc:	cd b7       	in	r28, 0x3d	; 61
    39be:	de b7       	in	r29, 0x3e	; 62
    39c0:	2e 97       	sbiw	r28, 0x0e	; 14
    39c2:	cd bf       	out	0x3d, r28	; 61
    39c4:	de bf       	out	0x3e, r29	; 62
    39c6:	0e 89       	ldd	r16, Y+22	; 0x16
    39c8:	1f 89       	ldd	r17, Y+23	; 0x17
    39ca:	86 e0       	ldi	r24, 0x06	; 6
    39cc:	8c 83       	std	Y+4, r24	; 0x04
    39ce:	09 83       	std	Y+1, r16	; 0x01
    39d0:	1a 83       	std	Y+2, r17	; 0x02
    39d2:	8f ef       	ldi	r24, 0xFF	; 255
    39d4:	9f e7       	ldi	r25, 0x7F	; 127
    39d6:	8d 83       	std	Y+5, r24	; 0x05
    39d8:	9e 83       	std	Y+6, r25	; 0x06
    39da:	ae 01       	movw	r20, r28
    39dc:	46 5e       	subi	r20, 0xE6	; 230
    39de:	5f 4f       	sbci	r21, 0xFF	; 255
    39e0:	68 8d       	ldd	r22, Y+24	; 0x18
    39e2:	79 8d       	ldd	r23, Y+25	; 0x19
    39e4:	ce 01       	movw	r24, r28
    39e6:	01 96       	adiw	r24, 0x01	; 1
    39e8:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <vfprintf>
    39ec:	ef 81       	ldd	r30, Y+7	; 0x07
    39ee:	f8 85       	ldd	r31, Y+8	; 0x08
    39f0:	e0 0f       	add	r30, r16
    39f2:	f1 1f       	adc	r31, r17
    39f4:	10 82       	st	Z, r1
    39f6:	2e 96       	adiw	r28, 0x0e	; 14
    39f8:	cd bf       	out	0x3d, r28	; 61
    39fa:	de bf       	out	0x3e, r29	; 62
    39fc:	df 91       	pop	r29
    39fe:	cf 91       	pop	r28
    3a00:	1f 91       	pop	r17
    3a02:	0f 91       	pop	r16
    3a04:	08 95       	ret

00003a06 <vfprintf>:
    3a06:	2f 92       	push	r2
    3a08:	3f 92       	push	r3
    3a0a:	4f 92       	push	r4
    3a0c:	5f 92       	push	r5
    3a0e:	6f 92       	push	r6
    3a10:	7f 92       	push	r7
    3a12:	8f 92       	push	r8
    3a14:	9f 92       	push	r9
    3a16:	af 92       	push	r10
    3a18:	bf 92       	push	r11
    3a1a:	cf 92       	push	r12
    3a1c:	df 92       	push	r13
    3a1e:	ef 92       	push	r14
    3a20:	ff 92       	push	r15
    3a22:	0f 93       	push	r16
    3a24:	1f 93       	push	r17
    3a26:	cf 93       	push	r28
    3a28:	df 93       	push	r29
    3a2a:	cd b7       	in	r28, 0x3d	; 61
    3a2c:	de b7       	in	r29, 0x3e	; 62
    3a2e:	2b 97       	sbiw	r28, 0x0b	; 11
    3a30:	cd bf       	out	0x3d, r28	; 61
    3a32:	de bf       	out	0x3e, r29	; 62
    3a34:	6c 01       	movw	r12, r24
    3a36:	7b 01       	movw	r14, r22
    3a38:	8a 01       	movw	r16, r20
    3a3a:	fc 01       	movw	r30, r24
    3a3c:	16 82       	std	Z+6, r1	; 0x06
    3a3e:	17 82       	std	Z+7, r1	; 0x07
    3a40:	83 81       	ldd	r24, Z+3	; 0x03
    3a42:	81 ff       	sbrs	r24, 1
    3a44:	cc c1       	rjmp	.+920    	; 0x3dde <vfprintf+0x3d8>
    3a46:	ce 01       	movw	r24, r28
    3a48:	01 96       	adiw	r24, 0x01	; 1
    3a4a:	3c 01       	movw	r6, r24
    3a4c:	f6 01       	movw	r30, r12
    3a4e:	93 81       	ldd	r25, Z+3	; 0x03
    3a50:	f7 01       	movw	r30, r14
    3a52:	93 fd       	sbrc	r25, 3
    3a54:	85 91       	lpm	r24, Z+
    3a56:	93 ff       	sbrs	r25, 3
    3a58:	81 91       	ld	r24, Z+
    3a5a:	7f 01       	movw	r14, r30
    3a5c:	88 23       	and	r24, r24
    3a5e:	09 f4       	brne	.+2      	; 0x3a62 <vfprintf+0x5c>
    3a60:	ba c1       	rjmp	.+884    	; 0x3dd6 <vfprintf+0x3d0>
    3a62:	85 32       	cpi	r24, 0x25	; 37
    3a64:	39 f4       	brne	.+14     	; 0x3a74 <vfprintf+0x6e>
    3a66:	93 fd       	sbrc	r25, 3
    3a68:	85 91       	lpm	r24, Z+
    3a6a:	93 ff       	sbrs	r25, 3
    3a6c:	81 91       	ld	r24, Z+
    3a6e:	7f 01       	movw	r14, r30
    3a70:	85 32       	cpi	r24, 0x25	; 37
    3a72:	29 f4       	brne	.+10     	; 0x3a7e <vfprintf+0x78>
    3a74:	b6 01       	movw	r22, r12
    3a76:	90 e0       	ldi	r25, 0x00	; 0
    3a78:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <fputc>
    3a7c:	e7 cf       	rjmp	.-50     	; 0x3a4c <vfprintf+0x46>
    3a7e:	91 2c       	mov	r9, r1
    3a80:	21 2c       	mov	r2, r1
    3a82:	31 2c       	mov	r3, r1
    3a84:	ff e1       	ldi	r31, 0x1F	; 31
    3a86:	f3 15       	cp	r31, r3
    3a88:	d8 f0       	brcs	.+54     	; 0x3ac0 <vfprintf+0xba>
    3a8a:	8b 32       	cpi	r24, 0x2B	; 43
    3a8c:	79 f0       	breq	.+30     	; 0x3aac <vfprintf+0xa6>
    3a8e:	38 f4       	brcc	.+14     	; 0x3a9e <vfprintf+0x98>
    3a90:	80 32       	cpi	r24, 0x20	; 32
    3a92:	79 f0       	breq	.+30     	; 0x3ab2 <vfprintf+0xac>
    3a94:	83 32       	cpi	r24, 0x23	; 35
    3a96:	a1 f4       	brne	.+40     	; 0x3ac0 <vfprintf+0xba>
    3a98:	23 2d       	mov	r18, r3
    3a9a:	20 61       	ori	r18, 0x10	; 16
    3a9c:	1d c0       	rjmp	.+58     	; 0x3ad8 <vfprintf+0xd2>
    3a9e:	8d 32       	cpi	r24, 0x2D	; 45
    3aa0:	61 f0       	breq	.+24     	; 0x3aba <vfprintf+0xb4>
    3aa2:	80 33       	cpi	r24, 0x30	; 48
    3aa4:	69 f4       	brne	.+26     	; 0x3ac0 <vfprintf+0xba>
    3aa6:	23 2d       	mov	r18, r3
    3aa8:	21 60       	ori	r18, 0x01	; 1
    3aaa:	16 c0       	rjmp	.+44     	; 0x3ad8 <vfprintf+0xd2>
    3aac:	83 2d       	mov	r24, r3
    3aae:	82 60       	ori	r24, 0x02	; 2
    3ab0:	38 2e       	mov	r3, r24
    3ab2:	e3 2d       	mov	r30, r3
    3ab4:	e4 60       	ori	r30, 0x04	; 4
    3ab6:	3e 2e       	mov	r3, r30
    3ab8:	2a c0       	rjmp	.+84     	; 0x3b0e <vfprintf+0x108>
    3aba:	f3 2d       	mov	r31, r3
    3abc:	f8 60       	ori	r31, 0x08	; 8
    3abe:	1d c0       	rjmp	.+58     	; 0x3afa <vfprintf+0xf4>
    3ac0:	37 fc       	sbrc	r3, 7
    3ac2:	2d c0       	rjmp	.+90     	; 0x3b1e <vfprintf+0x118>
    3ac4:	20 ed       	ldi	r18, 0xD0	; 208
    3ac6:	28 0f       	add	r18, r24
    3ac8:	2a 30       	cpi	r18, 0x0A	; 10
    3aca:	40 f0       	brcs	.+16     	; 0x3adc <vfprintf+0xd6>
    3acc:	8e 32       	cpi	r24, 0x2E	; 46
    3ace:	b9 f4       	brne	.+46     	; 0x3afe <vfprintf+0xf8>
    3ad0:	36 fc       	sbrc	r3, 6
    3ad2:	81 c1       	rjmp	.+770    	; 0x3dd6 <vfprintf+0x3d0>
    3ad4:	23 2d       	mov	r18, r3
    3ad6:	20 64       	ori	r18, 0x40	; 64
    3ad8:	32 2e       	mov	r3, r18
    3ada:	19 c0       	rjmp	.+50     	; 0x3b0e <vfprintf+0x108>
    3adc:	36 fe       	sbrs	r3, 6
    3ade:	06 c0       	rjmp	.+12     	; 0x3aec <vfprintf+0xe6>
    3ae0:	8a e0       	ldi	r24, 0x0A	; 10
    3ae2:	98 9e       	mul	r9, r24
    3ae4:	20 0d       	add	r18, r0
    3ae6:	11 24       	eor	r1, r1
    3ae8:	92 2e       	mov	r9, r18
    3aea:	11 c0       	rjmp	.+34     	; 0x3b0e <vfprintf+0x108>
    3aec:	ea e0       	ldi	r30, 0x0A	; 10
    3aee:	2e 9e       	mul	r2, r30
    3af0:	20 0d       	add	r18, r0
    3af2:	11 24       	eor	r1, r1
    3af4:	22 2e       	mov	r2, r18
    3af6:	f3 2d       	mov	r31, r3
    3af8:	f0 62       	ori	r31, 0x20	; 32
    3afa:	3f 2e       	mov	r3, r31
    3afc:	08 c0       	rjmp	.+16     	; 0x3b0e <vfprintf+0x108>
    3afe:	8c 36       	cpi	r24, 0x6C	; 108
    3b00:	21 f4       	brne	.+8      	; 0x3b0a <vfprintf+0x104>
    3b02:	83 2d       	mov	r24, r3
    3b04:	80 68       	ori	r24, 0x80	; 128
    3b06:	38 2e       	mov	r3, r24
    3b08:	02 c0       	rjmp	.+4      	; 0x3b0e <vfprintf+0x108>
    3b0a:	88 36       	cpi	r24, 0x68	; 104
    3b0c:	41 f4       	brne	.+16     	; 0x3b1e <vfprintf+0x118>
    3b0e:	f7 01       	movw	r30, r14
    3b10:	93 fd       	sbrc	r25, 3
    3b12:	85 91       	lpm	r24, Z+
    3b14:	93 ff       	sbrs	r25, 3
    3b16:	81 91       	ld	r24, Z+
    3b18:	7f 01       	movw	r14, r30
    3b1a:	81 11       	cpse	r24, r1
    3b1c:	b3 cf       	rjmp	.-154    	; 0x3a84 <vfprintf+0x7e>
    3b1e:	98 2f       	mov	r25, r24
    3b20:	9f 7d       	andi	r25, 0xDF	; 223
    3b22:	95 54       	subi	r25, 0x45	; 69
    3b24:	93 30       	cpi	r25, 0x03	; 3
    3b26:	28 f4       	brcc	.+10     	; 0x3b32 <vfprintf+0x12c>
    3b28:	0c 5f       	subi	r16, 0xFC	; 252
    3b2a:	1f 4f       	sbci	r17, 0xFF	; 255
    3b2c:	9f e3       	ldi	r25, 0x3F	; 63
    3b2e:	99 83       	std	Y+1, r25	; 0x01
    3b30:	0d c0       	rjmp	.+26     	; 0x3b4c <vfprintf+0x146>
    3b32:	83 36       	cpi	r24, 0x63	; 99
    3b34:	31 f0       	breq	.+12     	; 0x3b42 <vfprintf+0x13c>
    3b36:	83 37       	cpi	r24, 0x73	; 115
    3b38:	71 f0       	breq	.+28     	; 0x3b56 <vfprintf+0x150>
    3b3a:	83 35       	cpi	r24, 0x53	; 83
    3b3c:	09 f0       	breq	.+2      	; 0x3b40 <vfprintf+0x13a>
    3b3e:	59 c0       	rjmp	.+178    	; 0x3bf2 <vfprintf+0x1ec>
    3b40:	21 c0       	rjmp	.+66     	; 0x3b84 <vfprintf+0x17e>
    3b42:	f8 01       	movw	r30, r16
    3b44:	80 81       	ld	r24, Z
    3b46:	89 83       	std	Y+1, r24	; 0x01
    3b48:	0e 5f       	subi	r16, 0xFE	; 254
    3b4a:	1f 4f       	sbci	r17, 0xFF	; 255
    3b4c:	88 24       	eor	r8, r8
    3b4e:	83 94       	inc	r8
    3b50:	91 2c       	mov	r9, r1
    3b52:	53 01       	movw	r10, r6
    3b54:	13 c0       	rjmp	.+38     	; 0x3b7c <vfprintf+0x176>
    3b56:	28 01       	movw	r4, r16
    3b58:	f2 e0       	ldi	r31, 0x02	; 2
    3b5a:	4f 0e       	add	r4, r31
    3b5c:	51 1c       	adc	r5, r1
    3b5e:	f8 01       	movw	r30, r16
    3b60:	a0 80       	ld	r10, Z
    3b62:	b1 80       	ldd	r11, Z+1	; 0x01
    3b64:	36 fe       	sbrs	r3, 6
    3b66:	03 c0       	rjmp	.+6      	; 0x3b6e <vfprintf+0x168>
    3b68:	69 2d       	mov	r22, r9
    3b6a:	70 e0       	ldi	r23, 0x00	; 0
    3b6c:	02 c0       	rjmp	.+4      	; 0x3b72 <vfprintf+0x16c>
    3b6e:	6f ef       	ldi	r22, 0xFF	; 255
    3b70:	7f ef       	ldi	r23, 0xFF	; 255
    3b72:	c5 01       	movw	r24, r10
    3b74:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <strnlen>
    3b78:	4c 01       	movw	r8, r24
    3b7a:	82 01       	movw	r16, r4
    3b7c:	f3 2d       	mov	r31, r3
    3b7e:	ff 77       	andi	r31, 0x7F	; 127
    3b80:	3f 2e       	mov	r3, r31
    3b82:	16 c0       	rjmp	.+44     	; 0x3bb0 <vfprintf+0x1aa>
    3b84:	28 01       	movw	r4, r16
    3b86:	22 e0       	ldi	r18, 0x02	; 2
    3b88:	42 0e       	add	r4, r18
    3b8a:	51 1c       	adc	r5, r1
    3b8c:	f8 01       	movw	r30, r16
    3b8e:	a0 80       	ld	r10, Z
    3b90:	b1 80       	ldd	r11, Z+1	; 0x01
    3b92:	36 fe       	sbrs	r3, 6
    3b94:	03 c0       	rjmp	.+6      	; 0x3b9c <vfprintf+0x196>
    3b96:	69 2d       	mov	r22, r9
    3b98:	70 e0       	ldi	r23, 0x00	; 0
    3b9a:	02 c0       	rjmp	.+4      	; 0x3ba0 <vfprintf+0x19a>
    3b9c:	6f ef       	ldi	r22, 0xFF	; 255
    3b9e:	7f ef       	ldi	r23, 0xFF	; 255
    3ba0:	c5 01       	movw	r24, r10
    3ba2:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <strnlen_P>
    3ba6:	4c 01       	movw	r8, r24
    3ba8:	f3 2d       	mov	r31, r3
    3baa:	f0 68       	ori	r31, 0x80	; 128
    3bac:	3f 2e       	mov	r3, r31
    3bae:	82 01       	movw	r16, r4
    3bb0:	33 fc       	sbrc	r3, 3
    3bb2:	1b c0       	rjmp	.+54     	; 0x3bea <vfprintf+0x1e4>
    3bb4:	82 2d       	mov	r24, r2
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	88 16       	cp	r8, r24
    3bba:	99 06       	cpc	r9, r25
    3bbc:	b0 f4       	brcc	.+44     	; 0x3bea <vfprintf+0x1e4>
    3bbe:	b6 01       	movw	r22, r12
    3bc0:	80 e2       	ldi	r24, 0x20	; 32
    3bc2:	90 e0       	ldi	r25, 0x00	; 0
    3bc4:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <fputc>
    3bc8:	2a 94       	dec	r2
    3bca:	f4 cf       	rjmp	.-24     	; 0x3bb4 <vfprintf+0x1ae>
    3bcc:	f5 01       	movw	r30, r10
    3bce:	37 fc       	sbrc	r3, 7
    3bd0:	85 91       	lpm	r24, Z+
    3bd2:	37 fe       	sbrs	r3, 7
    3bd4:	81 91       	ld	r24, Z+
    3bd6:	5f 01       	movw	r10, r30
    3bd8:	b6 01       	movw	r22, r12
    3bda:	90 e0       	ldi	r25, 0x00	; 0
    3bdc:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <fputc>
    3be0:	21 10       	cpse	r2, r1
    3be2:	2a 94       	dec	r2
    3be4:	21 e0       	ldi	r18, 0x01	; 1
    3be6:	82 1a       	sub	r8, r18
    3be8:	91 08       	sbc	r9, r1
    3bea:	81 14       	cp	r8, r1
    3bec:	91 04       	cpc	r9, r1
    3bee:	71 f7       	brne	.-36     	; 0x3bcc <vfprintf+0x1c6>
    3bf0:	e8 c0       	rjmp	.+464    	; 0x3dc2 <vfprintf+0x3bc>
    3bf2:	84 36       	cpi	r24, 0x64	; 100
    3bf4:	11 f0       	breq	.+4      	; 0x3bfa <vfprintf+0x1f4>
    3bf6:	89 36       	cpi	r24, 0x69	; 105
    3bf8:	41 f5       	brne	.+80     	; 0x3c4a <vfprintf+0x244>
    3bfa:	f8 01       	movw	r30, r16
    3bfc:	37 fe       	sbrs	r3, 7
    3bfe:	07 c0       	rjmp	.+14     	; 0x3c0e <vfprintf+0x208>
    3c00:	60 81       	ld	r22, Z
    3c02:	71 81       	ldd	r23, Z+1	; 0x01
    3c04:	82 81       	ldd	r24, Z+2	; 0x02
    3c06:	93 81       	ldd	r25, Z+3	; 0x03
    3c08:	0c 5f       	subi	r16, 0xFC	; 252
    3c0a:	1f 4f       	sbci	r17, 0xFF	; 255
    3c0c:	08 c0       	rjmp	.+16     	; 0x3c1e <vfprintf+0x218>
    3c0e:	60 81       	ld	r22, Z
    3c10:	71 81       	ldd	r23, Z+1	; 0x01
    3c12:	07 2e       	mov	r0, r23
    3c14:	00 0c       	add	r0, r0
    3c16:	88 0b       	sbc	r24, r24
    3c18:	99 0b       	sbc	r25, r25
    3c1a:	0e 5f       	subi	r16, 0xFE	; 254
    3c1c:	1f 4f       	sbci	r17, 0xFF	; 255
    3c1e:	f3 2d       	mov	r31, r3
    3c20:	ff 76       	andi	r31, 0x6F	; 111
    3c22:	3f 2e       	mov	r3, r31
    3c24:	97 ff       	sbrs	r25, 7
    3c26:	09 c0       	rjmp	.+18     	; 0x3c3a <vfprintf+0x234>
    3c28:	90 95       	com	r25
    3c2a:	80 95       	com	r24
    3c2c:	70 95       	com	r23
    3c2e:	61 95       	neg	r22
    3c30:	7f 4f       	sbci	r23, 0xFF	; 255
    3c32:	8f 4f       	sbci	r24, 0xFF	; 255
    3c34:	9f 4f       	sbci	r25, 0xFF	; 255
    3c36:	f0 68       	ori	r31, 0x80	; 128
    3c38:	3f 2e       	mov	r3, r31
    3c3a:	2a e0       	ldi	r18, 0x0A	; 10
    3c3c:	30 e0       	ldi	r19, 0x00	; 0
    3c3e:	a3 01       	movw	r20, r6
    3c40:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <__ultoa_invert>
    3c44:	88 2e       	mov	r8, r24
    3c46:	86 18       	sub	r8, r6
    3c48:	45 c0       	rjmp	.+138    	; 0x3cd4 <vfprintf+0x2ce>
    3c4a:	85 37       	cpi	r24, 0x75	; 117
    3c4c:	31 f4       	brne	.+12     	; 0x3c5a <vfprintf+0x254>
    3c4e:	23 2d       	mov	r18, r3
    3c50:	2f 7e       	andi	r18, 0xEF	; 239
    3c52:	b2 2e       	mov	r11, r18
    3c54:	2a e0       	ldi	r18, 0x0A	; 10
    3c56:	30 e0       	ldi	r19, 0x00	; 0
    3c58:	25 c0       	rjmp	.+74     	; 0x3ca4 <vfprintf+0x29e>
    3c5a:	93 2d       	mov	r25, r3
    3c5c:	99 7f       	andi	r25, 0xF9	; 249
    3c5e:	b9 2e       	mov	r11, r25
    3c60:	8f 36       	cpi	r24, 0x6F	; 111
    3c62:	c1 f0       	breq	.+48     	; 0x3c94 <vfprintf+0x28e>
    3c64:	18 f4       	brcc	.+6      	; 0x3c6c <vfprintf+0x266>
    3c66:	88 35       	cpi	r24, 0x58	; 88
    3c68:	79 f0       	breq	.+30     	; 0x3c88 <vfprintf+0x282>
    3c6a:	b5 c0       	rjmp	.+362    	; 0x3dd6 <vfprintf+0x3d0>
    3c6c:	80 37       	cpi	r24, 0x70	; 112
    3c6e:	19 f0       	breq	.+6      	; 0x3c76 <vfprintf+0x270>
    3c70:	88 37       	cpi	r24, 0x78	; 120
    3c72:	21 f0       	breq	.+8      	; 0x3c7c <vfprintf+0x276>
    3c74:	b0 c0       	rjmp	.+352    	; 0x3dd6 <vfprintf+0x3d0>
    3c76:	e9 2f       	mov	r30, r25
    3c78:	e0 61       	ori	r30, 0x10	; 16
    3c7a:	be 2e       	mov	r11, r30
    3c7c:	b4 fe       	sbrs	r11, 4
    3c7e:	0d c0       	rjmp	.+26     	; 0x3c9a <vfprintf+0x294>
    3c80:	fb 2d       	mov	r31, r11
    3c82:	f4 60       	ori	r31, 0x04	; 4
    3c84:	bf 2e       	mov	r11, r31
    3c86:	09 c0       	rjmp	.+18     	; 0x3c9a <vfprintf+0x294>
    3c88:	34 fe       	sbrs	r3, 4
    3c8a:	0a c0       	rjmp	.+20     	; 0x3ca0 <vfprintf+0x29a>
    3c8c:	29 2f       	mov	r18, r25
    3c8e:	26 60       	ori	r18, 0x06	; 6
    3c90:	b2 2e       	mov	r11, r18
    3c92:	06 c0       	rjmp	.+12     	; 0x3ca0 <vfprintf+0x29a>
    3c94:	28 e0       	ldi	r18, 0x08	; 8
    3c96:	30 e0       	ldi	r19, 0x00	; 0
    3c98:	05 c0       	rjmp	.+10     	; 0x3ca4 <vfprintf+0x29e>
    3c9a:	20 e1       	ldi	r18, 0x10	; 16
    3c9c:	30 e0       	ldi	r19, 0x00	; 0
    3c9e:	02 c0       	rjmp	.+4      	; 0x3ca4 <vfprintf+0x29e>
    3ca0:	20 e1       	ldi	r18, 0x10	; 16
    3ca2:	32 e0       	ldi	r19, 0x02	; 2
    3ca4:	f8 01       	movw	r30, r16
    3ca6:	b7 fe       	sbrs	r11, 7
    3ca8:	07 c0       	rjmp	.+14     	; 0x3cb8 <vfprintf+0x2b2>
    3caa:	60 81       	ld	r22, Z
    3cac:	71 81       	ldd	r23, Z+1	; 0x01
    3cae:	82 81       	ldd	r24, Z+2	; 0x02
    3cb0:	93 81       	ldd	r25, Z+3	; 0x03
    3cb2:	0c 5f       	subi	r16, 0xFC	; 252
    3cb4:	1f 4f       	sbci	r17, 0xFF	; 255
    3cb6:	06 c0       	rjmp	.+12     	; 0x3cc4 <vfprintf+0x2be>
    3cb8:	60 81       	ld	r22, Z
    3cba:	71 81       	ldd	r23, Z+1	; 0x01
    3cbc:	80 e0       	ldi	r24, 0x00	; 0
    3cbe:	90 e0       	ldi	r25, 0x00	; 0
    3cc0:	0e 5f       	subi	r16, 0xFE	; 254
    3cc2:	1f 4f       	sbci	r17, 0xFF	; 255
    3cc4:	a3 01       	movw	r20, r6
    3cc6:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <__ultoa_invert>
    3cca:	88 2e       	mov	r8, r24
    3ccc:	86 18       	sub	r8, r6
    3cce:	fb 2d       	mov	r31, r11
    3cd0:	ff 77       	andi	r31, 0x7F	; 127
    3cd2:	3f 2e       	mov	r3, r31
    3cd4:	36 fe       	sbrs	r3, 6
    3cd6:	0d c0       	rjmp	.+26     	; 0x3cf2 <vfprintf+0x2ec>
    3cd8:	23 2d       	mov	r18, r3
    3cda:	2e 7f       	andi	r18, 0xFE	; 254
    3cdc:	a2 2e       	mov	r10, r18
    3cde:	89 14       	cp	r8, r9
    3ce0:	58 f4       	brcc	.+22     	; 0x3cf8 <vfprintf+0x2f2>
    3ce2:	34 fe       	sbrs	r3, 4
    3ce4:	0b c0       	rjmp	.+22     	; 0x3cfc <vfprintf+0x2f6>
    3ce6:	32 fc       	sbrc	r3, 2
    3ce8:	09 c0       	rjmp	.+18     	; 0x3cfc <vfprintf+0x2f6>
    3cea:	83 2d       	mov	r24, r3
    3cec:	8e 7e       	andi	r24, 0xEE	; 238
    3cee:	a8 2e       	mov	r10, r24
    3cf0:	05 c0       	rjmp	.+10     	; 0x3cfc <vfprintf+0x2f6>
    3cf2:	b8 2c       	mov	r11, r8
    3cf4:	a3 2c       	mov	r10, r3
    3cf6:	03 c0       	rjmp	.+6      	; 0x3cfe <vfprintf+0x2f8>
    3cf8:	b8 2c       	mov	r11, r8
    3cfa:	01 c0       	rjmp	.+2      	; 0x3cfe <vfprintf+0x2f8>
    3cfc:	b9 2c       	mov	r11, r9
    3cfe:	a4 fe       	sbrs	r10, 4
    3d00:	0f c0       	rjmp	.+30     	; 0x3d20 <vfprintf+0x31a>
    3d02:	fe 01       	movw	r30, r28
    3d04:	e8 0d       	add	r30, r8
    3d06:	f1 1d       	adc	r31, r1
    3d08:	80 81       	ld	r24, Z
    3d0a:	80 33       	cpi	r24, 0x30	; 48
    3d0c:	21 f4       	brne	.+8      	; 0x3d16 <vfprintf+0x310>
    3d0e:	9a 2d       	mov	r25, r10
    3d10:	99 7e       	andi	r25, 0xE9	; 233
    3d12:	a9 2e       	mov	r10, r25
    3d14:	09 c0       	rjmp	.+18     	; 0x3d28 <vfprintf+0x322>
    3d16:	a2 fe       	sbrs	r10, 2
    3d18:	06 c0       	rjmp	.+12     	; 0x3d26 <vfprintf+0x320>
    3d1a:	b3 94       	inc	r11
    3d1c:	b3 94       	inc	r11
    3d1e:	04 c0       	rjmp	.+8      	; 0x3d28 <vfprintf+0x322>
    3d20:	8a 2d       	mov	r24, r10
    3d22:	86 78       	andi	r24, 0x86	; 134
    3d24:	09 f0       	breq	.+2      	; 0x3d28 <vfprintf+0x322>
    3d26:	b3 94       	inc	r11
    3d28:	a3 fc       	sbrc	r10, 3
    3d2a:	11 c0       	rjmp	.+34     	; 0x3d4e <vfprintf+0x348>
    3d2c:	a0 fe       	sbrs	r10, 0
    3d2e:	06 c0       	rjmp	.+12     	; 0x3d3c <vfprintf+0x336>
    3d30:	b2 14       	cp	r11, r2
    3d32:	88 f4       	brcc	.+34     	; 0x3d56 <vfprintf+0x350>
    3d34:	28 0c       	add	r2, r8
    3d36:	92 2c       	mov	r9, r2
    3d38:	9b 18       	sub	r9, r11
    3d3a:	0e c0       	rjmp	.+28     	; 0x3d58 <vfprintf+0x352>
    3d3c:	b2 14       	cp	r11, r2
    3d3e:	60 f4       	brcc	.+24     	; 0x3d58 <vfprintf+0x352>
    3d40:	b6 01       	movw	r22, r12
    3d42:	80 e2       	ldi	r24, 0x20	; 32
    3d44:	90 e0       	ldi	r25, 0x00	; 0
    3d46:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <fputc>
    3d4a:	b3 94       	inc	r11
    3d4c:	f7 cf       	rjmp	.-18     	; 0x3d3c <vfprintf+0x336>
    3d4e:	b2 14       	cp	r11, r2
    3d50:	18 f4       	brcc	.+6      	; 0x3d58 <vfprintf+0x352>
    3d52:	2b 18       	sub	r2, r11
    3d54:	02 c0       	rjmp	.+4      	; 0x3d5a <vfprintf+0x354>
    3d56:	98 2c       	mov	r9, r8
    3d58:	21 2c       	mov	r2, r1
    3d5a:	a4 fe       	sbrs	r10, 4
    3d5c:	10 c0       	rjmp	.+32     	; 0x3d7e <vfprintf+0x378>
    3d5e:	b6 01       	movw	r22, r12
    3d60:	80 e3       	ldi	r24, 0x30	; 48
    3d62:	90 e0       	ldi	r25, 0x00	; 0
    3d64:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <fputc>
    3d68:	a2 fe       	sbrs	r10, 2
    3d6a:	17 c0       	rjmp	.+46     	; 0x3d9a <vfprintf+0x394>
    3d6c:	a1 fc       	sbrc	r10, 1
    3d6e:	03 c0       	rjmp	.+6      	; 0x3d76 <vfprintf+0x370>
    3d70:	88 e7       	ldi	r24, 0x78	; 120
    3d72:	90 e0       	ldi	r25, 0x00	; 0
    3d74:	02 c0       	rjmp	.+4      	; 0x3d7a <vfprintf+0x374>
    3d76:	88 e5       	ldi	r24, 0x58	; 88
    3d78:	90 e0       	ldi	r25, 0x00	; 0
    3d7a:	b6 01       	movw	r22, r12
    3d7c:	0c c0       	rjmp	.+24     	; 0x3d96 <vfprintf+0x390>
    3d7e:	8a 2d       	mov	r24, r10
    3d80:	86 78       	andi	r24, 0x86	; 134
    3d82:	59 f0       	breq	.+22     	; 0x3d9a <vfprintf+0x394>
    3d84:	a1 fe       	sbrs	r10, 1
    3d86:	02 c0       	rjmp	.+4      	; 0x3d8c <vfprintf+0x386>
    3d88:	8b e2       	ldi	r24, 0x2B	; 43
    3d8a:	01 c0       	rjmp	.+2      	; 0x3d8e <vfprintf+0x388>
    3d8c:	80 e2       	ldi	r24, 0x20	; 32
    3d8e:	a7 fc       	sbrc	r10, 7
    3d90:	8d e2       	ldi	r24, 0x2D	; 45
    3d92:	b6 01       	movw	r22, r12
    3d94:	90 e0       	ldi	r25, 0x00	; 0
    3d96:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <fputc>
    3d9a:	89 14       	cp	r8, r9
    3d9c:	38 f4       	brcc	.+14     	; 0x3dac <vfprintf+0x3a6>
    3d9e:	b6 01       	movw	r22, r12
    3da0:	80 e3       	ldi	r24, 0x30	; 48
    3da2:	90 e0       	ldi	r25, 0x00	; 0
    3da4:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <fputc>
    3da8:	9a 94       	dec	r9
    3daa:	f7 cf       	rjmp	.-18     	; 0x3d9a <vfprintf+0x394>
    3dac:	8a 94       	dec	r8
    3dae:	f3 01       	movw	r30, r6
    3db0:	e8 0d       	add	r30, r8
    3db2:	f1 1d       	adc	r31, r1
    3db4:	80 81       	ld	r24, Z
    3db6:	b6 01       	movw	r22, r12
    3db8:	90 e0       	ldi	r25, 0x00	; 0
    3dba:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <fputc>
    3dbe:	81 10       	cpse	r8, r1
    3dc0:	f5 cf       	rjmp	.-22     	; 0x3dac <vfprintf+0x3a6>
    3dc2:	22 20       	and	r2, r2
    3dc4:	09 f4       	brne	.+2      	; 0x3dc8 <vfprintf+0x3c2>
    3dc6:	42 ce       	rjmp	.-892    	; 0x3a4c <vfprintf+0x46>
    3dc8:	b6 01       	movw	r22, r12
    3dca:	80 e2       	ldi	r24, 0x20	; 32
    3dcc:	90 e0       	ldi	r25, 0x00	; 0
    3dce:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <fputc>
    3dd2:	2a 94       	dec	r2
    3dd4:	f6 cf       	rjmp	.-20     	; 0x3dc2 <vfprintf+0x3bc>
    3dd6:	f6 01       	movw	r30, r12
    3dd8:	86 81       	ldd	r24, Z+6	; 0x06
    3dda:	97 81       	ldd	r25, Z+7	; 0x07
    3ddc:	02 c0       	rjmp	.+4      	; 0x3de2 <vfprintf+0x3dc>
    3dde:	8f ef       	ldi	r24, 0xFF	; 255
    3de0:	9f ef       	ldi	r25, 0xFF	; 255
    3de2:	2b 96       	adiw	r28, 0x0b	; 11
    3de4:	cd bf       	out	0x3d, r28	; 61
    3de6:	de bf       	out	0x3e, r29	; 62
    3de8:	df 91       	pop	r29
    3dea:	cf 91       	pop	r28
    3dec:	1f 91       	pop	r17
    3dee:	0f 91       	pop	r16
    3df0:	ff 90       	pop	r15
    3df2:	ef 90       	pop	r14
    3df4:	df 90       	pop	r13
    3df6:	cf 90       	pop	r12
    3df8:	bf 90       	pop	r11
    3dfa:	af 90       	pop	r10
    3dfc:	9f 90       	pop	r9
    3dfe:	8f 90       	pop	r8
    3e00:	7f 90       	pop	r7
    3e02:	6f 90       	pop	r6
    3e04:	5f 90       	pop	r5
    3e06:	4f 90       	pop	r4
    3e08:	3f 90       	pop	r3
    3e0a:	2f 90       	pop	r2
    3e0c:	08 95       	ret

00003e0e <strnlen_P>:
    3e0e:	fc 01       	movw	r30, r24
    3e10:	05 90       	lpm	r0, Z+
    3e12:	61 50       	subi	r22, 0x01	; 1
    3e14:	70 40       	sbci	r23, 0x00	; 0
    3e16:	01 10       	cpse	r0, r1
    3e18:	d8 f7       	brcc	.-10     	; 0x3e10 <strnlen_P+0x2>
    3e1a:	80 95       	com	r24
    3e1c:	90 95       	com	r25
    3e1e:	8e 0f       	add	r24, r30
    3e20:	9f 1f       	adc	r25, r31
    3e22:	08 95       	ret

00003e24 <strnlen>:
    3e24:	fc 01       	movw	r30, r24
    3e26:	61 50       	subi	r22, 0x01	; 1
    3e28:	70 40       	sbci	r23, 0x00	; 0
    3e2a:	01 90       	ld	r0, Z+
    3e2c:	01 10       	cpse	r0, r1
    3e2e:	d8 f7       	brcc	.-10     	; 0x3e26 <strnlen+0x2>
    3e30:	80 95       	com	r24
    3e32:	90 95       	com	r25
    3e34:	8e 0f       	add	r24, r30
    3e36:	9f 1f       	adc	r25, r31
    3e38:	08 95       	ret

00003e3a <strrev>:
    3e3a:	dc 01       	movw	r26, r24
    3e3c:	fc 01       	movw	r30, r24
    3e3e:	67 2f       	mov	r22, r23
    3e40:	71 91       	ld	r23, Z+
    3e42:	77 23       	and	r23, r23
    3e44:	e1 f7       	brne	.-8      	; 0x3e3e <strrev+0x4>
    3e46:	32 97       	sbiw	r30, 0x02	; 2
    3e48:	04 c0       	rjmp	.+8      	; 0x3e52 <strrev+0x18>
    3e4a:	7c 91       	ld	r23, X
    3e4c:	6d 93       	st	X+, r22
    3e4e:	70 83       	st	Z, r23
    3e50:	62 91       	ld	r22, -Z
    3e52:	ae 17       	cp	r26, r30
    3e54:	bf 07       	cpc	r27, r31
    3e56:	c8 f3       	brcs	.-14     	; 0x3e4a <strrev+0x10>
    3e58:	08 95       	ret

00003e5a <fputc>:
    3e5a:	0f 93       	push	r16
    3e5c:	1f 93       	push	r17
    3e5e:	cf 93       	push	r28
    3e60:	df 93       	push	r29
    3e62:	fb 01       	movw	r30, r22
    3e64:	23 81       	ldd	r18, Z+3	; 0x03
    3e66:	21 fd       	sbrc	r18, 1
    3e68:	03 c0       	rjmp	.+6      	; 0x3e70 <fputc+0x16>
    3e6a:	8f ef       	ldi	r24, 0xFF	; 255
    3e6c:	9f ef       	ldi	r25, 0xFF	; 255
    3e6e:	2c c0       	rjmp	.+88     	; 0x3ec8 <fputc+0x6e>
    3e70:	22 ff       	sbrs	r18, 2
    3e72:	16 c0       	rjmp	.+44     	; 0x3ea0 <fputc+0x46>
    3e74:	46 81       	ldd	r20, Z+6	; 0x06
    3e76:	57 81       	ldd	r21, Z+7	; 0x07
    3e78:	24 81       	ldd	r18, Z+4	; 0x04
    3e7a:	35 81       	ldd	r19, Z+5	; 0x05
    3e7c:	42 17       	cp	r20, r18
    3e7e:	53 07       	cpc	r21, r19
    3e80:	44 f4       	brge	.+16     	; 0x3e92 <fputc+0x38>
    3e82:	a0 81       	ld	r26, Z
    3e84:	b1 81       	ldd	r27, Z+1	; 0x01
    3e86:	9d 01       	movw	r18, r26
    3e88:	2f 5f       	subi	r18, 0xFF	; 255
    3e8a:	3f 4f       	sbci	r19, 0xFF	; 255
    3e8c:	20 83       	st	Z, r18
    3e8e:	31 83       	std	Z+1, r19	; 0x01
    3e90:	8c 93       	st	X, r24
    3e92:	26 81       	ldd	r18, Z+6	; 0x06
    3e94:	37 81       	ldd	r19, Z+7	; 0x07
    3e96:	2f 5f       	subi	r18, 0xFF	; 255
    3e98:	3f 4f       	sbci	r19, 0xFF	; 255
    3e9a:	26 83       	std	Z+6, r18	; 0x06
    3e9c:	37 83       	std	Z+7, r19	; 0x07
    3e9e:	14 c0       	rjmp	.+40     	; 0x3ec8 <fputc+0x6e>
    3ea0:	8b 01       	movw	r16, r22
    3ea2:	ec 01       	movw	r28, r24
    3ea4:	fb 01       	movw	r30, r22
    3ea6:	00 84       	ldd	r0, Z+8	; 0x08
    3ea8:	f1 85       	ldd	r31, Z+9	; 0x09
    3eaa:	e0 2d       	mov	r30, r0
    3eac:	19 95       	eicall
    3eae:	89 2b       	or	r24, r25
    3eb0:	e1 f6       	brne	.-72     	; 0x3e6a <fputc+0x10>
    3eb2:	d8 01       	movw	r26, r16
    3eb4:	16 96       	adiw	r26, 0x06	; 6
    3eb6:	8d 91       	ld	r24, X+
    3eb8:	9c 91       	ld	r25, X
    3eba:	17 97       	sbiw	r26, 0x07	; 7
    3ebc:	01 96       	adiw	r24, 0x01	; 1
    3ebe:	16 96       	adiw	r26, 0x06	; 6
    3ec0:	8d 93       	st	X+, r24
    3ec2:	9c 93       	st	X, r25
    3ec4:	17 97       	sbiw	r26, 0x07	; 7
    3ec6:	ce 01       	movw	r24, r28
    3ec8:	df 91       	pop	r29
    3eca:	cf 91       	pop	r28
    3ecc:	1f 91       	pop	r17
    3ece:	0f 91       	pop	r16
    3ed0:	08 95       	ret

00003ed2 <__ultoa_invert>:
    3ed2:	fa 01       	movw	r30, r20
    3ed4:	aa 27       	eor	r26, r26
    3ed6:	28 30       	cpi	r18, 0x08	; 8
    3ed8:	51 f1       	breq	.+84     	; 0x3f2e <__ultoa_invert+0x5c>
    3eda:	20 31       	cpi	r18, 0x10	; 16
    3edc:	81 f1       	breq	.+96     	; 0x3f3e <__ultoa_invert+0x6c>
    3ede:	e8 94       	clt
    3ee0:	6f 93       	push	r22
    3ee2:	6e 7f       	andi	r22, 0xFE	; 254
    3ee4:	6e 5f       	subi	r22, 0xFE	; 254
    3ee6:	7f 4f       	sbci	r23, 0xFF	; 255
    3ee8:	8f 4f       	sbci	r24, 0xFF	; 255
    3eea:	9f 4f       	sbci	r25, 0xFF	; 255
    3eec:	af 4f       	sbci	r26, 0xFF	; 255
    3eee:	b1 e0       	ldi	r27, 0x01	; 1
    3ef0:	3e d0       	rcall	.+124    	; 0x3f6e <__ultoa_invert+0x9c>
    3ef2:	b4 e0       	ldi	r27, 0x04	; 4
    3ef4:	3c d0       	rcall	.+120    	; 0x3f6e <__ultoa_invert+0x9c>
    3ef6:	67 0f       	add	r22, r23
    3ef8:	78 1f       	adc	r23, r24
    3efa:	89 1f       	adc	r24, r25
    3efc:	9a 1f       	adc	r25, r26
    3efe:	a1 1d       	adc	r26, r1
    3f00:	68 0f       	add	r22, r24
    3f02:	79 1f       	adc	r23, r25
    3f04:	8a 1f       	adc	r24, r26
    3f06:	91 1d       	adc	r25, r1
    3f08:	a1 1d       	adc	r26, r1
    3f0a:	6a 0f       	add	r22, r26
    3f0c:	71 1d       	adc	r23, r1
    3f0e:	81 1d       	adc	r24, r1
    3f10:	91 1d       	adc	r25, r1
    3f12:	a1 1d       	adc	r26, r1
    3f14:	20 d0       	rcall	.+64     	; 0x3f56 <__ultoa_invert+0x84>
    3f16:	09 f4       	brne	.+2      	; 0x3f1a <__ultoa_invert+0x48>
    3f18:	68 94       	set
    3f1a:	3f 91       	pop	r19
    3f1c:	2a e0       	ldi	r18, 0x0A	; 10
    3f1e:	26 9f       	mul	r18, r22
    3f20:	11 24       	eor	r1, r1
    3f22:	30 19       	sub	r19, r0
    3f24:	30 5d       	subi	r19, 0xD0	; 208
    3f26:	31 93       	st	Z+, r19
    3f28:	de f6       	brtc	.-74     	; 0x3ee0 <__ultoa_invert+0xe>
    3f2a:	cf 01       	movw	r24, r30
    3f2c:	08 95       	ret
    3f2e:	46 2f       	mov	r20, r22
    3f30:	47 70       	andi	r20, 0x07	; 7
    3f32:	40 5d       	subi	r20, 0xD0	; 208
    3f34:	41 93       	st	Z+, r20
    3f36:	b3 e0       	ldi	r27, 0x03	; 3
    3f38:	0f d0       	rcall	.+30     	; 0x3f58 <__ultoa_invert+0x86>
    3f3a:	c9 f7       	brne	.-14     	; 0x3f2e <__ultoa_invert+0x5c>
    3f3c:	f6 cf       	rjmp	.-20     	; 0x3f2a <__ultoa_invert+0x58>
    3f3e:	46 2f       	mov	r20, r22
    3f40:	4f 70       	andi	r20, 0x0F	; 15
    3f42:	40 5d       	subi	r20, 0xD0	; 208
    3f44:	4a 33       	cpi	r20, 0x3A	; 58
    3f46:	18 f0       	brcs	.+6      	; 0x3f4e <__ultoa_invert+0x7c>
    3f48:	49 5d       	subi	r20, 0xD9	; 217
    3f4a:	31 fd       	sbrc	r19, 1
    3f4c:	40 52       	subi	r20, 0x20	; 32
    3f4e:	41 93       	st	Z+, r20
    3f50:	02 d0       	rcall	.+4      	; 0x3f56 <__ultoa_invert+0x84>
    3f52:	a9 f7       	brne	.-22     	; 0x3f3e <__ultoa_invert+0x6c>
    3f54:	ea cf       	rjmp	.-44     	; 0x3f2a <__ultoa_invert+0x58>
    3f56:	b4 e0       	ldi	r27, 0x04	; 4
    3f58:	a6 95       	lsr	r26
    3f5a:	97 95       	ror	r25
    3f5c:	87 95       	ror	r24
    3f5e:	77 95       	ror	r23
    3f60:	67 95       	ror	r22
    3f62:	ba 95       	dec	r27
    3f64:	c9 f7       	brne	.-14     	; 0x3f58 <__ultoa_invert+0x86>
    3f66:	00 97       	sbiw	r24, 0x00	; 0
    3f68:	61 05       	cpc	r22, r1
    3f6a:	71 05       	cpc	r23, r1
    3f6c:	08 95       	ret
    3f6e:	9b 01       	movw	r18, r22
    3f70:	ac 01       	movw	r20, r24
    3f72:	0a 2e       	mov	r0, r26
    3f74:	06 94       	lsr	r0
    3f76:	57 95       	ror	r21
    3f78:	47 95       	ror	r20
    3f7a:	37 95       	ror	r19
    3f7c:	27 95       	ror	r18
    3f7e:	ba 95       	dec	r27
    3f80:	c9 f7       	brne	.-14     	; 0x3f74 <__ultoa_invert+0xa2>
    3f82:	62 0f       	add	r22, r18
    3f84:	73 1f       	adc	r23, r19
    3f86:	84 1f       	adc	r24, r20
    3f88:	95 1f       	adc	r25, r21
    3f8a:	a0 1d       	adc	r26, r0
    3f8c:	08 95       	ret

00003f8e <__divmodsi4>:
    3f8e:	05 2e       	mov	r0, r21
    3f90:	97 fb       	bst	r25, 7
    3f92:	1e f4       	brtc	.+6      	; 0x3f9a <__divmodsi4+0xc>
    3f94:	00 94       	com	r0
    3f96:	0e 94 de 1f 	call	0x3fbc	; 0x3fbc <__negsi2>
    3f9a:	57 fd       	sbrc	r21, 7
    3f9c:	07 d0       	rcall	.+14     	; 0x3fac <__divmodsi4_neg2>
    3f9e:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <__udivmodsi4>
    3fa2:	07 fc       	sbrc	r0, 7
    3fa4:	03 d0       	rcall	.+6      	; 0x3fac <__divmodsi4_neg2>
    3fa6:	4e f4       	brtc	.+18     	; 0x3fba <__divmodsi4_exit>
    3fa8:	0c 94 de 1f 	jmp	0x3fbc	; 0x3fbc <__negsi2>

00003fac <__divmodsi4_neg2>:
    3fac:	50 95       	com	r21
    3fae:	40 95       	com	r20
    3fb0:	30 95       	com	r19
    3fb2:	21 95       	neg	r18
    3fb4:	3f 4f       	sbci	r19, 0xFF	; 255
    3fb6:	4f 4f       	sbci	r20, 0xFF	; 255
    3fb8:	5f 4f       	sbci	r21, 0xFF	; 255

00003fba <__divmodsi4_exit>:
    3fba:	08 95       	ret

00003fbc <__negsi2>:
    3fbc:	90 95       	com	r25
    3fbe:	80 95       	com	r24
    3fc0:	70 95       	com	r23
    3fc2:	61 95       	neg	r22
    3fc4:	7f 4f       	sbci	r23, 0xFF	; 255
    3fc6:	8f 4f       	sbci	r24, 0xFF	; 255
    3fc8:	9f 4f       	sbci	r25, 0xFF	; 255
    3fca:	08 95       	ret

00003fcc <__muluhisi3>:
    3fcc:	0e 94 1b 20 	call	0x4036	; 0x4036 <__umulhisi3>
    3fd0:	a5 9f       	mul	r26, r21
    3fd2:	90 0d       	add	r25, r0
    3fd4:	b4 9f       	mul	r27, r20
    3fd6:	90 0d       	add	r25, r0
    3fd8:	a4 9f       	mul	r26, r20
    3fda:	80 0d       	add	r24, r0
    3fdc:	91 1d       	adc	r25, r1
    3fde:	11 24       	eor	r1, r1
    3fe0:	08 95       	ret

00003fe2 <__mulshisi3>:
    3fe2:	b7 ff       	sbrs	r27, 7
    3fe4:	0c 94 e6 1f 	jmp	0x3fcc	; 0x3fcc <__muluhisi3>

00003fe8 <__mulohisi3>:
    3fe8:	0e 94 e6 1f 	call	0x3fcc	; 0x3fcc <__muluhisi3>
    3fec:	82 1b       	sub	r24, r18
    3fee:	93 0b       	sbc	r25, r19
    3ff0:	08 95       	ret

00003ff2 <__udivmodsi4>:
    3ff2:	a1 e2       	ldi	r26, 0x21	; 33
    3ff4:	1a 2e       	mov	r1, r26
    3ff6:	aa 1b       	sub	r26, r26
    3ff8:	bb 1b       	sub	r27, r27
    3ffa:	fd 01       	movw	r30, r26
    3ffc:	0d c0       	rjmp	.+26     	; 0x4018 <__udivmodsi4_ep>

00003ffe <__udivmodsi4_loop>:
    3ffe:	aa 1f       	adc	r26, r26
    4000:	bb 1f       	adc	r27, r27
    4002:	ee 1f       	adc	r30, r30
    4004:	ff 1f       	adc	r31, r31
    4006:	a2 17       	cp	r26, r18
    4008:	b3 07       	cpc	r27, r19
    400a:	e4 07       	cpc	r30, r20
    400c:	f5 07       	cpc	r31, r21
    400e:	20 f0       	brcs	.+8      	; 0x4018 <__udivmodsi4_ep>
    4010:	a2 1b       	sub	r26, r18
    4012:	b3 0b       	sbc	r27, r19
    4014:	e4 0b       	sbc	r30, r20
    4016:	f5 0b       	sbc	r31, r21

00004018 <__udivmodsi4_ep>:
    4018:	66 1f       	adc	r22, r22
    401a:	77 1f       	adc	r23, r23
    401c:	88 1f       	adc	r24, r24
    401e:	99 1f       	adc	r25, r25
    4020:	1a 94       	dec	r1
    4022:	69 f7       	brne	.-38     	; 0x3ffe <__udivmodsi4_loop>
    4024:	60 95       	com	r22
    4026:	70 95       	com	r23
    4028:	80 95       	com	r24
    402a:	90 95       	com	r25
    402c:	9b 01       	movw	r18, r22
    402e:	ac 01       	movw	r20, r24
    4030:	bd 01       	movw	r22, r26
    4032:	cf 01       	movw	r24, r30
    4034:	08 95       	ret

00004036 <__umulhisi3>:
    4036:	a2 9f       	mul	r26, r18
    4038:	b0 01       	movw	r22, r0
    403a:	b3 9f       	mul	r27, r19
    403c:	c0 01       	movw	r24, r0
    403e:	a3 9f       	mul	r26, r19
    4040:	70 0d       	add	r23, r0
    4042:	81 1d       	adc	r24, r1
    4044:	11 24       	eor	r1, r1
    4046:	91 1d       	adc	r25, r1
    4048:	b2 9f       	mul	r27, r18
    404a:	70 0d       	add	r23, r0
    404c:	81 1d       	adc	r24, r1
    404e:	11 24       	eor	r1, r1
    4050:	91 1d       	adc	r25, r1
    4052:	08 95       	ret

00004054 <_exit>:
    4054:	f8 94       	cli

00004056 <__stop_program>:
    4056:	ff cf       	rjmp	.-2      	; 0x4056 <__stop_program>
